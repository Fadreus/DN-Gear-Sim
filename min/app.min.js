"use strict";!function(){function l(l){l.when("/about",{templateUrl:"ui/about/about.html",controller:"AboutCtrl as about"}).when("/setup",{templateUrl:"ui/nav/setup.html",controller:"SetupCtrl"}).when("/test",{templateUrl:"ui/nav/test.html",controller:"TestCtrl"}).when("/items",{templateUrl:"ui/search/everything-search.html",controller:"ItemsCtrl as items",reloadOnSearch:!1}).when("/",{templateUrl:"ui/welcome.html"}).when("/builds",{templateUrl:"ui/builds/build-list.html",controller:"BuildListCtrl as buildList"}).when("/build/:buildName*",{templateUrl:"ui/builds/build-list.html",controller:"BuildListCtrl as buildList"}).when("/view-group/:region?",{templateUrl:"ui/builds/view-group.html",controller:"ViewGroupCtrl"}).when("/edit-build/:buildName*",{templateUrl:"ui/builds/edit-build.html",controller:"EditBuildCtrl as editGroup"}).when("/new-build",{templateUrl:"ui/builds/edit-build.html",controller:"EditBuildCtrl as editGroup"}).when("/delete-build/:name*",{templateUrl:"ui/builds/delete-build.html",controller:"DeleteBuildCtrl as deleteBuild"}).when("/reload-build/:name*",{templateUrl:"ui/builds/reload-build.html",controller:"ReloadBuildCtrl as ctrl"}).when("/search/:cat?",{templateUrl:"ui/search/search.html",controller:"ItemSearchCtrl as ctrl",reloadOnSearch:!1}).when("/item",{templateUrl:"ui/item/item.html",controller:"ItemCtrl"}).when("/item/:region?/:i*",{templateUrl:"ui/item/item.html",controller:"ItemCtrl"}).when("/export",{templateUrl:"ui/nav/export.html",controller:"ExportCtrl"}).when("/talismans",{templateUrl:"ui/builds/build-talismans.html",controller:"BuildTalismansCtrl as ctrl"}).when("/publish",{templateUrl:"ui/online/publish.html",controller:"PublishCtrl as ctrl"}).when("/profile/:uid?",{templateUrl:"ui/online/profile.html",controller:"ProfileCtrl as ctrl"}).when("/published",{templateUrl:"ui/online/published.html",controller:"PublishedCtrl as ctrl"}).when("/import",{templateUrl:"ui/builds/build-import.html",controller:"BuildImportCtrl as ctrl"}).when("/published/:uid/:buildName*",{templateUrl:"ui/online/published.html",controller:"PublishedCtrl as ctrl"}).when("/build-search/:jobId?",{templateUrl:"ui/online/build-search.html",controller:"BuildSearchCtrl as ctrl"}).otherwise({redirectTo:"/"})}angular.module("dnsim").config(["$routeProvider",l])}();
"use strict";!function(){angular.module("dnsim").controller("AboutCtrl",["$window",function(t){document.body.className="default-back",t.document.title="dngearsim | ABOUT/FAQ"}])}();
"use strict";!function(){angular.module("dnsim").filter("escape",[function(){function n(n){return n?window.encodeURIComponent(n):""}return n}])}();
"use strict";!function(){angular.module("dnsim").filter("percentage",[function(){function n(n){return"number"==typeof n?Math.round(100*n*100)/100+"%":n}return n.$stateful=!1,n}])}();
"use strict";angular.module("dnsim").controller("buildActionsCtrl",["$location","saveHelper","exportLinkHelper",function(i,t,e){var l=this;this.deleteGroup=function(){i.path("/delete-build/"+l.buildName)},this.editGroup=function(){i.path("/edit-build/"+l.buildName)},this.copyGroup=function(){var e=t.importGroup(l.buildName,l.build.items);t.saveBuild(e,e,l.build),i.path("/build/"+e)},this.reloaded=!1,this.reloadGroup=function(){i.path("/reload-build/"+l.buildName)},this.createShortUrl=function(){e.createShortUrl(l.buildName,l.build)},this.setShortUrl=function(){if(l.build){var i=e.createGroupLink(l.buildName,l.build);l.build.shortUrl=sessionStorage.getItem(i)}},this.setShortUrl()}]).directive("dngearsimBuildActions",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build",onChange:"&onChange"},controller:"buildActionsCtrl",controllerAs:"buildActions",templateUrl:"ui/builds/build-actions.html"}});
"use strict";angular.module("dnsim").controller("buildExportActionCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset",function(t,e,l,r,i,o,n,u,a,d,s){function c(){var t=new Blob([JSON.stringify(p.build,null,1)],{type:"text/plain;charset=utf-8"});saveAs(t,"dngearsim-"+p.buildName+".json")}var p=this;p.export=c}]).directive("dngearsimBuildExportAction",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build"},controller:"buildExportActionCtrl",controllerAs:"ctrl",templateUrl:"ui/builds/build-export-action.html"}});
"use strict";angular.module("dnsim").controller("BuildImportCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset",function(e,l,t,i,a,r,n,o,u,d,s){function m(l){var t=l.target.files;if(console.log("importing files",t),t&&t.length){var i=t[0].name,a=new FileReader;a.readAsText(t[0]),a.onload=function(){b.build=JSON.parse(a.result),i&&i.length>5?(b.buildName=i.substr(0,i.length-5),b.buildName=b.buildName.replace("dngearsim-","")):b.buildName="imported build",e()}}}function p(){var e=r.importGroup(b.buildName,b.build.items);r.saveBuild(e,e,b.build),l.path("/build/"+e)}var b=this;b.onFileChange=m,b.copyLocally=p}]);
"use strict";function buildItemListController(e,n,t){var a=this;a.getCategoryItems=function(){var e=n.getItemsByCategory(a.build.items);return a.category.name in e?e[a.category.name]:[]};var i={},r="";a.getSubCategories=function(){if(r!=a.category.name){i={},r=a.category.name;var e=[],t=a.build.items.sort(function(e,n){return e.exchangeType-n.exchangeType});if("increasing gems"==a.category.name)e=_.filter(t,function(e){return e.increasingGemSlots>0});else if("offensive gems"==a.category.name)e=_.filter(t,function(e){return e.offensiveGemSlots>0});else if("imprint"==a.category.name){var o=n.byName("costume");e=_.filter(t,function(e){return n.isItemForCat(o,e)})}_.each(e,function(e){e.exchangeType in i||(i[e.exchangeType]={names:[],slots:0,exchangeType:e.exchangeType}),i[e.exchangeType].names.push(e.name),"increasing gems"==a.category.name?i[e.exchangeType].slots+=e.increasingGemSlots:"offensive gems"==a.category.name?i[e.exchangeType].slots+=e.offensiveGemSlots:i[e.exchangeType].slots=1}),i[0]=null}return i},a.getNumTaken=function(n){var t,i=0;if("imprint"==a.category.name)t=n.exchangeType;else{t=_.find(e.gemExchanges,function(e){return e.exchange==n.exchangeType}).id}if(t){var r=a.getCategoryItems();_.each(r,function(e){e.gemSlot==t&&++i})}return i},a.isInSubCat=function(n,t){if(!t&&!n.gemSlot)return!0;var i;if("imprint"==a.category.name)i=n.gemSlot;else{var r=_.find(e.gemExchanges,function(e){return e.id==n.gemSlot});r&&(i=r.exchange)}if(t||!i)return!(!t||!i)&&i==t.exchangeType;var o=a.getSubCategories();return!_.find(o,function(e){return null!=e&&i==e.exchangeType})||void 0},a.canMove=function(){return"increasing gems"==a.category.name||"offensive gems"==a.category.name||"imprint"==a.category.name},a.getGemSlot=function(n){if("imprint"==a.category.name)return n.exchangeType;if(n){var t=_.find(e.gemExchanges,function(e){return e.exchange==n.exchangeType});return t||console.log("cannot find exchange for",n),t.id}},a.move=function(e,n){e.gemSlot=a.getGemSlot(n),t.updatedSavedItems(a.buildName,a.build.items),a.handleChange()},a.allowMoreItems=function(){return!a.category.maxCat||a.getCategoryItems().length<a.category.maxCat},a.handleChange=function(){r="",a.onChange()},a.handleItemEdit=function(){t.updatedSavedItems(a.buildName,a.build.items),a.handleChange()},a.cancelEdit=function(){a.onChange()},a.canEdit=function(e){return"custom"==e.typeName||"weapons"==e.typeName||"armour"==e.typeName||"offensive gems"==e.typeName||"increasing gems"==e.typeName},a.removeItem=function(e){r="",e.removeItem=!0;var n=[];angular.forEach(a.build.items,function(e,t){e&&!e.removeItem&&n.push(e)}),a.build.items=n,t.updatedSavedItems(a.buildName,n),a.handleChange()}}buildItemListController.$inject=["hCodeValues","itemCategory","saveHelper"],angular.module("dnsim").directive("dngearsimBuildItemList",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build",category:"=category",server:"=server",onChange:"&onChange"},controller:buildItemListController,controllerAs:"buildCtrl",templateUrl:"ui/builds/build-item-list.html"}});
"use strict";angular.module("dnsim").controller("buildItemCtrl",["$timeout","statHelper","saveHelper","hCodeValues",function(t,e,l,i){function m(t){if(t.gemSlot)for(var e=0;e<a.gemSlots.length;++e)if(a.gemSlots[e].id==t.gemSlot)return a.gemSlots[e].name}function n(){a.item.fullStats=a.item.stats,null!=a.item.enchantmentStats&&a.item.enchantmentStats.length>0&&(a.item.fullStats=i.mergeStats(a.item.enchantmentStats,a.item.fullStats)),null!=a.item.sparkStats&&a.item.sparkStats.length>0&&(a.item.fullStats=i.mergeStats(a.item.sparkStats,a.item.fullStats))}var a=this;a.updateItem=n,a.gemSlots=i.gemExchanges,a.getGemSlotName=m}]).directive("dngearsimBuildItem",function(){return{scope:!0,bindToController:{item:"=item",editMode:"=editMode",onChange:"&onChange",cancelEdit:"&cancelEdit"},controller:"buildItemCtrl",controllerAs:"ctrl",templateUrl:"ui/builds/build-item.html"}});
"use strict";angular.module("dnsim").controller("BuildListCtrl",["$window","$location","$routeParams","$timeout","saveHelper",function(t,e,s,u,i){var r=this;document.body.className="saved-back",this.setupBuilds=function(){r.savedItems=i.getSavedItems(),r.buildNames=Object.keys(r.savedItems).sort(),r.builds=[];for(var t=0;t<r.buildNames.length;++t)r.builds.push({name:r.buildNames[t],build:r.savedItems[r.buildNames[t]]})},this.setupBuilds(),"buildName"in s?s.buildName in r.savedItems?s.buildName!=this.currentGroup&&(this.currentGroup=s.buildName,i.saveBuildSelection(this.currentGroup,this.savedItems)):this.currentGroup=null:this.currentGroup&&this.currentGroup in this.savedItems?e.path("/build/"+this.currentGroup):this.currentGroup=null,this.currentGroup?t.document.title="dngearsim | "+this.currentGroup:t.document.title="dngearsim | BUILDS",this.anyItems=function(){return Object.keys(this.savedItems).length>0},this.createGroup=function(){e.path("/new-build")},this.handleChange=function(){r.setupBuilds(),u()},this.toggleGroup=function(t){i.saveBuildSelection(t,this.savedItems),e.url("/build/"+t)},this.publish=function(){e.url("/publish")},this.search=function(){e.url("/build-search")}}]);
"use strict";function buildStatsController(t,l){var r=this;r.exportStatCard=function(){var t=l.convertStats(r.build,r.buildName,r.stats.calculatedStats),a=l.cardImportUrl+"?dngsimport="+btoa(JSON.stringify(t));window.open(a)}}buildStatsController.$inject=["statHelper","dvStatcardHelper"],angular.module("dnsim").directive("dngearsimBuildStats",function(){return{scope:!0,bindToController:{stats:"=stats",build:"=build",buildName:"=buildName"},controller:buildStatsController,controllerAs:"statsCtrl",templateUrl:"ui/builds/build-stats.html"}});
"use strict";angular.module("dnsim").controller("buildSummaryCtrl",["$routeParams","$location","hCodeValues","statHelper","itemCategory",function(t,e,i,l,a){var r=this;this.stats=l.getBuildStats(this.build),this.itemsByCategory=a.getItemsByCategory(this.build.items),this.getSaveDate=function(t){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleDateString()}},this.getSaveTime=function(t){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleTimeString()}},this.getBuildSummary=function(t){var e="";return angular.forEach(r.itemsByCategory,function(t,i){t.length>0&&(e.length>0&&(e+=", "),e+=t.length+" "+i)}),e}}]).directive("dngearsimBuildSummary",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build"},controller:"buildSummaryCtrl",controllerAs:"buildCtrl",templateUrl:"ui/builds/build-summary.html"}});
"use strict";angular.module("dnsim").controller("BuildTalismansCtrl",["$window","$location","$routeParams","$timeout","saveHelper","statHelper","jobs","hCodeValues","itemColumnsToLoad","character",function(e,t,s,a,n,m,i,r,u,c){function l(e,t){return e&&t?Math.round(1e4*(1-t/e))/100:0}var o=this;if(e.document.title="dngearsim | TALISMANS",e.scrollTo(0,0),this.savedItems=n.getSavedItems(),this.groupNames=Object.keys(this.savedItems),this.groupNames||(this.groupNames=[]),this.groupNames.length>0?this.groupName=n.getCurrentBuild():this.groupName=null,this.groupName&&this.groupName in this.savedItems||this.groupNames.length>0&&(this.groupName=this.groupNames[0]),this.groupName){this.getGroupCalcStats=function(){if(null==this.groupCalcStats){var e=o.savedItems[o.groupName];e&&(this.groupCalcStats=m.getCalculatedStatsFromItems(e,e.items))}return this.groupCalcStats},this.getBuild=function(){return o.savedItems[o.groupName]},this.pickup=function(e){o.selectedIndex=e,o.replaceHPAffectAmount=[],o.replaceMDmgAffectAmount=[],o.replacePDmgAffectAmount=[],o.replaceAvgDmgAffectAmount=[]},this.headers=["+100%","+75%","+25%","+0%"],this.summaryStatIds=[];for(var d in r.stats)r.stats[d].summaryDisplay&&this.summaryStatIds.push(d);this.pcIndexes={},this.pcIndexes[100]=0,this.pcIndexes[75]=1,this.pcIndexes[25]=2,this.pcIndexes[0]=3,this.selectedIndex=-1,this.rows=[],this.updateRows=function(){o.rows=[],angular.forEach(o.savedItems[o.groupName].items,function(e,t){if("talisman"==e.typeName){var s=o.pcIndexes[e.enchantmentNum];s||0==s||(s=3);for(var a=0;;){if(o.rows[a]||(o.rows[a]=o.makeFakeCells()),o.rows[a][s].index<0){e.enchantmentNum||(e.enchantmentNum=0);var n=o.makeCell(e,t);o.rows[a][s]=n;break}a++}}}),o.rows.length<3&&(o.rows[o.rows.length+1]=o.makeFakeCells())},this.makeFakeCells=function(e){return[o.makeCell({enchantmentNum:100},-1),o.makeCell({enchantmentNum:75},-2),o.makeCell({enchantmentNum:25},-3),o.makeCell({enchantmentNum:0},-4)]},this.makeCell=function(e,t){return{item:e,index:t}},this.click=function(e){o.selectedIndex==-1?e.index>=0&&o.pickup(e.index):o.move(e)},this.move=function(e){var t=o.savedItems[o.groupName].items;if(e.index>=0){var s=e.item.enchantmentNum;o.setTalisman(e.item,t[o.selectedIndex].enchantmentNum),o.setTalisman(t[o.selectedIndex],s),t[e.index]=t[o.selectedIndex],t[o.selectedIndex]=e.item}else{var n=t[o.selectedIndex];o.setTalisman(n,e.item.enchantmentNum),t.splice(o.selectedIndex,1),t.push(n)}o.groupCalcStats=null,o.selectedIndex=-1,o.updateRows(),o.replaceAffectAmount={},a()},this.setTalisman=function(e,t){var s=[];angular.forEach(e.stats,function(e,a){t&&s.push({id:e.id,max:e.max*(t/100)})}),e.enchantmentStats=s,e.enchantmentNum=t,e.fullStats=r.mergeStats(e.enchantmentStats,e.stats)},this.replaceAffectAmount={},this.getReplaceAffectAmount=function(e,t,s){if(this.initReplaceAffects(t,s),this.replaceAffectAmount[t])return this.replaceAffectAmount[t][e]},this.initReplaceAffects=function(e,t){if(!o.replaceAffectAmount[e]&&o.selectedIndex!=-1){this.replaceAffectAmount[e]={};var s=o.savedItems[o.groupName],a=s.items[o.selectedIndex],n=[],i=[];t.stats&&(angular.forEach(t.stats,function(e,t){n.push({id:e.id,max:e.max*(a.enchantmentNum/100)})}),i=r.mergeStats(n,t.stats)),n=[],angular.forEach(a.stats,function(e,s){n.push({id:e.id,max:e.max*(t.enchantmentNum/100)})});var u=r.mergeStats(n,a.stats),c=[{stats:i},{stats:u}];angular.forEach(s.items,function(e,s){t!==e&&a!==e&&c.push(e)});var d=m.getCalculatedStatsFromItems(s,c),h=o.getGroupCalcStats();for(var p in r.stats)r.stats[p].summaryDisplay&&(o.replaceAffectAmount[e][p]=l(o.getStat(p,d).max,o.getStat(p,h).max))}},this.getStatName=function(e){var t="";if("primary"==r.stats[e].element){var s=0;o.savedItems[o.groupName].element&&(s=o.savedItems[o.groupName].element.id),t+=r.elements[s].name}else if("secondary"==r.stats[e].element){var s=0;o.savedItems[o.groupName].secondaryElement&&(s=o.savedItems[o.groupName].secondaryElement.id),t+=r.elements[s].name}return t+" "+r.stats[e].name},this.getStat=function(e,t){for(var s=t.length,a=0;a<s;++a)if(t[a].id==e)return t[a];return{id:e,max:0}},this.save=function(){n.updatedSavedItems(o.groupName,o.savedItems[o.groupName].items),t.path("/build/"+o.groupName)},this.updateRows()}}]);
"use strict";function bulidController(e,t,a,n){var r=this;r.stats=t.getBuildStats(r.build);var i=localStorage.getItem("selectedItemCategory");r.category=a.byName(i),r.category&&!r.category.hideInBuild||(i="titles",r.category=a.byName("titles")),r.getCategoryItems=function(){var e=a.getItemsByCategory(r.build.items);return r.category.name in e?e[r.category.name]:[]},r.changeCategory=function(){r.xsView=null,r.moveItem=null,r.categoryChanging=!0,e(function(){r.categoryChanging=!1},0)},r.getCategories=function(){return a.categories},r.setSelectedCategory=function(e){r.category=a.byName(e),localStorage.setItem("selectedItemCategory",e)},r.getSaveDate=function(e){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleDateString()}},r.getSaveTime=function(e){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleTimeString()}},r.allowMoreItems=function(){return!r.category.maxCat||r.getCategoryItems().length<r.category.maxCat},r.getItemCount=function(){var e="",t=r.build.items;if("offensive gems"==r.category.name){var n=0,i=0;angular.forEach(t,function(e,t){e.typeName==r.category.name?i++:e.offensiveGemSlots&&(n+=e.offensiveGemSlots)}),e=i+" / "+n}else if("increasing gems"==r.category.name){var o=0,l=0,u={};angular.forEach(t,function(e,t){if(e.typeName==r.category.name){var a=e.sparkTypeId;a||(a=0),a in u||(u[a]=0),u[a]++,o++}else e.increasingGemSlots&&(l+=e.increasingGemSlots)}),e="",angular.forEach(u,function(t,a){e.length>0&&(e+="+"),e+=t}),e=o+" ("+e+") / "+l}else{var g=0;angular.forEach(t,function(e,t){e&&e.typeName==r.category.name&&g++}),e=g;var m=a.byName(r.category.name);m&&"numItemText"in m&&(e+=" / "+m.numItemText)}return e},r.newCustom=function(){var e={id:0,typeName:"custom",name:"new custom item",stats:[]};r.build.items=r.build.items.concat(e),n.updatedSavedItems(r.buildName,r.build.items),r.handleChange()},r.handleChange=function(){r.stats=t.getBuildStats(r.build),r.onChange()}}bulidController.$inject=["$timeout","statHelper","itemCategory","saveHelper"],angular.module("dnsim").directive("dngearsimBuild",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build",onChange:"&onChange",server:"=server"},controller:bulidController,controllerAs:"buildCtrl",templateUrl:"ui/builds/build.html"}});
"use strict";angular.module("dnsim").controller("DeleteBuildCtrl",["$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad",function(e,t,n,a,i,l,o,s){this.newGroup=!0,"name"in t&&(this.name=t.name),this.delete=function(){a.deleteBuild(this.name),e.path("/builds/")}}]);
"use strict";!function(){function e(e,t,n,o,a,r,l,s,m,i,u){var p=this;p.savedItems=a.getSavedItems(),p.group={},p.newGroup=!0,"buildName"in n?(p.groupName=n.buildName,p.groupName in p.savedItems&&(p.group=p.savedItems[p.groupName],p.newGroup=!1)):p.groupName="",p.oldGroupName=p.groupName,p.heroStats=[],p.elements=s.elements,p.damageTypes=s.damageTypes,p.initDamageType=function(){p.job&&(p.group.damageType?p.damageType=p.group.damageType:p.newGroup&&"DamageType"in p.job.d?p.job.d.DamageType?p.damageType=s.damageTypes[2]:p.damageType=s.damageTypes[1]:p.damageType=s.damageTypes[0])},p.initDefaultElement=function(){var e=s.elements[0],t=s.elements[0];if(p.job&&p.job.d){var n=p.job.d.EnglishName;"CRUSADES"==n||"INQUISITOR"==n||"GUARDIAN"==n||"SAINT"==n||"SILVERHUNTER"==n||"STINGBREEZER"==n?(e=s.elements[3],t=s.elements[3]):"RAVEN"==n||"MAJESTY"==n||"SOULEATER"==n||"DARKSUMMONER"==n||"ABYSSWALKER"==n||"BLACKMARA"==n||"PHYSICIAN"==n?(e=s.elements[4],t=s.elements[4]):"SALEANA"==n||"RIPPER"==n||"DARKAVENGER"==n?(e=s.elements[1],t=s.elements[1]):"ELESTRA"==n?(e=s.elements[2],t=s.elements[2]):"ADEPT"==n?(e=s.elements[1],t=s.elements[2]):"LIGHTFURY"==n&&(e=s.elements[3],t=s.elements[4])}p.newGroup&&(p.element=e,p.secondaryElement=t),p.element||(p.element=e),p.secondaryElement||(p.secondaryElement=e)},p.group.element?p.element=p.group.element:p.element=s.elements[0],p.group.secondaryElement?p.secondaryElement=p.group.secondaryElement:p.secondaryElement=s.elements[0],"critResist"in p.group?p.critResist=p.group.critResist:p.critResist=20,"eleResist"in p.group?p.eleResist=p.group.eleResist:p.eleResist=0,p.group.enemyLevel?p.enemyLevel=p.group.enemyLevel:p.enemyLevel=93,p.group.playerLevel?p.playerLevel=p.group.playerLevel:p.playerLevel=93,p.group.heroLevel&&p.group.heroLevel>0?p.heroLevel=p.group.heroLevel:p.heroLevel=1,p.init=function(){var e=l.getFinalJobs();e.length>0&&o(function(){"job"in p.group&&angular.forEach(e,function(e,t){e.id==p.group.job.id&&(p.job=e)}),p.initDamageType(),p.initDefaultElement(),p.setHeroStats()})},p.setJob=function(){e.scrollTo(0,0),o(function(){p.initDamageType(),p.initDefaultElement()})},u.init(),i.init(function(){p.init()}),p.getStatCap=function(e,t){return i.getStatCaps(t)[e]},p.getJobConversion=function(e){return i.getConversions(p.job.id)[e]},p.getJobBaseStat=function(e){return i.getBaseStats(p.playerLevel,p.job.id)[e]},p.invalidGroupName=function(){return!p.groupName||!(!(p.groupName in p.savedItems)||!p.newGroup&&p.groupName==p.oldGroupName)},p.ok=function(){var e=i.getStatCaps(p.enemyLevel),n=i.getStatCaps(p.playerLevel),o=i.getConversions(p.job.id),r=i.getBaseStats(p.playerLevel,p.job.id),l=i.getHeroStats(p.heroLevel);p.newGroup&&(p.oldGroupName=p.groupName,a.importGroup(p.groupName,[])),a.saveBuild(p.oldGroupName,p.groupName,{enemyLevel:p.enemyLevel,playerLevel:p.playerLevel,heroLevel:p.heroLevel,job:p.job,damageType:p.damageType,element:p.element,secondaryElement:p.secondaryElement,critResist:p.critResist,eleResist:p.eleResist,enemyStatCaps:e,playerStatCaps:n,conversions:o,baseStats:r,heroStats:l}),t.path("/build/"+p.groupName)},p.setHeroStats=function(){p.heroStats=i.getHeroStats(p.heroLevel)},o(function(){var e=document.getElementById("groupNameInput");e&&(e.focus(),e.setSelectionRange(0,9999))})}e.$inject=["$window","$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad","character","region"],angular.module("dnsim").controller("EditBuildCtrl",e)}();
"use strict";angular.module("dnsim").controller("quickAddCtrl",["$timeout","statHelper","saveHelper","quickAdd","itemCategory","jobs","dntData","exportLinkHelper",function(t,e,n,i,a,o,s,r){var u=this;u.startedForCat="",u.stepNumber=0,u.datas=[],u.options=[],this.setOptions=function(){u.hasStarted()&&(u.options=i.getOptions(u.category,u.build,u.datas),1==u.options.length&&u.selectOption(u.options[0]))},this.selectOption=function(t){var e=i.createData(t,u.category,u.stepNumber);if(u.datas.push(e),u.stepNumber++,i.isValidStepNumber(u.category,u.stepNumber))u.setOptions();else{var n=i.getItem(u.datas),a=r.getDntFiles(n);angular.forEach(a,function(t,e){s.init(e,t,function(){},function(){u.tryToAddItem(a,n)})}),u.tryToAddItem(a,n)}},this.tryToAddItem=function(t,e){if(!s.anyLoading()){var i=!0;if(angular.forEach(t,function(t,e){s.isLoaded(e)||(i=!1)}),i&&u.datas.length>0){u.cancel();var a=r.reloadItem(e);a.gemSlot=u.gemSlot,n.saveItem(u.buildName,a),u.build.items.push(a),u.onChange()}}},this.reset=function(){u.stepNumber=0,u.datas=[],t(function(){u.setOptions()})},this.hasStarted=function(){return u.startedForCat==u.category.name},this.start=function(){u.startedForCat=u.category.name,o.init(function(){},u.reset),a.init(u.category.name,u.reset)},this.hasOptions=function(){return i.hasOptions(u.category,u.build,[])},this.cancel=function(){u.startedForCat="",u.reset()},this.back=function(){if(0==u.stepNumber)u.cancel();else{do{u.stepNumber--,u.datas.pop();var t=i.getOptions(u.category,u.build,u.datas)}while(t.length<=1&&u.stepNumber>0);u.setOptions()}},s.init("exchange.lzjson",null,function(){},u.reset)}]).directive("dngearsimQuickAdd",function(){return{scope:!0,bindToController:{category:"=category",build:"=build",buildName:"=buildName",gemSlot:"=gemSlot",onChange:"&onChange"},controller:"quickAddCtrl",controllerAs:"quickAdd",templateUrl:"ui/builds/quick-add.html"}});
"use strict";function reloadBuildCtrl(e,a,n,i,t,d,l,o){function r(){}function u(){if(!s.reloaded){var e=!0,a=l.getDntFiles(s.build);if(angular.forEach(a,function(a,n){if(!t.isLoaded(n))return void(e=!1)}),e&&o.isLoaded()){var n=l.reloadGroup(s.name,s.build);i.updatedSavedItems(s.name,n),s.build.items=n,s.reloaded=!0}}}var s=this;"name"in a&&(s.name=a.name);var m=i.getSavedItems();s.name in m&&(s.build=m[s.name]),s.reloaded=!1,s.reload=function(){d(),s.reloaded=!1,o.init(r,u);var e=l.getDntFiles(s.build);angular.forEach(e,function(e,a){t.init(a,e,r,u)})},s.goToBuild=function(){e.path("/build/"+s.name)}}angular.module("dnsim").controller("ReloadBuildCtrl",["$location","$routeParams","$timeout","saveHelper","dntData","dntReset","groupHelper","translations",reloadBuildCtrl]);
"use strict";angular.module("dnsim").controller("ViewGroupCtrl",["$scope","$window","region","$location","$routeParams","saveHelper","dntData","$timeout","translations","dntReset","exportLinkHelper","groupHelper","jobs","character","statHelper","hCodeValues",function(e,t,a,s,l,n,i,o,r,d,m,p,u,y,v,b){function c(){var t=!0;angular.forEach(p.getDntFiles(e.build),function(e,a){i.isLoaded(a)||(t=!1)}),t&&!i.anyLoading()&&r.isLoaded()&&u.isLoaded()&&o(function(){var t=e.buildName,a=e.build;e.job=u.getById(e.job.id),e.enemyStatCaps=y.getStatCaps(e.enemyLevel),e.playerStatCaps=y.getStatCaps(e.playerLevel),e.job&&(e.conversions=y.getConversions(e.job.id),e.baseStats=y.getBaseStats(e.playerLevel,e.job.id)),e.heroStats=y.getHeroStats(e.heroLevel);var s=p.reloadGroup(t,a);e.savedItems={},e.build={items:s,lastUpdate:a.lastUpdate,enemyLevel:e.enemyLevel,playerLevel:e.playerLevel,heroLevel:e.heroLevel,job:e.job,damageType:e.damageType,element:e.element,secondaryElement:e.secondaryElement,enemyStatCaps:e.enemyStatCaps,playerStatCaps:e.playerStatCaps,conversions:e.conversions,baseStats:e.baseStats,heroStats:e.heroStats},e.savedItems[t]=e.build,e.stats=v.getBuildStats(e.build);var l=m.createGroupLink(e.buildName,e.build);e.build.shortUrl=sessionStorage.getItem(l)})}function g(){}if(document.body.className="saved-back",a.setLocationByName(l.region),e.buildName="",e.build={},"g"in l&&"i"in l){e.buildName=l.g,t.document.title="dngearsim | "+l.g,e.enemyLevel=l.e,e.playerLevel=l.p,e.heroLevel=l.h,e.job={id:l.j},e.damageType=b.damageTypes[l.d],e.element=b.elements[l.t],e.secondaryElement=b.elements[l.s];var L=[],S=l.i;angular.forEach(S.split(","),function(e,t){var a=m.decodeItem(e);a.id>0&&L.push(a)}),e.build={},e.savedItems={},e.savedItems[e.buildName]=e.build,e.build.items=L,e.isLoading=!0,angular.forEach(p.getDntFiles(e.build),function(e,t){i.init(t,e,g,c)}),r.init(g,c),u.init(g,c),y.init(c),o()}e.anyItems=Object.keys(e.savedItems).length>0,e.copyGroup=function(){var t=n.importGroup(e.buildName,e.build.items);n.saveBuild(t,t,{enemyLevel:e.enemyLevel,playerLevel:e.playerLevel,heroLevel:e.heroLevel,job:e.job,damageType:e.damageType,element:e.element,secondaryElement:e.secondaryElement,critResist:e.critResist,eleResist:e.eleResist,enemyStatCaps:e.enemyStatCaps,playerStatCaps:e.playerStatCaps,conversions:e.conversions,baseStats:e.baseStats,heroStats:e.heroStats}),s.url("/build/"+t)}}]);
"use strict";!function(){function e(e,t,a,r,n,s,m){function i(e,t){return e&&t?Math.round(1e4*(1-t/e))/100:0}function u(){a.saveBuildSelection(o.groupName,o.savedItems)}var o=this;if(this.savedItems=a.getSavedItems(),this.groupNames=Object.keys(this.savedItems),this.groupName||(this.groupName=a.getCurrentBuild()),this.groupName in this.savedItems||(this.groupName=null),!this.groupName&&this.savedItems)for(var c in this.savedItems){this.groupName=c;break}if(this.groupName){this.summaryStatIds=[];for(var p in e.stats)e.stats[p].summaryDisplay&&this.summaryStatIds.push(p);this.clearGroup=function(){o.addAffectAmount=null,o.replaceAffectAmount={},o.groupItems=null,o.groupCalcStats=null},o.tryToSetItem=function(e){if(!m.anyLoading()){var t=!0;angular.forEach(e,function(e,a){m.isLoaded(a)||(t=!1)}),t&&(o.item=s.reloadItem(o.item))}};var l=s.getDntFiles(o.item);angular.forEach(l,function(e,t){m.init(t,e,function(){},function(){o.tryToSetItem(l)})}),o.tryToSetItem(l),n.$watch("editCtrl.item",function(){o.clearGroup()}),this.getAddAffectAmount=function(e){return this.initAddAffects(),this.addAffectAmount[e]},this.getReplaceAffectAmount=function(e,t,a){return this.initReplaceAffects(t,a),this.replaceAffectAmount[t][e]},this.getGroupCalcStats=function(){if(null==this.groupCalcStats){var e=o.savedItems[o.groupName];e&&(this.groupCalcStats=t.getCalculatedStatsFromItems(e,e.items))}return this.groupCalcStats},this.getBuild=function(){return o.savedItems[o.groupName]},this.initAddAffects=function(){if(!o.addAffectAmount){var a=o.getGroupCalcStats(),r=o.savedItems[o.groupName],n=[];r.items&&(n=r.items.concat([o.item]));var s=t.getCalculatedStatsFromItems(r,n);this.addAffectAmount={};for(var m in e.stats)e.stats[m].summaryDisplay&&(o.addAffectAmount[m]=i(o.getStat(m,s).max,o.getStat(m,a).max))}},this.initReplaceAffects=function(a,r){if(!o.replaceAffectAmount[a]){var n=o.savedItems[o.groupName],s=[o.item];angular.forEach(n.items,function(e,t){r!==e&&s.push(e)});var m=t.getCalculatedStatsFromItems(n,s),u=o.getGroupCalcStats();this.replaceAffectAmount[a]={};for(var c in e.stats)e.stats[c].summaryDisplay&&(o.replaceAffectAmount[a][c]=i(o.getStat(c,m).max,o.getStat(c,u).max))}},this.getStat=function(e,t){for(var a=t.length,r=0;r<a;++r)if(t[r].id==e)return t[r];return{id:e,max:0}},this.getStatName=function(t){var a="";if("primary"==e.stats[t].element){var r=0;o.savedItems[o.groupName].element&&(r=o.savedItems[o.groupName].element.id),a+=e.elements[r].name}else if("secondary"==e.stats[t].element){var r=0;o.savedItems[o.groupName].secondaryElement&&(r=o.savedItems[o.groupName].secondaryElement.id),a+=e.elements[r].name}return a+" "+e.stats[t].name},this.getGroupItems=function(){function e(e){if(e){for(var a=0,r=0;r<t.length;++r)e.indexOf(t[r])>0&&a++;return a}return-1}var t;if(null==o.groupItems&&o.groupName&&o.groupName in o.savedItems&&o.item&&o.item.typeName){o.groupItems=[];var a;"plate"!=o.item.itemSource&&"tman"!=o.item.itemSource||(a=_.find(o.savedItems[o.groupName].items,function(e){return e.sparkTypeId==o.item.sparkTypeId&&o.item.itemSource==e.itemSource}));var r=[];a?r.push(a):(_.each(o.savedItems[o.groupName].items,function(e){e.exchangeType&&"gem"!=e.itemSource&&"plate"!=e.itemSource&&"tman"!=e.itemSource?e.exchangeType==o.item.exchangeType&&r.push(e):e.typeName==o.item.typeName&&r.push(e)}),o.item.name&&(t=o.item.name.split(" ")),r.sort(function(t,a){return e(a.name)-e(t.name)})),angular.forEach(r,function(e,t){e.name==o.item.name&&o.groupItems.push(e)}),angular.forEach(r,function(e,t){e.name!=o.item.name&&o.groupItems.push(e)})}return o.groupItems},this.hasMaxExchangable=function(){var e=r.byName(this.item.typeName),t=this.getGroupItems();if(("plate"==o.item.itemSource||"tman"==o.item.itemSource)&&_.find(t,function(e){return e.sparkTypeId==o.item.sparkTypeId}))return!0;if(e&&e.maxCat&&t.length>=e.maxCat)return!0;if(e&&e.maxExchange&&t.length>=e.maxExchange){for(var a=0;a<t.length;++a)if(!t[a].exchangeType)return!1;return!0}return!1},this.nextGroup=function(){var e=!1,t=null;angular.forEach(o.groupNames,function(a,r){e&&null==t&&(t=a),a==o.groupName&&(e=!0)}),null==t&&(t=o.groupNames[0]),o.groupName=t,u(),o.clearGroup()},this.prevGroup=function(){var e=!1,t=null;angular.forEach(o.groupNames,function(a,r){a==o.groupName&&(e=!0),e||(t=a)}),null==t&&(t=o.groupNames[o.groupNames.length-1]),o.groupName=t,u(),o.clearGroup()},this.addToGroup=function(){a.saveItem(o.groupName,o.item),this.savedItems=a.getSavedItems(),o.clearGroup(),o.onChange()},this.replace=function(e){e.replaceItem=!0;var t=[];angular.forEach(o.savedItems[o.groupName].items,function(e,a){e.replaceItem?t.push(o.item):t.push(e)}),a.updatedSavedItems(o.groupName,t),this.savedItems=a.getSavedItems(),o.clearGroup(),o.onChange()}}}e.$inject=["hCodeValues","statHelper","saveHelper","itemCategory","$scope","exportLinkHelper","dntData"],angular.module("dnsim").directive("dngearsimGroupAssignment",function(){return{scope:!0,bindToController:{item:"=item",compact:"=compact",onChange:"&onChange"},controller:e,controllerAs:"editCtrl",templateUrl:"ui/item/group-assignment.html"}})}();
"use strict";angular.module("dnsim").controller("itemEditCustomCtrl",["hCodeValues","$scope",function(t,i){if(null!=this.item&&("custom"==this.item.itemSource||"custom"==this.item.typeName)){var e=this;this.statMap={},_.forEach(e.item.stats,function(t){e.statMap[t.id]=t.max});for(var a in t.stats)i.$watch("editCtrl.statMap["+a+"]",function(t,i){if(t!=i){var a=!1,s=[];for(var m in e.statMap)if(e.statMap[m]&&Number(e.statMap[m])){s.push({id:Number(m),max:Number(e.statMap[m])});var o=!1;_.each(e.item.stats,function(t){t.id==m&&(o=!0,m in e.statMap&&t.max==e.statMap[m]||(a=!0))}),o||(a=!0)}else _.each(e.item.stats,function(t){t.id==m&&(a=!0)});a&&(e.item.stats=s,e.onChange())}})}}]).directive("dngearsimItemEditCustom",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditCustomCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-custom.html"}});
"use strict";angular.module("dnsim").controller("itemEditEnchantmentCtrl",["dntData","hCodeValues","items","$timeout","translations","itemColumnsToLoad","itemFactory",function(t,n,e,m,a,i,h){function c(t){return"petLevelDnt"in s.itemType?s.enchantments[t].PetLevel:s.enchantments[t].EnchantLevel}var s=this;if(s.item&&s.item.enchantmentId&&("itemSource"in this.item&&(s.itemType=e[s.item.itemSource]),s.itemType&&("enchantDnt"in s.itemType||"petLevelDnt"in s.itemType))){s.itemType.enchantDnt&&t.init(s.itemType.enchantDnt,i.enchantDnt,null,s.getEnchantments),s.itemType.petLevelDnt&&(t.init(s.itemType.petDnt,i.petDnt,null,s.getEnchantments),t.init(s.itemType.petLevelDnt,i.petLevelDnt,null,s.getEnchantments)),s.enchantments=null,s.enchantment=null,s.enchantmentAfter=null,s.enchantmentCost="",s.enhancementOptions=[],null==s.item.enchantmentStats&&(s.item.enchantmentStats=[]),this.setEnchantment=function(){if(s.item.enchantmentStats=[],s.enchantments&&s.enchantments.length>0){"number"!=typeof s.item.enchantmentNum&&(s.item.enchantmentNum=0,s.onChange());for(var t=0;t<s.enchantments.length;++t)s.item.enchantmentNum==c(t)?(s.enchantment=s.enchantments[t],s.item.enchantmentStats=n.getStats(s.enchantment)):s.item.enchantmentNum+1==c(t)&&(s.enchantmentAfter=s.enchantments[t],s.enchantmentAfter.NeedCoin<1e4?s.enchantmentCost=Math.round(s.enchantmentAfter.NeedCoin/1e3)/10+"g":s.enchantmentCost=Math.round(s.enchantmentAfter.NeedCoin/1e4)+"g")}},this.setPetLevel=function(){if(s.item.enchantmentStats=[],s.enchantments&&s.enchantments.length>0){"number"!=typeof s.item.enchantmentNum&&(s.item.enchantmentNum=6,s.onChange());for(var t=0;t<s.enchantments.length;++t)s.item.enchantmentNum==s.enchantments[t].PetLevel&&(s.enchantment=s.enchantments[t],s.item.enchantmentStats=n.getStats(s.enchantment))}},this.isMaxEnchantLevel=function(){if(null!=s.enchantments&&s.enchantments.length>0&&"number"==typeof s.item.enchantmentNum){for(var t=0;t<s.enchantments.length;++t)if(s.item.enchantmentNum+1==c(t))return!1;return!0}return!1},this.setEnchantmentNum=function(t){s.item.enchantmentNum=t,s.enhancementOptions=[],"petLevelDnt"in s.itemType?s.setPetLevel():s.setEnchantment(),s.onChange()},this.nextEnchantment=function(){for(var t=s.item.enchantmentNum;0==t||s.enchantments[t-1];++t)0==t?s.enhancementOptions.push({number:0}):s.enhancementOptions.push(s.getOption(t-1))},this.prevEnchantment=function(){s.enhancementOptions=[];for(var t=s.item.enchantmentNum;t>0;--t)s.enhancementOptions.push(s.getOption(t-1));s.enhancementOptions.push({number:0})},this.getOption=function(t){return{number:c(t),stats:n.getStats(s.enchantments[t])}},this.getEnchantments=function(){return!s.enchantments&&s.item&&s.item.enchantmentId&&(s.itemType.enchantDnt&&t.isLoaded(s.itemType.enchantDnt)&&(s.enchantments=t.find(s.itemType.enchantDnt,"EnchantID",s.item.enchantmentId),s.setEnchantment()),s.itemType.petLevelDnt&&t.isLoaded(s.itemType.petLevelDnt)&&(s.enchantments=t.find(s.itemType.petLevelDnt,"PetLevelTypeID",s.item.enchantmentId),s.setPetLevel())),s.enchantments};var o="all-items.lzjson";this.showMaterials=function(){t.init(o,null,function(){},function(){m(function(){if(s.enchantmentAfter){s.materials=[];for(var n=1;n<=5;++n){var e=s.enchantmentAfter["NeedItemID"+n],m=s.enchantmentAfter["NeedItemCount"+n];if(e>0&&m>0){var a=t.find(o,"id",e);if(0==a.length)s.materials.push({num:m,name:"unknown ("+e+")"});else{var i=a[0];if(i){var c={item:h.createBasicItem(i),num:m};s.materials.push(c)}}}}}})})},t.isLoaded(o)&&this.showMaterials()}}]).directive("dngearsimItemEditEnchantment",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditEnchantmentCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-enchantment.html"}});
"use strict";angular.module("dnsim").controller("itemEditPotentialCtrl",["dntData","items","hCodeValues","itemColumnsToLoad",function(t,i,n,e){function l(){var t={},i=null;return null!=o.potentials&&angular.forEach(o.potentials,function(e,l){var o=[];angular.forEach(n.getStats(e),function(t,i){n.stats[t.id].hide||o.push(t)}),o.length>0?t[e.id]=o:i||(t[e.id]=[],i=e.id)}),t}var o=this;this.potentials=null,this.potential=null,this.changingPotentials=!1,this.potentialStats={},null!=this.item&&("itemSource"in this.item&&(this.itemType=i[this.item.itemSource]),this.itemType&&this.item.pid&&"potentialDnt"in this.itemType&&(o.itemType.potentialDnt&&t.init(o.itemType.potentialDnt,e.potentialDnt,null,o.getPotentials),this.getPotentials=function(){if(!o.potentials&&o.item&&o.item.pid&&"potentialDnt"in o.itemType){var i=t.find(o.itemType.potentialDnt,"id",o.item.pid);1==i.length?(o.potential=i[0],o.potentials=t.find(o.itemType.potentialDnt,"PotentialID",o.potential.PotentialID),o.potentialStats=l(o.potentials)):"potentialDntEx"in o.itemType&&(i=t.find(o.itemType.potentialDntEx,"id",o.item.pid),1==i.length&&(o.potential=i[0],o.potentials=t.find(o.itemType.potentialDntEx,"PotentialID",o.potential.PotentialID),o.potentialStats=l(o.potentials)))}return o.potentials},this.nextPotential=function(){for(var t=0;t<o.potentials.length;++t)if(o.potential.id==o.potentials[t].id)return o.potential=o.potentials[t+1],o.item.pid=o.potential.id,o.onChange(),void(this.changingPotentials=!0)},this.prevPotential=function(){for(var t=0;t<o.potentials.length;++t)if(o.potential.id==o.potentials[t].id)return o.potential=o.potentials[t-1],o.item.pid=o.potential.id,o.onChange(),void(this.changingPotentials=!0)},this.changePotential=function(t){for(var i=0;i<o.potentials.length;++i)if(t==o.potentials[i].id)return o.potential=o.potentials[i],o.item.pid=o.potential.id,o.changingPotentials=!1,void o.onChange()},this.isFirstPotential=function(){return this.getPotentials(),!o.potentials||o.potentials.length<=1||!o.potential||o.potential.id==o.potentials[0].id},this.isLastPotential=function(){return this.getPotentials(),!o.potentials||o.potentials.length<=1||!o.potential||o.potential.id==o.potentials[o.potentials.length-1].id}))}]).directive("dngearsimItemEditPotential",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditPotentialCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-potential.html"}});
"use strict";angular.module("dnsim").controller("itemEditSkillCtrl",["$timeout","dntData","statHelper",function(t,i,n){function e(){return"skillleveltable_character"+m.item.baseJobName+m.item.pve+".lzjson"}function l(t){}if(null!=this.item&&"skills"==this.item.itemSource){this.item.enchantmentNum||(this.item.enchantmentNum=1);var m=this;this.initSkills=function(){var n=e();i.init(n,null,l,function(){t(function(){m.skillData=i.find(n,"SkillIndex",m.item.id)})})},this.nextEnchantment=function(){this.skillData&&this.item.enchantmentNum<this.skillData.length&&(this.item.enchantmentNum++,m.onChange())},this.isMaxSkillLevel=function(){return this.skillData&&this.item&&this.item.enchantmentNum>=this.skillData.length},this.prevEnchantment=function(){this.item.enchantmentNum>0?this.item.enchantmentNum--:this.item.enchantmentNum=0,m.onChange()},i.init(e(),null,null,m.initSkills)}}]).directive("dngearsimItemEditSkill",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditSkillCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-skill.html"}});
"use strict";angular.module("dnsim").controller("itemEditSparkCtrl",["dntData","hCodeValues","items","itemColumnsToLoad",function(t,e,r,i){function n(){var t=-1;return s.item.sparkId>0&&angular.forEach(s.sparks,function(e,r){if(e.id==s.item.sparkId)return void(t=r)}),t}var s=this;null!=this.item&&("itemSource"in this.item&&(this.itemType=r[this.item.itemSource]),s.itemType&&s.itemType.sparkDnt&&(s.itemType.sparkDnt&&t.init(s.itemType.sparkDnt,i.sparkDnt,null,s.getSparks),this.sparks=null,this.nextSpark=function(){var t=n();++t>=s.sparks.length&&(t=0);var r=s.sparks[t];s.item.sparkId=r.id,s.item.sparkStats=e.getStats(r),s.onChange()},this.isMoreSparks=function(){return null!=s.sparks&&n()>=s.sparks.length-1},this.isFirstSpark=function(){return 0==n()},this.prevSpark=function(){var t=n();--t<0&&(t=s.sparks.length-1);var r=s.sparks[t];s.item.sparkId=r.id,s.item.sparkStats=e.getStats(r),s.onChange()},this.removeSpark=function(){s.item.sparkId=null,s.item.sparkStats=null,s.onChange()},this.getSparks=function(){if(null==s.item||null==s.itemType)return null;if(null==s.sparks){var e=s.item.sparkTypeId;e&&t.isLoaded(s.itemType.sparkDnt)&&(s.sparks=t.find(s.itemType.sparkDnt,"PotentialID",e))}return s.sparks}))}]).directive("dngearsimItemEditSpark",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditSparkCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-spark.html"}});
"use strict";angular.module("dnsim").controller("itemEditTalismanCtrl",[function(){null!=this.item&&"tman"==this.item.itemSource&&(this.setTalisman=function(t){if(0==t)this.item.enchantmentNum=null,this.item.enchantmentStats=[];else{this.item.enchantmentNum=t;var i=[];angular.forEach(this.item.stats,function(e,n){i.push({id:e.id,max:e.max*(t/100)})}),this.item.enchantmentStats=i}this.onChange()})}]).directive("dngearsimItemEditTalisman",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditTalismanCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-talisman.html"}});
"use strict";angular.module("dnsim").controller("itemEditCtrl",["hCodeValues",function(t){var e=this;e.item&&(e.onUpdateItem=function(){e.updateItem()})}]).directive("dngearsimItemEdit",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange",updateItem:"&updateItem"},controller:"itemEditCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-edit.html"}});
"use strict";angular.module("dnsim").controller("itemViewBoxCtrl",["$timeout","dntData","itemFactory",function(t,e,i){if(null!=this.item){if(46!=this.item.typeId&&8!=this.item.typeId&&112!=this.item.typeId&&122!=this.item.typeId&&142!=this.item.typeId)return void console.log("not box item type "+this.item.typeId);var o,m=this,l=["itemdroptable.lzjson","itemdroptable_abyss.lzjson","itemdroptable_apprentice.lzjson","itemdroptable_cook.lzjson","itemdroptable_darklair.lzjson","itemdroptable_dimension.lzjson","itemdroptable_disjoint.lzjson","itemdroptable_dnexpedition.lzjson","itemdroptable_event.lzjson","itemdroptable_farm.lzjson","itemdroptable_fishing.lzjson","itemdroptable_guildwar.lzjson","itemdroptable_item.lzjson","itemdroptable_monsteritem.lzjson","itemdroptable_propdrop.lzjson","itemdroptable_pvp.lzjson","itemdroptable_randomcompound.lzjson","itemdroptable_stageclear.lzjson","itemdroptable_themepark.lzjson","itemdroptable_union.lzjson"];46==this.item.typeId||112==this.item.typeId||122==this.item.typeId||142==this.item.typeId?o=["all-items.lzjson","charmitemtable.lzjson","charmitemtable_common.lzjson"]:8==this.item.typeId&&(o=["all-items.lzjson"].concat(l));for(var n=0;n<o.length;++n)e.init(o[n],null,function(){},function(){t(function(){m.initBoxContents()})});this.initBoxContents=function(){for(var t=0;t<o.length;++t)if(!e.isLoaded(o[t]))return;var i=e.find(this.item.fileName+".lzjson","id",this.item.id);if(i.length>0){var l=i[0];m.items=[],46==m.item.typeId||112==m.item.typeId||122==m.item.typeId||142==m.item.typeId?m.getCharmItems(l.TypeParam1):8==m.item.typeId&&m.getPouchItems(l.TypeParam1)}},this.getPouchItems=function(t){for(var e=0;e<l.length;++e)m.getPouchItemsFromFile(t,l[e])},this.getPouchItemsFromFile=function(t,o){var l=e.find(o,"id",t);if(0==l.length);else{var n=l[0].GoldMin,r=0;do{r++;var s=l[0]["IsGroup"+r],a=l[0]["Item"+r+"Index"],d=l[0]["Item"+r+"Info"];if(a)if(s)m.getPouchItems(a,o);else{var p=e.find("all-items.lzjson","id",a);if(p.length>0){var h=i.createBasicItem(p[0]);m.items.push({count:d,gold:n,item:h})}}}while(a)}},this.getCharmItems=function(t){for(var o=["charmitemtable.lzjson","charmitemtable_common.lzjson"],l=0;l<o.length;++l)for(var n=e.getData(o[l]),r=0;r<n.length;++r){var s=n[r];if(s.CharmNum==t&&s.Look)if(s.CharmType)this.getCharmItems(s.ItemID);else{var a=e.find("all-items.lzjson","id",s.ItemID);a.length>0&&m.items.push({count:s.Count,gold:s.Gold,item:i.createBasicItem(a[0])})}}}}}]).directive("dngearsimItemViewBox",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewBoxCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-box.html"}});
"use strict";angular.module("dnsim").controller("itemViewCraftCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,i,n,r){if(null!=this.item){var l=this;l.crafts=[];for(var o=["itemcompoundtable.lzjson","itemcompoundtable_custom.lzjson","itemcompoundtable_glyph.lzjson","itemcompoundtable_jewel.lzjson","itemcompoundtable_renewal.lzjson","itemcompoundtable_set.lzjson"],a=o.concat(["all-items.lzjson"]),s=0;s<a.length;++s)e.init(a[s],null,function(){},function(){t(function(){l.initCrafts()})});this.initCrafts=function(){for(var t=0;t<a.length;++t)if(!e.isLoaded(a[t]))return;l.crafts=[];for(var t=0;t<o.length;++t)l.initCraft(o[t]);for(var i=[],t=0;t<l.crafts.length;++t){for(var n=!1,r=0;r<i.length;++r)if(l.crafts[t].gold==i[r].gold&&l.crafts[t].items.length==i[r].items.length){n=!0;for(var s=0;s<l.crafts[t].items.length;++s)l.crafts[t].items[s].item.id==i[r].items[s].item.id&&l.crafts[t].items[s].num==i[r].items[s].num||(n=!1)}n||i.push(l.crafts[t])}l.crafts=i},this.initCraft=function(t){for(var n=e.find(t,"SuccessItemID1",l.item.id),r=0;r<n.length;++r){for(var o=n[r],a={id:o.id,fileName:t.replace(".lzjson",""),gold:o.Cost/100/100,items:[]},s=0;;){s++;var m="Slot"+s+"Id",c="Slot"+s+"Num";if(!(m in o))break;var f=e.find("all-items.lzjson","id",o[m]);f.length>0&&a.items.push({item:i.createBasicItem(f[0]),num:o[c]})}l.crafts.push(a)}}}}]).directive("dngearsimItemViewCraft",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewCraftCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-craft.html"}});
"use strict";angular.module("dnsim").controller("itemViewExtractionCtrl",["$timeout","dntData","itemFactory","items",function(t,i,e,n){if(null!=this.item){for(var o=this,r=["itemdroptable_disjoint.lzjson","all-items.lzjson"],a=0;a<r.length;++a)i.init(r[a],null,function(){},function(){t(function(){o.initExtract()})});this.initExtract=function(){for(var t=0;t<r.length;++t)if(!i.isLoaded(r[t]))return;var a,l=e.getItemData(o.item);l&&l.DisjointDrop1>0&&(a=l.DisjointDrop1);var m=n[o.item.itemSource];if(m&&l.EnchantID)for(var s=i.find(m.enchantDnt,"EnchantID",l.EnchantID),t=0;t<s.length;++t)if(s[t].EnchantLevel==o.item.enchantmentNum){a=s[t].DisjointDrop;break}o.items=[],a&&o.getItems(a)},this.getGold=function(){var t=e.getItemData(this.item);return Number(t.Disjointamount)/100/100},this.getItems=function(t){var n=i.find("itemdroptable_disjoint.lzjson","id",t);if(0==n.length);else for(var r=n[0].GoldMin,a=1;"Item"+a+"Index"in n[0];){var l=n[0]["IsGroup"+a],m=n[0]["Item"+a+"Index"],s=n[0]["Item"+a+"Info"];if(m)if(l)o.getItems(m);else{var c=i.find("all-items.lzjson","id",m);c.length>0&&o.items.push({count:s,gold:r,item:e.createBasicItem(c[0])})}a++}}}}]).directive("dngearsimItemViewExtraction",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewExtractionCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-extraction.html"}});
"use strict";angular.module("dnsim").controller("itemViewPlateCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,i){function n(){for(var t=e.find(r,"ItemID",l.item.id),n=0;n<t.length;++n)for(var a=t[n],m=0;;){m++;var s="CompoundTableIndex"+m;if(!(s in a))break;var u=e.find(o,"id",a[s]);u.length>0&&l.items.push(i.createBasicItem(u[0]))}}if(null!=this.item){var l=this;l.items=[];for(var r="platetable.lzjson",o="all-items.lzjson",a=[r,o],m=0;m<a.length;++m)e.init(a[m],null,function(){},function(){t(function(){l.initSets()})});this.initSets=function(){for(var t=0;t<a.length;++t)if(!e.isLoaded(a[t]))return;l.items=[],n()}}}]).directive("dngearsimItemViewPlate",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewPlateCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-plate.html"}});
"use strict";angular.module("dnsim").controller("itemViewSetCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,o){function n(t){for(var n=e.find(t,"SetItemID",i.item.setId),s=0;s<n.length;++s){var l=e.find(a,"id",n[s].id);l.length>0&&i.items.push(o.createBasicItem(l[0]))}}if(null!=this.item){var i=this;i.items=[];for(var s=["partstable.optimised.json","partstable_cash.optimised.json","partstable_common2014.optimised.json","partstable_common2015.optimised.json","partstable_common2016.lzjson","partstable_commoncash.lzjson","partstable_equipment.optimised.json","partstable_event.lzjson","partstable_guild.lzjson","partstable_pvp.optimised.json","partstable_reboot.optimised.json","partstable_skilllevelup.lzjson","weapontable.optimised.json","weapontable_cash.optimised.json","weapontable_common2014.optimised.json","weapontable_common2015.optimised.json","weapontable_common2016.lzjson","weapontable_commoncash.lzjson","weapontable_equipment.optimised.json","weapontable_event.lzjson","weapontable_guild.lzjson","weapontable_pvp.optimised.json","weapontable_reboot.optimised.json"],a="all-items.lzjson",l=s.concat([a]),m=0;m<l.length;++m)e.init(l[m],null,function(){},function(){t(function(){i.initSets()})});this.initSets=function(){for(var t=0;t<l.length;++t)if(!e.isLoaded(l[t]))return;i.items=[];for(var t=0;t<s.length;++t)n(s[t])}}}]).directive("dngearsimItemViewSet",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewSetCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-set.html"}});
"use strict";angular.module("dnsim").controller("itemViewShopCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(e,t,s,o,i){function a(e){for(var a=t.find(e,"itemindex",m.item.id),h=0;h<a.length;++h){var l=a[h],r=t.find(n,"id",l.PurchaseItem1),u=t.find(n,"id",l.PurchaseItem2),c={shopName:l.ShopID,tabName:i.translate(l.TabNameID),gold:0,nightmarePoints:0,ladderPoints:0,item1:s.createBasicItem(r[0]),item2:s.createBasicItem(u[0]),numItem1:0,numItem2:0};c.shopName in o.shopNames&&(c.shopName=o.shopNames[c.shopName]),1==l.PurchaseType1?c.gold+=l.PurchaseItemValue1:3==l.PurchaseType1?c.ladderPoints+=l.PurchaseItemValue1:8==l.PurchaseType1?c.nightmarePoints+=l.PurchaseItemValue1:c.numItem1=l.PurchaseItemValue1,1==l.PurchaseType2?c.gold+=l.PurchaseItemValue2:3==l.PurchaseType2?c.ladderPoints+=l.PurchaseItemValue2:8==l.PurchaseType2?c.nightmarePoints+=l.PurchaseItemValue2:c.numItem2=l.PurchaseItemValue2,c.gold=c.gold/100/100,m.shopCosts.push(c)}}if(null!=this.item){var m=this;m.shopCosts=[];for(var n="all-items.lzjson",h=["combinedshoptable_cash.lzjson","combinedshoptable_system.lzjson","combinedshoptable.lzjson",n],l=0;l<h.length;++l)t.init(h[l],null,function(){},function(){e(function(){m.initShops()})});this.initShops=function(){for(var e=0;e<h.length;++e)if(!t.isLoaded(h[e]))return;m.shopCosts=[],a("combinedshoptable.lzjson"),a("combinedshoptable_system.lzjson"),a("combinedshoptable_cash.lzjson");for(var s=[],e=0;e<m.shopCosts.length;++e){for(var o=!1,i=0;i<s.length;++i)if(m.shopCosts[e].tabName==s[i].tabName&&m.shopCosts[e].gold==s[i].gold&&m.shopCosts[e].item1.id==s[i].item1.id&&m.shopCosts[e].numItem1.id==s[i].numItem1.id&&m.shopCosts[e].item2.id==s[i].item2.id&&m.shopCosts[e].numItem2.id==s[i].numItem2.id){o=!0;break}o||s.push(m.shopCosts[e])}m.shopCosts=s}}}]).directive("dngearsimItemViewShop",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewShopCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-shop.html"}});
"use strict";angular.module("dnsim").controller("itemViewTransferCtrl",["$timeout","dntData","itemFactory","hCodeValues",function(e,t,n,i){if(null!=this.item){var r=this;r.matchingTransfers=[];for(var a=["enchanttransfertable.lzjson","all-items.lzjson","enchanttransferitemtable.lzjson"],l=0;l<a.length;++l)t.init(a[l],null,function(){},function(){e(function(){r.initTransfers()})});this.initTransfers=function(){for(var e=0;e<a.length;++e)if(!t.isLoaded(a[e]))return;r.matchingTransfers=[];var l=t.find("enchanttransferitemtable.lzjson","ItemID",r.item.id);if(l&&l.length>0)for(var m=t.find("enchanttransfertable.lzjson","EnchantLevel",r.item.enchantmentNum),e=0;e<m.length;++e){var s=m[e];if(s.Rank==r.item.rank.id&&s.LevelLimit==r.item.levelLimit){var o=t.find("all-items.lzjson","id",s.NeedItemID1),f=t.find("all-items.lzjson","id",s.NeedItemID2);r.matchingTransfers.push({level:s.ResultLevel,enchantmentNum:s.ResultEnchantLevel,gold:s.NeedCoin/100/100,rank:i.rankNames[s.ResultRank],numItem1:s.NeedItemCount1,item1:n.createBasicItem(o[0]),numItem2:s.NeedItemCount2,item2:n.createBasicItem(f[0])})}}}}}]).directive("dngearsimItemViewTransfer",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewTransferCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-transfer.html"}});
"use strict";angular.module("dnsim").controller("ItemCtrl",["$scope","$window","dntData","hCodeValues","items","jobs","exportLinkHelper","$routeParams","translations","$location","region","itemFactory","$timeout","statHelper","saveHelper",function(e,t,i,n,a,s,r,m,o,l,u,c,d,f,p){function g(){var t=s.getAllJobs();angular.forEach(t,function(t,i){t.id==e.item.needJobClass&&(e.jobName=t.name)})}function I(){var t=!1;return angular.forEach(r.getDntFiles(e.preInitItem),function(e,n){i.isLoaded(n)||(t=!0)}),!t&&o.isLoaded()&&s.isLoaded()}function h(){if(I()){if(e.item=r.reloadItem(e.preInitItem),null==e.item)return;D(),t.document.title="dngearsim | "+e.item.name,"custom"!=e.item.itemSource&&("skills"==e.item.typeName?e.item.pve&&"pvp"==e.item.pve?e.item.pve="pvp":e.item.pve="pve":e.item.needJobClass>0&&g(),v()),S()}}function S(){var t=c.getItemData(e.item);t.DisjointDrop1>0&&(e.canExtract=!0),(0==t.Type||1==t.Type)&&e.item.enchantmentNum>0&&(e.canTransfer=!0),e.item.setId&&(e.isInSet=!0),5==e.item.typeId&&(e.isPlate=!0),46==e.item.typeId||8==e.item.typeId||112==e.item.typeId||122==e.item.typeId||142==e.item.typeId?(e.hasContents=!0,e.detail="contents"):null!=e.item.typeName?(e.canUse=!0,e.detail="use"):e.canExtract?e.detail="extract":e.canTransfer?e.detail="transfer":e.isPlate?e.detail="plate":e.detail="shops"}function v(){e.item.fileName||e.item.itemSource in a&&a[e.item.itemSource].mainDnt&&(e.item.fileName=a[e.item.itemSource].mainDnt.replace(".lzjson","").replace(".json","").replace(".optimised",""))}function D(){e.item.fullStats=e.item.stats,null!=e.item.enchantmentStats&&e.item.enchantmentStats.length>0&&(e.item.fullStats=n.mergeStats(e.item.enchantmentStats,e.item.fullStats)),null!=e.item.sparkStats&&e.item.sparkStats.length>0&&(e.item.fullStats=n.mergeStats(e.item.sparkStats,e.item.fullStats))}function y(e){}function b(){var t=p.getSavedItems();e.builds=t}u.setLocationByName(m.region),t.scrollTo(0,0),e.jobName=null,e.item=r.decodeItem(m.i),"itemSource"in e.item&&(e.itemType=a[e.item.itemSource]),e.item.setStats=null,e.item.setId=null,e.detail=null,e.getDescription=function(){if(e.item.description)return e.item.description;if(e.itemType&&"title"==e.itemType.name&&o.isLoaded()&&i.isLoaded(e.itemType.mainDnt)){var t=i.find(e.itemType.mainDnt,"id",e.item.id);if(t&&t.length>0&&t[0].DescriptionID>0)return o.translate(t[0].DescriptionID,t[0].DescriptionIDParam)}else if(e.item.fileName&&i.isLoaded(e.item.fileName+".lzjson")){var t=i.find(e.item.fileName+".lzjson","id",e.item.id);if(t&&t.length>0&&t[0].DescriptionID>0)return o.translate(t[0].DescriptionID,t[0].DescriptionIDParam)}return""},e.getExchangeType=function(){if(o.isLoaded()&&i.isLoaded("exchange.lzjson")&&e.item.exchangeType>0){var t=i.find("exchange.lzjson","ExchangeType",e.item.exchangeType);if(t&&t.length>0&&t[0].NameID>0)return o.translate(t[0].NameID).toLowerCase()}return""},e.setDetail=function(t){e.detail=t},e.getNumInSet=function(){var t=e.getBuildName();return t&&e.item&&e.item.setId?f.getNumItemsForSet(e.builds[t].items,e.item.setId):0},e.getBuildName=function(){var t=p.getCurrentBuild();if(e.builds&&!(t&&t in e.builds)){var i=Object.keys(e.builds);i.length&&(t=i[0])}return t},e.getServerStorage=function(){var t=c.getItemData(e.item),i="";return t&&"IsCash"in t&&0==t.IsCash&&(t&&"AbleWStorage"in t&&(1==t.AbleWStorage?i="can server storage":0==t.AbleWStorage&&(i="not transferable")),t&&"Reversion"in t&&(i.length&&(i+=", "),0==t.Reversion?i+="can sell":1==t.Reversion&&(i+="not sellable "))),i},e.getMoreInfo=function(){var t=0,n=0;if(e.moreInfoLoaded()){var a=c.getItemData(e.item);if(a&&"IsCash"in a&&0==a.IsCash){if(a&&"SealID"in a&&"SealCount"in a){t=a.SealCount;var s=i.find("sealcounttable.lzjson","Type2",a.SealID);if(s&&s.length>0&&0==s[0].Type1){var r="Count0";e.item.enchantmentNum&&(r="Count"+e.item.enchantmentNum),r in s[0]&&(n=s[0][r])}}}else if(a&&"IsCash"in a&&"CashTradeCount"in a&&"Reversion"in a&&"AbleWStorage"in a)return 2==a.Reversion?a.CashTradeCount?"cash trade count: "+a.CashTradeCount:"can use warranty":a.AbleWStorage?"can server storage":"not tradable"}return t&&n?"can stamp "+t+" times using "+n+"  stamps":""},e.moreInfoLoaded=function(){return i.isLoaded(e.item.fileName+".lzjson")&&i.isLoaded("sealcounttable.lzjson")},e.loadMoreInfo=function(){i.init(e.item.fileName+".lzjson",null,d),i.init("sealcounttable.lzjson",null,d)},e.handleChange=function(){"custom"!=e.item.itemSource?l.search("i",r.encodeItem(e.item)):(D(),e.item=angular.copy(e.item)),b()},function(){b(),e.preInitItem=e.item,e.item=null;var t=!1;angular.forEach(r.getDntFiles(e.preInitItem),function(e,n){i.isLoaded(n)||(i.init(n,e,y,h),t=!0)}),o.isLoaded()||(o.init(y,h),t=!0),s.isLoaded()||(s.init(y,h),t=!0),t||h()}()}]);
"use strict";angular.module("dnsim").controller("ExportCtrl",["$scope","$window","saveHelper",function(e,t,a){document.body.className="default-back",t.document.title="dngearsim | EXPORT";var o=a.getSavedItems();e.exportData=JSON.stringify(o,null,1),e.save=function(){localStorage.setItem("savedItems",LZString.compressToUTF16(e.exportData))}}]);
"use strict";angular.module("dnsim").controller("HeaderCtrl",[function(){}]).directive("dngearsimHeader",function(){return{templateUrl:"ui/nav/header.html"}});
"use strict";angular.module("dnsim").controller("NavCtrl",["$scope","$location","translations","region","itemCategory","saveHelper",function(t,n,e,a,r,o){try{var i=[],s=[{path:"builds",name:"builds",icon:"menu-hamburger"},{path:"search",name:"search",icon:"search"}],l={path:"build",name:"build"},c=[{path:"builds",name:"builds",icon:"menu-hamburger"},{path:"search",name:"search",icon:"search"},l];a.init(),t.isSearch=function(){return 0==n.path().indexOf("/search")},t.isLoading=function(){return e.startedLoading&&!e.isLoaded()&&null!=a.tlocation&&""!=a.tlocation.url&&!t.noRegion()},t.noRegion=function(){return null==a.dntLocation},t.isHttpOnly=function(){return"https:"!=location.protocol&&"localhost"!=location.hostname},t.getActions=function(){try{var e=null,r=o.getCurrentBuild();r&&(t.savedItems&&r in t.savedItems||(t.savedItems=o.getSavedItems()),r in t.savedItems||(r=null)),null!=a.dntLocation&&""==a.dntLocation.url?e=i:null!=a.tlocation&&""==a.tlocation.url?e=i:r&&"null"!=r?(e=c,l.path="build/"+r,l.name=r,r in t.savedItems&&(l.build=t.savedItems[r])):e=("/view-group"==n.path()||a.dntLocation,s);var u=n.path;return angular.forEach(e,function(t,n){delete t.extraCss,u&&1==u.length?1==t.path.length&&(t.extraCss="active"):t.path&&t.path.length>1&&0==u.indexOf("/"+t.path)&&("builds"==t.path&&"/builds"!=u||(t.extraCss="active"))}),e}catch(n){t.simError=n.message,console.error(n)}}}catch(n){t.simError=n.message,console.error(n)}}]).directive("dngearsimNav",function(){return{templateUrl:"ui/nav/nav.html"}});
"use strict";angular.module("dnsim").controller("SetupCtrl",["$scope","$window","$route","$timeout","translations","dntInit","dntReset","region",function(t,n,o,e,s,i,a,l){function c(){u("current translations contain words like "+s.translate(329)+", "+s.translate(323)+" and "+s.translate(335)),t.isLoading=!1}function r(n){e(function(){null!=t.testResults&&t.testResults.push(n)})}function u(n){e(function(){null!=t.translationResults&&t.translationResults.push(n)})}document.body.className="default-back",n.document.title="dngearsim | SETUP",t.advancedSetup=!1,t.isLoading=s.startedLoading&&!s.isLoaded(),t.translationResults=[],t.hostedFiles=l.hostedFiles;var d=l.alternativeFiles.url;null==d&&(d=""),t.location=d,""==t.location?t.testResults=["No location set"]:t.testResults=["Using location "+t.location],t.setLocation=function(n){t.location=n,t.isLoading=!0,t.saveLocation(),a(),t.translationResults=[];var o=localStorage.getItem("UIStrings_file");null!=o&&o.indexOf(n)!=-1||sessionStorage.removeItem("UIStrings"),s.reset(),s.location=n,s.init(u,c)},t.resetSessionData=function(){t.testResults=["session data reset.. reloading page"],l.tlocation=null,l.dntLocation=null,s.reset(),sessionStorage.clear(),localStorage.clear(),this.saveLocation(),e(function(){location.hash="",location.reload(!0)})},t.loadUiString=function(){t.translationResults=[],sessionStorage.removeItem("UIStrings"),a(),s.reset(),s.location=l.tlocation.url,s.init(u,c)},t.saveLocation=function(){a(),""!=t.location&&(l.setCustomUrl(t.location),l.init(),l.alternativeFiles.region==l.tlocation.region&&(s.reset(),s.init(u,c)),t.testResults=["Location saved","Using location "+t.location])},t.testLocation=function(){""!=t.location&&(t.testResults=["Using location "+t.location,"Loading all data used by the app"],s.init(r,function(){i(r)}))}}]);
"use strict";!function(){function l(l,t,e,s,i){function u(){o.job&&s.getClassBuilds(o.job).then(function(l){o.jobBuilds=l?l:{}})}var o=this;o.maxDisplay=15,o.totalNumResults=0,i.init(null,function(){l.jobId&&(o.job=i.getById(l.jobId),u())}),this.setJob=function(){e(function(){t.search("jobId",o.job.id)})},this.showMoreResults=function(l){o.maxDisplay=o.totalNumResults+l,o.totalNumResults=0},o.allResults=null,o.getFilteredBuilds=function(){if(null==o.allResults){o.allResults=[];for(var l in o.jobBuilds)for(var t in o.jobBuilds[l])o.allResults.push({uid:l,name:t,data:o.jobBuilds[l][t]})}for(var e=[],s=0;s<o.allResults.length;++s){var i=o.allResults[s];if(o.filter&&o.filter.length>0){var u=o.filter.toUpperCase();if(i.name.toUpperCase().indexOf(u)==-1&&(!i.data.guild||i.data.guild.toUpperCase().indexOf(u)==-1))continue}if(e.push(i),e.length>=o.maxDisplay)break}return o.totalNumResults=e.length,e}}angular.module("dnsim").controller("BuildSearchCtrl",["$routeParams","$location","$timeout","onlineService","jobs",l])}();
"use strict";!function(){function i(i,t,n,e){var o=this;o.uid=t.uid,function(){n.getUserBuilds(o.uid).then(function(i){o.storedBuilds=i?i:{}})}(),function(){n.getProfile(o.uid).then(function(i){o.profile=i?i:{}})}(),this.load=function(t,n){var u=e.importGroup(t,n.items);e.saveBuild(u,u,n),o.builds=e.getSavedItems(),i.path("/build/"+u)}}angular.module("dnsim").controller("ProfileCtrl",["$location","$routeParams","onlineService",i])}();
"use strict";!function(){function e(e,t,i,l,u){function s(){var e=r.getUser();e&&i.getUserBuilds(e.uid).then(function(e){r.storedBuilds=e?e:{}})}function n(){var e=r.getUser();e&&i.getProfile(e.uid).then(function(e){r.profile=e?e:{}})}function o(e){console.log(e)}var r=this;r.show=l.show,i.login().then(function(e){s(),n(),r.builds=t.getSavedItems()}),this.saveProfile=function(){i.saveProfile(r.profile).then(n).catch(o)},this.getUser=function(){return i.getUser()},this.save=function(e,t){t.lastUpdate=(new Date).getTime(),i.saveBuild(e,t).then(s).catch(o),r.publishBuild=null},this.startPublish=function(e){e in r.storedBuilds&&(r.builds[e].region||(r.builds[e].region=r.storedBuilds[e].region),r.builds[e].about||(r.builds[e].about=r.storedBuilds[e].about),r.builds[e].guild||(r.builds[e].guild=r.storedBuilds[e].guild)),r.builds[e].region||(r.builds[e].region=u.dntLocation.region),r.publishBuild=e},this.deleteAccount=function(){i.deleteAccount(r.storedBuilds)},this.getBuildLimit=function(){return r.profile&&r.profile.maxBuilds?r.profile.maxBuilds:15},this.getNumStoredBuilds=function(){return _.size(r.storedBuilds)},this.getNumBuilds=function(){return _.size(r.builds)},this.load=function(e,i){var l=t.importGroup(e,i.items);t.saveBuild(l,l,i),r.builds=t.getSavedItems()},this.signOut=function(){i.signOut()},r.deleteLocal=function(e){r.localToDelete=e},r.getAllBuildNames=function(){var e=_.keys(r.builds).concat(_.keys(r.storedBuilds));return _.uniq(e.sort(),!0)},r.reallyDeleteLocal=function(e){t.updatedSavedItems(e,[]),r.localToDelete=null,r.builds=t.getSavedItems()},r.deleteServer=function(e){r.serverToDelete=e},r.reallyDeleteServer=function(e){i.deleteBuild(e,r.storedBuilds[e]).then(s),r.serverToDelete=null}}angular.module("dnsim").controller("PublishCtrl",["$location","saveHelper","onlineService","$routeParams","region",e])}();
"use strict";!function(){function i(i,u,t,e,l){var n=this;n.uid=t.uid,n.buildName=t.buildName,function(){i.getBuild(n.uid,n.buildName).then(function(i){i?(n.build=i,n.stats=l.getBuildStats(i)):n.build={}})}(),function(){i.getProfile(n.uid).then(function(i){n.profile=i?i:{}})}(),n.copyLocally=function(){var i=e.importGroup(n.buildName,n.build.items);e.saveBuild(i,i,n.build),u.path("/build/"+i)}}angular.module("dnsim").controller("PublishedCtrl",["onlineService","$location","$routeParams","saveHelper","statHelper",i])}();
"use strict";angular.module("dnsim").controller("RegionCtrl",["$timeout","$route","$routeParams","$location","translations","region","$http",function(t,n,o,i,e,r,a){function c(){d.region.dntLocation&&d.region.dntLocation.url&&a.get(d.region.dntLocation.url+"/Version.cfg").then(function(t){if(t&&t.data){var n=t.data.split("\r\n");if(n.length){var o=n[0].split(" ");o.length>1&&(d.dntVersion="v"+o[1])}}})}var d=this;d.override=r.getOverride(),r.init(),e.init(function(t){},function(){t()}),d.region=r,d.tHoverLocation=r.tlocation,d.hoverLocation=r.dntLocation,d.edit=null==r.dntLocation,d.dntVersion="",c(),d.getDntLocation=function(){return r.dntLocation},d.getTlocation=function(){return r.tlocation},d.getHostedFiles=function(){return r.hostedFiles},d.getWorldName=function(){return e.isLoaded()?e.translate(10169):""},d.setTLocation=function(t){r.setTLocation(t),d.edit=!1},d.setLocation=function(t){d.override||d.setTLocation(null),o.region?(o.region=t.region,n.updateParams(o),n.reload()):r.setLocation(t),d.edit=!1,c()},d.setOverride=function(t){r.setOverride(t),d.override=t,d.edit=t}}]).directive("dngearsimRegion",function(){return{templateUrl:"ui/region/region.html",controllerAs:"ctrl"}});
"use strict";!function(){function t(t,e,s,n,i,m){this.customItems=n.customItems,this.maxDisplay=10,this.currentResults=0,null==this.nameSearch&&(this.nameSearch=""),this.getResults=function(){return this.customItems},this.getNewStatName=function(){return""==this.nameSearch||null==this.nameSearch?"unnamed custom item":this.nameSearch},this.createCustomItem=function(){""!=this.nameSearch&&null!=this.nameSearch||(this.nameSearch=this.getNewStatName()),s.path("/item/_custom:."+this.nameSearch)}}angular.module("dnsim").directive("dngearsimCustomItems",function(){return{scope:{},bindToController:{},controller:["$window","saveHelper","$location","hCodeValues","itemCategory","$timeout",t],controllerAs:"customItems",templateUrl:"ui/search/custom-items.html"}})}();
"use strict";!function(){function e(e,n,a,i,r,t,l,m){var o=this;o.everything=null,o.maxDisplay=32,o.currentResults=0,o.results=null,o.minLevel=1,o.maxLevel=99,o.version="all",o.versions=[o.version];var v=Number(localStorage.getItem("minLevel"));a.minLevel&&(v=Number(a.minLevel)),v>0&&v<100&&(o.minLevel=v),o.origMinLevel=v;var s=Number(localStorage.getItem("maxLevel"));a.maxLevel&&(s=Number(a.maxLevel)),s>0&&s<100&&(o.maxLevel=s),o.origMaxLevel=s,o.nameSearch||(o.nameSearch=localStorage.getItem("nameSearch"),a.name&&(o.nameSearch=a.name),null==o.nameSearch&&(o.nameSearch="")),e.document.title="dngearsim | ALL ITEM SEARCH",o.initeverything=function(){if(m.isLoaded(c)&&l.isLoaded()&&!o.everything){o.everything=[];for(var e={},a=m.getData(c),i=0;i<a.length;++i){var t=a[i];if(t.NameID>0){var v={id:t.id,name:l.translate(t.NameID,t.NameIDParam),rank:r.rankNames[t.Rank],icon:t.IconImageIndex,levelLimit:t.LevelLimit,fileName:t.fileName,version:t.version};o.everything.push(v),t.version&&(e[t.version]=!0)}}for(var s in e)o.versions.push(s);o.everything=_.sortBy(o.everything,"name"),n(function(){o.showMoreResults()})}},o.getResults=function(){if(null==o.everything&&o.initeverything(),null==o.everything)return[];for(var e=[],n=o.everything.length,a=0,i=0;i<n&&a<o.maxDisplay;++i){var r=o.everything[i];if(!(r.levelLimit<o.minLevel||r.levelLimit>o.maxLevel)&&r.levelLimit&&("all"==o.version||o.version==r.version)){if(""!=o.nameSearch){var t=o.nameSearch.split(" ");0==t.length&&(t=[o.nameSearch]);for(var l=!0,m=0;m<t.length;++m)if(r.name&&r.name.toString().toUpperCase().indexOf(t[m].toUpperCase())==-1){l=!1;break}if(!l)continue}e.push(r),a++}}return o.totalNumResults=e.length,e},o.changeSearch=function(){o.minLevel!=o.origMinLevel&&(localStorage.setItem("minLevel",o.minLevel),i.search("minLevel",o.minLevel),o.origMinLevel=o.minLevel),o.maxLevel!=o.origMaxLevel&&(localStorage.setItem("maxLevel",o.maxLevel),i.search("maxLevel",o.maxLevel),o.origMaxLevel=o.maxLevel),localStorage.setItem("nameSearch",o.nameSearch),i.search("name",o.nameSearch),o.maxDisplay=64,o.results=o.getResults()},o.showMoreResults=function(){n(function(){o.maxDisplay+=18,o.results=o.getResults()})};var c="all-items.lzjson";m.init(c,null,function(){},function(){o.initeverything()}),l.init(null,o.initeverything)}e.$inject=["$window","$timeout","$routeParams","$location","hCodeValues","region","translations","dntData"],angular.module("dnsim").directive("dngearsimEverythingSearch",function(){return{scope:{},bindToController:{nameSearch:"=nameSearch"},controller:e,controllerAs:"items",templateUrl:"ui/search/everything-search.html"}})}();
"use strict";!function(){function e(e,a,t,i,r,o,l,n,s,m,c,g,u){function v(){s.init(d,h)}function d(e){}function h(){if(l.isLoaded()&&s.isLoaded()){var e=s.getFinalJobs();e.splice(0,0,L.jobs[0]),L.jobs=e,L.allJobs=s.getAllJobs();var a=Number(localStorage.getItem("jobNumber"));t.job&&t.job&&(a=Number(t.job)),null!=a&&angular.forEach(e,function(e,t){if(e.id==a)return void(L.job=e)}),n.init(L.itemCategory.name,b)}}function b(){L.maxDisplay=24,L.results=S()}function S(){var e=n.getItems(L.itemCategory.name);if(null==e)return null;e=e.sort(function(e,a){return a.levelLimit-e.levelLimit});var a=-1;"pc"in L.stat&&(a=L.stat.pc);var t=-1;"altStat"in L.stat&&(t=L.stat.altStat);for(var i=[],r=[],o=e.length,l=0,s=0;s<o&&(l<L.maxDisplay||L.stat.id>=0);++s){var m=e[s];if(m){if(!L.itemCategory.hideLevel&&(m.levelLimit<L.minLevel||m.levelLimit>L.maxLevel))continue;if(!L.itemCategory.hideRank&&m.rank&&!L.rankChecked[m.rank.id])continue;if(!L.itemCategory.hideJob&&L.job&&L.job.id>-1&&!L.job.isClassJob(m.needJobClass))continue;if(c.initItem(m),m.typeName!=L.itemCategory.name)continue;if(""!=L.nameSearch){var g=L.nameSearch.split(" ");g.length||(g=[L.nameSearch]);for(var u=!0,v=0;v<g.length;++v)if(m.name.toUpperCase().indexOf(g[v].toUpperCase())==-1){u=!1;break}if(!u)continue}if(L.stat.id>=0){for(var d=!1,h={},b=0;b<m.stats.length;++b){var S=m.stats[b];if(S.id==L.stat.id){d=!0,h.i=l,h.s=Number(S.max);break}S.id==a?(d=!0,h.i=l,h.s=Number(S.max)):S.id==t&&(d=!0,h.i=l,h.s=Number(S.max))}if(!d)continue;i.push(h)}r.push(m),l++}}if(L.stat.id>=0){var f=Math.min(l,L.maxDisplay);i=i.sort(function(e,a){return a.s-e.s});for(var y=[],s=0;s<f;++s)y.push(r[i[s].i]);r=y}return L.totalNumResults=r.length,r}var L=this;if(L.itemCategory=n.byPath(t.cat),!L.itemCategory){var f=localStorage.getItem("selectedItemCategory");return f||(f="titles"),L.itemCategory=n.byName(f),L.itemCategory&&!L.itemCategory.hideInSearch||(f="titles",L.itemCategory=n.byName("titles")),void(L.itemCategory&&(r.search("cat",L.itemCategory.path),o.reload()))}a.document.title="dngearsim | SEARCH "+L.itemCategory.name.toUpperCase(),L.job={id:-1,name:""},L.jobs=[L.job],L.allJobs=[],L.minLevel=1,L.maxLevel=99,L.maxDisplay=10,L.totalNumResults=0,L.grades=m.rankNames,L.stat={id:-1,name:""},L.stats=[L.stat],L.results=null,angular.forEach(m.stats,function(e,a){e.searchable&&L.stats.push(e)});var y=Number(localStorage.getItem("minLevel"));t.minLevel&&(y=Number(t.minLevel)),y>0&&y<100&&(L.minLevel=y),L.origMinLevel=y;var C=Number(localStorage.getItem("maxLevel"));t.maxLevel&&(C=Number(t.maxLevel)),C>0&&C<100&&(L.maxLevel=C),L.origMaxLevel=C,L.nameSearch=localStorage.getItem("nameSearch"),t.name&&(L.nameSearch=t.name),L.nameSearch||(L.nameSearch=""),L.origSavedSearchStatId=localStorage.getItem("searchStat"),t.stat&&(L.origSavedSearchStatId=t.stat),L.origSavedSearchStatId>-1&&L.origSavedSearchStatId in m.stats&&(L.stat=m.stats[L.origSavedSearchStatId]),L.navigate=function(){var e=localStorage.getItem("selectedItemCategory");e&&(L.itemCategory=n.byName(e),L.itemCategory&&(r.search("cat",L.itemCategory.path),L.save(),o.reload()))},L.save=function(){L.itemCategory.hideLevel?(r.search("minLevel",null),r.search("maxLevel",null)):(L.minLevel!=L.origMinLevel&&(localStorage.setItem("minLevel",L.minLevel),r.search("minLevel",L.minLevel),L.origMinLevel=L.minLevel),L.maxLevel!=L.origMaxLevel&&(localStorage.setItem("maxLevel",L.maxLevel),r.search("maxLevel",L.maxLevel),L.origMaxLevel=L.maxLevel)),L.itemCategory.hideJob?r.search("job",null):null!=L.job&&L.origJobNumber!=L.job.id&&(localStorage.setItem("jobNumber",L.job.id),L.job.id>-1?r.search("job",L.job.id):r.search("job",null),L.origJobNumber=L.job.id),L.stat&&L.origSavedSearchStatId!=L.stat.id&&(localStorage.setItem("searchStat",L.stat.id),L.stat.id>-1?r.search("stat",L.stat.id):r.search("stat",null),L.origSavedSearchStatId=L.stat.id),localStorage.setItem("nameSearch",L.nameSearch),r.search("name",L.nameSearch)},L.rankChecked=m.checkedRank,L.changeSearch=function(){L.save(),b()},L.showMoreResults=function(){i(function(){L.maxDisplay+=18,L.results=S()})},g.init(),l.init(d,v)}var a=["$scope","$window","$routeParams","$timeout","$location","$route","translations","itemCategory","jobs","hCodeValues","itemFactory","region","saveHelper",e];angular.module("dnsim").controller("ItemSearchCtrl",a)}();
"use strict";!function(){function e(e,a,o,n,t,i,r,s,l,c){function u(e){return null!=e?"skilltable_character"+e.toLowerCase()+".lzjson":null}function d(){if(h.loadedJobId==h.job.id)return h.skills;var e=[];if(h.job.id>=0){var o=t.getBaseJobName(h.job);e.push(o)}angular.forEach(e,function(o,n){var t=u(o);t&&(r.isLoaded(t)?f(e,h.job):r.init(t,null,b,function(){a(function(){f(e,h.job)})}))})}function f(e,a){h.skills=[];var o=!0;angular.forEach(e,function(e,a){var n=u(e);r.isLoaded(n)||(o=!1)}),o&&(angular.forEach(e,function(e,a){for(var o=u(e),n=r.getData(o),t=n.length,l=0;l<t;++l)if(0!=n[l].NameID&&(n[l].EffectClass1>0||n[l].EffectClass2>0||n[l].EffectClass3>0||n[l].EffectClass4>0||n[l].EffectClass5>0||n[l].EffectClass6>0)){var c={d:n[l]};c.id=n[l].id,c.typeName="skills",c.itemSource="skills",c.name=i.translate(n[l].NameID,n[l].NameIDParam),c.needJobClass=n[l].NeedJob,c.rank=s.rankNames[0],c.baseJobName=e.toLowerCase(),c.icon=n[l].IconImageIndex,h.skills.push(c)}}),h.loadedJobId=a.id)}function b(e){}function m(){if(i.isLoaded()&&t.isLoaded()){var e=t.getFinalJobs();h.jobs&&h.jobs.length&&e.splice(0,0,h.jobs[0]),h.jobs=e,h.allJobs=t.getAllJobs();var a=Number(localStorage.getItem("jobNumber"));null!=a&&angular.forEach(e,function(e,o){if(e.id==a)return void(h.job=e)}),h.getResults()}}function g(){t.isLoaded()?a(m):t.init(b,function(){a(m)})}var h=this;h.allJobs=[],h.dntName="",h.skills=[],h.loadedJobId=-1,h.itemCategory=l.byName("skills"),h.nameSearch=localStorage.getItem("nameSearch"),h.nameSearch||(h.nameSearch=""),n.init(),i.isLoaded()?g():i.init(b,function(){a(g)}),h.navigate=function(){a(function(){h.itemCategory&&c.path(h.itemCategory.path)})},h.isLoading=function(){if(!i.isLoaded())return i.startedLoading||i.init(b,function(){}),!0;var e=t.getBaseJobName(h.job),a=u(e);return!(!a||r.isLoaded(a))},h.getResults=function(){var e=d();if(null==e)return[];h.job&&h.job.id>=0&&localStorage.setItem("jobNumber",h.job.id),localStorage.setItem("nameSearch",h.nameSearch);for(var a=[],o=e.length,n=0;n<o;++n){var t=e[n];if(""!=h.nameSearch){var i=h.nameSearch.split(" ");i.length||(i=[h.nameSearch]);for(var r=!0,s=0;s<i.length;++s)if(t.name&&t.name.toString().toUpperCase().indexOf(i[s].toUpperCase())==-1){r=!1;break}if(!r)continue}h.job.id>=0&&!h.job.isClassJob(t.needJobClass)||a.push(t)}return a}}angular.module("dnsim").directive("dngearsimSkillSearch",function(){return{scope:{},bindToController:{job:"=job",jobs:"=jobs"},controller:["$window","$timeout","saveHelper","region","jobs","translations","dntData","hCodeValues","itemCategory","$location",e],controllerAs:"skillSearch",templateUrl:"ui/search/skill-search.html"}})}();
"use strict";!function(){function t(){return{restrict:"E",scope:{},bindToController:{job:"=job",onSetJob:"&onSetJob"},templateUrl:"ui/widgets/choose-class.html",controllerAs:"ctrl",controller:["$window","$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad","character",o]}}function o(t,o,e,n,s,i,r,a,l,u){function c(t){}this.getFinalJobs=function(){for(var t=r.getFinalJobs(),o=[],e=0;e<t.length;++e)r.getBaseJobName(t[e])==this.bJob&&o.push(t[e]);return o},this.getBaseJobs=function(){return r.getBaseJobs()},this.getJobName=function(t){for(var o=r.getAllJobs(),e=0;e<o.length;++e)if(o[e].d.EnglishName==t)return o[e].name},this.setJob=function(t){this.job=t,t&&this.onSetJob()},r.init(c,n)}angular.module("dnsim").directive("dnsimChooseClass",t)}();
"use strict";!function(){function e(){return{restrict:"E",scope:{},bindToController:{collapse:"=collapse",cat:"=cat",buildScreen:"=buildScreen",onChange:"&onChange"},templateUrl:"ui/widgets/dnsim-category-links.html",controller:t,controllerAs:"ctrl"}}function t(e,t,n){var o=this;o.categories=e.categories,o.collapsed=!0,o.shouldShow=function(e){return o.buildScreen?!e.hideInBuild:!e.hideInSearch},o.isLoading=function(){return!n.loaded},o.setCategory=function(e){o.collapse&&(o.collapsed=!o.collapsed,t.scrollTo(0,0)),o.cat!=e&&(o.cat=e,localStorage.setItem("selectedItemCategory",e.name),o.onChange&&o.onChange())},o.getName=function(e){return e.tId?n.translate(e.tId).toLowerCase():e.name}}t.$inject=["itemCategory","$window","translations"],angular.module("dnsim").directive("dnsimCategoryLinks",e)}();
"use strict";!function(){function i(i,t,n){return{restrict:"E",scope:{item:"=item"},templateUrl:"ui/widgets/dnsim-item-icon.html",link:function(i,t,n){i.$watch("item",function(t,n){t&&(i.iconImage=i.getIcon())}),i.getIcon=function(){if(i.item&&i.item.icon>0){var t,n=Math.floor(i.item.icon/200+1);return t="skills"==i.item.typeName?"skillicon":"itemicon",n>9?t+n+".png":t+"0"+n+".png"}return null},i.iconImage=i.getIcon(),i.getIconXPostion=function(){return i.item&&i.item.icon>0?i.item.icon%10*40+5:0},i.getIconYPostion=function(){return i.item&&i.item.icon>0?40*Math.floor(i.item.icon%200/10)+4:0}}}}angular.module("dnsim").directive("dnsimItemIcon",["exportLinkHelper","$location","region",i])}();
"use strict";!function(){function i(i,e,t){return{restrict:"E",scope:{item:"=item",noClick:"=noClick"},templateUrl:"ui/widgets/dnsim-item-link.html",link:function(e,n,o){e.itemLink="item/?region="+t.dntLocation.region+"&i="+i.encodeItem(e.item),e.$watch("item",function(n,o){n&&(e.itemLink="item/?region="+t.dntLocation.region+"&i="+i.encodeItem(e.item))})}}}angular.module("dnsim").directive("dnsimItemLink",["exportLinkHelper","$location","region",i])}();
"use strict";!function(){function i(){return{restrict:"E",scope:{},bindToController:{item:"=item",small:"=small"},templateUrl:"ui/widgets/dnsim-job-icon.html",controller:t,controllerAs:"ctrl"}}function t(){this.small?(this.sizeValue="205px 205px",this.iconSize=22,this.iconOffset=0):(this.sizeValue="410px 410px",this.iconSize=44,this.iconOffset=5),this.getIconXPostion=function(){return this.item&&this.item.d&&this.item.d.JobIcon>0?this.item.d.JobIcon%9*this.iconSize+this.iconOffset:0},this.getIconYPostion=function(){return this.item&&this.item.d&&this.item.d.JobIcon>0?Math.floor(this.item.d.JobIcon/9)*this.iconSize+this.iconOffset:0}}angular.module("dnsim").directive("dnsimJobIcon",[i])}();
"use strict";!function(){function o(o,n,t,i){return{restrict:"E",transclude:!0,scope:{alsoShowFor:"=alsoShowFor"},templateUrl:"ui/widgets/dnsim-loading.html",link:function(a,d,u){a.$on("TRANSLATION_LOAD_EVENT",function(){a.setLoadCount()}),a.$on("DNTDATA_LOAD_EVENT",function(){a.setLoadCount()}),a.$on("DNTDATA_LOAD_ERROR",function(){t(function(){a.loadError=!0})}),a.$on("TRANSLATION_LOAD_ERROR",function(){t(function(){a.loadError=!0})}),a.numLoading=0,a.setLoadCount=function(){a.noRegion=!i.dntLocation;var d=o.anyLoading();n.isLoaded()||d++,(a.numLoading<d||!a.totalToLoad)&&(a.totalToLoad=d),a.numLoading=d,t()},a.loadError=!1,a.setLoadCount()}}}angular.module("dnsim").directive("dnsimLoading",["dntData","translations","$timeout","region",o])}();
"use strict";!function(){function t(){return{restrict:"A",link:function(t,n,i){var c=!1;n.on("click",function(t){if(!c)try{this.selectionStart=0,this.selectionEnd=this.value.length+1,c=!0}catch(t){this.select(),c=!0}}),n.on("blur",function(t){c=!1})}}}angular.module("dnsim").directive("dnsimSelectAllOnClick",[t])}();
"use strict";!function(){function t(t){return{restrict:"A",scope:{stats:"=stats",build:"=build",altStats:"=altStats",separator:"=separator",filter:"=filter",numInSet:"=numInSet"},link:function(e,n,a){function s(){function a(t){var e=n.clone();e.css("display",u),e.html(t),m.after(e),m=e,r.push(e)}n.css("display","none");var s=e.stats;s||(s=e.altStats),angular.forEach(r,function(t,e){t.remove()});var l=!0,m=n,d={};angular.forEach(s,function(e,n){var a=t.stats[e.id];a&&a.summaryFor&&(d[a.summaryFor]=e)}),angular.forEach(s,function(n,r){var u="";if(n.id in t.stats){var m=t.stats[n.id];if(!e.filter&&"hide"in m&&m.hide)return;if(e.filter&&!m[e.filter])return;if(m.summaryFor)return;if(l||(u+=i),l=!1,"needSetNum"in n&&(n.needSetNum<=e.numInSet&&(u+="*"),u+=n.needSetNum+"&nbsp;"),u+="<strong>",e.build)if("primary"==m.element){var o=0;e.build.element&&(o=e.build.element.id),u+=t.elements[o].name+"&nbsp;"}else if("secondary"==m.element){var o=0;e.build.secondaryElement&&(o=e.build.secondaryElement.id),u+=t.elements[o].name+"&nbsp;"}if(u+=m.name+":</strong>&nbsp;"+m.display(n),m.combineWith>0&&angular.forEach(s,function(t,e){t.id==m.combineWith&&t.max!=n.max&&(u+="-"+m.display(t))}),n.id in d){var c=d[n.id];u+="&nbsp;|&nbsp;<em>"+t.stats[c.id].display(c),u+="</em>"}}else l||(u+=i),l=!1,"needSetNum"in n&&(u+=n.needSetNum+"-Increases&nbsp;"),u+=n.id+":&nbsp;"+n.max;a(u)})}var i;i=e.separator?"&nbsp;"+e.separator+" ":"";var r=[],u=n.css("display");e.$watch("stats",function(t,e){t&&s()}),e.$watch("altStats",function(t,e){t&&s()}),e.$watch("numInSet",function(t,e){t>=0&&s()})}}}angular.module("dnsim").directive("dnsimStats",["hCodeValues",t])}();
"use strict";!function(){function n(){return{require:"ngModel",link:function(n,r,t,u){u.$parsers.push(function(n){return""+n}),u.$formatters.push(function(n){return parseFloat(n,10)})}}}angular.module("dnsim").directive("dnsimStringToNumber",n)}();
"use strict";!function(){function n(){return{require:"ngModel",link:function(n,r,t,e){e.$parsers.push(function(n){return""+n/100}),e.$formatters.push(function(n){return 100*parseFloat(n,10)})}}}angular.module("dnsim").directive("dnsimStringToPercent",n)}();
"use strict";!function(){function e(e){return{restrict:"A",link:function(n,i,t){var r=e(t.fileChange),a=function(e){n.$apply(function(){r(n,{$event:e,files:e.target.files})})};i[0].addEventListener("change",a,!1)}}}angular.module("dnsim").directive("fileChange",["$parse",e])}();
"use strict";!function(){function t(t,e,n,o){function i(t){}var a="rebootplayerweighttable.lzjson",l="playercommonleveltable.lzjson",r="playerleveltable.optimised.json",s="heroleveltable.lzjson";return{init:function(o){n.init(i,o),t.init(a,e.jobConversionColsToLoad,i,o),t.init(l,e.statCapColsToLoad,i,o),t.init(r,e.jobBaseStatColsToLoad,i,o),t.init(s,null,i,o),t.init("potentialtable_herolevel.lzjson",null,i,o)},getHeroStats:function(e){var n=[];if(e>0){var i=t.findFast(s,"id",e);if(1==i.length){var a=t.getRow(s,i[0]);if(a){var l=t.findFast("potentialtable_herolevel.lzjson","PotentialID",a.HeroLevelAbilityID);if(1==l.length){var r=t.getRow("potentialtable_herolevel.lzjson",l[0]);r&&(n=o.getStats(r))}}}}return n},getStatCaps:function(e){if(e>0){var n=t.findFast(l,"id",e);if(1==n.length)return t.getRow(l,n[0])}return{}},getConversions:function(e){if(e>0){var n=t.findFast(a,"id",e);if(1==n.length)return t.getRow(a,n[0])}return{}},getBaseStats:function(e,n){if(e>0&&n>0){var o=t.findFast(r,"id",100*Number(n)+Number(e)-100);if(1==o.length)return t.getRow(r,o[0])}return{}}}}t.$inject=["dntData","itemColumnsToLoad","jobs","hCodeValues"],angular.module("dnsim").factory("character",t)}();
"use strict";!function(){function t(){return{mainDnt:{NameID:!0,DescriptionID:!0,NameIDParam:!0,DescriptionIDParam:!0,Type:!0,TypeParam1:!0,TypeParam2:!0,TypeParam3:!0,LevelLimit:!0,NeedJobClass:!0,Rank:!0,State1:!0,StateValue1:!0,State1_Max:!0,State2:!0,StateValue2:!0,State2_Max:!0,State3:!0,StateValue3:!0,State3_Max:!0,State4:!0,StateValue4:!0,State4_Max:!0,State5:!0,StateValue5:!0,State5_Max:!0,State6:!0,StateValue6:!0,State6_Max:!0,State7:!0,StateValue7:!0,State7_Max:!0,State8:!0,StateValue8:!0,State8_Max:!0,State9:!0,StateValue9:!0,State9_Max:!0,State10:!0,StateValue10:!0,State10_Max:!0,EnchantID:!0,SkillID:!0,dragonjeweltype:!0,AbleWStorage:!0,ExchangeType:!0,IconImageIndex:!0,IsCash:!0,DisjointDrop1:!0,Disjointamount:!0},partsDnt:{SetItemID:!0},enchantDnt:{EnchantID:!0,EnchantLevel:!0,EnchantRatio:!0,BreakRatio:!0,MinDown:!0,MaxDown:!0,NeedCoin:!0,DisjointDrop:!0,NeedItemID1:!0,NeedItemCount1:!0,NeedItemID2:!0,NeedItemCount2:!0,NeedItemID3:!0,NeedItemCount3:!0,NeedItemID4:!0,NeedItemCount4:!0,NeedItemID5:!0,NeedItemCount5:!0,ProtectItemCount:!0,State1:!0,State1Value:!0,State2:!0,State2Value:!0,State3:!0,State3Value:!0,State4:!0,State4Value:!0,State5:!0,State5Value:!0,State6:!0,State6Value:!0,State7:!0,State7Value:!0,State8:!0,State8Value:!0,State9:!0,State9Value:!0,State10:!0,State10Value:!0},potentialDnt:{PotentialID:!0,PotentialNo:!0,PotentialRatio:!0,State1:!0,State1Value:!0,State2:!0,State2Value:!0,State3:!0,State3Value:!0,State4:!0,State4Value:!0,State5:!0,State5Value:!0,State6:!0,State6Value:!0,State7:!0,State7Value:!0,State8:!0,State8Value:!0,State9:!0,State9Value:!0,State10:!0,State10Value:!0,State11:!0,State11Value:!0,State12:!0,State12Value:!0,State13:!0,State13Value:!0,State14:!0,State14Value:!0,State15:!0,State15Value:!0,State16:!0,State16Value:!0},gemDnt:{Type:!0},setDnt:null,sparkDnt:null,jobsDnt:{JobName:!0,JobNumber:!0,BaseClass:!0,ParentJob:!0,EnglishName:!0,JobIcon:!0},jobBaseStatColsToLoad:{Strength:!0,Agility:!0,Intelligence:!0,Stamina:!0,AggroperPvE:!0,BaseMP:!0},statCapColsToLoad:{Cbase:!0,Cdefense:!0,Ccritical:!0,Cfinaldamage:!0,CcriticalDamage:!0},jobConversionColsToLoad:{HP:!0,StrengthAttack:!0,AgilityAttack:!0,IntelligenceAttack:!0,PhysicalDefense:!0,MagicDefense:!0,Critical:!0,CriticalResistance:!0,Stiff:!0,StiffResistance:!0,Stun:!0,StunResistance:!0,MoveSpeed:!0,MoveSpeedRevision:!0,DownDelay:!0,ElementAttack:!0,ElementDefense:!0,ElementDefenseMin:!0,ElementDefenseMax:!0,StrengthIntelligenceToCriticalDamage:!0}}}angular.module("dnsim").factory("itemColumnsToLoad",[t])}();
"use strict";!function(){function t(t,e){function n(n,a,o){return{reader:new DntReader,loaded:!1,startedLoading:!1,file:a,dntLocation:n,progressCallback:null,completeCallbacks:[],init:function(n,i,r){if(this.loaded)i&&i();else if(this.progressCallback=n,i&&this.completeCallbacks.push(i),!this.startedLoading){this.startedLoading=!0;var s=this;this.reader.colsToLoad=o,this.dntLocation&&this.dntLocation.url&&this.dntLocation.url.length&&(t.$broadcast("DNTDATA_LOAD_EVENT"),e(function(){s.reader.loadDntFromServerFile(s.dntLocation.url+"/"+a,function(t){s.progressCallback&&s.progressCallback(t)},function(e,n){s.loaded=!0,angular.forEach(s.completeCallbacks,function(t,e){t&&t()}),s.completeCallbacks=[],t.$broadcast("DNTDATA_LOAD_EVENT")},function(e){s.failed=!0,r?(s.loaded=!0,console.log("ignoring the error - this file may not exist yet for the region"),angular.forEach(s.completeCallbacks,function(t,e){t&&t()}),s.completeCallbacks=[],t.$broadcast("DNTDATA_LOAD_EVENT")):(s.startedLoading=!1,s.loaded=!1,t.$broadcast("DNTDATA_LOAD_ERROR"))})}))}},reset:function(){this.reader=new DntReader,this.loaded=!1,this.startedLoading=!1}}}return{loaders:{},findIndexes:{},dntLocation:null,setLocation:function(t){this.dntLocation=t;var e=this;angular.forEach(this.loaders,function(n,a){n.dntLocation!=t&&(n.dntLocation=t,e.reset(a))})},init:function(t,e,a,o,i){a||(a=function(){}),t in this.loaders||t.length>0&&(this.loaders[t]=n(this.dntLocation,t,e)),this.loaders[t].init(a,o,i)},getData:function(t){if(this.isLoaded(t)){for(var e=this.loaders[t].reader,n=new Array(e.numRows),a=0;a<e.numRows;++a)n[a]=e.getRow(a);return n}return[]},find:function(t,e,n){for(var a=this.findFast(t,e,n),o=[],i=a.length,r=0;r<i;++r)o.push(this.getRow(t,a[r]));return o},findFast:function(t,e,n){if(this.isLoaded(t)){t in this.findIndexes||(this.findIndexes[t]={});var a=this.loaders[t].reader,o=a.columnIndexes[e],i=this.findIndexes[t];if(!(e in i)){var r={};i[e]=r;for(var s=a.data,d=s.length,l=0;l<d;++l){var u=s[l],c=u[o];c in r?r[c].push(l):r[c]=[l]}}return n in i[e]?i[e][n]:[]}return[]},isLoaded:function(t){return t in this.loaders&&this.loaders[t].loaded},hasFailed:function(t){return t in this.loaders&&this.loaders[t].failed},hasStartedLoading:function(t){return this.isLoaded(t)||t in this.loaders&&this.loaders[t].startedLoading},reset:function(t){t in this.loaders&&(this.loaders[t].reset(),delete this.loaders[t],delete this.findIndexes[t])},resetAll:function(){var t=this;angular.forEach(this.loaders,function(e,n){t.reset(n)})},anyLoading:function(){var t=0;return angular.forEach(this.loaders,function(e,n){!e.loaded&&e.startedLoading&&t++}),t},getNumRows:function(t){return this.isLoaded(t)?this.loaders[t].reader.numRows:0},getRow:function(t,e){return this.isLoaded(t)?this.loaders[t].reader.getRow(e):{}},lookupValue:function(t,e,n){return this.isLoaded(t)?e[this.loaders[t].reader.columnNames[n]]:null},convertData:function(t,e){return this.isLoaded(t)?this.loaders[t].reader.convertData(e):null},getValue:function(t,e,n){return this.isLoaded(t)?this.loaders[t].reader.getValue(e,n):null}}}angular.module("dnsim").factory("dntData",["$rootScope","$timeout",t])}();
"use strict";!function(){function n(n,i,t,a){return function(a){function e(n){n<o.length?o[n].init(a,function(){o[n].isLoaded()&&("fileName"in o[n]&&a("dnt loaded: "+o[n].fileName),e(n+1))}):a("Full initialise complete")}a("starting init");var o=[i];angular.forEach(n,function(n,i){"all"!=i&&angular.forEach(n,function(n,i){if(i.indexOf("Dnt")==i.length-3){var a={init:function(i,a){t.init(n,null,i,a)},isLoaded:function(){return t.isLoaded(n)},fileName:n};o.push(a)}})}),e(0)}}angular.module("dnsim").factory("dntInit",["items","jobs","dntData","itemFactory",n])}();
"use strict";!function(){function t(t,n,e){return function(){angular.forEach(t,function(t,n){t.reset()}),n.reset(),e.resetAll()}}angular.module("dnsim").factory("dntReset",["items","jobs","dntData",t])}();
"use strict";!function(){function t(){function t(t){return n[t.id]||"unknown"}function a(t){return 100*t}function r(t){var a=s[t.id];return a?a(t.max):t.max}var n={0:"statStr",1:"statAgi",2:"statInt",3:"statVit",4:"statPDmgMin",5:"statPDmgMax",6:"statMDmgMin",7:"statMDmgMax",8:"statPDef",9:"statMDef",12:"statCrit",16:"statFire",17:"statIce",18:"statLight",19:"statDark",25:"statHp",26:"statMana",29:"statFD",103:"statCritDmg"},s={16:a,17:a,18:a,19:a};return{convertStats:function(a,n,s){var e={characterName:n,remark:"Imported from DNGearsim",classId:a.job.id,statHeroLevel:a.heroLevel};for(var i in s){var o=s[i];e[t(o)]=r(o)}return e},cardImportUrl:"https://redirect.divinitor.com/dngsimport"}}angular.module("dnsim").factory("dvStatcardHelper",t)}();
"use strict";!function(){function e(e,t,n,a,i,r,l,s,o,m){return{encodeItem:function(e,t){if(e){var n;return"custom"==e.typeName?(n="_custom",angular.forEach(e.stats,function(e,t){n+=t>0?"|":":C",n+=e.id.toString(36)+"="+e.max})):e.id&&(n="I"+e.id.toString(36)+":_","itemSource"in e?n+=e.itemSource:"itemTypeName"in e?n+=e.itemTypeName:e.fileName&&(n+=":F"+e.fileName),(e.enchantmentNum||0==e.enchantmentNum)&&(n+=":E"+e.enchantmentNum.toString(36)),e.pid>0&&(n+=":P"+e.pid.toString(36)),e.sparkId>0&&(n+=":H"+e.sparkId.toString(36)),"skills"==e.typeName&&(n+=":J"+e.baseJobName),e.pve&&(n+=":V"+e.pve)),e.name&&!t&&(n+=":."+e.name.replace(/ /g,"-").replace(/\//g," ")),n}return""},decodeItem:function(e){var n={};return e&&angular.forEach(e.split(":"),function(e,a){if("I"==e.charAt(0))n.id=parseInt(e.substr(1),36);else if("E"==e.charAt(0))n.enchantmentNum=parseInt(e.substr(1),36);else if("P"==e.charAt(0))n.pid=parseInt(e.substr(1),36);else if("S"==e.charAt(0))n.setId=parseInt(e.substr(1),36);else if("H"==e.charAt(0))n.sparkId=parseInt(e.substr(1),36);else if("J"==e.charAt(0))n.baseJobName=e.substr(1);else if("V"==e.charAt(0))n.pve=e.substr(1);else if("_"==e.charAt(0))n.itemSource=e.substr(1);else if("."==e.charAt(0))n.name=e.substr(1).replace("-"," ");else if("C"==e.charAt(0)){n.stats=[];var i=e.substr(1);angular.forEach(i.split("|"),function(e,t){var a=e.split("=");n.stats.push({id:parseInt(a[0],36),max:Number(a[1])})})}else"F"==e.charAt(0)&&(n.fileName=e.substr(1),angular.forEach(t,function(e,t){e.mainDnt&&0==e.mainDnt.indexOf(n.fileName+".")&&(n.itemSource=t)}))}),n},createGroupLink:function(e,t){var n=[],a=this;if(null==t)return"";angular.forEach(t.items,function(e,t){var i=a.encodeItem(e,!0);i&&i.length&&n.push(i)});var i="view-group?region=";return m.dntLocation&&m.dntLocation.region&&(i+=m.dntLocation.region),t.enemyLevel&&(i+="&e="+t.enemyLevel),t.playerLevel&&(i+="&p="+t.playerLevel),t.heroLevel&&(i+="&h="+t.heroLevel),t.job&&t.job.id&&(i+="&j="+t.job.id),t.damageType&&t.damageType.id&&(i+="&d="+t.damageType.id),t.element&&t.element.id&&(i+="&t="+t.element.id),t.secondaryElement&&t.secondaryElement.id&&(i+="&s="+t.secondaryElement.id),i+="&g="+encodeURI(e)+"&i="+n.join(",")},createShortUrl:function(t,n){var a=this.createGroupLink(t,n),i=angular.element(document.querySelector("base")).attr("href"),r=window.location.href.split(i)[0]+i+a,l={longUrl:r};console.log("getting short url for ",r),e.post("https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo",l).success(function(e,t,i,r){n.shortUrl=e.id,sessionStorage.setItem(a,e.id)}).error(function(e,t,n,a){})},reloadItem:function(e){if(null!=e){if("itemTypeName"in e&&!e.itemSource&&(e.itemSource=e.itemTypeName),"rbTech"==e.itemSource&&(e.itemSource="tech"),"custom"==e.itemSource||"custom"==e.typeName)return e.typeName="custom",e;if("skills"==e.itemSource||"skills"==e.typeName){e.enchantmentNum||(e.enchantmentNum=1);var r="skilltable_character"+e.baseJobName+".lzjson",m="pve";"pvp"==e.pve&&(m="pvp");var c="skillleveltable_character"+e.baseJobName+m+".lzjson",u=n.find(r,"id",e.id)[0];u||console.log("cannot get skill data from ",r);var f=n.getData(c),d={};angular.forEach(f,function(t,n){if(t.SkillIndex==e.id&&t.SkillLevel==e.enchantmentNum)return void(d=t)});var p={id:e.id,itemSource:e.itemSource,typeName:e.itemSource,needJobClass:u.NeedJob,baseJobName:e.baseJobName,rank:i.rankNames[0],enchantmentNum:e.enchantmentNum,name:s.translate(u.NameID,u.NameIDParam),description:s.translate(d.SkillExplanationID,d.SkillExplanationIDParam),icon:u.IconImageIndex,pve:e.pve};return p.stats=l.getSkillStats(p,u,f),p}if(e.itemSource in t){var g=t[e.itemSource],h=n.findFast(g.mainDnt,"id",e.id);if(h.length){var S=h[0],v=n.getValue(g.mainDnt,S,"TypeParam1"),N=null,I=n.find(g.potentialDnt,"id",e.pid);I.length||(I=n.find(g.potentialDnt,"PotentialID",v)),I.length||(I=n.find(g.potentialDntEx,"id",e.pid),I.length||(I=n.find(g.potentialDntEx,"PotentialID",v))),I.length>0&&(N=I[0],N.PotentialID!=v&&(N=null,console.log("bad potential")));var p=a.createItem(g,S,N);a.initItem(p),o.setItemCategory(p,x),p.gemSlot=e.gemSlot;var D=null;if((D="weapons"!=p.typeName&&0!=p.typeId?"partsDnt":"weaponDnt")&&n.isLoaded(g[D])&&n.isLoaded(g.setDnt)){p.setStats=[];var b=n.find(g[D],"id",e.id);if(b.length>0){p.setId=b[0].SetItemID;var y=n.find(g.setDnt,"id",b[0].SetItemID);y.length>0&&(p.setStats=i.getStats(y[0]))}}if(p.fullStats=p.stats,e.enchantmentNum>=0)if(p.enchantmentNum=e.enchantmentNum,"skills"==p.typeName);else if("talisman"==p.typeName){var k=[];angular.forEach(p.stats,function(e,t){k.push({id:e.id,max:e.max*(p.enchantmentNum/100)})}),p.enchantmentStats=k,p.fullStats=i.mergeStats(p.enchantmentStats,p.stats)}else if(g.enchantDnt){var w=n.find(g.enchantDnt,"EnchantID",p.enchantmentId);angular.forEach(w,function(e,t){if(e.EnchantLevel==p.enchantmentNum)return p.enchantmentStats=i.getStats(e),void(p.fullStats=i.mergeStats(p.enchantmentStats,p.stats))})}else if(g.petLevelDnt){var w=n.find(g.petLevelDnt,"PetLevelTypeID",p.enchantmentId);angular.forEach(w,function(e,t){e.PetLevel==p.enchantmentNum&&(p.enchantmentStats=i.getStats(e),p.fullStats=i.mergeStats(p.enchantmentStats,p.stats))})}if(e.sparkId>0){p.sparkId=e.sparkId;var J=n.find(g.sparkDnt,"id",e.sparkId);J.length>0&&(p.sparkStats=i.getStats(J[0]),p.fullStats=i.mergeStats(p.fullStats,p.sparkStats))}else if(p.dragonjeweltype){p.offensiveGemSlots=0,p.increasingGemSlots=0;var L=n.find("dragonjewelslottable.lzjson","DragonJewelID",p.dragonjeweltype);L&&L.length>0&&(1==L[0].DragonJewelSlot1&&p.offensiveGemSlots++,1==L[0].DragonJewelSlot2&&p.offensiveGemSlots++,1==L[0].DragonJewelSlot3&&p.offensiveGemSlots++,1==L[0].DragonJewelSlot4&&p.offensiveGemSlots++,2==L[0].DragonJewelSlot1&&p.increasingGemSlots++,2==L[0].DragonJewelSlot2&&p.increasingGemSlots++,2==L[0].DragonJewelSlot3&&p.increasingGemSlots++,2==L[0].DragonJewelSlot4&&p.increasingGemSlots++)}return p}console.log("item "+e.id+" not found in "+g.mainDnt)}if(e.fileName){var E=n.findFast(e.fileName+".lzjson","id",e.id);if(E.length>0){var j=E[0],x=n.getRow(e.fileName+".lzjson",j);return p=a.createBasicItem(x),p.row=j,p.needJobClass=x.NeedJobClass,p.exchangeType=x.ExchangeType,p.fileName=e.fileName,p.gemSlot=e.gemSlot,p.description=s.translate(x.DescriptionID,x.DescriptionIDParam),a.initItem(p),p}return{name:"unknown item"}}return{name:"unknown item source: "+e.itemSource}}},getDntFiles:function(e){var n={};if(null==e);else{if(!e.itemSource&&e.itemTypeName in t&&(e.itemSource=e.itemTypeName),"rbTech"==e.itemSource&&(e.itemSource="tech"),e.itemSource in t){var a=t[e.itemSource];n["exchange.lzjson"]=null,n[a.mainDnt]=r.mainDnt;for(var i in a)if(i.indexOf("Dnt")>0){if("enchantDnt"==i&&!e.enchantmentNum)continue;n[a[i]]=r[i]}}if("skills"==e.itemSource||"skills"==e.typeName){n["skilltable_character"+e.baseJobName+".lzjson"]=null;var l="skillleveltable_character"+e.baseJobName+"pve.lzjson";n[l]=null,l="skillleveltable_character"+e.baseJobName+"pvp.lzjson",n[l]=null}e.fileName&&(n[e.fileName+".lzjson"]=null)}return n}}}e.$inject=["$http","items","dntData","itemFactory","hCodeValues","itemColumnsToLoad","statHelper","translations","itemCategory","region"],angular.module("dnsim").factory("exportLinkHelper",e)}();
"use strict";!function(){function r(r){return{reloadGroup:function(n,t){var e=[];return angular.forEach(t.items,function(n,t){var u=r.reloadItem(n);u&&e.push(u)}),e},getDntFiles:function(n){var t={};return angular.forEach(n.items,function(n,e){var u=r.getDntFiles(n);angular.forEach(u,function(r,n){t[n]=r})}),t}}}angular.module("dnsim").factory("groupHelper",["exportLinkHelper",r])}();
"use strict";!function(){function e(e,a,t){return{categories:[{path:"everything",name:"everything",searchType:"everything",hideInBuild:!0},{path:"titles",name:"titles",sourceType:"titles",hideRank:!0,hideJob:!0,hideLevel:!0,numItemText:"1",maxCat:1},{path:"weapons",name:"weapons",sourceType:"equipment",numItemText:"2",maxExchange:1,maxCat:2,limitExchange:[1,2]},{path:"armour",name:"armour",sourceType:"equipment",numItemText:"5",maxExchange:1,maxCat:5,limitExchange:[3,4,5,6,7]},{path:"accessories",name:"accessories",sourceType:"equipment",hideJob:!0,maxCat:4,maxExchange:2,limitExchange:[8,9,10],tId:7604},{path:"techs",name:"techs",sourceType:"techs",maxCat:4,maxExchange:2,limitExchange:[8,9,10],hideJob:!0},{path:"offensive-gems",name:"offensive gems",sourceType:"gems",hideJob:!0,maxCat:4,maxExchange:4,limitExchange:[54]},{path:"increasing-gems",name:"increasing gems",sourceType:"gems",hideJob:!0,maxCat:14,maxExchange:14,limitExchange:[54]},{path:"enhancement-plates",name:"enhancement plates",sourceType:"plates",hideJob:!0,numItemText:"8+3",maxCat:11,maxExchange:15,limitExchange:[33]},{path:"expedition-plates",name:"expedition plates",sourceType:"plates",hideRank:!0,hideJob:!0,numItemText:"4",maxCat:4,maxExchange:15,limitExchange:[33]},{path:"talisman",name:"talisman",sourceType:"talisman",hideJob:!0,numItemText:"8+4",maxCat:12,maxExchange:12,limitExchange:[52,53],tId:1000054149},{path:"costume",name:"costume",sourceType:"cash",numItemText:"7",maxCat:7,maxExchange:1,hideLevel:!0,limitExchange:[16,17,18,19,20,21,22],tId:7607},{path:"imprint",name:"imprint",sourceType:"imprint",numItemText:"7",maxCat:7,hideLevel:!0,hideJob:!0,tId:1000108314},{path:"cash",name:"cash",sourceType:"cash",numItemText:"8",maxCat:8,maxExchange:2,hideJob:!0,hideLevel:!0,limitExchange:[23,24,25,26,27,28,29],tId:7608},{path:"extras",name:"extras",sourceType:"xtras",limitExchange:[47],hideJob:!0,hideLevel:!0},{path:"skills",name:"skills",searchType:"skills"},{path:"custom",name:"custom",searchType:"custom",hideInSearch:!0}],byName:function(e){var a=null;return angular.forEach(this.categories,function(t,n){t.name==e&&(a=t)}),a},byPath:function(e){var a=null;return angular.forEach(this.categories,function(t,n){t.path==e&&(a=t)}),a},getItems:function(t){var n=this.byName(t);if(n&&"sourceType"in n){var i=[];angular.forEach(a,function(a,t){a.type==n.sourceType&&i&&(a.items||a.loading||e.loadItems(a),i=a.items?i.concat(a.items):null)});var m=[];if(i){var r=this;angular.forEach(i,function(e,a){(e.typeName==n.name||r.isItemForCat(n,e,e.data))&&(e.typeName=t,m.push(e))})}return m}return null},isItemForCat:function(e,n,i){if(n.itemSource in a&&a[n.itemSource].type!=e.sourceType)return!1;if(n.itemType==e.name)return!0;if(e.limitExchange){for(var m=0;m<e.limitExchange.length;++m)if(e.limitExchange[m]==n.exchangeType||i&&e.limitExchange[m]==i.ExchangeType){if("plate"==n.itemSource)return n.rawData&&4==i.Rank||n.rank&&4==n.rank.id?"expedition plates"==e.name:"enhancement plates"==e.name;if("gem"==n.itemSource){var r=t.find(a.gem.gemDnt,"id",n.id);if(r.length>0)return 1==r[0].Type?"offensive gems"==e.name:2==r[0].Type&&"increasing gems"==e.name}return!0}}else if(n.itemSource in a)return a[n.itemSource].type==e.sourceType;return!1},init:function(e,t){var n=this.byName(e);if(n&&"sourceType"in n){var i=_.filter(a,function(e){return e.type==n.sourceType}),m=0;_.each(i,function(e){e.init(function(){},function(){++m==i.length&&t()})})}},setItemCategory:function(e,a){var t=this;angular.forEach(this.categories,function(n,i){t.isItemForCat(n,e,a)&&(e.typeName=n.name)})},getItemsByCategory:function(e){var a={};if(e){var t={};angular.forEach(e,function(e,a){e&&(e.typeName in t||(t[e.typeName]=[]),t[e.typeName].push(e))}),angular.forEach(this.categories,function(e,n){if(e.name in t){var i=t[e.name].sort(function(a,t){if("talisman"==e.name){var n=a.enchantmentNum;n||(n=0);var i=t.enchantmentNum;if(i||(i=0),n!=i)return i-n}else if("gem"==a.itemSource||"plate"==a.itemSource){if(a.gemSlot||t.gemSlot)return a.gemSlot?t.gemSlot?a.gemSlot-t.gemSlot:-1:1;if(t.levelLimit!=a.levelLimit)return t.levelLimit-a.levelLimit}else if("exchangeType"in a&&"exchangeType"in t)return a.exchangeType-t.exchangeType;return a.name.localeCompare(t.name)});a[e.name]=i}else a[e.name]=[]}),angular.forEach(e,function(e,t){!e||e.typeName in a||(a.typeError=!0)})}return a}}}angular.module("dnsim").factory("itemCategory",["itemFactory","items","dntData",e])}();
"use strict";!function(){function n(){return{ids:[{name:"unbound plates",min:0,max:0}]}}angular.module("dnsim").factory("excludeService",n)}();
"use strict";!function(){function e(e,t,n,a){function i(e,a,i){return{row:a,potential:i,id:t.getValue(e.mainDnt,a,"id"),itemSource:e.name,levelLimit:t.getValue(e.mainDnt,a,"LevelLimit"),needJobClass:t.getValue(e.mainDnt,a,"NeedJobClass"),typeId:t.getValue(e.mainDnt,a,"Type"),exchangeType:t.getValue(e.mainDnt,a,"ExchangeType"),rank:n.rankNames[t.getValue(e.mainDnt,a,"Rank")],pid:null,name:null,stats:null,potentialRatio:null,typeName:null,sparkId:null}}function l(n){return!!t.isLoaded(n.mainDnt)&&(!!e.isLoaded()&&(!("potentialDnt"in n&&!t.isLoaded(n.potentialDnt))&&!("potentialDntEx"in n&&!t.isLoaded(n.potentialDntEx))))}function r(e){if(!l(e))return null;var n=(new Date).getTime();e.items=[];for(var a=t.getNumRows(e.mainDnt),r=0;r<a;++r){var m=t.getValue(e.mainDnt,r,"Type"),o=t.getValue(e.mainDnt,r,"State1_Max"),d=t.getValue(e.mainDnt,r,"StateValue1"),u=t.getValue(e.mainDnt,r,"TypeParam1");if(o>0||d>0||u>0||35==m){var s=[];u>0&&"potentialDnt"in e&&(s=t.find(e.potentialDnt,"PotentialID",u),!s.length&&"potentialDntEx"in e&&(s=t.find(e.potentialDntEx,"PotentialID",u)));var c=s.length;c||(s=[null],c=1);for(var f=0;f<c;++f){e.items.push(i(e,r,s[f],0))}}}var D=(new Date).getTime(),p=D-n;console.log("item init time: "+p/1e3+"s for "+e.name)}function m(i){if(i.row>=0){var l;i.itemSource&&i.itemSource in a?l=t.getRow(a[i.itemSource].mainDnt,i.row):i.fileName&&(l=t.getRow(i.fileName+".lzjson",i.row)),delete i.row;var r=i.potential;if(null==i.name&&(i.name=e.translate(l.NameID,l.NameIDParam)),!i.sparkTypeId&&l.TypeParam2>0&&(i.sparkTypeId=l.TypeParam2),null==i.stats){var m=n.getStats(l);if(r){var o=n.getStats(r);m=n.mergeStats(m,o)}i.stats=m}if(l.SkillID&&!i.skillId&&(i.skillId=l.SkillID),null==i.iconIndex&&(i.icon=l.IconImageIndex,i.icon||"title"!=i.itemSource||(i.icon=12417)),l.dragonjeweltype>=0&&(i.dragonjeweltype=l.dragonjeweltype),l.EnchantID&&!i.enchantmentId&&(i.enchantmentId=l.EnchantID),l.EnchantID&&!i.enchantmentId)i.enchantmentId=l.EnchantID;else if(35==l.Type){i.itemSource="xtras";var d=a[i.itemSource];if(d){var u=t.find(d.petDnt,"id",l.id);u&&u.length&&(i.enchantmentId=u[0].PetLevelTypeID)}}r&&(i.pid=r.id),delete i.potential}}function o(e){var n=a[e.itemSource];if(e.fileName&&t.isLoaded(e.fileName+".lzjson")){var i=d(e.fileName+".lzjson",e);if(i)return i}if(e.fileName&&t.isLoaded(e.fileName+".optimised.json")){var i=d(e.fileName+".optimised.json",e);if(i)return i}if(n&&t.isLoaded(n.mainDnt)){var i=d(n.mainDnt,e);if(i)return i}return[]}function d(e,n){if(e){var a=t.find(e,"id",n.id);if(a&&a.length>0)return a[0]}return null}function u(t){return t?{id:t.id,name:e.translate(t.NameID,t.NameIDParam),rank:n.rankNames[t.Rank],icon:t.IconImageIndex,levelLimit:t.LevelLimit,fileName:t.fileName,typeId:t.Type}:[]}return{loadItems:r,initItem:m,createItem:i,getItemData:o,createBasicItem:u}}e.$inject=["translations","dntData","hCodeValues","items"],angular.module("dnsim").factory("itemFactory",e)}();
"use strict";!function(){function t(t,e,n){function i(i,a){var s=this;s.loading=!0,s.items?a():(t.init(i,function(){o(s,a)}),e.init(s.mainDnt,n.mainDnt,i,function(){o(s,a)},s.ignoreErrors),"potentialDnt"in s&&e.init(s.potentialDnt,n.potentialDnt,i,function(){o(s,a)},s.ignoreErrors),"potentialDntEx"in s&&e.init(s.potentialDntEx,n.potentialDnt,i,function(){o(s,a)},s.ignoreErrors),"gemDnt"in s&&e.init(s.gemDnt,n.gemDnt,i,function(){o(s,a)},s.ignoreErrors),o(s,a))}function o(n,i){!t.isLoaded()||!e.isLoaded(n.mainDnt)||"potentialDnt"in n&&!e.isLoaded(n.potentialDnt)&&!e.hasFailed(n.potentialDnt)||"potentialDntEx"in n&&!e.isLoaded(n.potentialDntEx)&&!e.hasFailed(n.potentialDntEx)||"gemDnt"in n&&!e.isLoaded(n.gemDnt)&&!e.hasFailed(n.gemDnt)||(i(),n.loading=!1)}var a={title:{mainDnt:"appellationtable.optimised.json",type:"titles",minLevel:0,minRank:0},tech:{mainDnt:"itemtable_skilllevelup.optimised.json",potentialDnt:"potentialtable.optimised.json",potentialDntEx:"potentialtable_reboot.optimised.json",sparkDnt:"potentialtable_potentialjewel.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"techs",minLevel:60,minRank:0},tman:{mainDnt:"itemtable_talisman.optimised.json",type:"talisman",potentialDnt:"potentialtable_talismanitem.optimised.json",minLevel:24,minRank:0},gem:{mainDnt:"itemtable_dragonjewel.optimised.json",potentialDnt:"potentialtable_dragonjewel.optimised.json",potentialDntEx:"potentialtable_reboot.optimised.json",enchantDnt:"enchanttable_dragonjewel.optimised.json",gemDnt:"dragonjeweltable.optimised.json",type:"gems",minLevel:24,minRank:3},plate:{mainDnt:"itemtable_glyph.optimised.json",potentialDnt:"potentialtable_glyph.optimised.json",type:"plates",minLevel:16,minRank:2},items:{mainDnt:"itemtable.optimised.json",partsDnt:"partstable.optimised.json",weaponDnt:"weapontable.optimised.json",enchantDnt:"enchanttable.optimised.json",potentialDnt:"potentialtable.optimised.json",setDnt:"setitemtable.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:80,minRank:3},eq:{mainDnt:"itemtable_equipment.optimised.json",partsDnt:"partstable_equipment.optimised.json",weaponDnt:"weapontable_equipment.optimised.json",enchantDnt:"enchanttable.optimised.json",potentialDnt:"potentialtable.optimised.json",sparkDnt:"potentialtable_potentialjewel.optimised.json",setDnt:"setitemtable.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:21,minRank:3},rbeq:{mainDnt:"itemtable_reboot.optimised.json",partsDnt:"partstable_reboot.optimised.json",weaponDnt:"weapontable_reboot.optimised.json",enchantDnt:"enchanttable_reboot.optimised.json",potentialDnt:"potentialtable_reboot.optimised.json",setDnt:"setitemtable.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:24,minRank:3},pvpeq:{mainDnt:"itemtable_pvp.optimised.json",partsDnt:"partstable_pvp.optimised.json",weaponDnt:"weapontable_pvp.optimised.json",enchantDnt:"enchanttable.optimised.json",setDnt:"setitemtable.optimised.json",type:"equipment",gemSlotDnt:"dragonjewelslottable.lzjson",minLevel:24,minRank:3},cClone:{mainDnt:"itemtable_cashclone.optimised.json",partsDnt:"partstable_cashclone.optimised.json",type:"cash",minLevel:0,ignoreErrors:!0,minRank:4},c2016:{mainDnt:"itemtable_common2016.optimised.json",partsDnt:"partstable_common2016.optimised.json",weaponDnt:"weapontable_common2016.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},c2017:{mainDnt:"itemtable_common2017.optimised.json",partsDnt:"partstable_common2017.optimised.json",weaponDnt:"weapontable_common2017.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,ignoreErrors:!0,minRank:0},c2015:{mainDnt:"itemtable_common2015.optimised.json",partsDnt:"partstable_common2015.optimised.json",weaponDnt:"weapontable_common2015.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},c2014:{mainDnt:"itemtable_common2014.optimised.json",partsDnt:"partstable_common2014.optimised.json",weaponDnt:"weapontable_common2014.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},cash:{mainDnt:"itemtable_cash.optimised.json",partsDnt:"partstable_cash.optimised.json",weaponDnt:"weapontable_cash.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},event:{mainDnt:"itemtable_event.optimised.json",partsDnt:"partstable_event.optimised.json",weaponDnt:"weapontable_event.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},xtras:{mainDnt:"itemtable_vehicle.optimised.json",partsDnt:"vehiclepartstable.optimised.json",setDnt:"setitemtable_cash.optimised.json",petDnt:"vehicletable.lzjson",petLevelDnt:"petleveltable.lzjson",type:"xtras",minLevel:0,minRank:0},imprint:{mainDnt:"itemtable_imprinting.optimised.json",type:"imprint",minLevel:0,minRank:0}};return angular.forEach(a,function(t,e){t.name=e,t.loading=!1,t.items=null,t.init=i,t.reset=function(){t.items=null,t.loading=!1}}),a}angular.module("dnsim").factory("items",["translations","dntData","itemColumnsToLoad",t])}();
"use strict";!function(){function t(t,n,i){var a="jobtable.lzjson",s=i.jobsDnt;return{fileName:a,allJobs:null,isLoaded:function(){return t.isLoaded(a)},hasStartedLoading:function(){return t.hasStartedLoading(a)},init:function(n,i){t.init(a,s,n,function(){i()})},reset:function(){this.allJobs=null,t.reset(a)},getFinalJobs:function(){var t=[],n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)2==n[a].d.JobNumber&&n[a].d.JobIcon>0&&t.push(n[a]);return t},getBaseJobs:function(){var t=[],n={},i=this;return angular.forEach(this.getFinalJobs(),function(t,a){n[i.getBaseJobName(t)]=t}),angular.forEach(n,function(n,i){t.push(i)}),t},getAllJobs:function(){if(null==this.allJobs&&this.isLoaded()&&n.isLoaded()){for(var i=[],s=t.getData(a),e=s.length,o=0;o<e;++o)i[i.length]=this.createJob(s[o]);this.allJobs=i}return this.allJobs},getById:function(t){var n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)if(n[a].id==t)return n[a]},createJob:function(t){var i=this;return{d:t,id:t.id,name:n.translate(t.JobName),isClassJob:function(n){return i.isClassJob(t,n)}}},isClassJob:function(t,n){if(0==n)return!0;if(t.id==n)return!0;var i=t.ParentJob;if(!i)return!1;if(i==n)return!0;var a=this.getById(i);return!!a&&this.isClassJob(a.d,n)},getBaseJobName:function(t){if(this.isLoaded()){var n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)if(n[a].id==t.d.BaseClass+1&&n[a].d.EnglishName)return n[a].d.EnglishName}return null}}}angular.module("dnsim").factory("jobs",["dntData","translations","itemColumnsToLoad",t])}();
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){function e(e,t,n){function a(){return t(function(t,n){firebase.auth().onAuthStateChanged(function(n){null==n?e.location.href="login.html":t(n)})})}function i(e){return t(function(t,n){firebase.database().ref("profile/"+e).once("value",function(e){t(e?e.val():{})})})}function r(e,n){return t(function(t,a){firebase.database().ref("builds/"+e+"/"+v(n)).once("value",function(e){t(e?l(e.val()):{})})})}function u(e){return t(function(t,n){var a=m.getUser();a&&(e=angular.copy(e),b(e,!0),firebase.database().ref("profile/"+a.uid).set(e).then(t))})}function o(e){return t(function(t,n){firebase.database().ref("builds/"+e).once("value",function(e){if(e){var n={},a=e.val();for(var i in a)n[i]=l(a[i]);t(n)}else t({})})})}function s(e){return t(function(t,n){firebase.database().ref("job-builds/"+e.id).once("value",function(e){t(e?e.val():{})})})}function f(e){e.items&&_.each(e.items,function(e){delete e.fullStats});var t=JSON.stringify(e);return LZString.compressToUTF16(t)}function l(e){var t=LZString.decompressFromUTF16(e),a=JSON.parse(t);return a.items&&_.each(a.items,function(e){e.fullStats=e.stats,e.enchantmentStats&&e.enchantmentStats.length&&(e.fullStats=n.mergeStats(e.enchantmentStats,e.fullStats)),e.sparkStats&&e.sparkStats.length&&(e.fullStats=n.mergeStats(e.sparkStats,e.fullStats))}),a}function c(e,n){var a=m.getUser(),i=[];if(a&&(n=angular.copy(n),b(n,!0),i.push(firebase.database().ref("builds/"+a.uid+"/"+v(e)).set(f(n))),n.job&&n.job.id)){var r={};n.playerLevel&&(r.lev=n.playerLevel),n.region&&(r.region=n.region),n.guild&&(r.guild=n.guild),n.about&&(r.about=n.about),b(r,!0),i.push(firebase.database().ref("job-builds/"+n.job.id+"/"+a.uid+"/"+v(e)).set(r))}return t.all(i)}function b(e,t){for(var n in e)void 0===e[n]?delete e[n]:t&&"object"===_typeof(e[n])&&b(e[n],t)}function d(){var e=firebase.auth();return t(function(t,n){e.signOut().then(function(){t()},function(e){n()})})}function p(e){var n=firebase.auth(),a=m.getUser();return t(function(i,r){var u=[firebase.database().ref("builds/"+a.uid).remove(),firebase.database().ref("profile/"+a.uid).remove(),firebase.database().ref("private/"+a.uid).remove()],o=[];for(var s in e)e[s].job&&o.push(e[s].job.id);o=_.uniq(o),_.each(o,function(e){u.push(firebase.database().ref("job-builds/"+e+"/"+a.uid).remove())}),t.all(u).then(function(){a.delete().then(function(){n.signOut().then(function(){i()},function(e){r()})})})})}function g(e,n){var a=[],i=m.getUser();return i&&(a.push(firebase.database().ref("builds/"+i.uid+"/"+v(e)).remove()),n.job&&a.push(firebase.database().ref("job-builds/"+n.job.id+"/"+i.uid+"/"+v(e)).remove())),t.all(a)}function v(e){return e.replace(/[.$\[\]#\/]/g,"")}var m={login:a,getUser:function(){return firebase.auth().currentUser},signOut:d,deleteAccount:p,getUserBuilds:o,deleteBuild:g,saveBuild:c,getBuild:r,getClassBuilds:s,getProfile:i,saveProfile:u,stripBuildName:v};return function(){firebase.initializeApp({apiKey:"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE",authDomain:"dngearsim.firebaseapp.com",databaseURL:"https://dngearsim.firebaseio.com",storageBucket:"dngearsim.appspot.com"})}(),m}angular.module("dnsim").factory("onlineService",["$window","$q","hCodeValues",e])}();
"use strict";!function(){function e(e,t,n,a,r,l,i){function o(e){for(var t=null,n=0;n<e.length;++n)e[n].def.isItemStep&&(t=e[n].value);for(var n=0;n<e.length;++n)e[n].def.alterItem&&e[n].def.alterItem(e[n].value.id,t);return t}function s(e,t,n,i){i||(i=9999);for(var o=a.getItems(e.name),s=[],f=o.length,m=null,d=null,c=0;c<f;++c){var h=o[c];if(!(!e.hideJob&&t.job.id>0&&h.needJobClass>0)||l.isClassJob(t.job.d,h.needJobClass)){r.initItem(h);for(var v=!0,g=0;g<n.length;++g){if(n[g].def.matchesItem&&!n[g].def.matchesItem(n[g].value.id,h)){v=!1;break}"sortFunc"in n[g].def&&(m=n[g].def.sortFunc,d=n[g].value.id)}if(v&&s.push(h),s.length>=i)break}}return s=u(s),s=s.sort(function(e,t){return m?m(d,e,t):e.name.localeCompare(t.name)})}function u(e){for(var t=[],n=0;n<e.length;++n){for(var a=!1,r=0;r<n;++r)if(f(e[n],e[r])){a=!0;break}a||t.push(e[n])}return t}function f(e,t){return e.name==t.name&&e.stats.length==t.stats.length&&e.rank==t.rank&&e.levelLimit==e.levelLimit&&_.isEqual(e.stats,t.stats)}return{getItem:o,findData:s}}e.$inject=["dntData","translations","itemColumnsToLoad","itemCategory","itemFactory","jobs","hCodeValues"],angular.module("dnsim").factory("quickAddHelper",e)}();
"use strict";!function(){function t(t,e,a,n,i,p,S,s,m){return{categorySteps:{titles:["titleStep"],weapons:["exchangeStep","sixtyLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep","enhanceStep"],armour:["exchangeStep","sixtyLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep","enhanceStep"],accessories:["accExchangeStep","allLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep"],techs:["exchangeStep","allLevelStep","techRankStep","techSkillStep","itemNameStep","hasStatStep","itemStep"],"offensive gems":["sixtyLevelStep","gemRankStep","itemNameStep","numStatsStep","hasStatStep","itemStep","enhanceStep"],"increasing gems":["sixtyLevelStep","gemRankStep","itemNameStep","numStatsStep","hasStatStep","itemStep","enhanceStep"],"enhancement plates":["allLevelStep","plateRankStep","distinctItemNameStep","numStatsStep","hasStatStep","itemStep"],"expedition plates":["sixtyLevelStep","distinctItemNameStep","numStatsStep","highStatStep","hasStatStep","itemStep"],talisman:["sixtyLevelStep","talismanRankStep","distinctItemNameStep","numStatsStep","hasStatStep","itemStep","enhanceTalismanStep"],costume:["exchangeStep","cashRankStep","itemNameStep","itemStep"],imprint:["imprintRankStep","itemNameStep","highStatStep","itemStep"],cash:["accExchangeStep","cashRankStep","itemNameStep","itemStep"],custom:["customStep"]},getOptions:function(t,e,a){var n=this;if(t.name in this.categorySteps){var i=this.getStepName(t,a.length),p=s[i],S=p.getOptions(t,e,a);if(p.isItemStep)return S;if(p.minOptions)var c=m.findData(t,e,a,50);var h=_.filter(S,function(i){var s,h=a.concat([n.createData(i,t,a.length)]);if(p.minOptions){if(S[0]==i)return!0;if(s=m.findData(t,e,h,50),s.length>0&&s.length<50)return s.length<c.length}else s=m.findData(t,e,h,1);return s.length});return p.minOptions&&h.length<p.minOptions?[S[0]]:h}return[]},hasOptions:function(t,e,a){if(t.name in this.categorySteps){var n=this.getStepName(t,a.length);return s[n].hasOptions?s[n].hasOptions(t,e,a):s[n].getOptions(t,e,a).length>0}return!1},isValidStepNumber:function(t,e){return this.categorySteps[t.name].length>e},createData:function(t,e,a){var n=this.getStepName(e,a);return{step:n,value:t,def:s[n]}},getItem:m.getItem,getStepName:function(t,e){return this.categorySteps[t.name][e]}}}t.$inject=["dntData","translations","itemColumnsToLoad","itemCategory","itemFactory","jobs","hCodeValues","quickAddSteps","quickAddHelper"],angular.module("dnsim").factory("quickAdd",t)}();
"use strict";!function(){function e(e,n,t,a,i,r,m,s){return{exchangeStep:{name:"type",getOptions:function(t,a,i){for(var r=[],m=0;m<t.limitExchange.length;++m){var s=t.limitExchange[m],o=0;if(a.items)for(var c=0;c<a.items.length;++c)a.items[c].exchangeType==s&&o++;if(!(o>=t.maxExchange)){var u=e.find("exchange.lzjson","ExchangeType",s),d="";u&&u.length>0&&u[0].NameID>0&&(d=n.translate(u[0].NameID).toLowerCase()),r.push({id:s,name:d.toLowerCase()})}}return r},matchesItem:function(e,n){return n.exchangeType==e}},accExchangeStep:{name:"type",getOptions:function(t,a,i){for(var r=[],m=0;m<t.limitExchange.length;++m){for(var s=t.limitExchange[m],o=0,c=0;c<a.items.length;++c)a.items[c]&&a.items[c].exchangeType==s&&o++;if(10==s||25==s){if(o>=2)continue}else if(o>=1)continue;var u=e.find("exchange.lzjson","ExchangeType",s);if(u&&u.length>0&&u[0].NameID>0){var d=n.translate(u[0].NameID).toLowerCase();r.push({id:s,name:d.toLowerCase()})}}return r},matchesItem:function(e,n){return n.exchangeType==e}},sixtyLevelStep:{name:"level",getOptions:function(e,n,t){return[{id:93,name:"level 93"},{id:90,name:"level 90"},{id:80,name:"level 80"},{id:70,name:"level 70"},{id:60,name:"level 60"}]},matchesItem:function(e,n){return n.levelLimit==e}},allLevelStep:{name:"level",getOptions:function(e,n,t){return[{id:93,name:"level 93"},{id:90,name:"level 90"},{id:80,name:"level 80"},{id:70,name:"level 70"},{id:60,name:"level 60"},{id:50,name:"level 50"},{id:40,name:"level 40"},{id:32,name:"level 32"},{id:24,name:"level 24"}]},matchesItem:function(e,n){return n.levelLimit==e}},cashRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:4,name:"unique"},{id:3,name:"epic"},{id:2,name:"rare"},{id:1,name:"magic"},{id:0,name:"normal"}]},matchesItem:function(e,n){return n.rank.id==e}},imprintRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:4,name:"unique"},{id:3,name:"epic"},{id:2,name:"rare"}]},matchesItem:function(e,n){return n.rank.id==e}},techRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:4,name:"unique"},{id:3,name:"epic"}]},matchesItem:function(e,n){return n.rank.id==e}},talismanRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:3,name:"epic"},{id:2,name:"rare"},{id:999,name:"quality high grade"},{id:1,name:"magic"},{id:0,name:"normal"}]},matchesItem:function(e,n){if(i.initItem(n),n.name){var t=Math.max(n.name.indexOf("Quality"),n.name.indexOf("High Grade"));return 999==e?0===t:n.rank.id==e&&0!=t}return!1}},gemRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:5,name:"legendary"},{id:999,name:"quality high grade epic"},{id:3,name:"epic"}]},matchesItem:function(e,n){if(i.initItem(n),n.name){var t=Math.max(n.name.indexOf("Quality"),n.name.indexOf("High Grade"));return 999==e?3==n.rank.id&&t>=0:n.rank.id==e&&t<0}return!1}},plateRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:3,name:"epic"},{id:2,name:"rare"},{id:1,name:"normal"}]},matchesItem:function(e,n){return n.rank.id==e}},equipRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:5,name:"legendary"},{id:4,name:"unique"},{id:3,name:"epic"}]},matchesItem:function(e,n){return n.rank.id==e}},enhanceTalismanStep:{name:"slot",getOptions:function(e,n,t){return[{id:100,name:"+100% slot"},{id:75,name:"+75% slot"},{id:25,name:"+25% slot"},{id:0,name:"+0% slot"}]},alterItem:function(e,n){n.enchantmentNum=e}},titleStep:{name:"select",getOptions:function(e,n,t){for(var a=s.findData(e,n,t,9999),i=[],r=0;r<a.length;++r)switch(a[r].id){case 1975:case 1973:case 1008:case 230:case 279:case 2032:case 2033:case 1313:case 2188:i.push(a[r])}return i},hasOptions:function(e,n,t){return!0},isItemStep:!0},enhanceStep:{name:"enhance",getOptions:function(e,n,t){var a=s.getItem(t);return a&&a.enchantmentId?[{id:15,name:"enhance to +15"},{id:14,name:"enhance to +14"},{id:13,name:"enhance to +13"},{id:12,name:"enhance to +12"},{id:11,name:"enhance to +11"},{id:10,name:"enhance to +10"},{id:9,name:"enhance to +9"},{id:8,name:"enhance to +8"},{id:7,name:"enhance to +7"},{id:6,name:"enhance to +6"},{id:5,name:"enhance to +5"},{id:4,name:"enhance to +4"},{id:3,name:"enhance to +3"},{id:2,name:"enhance to +2"},{id:1,name:"enhance to +1"},{id:0,name:"not enhanced"}]:[{id:0,name:"not enhanced"}]},alterItem:function(e,n){n.enchantmentNum=e}},itemStep:{name:"select",getOptions:function(e,n,t){return s.findData(e,n,t)},isItemStep:!0,hideName:!0},namedItemStep:{name:"select",getOptions:function(e,n,t){return s.findData(e,n,t)},isItemStep:!0},techSkillStep:{name:"skill",getOptions:function(e,n,t){var a=s.findData(e,n,t,1);return a.length>0?[{id:a[0].skillId,name:a[0].skillId}]:[]},matchesItem:function(e,n){return n.skillId==e}},itemNameStep:{name:"item",getOptions:function(e,n,t){for(var a=s.findData(e,n,t),i={},r=[],m=0;m<a.length;++m){var o=a[m].name;o in i||(i[o]=!0,r.push({id:o,name:o}))}return r},matchesItem:function(e,n){return n.name==e},isItemStep:!0},distinctItemNameStep:{name:"item",getOptions:function(e,n,t){for(var a=s.findData(e,n,t),i={},r=[],m=0;m<n.items.length;++m){i[n.items[m].name]=!0}for(var m=0;m<a.length;++m){var o=a[m].name;o in i||(i[o]=!0,r.push({id:o,name:o}))}return r},matchesItem:function(e,n){return n.name==e},isItemStep:!0},numStatsStep:{name:"Num Stats",getOptions:function(e,n,t){for(var a=s.findData(e,n,t),i={},r=0;r<a.length;++r){for(var o=0,c=0;c<a[r].stats.length;++c){var u=m.stats[a[r].stats[c].id];u&&!u.hide&&o++}i[o+"x stats"]=o}var d=[];for(var h in i)d.push({id:i[h],name:h});return d=d.sort(function(e,n){return e.id-n.id})},matchesItem:function(e,n){for(var t=0,a=0;a<n.stats.length;++a){var i=m.stats[n.stats[a].id];i&&!i.hide&&t++}return t==e},isItemStep:!0},highStatStep:{name:"High Stat",getOptions:function(e,n,t){var a=s.findData(e,n,t),i={id:-1,name:"all"},r=[i];if(a.length>1){for(var o={},c=0;c<a.length;++c)for(var u=0;u<a[c].stats.length;++u){var d=m.stats[a[c].stats[u].id];!d||!d.quickHigh||"high "+d.name in o||(o["high "+d.name]=d.id)}for(var h in o)r.push({id:o[h],name:h});r=r.length<=2?[i]:r.sort(function(e,n){return e.id-n.id})}return r},matchesItem:function(e,n){if(e==-1)return!0;for(var t=0,a=0,i=0;i<n.stats.length;++i){var r=n.stats[i];m.stats[r.id].quickHigh&&(r.id==e?a+=r.max:r.max>t&&(t=r.max))}return a>t},sortFunc:function(e,n,t){for(var a=0,i=0,r=0;r<n.stats.length;++r)if(n.stats[r].id==e){a=n.stats[r].max;break}for(var m=0;m<t.stats.length;++m)if(t.stats[m].id==e){i=t.stats[m].max;break}return i-a},isItemStep:!1,minOptions:3},hasStatStep:{name:"Has Stat",getOptions:function(e,n,t){var a=s.findData(e,n,t),i={id:-1,name:"all"},r=[i];if(a.length>1){for(var o={},c=0;c<a.length;++c)for(var u=0;u<a[c].stats.length;++u){var d=m.stats[a[c].stats[u].id];!d||!d.searchable||"high "+d.name in o||(o["has "+d.name]=d.id)}for(var h in o)r.push({id:o[h],name:h});r=r.length<=2?[i]:r.sort(function(e,n){return e.id-n.id})}return r},matchesItem:function(e,n){if(e==-1)return!0;for(var t=0;t<n.stats.length;++t){var a=n.stats[t];if(m.stats[a.id].searchable&&a.id==e)return!0}return!1},sortFunc:function(e,n,t){for(var a=0,i=0,r=0;r<n.stats.length;++r)if(n.stats[r].id==e){a=n.stats[r].max;break}for(var m=0;m<t.stats.length;++m)if(t.stats[m].id==e){i=t.stats[m].max;break}return i-a},isItemStep:!1,minOptions:3},customStep:{name:"misc",getOptions:function(e,n,t){return m.customItems},isItemStep:!0}}}e.$inject=["dntData","translations","itemColumnsToLoad","itemCategory","itemFactory","jobs","hCodeValues","quickAddHelper"],angular.module("dnsim").factory("quickAddSteps",e)}();
"use strict";!function(){function t(t,e,i,n){var o={region:"ALT",name:"Alternative user specified files",url:""},a=[{region:"sea",name:"south east asia",url:"https://seadnfiles.firebaseapp.com"},{region:"na",name:"north america",url:"https://dnna.firebaseapp.com"},{region:"eu",name:"europe",url:"https://eufiles.firebaseapp.com"},{region:"ina",name:"indonesia ",url:"https://inafiles-da491.firebaseapp.com"},{region:"th",name:"thailand",url:"https://thdnfiles.firebaseapp.com"},{region:"tw",name:"taiwan 臺灣",url:"https://twdnfiles.firebaseapp.com"},{region:"cdn",name:"china 中國",url:"https://cdnfiles.firebaseapp.com"},{region:"kdn",name:"korea 대한민국",url:"https://kdnfiles.firebaseapp.com"}],r=localStorage.getItem("lastDNTRegion"),s=null;r&&angular.forEach(a,function(t,e){t.region==r&&(s=t)});var l=localStorage.getItem("UIStrings_file"),c=null;return l&&angular.forEach(a,function(t,e){t.region!=o.region&&l.indexOf(t.url)>-1&&(c=t)}),null==c&&(c=s),{hostedFiles:a,alternativeFiles:o,dntLocation:s,tlocation:c,setCustomUrl:function(t){this.alternativeFiles.url=t;var e=[];angular.forEach(a,function(t,i){t.region!=o.region&&e.push(t)}),e.push(o),a=e,this.hostedFiles=e},setLocationByName:function(t){var e=null;angular.forEach(a,function(i,n){i.region==t&&(e=i)}),this.setLocation(e)},setLocation:function(t){t&&t!=this.dntLocation&&(this.dntLocation=t,e(),localStorage.setItem("lastDNTRegion",t.region),e(),n.reload());var i=this.getOverride();null!=this.tlocation&&i||this.setTLocation(t),this.init()},setTLocation:function(i){if(i!=this.tlocation&&(this.tlocation=i,sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file"),e(),t.reset(),i)){var o=this.getOverride();t.small=!o,t.location=this.tlocation.url,t.init(function(){},function(){n.reload()})}},getOverride:function(){return!!localStorage.getItem("tOverride")},setOverride:function(t){t?localStorage.setItem("tOverride","1"):localStorage.removeItem("tOverride"),this.setTLocation(this.dntLocation)},init:function(){this.getOverride()?t.small=!1:(this.tLocation=this.dntLocation,t.small=!0),this.tlocation&&(t.location=this.tlocation.url),i.setLocation(this.dntLocation)}}}angular.module("dnsim").factory("region",["translations","dntReset","dntData","$route",t])}();
"use strict";!function(){function e(e){return{saveItem:function(e,t){var r=this.getSavedItems();e in r&&Array.isArray(r[e].items)?(r[e].items.push(t),r[e].lastUpdate=(new Date).getTime(),this.updatedSavedItems(e,r[e].items)):this.updatedSavedItems(e,[t])},saveBuildSelection:function(e,t){this.setCurrentBuild(e),t&&e in t&&t[e].job&&t[e].job.id&&localStorage.setItem("jobNumber",t[e].job.id)},importGroup:function(e,t){var r=this.getSavedItems();return e=this.getUniqueGroupName(e,r),this.updatedSavedItems(e,t),e},getUniqueGroupName:function(e,t){var r=0;if(e.lastIndexOf(")")==e.length-1){var s=e.lastIndexOf("(");if(s>0){var i=Number(e.substr(s+1,e.length-s-2));i>0&&(r=i+1,e=e.substr(0,s-1))}}for(var a=e;;){var e=a;if(r>0&&(e=a+" ("+r+")"),!(e in t))break;r++}return e},deleteBuild:function(e){var t=this.getSavedItems();e in t&&(delete t[e],this.setCurrentBuild(null),this.saveBuilds(t))},updatedSavedItems:function(e,t){var r=this.getSavedItems();e in r?(r[e].items=t,r[e].lastUpdate=(new Date).getTime()):r[e]={items:t,lastUpdate:(new Date).getTime()},this.saveBuilds(r)},saveBuilds:function(e){var t=JSON.stringify(e);localStorage.setItem("savedItems",LZString.compressToUTF16(t))},saveBuild:function(e,t,r){this.updateBuild(e,t,r.enemyLevel,r.playerLevel,r.heroLevel,r.job,r.damageType,r.element,r.secondaryElement,r.critResist,r.eleResist,r.enemyStatCaps,r.playerStatCaps,r.conversions,r.baseStats,r.heroStats)},updateBuild:function(e,t,r,s,i,a,n,u,l,o,d,m,c,v,p,g){var h=this.getSavedItems();if(t in h||e==t)t=e;else if(e in h){var S=h[e];h[t]=S,delete h[e]}h[t].enemyLevel=r,h[t].playerLevel=s,h[t].heroLevel=i,h[t].job=a,h[t].damageType=n,h[t].element=u,h[t].secondaryElement=l,h[t].critResist=o,h[t].eleResist=d,h[t].enemyStatCaps=m,h[t].playerStatCaps=c,h[t].conversions=v,h[t].baseStats=p,h[t].heroStats=g,this.saveBuilds(h)},getSavedItems:function(){try{var e=LZString.decompressFromUTF16(localStorage.getItem("savedItems"));return JSON.parse(e)}catch(e){}return{}},currentBuild:null,getCurrentBuild:function(){if(!this.currentBuild&&(this.currentBuild=localStorage.getItem("currentGroup"),this.currentBuild)){var e=this.getSavedItems();this.currentBuild in e||(localStorage.removeItem("currentGroup"),this.currentBuild=null)}return this.currentBuild},setCurrentBuild:function(e){this.currentBuild=e,e?localStorage.setItem("currentGroup",e):localStorage.removeItem("currentGroup",e)}}}angular.module("dnsim").factory("saveHelper",["itemCategory",e])}();
"use strict";!function(){function a(a){return{getSetStats:function(t){var e=[],m={};return angular.forEach(t,function(a,t){null!==a&&null!=a.setStats&&(a.setId in m?m[a.setId].numItems++:m[a.setId]={numItems:1,stats:a.setStats})}),angular.forEach(m,function(a,t){angular.forEach(a.stats,function(t,m){t.needSetNum<=a.numItems&&e.push(t)})}),a.mergeStats(e)},getNumItemsForSet:function(a,t){var e=0;return angular.forEach(a,function(a,m){a&&a.setId&&a.setId==t&&e++}),e},getCombinedStats:function(t){var e=[];return angular.forEach(t,function(a,t){a&&(a.fullStats?e=e.concat(a.fullStats):a.stats&&(e=e.concat(a.stats)))}),a.mergeStats(e)},getCalculatedStatsFromItems:function(t,e){var m=this.getNakedStats(t),r=this.getCombinedStats(e),n=this.getSetStats(e),s=m.concat(r).concat(n);return null!=t.heroStats&&t.heroStats.length>0&&(s=s.concat(t.heroStats)),s=a.mergeStats(s),this.getCalculatedStats(t,s)},getCalculatedStats:function(t,e){function m(t){var e=a.stats[t.id];return l[e.pc]?Number(l[e.pc].max):0}function r(t){var e=a.stats[t.id];return l[e.skPc]?Number(l[e.skPc].max):0}function n(a){a.max=Math.floor(a.max*(1+m(a))*(1+r(a)))}function s(a){var t=l[a];return t?{id:a,max:Number(t.max),pc:t.pc}:{id:a,max:0,pc:0}}function i(a){a.max>0&&o.push(a)}function x(e,m,r){var n=(m+r)/2;n+=j*(G+1)*n*(1-c),n*=1+Q.max;var s=n;if(t.element&&t.element.id>0){var x=l[a.elements[t.element.id].dmgStat];x&&(s=s*(1+Number(x.max))*(1-Number(u)))}i({id:e,max:s});var o=0,f=0;if(f=t.element?t.element.id:0,(o=t.secondaryElement?t.secondaryElement.id:0)!=f)if(o>0){var d=l[a.elements[t.secondaryElement.id].dmgStat];if(d){var S=n*(1+Number(d.max))*(1-Number(u));i({id:e+1e3,max:S})}}else i({id:e+1e3,max:n})}var o=[],l={};if(!t.conversions||!t.enemyStatCaps||!t.playerStatCaps)return[];angular.forEach(e,function(a,t){l[a.id]=a});var c;c="critResist"in t?t.critResist/100:.2;var u;u="eleResist"in t?t.eleResist/100:0;var f=s(0);n(f),i(f);var d=s(1);n(d),i(d);var S=s(2);n(S),i(S);var h=s(3);n(h),i(h);var g=s(25);g.max+=h.max*Number(t.conversions.HP),n(g),i(g);var v=s(8);v.max+=h.max*Number(t.conversions.PhysicalDefense),n(v),i(v);var p=s(1008);p.max=Math.min(.85,v.max/Number(t.enemyStatCaps.Cdefense)),i(p);var b=s(9);b.max+=S.max*Number(t.conversions.MagicDefense),n(b),i(b);var N=s(1009);N.max=Math.min(.85,b.max/Number(t.enemyStatCaps.Cdefense)),i(N);var M=s(3e3),y=s(4),C=s(5);if(!t.damageType||2!=t.damageType.id){var k=s(32),I=s(101),T=s(3001),E=s(10164),A=s(110373);y.max+=k.max,y.max+=Math.floor(f.max*Number(t.conversions.StrengthAttack)),y.max+=Math.floor(d.max*Number(t.conversions.AgilityAttack)),y.max=Math.floor(y.max*(1+(m(y)+I.max))),y.max=Math.floor(y.max*(1+M.max+T.max)),y.max+=Math.floor(E.max*S.max),y.max+=Math.floor(A.max*v.max),i(y),C.max+=k.max,C.max+=Math.floor(f.max*Number(t.conversions.StrengthAttack)),C.max+=Math.floor(d.max*Number(t.conversions.AgilityAttack)),C.max=Math.floor(C.max*(1+(m(C)+I.max))),C.max=Math.floor(C.max*(1+M.max+T.max)),C.max+=Math.floor(E.max*S.max),C.max+=Math.floor(A.max*v.max),i(C)}var D=s(6),P=s(7);if(!t.damageType||1!=t.damageType.id){var R=s(33),V=s(102),F=s(3002),H=s(10165),w=s(10372);D.max+=R.max,D.max+=Math.floor(S.max*Number(t.conversions.IntelligenceAttack)),D.max=Math.floor(D.max*(1+(m(D)+V.max))),D.max=D.max*(1+M.max+F.max),D.max+=Math.floor(H.max*f.max),D.max+=Math.floor(w.max*S.max),i(D),P.max+=R.max,P.max+=S.max*Number(t.conversions.IntelligenceAttack),P.max=Math.floor(P.max*(1+(m(P)+V.max))),P.max=P.max*(1+M.max+F.max),P.max+=Math.floor(H.max*f.max),P.max+=Math.floor(w.max*S.max),i(P)}var B=s(12);B.max+=d.max*Number(t.conversions.Critical),n(B);var L=s(4012);B.max+=L.max,i(B);var O=s(1012),j=Math.min(.89,B.max/Number(t.enemyStatCaps.Ccritical)+O.max);o.push({id:1012,max:j});var q=s(103);q.max+=(f.max+S.max)*Number(t.conversions.StrengthIntelligenceToCriticalDamage),n(q),i(q);var z=s(1103),G=Math.min(1,q.max/t.playerStatCaps.CcriticalDamage+z.max);i({id:1103,max:G+2});var J=s(29);i(J);var K=Number(t.enemyStatCaps.Cfinaldamage),Q=s(1029);Q.max+=Math.min(Math.max(.35*Number(J.max)/K,Math.pow(Number(J.max)/K,2.2)),1),i(Q),i(s(16)),i(s(17)),i(s(18)),i(s(19)),t.damageType&&1!=t.damageType.id&&0!=t.damageType.id||x(1004,y.max,C.max),t.damageType&&2!=t.damageType.id&&0!=t.damageType.id||x(1006,D.max,P.max),t.damageType&&3!=t.damageType.id||x(1001,D.max+y.max,P.max+C.max);var U=s(2008);U.max=g.max/(1-p.max);var W=s(2009);W.max=g.max/(1-N.max);var X=s(3008);return X.max=(U.max+W.max)/2,i(X),o},getNakedStats:function(a){return a.baseStats&&a.baseStats.Strength>0?[{id:0,max:a.baseStats.Strength},{id:1,max:a.baseStats.Agility},{id:2,max:a.baseStats.Intelligence},{id:3,max:a.baseStats.Stamina}]:[]},getSkillStats:function(t,e,m){var r=null;if(angular.forEach(m,function(a,e){if(a.SkillIndex==t.id&&a.SkillLevel==t.enchantmentNum)return void(r=a)}),!r)return null;for(var n=1,s=[],i=!0;i;){var x="EffectClass"+n,o="EffectClassValue"+n;if(e&&x in e&&o in r){if(e[x]>0){var l=r[o],c=e[x],u=a.skillEffectMapping[c];if(u&&u.getVals)for(var f=u.getVals(l),d=0;d<f.length;++d)s.push(f[d]);else{var S;if(S=u&&u.mapTo?u.mapTo:1e4+c,l>0)s.push({id:S,effect:c,max:l});else if(l.toString().indexOf(";")>0){var f=l.split(";");f.length>0&&f[0]>0&&s.push({id:S,effect:c,max:f[0]})}}}}else i=!1;n++}return s},getBuildStats:function(t){var e={};return e.nakedStats=this.getNakedStats(t),e.combinedStats=this.getCombinedStats(t.items),e.setStats=this.getSetStats(t.items),e.allStats=e.nakedStats.concat(e.combinedStats).concat(e.setStats),t.heroStats&&t.heroStats.length&&(e.heroStats=t.heroStats,e.allStats=e.allStats.concat(t.heroStats)),e.allStats=a.mergeStats(e.allStats),e.calculatedStats=this.getCalculatedStats(t,e.allStats),e}}}angular.module("dnsim").factory("statHelper",["hCodeValues",a])}();
"use strict";!function(){function t(t,e){var a=new DnTranslations,i=[],n=[];return{reset:function(){a=new DnTranslations,a.sizeLimit=100,this.loaded=!1,this.startedLoading=!1,i=[],n=[]},getFileName:function(){return this.small?"uistring.optimised.lzjson":"uistring.lzjson"},loaded:!1,startedLoading:!1,small:!1,location:null,init:function(t,o){if(this.isLoaded())o();else if(n=[],t&&n.push(t),o&&i.push(o),!this.startedLoading){this.startedLoading=!0;var s=this,r=null;this.location&&""!=this.location&&(r=this.location+"/"+this.getFileName())!=localStorage.getItem("UIStrings_file")&&(sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file")),e.$broadcast("TRANSLATION_LOAD_EVENT"),a.loadDefaultFile(r,function(t){angular.forEach(n,function(e,a){e(t)})},function(){s.loaded=!0,angular.forEach(i,function(t,e){t()}),i=[],e.$broadcast("TRANSLATION_LOAD_EVENT")},function(t){angular.forEach(n,function(e,a){e(t)}),e.$broadcast("TRANSLATION_LOAD_ERROR"),s.startedLoading=!1,s.loaded=!1})}},isLoaded:function(){if(!this.loaded){this.location+"/"+this.getFileName()!=localStorage.getItem("UIStrings_file")&&(sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file")),this.loaded=a.loadFromSession(),this.loaded&&(this.startedLoading=!0)}return this.loaded},translate:function(t,e){if(this.loaded)try{var i;if(!t)return"";if("string"!=typeof(i=a.translate(t)))return"m"+i;if(e&&i)if("string"==typeof e)for(var n=e.split(","),o=0;o<n.length;++o){var s=n[o];0==s.indexOf("{")&&(s=n[o].replace(/\{|\}/g,""),s=a.translate(s)),i=i.replace("{"+o+"}",s)}else i=i.replace("{0}",e);return i}catch(a){console.log("unable to translate",t,e,a)}return"m"+t}}}angular.module("dnsim").factory("translations",["$routeParams","$rootScope",t])}();
"use strict";!function(){function a(){function a(a){return Math.floor(a.max)}function e(a){var e=Number(a.max);return e<100?e:e<1e5?Math.round(e/100)/10+"k":e<1e6?Math.round(e/1e3)+"k":e<1e7?Math.round(e/1e4)/100+"m":Math.round(e/1e6)+"m"}function d(a){return Math.round(1e4*a.max)/100+"%"}return{stats:{0:{id:0,name:"str",display:a,dps:!0,pc:50,skPc:4050,searchable:!0,quickHigh:!0},1:{id:1,name:"agi",display:a,dps:!0,pc:51,skPc:4051,searchable:!0,quickHigh:!0},2:{id:2,name:"int",display:a,dps:!0,pc:52,skPc:4052,searchable:!0,quickHigh:!0},3:{id:3,name:"vit",display:a,def:!0,pc:53,skPc:4053,searchable:!0,quickHigh:!0},4:{id:4,name:"pdmg",display:a,combineWith:5,dps:!0,pc:54,searchable:!0,altStat:32,quickHigh:!0},5:{id:5,name:"maxPdmg",display:a,hide:!0,pc:55},6:{id:6,name:"mdmg",display:a,combineWith:7,dps:!0,pc:56,searchable:!0,altStat:33,quickHigh:!0},7:{id:7,name:"maxMdmg",display:a,hide:!0,pc:57},8:{id:8,name:"pdef",display:e,def:!0,pc:58,searchable:!0},9:{id:9,name:"mdef",display:e,def:!0,pc:59,searchable:!0},10:{id:10,name:"para",display:e,pc:60,noCustom:!0},11:{id:11,name:"para resist",display:e,pc:61,noCustom:!0},12:{id:12,name:"crit",display:e,dps:!0,pc:62,searchable:!0},13:{id:13,name:"crit resist",display:e,pc:63,noCustom:!0},14:{id:14,name:"stun",display:e,pc:64,noCustom:!0},15:{id:15,name:"stun resist",display:e,pc:65,noCustom:!0},16:{id:16,name:"fire%",display:d,dps:!0,searchable:!0},17:{id:17,name:"ice%",display:d,dps:!0,searchable:!0},18:{id:18,name:"light%",display:d,dps:!0,searchable:!0},19:{id:19,name:"dark%",display:d,dps:!0,searchable:!0},20:{id:20,name:"fire def",display:d,def:!0,searchable:!0},21:{id:21,name:"ice def",display:d,def:!0,searchable:!0},22:{id:22,name:"light def",display:d,def:!0,searchable:!0},23:{id:23,name:"dark def",display:d,def:!0,searchable:!0},25:{id:25,name:"hp",display:e,def:!0,pc:75,skPc:4075,searchable:!0},26:{id:26,name:"mp",display:e,def:!0,pc:76,skPc:4076},29:{id:29,name:"fd",display:a,dps:!0,searchable:!0},32:{id:32,name:"pdmg",display:a,dps:!0,pc:54,quickHigh:!0},33:{id:33,name:"mdmg",display:a,dps:!0,pc:56,quickHigh:!0},50:{id:50,name:"str%",display:d,dps:!0},51:{id:51,name:"agi%",display:d,dps:!0},52:{id:52,name:"int%",display:d,dps:!0},53:{id:53,name:"vit%",display:d,def:!0},54:{id:54,name:"pdmg%",display:d,combineWith:55,dps:!0},55:{id:55,name:"maxPdmg%",display:d,hide:!0},56:{id:56,name:"mdmg%",display:d,combineWith:57,dps:!0},57:{id:57,name:"maxMdmg%",display:d,hide:!0},58:{id:58,name:"pdef%",display:d,def:!0},59:{id:59,name:"mdef%",display:d,def:!0},60:{id:60,name:"para%",display:d,noCustom:!0,def:!0},61:{id:61,name:"para resist%",display:d,noCustom:!0,def:!0},62:{id:62,name:"crit%",display:d,dps:!0},63:{id:63,name:"crit resist%",display:d,def:!0},64:{id:64,name:"stun%",display:d,noCustom:!0,def:!0},65:{id:65,name:"stun resist%",display:d,noCustom:!0,def:!0},74:{id:74,name:"move%",display:d,noCustom:!0,def:!0},75:{id:75,name:"hp%",display:d,def:!0},76:{id:76,name:"mp%",display:d,def:!0},77:{id:77,name:"mp recover%",display:d,def:!0},81:{id:81,name:"safe move%",display:d,noCustom:!0,def:!0},101:{id:101,name:"pdmg%",display:d,noCustom:!0,dps:!0,quickHigh:!0},102:{id:102,name:"mdmg%",display:d,noCustom:!0,dps:!0,quickHigh:!0},103:{id:103,name:"cdmg",display:e,dps:!0,pc:104,searchable:!0},104:{id:104,name:"crit dmg%",display:d,noCustom:!0,dps:!0},105:{id:104,name:"pvp dmg",display:e,noCustom:!0,dps:!0},106:{id:106,name:"pvp def",display:e,noCustom:!0,def:!0},107:{id:107,name:"mp?",display:a,noCustom:!0,hide:!0,def:!0},1001:{id:1001,name:"dmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1004:{id:1004,name:"pdmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1006:{id:1006,name:"mdmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1008:{id:1008,name:"pdef",display:d,noCustom:!0,summaryFor:8},1009:{id:1009,name:"mdef",display:d,noCustom:!0,summaryFor:9},1012:{id:1012,name:"crit chance",display:d,noCustom:!0,dps:!0,summaryFor:12},1029:{id:1029,name:"fd",display:d,noCustom:!0,dps:!0,summaryFor:29},1103:{id:1103,name:"crit dmg",display:d,noCustom:!0,dps:!0,summaryFor:103},2001:{id:2001,name:"dmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2004:{id:2004,name:"pdmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2006:{id:2006,name:"mdmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2008:{id:2008,name:"pdef eqhp",display:e,noCustom:!0},2009:{id:2009,name:"mdef eqhp",display:e,noCustom:!0},3e3:{id:3e3,name:"skDmg%",display:d,dps:!0},3001:{id:3001,name:"skPDmg%",display:d,dps:!0},3002:{id:3002,name:"skMDmg%",display:d,dps:!0},3008:{id:3008,name:"eqhp",display:e,summaryDisplay:!0,noCustom:!0,hide:!0},4012:{id:4012,name:"skCrit",display:e,dps:!0},4050:{id:4050,name:"skStr%",display:d,dps:!0},4051:{id:4051,name:"skAgi%",display:d,dps:!0},4052:{id:4052,name:"skInt%",display:d,dps:!0},4053:{id:4053,name:"skVit%",display:d,def:!0},4075:{id:4075,name:"skHp%",display:d,def:!0},4076:{id:4076,name:"skMp%",display:d,def:!0},10164:{id:10164,name:"intToPdmg",display:d,noCustom:!0,dps:!0},10165:{id:10165,name:"strToMdmg",display:d,noCustom:!0,dps:!0},10372:{id:10372,name:"intToMdmg",display:d,noCustom:!0,dps:!0},110373:{id:110373,name:"defToPdmg",display:d,noCustom:!0,dps:!0}},rankNames:{0:{id:0,name:"normal"},1:{id:1,name:"magic"},2:{id:2,name:"rare"},3:{id:3,name:"epic"},4:{id:4,name:"unique"},5:{id:5,name:"legendary"}},shopNames:{28001:"lament",28002:"lament",28003:"lament",28004:"lament",28005:"lament",28006:"lament",28007:"lament",28008:"lament",28009:"lament",28101:"lament",29001:"aura",29002:"aura",29003:"aura",29004:"aura",29005:"aura",29006:"aura",29007:"aura",29008:"aura",29009:"aura",5001:"medal",5002:"medal",5003:"medal",5004:"medal",5005:"medal",5006:"medal",5007:"medal",5008:"medal",5009:"medal",5101:"ladder",5102:"ladder",5103:"ladder",5104:"ladder",5105:"ladder",5106:"ladder",5107:"ladder",5108:"ladder",5109:"ladder",59001:"garden bunny",52001:"nightmare",52002:"nightmare",52003:"nightmare",52004:"nightmare",52005:"nightmare",52006:"nightmare",52007:"nightmare",52008:"nightmare",52009:"nightmare",21:"blacksmith",22:"blacksmith",23:"blacksmith",24:"blacksmith",25:"blacksmith",26:"blacksmith",27:"blacksmith",28:"blacksmith",29:"blacksmith",89001:"guild master",88001:"battlefield",88002:"battlefield",88003:"battlefield",88004:"battlefield",88005:"battlefield",88006:"battlefield",88007:"battlefield",88008:"battlefield",88009:"battlefield",66001:"erosion",35006:"plate",14051:"abyss",14052:"abyss",14053:"abyss",14054:"abyss",14055:"abyss",14056:"abyss",14057:"abyss",14058:"abyss",14059:"abyss",40011:"daredevil faire",40012:"daredevil faire",40013:"daredevil faire",40014:"daredevil faire",40015:"daredevil faire",40016:"daredevil faire",40017:"daredevil faire",40018:"daredevil faire",40001:"daredevil faire",40002:"daredevil faire",40111:"daredevil faire",91001:"wrath",45001:"farm",100004:"event"},checkedRank:{0:!0,1:!0,2:!0,3:!0,4:!0,5:!0},typeNames:{0:"weapons",1:"equipment",5:"plates",8:"pouch",38:"plates",90:"welspring",132:"talisman",139:"gems"},elements:{0:{id:0,name:"non-ele"},1:{id:1,name:"fire",dmgStat:16},2:{id:2,name:"ice",dmgStat:17},3:{id:3,name:"light",dmgStat:18},4:{id:4,name:"dark",dmgStat:19}},damageTypes:{0:{id:0,name:"both separate"},1:{id:1,name:"physical"},2:{id:2,name:"magical"},3:{id:3,name:"both combined"}},skillEffectMapping:{2:{id:2,name:"phyisical attack power",mapTo:3001},13:{id:13,name:"mp",mapTo:26},25:{id:25,name:"action speed"},29:{id:29,name:"magic attack power",mapTo:3002},32:{id:32,name:"fire %",mapTo:16},33:{id:33,name:"ice %",mapTo:17},34:{id:34,name:"light %",mapTo:18},35:{id:35,name:"dark %",mapTo:19},36:{id:36,name:"fire def",mapTo:20},37:{id:37,name:"ice def",mapTo:21},38:{id:38,name:"light def",mapTo:22},39:{id:39,name:"dark def",mapTo:23},58:{id:58,name:"hp%",mapTo:4075},59:{id:59,name:"mp%",mapTo:4076},65:{id:65,name:"range"},76:{id:76,name:"movement speed",mapTo:74},87:{id:87,name:"str%",mapTo:4050},88:{id:88,name:"agi%",mapTo:4051},89:{id:89,name:"int%",mapTo:4052},90:{id:90,name:"vit%",mapTo:4053},185:{id:185,name:"wots attack power",mapTo:3e3},251:{id:251,name:"critical chance%",mapTo:1012},164:{id:164,name:"intToPdmg",mapTo:10164},165:{id:165,name:"strToMdmg",mapTo:10165},222:{id:222,name:"hellfire",getVals:function(a){if(a.indexOf(";")>0){var e=a.split(";");return[{id:62,effect:222,max:Number(e[0])/100},{id:4012,effect:222,max:Number(e[1])}]}return[{id:62,effect:222,max:Number(a)/100}]}},372:{id:372,name:"statConversion",getVals:function(a){if(a.indexOf(";")>0){var e=a.split(";");if(3==e.length&&2==e[0]&&6==e[2])return[{id:10372,name:"intToMdmg",max:Number(e[1])}];if(3==e.length&&5==e[0]&&7==e[2])return[{id:110373,name:"defToPdmg",max:Number(e[1])}]}return[]}},389:{id:389,name:"fd buf",mapTo:1029},404:{id:404,name:"critical damage%",mapTo:1103}},gemExchanges:[{id:2,exchange:1,name:"Weapon"},{id:3,exchange:2,name:"Off-Hand Weapon"},{id:4,exchange:3,name:"Headgear"},{id:5,exchange:4,name:"Body Armor"},{id:6,exchange:5,name:"Leg Armor"},{id:7,exchange:6,name:"Gloves"},{id:8,exchange:7,name:"Shoes"},{id:101,exchange:8,name:"Necklace"},{id:102,exchange:9,name:"Earrings"},{id:103,exchange:10,name:"Ring"}],customItems:[{id:0,typeName:"custom",name:"hp unified",stats:[{id:4075,max:.05}]}],getStats:function(a){var e=!1,d=!1,i=!0,m="State1_Max";m in a?e=!0:(m="State1Value")in a&&(d=!0);for(var n=0,s=[];;){n++;var t="State"+n;if(!(t in a))break;var p=a[t];if(p==-1)break;if(107==p);else{var m,l={id:p};if(e?(m="State"+n+"_Max",l.max=a[m]):d?(m="State"+n+"Value",l.max=a[m]):(m="StateValue"+n,l.max=Number(a[m])),l.max>0||l.max<0){if(i)if((m="NeedSetNum"+n)in a){if(0==a[m])break;l.needSetNum=a[m]}else i=!1;s.push(l)}}}return s},setupStat:function(a,e){a.id=Number(e)},mergeStats:function(a,e){function d(a){var e=Number(a.max);m.stats[a.id]&&"pc"in m.stats[a.id]&&(e=Math.floor(e)),a.id in i?i[a.id]+=e:i[a.id]=e}var i={},m=this;angular.forEach(a,function(a,e){a&&d(a)}),e&&angular.forEach(e,function(a,e){a&&d(a)});var n=[];for(var s in i){var t={max:i[s],id:Number(s)};n.push(t)}return n}}}angular.module("dnsim").factory("hCodeValues",[a])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlcy5qcyIsImFib3V0L2Fib3V0LmpzIiwiZmlsdGVycy9lc2NhcGUuZmlsdGVyLmpzIiwiZmlsdGVycy9wZXJjZW50YWdlLmZpbHRlci5qcyIsImJ1aWxkcy9idWlsZC1hY3Rpb25zLmpzIiwiYnVpbGRzL2J1aWxkLWV4cG9ydC1hY3Rpb24uanMiLCJidWlsZHMvYnVpbGQtaW1wb3J0LmpzIiwiYnVpbGRzL2J1aWxkLWl0ZW0tbGlzdC5qcyIsImJ1aWxkcy9idWlsZC1pdGVtLmpzIiwiYnVpbGRzL2J1aWxkLWxpc3QuanMiLCJidWlsZHMvYnVpbGQtc3RhdHMuanMiLCJidWlsZHMvYnVpbGQtc3VtbWFyeS5qcyIsImJ1aWxkcy9idWlsZC10YWxpc21hbnMuanMiLCJidWlsZHMvYnVpbGQuanMiLCJidWlsZHMvZGVsZXRlLWJ1aWxkLmpzIiwiYnVpbGRzL2VkaXQtYnVpbGQuanMiLCJidWlsZHMvcXVpY2stYWRkLmpzIiwiYnVpbGRzL3JlbG9hZC1idWlsZC5qcyIsImJ1aWxkcy92aWV3LWdyb3VwLmpzIiwiaXRlbS9ncm91cC1hc3NpZ25tZW50LmpzIiwiaXRlbS9pdGVtLWVkaXQtY3VzdG9tLmpzIiwiaXRlbS9pdGVtLWVkaXQtZW5jaGFudG1lbnQuanMiLCJpdGVtL2l0ZW0tZWRpdC1wb3RlbnRpYWwuanMiLCJpdGVtL2l0ZW0tZWRpdC1za2lsbC5qcyIsIml0ZW0vaXRlbS1lZGl0LXNwYXJrLmpzIiwiaXRlbS9pdGVtLWVkaXQtdGFsaXNtYW4uanMiLCJpdGVtL2l0ZW0tZWRpdC5qcyIsIml0ZW0vaXRlbS12aWV3LWJveC5qcyIsIml0ZW0vaXRlbS12aWV3LWNyYWZ0LmpzIiwiaXRlbS9pdGVtLXZpZXctZXh0cmFjdGlvbi5qcyIsIml0ZW0vaXRlbS12aWV3LXBsYXRlLmpzIiwiaXRlbS9pdGVtLXZpZXctc2V0LmpzIiwiaXRlbS9pdGVtLXZpZXctc2hvcC5qcyIsIml0ZW0vaXRlbS12aWV3LXRyYW5zZmVyLmpzIiwiaXRlbS9pdGVtLmpzIiwibmF2L2V4cG9ydC5qcyIsIm5hdi9oZWFkZXIuanMiLCJuYXYvbmF2LmpzIiwibmF2L3NldHVwLmpzIiwib25saW5lL2J1aWxkLXNlYXJjaC5qcyIsIm9ubGluZS9wcm9maWxlLmpzIiwib25saW5lL3B1Ymxpc2guanMiLCJvbmxpbmUvcHVibGlzaGVkLmpzIiwicmVnaW9uL3JlZ2lvbi5qcyIsInNlYXJjaC9jdXN0b20taXRlbXMuanMiLCJzZWFyY2gvZXZlcnl0aGluZy1zZWFyY2guanMiLCJzZWFyY2gvc2VhcmNoLmpzIiwic2VhcmNoL3NraWxsLXNlYXJjaC5qcyIsIndpZGdldHMvY2hvb3NlLWNsYXNzLmpzIiwid2lkZ2V0cy9kbnNpbS1jYXRlZ29yeS1saW5rcy5qcyIsIndpZGdldHMvZG5zaW0taXRlbS1pY29uLmpzIiwid2lkZ2V0cy9kbnNpbS1pdGVtLWxpbmsuanMiLCJ3aWRnZXRzL2Ruc2ltLWpvYi1pY29uLmpzIiwid2lkZ2V0cy9kbnNpbS1sb2FkaW5nLmpzIiwid2lkZ2V0cy9kbnNpbS1zZWxlY3QtYWxsLW9uLWNsaWNrLmpzIiwid2lkZ2V0cy9kbnNpbS1zdGF0cy5qcyIsIndpZGdldHMvZG5zaW0tc3RyaW5nLXRvLW51bWJlci5qcyIsIndpZGdldHMvZG5zaW0tc3RyaW5nLXRvLXBlcmNlbnQuanMiLCJ3aWRnZXRzL2ZpbGUtY2hhbmdlLmpzIiwiY2hhcmFjdGVyU2VydmljZS5qcyIsImNvbHVtbnNUb0xvYWRTZXJ2aWNlLmpzIiwiZG50RGF0YVNlcnZpY2UuanMiLCJkbnRJbml0U2VydmljZS5qcyIsImRudFJlc2V0U2VydmljZS5qcyIsImR2U3RhdGNhcmRTZXJ2aWNlLmpzIiwiZXhwb3J0TGlua1NlcnZpY2VzLmpzIiwiZ3JvdXBTZXJ2aWNlcy5qcyIsIml0ZW1DYXRlZ29yeVNlcnZpY2UuanMiLCJpdGVtRXhjbHVkZVNlcnZpY2UuanMiLCJpdGVtRmFjdG9yeVNlcnZpY2UuanMiLCJpdGVtU291cmNlU2VydmljZS5qcyIsImpvYlNlcnZpY2UuanMiLCJvbmxpbmVTZXJ2aWNlLmpzIiwicXVpY2tBZGRIZWxwZXJTZXJ2aWNlLmpzIiwicXVpY2tBZGRTZXJ2aWNlLmpzIiwicXVpY2tBZGRTdGVwc1NlcnZpY2UuanMiLCJyZWdpb25TZXJ2aWNlLmpzIiwic2F2ZVNlcnZpY2UuanMiLCJzdGF0U2VydmljZS5qcyIsInRyYW5zbGF0aW9uU2VydmljZS5qcyIsInZhbHVlU2VydmljZXMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIiRyb3V0ZVByb3ZpZGVyIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwid2hlbiIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJtb2R1bGUiLCJjb25maWciLCJkb2N1bWVudCIsImJvZHkiLCJjbGFzc05hbWUiLCJmaWx0ZXIiLCJpbnB1dCIsIndpbmRvdyIsImVuY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZUZpbHRlciIsIk1hdGgiLCJyb3VuZCIsInBlcmNlbnRhZ2VGaWx0ZXIiLCIkc3RhdGVmdWwiLCIkbG9jYXRpb24iLCJzYXZlSGVscGVyIiwiZXhwb3J0TGlua0hlbHBlciIsInZtIiwidGhpcyIsInBhdGgiLCJidWlsZE5hbWUiLCJjb3B5R3JvdXAiLCJuZXdHcm91cE5hbWUiLCJpbXBvcnRHcm91cCIsImJ1aWxkIiwiaXRlbXMiLCJzYXZlQnVpbGQiLCJyZWxvYWRHcm91cCIsInJlbG9hZGVkIiwiY3JlYXRlU2hvcnRVcmwiLCJjcmVhdGVHcm91cExpbmsiLCJzZXRTaG9ydFVybCIsImRpcmVjdGl2ZSIsInNob3J0VXJsIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwibG9uZ1VybCIsIm9uQ2hhbmdlIiwiY29udHJvbGxlckFzIiwiJHRpbWVvdXQiLCJoQ29kZVZhbHVlcyIsInN0YXRIZWxwZXIiLCJpdGVtQ2F0ZWdvcnkiLCJncm91cEhlbHBlciIsInRyYW5zbGF0aW9ucyIsImRudERhdGEiLCJkbnRSZXNldCIsImJsb2IiLCJzYXZlQXMiLCJCbG9iIiwiSlNPTiIsInN0cmluZ2lmeSIsInR5cGUiLCJleHBvcnQiLCJleHBvcnRCdWlsZCIsInNjb3BlIiwiYmluZFRvQ29udHJvbGxlciIsImZpbGVzIiwidGFyZ2V0IiwiY29uc29sZSIsImV2ZW50IiwibGVuZ3RoIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc1RleHQiLCJvbmxvYWQiLCJmaWxlTmFtZSIsInJlcGxhY2UiLCJjb3B5TG9jYWxseSIsImJ1aWxkSXRlbUxpc3RDb250cm9sbGVyIiwiZ2V0Q2F0ZWdvcnlJdGVtcyIsImdldEl0ZW1zQnlDYXRlZ29yeSIsIml0ZW1zQnlDYXQiLCJjYXRlZ29yeSIsInN1YkNhdHMiLCJzdWJDYXRDYXROYW1lIiwiZ2V0U3ViQ2F0ZWdvcmllcyIsIm5hbWUiLCJzdWJDYXRMaXN0Iiwic29ydCIsIml0ZW0xIiwiaXRlbTIiLCJleGNoYW5nZVR5cGUiLCJfIiwiaXRlbSIsImluY3JlYXNpbmdHZW1TbG90cyIsIm9mZmVuc2l2ZUdlbVNsb3RzIiwiY29zdHVtZUNhdCIsImlzSXRlbUZvckNhdCIsIm5hbWVzIiwic2xvdHMiLCJyZXRWYWwiLCJleGNoYW5nZUlkIiwic3ViQ2F0IiwiZXhjaGFuZ2UiLCJmaW5kIiwiZ2VtRXhjaGFuZ2VzIiwiZSIsImVhY2giLCJpc0luU3ViQ2F0IiwiZ2VtRXhjaGFuZ2UiLCJpZCIsImZvdW5kU3ViQ2F0SXRlbSIsImNhbk1vdmUiLCJhbGxTdWJDYXRJdGVtcyIsInN1YkNhdEl0ZW0iLCJsb2ciLCJtb3ZlIiwibW92ZUl0ZW0iLCJkZXN0aW5hdGlvbiIsImFsbG93TW9yZUl0ZW1zIiwiaGFuZGxlQ2hhbmdlIiwiZ2V0R2VtU2xvdCIsInVwZGF0ZWRTYXZlZEl0ZW1zIiwibWF4Q2F0IiwiY2FuY2VsRWRpdCIsImhhbmRsZUl0ZW1FZGl0IiwidHlwZU5hbWUiLCJyZW1vdmVJdGVtIiwibmV3SXRlbUxpc3QiLCJmb3JFYWNoIiwiZ0l0ZW0iLCJpbmRleCIsInB1c2giLCIkaW5qZWN0Iiwic2VydmVyIiwiZ2VtU2xvdCIsImdlbVNsb3RzIiwiaSIsInNldEZ1bGxTdGF0cyIsImZ1bGxTdGF0cyIsInN0YXRzIiwibWVyZ2VTdGF0cyIsImVuY2hhbnRtZW50U3RhdHMiLCJzcGFya1N0YXRzIiwiZ2V0R2VtU2xvdE5hbWUiLCJlZGl0TW9kZSIsInNldHVwQnVpbGRzIiwic2F2ZWRJdGVtcyIsImdldFNhdmVkSXRlbXMiLCJidWlsZE5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsImJ1aWxkcyIsIiRyb3V0ZVBhcmFtcyIsImN1cnJlbnRHcm91cCIsInNhdmVCdWlsZFNlbGVjdGlvbiIsIiR3aW5kb3ciLCJ0aXRsZSIsImNyZWF0ZUdyb3VwIiwidG9nZ2xlR3JvdXAiLCJ1cmwiLCJzZWFyY2giLCJidWlsZFN0YXRzQ29udHJvbGxlciIsImR2U3RhdGNhcmRIZWxwZXIiLCJleHBvcnRTdGF0Q2FyZCIsImNvbnZlcnRTdGF0cyIsImNhbGN1bGF0ZWRTdGF0cyIsImR2Q2FyZFN0YXRIYXNoIiwiYnRvYSIsIml0ZW1zQnlDYXRlZ29yeSIsImdldFNhdmVEYXRlIiwibGFzdFVwZGF0ZSIsImdyb3VwIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImdldFNhdmVUaW1lIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiZ2V0QnVpbGRTdW1tYXJ5Iiwic3VtbWFyeSIsIml0ZW1zQnlUeXBlIiwiam9icyIsIml0ZW1Db2x1bW5zVG9Mb2FkIiwiY2hhcmFjdGVyIiwidXBkYXRlUm93cyIsIm5ld1ZhbCIsIm9yaWdWYWwiLCJzY3JvbGxUbyIsImdyb3VwTmFtZXMiLCJncm91cE5hbWUiLCJnZXRDdXJyZW50QnVpbGQiLCJnZXRHcm91cENhbGNTdGF0cyIsImdyb3VwQ2FsY1N0YXRzIiwiZ2V0Q2FsY3VsYXRlZFN0YXRzRnJvbUl0ZW1zIiwiZ2V0QnVpbGQiLCJwaWNrdXAiLCJyZXBsYWNlSFBBZmZlY3RBbW91bnQiLCJyZXBsYWNlUERtZ0FmZmVjdEFtb3VudCIsInJlcGxhY2VBdmdEbWdBZmZlY3RBbW91bnQiLCJzdW1tYXJ5U3RhdElkcyIsInBjSW5kZXhlcyIsInN1bW1hcnlEaXNwbGF5Iiwicm93cyIsInBjSW5kZXgiLCJyb3dJbmRleCIsImVuY2hhbnRtZW50TnVtIiwibWFrZUZha2VDZWxscyIsImRhdGEiLCJtYWtlQ2VsbCIsInNlbGVjdGVkSW5kZXgiLCJudW0iLCJjb2wiLCJjbGljayIsInNldFRhbGlzbWFuIiwic3dhcEVuY2hhbnRtZW50TnVtYmVyIiwibmV3RW5oYW5jZW1lbnROdW0iLCJleHRyYVN0YXRzIiwicmVwbGFjZUFmZmVjdEFtb3VudCIsInN0YXQiLCJnZXRSZXBsYWNlQWZmZWN0QW1vdW50IiwibWF4Iiwic3RhdElkIiwiaXRlbUluZGV4IiwiaW5pdFJlcGxhY2VBZmZlY3RzIiwiZnVsbFN0YXRzMiIsIm5ld0l0ZW1zIiwiZnVsbFN0YXRzMSIsIm5ld1N0YXRzIiwib3JpZ1N0YXRzIiwiY2FsY1N0YXRQZXJjZW50IiwiZWxlbWVudCIsImVsZUlkIiwiZWxlbWVudHMiLCJnZXRTdGF0IiwiZ2V0U3RhdE5hbWUiLCJzZWNvbmRhcnlFbGVtZW50IiwibGVuIiwic2F2ZSIsImJ1bGlkQ29udHJvbGxlciIsImdldEJ1aWxkU3RhdHMiLCJzZWxlY3RlZENhdGVnb3J5IiwibG9jYWxTdG9yYWdlIiwiaGlkZUluQnVpbGQiLCJieU5hbWUiLCJjaGFuZ2VDYXRlZ29yeSIsInhzVmlldyIsImNhdGVnb3J5Q2hhbmdpbmciLCJnZXRDYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsInNldFNlbGVjdGVkQ2F0ZWdvcnkiLCJ2YWx1ZSIsImdldEl0ZW1Db3VudCIsIml0ZW1Db3VudFRleHQiLCJhbGxJdGVtcyIsIm51bU9mZmVuc2l2ZVNsb3RzIiwibnVtT2ZmZW5zaXZlR2VtcyIsInRvdGFsSW5jcmVhc2luZ0dlbXMiLCJudW1JbmNyZWFzaW5nU2xvdHMiLCJudW1JbmNyZWFzaW5nR2VtcyIsImdlbVR5cGUiLCJzcGFya1R5cGVJZCIsIm51bWJlciIsIm51bUl0ZW1zIiwiY2F0IiwibnVtSXRlbVRleHQiLCJjb25jYXQiLCJuZXdDdXN0b20iLCJuZXdHcm91cCIsImRlbGV0ZUJ1aWxkIiwiZWRpdEJ1aWxkQ3RybCIsInJlZ2lvbiIsImhlcm9TdGF0cyIsIm9sZEdyb3VwTmFtZSIsImRhbWFnZVR5cGVzIiwiam9iIiwiaW5pdERhbWFnZVR5cGUiLCJkYW1hZ2VUeXBlIiwiZCIsIkRhbWFnZVR5cGUiLCJpbml0RGVmYXVsdEVsZW1lbnQiLCJkZWZhdWx0RWxlbWVudCIsImRlZmF1bHRTZWNvbmRhcnlFbGVtZW50Iiwiam9iTmFtZSIsIkVuZ2xpc2hOYW1lIiwiY3JpdFJlc2lzdCIsImVuZW15TGV2ZWwiLCJwbGF5ZXJMZXZlbCIsImVsZVJlc2lzdCIsImluaXQiLCJuZXdKb2JzIiwiaGVyb0xldmVsIiwic2V0SGVyb1N0YXRzIiwia2V5IiwiZ2V0U3RhdENhcCIsImdldFN0YXRDYXBzIiwiZ2V0Sm9iQ29udmVyc2lvbiIsImludmFsaWRHcm91cE5hbWUiLCJjb2xOYW1lIiwidXNlTGV2ZWwiLCJnZXRDb252ZXJzaW9ucyIsImdldEpvYkJhc2VTdGF0IiwiZ2V0QmFzZVN0YXRzIiwib2siLCJiYXNlU3RhdHMiLCJnZXRIZXJvU3RhdHMiLCJlbmVteVN0YXRDYXBzIiwicGxheWVyU3RhdENhcHMiLCJjb252ZXJzaW9ucyIsInNldFNlbGVjdGlvblJhbmdlIiwiZ2V0RWxlbWVudEJ5SWQiLCJmb2N1cyIsInF1aWNrQWRkIiwic3RhcnRlZEZvckNhdCIsInN0ZXBOdW1iZXIiLCJkYXRhcyIsIm9wdGlvbnMiLCJzZXRPcHRpb25zIiwiaGFzU3RhcnRlZCIsImdldE9wdGlvbnMiLCJzZWxlY3RPcHRpb24iLCJjcmVhdGVEYXRhIiwiaXNWYWxpZFN0ZXBOdW1iZXIiLCJkbnRGaWxlcyIsImdldERudEZpbGVzIiwibmV3SXRlbSIsImNvbHVtbnMiLCJ0cnlUb0FkZEl0ZW0iLCJhbGxMb2FkZWQiLCJjYW5jZWwiLCJyZWxvYWRJdGVtIiwic2F2ZUl0ZW0iLCJyZXNldCIsInN0YXJ0IiwiaGFzT3B0aW9ucyIsImJhY2siLCJwb3AiLCJ0ZXN0T3B0aW9ucyIsInJlbG9hZEJ1aWxkQ3RybCIsInByb2dyZXNzIiwidHJ5SW5pdCIsImdvVG9CdWlsZCIsImlzTG9hZGVkIiwiJHNjb3BlIiwiYWxsSW5pdCIsImFueUxvYWRpbmciLCJnZXRCeUlkIiwic2V0TG9jYXRpb25CeU5hbWUiLCJnIiwicCIsImgiLCJzIiwiaXRlbVN0cmluZyIsImRlY29kZUl0ZW0iLCJpdGVtU3RyIiwiaXNMb2FkaW5nIiwiYW55SXRlbXMiLCJuZXdCdWlsZE5hbWUiLCJncm91cEFzc2lnbm1lbnQiLCJzYXZlR3JvdXAiLCJzYXZlZEdyb3VwIiwiY2xlYXJHcm91cCIsImFkZEFmZmVjdEFtb3VudCIsInRyeVRvU2V0SXRlbSIsIiR3YXRjaCIsImluaXRBZGRBZmZlY3RzIiwiZ2V0QWRkQWZmZWN0QW1vdW50IiwiZ2V0R3JvdXBJdGVtcyIsIml0ZW1TcGxpdCIsInN0ciIsIm1hdGNoZXMiLCJpbmRleE9mIiwiZXhpc3RpbmciLCJpdGVtU291cmNlIiwic3BsaXQiLCJhIiwiYiIsIm51bU1hdGNoZXMiLCJncm91cEl0ZW1zIiwiaGFzTWF4RXhjaGFuZ2FibGUiLCJtYXhFeGNoYW5nZSIsIm5leHRHcm91cCIsInVwdG9JdGVtIiwicHJldkdyb3VwIiwiZm91bmRHcm91cCIsImFkZFRvR3JvdXAiLCJjb21wYWN0Iiwic3RhdE1hcCIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJOdW1iZXIiLCJmb3VuZCIsImFueUNoYW5nZSIsIml0ZW1GYWN0b3J5IiwiZ2V0RW5jaGFudExldmVsIiwiZW5jaGFudG1lbnRzIiwiaXRlbVR5cGUiLCJFbmNoYW50TGV2ZWwiLCJlbmNoYW50bWVudElkIiwiZW5jaGFudERudCIsImdldEVuY2hhbnRtZW50cyIsInBldExldmVsRG50IiwicGV0RG50IiwiZW5jaGFudG1lbnQiLCJlbmNoYW50bWVudEFmdGVyIiwiZW5jaGFudG1lbnRDb3N0IiwiZW5oYW5jZW1lbnRPcHRpb25zIiwic2V0RW5jaGFudG1lbnQiLCJnZXRTdGF0cyIsIk5lZWRDb2luIiwic2V0UGV0TGV2ZWwiLCJpc01heEVuY2hhbnRMZXZlbCIsImVuaGFuY2VtZW50T3B0aW9uIiwibmV4dEVuY2hhbnRtZW50IiwicHJldkVuY2hhbnRtZW50IiwiZ2V0T3B0aW9uIiwiaXRlbUlkIiwiaXRlbUNvdW50IiwibWF0ZXJpYWwiLCJtYXRlcmlhbHMiLCJjcmVhdGVCYXNpY0l0ZW0iLCJlbXB0eVN0YXRJZCIsInBTdGF0cyIsInBvdGVudGlhbHMiLCJzSW5kZXgiLCJoaWRlIiwicmVwb3J0UHJvZ3Jlc3MiLCJwb3RlbnRpYWwiLCJjaGFuZ2luZ1BvdGVudGlhbHMiLCJwb3RlbnRpYWxTdGF0cyIsInBpZCIsInBvdGVudGlhbERudCIsImdldFBvdGVudGlhbHMiLCJnZXRQb3RlbnRpYWxTdGF0cyIsIlBvdGVudGlhbElEIiwicG90ZW50aWFsRG50RXgiLCJuZXh0UG90ZW50aWFsIiwicHJldlBvdGVudGlhbCIsImNoYW5nZVBvdGVudGlhbCIsImlzRmlyc3RQb3RlbnRpYWwiLCJpc0xhc3RQb3RlbnRpYWwiLCJnZXREbnRGaWxlIiwiYmFzZUpvYk5hbWUiLCJwdmUiLCJtc2ciLCJpbml0U2tpbGxzIiwiZG50RmlsZSIsInNraWxsRGF0YSIsImlzTWF4U2tpbGxMZXZlbCIsInBvdGVudGlhbEluZGV4Iiwic3BhcmtzIiwic3BhcmsiLCJzcGFya0lkIiwic3BhcmtEbnQiLCJnZXRTcGFya3MiLCJuZXh0U3BhcmsiLCJnZXRQb3RlbnRpYWxJbmRleCIsImlzTW9yZVNwYXJrcyIsImlzRmlyc3RTcGFyayIsInByZXZTcGFyayIsInNpZCIsImFtb3VudCIsInVwZGF0ZUl0ZW0iLCJ0eXBlSWQiLCJwb3VjaEZpbGVOYW1lcyIsImdldENoYXJtSXRlbXMiLCJUeXBlUGFyYW0xIiwiZ2V0UG91Y2hJdGVtcyIsInBvdWNoRGF0YSIsImdvbGQiLCJpc0dyb3VwIiwiYm94VHlwZSIsImYiLCJiYXNpY0l0ZW0iLCJnZXRQb3VjaEl0ZW1zRnJvbUZpbGUiLCJwb3VjaEZpbGVOYW1lIiwicG91Y2hJdGVtIiwiR29sZE1pbiIsImNoYXJtRmlsZXMiLCJjaGFybUl0ZW10YWJsZSIsImNvbW1vbkNoYXJtSXRlbXRhYmxlIiwicG91Y2hJdGVtQ291bnQiLCJjIiwiY2hhcm1EYXRhIiwiQ2hhcm1OdW0iLCJjZCIsIkNoYXJtVHlwZSIsIml0ZW1kcyIsIkl0ZW1JRCIsImNvdW50IiwiZ2V0RGF0YSIsIkxvb2siLCJDb3VudCIsIkdvbGQiLCJjcmFmdHMiLCJjRmlsZXMiLCJpbml0Q3JhZnRzIiwiaW5pdENyYWZ0IiwiaiIsIm5ld0NyYWZ0cyIsImsiLCJmQ3JhZnRzIiwiY3JhZnQiLCJDb3N0IiwiaXRlbUNvbE5hbWUiLCJxdHlDb2xOYW1lIiwiaW5pdEV4dHJhY3QiLCJEaXNqb2ludERyb3AxIiwiZGlzam9pbnQiLCJFbmNoYW50SUQiLCJEaXNqb2ludERyb3AiLCJnZXRJdGVtcyIsImdldEdvbGQiLCJEaXNqb2ludGFtb3VudCIsInIiLCJyb3ciLCJpdGVtRGF0YSIsImFsbEl0ZW1GaWxlTmFtZSIsImFsbEZpbGVzIiwiaW5pdFNldHMiLCJnZXRQbGF0ZXMiLCJnZXRTZXRJdGVtcyIsInNldElkIiwiaXRlbTFzIiwic2hvcHMiLCJpdGVtMnMiLCJQdXJjaGFzZUl0ZW0yIiwic2hvcENvc3QiLCJzaG9wTmFtZSIsIlNob3BJRCIsIlB1cmNoYXNlSXRlbTEiLCJuaWdodG1hcmVQb2ludHMiLCJudW1JdGVtMSIsInRyYW5zbGF0ZSIsIlRhYk5hbWVJRCIsIm51bUl0ZW0yIiwibGFkZGVyUG9pbnRzIiwic2hvcE5hbWVzIiwiUHVyY2hhc2VUeXBlMSIsIlB1cmNoYXNlSXRlbVZhbHVlMSIsIlB1cmNoYXNlVHlwZTIiLCJQdXJjaGFzZUl0ZW1WYWx1ZTIiLCJzaG9wQ29zdHMiLCJjQ2FzaFNob3BGaWxlTmFtZSIsImNTeXNTaG9wRmlsZU5hbWUiLCJpbml0U2hvcHMiLCJnZXRDb21iaW5lZENvc3RzIiwibmV3U2hvcENvc3RzIiwidGFiTmFtZSIsIm1hdGNoaW5nVHJhbnNmZXJzIiwidHJhbnNmZXJJdGVtc0ZpbGVOYW1lIiwiaW5pdFRyYW5zZmVycyIsInRyYW5zZmVySXRlbSIsInRyYW5zZmVyRmlsZU5hbWUiLCJ0cmFuc2ZlcnMiLCJ0IiwiUmFuayIsInJhbmsiLCJMZXZlbExpbWl0IiwibGV2ZWxMaW1pdCIsIk5lZWRJdGVtSUQyIiwibGV2ZWwiLCJSZXN1bHRMZXZlbCIsIlJlc3VsdEVuY2hhbnRMZXZlbCIsInJhbmtOYW1lcyIsIk5lZWRJdGVtQ291bnQxIiwiUmVzdWx0UmFuayIsIk5lZWRJdGVtQ291bnQyIiwiYW55VG9Mb2FkIiwiYWxsSm9icyIsIm5lZWRKb2JDbGFzcyIsImFueURudFRvTG9hZCIsImdldEpvYk5hbWUiLCJzZXR1cFRhYnMiLCJjYW5FeHRyYWN0IiwiY2FuVHJhbnNmZXIiLCJzZXRGaWxlTmFtZSIsImdldEl0ZW1EYXRhIiwiY2FuVXNlIiwiZGV0YWlsIiwiVHlwZSIsImlzSW5TZXQiLCJpc1BsYXRlIiwiZ2V0QnVpbGRzIiwibWFpbkRudCIsInNldFN0YXRzIiwiZ2V0RGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsIkRlc2NyaXB0aW9uSUQiLCJnZXRFeGNoYW5nZVR5cGUiLCJEZXNjcmlwdGlvbklEUGFyYW0iLCJzZXREZXRhaWwiLCJOYW1lSUQiLCJ0b0xvd2VyQ2FzZSIsImdldE51bUl0ZW1zRm9yU2V0IiwiZ2V0TnVtSW5TZXQiLCJnZXRCdWlsZE5hbWUiLCJhbGxCdWlsZE5hbWVzIiwiZ2V0U2VydmVyU3RvcmFnZSIsIkFibGVXU3RvcmFnZSIsIklzQ2FzaCIsIlJldmVyc2lvbiIsImdldE1vcmVJbmZvIiwibnVtU3RhbXBzIiwic2VhbFRpbWVzIiwic2VhbERhdGEiLCJtb3JlSW5mb0xvYWRlZCIsIlNlYWxJRCIsIlR5cGUxIiwiQ2FzaFRyYWRlQ291bnQiLCJsb2FkTW9yZUluZm8iLCJnZXRBbGxKb2JzIiwiZW5jb2RlSXRlbSIsImNvcHkiLCJwcmVJbml0SXRlbSIsInJhd1NhdmVkRGF0YSIsImV4cG9ydERhdGEiLCJzZXRJdGVtIiwiTFpTdHJpbmciLCJjb21wcmVzc1RvVVRGMTYiLCJub0xvY2F0aW9uTWVudSIsIm5vcm1hbE1lbnUiLCJpY29uIiwiYnVpbGRBY3Rpb24iLCJ3aXRoQnVpbGRNZW51IiwiaXNTZWFyY2giLCJub1JlZ2lvbiIsImlzSHR0cE9ubHkiLCJzdGFydGVkTG9hZGluZyIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJ0bG9jYXRpb24iLCJnZXRBY3Rpb25zIiwiY3VycmVudEJ1aWxkIiwiaG9zdG5hbWUiLCJtZW51IiwiZG50TG9jYXRpb24iLCJleHRyYUNzcyIsInNpbUVycm9yIiwiZXgiLCJtZXNzYWdlIiwiZXJyb3IiLCJkbnRJbml0IiwicHJvZ3Jlc3NUcmFuc2xhdGlvbnMiLCJ0ZXN0UmVzdWx0cyIsInRyYW5zbGF0aW9uUmVzdWx0cyIsImFkdmFuY2VkU2V0dXAiLCJob3N0ZWRGaWxlcyIsInNlc3Npb25Mb2NhdGlvbiIsImFsdGVybmF0aXZlRmlsZXMiLCJzYXZlTG9jYXRpb24iLCJleGlzdGluZ0ZpbGUiLCJ0cmFuc2xhdGlvbnNTdGF0dXMiLCJjbGVhciIsInJlbG9hZCIsInNldEN1c3RvbVVybCIsIm5vTG9jYXRpb24iLCJidWlsZFNlYXJjaCIsIm9ubGluZVNlcnZpY2UiLCJnZXRDbGFzc0J1aWxkcyIsInRoZW4iLCJqb2JCdWlsZHMiLCJtYXhEaXNwbGF5IiwidG90YWxOdW1SZXN1bHRzIiwiam9iSWQiLCJzZXRKb2IiLCJzaG93TW9yZVJlc3VsdHMiLCJleHRyYSIsImdldEZpbHRlcmVkQnVpbGRzIiwiYWxsUmVzdWx0cyIsInVpZCIsInJlc3VsdHMiLCJ0b1VwcGVyQ2FzZSIsInJlc3VsdCIsInByb2ZpbGUiLCJnZXRTYXZlZEJ1aWxkcyIsImdldFByb2ZpbGUiLCJzdG9yZWRCdWlsZHMiLCJsb2FkIiwicHVibGlzaCIsInVzZXIiLCJnZXRVc2VyIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJzaG93IiwibG9naW4iLCJzYXZlUHJvZmlsZSIsImNhdGNoIiwiZ2V0VGltZSIsInN0YXJ0UHVibGlzaCIsImFib3V0IiwiZ3VpbGQiLCJwdWJsaXNoQnVpbGQiLCJkZWxldGVBY2NvdW50IiwiZ2V0QnVpbGRMaW1pdCIsIm1heEJ1aWxkcyIsImdldE51bVN0b3JlZEJ1aWxkcyIsInNpemUiLCJnZXROdW1CdWlsZHMiLCJzaWduT3V0IiwiZGVsZXRlTG9jYWwiLCJnZXRBbGxCdWlsZE5hbWVzIiwiYWxsS2V5cyIsInJlYWxseURlbGV0ZUxvY2FsIiwibG9jYWxUb0RlbGV0ZSIsImRlbGV0ZVNlcnZlciIsInJlYWxseURlbGV0ZVNlcnZlciIsInNlcnZlclRvRGVsZXRlIiwicHVibGlzaGVkIiwiJHJvdXRlIiwiJGh0dHAiLCJyZXMiLCJuZXdMaW5lRGV0YWlscyIsInNwYWNlRGV0YWlscyIsImRudFZlcnNpb24iLCJvdmVycmlkZSIsImdldE92ZXJyaWRlIiwiaG92ZXJMb2NhdGlvbiIsImVkaXQiLCJzZXREbnRWZXJzaW9uIiwiZ2V0RG50TG9jYXRpb24iLCJnZXRUbG9jYXRpb24iLCJnZXRIb3N0ZWRGaWxlcyIsImdldFdvcmxkTmFtZSIsInNldFRMb2NhdGlvbiIsInNldExvY2F0aW9uIiwic2V0T3ZlcnJpZGUiLCJjdXN0b21JdGVtQ3RybCIsImN1c3RvbUl0ZW1zIiwiY3VycmVudFJlc3VsdHMiLCJuYW1lU2VhcmNoIiwiZ2V0UmVzdWx0cyIsImdldE5ld1N0YXROYW1lIiwiY3JlYXRlQ3VzdG9tSXRlbSIsImV2ZXJ5dGhpbmdTZWFyY2hDdHJsIiwiZXZlcnl0aGluZyIsInZlcnNpb24iLCJtaW5MZXZlbCIsIm9yaWdNaW5MZXZlbCIsIm1heExldmVsIiwib3JpZ01heExldmVsIiwiaW5pdGV2ZXJ5dGhpbmciLCJOYW1lSURQYXJhbSIsIkljb25JbWFnZUluZGV4IiwidmVyc2lvbk1hcCIsInZlcnNpb25zIiwic29ydEJ5IiwibmV3UmVzdWx0cyIsIm51bWV2ZXJ5dGhpbmciLCJjdXJEaXNwbGF5IiwibmFtZVNlYXJjaGVzIiwibnMiLCJhbGxNYXRjaCIsInRvU3RyaW5nIiwiY2hhbmdlU2VhcmNoIiwiY2F0TmFtZSIsImxhc3RKb2JOdW1iZXIiLCJnZXRGaW5hbEpvYnMiLCJzcGxpY2UiLCJsb2FkUmVzdWx0cyIsImFsdFN0YXRJZCIsInN0YXRWYWxzIiwibnVtRXF1aXAiLCJwY1N0YXRJZCIsInBjIiwiYWx0U3RhdCIsImlzQ2xhc3NKb2IiLCJoaWRlTGV2ZWwiLCJoaWRlUmFuayIsInJhbmtDaGVja2VkIiwiaW5pdEl0ZW0iLCJzdGF0Rm91bmQiLCJzdGF0VmFsIiwic3RhdFJlc3VsdHMiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJieVBhdGgiLCJoaWRlSW5TZWFyY2giLCJncmFkZXMiLCJvcmlnU2F2ZWRTZWFyY2hTdGF0SWQiLCJuYXZpZ2F0ZSIsImhpZGVKb2IiLCJqb2JJbml0IiwiY2hlY2tlZFJhbmsiLCJjb250cm9sbGVyUGFyYW1zIiwiaXRlbVNlYXJjaEN0cmwiLCJza2lsbFNlYXJjaEN0cmwiLCJnZXREbnROYW1lIiwiYmFzZUNsYXNzTmFtZSIsImdldFNraWxscyIsImxvYWRlZEpvYklkIiwic2tpbGxzIiwiYmFzZUpvYk5hbWVzIiwiZ2V0QmFzZUpvYk5hbWUiLCJiYXNlTmFtZSIsImRudE5hbWUiLCJzZXR1cFNraWxscyIsImFsbFJlYWR5IiwiRWZmZWN0Q2xhc3MyIiwiRWZmZWN0Q2xhc3MzIiwiRWZmZWN0Q2xhc3M0IiwiRWZmZWN0Q2xhc3M2IiwiTmVlZEpvYiIsIm51bVNraWxscyIsInJlc3RyaWN0IiwiY2hvb3NlQ2xhc3MiLCJvblNldEpvYiIsImNob29zZUNsYXNzQ29udHJvbGxlciIsImZpbmFsSm9icyIsImJKb2IiLCJnZXRCYXNlSm9icyIsImVuZ2xpc2hOYW1lIiwiZG5zaW1DYXRlZ29yeUxpbmtzQ29udHJvbGxlciIsImNvbGxhcHNlIiwiYnVpbGRTY3JlZW4iLCJjb2xsYXBzZWQiLCJhY3Rpb24iLCJsb2FkZWQiLCJzZXRDYXRlZ29yeSIsImdldE5hbWUiLCJ0SWQiLCJkbnNpbUNhdGVnb3J5TGlua3MiLCJkbnNpbUl0ZW1JY29uIiwibGluayIsImF0dHJzIiwiZ2V0SWNvbiIsInByZWZpeCIsImZsb29yIiwiZmlsZUluZGV4IiwiZG5zaW1JdGVtTGluayIsIm5vQ2xpY2siLCJkbnNpbUpvYkljb24iLCJzbWFsbCIsImRuc2ltSm9iSWNvbkNvbnRyb2xsZXIiLCJzaXplVmFsdWUiLCJpY29uU2l6ZSIsImljb25PZmZzZXQiLCJnZXRJY29uWFBvc3Rpb24iLCJKb2JJY29uIiwiZ2V0SWNvbllQb3N0aW9uIiwidHJhbnNjbHVkZSIsImFsc29TaG93Rm9yIiwiJG9uIiwic2V0TG9hZENvdW50IiwibG9hZEVycm9yIiwibnVtTG9hZGluZyIsIm4iLCJ0b3RhbFRvTG9hZCIsImRuc2ltTG9hZGluZyIsImhhc1NlbGVjdGVkQWxsIiwiJGV2ZW50Iiwic2VsZWN0aW9uRW5kIiwic2VsZWN0aW9uU3RhcnQiLCJvbiIsImRuc2ltU2VsZWN0QWxsT25DbGljayIsImRuc2ltU3RhdHMiLCJhbHRTdGF0cyIsInNlcGFyYXRvciIsIm51bUluU2V0Iiwic2hvd1N0YXRzIiwiYXBwZW5kIiwidGV4dCIsIm5ld0VsZW1lbnQiLCJjbG9uZSIsImxhc3RFbGVtZW50IiwiYWZ0ZXIiLCJjc3MiLCJhZGRlZEVsZW1lbnRzIiwiZmlyc3QiLCJzdW1tYXJ5Rm9yU3RhdHMiLCJkZWYiLCJzdW1tYXJ5Rm9yIiwib3V0cHV0Iiwic2VwIiwibmVlZFNldE51bSIsImRpc3BsYXkiLCJzdGF0MiIsInNTdGF0Iiwic0RlZiIsIm9yaWdpbmFsRGlzcGxheSIsInJlcXVpcmUiLCJkbnNpbVN0cmluZ1RvTnVtYmVyIiwibmdNb2RlbCIsIiRmb3JtYXR0ZXJzIiwicGFyc2VGbG9hdCIsImZpbGVDaGFuZ2VGdW5jdGlvbiIsIiRwYXJzZSIsImF0dHJIYW5kbGVyIiwiaGFuZGxlciIsIiRhcHBseSIsImFkZEV2ZW50TGlzdGVuZXIiLCJoZXJvTGV2ZWxzIiwic3RhdENhcHMiLCJqb2JCYXNlU3RhdHMiLCJjb21wbGV0ZSIsImpvYkNvbnZlcnNpb25zIiwiam9iQ29udmVyc2lvbkNvbHNUb0xvYWQiLCJzdGF0Q2FwQ29sc1RvTG9hZCIsImpvYkJhc2VTdGF0Q29sc1RvTG9hZCIsImhlcm9MZXZlbFBvdGVudGlhbHMiLCJmaW5kRmFzdCIsImdldFJvdyIsIkhlcm9MZXZlbEFiaWxpdHlJRCIsInBJbmRleCIsImZhY3RvcnkiLCJUeXBlUGFyYW0yIiwiVHlwZVBhcmFtMyIsIk5lZWRKb2JDbGFzcyIsIlN0YXRlVmFsdWUxIiwiU3RhdGUxX01heCIsIlN0YXRlMSIsIlN0YXRlVmFsdWUzIiwiU3RhdGUzX01heCIsIlN0YXRlMiIsIlN0YXRlVmFsdWU0IiwiU3RhdGVWYWx1ZTIiLCJTdGF0ZTRfTWF4IiwiU3RhdGUyX01heCIsIlN0YXRlMyIsIlN0YXRlVmFsdWU1IiwiU3RhdGU1X01heCIsIlN0YXRlNCIsIlN0YXRlVmFsdWU2IiwiU3RhdGU2X01heCIsIlN0YXRlNSIsIlN0YXRlVmFsdWU3IiwiU3RhdGU3X01heCIsIlN0YXRlNiIsIlN0YXRlVmFsdWU4IiwiU3RhdGU4X01heCIsIlN0YXRlNyIsIlN0YXRlVmFsdWU5IiwiU3RhdGU5X01heCIsIlN0YXRlOCIsIlN0YXRlVmFsdWUxMCIsIlN0YXRlMTBfTWF4IiwiU3RhdGU5IiwiU3RhdGUxMCIsIkV4Y2hhbmdlVHlwZSIsImRyYWdvbmpld2VsdHlwZSIsIlNldEl0ZW1JRCIsIkVuY2hhbnRSYXRpbyIsIkJyZWFrUmF0aW8iLCJNaW5Eb3duIiwiTWF4RG93biIsIk5lZWRJdGVtSUQ0IiwiTmVlZEl0ZW1Db3VudDQiLCJOZWVkSXRlbUlENSIsIk5lZWRJdGVtQ291bnQ1IiwiUHJvdGVjdEl0ZW1Db3VudCIsIlN0YXRlMlZhbHVlIiwiU3RhdGUzVmFsdWUiLCJTdGF0ZTRWYWx1ZSIsIlN0YXRlNVZhbHVlIiwiU3RhdGU2VmFsdWUiLCJTdGF0ZTdWYWx1ZSIsIlN0YXRlOFZhbHVlIiwiU3RhdGU5VmFsdWUiLCJTdGF0ZTEwVmFsdWUiLCJQb3RlbnRpYWxObyIsIlBvdGVudGlhbFJhdGlvIiwiU3RhdGUxVmFsdWUiLCJTdGF0ZTExVmFsdWUiLCJTdGF0ZTEyVmFsdWUiLCJTdGF0ZTExIiwiU3RhdGUxM1ZhbHVlIiwiU3RhdGUxMiIsIlN0YXRlMTRWYWx1ZSIsIlN0YXRlMTMiLCJTdGF0ZTE1VmFsdWUiLCJTdGF0ZTE0IiwiU3RhdGUxNlZhbHVlIiwiU3RhdGUxNiIsInNldERudCIsIkpvYk51bWJlciIsIkJhc2VDbGFzcyIsIlBhcmVudEpvYiIsIkpvYk5hbWUiLCJTdHJlbmd0aCIsIkFnaWxpdHkiLCJJbnRlbGxpZ2VuY2UiLCJTdGFtaW5hIiwiQWdncm9wZXJQdkUiLCJCYXNlTVAiLCJDYmFzZSIsIkNkZWZlbnNlIiwiQ2NyaXRpY2FsIiwiQ2NyaXRpY2FsRGFtYWdlIiwiSFAiLCJTdHJlbmd0aEF0dGFjayIsIkFnaWxpdHlBdHRhY2siLCJJbnRlbGxpZ2VuY2VBdHRhY2siLCJQaHlzaWNhbERlZmVuc2UiLCJNYWdpY0RlZmVuc2UiLCJDcml0aWNhbCIsIkNyaXRpY2FsUmVzaXN0YW5jZSIsIlN0aWZmIiwiU3RpZmZSZXNpc3RhbmNlIiwiU3R1biIsIlN0dW5SZXNpc3RhbmNlIiwiTW92ZVNwZWVkIiwiTW92ZVNwZWVkUmV2aXNpb24iLCJEb3duRGVsYXkiLCJFbGVtZW50QXR0YWNrIiwiRWxlbWVudERlZmVuc2UiLCJFbGVtZW50RGVmZW5zZU1pbiIsIkVsZW1lbnREZWZlbnNlTWF4IiwiU3RyZW5ndGhJbnRlbGxpZ2VuY2VUb0NyaXRpY2FsRGFtYWdlIiwiJHJvb3RTY29wZSIsImNvbHNUb0xvYWQiLCJEbnRSZWFkZXIiLCJmaWxlIiwicHJvZ3Jlc3NDYWxsYmFjayIsImNvbXBsZXRlQ2FsbGJhY2tzIiwiaWdub3JlRXJyb3JzIiwiJGJyb2FkY2FzdCIsImZhaWxlZCIsImxvYWRlciIsImZpbmRJbmRleGVzIiwibG9hZGVycyIsImNyZWF0ZUxvYWRlciIsIkFycmF5IiwibnVtUm93cyIsImNvbHVtbiIsIm51bVJlc3VsdHMiLCJjb2xJbmRleCIsImNvbHVtbkluZGV4ZXMiLCJmaW5kSW5kZXgiLCJ2YWwiLCJoYXNGYWlsZWQiLCJyZXNldEFsbCIsImdldE51bVJvd3MiLCJsb29rdXBWYWx1ZSIsImNvbHVtbk5hbWUiLCJnZXRWYWx1ZSIsImNvbHVtbk5hbWVzIiwiY29udmVydERhdGEiLCJpbml0RmFjdG9yeSIsImFsbEZhY3RvcmllcyIsInByb3AiLCJuZXdGYWN0b3J5Iiwic291cmNlIiwiY29udmVydFN0YXQiLCJjb252ZXJ0UGVyY2VudFRvTnVtIiwiYWRqdXN0U3RhdCIsImZ1bmMiLCJhZGp1c3RtZW50cyIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMiIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjUiLCIyNiIsIjI5IiwiMTAzIiwiY2FsY1N0YXRzIiwicmV0IiwiY2hhcmFjdGVyTmFtZSIsImNsYXNzSWQiLCJzdGF0SGVyb0xldmVsIiwidiIsImNhcmRJbXBvcnRVcmwiLCJpdGVtQml0IiwiY2hhckF0IiwiYml0SW5kZXgiLCJwYXJzZUludCIsInN1YnN0ciIsInN0YXRTdHJpbmciLCJzdGF0Qml0Iiwic3BsaXRTdGF0Iiwic3RhdEJpdEluZGV4IiwiaXRlbVN0cmluZ3MiLCJzZWxmIiwiZW5jb2RlVVJJIiwiaHJlZiIsImpvaW4iLCJiYXNlUGF0aCIsInF1ZXJ5U2VsZWN0b3IiLCJhdHRyIiwic3VjY2VzcyIsInN0YXR1cyIsImhlYWRlcnMiLCJza2lsbERudCIsInNraWxsTGV2ZWxEbnQiLCJza2lsbExldmVsRGF0YXMiLCJTa2lsbEluZGV4IiwiU2tpbGxMZXZlbCIsInNraWxsTGV2ZWxWYWxzIiwicHYiLCJTa2lsbEV4cGxhbmF0aW9uSUQiLCJyb3dOdW0iLCJ0eXBlUGFyYW0xIiwiU2tpbGxFeHBsYW5hdGlvbklEUGFyYW0iLCJwcyIsImdldFNraWxsU3RhdHMiLCJkcyIsImNyZWF0ZUl0ZW0iLCJzZXRJdGVtQ2F0ZWdvcnkiLCJ1c2VQYXJ0RG50IiwicGFydHMiLCJzZXRzIiwiRHJhZ29uSmV3ZWxTbG90MSIsIkRyYWdvbkpld2VsU2xvdDIiLCJEcmFnb25KZXdlbFNsb3QzIiwiUGV0TGV2ZWwiLCJEcmFnb25KZXdlbFNsb3Q0IiwiaXRlbVR5cGVOYW1lIiwiZmlsZVR5cGUiLCJrZXkxIiwiYWxsRG50RmlsZXMiLCJzZWFyY2hUeXBlIiwic291cmNlVHlwZSIsImxpbWl0RXhjaGFuZ2UiLCJjYXRJdGVtcyIsImxvYWRpbmciLCJyYXdEYXRhIiwiZ2VtVHlwZXMiLCJnZW0iLCJnZW1EbnQiLCJzb3VyY2VzIiwibnVtQ29tcGxldGUiLCJ0eXBlcyIsImVuaDEiLCJlbmgyIiwiaXRlbU1hcCIsInNvcnRlZCIsImxvY2FsZUNvbXBhcmUiLCJ0eXBlRXJyb3IiLCJpZHMiLCJleGNsdWRlU2VydmljZSIsImlzRGF0YUxvYWRlZCIsImxvYWRJdGVtcyIsInN0YXRlMU1heCIsImRTdGF0ZVZhbHVlMSIsImRUeXBlUGFyYW0xIiwiZFR5cGUiLCJudW1Qb3RlbnRpYWxzIiwiZW5kIiwidGltZSIsIlNraWxsSUQiLCJza2lsbElkIiwiaWNvbkluZGV4IiwicGV0RGF0YSIsIlBldExldmVsVHlwZUlEIiwiZ2V0SXRlbURhdGFGcm9tRmlsZSIsImRvQ29tcGxldGUiLCJpdGVtU291cmNlcyIsInRlY2giLCJnZW1TbG90RG50IiwidG1hbiIsInBsYXRlIiwicGFydHNEbnQiLCJ3ZWFwb25EbnQiLCJtaW5SYW5rIiwiZXEiLCJyYmVxIiwicHZwZXEiLCJjQ2xvbmUiLCJjMjAxNiIsImMyMDE3IiwiYzIwMTUiLCJjMjAxNCIsImNhc2giLCJ4dHJhcyIsImltcHJpbnQiLCJqb2JzRG50IiwiaGFzU3RhcnRlZExvYWRpbmciLCJhbGxqb2JzIiwiYmFzZUpvYnMiLCJjcmVhdGVKb2IiLCJwYXJlbnRKb2IiLCJwYXJlbnRKb2JEYXRhIiwiJHEiLCJzdG9yYWdlQnVja2V0IiwicmVzb2x2ZSIsInJlamVjdCIsImZpcmViYXNlIiwiYXV0aCIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsIm9uY2UiLCJzdG9yZWRQcm9maWxlIiwiZGF0YWJhc2UiLCJyZWYiLCJzdHJpcEJ1aWxkTmFtZSIsInNlcnZpY2UiLCJkZWxldGVOdWxsUHJvcGVydGllcyIsInNldCIsImdldFVzZXJCdWlsZHMiLCJkZWNvbXByZXNzQnVpbGQiLCJjb21wcmVzc0J1aWxkIiwic3RyaW5naWZpZWREYXRhIiwicGFyc2UiLCJjb21wcmVzc2VkQnVpbGQiLCJhY3Rpb25zIiwiYWxsIiwidGVzdCIsInJlY3Vyc2UiLCJ1bmRlZmluZWQiLCJfdHlwZW9mIiwicExpc3QiLCJqb2JJZHMiLCJyZW1vdmUiLCJ1bmlxIiwiZGVsZXRlIiwiY3VycmVudFVzZXIiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJpbml0aWFsaXplQXBwIiwicXVpY2tBZGRIZWxwZXIiLCJmaW5kRGF0YSIsImFsdGVySXRlbSIsIm1heEl0ZW1zIiwic29ydEZ1bmMiLCJzb3J0SWQiLCJhZGRJdGVtIiwibWF0Y2hlc0l0ZW0iLCJmaWx0ZXJEdXBsaWNhdGVzIiwiYXJlU2FtZUl0ZW0iLCJpc0VxdWFsIiwicXVpY2tBZGRTdGVwcyIsImNhdGVnb3J5U3RlcHMiLCJ0aXRsZXMiLCJ3ZWFwb25zIiwiYXJtb3VyIiwiYWNjZXNzb3JpZXMiLCJ0ZWNocyIsImV4cGVkaXRpb24gcGxhdGVzIiwidGFsaXNtYW4iLCJjb3N0dW1lIiwiY3VzdG9tIiwiZ2V0U3RlcE5hbWUiLCJzdGVwTmFtZSIsInN0ZXBEZWYiLCJhbGxPcHRpb25zIiwidW5maWx0ZXJlZEl0ZW1zIiwibmV3T3B0aW9ucyIsIm9wdGlvbiIsInRlbXBEYXRhcyIsIm1pbk9wdGlvbnMiLCJzdGVwIiwiZXhjaGFuZ2VTdGVwIiwiZXhjaGFuZ2VzIiwibnVtRXhjaGFuZ2UiLCJleElkIiwiZXhOYW1lIiwiYWNjRXhjaGFuZ2VTdGVwIiwic2l4dHlMZXZlbFN0ZXAiLCJhbGxMZXZlbFN0ZXAiLCJjYXNoUmFua1N0ZXAiLCJpbXByaW50UmFua1N0ZXAiLCJ0ZWNoUmFua1N0ZXAiLCJ0YWxpc21hblJhbmtTdGVwIiwicGxhdGVSYW5rU3RlcCIsImdlbVJhbmtTdGVwIiwidGl0bGVTdGVwIiwiYWxsVGl0bGVzIiwidXNlZnVsVGl0bGVzIiwiZXF1aXBSYW5rU3RlcCIsImlzSXRlbVN0ZXAiLCJlbmhhbmNlU3RlcCIsImVuaGFuY2VUYWxpc21hblN0ZXAiLCJpdGVtU3RlcCIsImhpZGVOYW1lIiwidGVjaFNraWxsU3RlcCIsIml0ZW1OYW1lcyIsIml0ZW1OYW1lc0xpc3QiLCJkaXN0aW5jdEl0ZW1OYW1lU3RlcCIsIm51bVN0YXRzU3RlcCIsIm51bVN0YXRzIiwiaGlnaFN0YXRTdGVwIiwiYWxsSXRlbSIsImFsbFN0YXRzIiwicXVpY2tIaWdoIiwic2VsZWN0ZWRWYWwiLCJ2YWwxIiwiaGFzU3RhdFN0ZXAiLCJsYXJnZXN0VmFsIiwidmFsMiIsInNlYXJjaGFibGUiLCJjdXN0b21TdGVwIiwiZG50TG9jYXRpb25SZWdpb24iLCJob3N0ZWRGaWxlIiwibGFzdFRGaWxlIiwibmV3RmlsZXMiLCJuZXdMb2NhdGlvbiIsImxvY2F0aW9uTmFtZSIsInRMb2NhdGlvbiIsImdyb3VwcyIsInNldEN1cnJlbnRCdWlsZCIsInVwZGF0ZWRJdGVtcyIsImdldFVuaXF1ZUdyb3VwTmFtZSIsImV4aXN0aW5nR3JvdXBzIiwiZ3JvdXBOYW1lSW5kZXgiLCJsYXN0SW5kZXhPZiIsInN0YXJ0SW5kZXgiLCJmb3VuZEluZGV4Iiwib3JpZ2luYWxOYW1lIiwic2F2ZUJ1aWxkcyIsInVwZGF0ZUJ1aWxkIiwiZGVjb21wcmVzc0Zyb21VVEYxNiIsImdldFNldFN0YXRzIiwiZ2V0Q29tYmluZWRTdGF0cyIsIm5ha2VkU3RhdHMiLCJnZXROYWtlZFN0YXRzIiwiY29tYmluZWRTdGF0cyIsImdldENhbGN1bGF0ZWRTdGF0cyIsImdldFBjIiwic3RhdERlZiIsInN0YXRMb29rdXAiLCJza1BjIiwiYXBwbHlQYyIsImR1cGVTdGF0IiwiZ2V0U2tpbGxQYyIsImFkZFN0YXQiLCJhZGRBdmdEYW1hZ2VTdGF0IiwibWluIiwibm9uRWxlRGFtYWdlIiwiZWxlbWVudFN0YXQiLCJjcml0RGFtYWdlUGMiLCJmZFBjIiwiYXZnRG1nIiwic2VjRWxlbWVudElkIiwicHJpRWxlbWVudElkIiwiZG1nU3RhdCIsInNlY0F2Z0RtZyIsInNlY29uZGFyeUVsZW1lbnRTdGF0IiwibWluUGRtZyIsIm1pbk1kbWciLCJpbnQiLCJhZ2kiLCJ2aXQiLCJocCIsImRlZnBjIiwibWRlZiIsIm1kZWZwYyIsImFQd3IiLCJleHRyYVBkbWciLCJwYVB3ciIsIm1heFBkbWciLCJkZWZUb1BkbWciLCJpbnRUb1BkbWciLCJleHRyYVBkbWdNb2QiLCJtYXhNZG1nIiwibWFQd3IiLCJpbnRUb01kbWciLCJleHRyYU1kbWciLCJzdHJUb01kbWciLCJleHRyYU1kbWdNb2QiLCJjcml0IiwiY3JpdENoYW5jZSIsInNrQ3JpdCIsImNEbWciLCJpdGVtQ3JpdCIsIml0ZW1DdHJpRG1nIiwiZmQiLCJmaXJlUGMiLCJDZmluYWxkYW1hZ2UiLCJpY2VQYyIsIm1heEZkIiwicG93IiwiZXFIcCIsInBkZWZFcUhwIiwibWRlZkVxSHAiLCJlZmZlY3RzIiwic3RpbGxDb2xzIiwidmFsQ29sTmFtZSIsImVmZmVjdElkIiwidmFscyIsIm1hcCIsImdldFZhbHMiLCJtYXBUbyIsImVmZmVjdCIsImRuVHJhbnNsYXRpb25zIiwiY29tcGxldGVDYWxsYmFjayIsIkRuVHJhbnNsYXRpb25zIiwic2l6ZUxpbWl0IiwiZ2V0RmlsZU5hbWUiLCJsb2FkRnJvbVNlc3Npb24iLCJpZFBhcmFtIiwicGFyYW1zIiwidG9Ob0RlYyIsImluVGhvdXNhbmRzIiwidG9QZXJjZW50IiwiZHBzIiwiY29tYmluZVdpdGgiLCJub0N1c3RvbSIsIjEwIiwiMTEiLCIxMyIsIjE0IiwiMTUiLCIyMCIsIjIxIiwiMjIiLCIyMyIsIjMyIiwiMzMiLCI1MCIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNTUiLCI1NiIsIjU3IiwiNTgiLCI1OSIsIjYwIiwiNjEiLCI2MiIsIjYzIiwiNjQiLCI2NSIsIjc0IiwiNzUiLCI3NiIsIjc3IiwiODEiLCIxMDEiLCIxMDIiLCIxMDQiLCIxMDUiLCIxMDYiLCIxMDciLCIxMDAxIiwiMTAwNCIsIjEwMDYiLCIxMDA4IiwiMTAwOSIsIjEwMTIiLCIxMDI5IiwiMTEwMyIsIjIwMDEiLCIyMDA0IiwiMjAwNiIsIjIwMDgiLCIyMDA5IiwiMzAwMCIsIjMwMDEiLCIzMDAyIiwiMzAwOCIsIjQwMTIiLCI0MDUwIiwiNDA1MSIsIjQwNTIiLCI0MDUzIiwiNDA3NSIsIjQwNzYiLCIxMDE2NCIsIjEwMTY1IiwiMTAzNzIiLCIxMTAzNzMiLCIyODAwMSIsIjI4MDAyIiwiMjgwMDMiLCIyODAwNCIsIjI4MDA1IiwiMjgwMDYiLCIyODAwNyIsIjI4MDA4IiwiMjgwMDkiLCIyODEwMSIsIjI5MDAxIiwiMjkwMDIiLCIyOTAwMyIsIjI5MDA0IiwiMjkwMDUiLCIyOTAwNiIsIjI5MDA3IiwiMjkwMDgiLCIyOTAwOSIsIjUwMDEiLCI1MDAyIiwiNTAwMyIsIjUwMDQiLCI1MDA1IiwiNTAwNiIsIjUwMDciLCI1MDA4IiwiNTAwOSIsIjUxMDEiLCI1MTAyIiwiNTEwMyIsIjUxMDQiLCI1MTA1IiwiNTEwNiIsIjUxMDciLCI1MTA4IiwiNTEwOSIsIjU5MDAxIiwiNTIwMDEiLCI1MjAwMiIsIjUyMDAzIiwiNTIwMDQiLCI1MjAwNSIsIjUyMDA2IiwiNTIwMDciLCI1MjAwOCIsIjUyMDA5IiwiMjQiLCIyNyIsIjI4IiwiODkwMDEiLCI4ODAwMSIsIjg4MDAyIiwiODgwMDMiLCI4ODAwNCIsIjg4MDA1IiwiODgwMDYiLCI4ODAwNyIsIjg4MDA4IiwiODgwMDkiLCI2NjAwMSIsIjM1MDA2IiwiMTQwNTEiLCIxNDA1MiIsIjE0MDUzIiwiMTQwNTQiLCIxNDA1NSIsIjE0MDU2IiwiMTQwNTciLCIxNDA1OCIsIjE0MDU5IiwiNDAwMTEiLCI0MDAxMiIsIjQwMDEzIiwiNDAwMTQiLCI0MDAxNSIsIjQwMDE2IiwiNDAwMTciLCI0MDAxOCIsIjQwMDAxIiwiNDAwMDIiLCI0MDExMSIsIjkxMDAxIiwiNDUwMDEiLCJ0eXBlTmFtZXMiLCIzOCIsIjkwIiwiMTMyIiwic2tpbGxFZmZlY3RNYXBwaW5nIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOSIsIjg3IiwiODgiLCI4OSIsIjE4NSIsIjI1MSIsIjM3MiIsIjM4OSIsIjQwNCIsInVzZU1heCIsInVzZVN0YXRlWFZhbCIsImN1cnJlbnRTdGF0ZSIsInN0YXRlUHJvcCIsInN0YXRlSWQiLCJtaWdo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UStILFFBQVFtNkMsRUFBUSxTQUFTM3lDLEVBQU8wQyxHQUNuQzFDLEdBQ0Q2eUMsRUFBSTd5QyxJQUtWLElBQUl2QixLQUVKLEtBQUksR0FBSWlFLEtBQU84RixHQUFTLENBQ3RCLEdBQUl4SyxJQUFTRSxJQUFNc0ssRUFBUTlGLEdBQU1yTCxHQUFJc1IsT0FBT2pHLEdBQzVDakUsR0FBUzlGLEtBQUtxRixHQUdoQixNQUFPUyxLQXpaYmhPLFFBQUFPLE9BQUEsU0FBQTYzQixRQUFBLGVBQUFyMUIiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgY29uZmlnXSk7XHJcblxyXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHtcclxuXHJcbiAgJHJvdXRlUHJvdmlkZXIuXHJcbiAgXHJcbiAgICB3aGVuKCcvYWJvdXQnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvYWJvdXQvYWJvdXQuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdBYm91dEN0cmwgYXMgYWJvdXQnXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL3NldHVwJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL25hdi9zZXR1cC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ1NldHVwQ3RybCdcclxuICAgIH0pLlxyXG4gICAgd2hlbignL3Rlc3QnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvbmF2L3Rlc3QuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdUZXN0Q3RybCdcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvaXRlbXMnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvc2VhcmNoL2V2ZXJ5dGhpbmctc2VhcmNoLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnSXRlbXNDdHJsIGFzIGl0ZW1zJyxcclxuICAgICAgcmVsb2FkT25TZWFyY2g6IGZhbHNlLFxyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy8nLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvd2VsY29tZS5odG1sJyxcclxuICAgIH0pLlxyXG4gICAgd2hlbignL2J1aWxkcycsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvYnVpbGQtbGlzdC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0J1aWxkTGlzdEN0cmwgYXMgYnVpbGRMaXN0J1xyXG4gICAgfSkuXHJcbiAgICB3aGVuKCcvYnVpbGQvOmJ1aWxkTmFtZSonLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWxpc3QuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdCdWlsZExpc3RDdHJsIGFzIGJ1aWxkTGlzdCdcclxuICAgIH0pLlxyXG4gICAgd2hlbignL3ZpZXctZ3JvdXAvOnJlZ2lvbj8nLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL3ZpZXctZ3JvdXAuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdWaWV3R3JvdXBDdHJsJ1xyXG4gICAgfSkuXHJcbiAgICB3aGVuKCcvZWRpdC1idWlsZC86YnVpbGROYW1lKicsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvZWRpdC1idWlsZC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0VkaXRCdWlsZEN0cmwgYXMgZWRpdEdyb3VwJyxcclxuICAgICAgLy8gcmVsb2FkT25TZWFyY2g6IGZhbHNlLFxyXG4gICAgfSkuXHJcbiAgICB3aGVuKCcvbmV3LWJ1aWxkJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL2J1aWxkcy9lZGl0LWJ1aWxkLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnRWRpdEJ1aWxkQ3RybCBhcyBlZGl0R3JvdXAnLFxyXG4gICAgICAvLyByZWxvYWRPblNlYXJjaDogZmFsc2UsXHJcbiAgICB9KS5cclxuICAgIHdoZW4oJy9kZWxldGUtYnVpbGQvOm5hbWUqJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL2J1aWxkcy9kZWxldGUtYnVpbGQuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdEZWxldGVCdWlsZEN0cmwgYXMgZGVsZXRlQnVpbGQnLFxyXG4gICAgICAvLyByZWxvYWRPblNlYXJjaDogZmFsc2UsXHJcbiAgICB9KS5cclxuICAgIHdoZW4oJy9yZWxvYWQtYnVpbGQvOm5hbWUqJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL2J1aWxkcy9yZWxvYWQtYnVpbGQuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdSZWxvYWRCdWlsZEN0cmwgYXMgY3RybCcsXHJcbiAgICAgIC8vIHJlbG9hZE9uU2VhcmNoOiBmYWxzZSxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvc2VhcmNoLzpjYXQ/Jywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL3NlYXJjaC9zZWFyY2guaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdJdGVtU2VhcmNoQ3RybCBhcyBjdHJsJyxcclxuICAgICAgcmVsb2FkT25TZWFyY2g6IGZhbHNlLFxyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy9pdGVtJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0l0ZW1DdHJsJyxcclxuICAgICAgLy8gcmVsb2FkT25TZWFyY2g6IGZhbHNlLFxyXG4gICAgfSkuXHJcbiAgICB3aGVuKCcvaXRlbS86cmVnaW9uPy86aSonLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnSXRlbUN0cmwnLFxyXG4gICAgICAvLyByZWxvYWRPblNlYXJjaDogZmFsc2UsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL2V4cG9ydCcsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9uYXYvZXhwb3J0Lmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnRXhwb3J0Q3RybCcsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL3RhbGlzbWFucycsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvYnVpbGQtdGFsaXNtYW5zLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnQnVpbGRUYWxpc21hbnNDdHJsIGFzIGN0cmwnLFxyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy9wdWJsaXNoJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL29ubGluZS9wdWJsaXNoLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnUHVibGlzaEN0cmwgYXMgY3RybCcsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL3Byb2ZpbGUvOnVpZD8nLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvb25saW5lL3Byb2ZpbGUuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdQcm9maWxlQ3RybCBhcyBjdHJsJyxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvcHVibGlzaGVkJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL29ubGluZS9wdWJsaXNoZWQuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdQdWJsaXNoZWRDdHJsIGFzIGN0cmwnLFxyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy9pbXBvcnQnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWltcG9ydC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0J1aWxkSW1wb3J0Q3RybCBhcyBjdHJsJyxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvcHVibGlzaGVkLzp1aWQvOmJ1aWxkTmFtZSonLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvb25saW5lL3B1Ymxpc2hlZC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ1B1Ymxpc2hlZEN0cmwgYXMgY3RybCcsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL2J1aWxkLXNlYXJjaC86am9iSWQ/Jywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL29ubGluZS9idWlsZC1zZWFyY2guaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdCdWlsZFNlYXJjaEN0cmwgYXMgY3RybCcsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgb3RoZXJ3aXNlKHtcclxuICAgICAgcmVkaXJlY3RUbzogJy8nXHJcbiAgICB9KTtcclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpXHJcbi5jb250cm9sbGVyKCdBYm91dEN0cmwnLCBcclxuICBbJyR3aW5kb3cnLFxyXG4gIGZ1bmN0aW9uKCR3aW5kb3cpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ2RlZmF1bHQtYmFjayc7XHJcbiAgICAkd2luZG93LmRvY3VtZW50LnRpdGxlID0gJ2RuZ2VhcnNpbSB8IEFCT1VUL0ZBUSc7XHJcbiAgfV1cclxuKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZpbHRlcignZXNjYXBlJywgW2Z1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgZnVuY3Rpb24gZXNjYXBlRmlsdGVyKGlucHV0KSB7XHJcbiAgICAgIGlmKGlucHV0KSB7XHJcbiAgICAgICAgICByZXR1cm4gd2luZG93LmVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuICcnO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVzY2FwZUZpbHRlcjtcclxufV0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZpbHRlcigncGVyY2VudGFnZScsIFtmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGZ1bmN0aW9uIHBlcmNlbnRhZ2VGaWx0ZXIoaW5wdXQpIHtcclxuICAgIGlmKHR5cGVvZiBpbnB1dCA9PSAnbnVtYmVyJykge1xyXG4gICAgICByZXR1cm4gKE1hdGgucm91bmQoaW5wdXQgKiAxMDAgKiAxMDApIC8gMTAwKSArICclJztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHBlcmNlbnRhZ2VGaWx0ZXIuJHN0YXRlZnVsID0gZmFsc2U7XHJcblxyXG4gIHJldHVybiBwZXJjZW50YWdlRmlsdGVyO1xyXG59XSk7XHJcblxyXG59KSgpOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2J1aWxkQWN0aW9uc0N0cmwnLFxyXG5cclxuWyckbG9jYXRpb24nLCdzYXZlSGVscGVyJywnZXhwb3J0TGlua0hlbHBlcicsXHJcbmZ1bmN0aW9uKCRsb2NhdGlvbixzYXZlSGVscGVyLGV4cG9ydExpbmtIZWxwZXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB0aGlzLmRlbGV0ZUdyb3VwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2RlbGV0ZS1idWlsZC8nICsgdm0uYnVpbGROYW1lKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5lZGl0R3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvZWRpdC1idWlsZC8nICsgdm0uYnVpbGROYW1lKVxyXG4gIH1cclxuICBcclxuICB0aGlzLmNvcHlHcm91cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG5ld0dyb3VwTmFtZSA9IHNhdmVIZWxwZXIuaW1wb3J0R3JvdXAodm0uYnVpbGROYW1lLCB2bS5idWlsZC5pdGVtcyk7XHJcbiAgICBcclxuICAgIHNhdmVIZWxwZXIuc2F2ZUJ1aWxkKFxyXG4gICAgICBuZXdHcm91cE5hbWUsIFxyXG4gICAgICBuZXdHcm91cE5hbWUsXHJcbiAgICAgIHZtLmJ1aWxkKTtcclxuICAgIFxyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9idWlsZC8nICsgbmV3R3JvdXBOYW1lKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5yZWxvYWRlZCA9IGZhbHNlO1xyXG4gIHRoaXMucmVsb2FkR3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvcmVsb2FkLWJ1aWxkLycgKyB2bS5idWlsZE5hbWUpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcm9ncmVzcygpIHtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5jcmVhdGVTaG9ydFVybCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZXhwb3J0TGlua0hlbHBlci5jcmVhdGVTaG9ydFVybCh2bS5idWlsZE5hbWUsIHZtLmJ1aWxkKTtcclxuICB9XHJcbiAgICBcclxuICB0aGlzLnNldFNob3J0VXJsID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5idWlsZCkge1xyXG4gICAgICB2YXIgbG9uZ1VybCA9IGV4cG9ydExpbmtIZWxwZXIuY3JlYXRlR3JvdXBMaW5rKHZtLmJ1aWxkTmFtZSwgdm0uYnVpbGQpO1xyXG4gICAgICB2bS5idWlsZC5zaG9ydFVybCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0obG9uZ1VybCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2V0U2hvcnRVcmwoKTtcclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUJ1aWxkQWN0aW9ucycsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgYnVpbGROYW1lOiAnPWJ1aWxkTmFtZScsXHJcbiAgICAgIGJ1aWxkOiAnPWJ1aWxkJyxcclxuICAgICAgb25DaGFuZ2U6ICcmb25DaGFuZ2UnXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2J1aWxkQWN0aW9uc0N0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnYnVpbGRBY3Rpb25zJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWFjdGlvbnMuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdidWlsZEV4cG9ydEFjdGlvbkN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJyRsb2NhdGlvbicsJ2hDb2RlVmFsdWVzJywnc3RhdEhlbHBlcicsJ2l0ZW1DYXRlZ29yeScsJ3NhdmVIZWxwZXInLCdleHBvcnRMaW5rSGVscGVyJywnZ3JvdXBIZWxwZXInLCd0cmFuc2xhdGlvbnMnLCdkbnREYXRhJywnZG50UmVzZXQnLFxyXG5mdW5jdGlvbigkdGltZW91dCwkbG9jYXRpb24saENvZGVWYWx1ZXMsc3RhdEhlbHBlcixpdGVtQ2F0ZWdvcnksc2F2ZUhlbHBlcixleHBvcnRMaW5rSGVscGVyLGdyb3VwSGVscGVyLHRyYW5zbGF0aW9ucyxkbnREYXRhLGRudFJlc2V0KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgdm0uZXhwb3J0ID0gZXhwb3J0QnVpbGQ7XHJcbiAgXHJcbiAgZnVuY3Rpb24gZXhwb3J0QnVpbGQoKSB7XHJcbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeSh2bS5idWlsZCwgbnVsbCwgMSldLCB7dHlwZTogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLThcIn0pO1xyXG4gICAgc2F2ZUFzKGJsb2IsICdkbmdlYXJzaW0tJyArIHZtLmJ1aWxkTmFtZSArICcuanNvbicpO1xyXG4gIH1cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUJ1aWxkRXhwb3J0QWN0aW9uJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBidWlsZE5hbWU6ICc9YnVpbGROYW1lJyxcclxuICAgICAgYnVpbGQ6ICc9YnVpbGQnXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2J1aWxkRXhwb3J0QWN0aW9uQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWV4cG9ydC1hY3Rpb24uaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdCdWlsZEltcG9ydEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJyRsb2NhdGlvbicsJ2hDb2RlVmFsdWVzJywnc3RhdEhlbHBlcicsJ2l0ZW1DYXRlZ29yeScsJ3NhdmVIZWxwZXInLCdleHBvcnRMaW5rSGVscGVyJywnZ3JvdXBIZWxwZXInLCd0cmFuc2xhdGlvbnMnLCdkbnREYXRhJywnZG50UmVzZXQnLFxyXG5mdW5jdGlvbigkdGltZW91dCwkbG9jYXRpb24saENvZGVWYWx1ZXMsc3RhdEhlbHBlcixpdGVtQ2F0ZWdvcnksc2F2ZUhlbHBlcixleHBvcnRMaW5rSGVscGVyLGdyb3VwSGVscGVyLHRyYW5zbGF0aW9ucyxkbnREYXRhLGRudFJlc2V0KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgdm0ub25GaWxlQ2hhbmdlID0gb25GaWxlQ2hhbmdlO1xyXG4gIHZtLmNvcHlMb2NhbGx5ID0gY29weUxvY2FsbHk7XHJcbiAgXHJcbiAgZnVuY3Rpb24gb25GaWxlQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICB2YXIgZmlsZXMgPSBldmVudC50YXJnZXQuZmlsZXM7XHJcbiAgICBjb25zb2xlLmxvZygnaW1wb3J0aW5nIGZpbGVzJywgZmlsZXMpO1xyXG4gICAgaWYoZmlsZXMgJiYgZmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgZmlsZU5hbWUgPSBmaWxlc1swXS5uYW1lO1xyXG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZXNbMF0pO1xyXG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uYnVpbGQgPSBKU09OLnBhcnNlKHJlYWRlci5yZXN1bHQpO1xyXG4gICAgICAgIGlmKGZpbGVOYW1lICYmIGZpbGVOYW1lLmxlbmd0aCA+IDUpIHtcclxuICAgICAgICAgIHZtLmJ1aWxkTmFtZSA9IGZpbGVOYW1lLnN1YnN0cigwLCBmaWxlTmFtZS5sZW5ndGgtNSk7XHJcbiAgICAgICAgICB2bS5idWlsZE5hbWUgPSB2bS5idWlsZE5hbWUucmVwbGFjZSgnZG5nZWFyc2ltLScsICcnKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHZtLmJ1aWxkTmFtZSA9ICdpbXBvcnRlZCBidWlsZCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICR0aW1lb3V0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gY29weUxvY2FsbHkoKSB7XHJcbiAgICB2YXIgbmV3R3JvdXBOYW1lID0gc2F2ZUhlbHBlci5pbXBvcnRHcm91cCh2bS5idWlsZE5hbWUsIHZtLmJ1aWxkLml0ZW1zKTtcclxuICAgIFxyXG4gICAgc2F2ZUhlbHBlci5zYXZlQnVpbGQoXHJcbiAgICAgIG5ld0dyb3VwTmFtZSwgXHJcbiAgICAgIG5ld0dyb3VwTmFtZSxcclxuICAgICAgdm0uYnVpbGQpO1xyXG4gICAgICBcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvYnVpbGQvJyArIG5ld0dyb3VwTmFtZSk7XHJcbiAgfVxyXG59XSk7IiwiJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUJ1aWxkSXRlbUxpc3QnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGJ1aWxkTmFtZTogJz1idWlsZE5hbWUnLFxyXG4gICAgICBidWlsZDogJz1idWlsZCcsXHJcbiAgICAgIGNhdGVnb3J5OiAnPWNhdGVnb3J5JyxcclxuICAgICAgc2VydmVyOiAnPXNlcnZlcicsXHJcbiAgICAgIG9uQ2hhbmdlOiAnJm9uQ2hhbmdlJ1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6IGJ1aWxkSXRlbUxpc3RDb250cm9sbGVyLFxyXG4gICAgY29udHJvbGxlckFzOiAnYnVpbGRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWl0ZW0tbGlzdC5odG1sJ1xyXG4gIH07XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gYnVpbGRJdGVtTGlzdENvbnRyb2xsZXIoaENvZGVWYWx1ZXMsIGl0ZW1DYXRlZ29yeSwgc2F2ZUhlbHBlcikge1xyXG5cclxuICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICB2bS5nZXRDYXRlZ29yeUl0ZW1zID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaXRlbXNCeUNhdCA9IGl0ZW1DYXRlZ29yeS5nZXRJdGVtc0J5Q2F0ZWdvcnkodm0uYnVpbGQuaXRlbXMpO1xyXG4gICAgaWYodm0uY2F0ZWdvcnkubmFtZSBpbiBpdGVtc0J5Q2F0KSB7XHJcbiAgICAgIHJldHVybiBpdGVtc0J5Q2F0W3ZtLmNhdGVnb3J5Lm5hbWVdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBzdWJDYXRzID0ge307XHJcbiAgdmFyIHN1YkNhdENhdE5hbWUgPSAnJztcclxuICB2bS5nZXRTdWJDYXRlZ29yaWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZihzdWJDYXRDYXROYW1lICE9IHZtLmNhdGVnb3J5Lm5hbWUpIHtcclxuICAgICAgc3ViQ2F0cyA9IHt9O1xyXG4gICAgICBzdWJDYXRDYXROYW1lID0gdm0uY2F0ZWdvcnkubmFtZTtcclxuICAgICAgdmFyIHN1YkNhdExpc3QgPSBbXTtcclxuXHJcbiAgICAgIHZhciBpdGVtcyA9IHZtLmJ1aWxkLml0ZW1zLnNvcnQoZnVuY3Rpb24oaXRlbTEsIGl0ZW0yKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0xLmV4Y2hhbmdlVHlwZSAtIGl0ZW0yLmV4Y2hhbmdlVHlwZTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmKHZtLmNhdGVnb3J5Lm5hbWUgPT0gJ2luY3JlYXNpbmcgZ2VtcycpIHtcclxuICAgICAgICBzdWJDYXRMaXN0ID0gXy5maWx0ZXIoaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmluY3JlYXNpbmdHZW1TbG90cyA+IDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdvZmZlbnNpdmUgZ2VtcycpIHtcclxuICAgICAgICBzdWJDYXRMaXN0ID0gXy5maWx0ZXIoaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLm9mZmVuc2l2ZUdlbVNsb3RzID4gMDtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHZtLmNhdGVnb3J5Lm5hbWUgPT0gJ2ltcHJpbnQnKSB7ICBcclxuICAgICAgICB2YXIgY29zdHVtZUNhdCA9IGl0ZW1DYXRlZ29yeS5ieU5hbWUoJ2Nvc3R1bWUnKTtcclxuICAgICAgICBzdWJDYXRMaXN0ID0gXy5maWx0ZXIoaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtQ2F0ZWdvcnkuaXNJdGVtRm9yQ2F0KGNvc3R1bWVDYXQsIGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIF8uZWFjaChzdWJDYXRMaXN0LCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgaWYoIShpdGVtLmV4Y2hhbmdlVHlwZSBpbiBzdWJDYXRzKSkge1xyXG4gICAgICAgICAgc3ViQ2F0c1tpdGVtLmV4Y2hhbmdlVHlwZV0gPSB7XHJcbiAgICAgICAgICAgIG5hbWVzOiBbXSxcclxuICAgICAgICAgICAgc2xvdHM6IDAsXHJcbiAgICAgICAgICAgIGV4Y2hhbmdlVHlwZTogaXRlbS5leGNoYW5nZVR5cGVcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdWJDYXRzW2l0ZW0uZXhjaGFuZ2VUeXBlXS5uYW1lcy5wdXNoKGl0ZW0ubmFtZSk7XHJcbiAgICAgICAgaWYodm0uY2F0ZWdvcnkubmFtZSA9PSAnaW5jcmVhc2luZyBnZW1zJykge1xyXG4gICAgICAgICAgc3ViQ2F0c1tpdGVtLmV4Y2hhbmdlVHlwZV0uc2xvdHMgKz0gaXRlbS5pbmNyZWFzaW5nR2VtU2xvdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodm0uY2F0ZWdvcnkubmFtZSA9PSAnb2ZmZW5zaXZlIGdlbXMnKSB7XHJcbiAgICAgICAgICBzdWJDYXRzW2l0ZW0uZXhjaGFuZ2VUeXBlXS5zbG90cyArPSBpdGVtLm9mZmVuc2l2ZUdlbVNsb3RzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3ViQ2F0c1tpdGVtLmV4Y2hhbmdlVHlwZV0uc2xvdHMgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHN1YkNhdHNbMF0gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gc3ViQ2F0cztcclxuICB9XHJcblxyXG4gIHZtLmdldE51bVRha2VuID0gZnVuY3Rpb24oc3ViQ2F0KSB7XHJcbiAgICB2YXIgcmV0VmFsID0gMDtcclxuICAgIHZhciBleGNoYW5nZUlkO1xyXG4gICAgaWYodm0uY2F0ZWdvcnkubmFtZSA9PSAnaW1wcmludCcpIHtcclxuICAgICAgZXhjaGFuZ2VJZCA9IHN1YkNhdC5leGNoYW5nZVR5cGU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdmFyIGdlbUV4Y2hhbmdlID0gXy5maW5kKGhDb2RlVmFsdWVzLmdlbUV4Y2hhbmdlcywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHJldHVybiBlLmV4Y2hhbmdlID09IHN1YkNhdC5leGNoYW5nZVR5cGU7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZXhjaGFuZ2VJZCA9IGdlbUV4Y2hhbmdlLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGV4Y2hhbmdlSWQpIHtcclxuICAgICAgdmFyIGl0ZW1zID0gdm0uZ2V0Q2F0ZWdvcnlJdGVtcygpO1xyXG4gICAgICBfLmVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICBpZihpdGVtLmdlbVNsb3QgPT0gZXhjaGFuZ2VJZCkge1xyXG4gICAgICAgICAgKytyZXRWYWw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXRWYWw7XHJcbiAgfVxyXG5cclxuICB2bS5pc0luU3ViQ2F0ID0gZnVuY3Rpb24oaXRlbSwgc3ViQ2F0KSB7XHJcbiAgICBpZighc3ViQ2F0ICYmICFpdGVtLmdlbVNsb3QpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdmFyIGV4Y2hhbmdlSWQ7XHJcbiAgICAgIGlmKHZtLmNhdGVnb3J5Lm5hbWUgPT0gJ2ltcHJpbnQnKSB7XHJcbiAgICAgICAgZXhjaGFuZ2VJZCA9IGl0ZW0uZ2VtU2xvdDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2YXIgZ2VtRXhjaGFuZ2UgPSBfLmZpbmQoaENvZGVWYWx1ZXMuZ2VtRXhjaGFuZ2VzLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICByZXR1cm4gZS5pZCA9PSBpdGVtLmdlbVNsb3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYoZ2VtRXhjaGFuZ2UpIHtcclxuICAgICAgICAgIGV4Y2hhbmdlSWQgPSBnZW1FeGNoYW5nZS5leGNoYW5nZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKCFzdWJDYXQgJiYgZXhjaGFuZ2VJZCkge1xyXG4gICAgICAgIC8vIGNoZWNrIGZvciBpbnZhbGlkIHNsb3RcclxuICAgICAgICB2YXIgYWxsU3ViQ2F0SXRlbXMgPSB2bS5nZXRTdWJDYXRlZ29yaWVzKCk7XHJcbiAgICAgICAgdmFyIGZvdW5kU3ViQ2F0SXRlbSA9IF8uZmluZChhbGxTdWJDYXRJdGVtcywgZnVuY3Rpb24oc3ViQ2F0SXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIHN1YkNhdEl0ZW0gIT0gbnVsbCAmJiBleGNoYW5nZUlkID09IHN1YkNhdEl0ZW0uZXhjaGFuZ2VUeXBlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZighZm91bmRTdWJDYXRJdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihzdWJDYXQgJiYgZXhjaGFuZ2VJZCkge1xyXG4gICAgICAgIHJldHVybiBleGNoYW5nZUlkID09IHN1YkNhdC5leGNoYW5nZVR5cGU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2bS5jYW5Nb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdm0uY2F0ZWdvcnkubmFtZSA9PSAnaW5jcmVhc2luZyBnZW1zJyB8fCB2bS5jYXRlZ29yeS5uYW1lID09ICdvZmZlbnNpdmUgZ2VtcycgfHwgdm0uY2F0ZWdvcnkubmFtZSA9PSAnaW1wcmludCc7XHJcbiAgfVxyXG5cclxuICB2bS5nZXRHZW1TbG90ID0gZnVuY3Rpb24oc3ViQ2F0KSB7XHJcbiAgICBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdpbXByaW50Jykge1xyXG4gICAgICByZXR1cm4gc3ViQ2F0LmV4Y2hhbmdlVHlwZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoc3ViQ2F0KSB7XHJcbiAgICAgIHZhciBnZW1FeGNoYW5nZSA9IF8uZmluZChoQ29kZVZhbHVlcy5nZW1FeGNoYW5nZXMsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gZS5leGNoYW5nZSA9PSBzdWJDYXQuZXhjaGFuZ2VUeXBlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmKCFnZW1FeGNoYW5nZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2Nhbm5vdCBmaW5kIGV4Y2hhbmdlIGZvcicsIHN1YkNhdCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGdlbUV4Y2hhbmdlLmlkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdm0ubW92ZSA9IGZ1bmN0aW9uKG1vdmVJdGVtLCBkZXN0aW5hdGlvbikge1xyXG4gICAgbW92ZUl0ZW0uZ2VtU2xvdCA9IHZtLmdldEdlbVNsb3QoZGVzdGluYXRpb24pO1xyXG4gICAgc2F2ZUhlbHBlci51cGRhdGVkU2F2ZWRJdGVtcyh2bS5idWlsZE5hbWUsIHZtLmJ1aWxkLml0ZW1zKTtcclxuICAgIHZtLmhhbmRsZUNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB2bS5hbGxvd01vcmVJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuICF2bS5jYXRlZ29yeS5tYXhDYXQgfHwgdm0uZ2V0Q2F0ZWdvcnlJdGVtcygpLmxlbmd0aCA8IHZtLmNhdGVnb3J5Lm1heENhdDtcclxuICB9XHJcbiAgXHJcbiAgdm0uaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBzdWJDYXRDYXROYW1lID0gJyc7XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB2bS5oYW5kbGVJdGVtRWRpdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgc2F2ZUhlbHBlci51cGRhdGVkU2F2ZWRJdGVtcyh2bS5idWlsZE5hbWUsIHZtLmJ1aWxkLml0ZW1zKTtcclxuICAgIHZtLmhhbmRsZUNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB2bS5jYW5jZWxFZGl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB2bS5jYW5FZGl0ID0gZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgcmV0dXJuIGl0ZW0udHlwZU5hbWUgPT0gJ2N1c3RvbScgfHwgaXRlbS50eXBlTmFtZSA9PSAnd2VhcG9ucycgfHwgaXRlbS50eXBlTmFtZSA9PSAnYXJtb3VyJyB8fCBpdGVtLnR5cGVOYW1lID09ICdvZmZlbnNpdmUgZ2VtcycgfHwgaXRlbS50eXBlTmFtZSA9PSAnaW5jcmVhc2luZyBnZW1zJztcclxuICB9XHJcbiAgXHJcbiAgdm0ucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIHN1YkNhdENhdE5hbWUgPSAnJztcclxuICAgIGl0ZW0ucmVtb3ZlSXRlbSA9IHRydWU7XHJcbiAgICB2YXIgbmV3SXRlbUxpc3QgPSBbXTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5idWlsZC5pdGVtcywgZnVuY3Rpb24oZ0l0ZW0sIGluZGV4KSB7XHJcbiAgICAgIGlmKGdJdGVtICYmICFnSXRlbS5yZW1vdmVJdGVtKSB7XHJcbiAgICAgICAgbmV3SXRlbUxpc3QucHVzaChnSXRlbSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHZtLmJ1aWxkLml0ZW1zID0gbmV3SXRlbUxpc3Q7XHJcbiAgICBzYXZlSGVscGVyLnVwZGF0ZWRTYXZlZEl0ZW1zKHZtLmJ1aWxkTmFtZSwgbmV3SXRlbUxpc3QpO1xyXG4gICAgdm0uaGFuZGxlQ2hhbmdlKCk7XHJcbiAgfVxyXG59IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignYnVpbGRJdGVtQ3RybCcsXHJcblxyXG5bJyR0aW1lb3V0Jywnc3RhdEhlbHBlcicsJ3NhdmVIZWxwZXInLCdoQ29kZVZhbHVlcycsXHJcbmZ1bmN0aW9uKCR0aW1lb3V0LHN0YXRIZWxwZXIsc2F2ZUhlbHBlcixoQ29kZVZhbHVlcykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZtLnVwZGF0ZUl0ZW0gPSBzZXRGdWxsU3RhdHM7XHJcbiAgdm0uZ2VtU2xvdHMgPSBoQ29kZVZhbHVlcy5nZW1FeGNoYW5nZXM7XHJcbiAgdm0uZ2V0R2VtU2xvdE5hbWUgPSBnZXRHZW1TbG90TmFtZTtcclxuICBcclxuICBmdW5jdGlvbiBnZXRHZW1TbG90TmFtZShpdGVtKSB7XHJcbiAgICBpZihpdGVtLmdlbVNsb3QpIHtcclxuICAgICAgZm9yKHZhciBpPTA7aTx2bS5nZW1TbG90cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgaWYodm0uZ2VtU2xvdHNbaV0uaWQgPT0gaXRlbS5nZW1TbG90KSB7XHJcbiAgICAgICAgICByZXR1cm4gdm0uZ2VtU2xvdHNbaV0ubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2V0RnVsbFN0YXRzKCkge1xyXG4gICAgLy8gZnVsbCBzdGF0cyBhcmUgY2xlYXJlZCB3aGVuIHB1Ymxpc2hpbmcgYnVpbGRzXHJcbiAgICB2bS5pdGVtLmZ1bGxTdGF0cyA9IHZtLml0ZW0uc3RhdHM7XHJcbiAgICBcclxuICAgIGlmKHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cyAhPSBudWxsICYmIHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHZtLml0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyh2bS5pdGVtLmVuY2hhbnRtZW50U3RhdHMsIHZtLml0ZW0uZnVsbFN0YXRzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYodm0uaXRlbS5zcGFya1N0YXRzICE9IG51bGwgJiYgdm0uaXRlbS5zcGFya1N0YXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgdm0uaXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKHZtLml0ZW0uc3BhcmtTdGF0cywgdm0uaXRlbS5mdWxsU3RhdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUJ1aWxkSXRlbScsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgICAgZWRpdE1vZGU6ICc9ZWRpdE1vZGUnLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICAgIGNhbmNlbEVkaXQ6ICcmY2FuY2VsRWRpdCdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnYnVpbGRJdGVtQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWl0ZW0uaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdCdWlsZExpc3RDdHJsJywgXHJcbiAgWyAnJHdpbmRvdycsJyRsb2NhdGlvbicsJyRyb3V0ZVBhcmFtcycsJyR0aW1lb3V0Jywnc2F2ZUhlbHBlcicsXHJcbiAgZnVuY3Rpb24oJHdpbmRvdywkbG9jYXRpb24sJHJvdXRlUGFyYW1zLCR0aW1lb3V0LHNhdmVIZWxwZXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIFxyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ3NhdmVkLWJhY2snO1xyXG4gICAgdGhpcy5zZXR1cEJ1aWxkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5zYXZlZEl0ZW1zID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICAgIHZtLmJ1aWxkTmFtZXMgPSBPYmplY3Qua2V5cyh2bS5zYXZlZEl0ZW1zKS5zb3J0KCk7XHJcbiAgICAgIHZtLmJ1aWxkcyA9IFtdO1xyXG4gICAgICBmb3IodmFyIGk9MDtpPHZtLmJ1aWxkTmFtZXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgIHZtLmJ1aWxkcy5wdXNoKHtcclxuICAgICAgICAgIG5hbWU6IHZtLmJ1aWxkTmFtZXNbaV0sXHJcbiAgICAgICAgICBidWlsZDogdm0uc2F2ZWRJdGVtc1t2bS5idWlsZE5hbWVzW2ldXSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXR1cEJ1aWxkcygpO1xyXG4gICAgXHJcbiAgICBpZignYnVpbGROYW1lJyBpbiAkcm91dGVQYXJhbXMpIHtcclxuICAgICAgaWYoJHJvdXRlUGFyYW1zLmJ1aWxkTmFtZSBpbiB2bS5zYXZlZEl0ZW1zKSB7XHJcbiAgICAgICAgaWYoJHJvdXRlUGFyYW1zLmJ1aWxkTmFtZSAhPSB0aGlzLmN1cnJlbnRHcm91cCkge1xyXG4gICAgICAgICAgdGhpcy5jdXJyZW50R3JvdXAgPSAkcm91dGVQYXJhbXMuYnVpbGROYW1lO1xyXG4gICAgICAgICAgc2F2ZUhlbHBlci5zYXZlQnVpbGRTZWxlY3Rpb24odGhpcy5jdXJyZW50R3JvdXAsIHRoaXMuc2F2ZWRJdGVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY3VycmVudEdyb3VwID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLmN1cnJlbnRHcm91cCAmJiB0aGlzLmN1cnJlbnRHcm91cCBpbiB0aGlzLnNhdmVkSXRlbXMpIHtcclxuICAgICAgJGxvY2F0aW9uLnBhdGgoJy9idWlsZC8nICsgdGhpcy5jdXJyZW50R3JvdXApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuY3VycmVudEdyb3VwID0gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYodGhpcy5jdXJyZW50R3JvdXApIHtcclxuICAgICAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCAnICsgdGhpcy5jdXJyZW50R3JvdXA7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCBCVUlMRFMnO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYW55SXRlbXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc2F2ZWRJdGVtcykubGVuZ3RoID4gMDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNyZWF0ZUdyb3VwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICRsb2NhdGlvbi5wYXRoKCcvbmV3LWJ1aWxkJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZtLnNldHVwQnVpbGRzKCk7XHJcbiAgICAgICR0aW1lb3V0KCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdjaGFuZ2UnKTtcclxuICAgIH1cclxuICBcclxuICAgIHRoaXMudG9nZ2xlR3JvdXAgPSBmdW5jdGlvbihidWlsZE5hbWUpIHtcclxuICAgICAgc2F2ZUhlbHBlci5zYXZlQnVpbGRTZWxlY3Rpb24oYnVpbGROYW1lLCB0aGlzLnNhdmVkSXRlbXMpO1xyXG4gICAgICAkbG9jYXRpb24udXJsKCcvYnVpbGQvJyArIGJ1aWxkTmFtZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRoaXMucHVibGlzaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkbG9jYXRpb24udXJsKCcvcHVibGlzaCcpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLnNlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkbG9jYXRpb24udXJsKCcvYnVpbGQtc2VhcmNoJyk7XHJcbiAgICB9XHJcbiAgfV1cclxuKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbmdlYXJzaW1CdWlsZFN0YXRzJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBzdGF0czogJz1zdGF0cycsXHJcbiAgICAgIGJ1aWxkOiAnPWJ1aWxkJyxcclxuICAgICAgYnVpbGROYW1lOiAnPWJ1aWxkTmFtZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogYnVpbGRTdGF0c0NvbnRyb2xsZXIsXHJcbiAgICBjb250cm9sbGVyQXM6ICdzdGF0c0N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvYnVpbGQtc3RhdHMuaHRtbCdcclxuICB9O1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGJ1aWxkU3RhdHNDb250cm9sbGVyKHN0YXRIZWxwZXIsZHZTdGF0Y2FyZEhlbHBlcikge1xyXG4gIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gIHZtLmV4cG9ydFN0YXRDYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZHZDYXJkU3RhdEhhc2ggPSBkdlN0YXRjYXJkSGVscGVyLmNvbnZlcnRTdGF0cyh2bS5idWlsZCwgdm0uYnVpbGROYW1lLCB2bS5zdGF0cy5jYWxjdWxhdGVkU3RhdHMpO1xyXG4gICAgdmFyIHVybCA9IGR2U3RhdGNhcmRIZWxwZXIuY2FyZEltcG9ydFVybCArICc/ZG5nc2ltcG9ydD0nICsgYnRvYShKU09OLnN0cmluZ2lmeShkdkNhcmRTdGF0SGFzaCkpO1xyXG4gICAgd2luZG93Lm9wZW4odXJsKTtcclxuICB9XHJcbn0iLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdidWlsZFN1bW1hcnlDdHJsJyxcclxuXHJcblsnJHJvdXRlUGFyYW1zJywnJGxvY2F0aW9uJywnaENvZGVWYWx1ZXMnLCdzdGF0SGVscGVyJywnaXRlbUNhdGVnb3J5JyxcclxuZnVuY3Rpb24oJHJvdXRlUGFyYW1zLCRsb2NhdGlvbixoQ29kZVZhbHVlcyxzdGF0SGVscGVyLGl0ZW1DYXRlZ29yeSkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHRoaXMuc3RhdHMgPSBzdGF0SGVscGVyLmdldEJ1aWxkU3RhdHModGhpcy5idWlsZCk7XHJcbiAgdGhpcy5pdGVtc0J5Q2F0ZWdvcnkgPSBpdGVtQ2F0ZWdvcnkuZ2V0SXRlbXNCeUNhdGVnb3J5KHRoaXMuYnVpbGQuaXRlbXMpO1xyXG4gIFxyXG4gIHRoaXMuZ2V0U2F2ZURhdGUgPSBmdW5jdGlvbihncm91cCkge1xyXG4gICAgaWYodm0uYnVpbGQubGFzdFVwZGF0ZSA+IDApIHtcclxuICAgICAgdmFyIGxhc3RVcGRhdGUgPSBuZXcgRGF0ZSh2bS5idWlsZC5sYXN0VXBkYXRlKTtcclxuICAgICAgcmV0dXJuIGxhc3RVcGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0U2F2ZVRpbWUgPSBmdW5jdGlvbihncm91cCkge1xyXG4gICAgaWYodm0uYnVpbGQubGFzdFVwZGF0ZSA+IDApIHtcclxuICAgICAgdmFyIGxhc3RVcGRhdGUgPSBuZXcgRGF0ZSh2bS5idWlsZC5sYXN0VXBkYXRlKTtcclxuICAgICAgcmV0dXJuIGxhc3RVcGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0QnVpbGRTdW1tYXJ5ID0gZnVuY3Rpb24oZ3JvdXApIHtcclxuICAgIHZhciBzdW1tYXJ5ID0gJyc7XHJcbiAgICBcclxuICAgIHZhciB0eXBlQ291bnRzID0ge307XHJcbiAgICB2YXIgY2FzaEl0ZW1zID0gMDtcclxuICAgIHZhciB0aXRsZXMgPSAwO1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKHZtLml0ZW1zQnlDYXRlZ29yeSwgZnVuY3Rpb24oaXRlbXNCeVR5cGUsIHR5cGUpIHtcclxuICAgICAgaWYoaXRlbXNCeVR5cGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGlmKHN1bW1hcnkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgc3VtbWFyeSArPSAnLCAnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdW1tYXJ5ICs9IGl0ZW1zQnlUeXBlLmxlbmd0aCArICcgJyArIHR5cGU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICByZXR1cm4gc3VtbWFyeTtcclxuICB9XHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1CdWlsZFN1bW1hcnknLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGJ1aWxkTmFtZTogJz1idWlsZE5hbWUnLFxyXG4gICAgICBidWlsZDogJz1idWlsZCdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnYnVpbGRTdW1tYXJ5Q3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdidWlsZEN0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvYnVpbGQtc3VtbWFyeS5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0J1aWxkVGFsaXNtYW5zQ3RybCcsXHJcblxyXG5bJyR3aW5kb3cnLCckbG9jYXRpb24nLCckcm91dGVQYXJhbXMnLCckdGltZW91dCcsJ3NhdmVIZWxwZXInLCdzdGF0SGVscGVyJywnam9icycsJ2hDb2RlVmFsdWVzJywnaXRlbUNvbHVtbnNUb0xvYWQnLCdjaGFyYWN0ZXInLFxyXG5mdW5jdGlvbigkd2luZG93LCRsb2NhdGlvbiwkcm91dGVQYXJhbXMsJHRpbWVvdXQsc2F2ZUhlbHBlcixzdGF0SGVscGVyLGpvYnMsaENvZGVWYWx1ZXMsaXRlbUNvbHVtbnNUb0xvYWQsY2hhcmFjdGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCBUQUxJU01BTlMnO1xyXG4gICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcbiAgXHJcbiAgdGhpcy5zYXZlZEl0ZW1zID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgdGhpcy5ncm91cE5hbWVzID0gT2JqZWN0LmtleXModGhpcy5zYXZlZEl0ZW1zKTtcclxuICBpZighdGhpcy5ncm91cE5hbWVzKSB7XHJcbiAgICB0aGlzLmdyb3VwTmFtZXMgPSBbXTtcclxuICB9XHJcbiAgaWYodGhpcy5ncm91cE5hbWVzLmxlbmd0aCA+IDApIHtcclxuICAgIHRoaXMuZ3JvdXBOYW1lID0gc2F2ZUhlbHBlci5nZXRDdXJyZW50QnVpbGQoKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB0aGlzLmdyb3VwTmFtZSA9IG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIGlmKCF0aGlzLmdyb3VwTmFtZSB8fCAhKHRoaXMuZ3JvdXBOYW1lIGluIHRoaXMuc2F2ZWRJdGVtcykpIHtcclxuICAgIGlmKHRoaXMuZ3JvdXBOYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMuZ3JvdXBOYW1lID0gdGhpcy5ncm91cE5hbWVzWzBdO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBpZighdGhpcy5ncm91cE5hbWUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdjYW5ub3QgZmluZCBidWlsZCcpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEdyb3VwQ2FsY1N0YXRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLmdyb3VwQ2FsY1N0YXRzID09IG51bGwpIHtcclxuICAgICAgdmFyIGdyb3VwID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdO1xyXG4gICAgICBpZihncm91cCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXBDYWxjU3RhdHMgPSBzdGF0SGVscGVyLmdldENhbGN1bGF0ZWRTdGF0c0Zyb21JdGVtcyhncm91cCwgZ3JvdXAuaXRlbXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB0aGlzLmdyb3VwQ2FsY1N0YXRzO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEJ1aWxkID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnBpY2t1cCA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICB2bS5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XHJcbiAgICBcclxuICAgIHZtLnJlcGxhY2VIUEFmZmVjdEFtb3VudCA9IFtdO1xyXG4gICAgdm0ucmVwbGFjZU1EbWdBZmZlY3RBbW91bnQgPSBbXTtcclxuICAgIHZtLnJlcGxhY2VQRG1nQWZmZWN0QW1vdW50ID0gW107XHJcbiAgICB2bS5yZXBsYWNlQXZnRG1nQWZmZWN0QW1vdW50ID0gW107XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNhdmVHcm91cCgpIHtcclxuICAgIHNhdmVIZWxwZXIuc2F2ZUJ1aWxkU2VsZWN0aW9uKHZtLmdyb3VwTmFtZSwgdm0uc2F2ZWRJdGVtcyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaGVhZGVycyA9IFtcclxuICAgICcrMTAwJScsXHJcbiAgICAnKzc1JScsXHJcbiAgICAnKzI1JScsXHJcbiAgICAnKzAlJyxcclxuICAgIF07XHJcbiAgXHJcbiAgdGhpcy5zdW1tYXJ5U3RhdElkcyA9IFtdO1xyXG4gIGZvcih2YXIgaWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgIGlmKGhDb2RlVmFsdWVzLnN0YXRzW2lkXS5zdW1tYXJ5RGlzcGxheSkge1xyXG4gICAgICB0aGlzLnN1bW1hcnlTdGF0SWRzLnB1c2goaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnBjSW5kZXhlcyA9IHt9O1xyXG4gIHRoaXMucGNJbmRleGVzWycxMDAnXSA9IDA7XHJcbiAgdGhpcy5wY0luZGV4ZXNbJzc1J10gPSAxO1xyXG4gIHRoaXMucGNJbmRleGVzWycyNSddID0gMjtcclxuICB0aGlzLnBjSW5kZXhlc1snMCddID0gMztcclxuICBcclxuICB0aGlzLnNlbGVjdGVkSW5kZXggPSAtMTtcclxuICBcclxuICB0aGlzLnJvd3MgPSBbXTtcclxuICBcclxuICB0aGlzLnVwZGF0ZVJvd3MgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLnJvd3MgPSBbXTtcclxuICAgICAgICBcclxuICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgIGlmKGl0ZW0udHlwZU5hbWUgPT0gJ3RhbGlzbWFuJykge1xyXG4gICAgICAgIHZhciBwY0luZGV4ID0gdm0ucGNJbmRleGVzW2l0ZW0uZW5jaGFudG1lbnROdW1dO1xyXG4gICAgICAgIGlmKCFwY0luZGV4ICYmIHBjSW5kZXggIT0gMCkge1xyXG4gICAgICAgICAgcGNJbmRleCA9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciByb3dJbmRleCA9IDA7XHJcbiAgICAgICAgZm9yKDs7KSB7XHJcbiAgICAgICAgICBpZighdm0ucm93c1tyb3dJbmRleF0pIHtcclxuICAgICAgICAgICAgdm0ucm93c1tyb3dJbmRleF0gPSB2bS5tYWtlRmFrZUNlbGxzKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKHZtLnJvd3Nbcm93SW5kZXhdW3BjSW5kZXhdLmluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICBpZighaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgICAgIGl0ZW0uZW5jaGFudG1lbnROdW0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHZtLm1ha2VDZWxsKGl0ZW0sIGluZGV4KTtcclxuICAgICAgICAgICAgdm0ucm93c1tyb3dJbmRleF1bcGNJbmRleF0gPSBkYXRhO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByb3dJbmRleCsrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpZih2bS5yb3dzLmxlbmd0aCA8IDMpIHtcclxuICAgICAgdm0ucm93c1t2bS5yb3dzLmxlbmd0aCsxXSA9IHZtLm1ha2VGYWtlQ2VsbHMoKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHRoaXMubWFrZUZha2VDZWxscyA9IGZ1bmN0aW9uKG51bSkge1xyXG4gICAgcmV0dXJuIFt2bS5tYWtlQ2VsbCh7ZW5jaGFudG1lbnROdW06MTAwfSwtMSksdm0ubWFrZUNlbGwoe2VuY2hhbnRtZW50TnVtOjc1fSwtMiksdm0ubWFrZUNlbGwoe2VuY2hhbnRtZW50TnVtOjI1fSwtMyksdm0ubWFrZUNlbGwoe2VuY2hhbnRtZW50TnVtOjB9LC00KV07XHJcbiAgfTtcclxuICBcclxuICB0aGlzLm1ha2VDZWxsID0gZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgIHJldHVybiB7IGl0ZW06IGl0ZW0sIGluZGV4OiBpbmRleCB9O1xyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5jbGljayA9IGZ1bmN0aW9uKGNvbCkge1xyXG4gICAgaWYodm0uc2VsZWN0ZWRJbmRleCA9PSAtMSkge1xyXG4gICAgICBpZihjb2wuaW5kZXggPj0gMCkge1xyXG4gICAgICAgIHZtLnBpY2t1cChjb2wuaW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdm0ubW92ZShjb2wpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5tb3ZlID0gZnVuY3Rpb24oY29sKSB7XHJcbiAgICBcclxuICAgIHZhciBpdGVtcyA9IHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXS5pdGVtcztcclxuICAgIGlmKGNvbC5pbmRleCA+PSAwKSB7XHJcbiAgICAgIHZhciBzd2FwRW5jaGFudG1lbnROdW1iZXIgPSBjb2wuaXRlbS5lbmNoYW50bWVudE51bTtcclxuICAgICAgXHJcbiAgICAgIHZtLnNldFRhbGlzbWFuKGNvbC5pdGVtLCBpdGVtc1t2bS5zZWxlY3RlZEluZGV4XS5lbmNoYW50bWVudE51bSk7XHJcbiAgICAgIHZtLnNldFRhbGlzbWFuKGl0ZW1zW3ZtLnNlbGVjdGVkSW5kZXhdLCBzd2FwRW5jaGFudG1lbnROdW1iZXIpO1xyXG4gICAgICBpdGVtc1tjb2wuaW5kZXhdID0gaXRlbXNbdm0uc2VsZWN0ZWRJbmRleF07XHJcbiAgICAgIGl0ZW1zW3ZtLnNlbGVjdGVkSW5kZXhdID0gY29sLml0ZW07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdmFyIGl0ZW0gPSBpdGVtc1t2bS5zZWxlY3RlZEluZGV4XTtcclxuICAgICAgdm0uc2V0VGFsaXNtYW4oaXRlbSwgY29sLml0ZW0uZW5jaGFudG1lbnROdW0pO1xyXG4gICAgICBpdGVtcy5zcGxpY2Uodm0uc2VsZWN0ZWRJbmRleCwgMSk7XHJcbiAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgdm0uZ3JvdXBDYWxjU3RhdHMgPSBudWxsO1xyXG4gICAgdm0uc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG4gICAgdm0udXBkYXRlUm93cygpO1xyXG4gICAgdm0ucmVwbGFjZUFmZmVjdEFtb3VudCA9IHt9O1xyXG4gICAgJHRpbWVvdXQoKTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuc2V0VGFsaXNtYW4gPSBmdW5jdGlvbihpdGVtLCBuZXdFbmhhbmNlbWVudE51bSkge1xyXG4gICAgdmFyIGV4dHJhU3RhdHMgPSBbXTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtLnN0YXRzLCBmdW5jdGlvbihzdGF0LCBpbmRleCkge1xyXG4gICAgICBpZihuZXdFbmhhbmNlbWVudE51bSkge1xyXG4gICAgICAgIGV4dHJhU3RhdHMucHVzaCh7aWQ6IHN0YXQuaWQsIG1heDogc3RhdC5tYXggKiAobmV3RW5oYW5jZW1lbnROdW0vMTAwKX0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaXRlbS5lbmNoYW50bWVudFN0YXRzID0gZXh0cmFTdGF0cztcclxuICAgIGl0ZW0uZW5jaGFudG1lbnROdW0gPSBuZXdFbmhhbmNlbWVudE51bTtcclxuICAgIFxyXG4gICAgaXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKGl0ZW0uZW5jaGFudG1lbnRTdGF0cywgaXRlbS5zdGF0cyk7XHJcbiAgfTtcclxuICBcclxuICAgIFxyXG4gIHRoaXMucmVwbGFjZUFmZmVjdEFtb3VudCA9IHt9O1xyXG4gIHRoaXMuZ2V0UmVwbGFjZUFmZmVjdEFtb3VudCA9IGZ1bmN0aW9uKHN0YXRJZCwgaXRlbUluZGV4LCBpdGVtKSB7XHJcbiAgICB0aGlzLmluaXRSZXBsYWNlQWZmZWN0cyhpdGVtSW5kZXgsIGl0ZW0pO1xyXG4gICAgaWYodGhpcy5yZXBsYWNlQWZmZWN0QW1vdW50W2l0ZW1JbmRleF0pIHtcclxuICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZUFmZmVjdEFtb3VudFtpdGVtSW5kZXhdW3N0YXRJZF07XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmluaXRSZXBsYWNlQWZmZWN0cyA9IGZ1bmN0aW9uKGl0ZW1JbmRleCwgaXRlbSkge1xyXG4gICAgaWYodm0ucmVwbGFjZUFmZmVjdEFtb3VudFtpdGVtSW5kZXhdIHx8IHZtLnNlbGVjdGVkSW5kZXggPT0gLTEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZXBsYWNlQWZmZWN0QW1vdW50W2l0ZW1JbmRleF0gPSB7fTtcclxuICAgIFxyXG4gICAgdmFyIGdyb3VwID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdO1xyXG4gICAgdmFyIGl0ZW0yID0gZ3JvdXAuaXRlbXNbdm0uc2VsZWN0ZWRJbmRleF07XHJcbiAgICBcclxuICAgIHZhciBleHRyYVN0YXRzID0gW107XHJcbiAgICB2YXIgZnVsbFN0YXRzMSA9IFtdO1xyXG4gICAgaWYoaXRlbS5zdGF0cykge1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgICBleHRyYVN0YXRzLnB1c2goe2lkOiBzdGF0LmlkLCBtYXg6IHN0YXQubWF4ICogKGl0ZW0yLmVuY2hhbnRtZW50TnVtLzEwMCl9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGZ1bGxTdGF0czEgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKGV4dHJhU3RhdHMsIGl0ZW0uc3RhdHMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBleHRyYVN0YXRzID0gW107XHJcbiAgICBhbmd1bGFyLmZvckVhY2goaXRlbTIuc3RhdHMsIGZ1bmN0aW9uKHN0YXQsIGluZGV4KSB7XHJcbiAgICAgIGV4dHJhU3RhdHMucHVzaCh7aWQ6IHN0YXQuaWQsIG1heDogc3RhdC5tYXggKiAoaXRlbS5lbmNoYW50bWVudE51bS8xMDApfSk7XHJcbiAgICB9KTtcclxuICAgIHZhciBmdWxsU3RhdHMyID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhleHRyYVN0YXRzLCBpdGVtMi5zdGF0cyk7XHJcblxyXG4gICAgdmFyIG5ld0l0ZW1zID0gW3tzdGF0czogZnVsbFN0YXRzMX0sIHtzdGF0czogZnVsbFN0YXRzMn1dO1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLml0ZW1zLCBmdW5jdGlvbihnSXRlbSAsIGluZGV4KSB7XHJcbiAgICAgIGlmKGl0ZW0gIT09IGdJdGVtICYmIGl0ZW0yICE9PSBnSXRlbSkge1xyXG4gICAgICAgIG5ld0l0ZW1zLnB1c2goZ0l0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIG5ld1N0YXRzID0gc3RhdEhlbHBlci5nZXRDYWxjdWxhdGVkU3RhdHNGcm9tSXRlbXMoZ3JvdXAsIG5ld0l0ZW1zKTtcclxuICAgIHZhciBvcmlnU3RhdHMgPSB2bS5nZXRHcm91cENhbGNTdGF0cygpO1xyXG4gICAgXHJcbiAgICBmb3IodmFyIGlkIGluIGhDb2RlVmFsdWVzLnN0YXRzKSB7XHJcbiAgICAgIGlmKGhDb2RlVmFsdWVzLnN0YXRzW2lkXS5zdW1tYXJ5RGlzcGxheSkge1xyXG4gICAgICAgIHZtLnJlcGxhY2VBZmZlY3RBbW91bnRbaXRlbUluZGV4XVtpZF0gPSBjYWxjU3RhdFBlcmNlbnQodm0uZ2V0U3RhdChpZCwgbmV3U3RhdHMpLm1heCwgdm0uZ2V0U3RhdChpZCwgb3JpZ1N0YXRzKS5tYXgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmdldFN0YXROYW1lID0gZnVuY3Rpb24oaWQpIHtcclxuICAgIHZhciByZXRWYWwgPSAnJztcclxuICAgIGlmKGhDb2RlVmFsdWVzLnN0YXRzW2lkXS5lbGVtZW50ID09ICdwcmltYXJ5Jykge1xyXG4gICAgICB2YXIgZWxlSWQgPSAwO1xyXG4gICAgICBpZih2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uZWxlbWVudCkge1xyXG4gICAgICAgIGVsZUlkID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLmVsZW1lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0VmFsICs9IGhDb2RlVmFsdWVzLmVsZW1lbnRzW2VsZUlkXS5uYW1lO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uZWxlbWVudCA9PSAnc2Vjb25kYXJ5Jykge1xyXG4gICAgICB2YXIgZWxlSWQgPSAwO1xyXG4gICAgICBpZih2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uc2Vjb25kYXJ5RWxlbWVudCkge1xyXG4gICAgICAgIGVsZUlkID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLnNlY29uZGFyeUVsZW1lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0VmFsICs9IGhDb2RlVmFsdWVzLmVsZW1lbnRzW2VsZUlkXS5uYW1lO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldFZhbCArICcgJyArIGhDb2RlVmFsdWVzLnN0YXRzW2lkXS5uYW1lO1xyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5nZXRTdGF0ID0gZnVuY3Rpb24oaWQsIHN0YXRzKSB7XHJcbiAgICB2YXIgbGVuID0gc3RhdHMubGVuZ3RoO1xyXG4gICAgZm9yKHZhciBpPTA7aTxsZW47KytpKSB7XHJcbiAgICAgIGlmKHN0YXRzW2ldLmlkID09IGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRzW2ldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge2lkOiBpZCwgbWF4OjB9O1xyXG4gIH07XHJcbiAgXHJcbiAgZnVuY3Rpb24gY2FsY1N0YXRQZXJjZW50KG5ld1ZhbCwgb3JpZ1ZhbCkge1xyXG4gICAgaWYobmV3VmFsICYmIG9yaWdWYWwpIHtcclxuICAgICAgcmV0dXJuIE1hdGgucm91bmQoMTAwMDAgKiAoMSAtIChvcmlnVmFsIC8gbmV3VmFsKSkpIC8gMTAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnNhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgIHNhdmVIZWxwZXIudXBkYXRlZFNhdmVkSXRlbXModm0uZ3JvdXBOYW1lLCB2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uaXRlbXMpO1xyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9idWlsZC8nICsgdm0uZ3JvdXBOYW1lKTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMudXBkYXRlUm93cygpO1xyXG4gIFxyXG59XSk7ICIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5nZWFyc2ltQnVpbGQnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGJ1aWxkTmFtZTogJz1idWlsZE5hbWUnLFxyXG4gICAgICBidWlsZDogJz1idWlsZCcsXHJcbiAgICAgIG9uQ2hhbmdlOiAnJm9uQ2hhbmdlJyxcclxuICAgICAgc2VydmVyOiAnPXNlcnZlcidcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiBidWxpZENvbnRyb2xsZXIsXHJcbiAgICBjb250cm9sbGVyQXM6ICdidWlsZEN0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvYnVpbGQuaHRtbCdcclxuICB9O1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGJ1bGlkQ29udHJvbGxlcigkdGltZW91dCwgc3RhdEhlbHBlciwgaXRlbUNhdGVnb3J5LCBzYXZlSGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnOyAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB2bS5zdGF0cyA9IHN0YXRIZWxwZXIuZ2V0QnVpbGRTdGF0cyh2bS5idWlsZCk7XHJcbiAgXHJcbiAgdmFyIHNlbGVjdGVkQ2F0ZWdvcnkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRJdGVtQ2F0ZWdvcnknKTtcclxuICB2bS5jYXRlZ29yeSA9IGl0ZW1DYXRlZ29yeS5ieU5hbWUoc2VsZWN0ZWRDYXRlZ29yeSk7XHJcbiAgaWYoIXZtLmNhdGVnb3J5IHx8IHZtLmNhdGVnb3J5LmhpZGVJbkJ1aWxkKSB7XHJcbiAgICBzZWxlY3RlZENhdGVnb3J5ID0gJ3RpdGxlcyc7XHJcbiAgICB2bS5jYXRlZ29yeSA9IGl0ZW1DYXRlZ29yeS5ieU5hbWUoJ3RpdGxlcycpO1xyXG4gIH1cclxuICBcclxuICB2bS5nZXRDYXRlZ29yeUl0ZW1zID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaXRlbXNCeUNhdCA9IGl0ZW1DYXRlZ29yeS5nZXRJdGVtc0J5Q2F0ZWdvcnkodm0uYnVpbGQuaXRlbXMpO1xyXG4gICAgaWYodm0uY2F0ZWdvcnkubmFtZSBpbiBpdGVtc0J5Q2F0KSB7XHJcbiAgICAgIHJldHVybiBpdGVtc0J5Q2F0W3ZtLmNhdGVnb3J5Lm5hbWVdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZtLmNoYW5nZUNhdGVnb3J5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS54c1ZpZXcgPSBudWxsO1xyXG4gICAgdm0ubW92ZUl0ZW0gPSBudWxsO1xyXG4gICAgdm0uY2F0ZWdvcnlDaGFuZ2luZyA9IHRydWU7XHJcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgdm0uY2F0ZWdvcnlDaGFuZ2luZyA9IGZhbHNlO1xyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLmdldENhdGVnb3JpZXMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBpdGVtQ2F0ZWdvcnkuY2F0ZWdvcmllcztcclxuICB9XHJcbiAgICBcclxuICB2bS5zZXRTZWxlY3RlZENhdGVnb3J5ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHZtLmNhdGVnb3J5ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZSh2YWx1ZSk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2VsZWN0ZWRJdGVtQ2F0ZWdvcnknLCB2YWx1ZSk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLmdldFNhdmVEYXRlID0gZnVuY3Rpb24oZ3JvdXApIHtcclxuICAgIGlmKHZtLmJ1aWxkLmxhc3RVcGRhdGUgPiAwKSB7XHJcbiAgICAgIHZhciBsYXN0VXBkYXRlID0gbmV3IERhdGUodm0uYnVpbGQubGFzdFVwZGF0ZSk7XHJcbiAgICAgIHJldHVybiBsYXN0VXBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB2bS5nZXRTYXZlVGltZSA9IGZ1bmN0aW9uKGdyb3VwKSB7XHJcbiAgICBpZih2bS5idWlsZC5sYXN0VXBkYXRlID4gMCkge1xyXG4gICAgICB2YXIgbGFzdFVwZGF0ZSA9IG5ldyBEYXRlKHZtLmJ1aWxkLmxhc3RVcGRhdGUpO1xyXG4gICAgICByZXR1cm4gbGFzdFVwZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdm0uYWxsb3dNb3JlSXRlbXMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAhdm0uY2F0ZWdvcnkubWF4Q2F0IHx8IHZtLmdldENhdGVnb3J5SXRlbXMoKS5sZW5ndGggPCB2bS5jYXRlZ29yeS5tYXhDYXQ7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLmdldEl0ZW1Db3VudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGl0ZW1Db3VudFRleHQgPSAnJztcclxuICAgIHZhciBhbGxJdGVtcyA9IHZtLmJ1aWxkLml0ZW1zO1xyXG4gICAgXHJcbiAgICBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdvZmZlbnNpdmUgZ2VtcycpIHtcclxuICAgICAgdmFyIG51bU9mZmVuc2l2ZVNsb3RzID0gMDtcclxuICAgICAgdmFyIG51bU9mZmVuc2l2ZUdlbXMgPSAwO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goYWxsSXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYoaXRlbS50eXBlTmFtZSA9PSB2bS5jYXRlZ29yeS5uYW1lKSB7XHJcbiAgICAgICAgICBudW1PZmZlbnNpdmVHZW1zKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXRlbS5vZmZlbnNpdmVHZW1TbG90cykge1xyXG4gICAgICAgICAgbnVtT2ZmZW5zaXZlU2xvdHMgKz0gaXRlbS5vZmZlbnNpdmVHZW1TbG90cztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgaXRlbUNvdW50VGV4dCA9IG51bU9mZmVuc2l2ZUdlbXMgKyAnIC8gJyArIG51bU9mZmVuc2l2ZVNsb3RzO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdpbmNyZWFzaW5nIGdlbXMnKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgdG90YWxJbmNyZWFzaW5nR2VtcyA9IDA7XHJcbiAgICAgIHZhciBudW1JbmNyZWFzaW5nU2xvdHMgPSAwO1xyXG4gICAgICB2YXIgbnVtSW5jcmVhc2luZ0dlbXMgPSB7fTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGFsbEl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmKGl0ZW0udHlwZU5hbWUgPT0gdm0uY2F0ZWdvcnkubmFtZSkge1xyXG4gICAgICAgICAgdmFyIGdlbVR5cGUgPSBpdGVtLnNwYXJrVHlwZUlkO1xyXG4gICAgICAgICAgaWYoIWdlbVR5cGUpIHtcclxuICAgICAgICAgICAgZ2VtVHlwZSA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKCEoZ2VtVHlwZSBpbiBudW1JbmNyZWFzaW5nR2VtcykpIHtcclxuICAgICAgICAgICAgbnVtSW5jcmVhc2luZ0dlbXNbZ2VtVHlwZV0gPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbnVtSW5jcmVhc2luZ0dlbXNbZ2VtVHlwZV0rKztcclxuICAgICAgICAgIHRvdGFsSW5jcmVhc2luZ0dlbXMrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpdGVtLmluY3JlYXNpbmdHZW1TbG90cykge1xyXG4gICAgICAgICAgbnVtSW5jcmVhc2luZ1Nsb3RzICs9IGl0ZW0uaW5jcmVhc2luZ0dlbVNsb3RzO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpdGVtQ291bnRUZXh0ID0gJydcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKG51bUluY3JlYXNpbmdHZW1zLCBmdW5jdGlvbihudW1iZXIsIGdlbVR5cGUpIHtcclxuICAgICAgICBpZihpdGVtQ291bnRUZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGl0ZW1Db3VudFRleHQgKz0gJysnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpdGVtQ291bnRUZXh0ICs9IG51bWJlcjtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpdGVtQ291bnRUZXh0ID0gdG90YWxJbmNyZWFzaW5nR2VtcyArICcgKCcgKyBpdGVtQ291bnRUZXh0ICsgJykgLyAnICsgbnVtSW5jcmVhc2luZ1Nsb3RzO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZhciBudW1JdGVtcyA9IDA7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChhbGxJdGVtcywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICBpZihpdGVtICYmIGl0ZW0udHlwZU5hbWUgPT0gdm0uY2F0ZWdvcnkubmFtZSkge1xyXG4gICAgICAgICAgbnVtSXRlbXMrKztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgaXRlbUNvdW50VGV4dCA9IG51bUl0ZW1zO1xyXG4gICAgICB2YXIgY2F0ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZSh2bS5jYXRlZ29yeS5uYW1lKTtcclxuICAgICAgaWYoY2F0ICYmICdudW1JdGVtVGV4dCcgaW4gY2F0KSB7XHJcbiAgICAgICAgaXRlbUNvdW50VGV4dCArPSAnIC8gJyArIGNhdC5udW1JdGVtVGV4dDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gaXRlbUNvdW50VGV4dDtcclxuICB9XHJcbiAgXHJcbiAgdm0ubmV3Q3VzdG9tID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbmV3Q3VzdG9tID0ge2lkOiAwLCB0eXBlTmFtZTonY3VzdG9tJywgbmFtZTogJ25ldyBjdXN0b20gaXRlbScsIHN0YXRzOiBbXX07XHJcbiAgICB2bS5idWlsZC5pdGVtcyA9IHZtLmJ1aWxkLml0ZW1zLmNvbmNhdChuZXdDdXN0b20pO1xyXG4gICAgc2F2ZUhlbHBlci51cGRhdGVkU2F2ZWRJdGVtcyh2bS5idWlsZE5hbWUsIHZtLmJ1aWxkLml0ZW1zKTtcclxuICAgIHZtLmhhbmRsZUNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB2bS5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLnN0YXRzID0gc3RhdEhlbHBlci5nZXRCdWlsZFN0YXRzKHZtLmJ1aWxkKTtcclxuICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgfVxyXG59IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignRGVsZXRlQnVpbGRDdHJsJyxcclxuXHJcblsnJGxvY2F0aW9uJywnJHJvdXRlUGFyYW1zJywnJHRpbWVvdXQnLCdzYXZlSGVscGVyJywnZG50RGF0YScsJ2pvYnMnLCdoQ29kZVZhbHVlcycsJ2l0ZW1Db2x1bW5zVG9Mb2FkJyxcclxuZnVuY3Rpb24oJGxvY2F0aW9uLCRyb3V0ZVBhcmFtcywkdGltZW91dCxzYXZlSGVscGVyLGRudERhdGEsam9icyxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHRoaXMubmV3R3JvdXAgPSB0cnVlO1xyXG4gIGlmKCduYW1lJyBpbiAkcm91dGVQYXJhbXMpIHtcclxuICAgICAgdGhpcy5uYW1lID0gJHJvdXRlUGFyYW1zLm5hbWU7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZGVsZXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBzYXZlSGVscGVyLmRlbGV0ZUJ1aWxkKHRoaXMubmFtZSk7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkcy8nKTtcclxuICB9XHJcbiAgICBcclxufV0pOyAiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdFZGl0QnVpbGRDdHJsJywgZWRpdEJ1aWxkQ3RybCk7XHJcblxyXG5mdW5jdGlvbiBlZGl0QnVpbGRDdHJsKCR3aW5kb3csJGxvY2F0aW9uLCRyb3V0ZVBhcmFtcywkdGltZW91dCxzYXZlSGVscGVyLGRudERhdGEsam9icyxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCxjaGFyYWN0ZXIscmVnaW9uKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0uc2F2ZWRJdGVtcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gIHZtLmdyb3VwID0ge307XHJcbiAgdm0ubmV3R3JvdXAgPSB0cnVlO1xyXG4gIGlmKCdidWlsZE5hbWUnIGluICRyb3V0ZVBhcmFtcykge1xyXG4gICAgICB2bS5ncm91cE5hbWUgPSAkcm91dGVQYXJhbXMuYnVpbGROYW1lO1xyXG4gICAgICBpZih2bS5ncm91cE5hbWUgaW4gdm0uc2F2ZWRJdGVtcykge1xyXG4gICAgICAgIHZtLmdyb3VwID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdO1xyXG4gICAgICAgIHZtLm5ld0dyb3VwID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB2bS5ncm91cE5hbWUgPSAnJztcclxuICB9XHJcbiAgdm0ub2xkR3JvdXBOYW1lID0gdm0uZ3JvdXBOYW1lO1xyXG4gIHZtLmhlcm9TdGF0cyA9IFtdO1xyXG4gIHZtLmVsZW1lbnRzID0gaENvZGVWYWx1ZXMuZWxlbWVudHM7XHJcbiAgdm0uZGFtYWdlVHlwZXMgPSBoQ29kZVZhbHVlcy5kYW1hZ2VUeXBlcztcclxuICBcclxuICB2bS5pbml0RGFtYWdlVHlwZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodm0uam9iKSB7XHJcbiAgICAgIGlmKHZtLmdyb3VwLmRhbWFnZVR5cGUpIHtcclxuICAgICAgICB2bS5kYW1hZ2VUeXBlID0gdm0uZ3JvdXAuZGFtYWdlVHlwZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHZtLm5ld0dyb3VwICYmICdEYW1hZ2VUeXBlJyBpbiB2bS5qb2IuZCkge1xyXG4gICAgICAgIGlmKHZtLmpvYi5kLkRhbWFnZVR5cGUpIHtcclxuICAgICAgICAgIHZtLmRhbWFnZVR5cGUgPSBoQ29kZVZhbHVlcy5kYW1hZ2VUeXBlc1syXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB2bS5kYW1hZ2VUeXBlID0gaENvZGVWYWx1ZXMuZGFtYWdlVHlwZXNbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHZtLmRhbWFnZVR5cGUgPSBoQ29kZVZhbHVlcy5kYW1hZ2VUeXBlc1swXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdm0uaW5pdERlZmF1bHRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGVmYXVsdEVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1swXTtcclxuICAgIHZhciBkZWZhdWx0U2Vjb25kYXJ5RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzBdO1xyXG5cclxuICAgIGlmKHZtLmpvYiAmJiB2bS5qb2IuZCkge1xyXG4gICAgICB2YXIgam9iTmFtZSA9IHZtLmpvYi5kLkVuZ2xpc2hOYW1lO1xyXG4gICAgICBpZihqb2JOYW1lID09ICdDUlVTQURFUycgfHwgam9iTmFtZSA9PSAnSU5RVUlTSVRPUicgfHwgam9iTmFtZSA9PSAnR1VBUkRJQU4nIHx8IGpvYk5hbWUgPT0gJ1NBSU5UJyB8fCBqb2JOYW1lID09ICdTSUxWRVJIVU5URVInIHx8IGpvYk5hbWUgPT0gJ1NUSU5HQlJFRVpFUicpIHtcclxuICAgICAgICBkZWZhdWx0RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzNdO1xyXG4gICAgICAgIGRlZmF1bHRTZWNvbmRhcnlFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbM107XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihqb2JOYW1lID09ICdSQVZFTicgfHwgam9iTmFtZSA9PSAnTUFKRVNUWScgfHwgam9iTmFtZSA9PSAnU09VTEVBVEVSJyB8fCBqb2JOYW1lID09ICdEQVJLU1VNTU9ORVInIHx8IGpvYk5hbWUgPT0gJ0FCWVNTV0FMS0VSJyB8fCBqb2JOYW1lID09ICdCTEFDS01BUkEnIHx8IGpvYk5hbWUgPT0gJ1BIWVNJQ0lBTicpIHtcclxuICAgICAgICBkZWZhdWx0RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzRdO1xyXG4gICAgICAgIGRlZmF1bHRTZWNvbmRhcnlFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbNF07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihqb2JOYW1lID09ICdTQUxFQU5BJyB8fCBqb2JOYW1lID09ICdSSVBQRVInIHx8IGpvYk5hbWUgPT0gJ0RBUktBVkVOR0VSJykge1xyXG4gICAgICAgIGRlZmF1bHRFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbMV07XHJcbiAgICAgICAgZGVmYXVsdFNlY29uZGFyeUVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1sxXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGpvYk5hbWUgPT0gJ0VMRVNUUkEnKSB7XHJcbiAgICAgICAgZGVmYXVsdEVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1syXTtcclxuICAgICAgICBkZWZhdWx0U2Vjb25kYXJ5RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzJdO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoam9iTmFtZSA9PSAnQURFUFQnKSB7XHJcbiAgICAgICAgZGVmYXVsdEVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1sxXTtcclxuICAgICAgICBkZWZhdWx0U2Vjb25kYXJ5RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzJdO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoam9iTmFtZSA9PSAnTElHSFRGVVJZJykge1xyXG4gICAgICAgIGRlZmF1bHRFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbM107XHJcbiAgICAgICAgZGVmYXVsdFNlY29uZGFyeUVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1s0XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKHZtLm5ld0dyb3VwKSB7XHJcbiAgICAgIHZtLmVsZW1lbnQgPSBkZWZhdWx0RWxlbWVudDtcclxuICAgICAgdm0uc2Vjb25kYXJ5RWxlbWVudCA9IGRlZmF1bHRTZWNvbmRhcnlFbGVtZW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZighdm0uZWxlbWVudCkge1xyXG4gICAgICB2bS5lbGVtZW50ID0gZGVmYXVsdEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoIXZtLnNlY29uZGFyeUVsZW1lbnQpIHtcclxuICAgICAgdm0uc2Vjb25kYXJ5RWxlbWVudCA9IGRlZmF1bHRFbGVtZW50O1xyXG4gICAgfVxyXG4gIH1cclxuICAgIFxyXG4gIGlmKHZtLmdyb3VwLmVsZW1lbnQpIHtcclxuICAgIHZtLmVsZW1lbnQgPSB2bS5ncm91cC5lbGVtZW50O1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHZtLmVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1swXTtcclxuICB9XHJcbiAgICBcclxuICBpZih2bS5ncm91cC5zZWNvbmRhcnlFbGVtZW50KSB7XHJcbiAgICB2bS5zZWNvbmRhcnlFbGVtZW50ID0gdm0uZ3JvdXAuc2Vjb25kYXJ5RWxlbWVudDtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB2bS5zZWNvbmRhcnlFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbMF07XHJcbiAgfVxyXG5cclxuICBpZighKCdjcml0UmVzaXN0JyBpbiB2bS5ncm91cCkpIHtcclxuICAgIHZtLmNyaXRSZXNpc3QgPSAyMDtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB2bS5jcml0UmVzaXN0ID0gdm0uZ3JvdXAuY3JpdFJlc2lzdDtcclxuICB9XHJcblxyXG4gIGlmKCEoJ2VsZVJlc2lzdCcgaW4gdm0uZ3JvdXApKSB7XHJcbiAgICB2bS5lbGVSZXNpc3QgPSAwO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHZtLmVsZVJlc2lzdCA9IHZtLmdyb3VwLmVsZVJlc2lzdDtcclxuICB9XHJcblxyXG4gIGlmKHZtLmdyb3VwLmVuZW15TGV2ZWwpIHtcclxuICAgIHZtLmVuZW15TGV2ZWwgPSB2bS5ncm91cC5lbmVteUxldmVsO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHZtLmVuZW15TGV2ZWwgPSA5MztcclxuICB9XHJcbiAgXHJcbiAgaWYodm0uZ3JvdXAucGxheWVyTGV2ZWwpIHtcclxuICAgIHZtLnBsYXllckxldmVsID0gdm0uZ3JvdXAucGxheWVyTGV2ZWw7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdm0ucGxheWVyTGV2ZWwgPSA5MztcclxuICB9XHJcbiAgXHJcbiAgaWYodm0uZ3JvdXAuaGVyb0xldmVsICYmIHZtLmdyb3VwLmhlcm9MZXZlbCA+IDApIHtcclxuICAgIHZtLmhlcm9MZXZlbCA9IHZtLmdyb3VwLmhlcm9MZXZlbDtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB2bS5oZXJvTGV2ZWwgPSAxO1xyXG4gIH1cclxuICBcclxuICB2bS5pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbmV3Sm9icyA9IGpvYnMuZ2V0RmluYWxKb2JzKCk7XHJcbiAgICBpZihuZXdKb2JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgJHRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCdqb2InIGluIHZtLmdyb3VwKSB7XHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobmV3Sm9icywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgICBpZih2YWx1ZS5pZCA9PSB2bS5ncm91cC5qb2IuaWQpIHtcclxuICAgICAgICAgICAgICB2bS5qb2IgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5pbml0RGFtYWdlVHlwZSgpO1xyXG4gICAgICAgIHZtLmluaXREZWZhdWx0RWxlbWVudCgpO1xyXG4gICAgICAgIHZtLnNldEhlcm9TdGF0cygpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdm0uc2V0Sm9iID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZtLmluaXREYW1hZ2VUeXBlKCk7XHJcbiAgICAgIHZtLmluaXREZWZhdWx0RWxlbWVudCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHJlZ2lvbi5pbml0KCk7XHJcbiAgY2hhcmFjdGVyLmluaXQoZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5pbml0KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgdm0uZ2V0U3RhdENhcCA9IGZ1bmN0aW9uKGNvbE5hbWUsIHVzZUxldmVsKSB7XHJcbiAgICByZXR1cm4gY2hhcmFjdGVyLmdldFN0YXRDYXBzKHVzZUxldmVsKVtjb2xOYW1lXTtcclxuICB9XHJcbiAgdm0uZ2V0Sm9iQ29udmVyc2lvbiA9IGZ1bmN0aW9uKGNvbE5hbWUpIHtcclxuICAgIHJldHVybiBjaGFyYWN0ZXIuZ2V0Q29udmVyc2lvbnModm0uam9iLmlkKVtjb2xOYW1lXTtcclxuICB9XHJcbiAgdm0uZ2V0Sm9iQmFzZVN0YXQgPSBmdW5jdGlvbihjb2xOYW1lKSB7XHJcbiAgICByZXR1cm4gY2hhcmFjdGVyLmdldEJhc2VTdGF0cyh2bS5wbGF5ZXJMZXZlbCwgdm0uam9iLmlkKVtjb2xOYW1lXTtcclxuICB9XHJcbiAgXHJcbiAgdm0uaW52YWxpZEdyb3VwTmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYoIXZtLmdyb3VwTmFtZSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYodm0uZ3JvdXBOYW1lIGluIHZtLnNhdmVkSXRlbXMpIHtcclxuICAgICAgaWYodm0ubmV3R3JvdXAgfHwgdm0uZ3JvdXBOYW1lICE9IHZtLm9sZEdyb3VwTmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgXHJcbiAgdm0ub2sgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBlbmVteVN0YXRDYXBzID0gY2hhcmFjdGVyLmdldFN0YXRDYXBzKHZtLmVuZW15TGV2ZWwpO1xyXG4gICAgdmFyIHBsYXllclN0YXRDYXBzID0gY2hhcmFjdGVyLmdldFN0YXRDYXBzKHZtLnBsYXllckxldmVsKTtcclxuICAgIHZhciBjb252ZXJzaW9ucyA9IGNoYXJhY3Rlci5nZXRDb252ZXJzaW9ucyh2bS5qb2IuaWQpO1xyXG4gICAgdmFyIGJhc2VTdGF0cyA9IGNoYXJhY3Rlci5nZXRCYXNlU3RhdHModm0ucGxheWVyTGV2ZWwsIHZtLmpvYi5pZCk7XHJcbiAgICB2YXIgaGVyb1N0YXRzID0gY2hhcmFjdGVyLmdldEhlcm9TdGF0cyh2bS5oZXJvTGV2ZWwpO1xyXG4gICAgXHJcbiAgICBpZih2bS5uZXdHcm91cCkge1xyXG4gICAgICB2bS5vbGRHcm91cE5hbWUgPSB2bS5ncm91cE5hbWU7XHJcbiAgICAgIHNhdmVIZWxwZXIuaW1wb3J0R3JvdXAodm0uZ3JvdXBOYW1lLCBbXSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNhdmVIZWxwZXIuc2F2ZUJ1aWxkKFxyXG4gICAgICB2bS5vbGRHcm91cE5hbWUsIFxyXG4gICAgICB2bS5ncm91cE5hbWUsXHJcbiAgICAgIHtcclxuICAgICAgZW5lbXlMZXZlbDogdm0uZW5lbXlMZXZlbCxcclxuICAgICAgcGxheWVyTGV2ZWw6IHZtLnBsYXllckxldmVsLFxyXG4gICAgICBoZXJvTGV2ZWw6IHZtLmhlcm9MZXZlbCxcclxuICAgICAgam9iOiB2bS5qb2IsXHJcbiAgICAgIGRhbWFnZVR5cGU6IHZtLmRhbWFnZVR5cGUsXHJcbiAgICAgIGVsZW1lbnQ6IHZtLmVsZW1lbnQsXHJcbiAgICAgIHNlY29uZGFyeUVsZW1lbnQ6IHZtLnNlY29uZGFyeUVsZW1lbnQsXHJcbiAgICAgIGNyaXRSZXNpc3Q6IHZtLmNyaXRSZXNpc3QsXHJcbiAgICAgIGVsZVJlc2lzdDogdm0uZWxlUmVzaXN0LFxyXG4gICAgICBlbmVteVN0YXRDYXBzOiBlbmVteVN0YXRDYXBzLCBcclxuICAgICAgcGxheWVyU3RhdENhcHM6IHBsYXllclN0YXRDYXBzLCBcclxuICAgICAgY29udmVyc2lvbnM6IGNvbnZlcnNpb25zLFxyXG4gICAgICBiYXNlU3RhdHM6IGJhc2VTdGF0cyxcclxuICAgICAgaGVyb1N0YXRzOiBoZXJvU3RhdHNcclxuICAgICAgfSk7XHJcbiAgICBcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvYnVpbGQvJyArIHZtLmdyb3VwTmFtZSk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLnNldEhlcm9TdGF0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdm0uaGVyb1N0YXRzID0gY2hhcmFjdGVyLmdldEhlcm9TdGF0cyh2bS5oZXJvTGV2ZWwpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dvdCAnICsgdm0uaGVyb1N0YXRzLmxlbmd0aCArICcgaGVybyBzdGF0cycpO1xyXG4gIH1cclxuICBcclxuICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdncm91cE5hbWVJbnB1dCcpO1xyXG4gICAgaWYoaW5wdXQpIHtcclxuICAgICAgaW5wdXQuZm9jdXMoKTtcclxuICAgICAgaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgOTk5OSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbn0pKCk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcigncXVpY2tBZGRDdHJsJyxcclxuXHJcblsnJHRpbWVvdXQnLCdzdGF0SGVscGVyJywnc2F2ZUhlbHBlcicsJ3F1aWNrQWRkJywnaXRlbUNhdGVnb3J5Jywnam9icycsJ2RudERhdGEnLCdleHBvcnRMaW5rSGVscGVyJyxcclxuZnVuY3Rpb24oJHRpbWVvdXQsc3RhdEhlbHBlcixzYXZlSGVscGVyLHF1aWNrQWRkLGl0ZW1DYXRlZ29yeSxqb2JzLGRudERhdGEsZXhwb3J0TGlua0hlbHBlcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHZtLnN0YXJ0ZWRGb3JDYXQgPSAnJztcclxuICB2bS5zdGVwTnVtYmVyID0gMDtcclxuICB2bS5kYXRhcyA9IFtdO1xyXG4gIHZtLm9wdGlvbnMgPSBbXTtcclxuICBcclxuICB0aGlzLnNldE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKHZtLmhhc1N0YXJ0ZWQoKSkge1xyXG4gICAgICB2bS5vcHRpb25zID0gcXVpY2tBZGQuZ2V0T3B0aW9ucyh2bS5jYXRlZ29yeSwgdm0uYnVpbGQsIHZtLmRhdGFzKTtcclxuICAgICAgaWYodm0ub3B0aW9ucy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIHZtLnNlbGVjdE9wdGlvbih2bS5vcHRpb25zWzBdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnNlbGVjdE9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICB2YXIgZGF0YSA9IHF1aWNrQWRkLmNyZWF0ZURhdGEodmFsdWUsIHZtLmNhdGVnb3J5LCB2bS5zdGVwTnVtYmVyKVxyXG4gICAgdm0uZGF0YXMucHVzaChkYXRhKTtcclxuICAgIHZtLnN0ZXBOdW1iZXIrKztcclxuICAgIGlmKCFxdWlja0FkZC5pc1ZhbGlkU3RlcE51bWJlcih2bS5jYXRlZ29yeSwgdm0uc3RlcE51bWJlcikpIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBuZXdJdGVtID0gcXVpY2tBZGQuZ2V0SXRlbSh2bS5kYXRhcyk7XHJcbiAgICAgIHZhciBkbnRGaWxlcyA9IGV4cG9ydExpbmtIZWxwZXIuZ2V0RG50RmlsZXMobmV3SXRlbSk7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChkbnRGaWxlcywgZnVuY3Rpb24oY29sdW1ucywgZmlsZU5hbWUpIHtcclxuICAgICAgICBkbnREYXRhLmluaXQoZmlsZU5hbWUsIGNvbHVtbnMsIGZ1bmN0aW9uKCkge30sIGZ1bmN0aW9uKCkgeyB2bS50cnlUb0FkZEl0ZW0oZG50RmlsZXMsIG5ld0l0ZW0pIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgdm0udHJ5VG9BZGRJdGVtKGRudEZpbGVzLCBuZXdJdGVtKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2bS5zZXRPcHRpb25zKCk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdzZXR1cCBuZXh0IHN0ZXAnKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy50cnlUb0FkZEl0ZW0gPSBmdW5jdGlvbihkbnRGaWxlcywgaXRlbSkge1xyXG4gICAgaWYoIWRudERhdGEuYW55TG9hZGluZygpKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYWxsTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGRudEZpbGVzLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgICAgICAgYWxsTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlmKGFsbExvYWRlZCkge1xyXG4gICAgICAgIGlmKHZtLmRhdGFzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHZtLmNhbmNlbCgpO1xyXG4gICAgICAgICAgdmFyIG5ld0l0ZW0gPSBleHBvcnRMaW5rSGVscGVyLnJlbG9hZEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICBuZXdJdGVtLmdlbVNsb3QgPSB2bS5nZW1TbG90O1xyXG4gICAgICAgICAgc2F2ZUhlbHBlci5zYXZlSXRlbSh2bS5idWlsZE5hbWUsIG5ld0l0ZW0pO1xyXG4gICAgICAgICAgdm0uYnVpbGQuaXRlbXMucHVzaChuZXdJdGVtKTtcclxuICAgICAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMucmVzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLnN0ZXBOdW1iZXIgPSAwO1xyXG4gICAgdm0uZGF0YXMgPSBbXTtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5zZXRPcHRpb25zKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5oYXNTdGFydGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdm0uc3RhcnRlZEZvckNhdCA9PSB2bS5jYXRlZ29yeS5uYW1lO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5zdGFydGVkRm9yQ2F0ID0gdm0uY2F0ZWdvcnkubmFtZTtcclxuICAgIFxyXG4gICAgam9icy5pbml0KGZ1bmN0aW9uKCkge30sIHZtLnJlc2V0KTtcclxuICAgIGl0ZW1DYXRlZ29yeS5pbml0KHZtLmNhdGVnb3J5Lm5hbWUsIHZtLnJlc2V0KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5oYXNPcHRpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gcXVpY2tBZGQuaGFzT3B0aW9ucyh2bS5jYXRlZ29yeSwgdm0uYnVpbGQsIFtdKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLnN0YXJ0ZWRGb3JDYXQgPSAnJztcclxuICAgIHZtLnJlc2V0KCk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuYmFjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodm0uc3RlcE51bWJlciA9PSAwKSB7XHJcbiAgICAgIHZtLmNhbmNlbCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGRvIHtcclxuICAgICAgICB2bS5zdGVwTnVtYmVyLS07XHJcbiAgICAgICAgdm0uZGF0YXMucG9wKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHRlc3RPcHRpb25zID0gcXVpY2tBZGQuZ2V0T3B0aW9ucyh2bS5jYXRlZ29yeSwgdm0uYnVpbGQsIHZtLmRhdGFzKTtcclxuICAgICAgfSB3aGlsZSh0ZXN0T3B0aW9ucy5sZW5ndGggPD0gMSAmJiB2bS5zdGVwTnVtYmVyID4gMCk7XHJcbiAgICAgIFxyXG4gICAgICB2bS5zZXRPcHRpb25zKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGRudERhdGEuaW5pdCgnZXhjaGFuZ2UubHpqc29uJywgbnVsbCwgZnVuY3Rpb24oKSB7fSwgdm0ucmVzZXQpO1xyXG4gIFxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltUXVpY2tBZGQnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGNhdGVnb3J5OiAnPWNhdGVnb3J5JyxcclxuICAgICAgYnVpbGQ6ICc9YnVpbGQnLFxyXG4gICAgICBidWlsZE5hbWU6ICc9YnVpbGROYW1lJyxcclxuICAgICAgZ2VtU2xvdDogJz1nZW1TbG90JyxcclxuICAgICAgb25DaGFuZ2U6ICcmb25DaGFuZ2UnLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdxdWlja0FkZEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAncXVpY2tBZGQnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvcXVpY2stYWRkLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignUmVsb2FkQnVpbGRDdHJsJyxcclxuWyckbG9jYXRpb24nLCckcm91dGVQYXJhbXMnLCckdGltZW91dCcsJ3NhdmVIZWxwZXInLCdkbnREYXRhJywnZG50UmVzZXQnLCdncm91cEhlbHBlcicsJ3RyYW5zbGF0aW9ucycscmVsb2FkQnVpbGRDdHJsXSk7XHJcblxyXG5mdW5jdGlvbiByZWxvYWRCdWlsZEN0cmwoJGxvY2F0aW9uLCRyb3V0ZVBhcmFtcywkdGltZW91dCxzYXZlSGVscGVyLGRudERhdGEsZG50UmVzZXQsZ3JvdXBIZWxwZXIsdHJhbnNsYXRpb25zKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgaWYoJ25hbWUnIGluICRyb3V0ZVBhcmFtcykge1xyXG4gICAgICB2bS5uYW1lID0gJHJvdXRlUGFyYW1zLm5hbWU7XHJcbiAgfVxyXG4gIFxyXG4gIHZhciBzYXZlZEl0ZW1zID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgaWYodm0ubmFtZSBpbiBzYXZlZEl0ZW1zKSB7XHJcbiAgICB2bS5idWlsZCA9IHNhdmVkSXRlbXNbdm0ubmFtZV07XHJcbiAgfVxyXG4gIFxyXG4gIHZtLnJlbG9hZGVkID0gZmFsc2U7XHJcbiAgdm0ucmVsb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBkbnRSZXNldCgpO1xyXG4gICAgdm0ucmVsb2FkZWQgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgdHJhbnNsYXRpb25zLmluaXQocHJvZ3Jlc3MsIHRyeUluaXQpO1xyXG5cclxuICAgIHZhciBmaWxlcyA9IGdyb3VwSGVscGVyLmdldERudEZpbGVzKHZtLmJ1aWxkKTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChmaWxlcywgZnVuY3Rpb24oY29sdW1ucywgZmlsZU5hbWUpIHtcclxuICAgICAgZG50RGF0YS5pbml0KGZpbGVOYW1lLCBjb2x1bW5zLCBwcm9ncmVzcywgdHJ5SW5pdCk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgdm0uZ29Ub0J1aWxkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkLycgKyB2bS5uYW1lKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gcHJvZ3Jlc3MoKSB7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cnlJbml0KCkge1xyXG4gICAgaWYodm0ucmVsb2FkZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgYWxsTG9hZGVkID0gdHJ1ZTtcclxuICAgIHZhciBmaWxlcyA9IGdyb3VwSGVscGVyLmdldERudEZpbGVzKHZtLmJ1aWxkKTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChmaWxlcywgZnVuY3Rpb24oY29sdW1ucywgZmlsZU5hbWUpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZU5hbWUpKSB7XHJcbiAgICAgICAgYWxsTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYoYWxsTG9hZGVkICYmIHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgIHZhciBuZXdJdGVtcyA9IGdyb3VwSGVscGVyLnJlbG9hZEdyb3VwKHZtLm5hbWUsIHZtLmJ1aWxkKTtcclxuICAgICAgc2F2ZUhlbHBlci51cGRhdGVkU2F2ZWRJdGVtcyh2bS5uYW1lLCBuZXdJdGVtcyk7XHJcbiAgICAgIHZtLmJ1aWxkLml0ZW1zID0gbmV3SXRlbXM7XHJcbiAgICAgIFxyXG4gICAgICB2bS5yZWxvYWRlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gICAgXHJcbn0iLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdWaWV3R3JvdXBDdHJsJywgXHJcbiAgWyckc2NvcGUnLCckd2luZG93JywncmVnaW9uJywnJGxvY2F0aW9uJywnJHJvdXRlUGFyYW1zJywnc2F2ZUhlbHBlcicsJ2RudERhdGEnLCckdGltZW91dCcsJ3RyYW5zbGF0aW9ucycsJ2RudFJlc2V0JywnZXhwb3J0TGlua0hlbHBlcicsJ2dyb3VwSGVscGVyJywnam9icycsJ2NoYXJhY3RlcicsJ3N0YXRIZWxwZXInLCdoQ29kZVZhbHVlcycsXHJcbiAgZnVuY3Rpb24oJHNjb3BlLCR3aW5kb3cscmVnaW9uLCRsb2NhdGlvbiwkcm91dGVQYXJhbXMsc2F2ZUhlbHBlcixkbnREYXRhLCR0aW1lb3V0LHRyYW5zbGF0aW9ucyxkbnRSZXNldCxleHBvcnRMaW5rSGVscGVyLGdyb3VwSGVscGVyLGpvYnMsY2hhcmFjdGVyLHN0YXRIZWxwZXIsaENvZGVWYWx1ZXMpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICBcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ3NhdmVkLWJhY2snO1xyXG4gICAgXHJcbiAgICByZWdpb24uc2V0TG9jYXRpb25CeU5hbWUoJHJvdXRlUGFyYW1zLnJlZ2lvbik7XHJcbiAgICBcclxuICAgICRzY29wZS5idWlsZE5hbWUgPSAnJztcclxuICAgICRzY29wZS5idWlsZCA9IHt9O1xyXG4gICAgXHJcblxyXG4gICAgaWYoJ2cnIGluICRyb3V0ZVBhcmFtcyAmJiAnaScgaW4gJHJvdXRlUGFyYW1zKSB7XHJcbiAgICAgICRzY29wZS5idWlsZE5hbWUgPSAkcm91dGVQYXJhbXMuZztcclxuICAgICAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCAnICsgJHJvdXRlUGFyYW1zLmc7XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuZW5lbXlMZXZlbCA9ICRyb3V0ZVBhcmFtcy5lO1xyXG4gICAgICAkc2NvcGUucGxheWVyTGV2ZWwgPSAkcm91dGVQYXJhbXMucDtcclxuICAgICAgJHNjb3BlLmhlcm9MZXZlbCA9ICRyb3V0ZVBhcmFtcy5oO1xyXG4gICAgICAkc2NvcGUuam9iID0geyBpZDogJHJvdXRlUGFyYW1zLmogfTtcclxuICAgICAgJHNjb3BlLmRhbWFnZVR5cGUgPSBoQ29kZVZhbHVlcy5kYW1hZ2VUeXBlc1skcm91dGVQYXJhbXMuZF07XHJcbiAgICAgICRzY29wZS5lbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbJHJvdXRlUGFyYW1zLnRdO1xyXG4gICAgICAkc2NvcGUuc2Vjb25kYXJ5RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWyRyb3V0ZVBhcmFtcy5zXTtcclxuICAgICAgICBcclxuICAgICAgdmFyIGl0ZW1zID0gW107XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaXRlbVN0cmluZyA9ICRyb3V0ZVBhcmFtcy5pO1xyXG4gICAgICBcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1TdHJpbmcuc3BsaXQoJywnKSwgZnVuY3Rpb24oaXRlbVN0ciwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgaXRlbSA9IGV4cG9ydExpbmtIZWxwZXIuZGVjb2RlSXRlbShpdGVtU3RyKTtcclxuICAgICAgICBcclxuICAgICAgICBpZihpdGVtLmlkID4gMCkge1xyXG4gICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJHNjb3BlLmJ1aWxkID0ge307XHJcbiAgICAgICRzY29wZS5zYXZlZEl0ZW1zID0ge307XHJcbiAgICAgICRzY29wZS5zYXZlZEl0ZW1zWyRzY29wZS5idWlsZE5hbWVdID0gJHNjb3BlLmJ1aWxkO1xyXG4gICAgICAkc2NvcGUuYnVpbGQuaXRlbXMgPSBpdGVtcztcclxuICAgICAgJHNjb3BlLmlzTG9hZGluZyA9IHRydWU7XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXBIZWxwZXIuZ2V0RG50RmlsZXMoJHNjb3BlLmJ1aWxkKSwgZnVuY3Rpb24oY29sdW1ucywgZmlsZU5hbWUpIHtcclxuICAgICAgICBkbnREYXRhLmluaXQoZmlsZU5hbWUsIGNvbHVtbnMsIHByb2dyZXNzLCB0cnlJbml0KTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICB0cmFuc2xhdGlvbnMuaW5pdChwcm9ncmVzcywgdHJ5SW5pdCk7XHJcbiAgICAgIGpvYnMuaW5pdChwcm9ncmVzcywgdHJ5SW5pdCk7XHJcbiAgICAgIGNoYXJhY3Rlci5pbml0KHRyeUluaXQpO1xyXG4gICAgICBcclxuICAgICAgJHRpbWVvdXQoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgJHNjb3BlLmFueUl0ZW1zID0gT2JqZWN0LmtleXMoJHNjb3BlLnNhdmVkSXRlbXMpLmxlbmd0aCA+IDA7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHRyeUluaXQoKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYWxsSW5pdCA9IHRydWU7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cEhlbHBlci5nZXREbnRGaWxlcygkc2NvcGUuYnVpbGQpLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgICAgICAgYWxsSW5pdCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpZighYWxsSW5pdCB8fCBkbnREYXRhLmFueUxvYWRpbmcoKSB8fCAhdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkgfHwgIWpvYnMuaXNMb2FkZWQoKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGdyb3VwTmFtZSA9ICRzY29wZS5idWlsZE5hbWU7XHJcbiAgICAgICAgdmFyIGdyb3VwID0gJHNjb3BlLmJ1aWxkO1xyXG4gICAgICAgIFxyXG4gICAgICAgICRzY29wZS5qb2IgPSBqb2JzLmdldEJ5SWQoJHNjb3BlLmpvYi5pZCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJHNjb3BlLmVuZW15U3RhdENhcHMgPSBjaGFyYWN0ZXIuZ2V0U3RhdENhcHMoJHNjb3BlLmVuZW15TGV2ZWwpO1xyXG4gICAgICAgICRzY29wZS5wbGF5ZXJTdGF0Q2FwcyA9IGNoYXJhY3Rlci5nZXRTdGF0Q2Fwcygkc2NvcGUucGxheWVyTGV2ZWwpO1xyXG4gICAgICAgIGlmKCRzY29wZS5qb2IpIHtcclxuICAgICAgICAgICRzY29wZS5jb252ZXJzaW9ucyA9IGNoYXJhY3Rlci5nZXRDb252ZXJzaW9ucygkc2NvcGUuam9iLmlkKTtcclxuICAgICAgICAgICRzY29wZS5iYXNlU3RhdHMgPSBjaGFyYWN0ZXIuZ2V0QmFzZVN0YXRzKCRzY29wZS5wbGF5ZXJMZXZlbCwgJHNjb3BlLmpvYi5pZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5oZXJvU3RhdHMgPSBjaGFyYWN0ZXIuZ2V0SGVyb1N0YXRzKCRzY29wZS5oZXJvTGV2ZWwpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBuZXdJdGVtcyA9IGdyb3VwSGVscGVyLnJlbG9hZEdyb3VwKGdyb3VwTmFtZSwgZ3JvdXApO1xyXG4gICAgICBcclxuICAgICAgICAkc2NvcGUuc2F2ZWRJdGVtcyA9IHt9O1xyXG4gICAgICAgICRzY29wZS5idWlsZCA9IHtcclxuICAgICAgICAgIGl0ZW1zOiBuZXdJdGVtcyxcclxuICAgICAgICAgIGxhc3RVcGRhdGU6IGdyb3VwLmxhc3RVcGRhdGUsXHJcblxyXG4gICAgICAgICAgZW5lbXlMZXZlbDogJHNjb3BlLmVuZW15TGV2ZWwsXHJcbiAgICAgICAgICBwbGF5ZXJMZXZlbDogJHNjb3BlLnBsYXllckxldmVsLFxyXG4gICAgICAgICAgaGVyb0xldmVsOiAkc2NvcGUuaGVyb0xldmVsLFxyXG4gICAgICAgICAgam9iOiAkc2NvcGUuam9iLFxyXG4gICAgICAgICAgZGFtYWdlVHlwZTogJHNjb3BlLmRhbWFnZVR5cGUsXHJcbiAgICAgICAgICBlbGVtZW50OiAkc2NvcGUuZWxlbWVudCxcclxuICAgICAgICAgIHNlY29uZGFyeUVsZW1lbnQ6ICRzY29wZS5zZWNvbmRhcnlFbGVtZW50LFxyXG4gICAgICAgICAgZW5lbXlTdGF0Q2FwczogJHNjb3BlLmVuZW15U3RhdENhcHMsXHJcbiAgICAgICAgICBwbGF5ZXJTdGF0Q2FwczogJHNjb3BlLnBsYXllclN0YXRDYXBzLFxyXG4gICAgICAgICAgY29udmVyc2lvbnM6ICRzY29wZS5jb252ZXJzaW9ucyxcclxuICAgICAgICAgIGJhc2VTdGF0czogJHNjb3BlLmJhc2VTdGF0cyxcclxuICAgICAgICAgIGhlcm9TdGF0czogJHNjb3BlLmhlcm9TdGF0cyxcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zYXZlZEl0ZW1zW2dyb3VwTmFtZV0gPSAkc2NvcGUuYnVpbGQ7XHJcbiAgICAgICAgJHNjb3BlLnN0YXRzID0gc3RhdEhlbHBlci5nZXRCdWlsZFN0YXRzKCRzY29wZS5idWlsZCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGxvbmdVcmwgPSBleHBvcnRMaW5rSGVscGVyLmNyZWF0ZUdyb3VwTGluaygkc2NvcGUuYnVpbGROYW1lLCAkc2NvcGUuYnVpbGQpO1xyXG4gICAgICAgICRzY29wZS5idWlsZC5zaG9ydFVybCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0obG9uZ1VybCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBwcm9ncmVzcygpIHtcclxuICAgIH1cclxuICAgIFxyXG4gICAgJHNjb3BlLmNvcHlHcm91cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgbmV3QnVpbGROYW1lID0gc2F2ZUhlbHBlci5pbXBvcnRHcm91cCgkc2NvcGUuYnVpbGROYW1lLCAkc2NvcGUuYnVpbGQuaXRlbXMpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnY29weWluZyBpbiBhcyAnICsgbmV3QnVpbGROYW1lKTtcclxuICAgICAgXHJcbiAgICAgIHNhdmVIZWxwZXIuc2F2ZUJ1aWxkKFxyXG4gICAgICAgIG5ld0J1aWxkTmFtZSwgXHJcbiAgICAgICAgbmV3QnVpbGROYW1lLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVuZW15TGV2ZWw6ICRzY29wZS5lbmVteUxldmVsLFxyXG4gICAgICAgICAgcGxheWVyTGV2ZWw6ICRzY29wZS5wbGF5ZXJMZXZlbCxcclxuICAgICAgICAgIGhlcm9MZXZlbDogJHNjb3BlLmhlcm9MZXZlbCxcclxuICAgICAgICAgIGpvYjogJHNjb3BlLmpvYixcclxuICAgICAgICAgIGRhbWFnZVR5cGU6ICRzY29wZS5kYW1hZ2VUeXBlLFxyXG4gICAgICAgICAgZWxlbWVudDogJHNjb3BlLmVsZW1lbnQsXHJcbiAgICAgICAgICBzZWNvbmRhcnlFbGVtZW50OiAkc2NvcGUuc2Vjb25kYXJ5RWxlbWVudCxcclxuICAgICAgICAgIGNyaXRSZXNpc3Q6ICRzY29wZS5jcml0UmVzaXN0LFxyXG4gICAgICAgICAgZWxlUmVzaXN0OiAkc2NvcGUuZWxlUmVzaXN0LFxyXG4gICAgICAgICAgZW5lbXlTdGF0Q2FwczogJHNjb3BlLmVuZW15U3RhdENhcHMsXHJcbiAgICAgICAgICBwbGF5ZXJTdGF0Q2FwczogJHNjb3BlLnBsYXllclN0YXRDYXBzLFxyXG4gICAgICAgICAgY29udmVyc2lvbnM6ICRzY29wZS5jb252ZXJzaW9ucyxcclxuICAgICAgICAgIGJhc2VTdGF0czogJHNjb3BlLmJhc2VTdGF0cyxcclxuICAgICAgICAgIGhlcm9TdGF0czogJHNjb3BlLmhlcm9TdGF0c1xyXG4gICAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgJGxvY2F0aW9uLnVybCgnL2J1aWxkLycgKyBuZXdCdWlsZE5hbWUpO1xyXG4gICAgfVxyXG4gIH1dXHJcbik7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5nZWFyc2ltR3JvdXBBc3NpZ25tZW50JywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBjb21wYWN0OiAnPWNvbXBhY3QnLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZSdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiBncm91cEFzc2lnbm1lbnQsXHJcbiAgICBjb250cm9sbGVyQXM6ICdlZGl0Q3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vZ3JvdXAtYXNzaWdubWVudC5odG1sJ1xyXG4gIH07XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gZ3JvdXBBc3NpZ25tZW50KGhDb2RlVmFsdWVzLHN0YXRIZWxwZXIsc2F2ZUhlbHBlcixpdGVtQ2F0ZWdvcnksJHNjb3BlLGV4cG9ydExpbmtIZWxwZXIsZG50RGF0YSkge1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgdGhpcy5zYXZlZEl0ZW1zID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgdGhpcy5ncm91cE5hbWVzID0gT2JqZWN0LmtleXModGhpcy5zYXZlZEl0ZW1zKTtcclxuICBpZighdGhpcy5ncm91cE5hbWUpIHtcclxuICAgIHRoaXMuZ3JvdXBOYW1lID0gc2F2ZUhlbHBlci5nZXRDdXJyZW50QnVpbGQoKTtcclxuICB9XHJcblxyXG4gIGlmKCEodGhpcy5ncm91cE5hbWUgaW4gdGhpcy5zYXZlZEl0ZW1zKSkge1xyXG4gICAgdGhpcy5ncm91cE5hbWUgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgaWYoIXRoaXMuZ3JvdXBOYW1lICYmIHRoaXMuc2F2ZWRJdGVtcykge1xyXG4gICAgZm9yKHZhciBzYXZlZEdyb3VwIGluIHRoaXMuc2F2ZWRJdGVtcykge1xyXG4gICAgICB0aGlzLmdyb3VwTmFtZSA9IHNhdmVkR3JvdXA7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYoIXRoaXMuZ3JvdXBOYW1lKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc3VtbWFyeVN0YXRJZHMgPSBbXTtcclxuICBmb3IodmFyIGlkIGluIGhDb2RlVmFsdWVzLnN0YXRzKSB7XHJcbiAgICBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uc3VtbWFyeURpc3BsYXkpIHtcclxuICAgICAgdGhpcy5zdW1tYXJ5U3RhdElkcy5wdXNoKGlkKTtcclxuICAgIH1cclxuICB9XHJcbiAgICBcclxuICB0aGlzLmNsZWFyR3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLmFkZEFmZmVjdEFtb3VudCA9IG51bGw7XHJcbiAgICB2bS5yZXBsYWNlQWZmZWN0QW1vdW50ID0ge307XHJcblxyXG4gICAgdm0uZ3JvdXBJdGVtcyA9IG51bGw7XHJcbiAgICB2bS5ncm91cENhbGNTdGF0cyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICB2bS50cnlUb1NldEl0ZW0gPSBmdW5jdGlvbihkbnRGaWxlcykge1xyXG4gICAgaWYoIWRudERhdGEuYW55TG9hZGluZygpKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYWxsTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGRudEZpbGVzLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgICAgICAgYWxsTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlmKGFsbExvYWRlZCkge1xyXG4gICAgICAgIHZtLml0ZW0gPSBleHBvcnRMaW5rSGVscGVyLnJlbG9hZEl0ZW0odm0uaXRlbSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBkbnRGaWxlcyA9IGV4cG9ydExpbmtIZWxwZXIuZ2V0RG50RmlsZXModm0uaXRlbSk7XHJcbiAgYW5ndWxhci5mb3JFYWNoKGRudEZpbGVzLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVOYW1lLCBjb2x1bW5zLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgdm0udHJ5VG9TZXRJdGVtKGRudEZpbGVzKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHZtLnRyeVRvU2V0SXRlbShkbnRGaWxlcyk7XHJcblxyXG4gICRzY29wZS4kd2F0Y2goJ2VkaXRDdHJsLml0ZW0nLCBmdW5jdGlvbigpIHtcclxuICAgIHZtLmNsZWFyR3JvdXAoKTtcclxuICB9KTtcclxuICBcclxuICB0aGlzLmdldEFkZEFmZmVjdEFtb3VudCA9IGZ1bmN0aW9uKHN0YXQpIHtcclxuICAgIHRoaXMuaW5pdEFkZEFmZmVjdHMoKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdhZGQgYWZmZWN0OiAnLCB0aGlzLmFkZEFmZmVjdEFtb3VudFtzdGF0XSwgdGhpcy5pdGVtKTtcclxuICAgIHJldHVybiB0aGlzLmFkZEFmZmVjdEFtb3VudFtzdGF0XTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuZ2V0UmVwbGFjZUFmZmVjdEFtb3VudCA9IGZ1bmN0aW9uKHN0YXRJZCwgaXRlbUluZGV4LCBpdGVtKSB7XHJcbiAgICB0aGlzLmluaXRSZXBsYWNlQWZmZWN0cyhpdGVtSW5kZXgsIGl0ZW0pO1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZUFmZmVjdEFtb3VudFtpdGVtSW5kZXhdW3N0YXRJZF07XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmdldEdyb3VwQ2FsY1N0YXRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuICAgIGlmKHRoaXMuZ3JvdXBDYWxjU3RhdHMgPT0gbnVsbCkge1xyXG4gICAgICBcclxuICAgICAgdmFyIGdyb3VwID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdO1xyXG4gICAgICBpZihncm91cCkge1xyXG4gICAgICAgIHRoaXMuZ3JvdXBDYWxjU3RhdHMgPSBzdGF0SGVscGVyLmdldENhbGN1bGF0ZWRTdGF0c0Zyb21JdGVtcyhncm91cCwgZ3JvdXAuaXRlbXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB0aGlzLmdyb3VwQ2FsY1N0YXRzO1xyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5nZXRCdWlsZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuaW5pdEFkZEFmZmVjdHMgPSBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgaWYodm0uYWRkQWZmZWN0QW1vdW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gY29uc29sZS5sb2coJ2luaXRpYWxpc2luZyBhZGQgYWZmZWN0cyAnKTtcclxuICAgIFxyXG4gICAgdmFyIG9yaWdTdGF0cyA9IHZtLmdldEdyb3VwQ2FsY1N0YXRzKCk7XHJcbiAgICB2YXIgZ3JvdXAgPSB2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV07XHJcbiAgICB2YXIgbmV3SXRlbXMgPSBbXTtcclxuICAgIGlmKGdyb3VwLml0ZW1zKSB7XHJcbiAgICAgIG5ld0l0ZW1zID0gZ3JvdXAuaXRlbXMuY29uY2F0KFt2bS5pdGVtXSk7XHJcbiAgICB9XHJcbiAgICB2YXIgbmV3U3RhdHMgPSBzdGF0SGVscGVyLmdldENhbGN1bGF0ZWRTdGF0c0Zyb21JdGVtcyhncm91cCwgbmV3SXRlbXMpO1xyXG4gICAgXHJcbiAgICB0aGlzLmFkZEFmZmVjdEFtb3VudCA9IHt9O1xyXG4gICAgZm9yKHZhciBpZCBpbiBoQ29kZVZhbHVlcy5zdGF0cykge1xyXG4gICAgICBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uc3VtbWFyeURpc3BsYXkpIHtcclxuICAgICAgICB2bS5hZGRBZmZlY3RBbW91bnRbaWRdID0gY2FsY1N0YXRQZXJjZW50KHZtLmdldFN0YXQoaWQsIG5ld1N0YXRzKS5tYXgsIHZtLmdldFN0YXQoaWQsIG9yaWdTdGF0cykubWF4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5pbml0UmVwbGFjZUFmZmVjdHMgPSBmdW5jdGlvbihpdGVtSW5kZXgsIGl0ZW0pIHtcclxuICAgIGlmKHZtLnJlcGxhY2VBZmZlY3RBbW91bnRbaXRlbUluZGV4XSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBncm91cCA9IHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXTtcclxuICAgIHZhciBuZXdJdGVtcyA9IFt2bS5pdGVtXTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cC5pdGVtcywgZnVuY3Rpb24oZ0l0ZW0gLCBpbmRleCkge1xyXG4gICAgICBpZihpdGVtICE9PSBnSXRlbSkge1xyXG4gICAgICAgIG5ld0l0ZW1zLnB1c2goZ0l0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgdmFyIG5ld1N0YXRzID0gc3RhdEhlbHBlci5nZXRDYWxjdWxhdGVkU3RhdHNGcm9tSXRlbXMoZ3JvdXAsIG5ld0l0ZW1zKTtcclxuICAgIHZhciBvcmlnU3RhdHMgPSB2bS5nZXRHcm91cENhbGNTdGF0cygpO1xyXG4gICAgXHJcbiAgICB0aGlzLnJlcGxhY2VBZmZlY3RBbW91bnRbaXRlbUluZGV4XSA9IHt9O1xyXG4gICAgZm9yKHZhciBpZCBpbiBoQ29kZVZhbHVlcy5zdGF0cykge1xyXG4gICAgICBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uc3VtbWFyeURpc3BsYXkpIHtcclxuICAgICAgICB2bS5yZXBsYWNlQWZmZWN0QW1vdW50W2l0ZW1JbmRleF1baWRdID0gY2FsY1N0YXRQZXJjZW50KHZtLmdldFN0YXQoaWQsIG5ld1N0YXRzKS5tYXgsIHZtLmdldFN0YXQoaWQsIG9yaWdTdGF0cykubWF4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgZnVuY3Rpb24gY2FsY1N0YXRQZXJjZW50KG5ld1ZhbCwgb3JpZ1ZhbCkge1xyXG4gICAgaWYobmV3VmFsICYmIG9yaWdWYWwpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ29yaWc6ICcgKyBvcmlnVmFsICsgJyxuZXc6ICcgKyBuZXdWYWwpO1xyXG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCgxMDAwMCAqICgxIC0gKG9yaWdWYWwgLyBuZXdWYWwpKSkgLyAxMDA7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0U3RhdCA9IGZ1bmN0aW9uKGlkLCBzdGF0cykge1xyXG4gICAgdmFyIGxlbiA9IHN0YXRzLmxlbmd0aDtcclxuICAgIGZvcih2YXIgaT0wO2k8bGVuOysraSkge1xyXG4gICAgICBpZihzdGF0c1tpXS5pZCA9PSBpZCkge1xyXG4gICAgICAgIHJldHVybiBzdGF0c1tpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtpZDogaWQsIG1heDowfTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuZ2V0U3RhdE5hbWUgPSBmdW5jdGlvbihpZCkge1xyXG4gICAgdmFyIHJldFZhbCA9ICcnO1xyXG4gICAgaWYoaENvZGVWYWx1ZXMuc3RhdHNbaWRdLmVsZW1lbnQgPT0gJ3ByaW1hcnknKSB7XHJcbiAgICAgIHZhciBlbGVJZCA9IDA7XHJcbiAgICAgIGlmKHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXS5lbGVtZW50KSB7XHJcbiAgICAgICAgZWxlSWQgPSB2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uZWxlbWVudC5pZDtcclxuICAgICAgfVxyXG4gICAgICByZXRWYWwgKz0gaENvZGVWYWx1ZXMuZWxlbWVudHNbZWxlSWRdLm5hbWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGhDb2RlVmFsdWVzLnN0YXRzW2lkXS5lbGVtZW50ID09ICdzZWNvbmRhcnknKSB7XHJcbiAgICAgIHZhciBlbGVJZCA9IDA7XHJcbiAgICAgIGlmKHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXS5zZWNvbmRhcnlFbGVtZW50KSB7XHJcbiAgICAgICAgZWxlSWQgPSB2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uc2Vjb25kYXJ5RWxlbWVudC5pZDtcclxuICAgICAgfVxyXG4gICAgICByZXRWYWwgKz0gaENvZGVWYWx1ZXMuZWxlbWVudHNbZWxlSWRdLm5hbWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0VmFsICsgJyAnICsgaENvZGVWYWx1ZXMuc3RhdHNbaWRdLm5hbWU7XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmdldEdyb3VwSXRlbXMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICB2YXIgaXRlbVNwbGl0O1xyXG4gICAgZnVuY3Rpb24gbnVtTWF0Y2hlcyhzdHIpIHtcclxuICAgICAgaWYoc3RyKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXMgPSAwO1xyXG4gICAgICAgIGZvcih2YXIgaT0wO2k8aXRlbVNwbGl0Lmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgIGlmKHN0ci5pbmRleE9mKGl0ZW1TcGxpdFtpXSkgPiAwKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZXMrKztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHZtLmdyb3VwSXRlbXMgPT0gbnVsbCAmJiB2bS5ncm91cE5hbWUgJiYgdm0uZ3JvdXBOYW1lIGluIHZtLnNhdmVkSXRlbXMgJiYgdm0uaXRlbSAmJiB2bS5pdGVtLnR5cGVOYW1lKSB7XHJcbiAgICAgIHZtLmdyb3VwSXRlbXMgPSBbXTtcclxuXHJcbiAgICAgIHZhciBleGlzdGluZztcclxuICAgICAgaWYodm0uaXRlbS5pdGVtU291cmNlID09ICdwbGF0ZScgfHwgdm0uaXRlbS5pdGVtU291cmNlID09ICd0bWFuJykge1xyXG4gICAgICAgIGV4aXN0aW5nID0gXy5maW5kKHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXS5pdGVtcywgZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0uc3BhcmtUeXBlSWQgPT0gdm0uaXRlbS5zcGFya1R5cGVJZCAmJiB2bS5pdGVtLml0ZW1Tb3VyY2UgPT0gaXRlbS5pdGVtU291cmNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgaWYoZXhpc3RpbmcpIHtcclxuICAgICAgICBpdGVtcy5wdXNoKGV4aXN0aW5nKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBfLmVhY2godm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLml0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICBpZihpdGVtLmV4Y2hhbmdlVHlwZSAmJiBpdGVtLml0ZW1Tb3VyY2UgIT0gJ2dlbScgJiYgaXRlbS5pdGVtU291cmNlICE9ICdwbGF0ZScgJiYgaXRlbS5pdGVtU291cmNlICE9ICd0bWFuJykge1xyXG4gICAgICAgICAgICBpZihpdGVtLmV4Y2hhbmdlVHlwZSA9PSB2bS5pdGVtLmV4Y2hhbmdlVHlwZSkge1xyXG4gICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbS50eXBlTmFtZSA9PSB2bS5pdGVtLnR5cGVOYW1lKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYodm0uaXRlbS5uYW1lKSB7XHJcbiAgICAgICAgICBpdGVtU3BsaXQgPSB2bS5pdGVtLm5hbWUuc3BsaXQoJyAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaXRlbXMuc29ydChmdW5jdGlvbihhLGIpIHtcclxuICAgICAgICAgIHJldHVybiBudW1NYXRjaGVzKGIubmFtZSktbnVtTWF0Y2hlcyhhLm5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYoaXRlbS5uYW1lID09IHZtLml0ZW0ubmFtZSkge1xyXG4gICAgICAgICAgdm0uZ3JvdXBJdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYoaXRlbS5uYW1lICE9IHZtLml0ZW0ubmFtZSkge1xyXG4gICAgICAgICAgdm0uZ3JvdXBJdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm0uZ3JvdXBJdGVtcztcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuaGFzTWF4RXhjaGFuZ2FibGUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBjYXQgPSBpdGVtQ2F0ZWdvcnkuYnlOYW1lKHRoaXMuaXRlbS50eXBlTmFtZSk7XHJcbiAgICB2YXIgaXRlbXMgPSB0aGlzLmdldEdyb3VwSXRlbXMoKTtcclxuXHJcbiAgICBpZih2bS5pdGVtLml0ZW1Tb3VyY2UgPT0gJ3BsYXRlJyB8fCB2bS5pdGVtLml0ZW1Tb3VyY2UgPT0gJ3RtYW4nKSB7XHJcbiAgICAgIGlmKF8uZmluZChpdGVtcywgZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLnNwYXJrVHlwZUlkID09IHZtLml0ZW0uc3BhcmtUeXBlSWQ7XHJcbiAgICAgIH0pKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoY2F0ICYmIGNhdC5tYXhDYXQpIHtcclxuICAgICAgaWYoaXRlbXMubGVuZ3RoID49IGNhdC5tYXhDYXQpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZihjYXQgJiYgY2F0Lm1heEV4Y2hhbmdlKSB7XHJcbiAgICAgIGlmKGl0ZW1zLmxlbmd0aCA+PSBjYXQubWF4RXhjaGFuZ2UpIHtcclxuICAgICAgICBmb3IodmFyIGk9MDtpPGl0ZW1zLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgIGlmKCFpdGVtc1tpXS5leGNoYW5nZVR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbWF4ZXhjaGFuZ2UgcmVhY2hlZCAnICsgaXRlbXMubGVuZ3RoICsgJz49JyArIGNhdC5tYXhFeGNoYW5nZSArICcgZm9yICcgKyBjYXQubmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMubmV4dEdyb3VwID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuICAgIHZhciB1cHRvSXRlbSA9IGZhbHNlO1xyXG4gICAgdmFyIG5leHRHcm91cCA9IG51bGw7XHJcbiAgICBhbmd1bGFyLmZvckVhY2godm0uZ3JvdXBOYW1lcywgZnVuY3Rpb24oZ3JvdXBOYW1lLCBpbmRleCkge1xyXG4gICAgICBpZih1cHRvSXRlbSkge1xyXG4gICAgICAgIGlmKG5leHRHcm91cCA9PSBudWxsKSB7XHJcbiAgICAgICAgICBuZXh0R3JvdXAgPSBncm91cE5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGdyb3VwTmFtZSA9PSB2bS5ncm91cE5hbWUpIHtcclxuICAgICAgICB1cHRvSXRlbSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpZihuZXh0R3JvdXAgPT0gbnVsbCkge1xyXG4gICAgICBuZXh0R3JvdXAgPSB2bS5ncm91cE5hbWVzWzBdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5ncm91cE5hbWUgPSBuZXh0R3JvdXA7XHJcbiAgICBzYXZlR3JvdXAoKTtcclxuICAgIHZtLmNsZWFyR3JvdXAoKTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMucHJldkdyb3VwID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuICAgIHZhciBmb3VuZEdyb3VwID0gZmFsc2U7XHJcbiAgICB2YXIgcHJldkdyb3VwID0gbnVsbDtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5ncm91cE5hbWVzLCBmdW5jdGlvbihncm91cE5hbWUsIGluZGV4KSB7XHJcbiAgICAgIGlmKGdyb3VwTmFtZSA9PSB2bS5ncm91cE5hbWUpIHtcclxuICAgICAgICBmb3VuZEdyb3VwID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoIWZvdW5kR3JvdXApIHtcclxuICAgICAgICBwcmV2R3JvdXAgPSBncm91cE5hbWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpZihwcmV2R3JvdXAgPT0gbnVsbCkge1xyXG4gICAgICBwcmV2R3JvdXAgPSB2bS5ncm91cE5hbWVzW3ZtLmdyb3VwTmFtZXMubGVuZ3RoLTFdO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5ncm91cE5hbWUgPSBwcmV2R3JvdXA7XHJcbiAgICBzYXZlR3JvdXAoKTtcclxuICAgIHZtLmNsZWFyR3JvdXAoKTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuYWRkVG9Hcm91cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgc2F2ZUhlbHBlci5zYXZlSXRlbSh2bS5ncm91cE5hbWUsIHZtLml0ZW0pO1xyXG4gICAgdGhpcy5zYXZlZEl0ZW1zID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICB2bS5jbGVhckdyb3VwKCk7XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5yZXBsYWNlID0gZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgaXRlbS5yZXBsYWNlSXRlbSA9IHRydWU7XHJcbiAgICB2YXIgbmV3SXRlbUxpc3QgPSBbXTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uaXRlbXMsIGZ1bmN0aW9uKGdJdGVtLCBpbmRleCkge1xyXG4gICAgICBpZihnSXRlbS5yZXBsYWNlSXRlbSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdmb3VuZCByZXBsYWNlIGl0ZW0nKTtcclxuICAgICAgICBuZXdJdGVtTGlzdC5wdXNoKHZtLml0ZW0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIG5ld0l0ZW1MaXN0LnB1c2goZ0l0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgc2F2ZUhlbHBlci51cGRhdGVkU2F2ZWRJdGVtcyh2bS5ncm91cE5hbWUsIG5ld0l0ZW1MaXN0KTtcclxuICAgIHRoaXMuc2F2ZWRJdGVtcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgdm0uY2xlYXJHcm91cCgpO1xyXG4gICAgdm0ub25DaGFuZ2UoKTtcclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIHNhdmVHcm91cCgpIHtcclxuICAgIHNhdmVIZWxwZXIuc2F2ZUJ1aWxkU2VsZWN0aW9uKHZtLmdyb3VwTmFtZSwgdm0uc2F2ZWRJdGVtcyk7XHJcbiAgfVxyXG4gIFxyXG59O1xyXG5cclxufSkoKTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdEN1c3RvbUN0cmwnLFxyXG5cclxuWydoQ29kZVZhbHVlcycsJyRzY29wZScsXHJcbmZ1bmN0aW9uKGhDb2RlVmFsdWVzLCRzY29wZSkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIGlmKHRoaXMuaXRlbS5pdGVtU291cmNlICE9ICdjdXN0b20nICYmIHRoaXMuaXRlbS50eXBlTmFtZSAhPSAnY3VzdG9tJykge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICB0aGlzLnN0YXRNYXAgPSB7fTtcclxuICBcclxuICAvLyBjb25zb2xlLmxvZyh2bS5pdGVtLnN0YXRzKTtcclxuICBfLmZvckVhY2godm0uaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dvdCBzdGF0Jywgc3RhdC5pZCk7XHJcbiAgICB2bS5zdGF0TWFwW3N0YXQuaWRdID0gc3RhdC5tYXg7XHJcbiAgfSk7XHJcbiAgXHJcbiAgZm9yKHZhciBzdGF0SWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgICRzY29wZS4kd2F0Y2goJ2VkaXRDdHJsLnN0YXRNYXBbJyArIHN0YXRJZCArICddJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7IFxyXG5cclxuICAgICAgaWYobmV3VmFsdWUgIT0gb2xkVmFsdWUpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzdGF0SWQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd3YXRjaCBnb3Qgc3RhdCB2YWx1ZScsIG5ld1ZhbHVlKTtcclxuXHJcbiAgICAgICAgdmFyIGFueUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBuZXdTdGF0cyA9IFtdO1xyXG4gICAgICAgIGZvcih2YXIgc3RhdElkIGluIHZtLnN0YXRNYXApIHtcclxuXHJcbiAgICAgICAgICBpZighdm0uc3RhdE1hcFtzdGF0SWRdIHx8ICFOdW1iZXIodm0uc3RhdE1hcFtzdGF0SWRdKSkge1xyXG4gICAgICAgICAgICBfLmVhY2godm0uaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCkgeyBcclxuICAgICAgICAgICAgICBpZihzdGF0LmlkID09IHN0YXRJZCkge1xyXG4gICAgICAgICAgICAgICAgYW55Q2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1N0YXRzLnB1c2goe1xyXG4gICAgICAgICAgICAgIGlkOiBOdW1iZXIoc3RhdElkKSxcclxuICAgICAgICAgICAgICBtYXg6IE51bWJlcih2bS5zdGF0TWFwW3N0YXRJZF0pXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIF8uZWFjaCh2bS5pdGVtLnN0YXRzLCBmdW5jdGlvbihzdGF0KSB7XHJcbiAgICAgICAgICAgICAgaWYoc3RhdC5pZCA9PSBzdGF0SWQpIHtcclxuICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjb21wYXJpbmcnLCBzdGF0Lm1heCwgdm0uc3RhdE1hcFtzdGF0SWRdKTtcclxuICAgICAgICAgICAgICAgIGlmKCEoc3RhdElkIGluIHZtLnN0YXRNYXApIHx8IHN0YXQubWF4ICE9IHZtLnN0YXRNYXBbc3RhdElkXSkge1xyXG4gICAgICAgICAgICAgICAgICBhbnlDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYoIWZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgYW55Q2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoYW55Q2hhbmdlKSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnR09UIENIQU5HRVMhJywgbmV3U3RhdHMpO1xyXG4gICAgICAgICAgdm0uaXRlbS5zdGF0cyA9IG5ld1N0YXRzO1xyXG4gICAgICAgICAgdm0ub25DaGFuZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1FZGl0Q3VzdG9tJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0Q3VzdG9tQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdlZGl0Q3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS1lZGl0LWN1c3RvbS5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2l0ZW1FZGl0RW5jaGFudG1lbnRDdHJsJyxcclxuXHJcbmZ1bmN0aW9uKGRudERhdGEsaENvZGVWYWx1ZXMsaXRlbXMsJHRpbWVvdXQsdHJhbnNsYXRpb25zLGl0ZW1Db2x1bW5zVG9Mb2FkLGl0ZW1GYWN0b3J5KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgaWYoIXZtLml0ZW0gfHwgIXZtLml0ZW0uZW5jaGFudG1lbnRJZCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBpZignaXRlbVNvdXJjZScgaW4gdGhpcy5pdGVtKSB7XHJcbiAgICB2bS5pdGVtVHlwZSA9IGl0ZW1zW3ZtLml0ZW0uaXRlbVNvdXJjZV07XHJcbiAgfVxyXG4gIFxyXG4gIGlmKCF2bS5pdGVtVHlwZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZighKCdlbmNoYW50RG50JyBpbiB2bS5pdGVtVHlwZSkgJiYgISgncGV0TGV2ZWxEbnQnIGluIHZtLml0ZW1UeXBlKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBpZih2bS5pdGVtVHlwZS5lbmNoYW50RG50KSB7XHJcbiAgICBkbnREYXRhLmluaXQodm0uaXRlbVR5cGUuZW5jaGFudERudCwgaXRlbUNvbHVtbnNUb0xvYWQuZW5jaGFudERudCwgbnVsbCwgdm0uZ2V0RW5jaGFudG1lbnRzKTtcclxuICB9XHJcbiAgXHJcbiAgaWYodm0uaXRlbVR5cGUucGV0TGV2ZWxEbnQpIHtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5wZXREbnQsIGl0ZW1Db2x1bW5zVG9Mb2FkLnBldERudCwgbnVsbCwgdm0uZ2V0RW5jaGFudG1lbnRzKTtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5wZXRMZXZlbERudCwgaXRlbUNvbHVtbnNUb0xvYWQucGV0TGV2ZWxEbnQsIG51bGwsIHZtLmdldEVuY2hhbnRtZW50cyk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLmVuY2hhbnRtZW50cyA9IG51bGw7XHJcbiAgdm0uZW5jaGFudG1lbnQgPSBudWxsO1xyXG4gIHZtLmVuY2hhbnRtZW50QWZ0ZXIgPSBudWxsO1xyXG4gIHZtLmVuY2hhbnRtZW50Q29zdCA9ICcnO1xyXG4gIHZtLmVuaGFuY2VtZW50T3B0aW9ucyA9IFtdO1xyXG4gIGlmKHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cyA9PSBudWxsKSB7XHJcbiAgICB2bS5pdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBbXTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5zZXRFbmNoYW50bWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdm0uaXRlbS5lbmNoYW50bWVudFN0YXRzID0gW107XHJcblxyXG4gICAgaWYodm0uZW5jaGFudG1lbnRzICYmIHZtLmVuY2hhbnRtZW50cy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICBpZih0eXBlb2Ygdm0uaXRlbS5lbmNoYW50bWVudE51bSAhPSAnbnVtYmVyJykge1xyXG4gICAgICAgIHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPSAwO1xyXG4gICAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGZvcih2YXIgaT0wO2k8dm0uZW5jaGFudG1lbnRzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBpZih2bS5pdGVtLmVuY2hhbnRtZW50TnVtID09IGdldEVuY2hhbnRMZXZlbChpKSkge1xyXG4gICAgICAgICAgdm0uZW5jaGFudG1lbnQgPSB2bS5lbmNoYW50bWVudHNbaV07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cyA9IGhDb2RlVmFsdWVzLmdldFN0YXRzKHZtLmVuY2hhbnRtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih2bS5pdGVtLmVuY2hhbnRtZW50TnVtICsgMSA9PSBnZXRFbmNoYW50TGV2ZWwoaSkpIHtcclxuICAgICAgICAgIHZtLmVuY2hhbnRtZW50QWZ0ZXIgPSB2bS5lbmNoYW50bWVudHNbaV07XHJcbiAgICAgICAgICBpZih2bS5lbmNoYW50bWVudEFmdGVyLk5lZWRDb2luIDwgMTAwMDApIHtcclxuICAgICAgICAgICAgdm0uZW5jaGFudG1lbnRDb3N0ID0gTWF0aC5yb3VuZCh2bS5lbmNoYW50bWVudEFmdGVyLk5lZWRDb2luIC8gMTAwMCkvMTAgKyAnZyc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdm0uZW5jaGFudG1lbnRDb3N0ID0gTWF0aC5yb3VuZCh2bS5lbmNoYW50bWVudEFmdGVyLk5lZWRDb2luIC8gMTAwMDApICsgJ2cnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRFbmNoYW50TGV2ZWwobnVtKSB7XHJcbiAgICBpZigncGV0TGV2ZWxEbnQnIGluIHZtLml0ZW1UeXBlKSB7XHJcbiAgICAgIHJldHVybiB2bS5lbmNoYW50bWVudHNbbnVtXS5QZXRMZXZlbDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdm0uZW5jaGFudG1lbnRzW251bV0uRW5jaGFudExldmVsO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnNldFBldExldmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5pdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBbXTtcclxuXHJcbiAgICBpZih2bS5lbmNoYW50bWVudHMgJiYgdm0uZW5jaGFudG1lbnRzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgIGlmKHR5cGVvZiB2bS5pdGVtLmVuY2hhbnRtZW50TnVtICE9ICdudW1iZXInKSB7XHJcbiAgICAgICAgdm0uaXRlbS5lbmNoYW50bWVudE51bSA9IDY7XHJcbiAgICAgICAgdm0ub25DaGFuZ2UoKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZm9yKHZhciBpPTA7aTx2bS5lbmNoYW50bWVudHMubGVuZ3RoOysraSkge1xyXG4gICAgICAgIGlmKHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPT0gdm0uZW5jaGFudG1lbnRzW2ldLlBldExldmVsKSB7XHJcbiAgICAgICAgICB2bS5lbmNoYW50bWVudCA9IHZtLmVuY2hhbnRtZW50c1tpXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdm0uaXRlbS5lbmNoYW50bWVudFN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHModm0uZW5jaGFudG1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmlzTWF4RW5jaGFudExldmVsID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgaWYodm0uZW5jaGFudG1lbnRzICE9IG51bGwgJiZcclxuICAgICAgdm0uZW5jaGFudG1lbnRzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgdHlwZW9mIHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPT0gJ251bWJlcicpIHtcclxuXHJcbiAgICAgIGZvcih2YXIgaT0wO2k8dm0uZW5jaGFudG1lbnRzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBpZih2bS5pdGVtLmVuY2hhbnRtZW50TnVtICsgMSA9PSBnZXRFbmNoYW50TGV2ZWwoaSkpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnNldEVuY2hhbnRtZW50TnVtID0gZnVuY3Rpb24oZW5oYW5jZW1lbnRPcHRpb24pIHtcclxuICAgIHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPSBlbmhhbmNlbWVudE9wdGlvbjtcclxuICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucyA9IFtdO1xyXG4gICAgaWYoJ3BldExldmVsRG50JyBpbiB2bS5pdGVtVHlwZSkge1xyXG4gICAgICB2bS5zZXRQZXRMZXZlbCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZtLnNldEVuY2hhbnRtZW50KCk7XHJcbiAgICB9XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLm5leHRFbmNoYW50bWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yKHZhciBpPXZtLml0ZW0uZW5jaGFudG1lbnROdW07aT09MHx8dm0uZW5jaGFudG1lbnRzW2ktMV07KytpKSB7XHJcbiAgICAgIGlmKGkgPT0gMCkge1xyXG4gICAgICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucy5wdXNoKHtudW1iZXI6IDB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5lbmhhbmNlbWVudE9wdGlvbnMucHVzaCh2bS5nZXRPcHRpb24oaS0xKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5wcmV2RW5jaGFudG1lbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucyA9IFtdO1xyXG4gICAgZm9yKHZhciBpPXZtLml0ZW0uZW5jaGFudG1lbnROdW07aT4wOy0taSkge1xyXG4gICAgICB2bS5lbmhhbmNlbWVudE9wdGlvbnMucHVzaCh2bS5nZXRPcHRpb24oaS0xKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucy5wdXNoKHtudW1iZXI6IDB9KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRPcHRpb24gPSBmdW5jdGlvbihlbmNoYW50bWVudE51bSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbnVtYmVyOiBnZXRFbmNoYW50TGV2ZWwoZW5jaGFudG1lbnROdW0pLFxyXG4gICAgICBzdGF0czogaENvZGVWYWx1ZXMuZ2V0U3RhdHModm0uZW5jaGFudG1lbnRzW2VuY2hhbnRtZW50TnVtXSlcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0RW5jaGFudG1lbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZighdm0uZW5jaGFudG1lbnRzICYmIHZtLml0ZW0gJiYgdm0uaXRlbS5lbmNoYW50bWVudElkKSB7XHJcbiAgICAgIGlmKHZtLml0ZW1UeXBlLmVuY2hhbnREbnQgJiYgZG50RGF0YS5pc0xvYWRlZCh2bS5pdGVtVHlwZS5lbmNoYW50RG50KSkge1xyXG4gICAgICAgIHZtLmVuY2hhbnRtZW50cyA9IGRudERhdGEuZmluZCh2bS5pdGVtVHlwZS5lbmNoYW50RG50LCAnRW5jaGFudElEJywgdm0uaXRlbS5lbmNoYW50bWVudElkKTtcclxuICAgICAgICB2bS5zZXRFbmNoYW50bWVudCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHZtLml0ZW1UeXBlLnBldExldmVsRG50ICYmIGRudERhdGEuaXNMb2FkZWQodm0uaXRlbVR5cGUucGV0TGV2ZWxEbnQpKSB7XHJcbiAgICAgICAgdm0uZW5jaGFudG1lbnRzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBldExldmVsRG50LCAnUGV0TGV2ZWxUeXBlSUQnLCB2bS5pdGVtLmVuY2hhbnRtZW50SWQpO1xyXG4gICAgICAgIHZtLnNldFBldExldmVsKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHZtLmVuY2hhbnRtZW50cztcclxuICB9XHJcbiAgXHJcbiAgdmFyIGZpbGVOYW1lID0gJ2FsbC1pdGVtcy5sempzb24nO1xyXG4gIFxyXG4gIHRoaXMuc2hvd01hdGVyaWFscyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVOYW1lLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoIXZtLmVuY2hhbnRtZW50QWZ0ZXIpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdm0ubWF0ZXJpYWxzID0gW107XHJcbiAgICAgICAgZm9yKHZhciBpPTE7aTw9NTsrK2kpIHtcclxuICAgICAgICAgIHZhciBpdGVtSWQgPSB2bS5lbmNoYW50bWVudEFmdGVyWydOZWVkSXRlbUlEJyArIGldO1xyXG4gICAgICAgICAgdmFyIGl0ZW1Db3VudCA9IHZtLmVuY2hhbnRtZW50QWZ0ZXJbJ05lZWRJdGVtQ291bnQnICsgaV07XHJcbiAgICAgICAgICBpZihpdGVtSWQgPiAwICYmIGl0ZW1Db3VudCA+IDApIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ2lkJywgaXRlbUlkKTtcclxuICAgICAgICAgICAgaWYoaXRlbXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICB2bS5tYXRlcmlhbHMucHVzaCh7bnVtOiBpdGVtQ291bnQsIG5hbWU6ICd1bmtub3duICgnICsgaXRlbUlkICsgJyknfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1swXTsgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGlmKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHtcclxuICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW0pLFxyXG4gICAgICAgICAgICAgICAgICBudW06IGl0ZW1Db3VudCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2bS5tYXRlcmlhbHMucHVzaChtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBpZihkbnREYXRhLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgdGhpcy5zaG93TWF0ZXJpYWxzKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXBvcnRQcm9ncmVzcyhtc2cpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdwcm9ncmVzczogJyArIG1zZyk7XHJcbiAgfVxyXG59KVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdEVuY2hhbnRtZW50JywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0RW5jaGFudG1lbnRDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtZW5jaGFudG1lbnQuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdFBvdGVudGlhbEN0cmwnLFxyXG5cclxuWydkbnREYXRhJywnaXRlbXMnLCdoQ29kZVZhbHVlcycsJ2l0ZW1Db2x1bW5zVG9Mb2FkJyxcclxuZnVuY3Rpb24oZG50RGF0YSxpdGVtcyxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHRoaXMucG90ZW50aWFscyA9IG51bGw7XHJcbiAgdGhpcy5wb3RlbnRpYWwgPSBudWxsO1xyXG4gIHRoaXMuY2hhbmdpbmdQb3RlbnRpYWxzID0gZmFsc2U7XHJcbiAgdGhpcy5wb3RlbnRpYWxTdGF0cyA9IHt9O1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgXHJcbiAgaWYoJ2l0ZW1Tb3VyY2UnIGluIHRoaXMuaXRlbSkge1xyXG4gICAgdGhpcy5pdGVtVHlwZSA9IGl0ZW1zW3RoaXMuaXRlbS5pdGVtU291cmNlXTtcclxuICB9XHJcbiAgXHJcbiAgaWYoIXRoaXMuaXRlbVR5cGUgfHwgIXRoaXMuaXRlbS5waWQgfHwgISgncG90ZW50aWFsRG50JyBpbiB0aGlzLml0ZW1UeXBlKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBpZih2bS5pdGVtVHlwZS5wb3RlbnRpYWxEbnQpIHtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5wb3RlbnRpYWxEbnQsIGl0ZW1Db2x1bW5zVG9Mb2FkLnBvdGVudGlhbERudCwgbnVsbCwgdm0uZ2V0UG90ZW50aWFscyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0UG90ZW50aWFscyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYoIXZtLnBvdGVudGlhbHMpIHtcclxuICAgICAgaWYodm0uaXRlbSAmJiB2bS5pdGVtLnBpZCAmJiAncG90ZW50aWFsRG50JyBpbiB2bS5pdGVtVHlwZSkge1xyXG4gICAgICAgIHZhciBwb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBvdGVudGlhbERudCwgJ2lkJywgdm0uaXRlbS5waWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHBvdGVudGlhbHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHZtLnBvdGVudGlhbCA9IHBvdGVudGlhbHNbMF07XHJcbiAgICAgICAgICB2bS5wb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBvdGVudGlhbERudCwgJ1BvdGVudGlhbElEJywgdm0ucG90ZW50aWFsLlBvdGVudGlhbElEKTtcclxuICAgICAgICAgIHZtLnBvdGVudGlhbFN0YXRzID0gZ2V0UG90ZW50aWFsU3RhdHModm0ucG90ZW50aWFscyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoJ3BvdGVudGlhbERudEV4JyBpbiB2bS5pdGVtVHlwZSkge1xyXG4gICAgICAgICAgcG90ZW50aWFscyA9IGRudERhdGEuZmluZCh2bS5pdGVtVHlwZS5wb3RlbnRpYWxEbnRFeCwgJ2lkJywgdm0uaXRlbS5waWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgaWYocG90ZW50aWFscy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICB2bS5wb3RlbnRpYWwgPSBwb3RlbnRpYWxzWzBdO1xyXG4gICAgICAgICAgICB2bS5wb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBvdGVudGlhbERudEV4LCAnUG90ZW50aWFsSUQnLCB2bS5wb3RlbnRpYWwuUG90ZW50aWFsSUQpO1xyXG4gICAgICAgICAgICB2bS5wb3RlbnRpYWxTdGF0cyA9IGdldFBvdGVudGlhbFN0YXRzKHZtLnBvdGVudGlhbHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdm0ucG90ZW50aWFscztcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5uZXh0UG90ZW50aWFsID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLnBvdGVudGlhbHMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZih2bS5wb3RlbnRpYWwuaWQgPT0gdm0ucG90ZW50aWFsc1tpXS5pZCkge1xyXG4gICAgICAgIHZtLnBvdGVudGlhbCA9IHZtLnBvdGVudGlhbHNbaSsxXTtcclxuICAgICAgICB2bS5pdGVtLnBpZCA9IHZtLnBvdGVudGlhbC5pZDtcclxuICAgICAgICB2bS5vbkNoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdpbmdQb3RlbnRpYWxzID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5wcmV2UG90ZW50aWFsID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLnBvdGVudGlhbHMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZih2bS5wb3RlbnRpYWwuaWQgPT0gdm0ucG90ZW50aWFsc1tpXS5pZCkge1xyXG4gICAgICAgIHZtLnBvdGVudGlhbCA9IHZtLnBvdGVudGlhbHNbaS0xXTtcclxuICAgICAgICB2bS5pdGVtLnBpZCA9IHZtLnBvdGVudGlhbC5pZDtcclxuICAgICAgICB2bS5vbkNoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdpbmdQb3RlbnRpYWxzID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgICBcclxuICB0aGlzLmNoYW5nZVBvdGVudGlhbCA9IGZ1bmN0aW9uKHBpZCkge1xyXG4gICAgZm9yKHZhciBpPTA7aTx2bS5wb3RlbnRpYWxzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYocGlkID09IHZtLnBvdGVudGlhbHNbaV0uaWQpIHtcclxuICAgICAgICB2bS5wb3RlbnRpYWwgPSB2bS5wb3RlbnRpYWxzW2ldO1xyXG4gICAgICAgIHZtLml0ZW0ucGlkID0gdm0ucG90ZW50aWFsLmlkO1xyXG4gICAgICAgIHZtLmNoYW5naW5nUG90ZW50aWFscyA9IGZhbHNlO1xyXG4gICAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaXNGaXJzdFBvdGVudGlhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRQb3RlbnRpYWxzKCk7XHJcbiAgICByZXR1cm4gIXZtLnBvdGVudGlhbHMgfHwgdm0ucG90ZW50aWFscy5sZW5ndGggPD0gMSB8fCAhdm0ucG90ZW50aWFsIHx8IHZtLnBvdGVudGlhbC5pZCA9PSB2bS5wb3RlbnRpYWxzWzBdLmlkO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmlzTGFzdFBvdGVudGlhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRQb3RlbnRpYWxzKCk7XHJcbiAgICByZXR1cm4gIXZtLnBvdGVudGlhbHMgfHwgdm0ucG90ZW50aWFscy5sZW5ndGggPD0gMSB8fCAhdm0ucG90ZW50aWFsIHx8IHZtLnBvdGVudGlhbC5pZCA9PSB2bS5wb3RlbnRpYWxzW3ZtLnBvdGVudGlhbHMubGVuZ3RoLTFdLmlkO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRQb3RlbnRpYWxTdGF0cygpIHtcclxuICAgIHZhciBwU3RhdHMgPSB7fTtcclxuICAgIHZhciBlbXB0eVN0YXRJZCA9IG51bGw7XHJcbiAgICBcclxuICAgIGlmKHZtLnBvdGVudGlhbHMgIT0gbnVsbCkge1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2godm0ucG90ZW50aWFscywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgc3RhdHMgPSBbXTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaENvZGVWYWx1ZXMuZ2V0U3RhdHMocCksIGZ1bmN0aW9uKHN0YXQsIHNJbmRleCkge1xyXG4gICAgICAgICAgaWYoIWhDb2RlVmFsdWVzLnN0YXRzW3N0YXQuaWRdLmhpZGUpIHtcclxuICAgICAgICAgICAgc3RhdHMucHVzaChzdGF0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBpZihzdGF0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBwU3RhdHNbcC5pZF0gPSBzdGF0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZighZW1wdHlTdGF0SWQpIHtcclxuICAgICAgICAgIHBTdGF0c1twLmlkXSA9IFtdO1xyXG4gICAgICAgICAgZW1wdHlTdGF0SWQgPSBwLmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBwU3RhdHM7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbUVkaXRQb3RlbnRpYWwnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICAgIG9uQ2hhbmdlOiAnJm9uQ2hhbmdlJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbUVkaXRQb3RlbnRpYWxDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtcG90ZW50aWFsLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbUVkaXRTa2lsbEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJ2RudERhdGEnLCdzdGF0SGVscGVyJyxcclxuZnVuY3Rpb24oJHRpbWVvdXQsZG50RGF0YSxzdGF0SGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgaWYodGhpcy5pdGVtLml0ZW1Tb3VyY2UgIT0gJ3NraWxscycpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgXHJcbiAgaWYoIXRoaXMuaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50TnVtID0gMTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICBmdW5jdGlvbiBnZXREbnRGaWxlKCkge1xyXG4gICAgcmV0dXJuICdza2lsbGxldmVsdGFibGVfY2hhcmFjdGVyJyArIHZtLml0ZW0uYmFzZUpvYk5hbWUgKyB2bS5pdGVtLnB2ZSArICcubHpqc29uJztcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pbml0U2tpbGxzID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZG50RmlsZSA9IGdldERudEZpbGUoKTtcclxuICAgIGRudERhdGEuaW5pdChkbnRGaWxlLCBudWxsLCByZXBvcnRQcm9ncmVzcywgZnVuY3Rpb24oKSB7ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5za2lsbERhdGEgPSBkbnREYXRhLmZpbmQoZG50RmlsZSwgJ1NraWxsSW5kZXgnLCB2bS5pdGVtLmlkKTtcclxuICAgIH0pfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMubmV4dEVuY2hhbnRtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLnNraWxsRGF0YSAmJiB0aGlzLml0ZW0uZW5jaGFudG1lbnROdW0gPCB0aGlzLnNraWxsRGF0YS5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50TnVtKys7XHJcbiAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaXNNYXhTa2lsbExldmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5za2lsbERhdGEgJiYgdGhpcy5pdGVtICYmIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bSA+PSB0aGlzLnNraWxsRGF0YS5sZW5ndGg7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMucHJldkVuY2hhbnRtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLml0ZW0uZW5jaGFudG1lbnROdW0gPiAwKSB7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bS0tO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgdm0ub25DaGFuZ2UoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gcmVwb3J0UHJvZ3Jlc3MobXNnKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncHJvZ3Jlc3M6ICcgKyBtc2cpO1xyXG4gIH1cclxuICBcclxuICBkbnREYXRhLmluaXQoZ2V0RG50RmlsZSgpLCBudWxsLCBudWxsLCB2bS5pbml0U2tpbGxzKTtcclxuXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdFNraWxsJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0U2tpbGxDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtc2tpbGwuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdFNwYXJrQ3RybCcsXHJcblxyXG5bJ2RudERhdGEnLCdoQ29kZVZhbHVlcycsJ2l0ZW1zJywnaXRlbUNvbHVtbnNUb0xvYWQnLFxyXG5mdW5jdGlvbihkbnREYXRhLGhDb2RlVmFsdWVzLGl0ZW1zLGl0ZW1Db2x1bW5zVG9Mb2FkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBpZignaXRlbVNvdXJjZScgaW4gdGhpcy5pdGVtKSB7XHJcbiAgICB0aGlzLml0ZW1UeXBlID0gaXRlbXNbdGhpcy5pdGVtLml0ZW1Tb3VyY2VdO1xyXG4gIH1cclxuICBcclxuICBpZighdm0uaXRlbVR5cGUgfHwgIXZtLml0ZW1UeXBlLnNwYXJrRG50KSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgXHJcbiAgaWYodm0uaXRlbVR5cGUuc3BhcmtEbnQpIHtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5zcGFya0RudCwgaXRlbUNvbHVtbnNUb0xvYWQuc3BhcmtEbnQsIG51bGwsIHZtLmdldFNwYXJrcyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc3BhcmtzID0gbnVsbDtcclxuXHJcbiAgdGhpcy5uZXh0U3BhcmsgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpbmRleCA9IGdldFBvdGVudGlhbEluZGV4KCk7XHJcbiAgICBpbmRleCsrO1xyXG4gICAgaWYoaW5kZXggPj0gdm0uc3BhcmtzLmxlbmd0aCkge1xyXG4gICAgICBpbmRleCA9IDA7XHJcbiAgICB9XHJcbiAgICB2YXIgc3BhcmsgPSB2bS5zcGFya3NbaW5kZXhdOyBcclxuICAgIHZtLml0ZW0uc3BhcmtJZCA9IHNwYXJrLmlkO1xyXG4gICAgdm0uaXRlbS5zcGFya1N0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMoc3BhcmspO1xyXG4gICAgdm0ub25DaGFuZ2UoKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pc01vcmVTcGFya3MgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB2bS5zcGFya3MgIT0gbnVsbCAmJiBnZXRQb3RlbnRpYWxJbmRleCgpID49IHZtLnNwYXJrcy5sZW5ndGgtMTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pc0ZpcnN0U3BhcmsgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBnZXRQb3RlbnRpYWxJbmRleCgpID09IDA7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMucHJldlNwYXJrID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaW5kZXggPSBnZXRQb3RlbnRpYWxJbmRleCgpO1xyXG4gICAgaW5kZXgtLTtcclxuICAgIGlmKGluZGV4IDwgMCkge1xyXG4gICAgICBpbmRleCA9IHZtLnNwYXJrcy5sZW5ndGgtMTtcclxuICAgIH1cclxuICAgIHZhciBzcGFyayA9IHZtLnNwYXJrc1tpbmRleF07IFxyXG4gICAgdm0uaXRlbS5zcGFya0lkID0gc3BhcmsuaWQ7XHJcbiAgICB2bS5pdGVtLnNwYXJrU3RhdHMgPSBoQ29kZVZhbHVlcy5nZXRTdGF0cyhzcGFyayk7XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnJlbW92ZVNwYXJrID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5pdGVtLnNwYXJrSWQgPSBudWxsO1xyXG4gICAgdm0uaXRlbS5zcGFya1N0YXRzID0gbnVsbDtcclxuICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0U3BhcmtzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5pdGVtID09IG51bGwgfHwgdm0uaXRlbVR5cGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICBpZih2bS5zcGFya3MgPT0gbnVsbCkge1xyXG4gICAgICB2YXIgc2lkID0gdm0uaXRlbS5zcGFya1R5cGVJZDtcclxuICAgICAgaWYoc2lkKSB7XHJcbiAgICAgICAgaWYoZG50RGF0YS5pc0xvYWRlZCh2bS5pdGVtVHlwZS5zcGFya0RudCkpIHtcclxuICAgICAgICAgIHZtLnNwYXJrcyA9IGRudERhdGEuZmluZCh2bS5pdGVtVHlwZS5zcGFya0RudCwgJ1BvdGVudGlhbElEJywgc2lkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHZtLnNwYXJrcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFBvdGVudGlhbEluZGV4KCkge1xyXG4gICAgdmFyIHBvdGVudGlhbEluZGV4ID0gLTE7XHJcbiAgICBpZih2bS5pdGVtLnNwYXJrSWQgPiAwKSB7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5zcGFya3MsIGZ1bmN0aW9uKHNwYXJrLCBpbmRleCkge1xyXG4gICAgICAgIGlmKHNwYXJrLmlkID09IHZtLml0ZW0uc3BhcmtJZCkge1xyXG4gICAgICAgICAgcG90ZW50aWFsSW5kZXggPSBpbmRleDtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgICBcclxuICAgIHJldHVybiBwb3RlbnRpYWxJbmRleDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdFNwYXJrJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0U3BhcmtDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtc3BhcmsuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdFRhbGlzbWFuQ3RybCcsXHJcblxyXG5bZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgaWYodGhpcy5pdGVtLml0ZW1Tb3VyY2UgIT0gJ3RtYW4nKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2V0VGFsaXNtYW4gPSBmdW5jdGlvbihhbW91bnQpIHtcclxuICAgIGlmKGFtb3VudCA9PSAwKSB7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bSA9IG51bGw7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudFN0YXRzID0gW107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50TnVtID0gYW1vdW50O1xyXG4gICAgICBcclxuICAgICAgdmFyIGV4dHJhU3RhdHMgPSBbXTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgICBleHRyYVN0YXRzLnB1c2goe2lkOiBzdGF0LmlkLCBtYXg6IHN0YXQubWF4ICogKGFtb3VudC8xMDApfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBleHRyYVN0YXRzO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vbkNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdFRhbGlzbWFuJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0VGFsaXNtYW5DdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtdGFsaXNtYW4uaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdEN0cmwnLFxyXG5cclxuWydoQ29kZVZhbHVlcycsXHJcbmZ1bmN0aW9uKGhDb2RlVmFsdWVzKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgaWYoIXZtLml0ZW0pIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgXHJcbiAgdm0ub25VcGRhdGVJdGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS51cGRhdGVJdGVtKCk7XHJcbiAgfVxyXG4gIFxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbUVkaXQnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICAgIG9uQ2hhbmdlOiAnJm9uQ2hhbmdlJyxcclxuICAgICAgdXBkYXRlSXRlbTogJyZ1cGRhdGVJdGVtJ1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdpdGVtRWRpdEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS1lZGl0Lmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdCb3hDdHJsJyxcclxuXHJcblsnJHRpbWVvdXQnLCdkbnREYXRhJywnaXRlbUZhY3RvcnknLFxyXG4gIGZ1bmN0aW9uKCR0aW1lb3V0LCBkbnREYXRhLCBpdGVtRmFjdG9yeSkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIGlmKHRoaXMuaXRlbS50eXBlSWQgIT0gNDYgJiYgdGhpcy5pdGVtLnR5cGVJZCAhPSA4ICYmIHRoaXMuaXRlbS50eXBlSWQgIT0gMTEyICYmIHRoaXMuaXRlbS50eXBlSWQgIT0gMTIyICYmIHRoaXMuaXRlbS50eXBlSWQgIT0gMTQyKSB7XHJcbiAgICBjb25zb2xlLmxvZygnbm90IGJveCBpdGVtIHR5cGUgJyArIHRoaXMuaXRlbS50eXBlSWQpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZhciBwb3VjaEZpbGVOYW1lcyA9IFtcclxuICAgICdpdGVtZHJvcHRhYmxlLmx6anNvbicsXHJcbiAgICAnaXRlbWRyb3B0YWJsZV9hYnlzcy5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfYXBwcmVudGljZS5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfY29vay5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfZGFya2xhaXIubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2RpbWVuc2lvbi5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfZGlzam9pbnQubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2RuZXhwZWRpdGlvbi5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfZXZlbnQubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2Zhcm0ubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2Zpc2hpbmcubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2d1aWxkd2FyLmx6anNvbicsXHJcbiAgICAnaXRlbWRyb3B0YWJsZV9pdGVtLmx6anNvbicsXHJcbiAgICAnaXRlbWRyb3B0YWJsZV9tb25zdGVyaXRlbS5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfcHJvcGRyb3AubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX3B2cC5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfcmFuZG9tY29tcG91bmQubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX3N0YWdlY2xlYXIubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX3RoZW1lcGFyay5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfdW5pb24ubHpqc29uJ11cclxuICBcclxuICB2YXIgYWxsSXRlbUZpbGVOYW1lID0gJ2FsbC1pdGVtcy5sempzb24nO1xyXG4gIHZhciBjaGFybUl0ZW10YWJsZSA9ICdjaGFybWl0ZW10YWJsZS5sempzb24nO1xyXG4gIHZhciBjb21tb25DaGFybUl0ZW10YWJsZSA9ICdjaGFybWl0ZW10YWJsZV9jb21tb24ubHpqc29uJztcclxuICBcclxuICB2YXIgZmlsZXM7XHJcbiAgaWYodGhpcy5pdGVtLnR5cGVJZCA9PSA0NiB8fCB0aGlzLml0ZW0udHlwZUlkID09IDExMiB8fCB0aGlzLml0ZW0udHlwZUlkID09IDEyMiB8fCB0aGlzLml0ZW0udHlwZUlkID09IDE0Mikge1xyXG4gICAgZmlsZXMgPSBbYWxsSXRlbUZpbGVOYW1lLCBjaGFybUl0ZW10YWJsZSwgY29tbW9uQ2hhcm1JdGVtdGFibGVdO1xyXG4gIH1cclxuICBlbHNlIGlmICh0aGlzLml0ZW0udHlwZUlkID09IDgpIHtcclxuICAgIGZpbGVzID0gW2FsbEl0ZW1GaWxlTmFtZV0uY29uY2F0KHBvdWNoRmlsZU5hbWVzKTtcclxuICB9XHJcblxyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdEJveENvbnRlbnRzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaW5pdEJveENvbnRlbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnaW5pdCBjb250ZW50cycsIHRoaXMuaXRlbS5maWxlTmFtZSk7XHJcblxyXG4gICAgZm9yKHZhciBpPTA7aTxmaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVzW2ldKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBkYXRhcyA9IGRudERhdGEuZmluZCh0aGlzLml0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsICdpZCcsIHRoaXMuaXRlbS5pZCk7XHJcbiAgICBpZihkYXRhcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHZhciBkID0gZGF0YXNbMF07XHJcbiAgICAgIHZtLml0ZW1zID0gW107XHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgICAgaWYodm0uaXRlbS50eXBlSWQgPT0gNDYgfHwgdm0uaXRlbS50eXBlSWQgPT0gMTEyIHx8IHZtLml0ZW0udHlwZUlkID09IDEyMiB8fCB2bS5pdGVtLnR5cGVJZCA9PSAxNDIpIHtcclxuICAgICAgICB2bS5nZXRDaGFybUl0ZW1zKGQuVHlwZVBhcmFtMSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAodm0uaXRlbS50eXBlSWQgPT0gOCkge1xyXG4gICAgICAgIHZtLmdldFBvdWNoSXRlbXMoZC5UeXBlUGFyYW0xKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRQb3VjaEl0ZW1zID0gZnVuY3Rpb24oYm94VHlwZSkge1xyXG4gICAgZm9yKHZhciBmPTA7Zjxwb3VjaEZpbGVOYW1lcy5sZW5ndGg7KytmKSB7XHJcbiAgICAgIHZtLmdldFBvdWNoSXRlbXNGcm9tRmlsZShib3hUeXBlLCBwb3VjaEZpbGVOYW1lc1tmXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0UG91Y2hJdGVtc0Zyb21GaWxlID0gZnVuY3Rpb24oYm94VHlwZSwgcG91Y2hGaWxlTmFtZSkge1xyXG4gICAgXHJcbiAgICB2YXIgcG91Y2hEYXRhID0gZG50RGF0YS5maW5kKHBvdWNoRmlsZU5hbWUsICdpZCcsIGJveFR5cGUpO1xyXG4gICAgaWYocG91Y2hEYXRhLmxlbmd0aCA9PSAwKSB7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdmFyIGdvbGQgPSBwb3VjaERhdGFbMF0uR29sZE1pbjtcclxuXHJcbiAgICAgIHZhciBpdGVtSW5kZXggPSAwO1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgaXRlbUluZGV4Kys7XHJcbiAgICAgICAgdmFyIGlzR3JvdXAgPSBwb3VjaERhdGFbMF1bJ0lzR3JvdXAnICsgaXRlbUluZGV4XTtcclxuICAgICAgICB2YXIgcG91Y2hJdGVtID0gcG91Y2hEYXRhWzBdWydJdGVtJyArIGl0ZW1JbmRleCArICdJbmRleCddO1xyXG4gICAgICAgIHZhciBwb3VjaEl0ZW1Db3VudCA9IHBvdWNoRGF0YVswXVsnSXRlbScgKyBpdGVtSW5kZXggKyAnSW5mbyddO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ3BvdWNoIGNvbnRhaW5zICcgKyBwb3VjaEl0ZW0pO1xyXG4gICAgICAgIGlmKHBvdWNoSXRlbSkge1xyXG4gICAgICAgICAgaWYoaXNHcm91cCkge1xyXG4gICAgICAgICAgICB2bS5nZXRQb3VjaEl0ZW1zKHBvdWNoSXRlbSwgcG91Y2hGaWxlTmFtZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FkZGluZyBpdGVtICcgKyBwb3VjaEl0ZW0pO1xyXG4gICAgICAgICAgICB2YXIgaXRlbWRzID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgcG91Y2hJdGVtKTtcclxuICAgICAgICAgICAgaWYoaXRlbWRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICB2YXIgYmFzaWNJdGVtID0gaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW1kc1swXSk7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZvdW5kIGl0ZW0gJyArIGJhc2ljSXRlbS5uYW1lKTtcclxuICBcclxuICAgICAgICAgICAgICB2bS5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGNvdW50OiBwb3VjaEl0ZW1Db3VudCxcclxuICAgICAgICAgICAgICAgIGdvbGQ6IGdvbGQsXHJcbiAgICAgICAgICAgICAgICBpdGVtOiBiYXNpY0l0ZW1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSB3aGlsZShwb3VjaEl0ZW0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmdldENoYXJtSXRlbXMgPSBmdW5jdGlvbihib3hUeXBlKSB7XHJcbiAgICB2YXIgY2hhcm1GaWxlcyA9IFtjaGFybUl0ZW10YWJsZSwgY29tbW9uQ2hhcm1JdGVtdGFibGVdO1xyXG4gICAgZm9yKHZhciBpPTA7aTxjaGFybUZpbGVzLmxlbmd0aDsrK2kpIHtcclxuXHJcbiAgICAgIHZhciBjaGFybURhdGEgPSBkbnREYXRhLmdldERhdGEoY2hhcm1GaWxlc1tpXSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdib3g6ICcgKyBib3hUeXBlLCBjaGFybURhdGEpO1xyXG4gICAgICBcclxuICAgICAgZm9yKHZhciBjPTA7YzxjaGFybURhdGEubGVuZ3RoOysrYykge1xyXG4gICAgICAgIHZhciBjZCA9IGNoYXJtRGF0YVtjXTtcclxuICAgICAgICBpZihjZC5DaGFybU51bSA9PSBib3hUeXBlICYmIGNkLkxvb2spIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoY2QuQ2hhcm1UeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2hhcm1JdGVtcyhjZC5JdGVtSUQpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW1kcyA9IGRudERhdGEuZmluZChhbGxJdGVtRmlsZU5hbWUsICdpZCcsIGNkLkl0ZW1JRCk7XHJcbiAgICAgICAgICAgIGlmKGl0ZW1kcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgdm0uaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBjb3VudDogY2QuQ291bnQsXHJcbiAgICAgICAgICAgICAgICBnb2xkOiBjZC5Hb2xkLFxyXG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW1kc1swXSlcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtVmlld0JveCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdCb3hDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2l0ZW0tdmlldy1ib3guaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtVmlld0NyYWZ0Q3RybCcsXHJcblxyXG5bJyR0aW1lb3V0JywnZG50RGF0YScsJ2l0ZW1GYWN0b3J5JywnaENvZGVWYWx1ZXMnLCd0cmFuc2xhdGlvbnMnLFxyXG4gIGZ1bmN0aW9uKCR0aW1lb3V0LCBkbnREYXRhLCBpdGVtRmFjdG9yeSwgaENvZGVWYWx1ZXMsIHRyYW5zbGF0aW9ucykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0uY3JhZnRzID0gW107XHJcblxyXG4gIHZhciBjRmlsZXMgPSBbXHJcbiAgICAnaXRlbWNvbXBvdW5kdGFibGUubHpqc29uJyxcclxuICAgICdpdGVtY29tcG91bmR0YWJsZV9jdXN0b20ubHpqc29uJyxcclxuICAgICdpdGVtY29tcG91bmR0YWJsZV9nbHlwaC5sempzb24nLFxyXG4gICAgJ2l0ZW1jb21wb3VuZHRhYmxlX2pld2VsLmx6anNvbicsXHJcbiAgICAnaXRlbWNvbXBvdW5kdGFibGVfcmVuZXdhbC5sempzb24nLFxyXG4gICAgJ2l0ZW1jb21wb3VuZHRhYmxlX3NldC5sempzb24nXTtcclxuICBcclxuICB2YXIgYWxsSXRlbUZpbGVOYW1lID0gJ2FsbC1pdGVtcy5sempzb24nO1xyXG4gIFxyXG4gIHZhciBmaWxlcyA9IGNGaWxlcy5jb25jYXQoW2FsbEl0ZW1GaWxlTmFtZV0pO1xyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdENyYWZ0cygpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmluaXRDcmFmdHMgPSBmdW5jdGlvbigpIHtcclxuICAgIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZighZG50RGF0YS5pc0xvYWRlZChmaWxlc1tpXSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uY3JhZnRzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPGNGaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZtLmluaXRDcmFmdChjRmlsZXNbaV0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgbmV3Q3JhZnRzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLmNyYWZ0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IodmFyIGo9MDtqPG5ld0NyYWZ0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgaWYodm0uY3JhZnRzW2ldLmdvbGQgPT0gbmV3Q3JhZnRzW2pdLmdvbGQgJiZcclxuICAgICAgICAgIHZtLmNyYWZ0c1tpXS5pdGVtcy5sZW5ndGggPT0gbmV3Q3JhZnRzW2pdLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IodmFyIGs9MDtrPHZtLmNyYWZ0c1tpXS5pdGVtcy5sZW5ndGg7KytrKSB7XHJcbiAgICAgICAgICAgICAgaWYodm0uY3JhZnRzW2ldLml0ZW1zW2tdLml0ZW0uaWQgIT0gbmV3Q3JhZnRzW2pdLml0ZW1zW2tdLml0ZW0uaWQgfHxcclxuICAgICAgICAgICAgICAgIHZtLmNyYWZ0c1tpXS5pdGVtc1trXS5udW0gIT0gbmV3Q3JhZnRzW2pdLml0ZW1zW2tdLm51bSkge1xyXG4gICAgICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoIWZvdW5kKSB7XHJcbiAgICAgICAgbmV3Q3JhZnRzLnB1c2godm0uY3JhZnRzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5jcmFmdHMgPSBuZXdDcmFmdHM7XHJcbiAgfVxyXG5cclxuICB0aGlzLmluaXRDcmFmdCA9IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICB2YXIgZkNyYWZ0cyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ1N1Y2Nlc3NJdGVtSUQxJywgdm0uaXRlbS5pZCk7XHJcbiAgICBcclxuICAgIGZvcih2YXIgaT0wO2k8ZkNyYWZ0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBjID0gZkNyYWZ0c1tpXTtcclxuICAgICAgXHJcbiAgICAgIHZhciBjcmFmdCA9IHtcclxuICAgICAgICBpZDogYy5pZCxcclxuICAgICAgICBmaWxlTmFtZTogZmlsZU5hbWUucmVwbGFjZSgnLmx6anNvbicsICcnKSxcclxuICAgICAgICBnb2xkOiBjLkNvc3QvMTAwLzEwMCxcclxuICAgICAgICBpdGVtczogW10sXHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaj0wO1xyXG4gICAgICBmb3IoOzspIHtcclxuICAgICAgICBqKys7XHJcbiAgICAgICAgdmFyIGl0ZW1Db2xOYW1lID0gJ1Nsb3QnICsgaiArJ0lkJztcclxuICAgICAgICB2YXIgcXR5Q29sTmFtZSA9ICdTbG90JyArIGogKydOdW0nO1xyXG4gICAgICAgIGlmKCEoaXRlbUNvbE5hbWUgaW4gYykpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgY1tpdGVtQ29sTmFtZV0pO1xyXG4gICAgICAgIGlmKGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNyYWZ0Lml0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICBpdGVtOiBpdGVtRmFjdG9yeS5jcmVhdGVCYXNpY0l0ZW0oaXRlbXNbMF0pLFxyXG4gICAgICAgICAgICBudW06IGNbcXR5Q29sTmFtZV0sXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZtLmNyYWZ0cy5wdXNoKGNyYWZ0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbVZpZXdDcmFmdCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdDcmFmdEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS12aWV3LWNyYWZ0Lmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdFeHRyYWN0aW9uQ3RybCcsXHJcblxyXG5bJyR0aW1lb3V0JywnZG50RGF0YScsJ2l0ZW1GYWN0b3J5JywnaXRlbXMnLFxyXG4gIGZ1bmN0aW9uKCR0aW1lb3V0LCBkbnREYXRhLCBpdGVtRmFjdG9yeSwgaXRlbXMpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZhciBleHRyYWN0RmlsZU5hbWUgPSAnaXRlbWRyb3B0YWJsZV9kaXNqb2ludC5sempzb24nO1xyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgXHJcbiAgdmFyIGZpbGVzID0gW2V4dHJhY3RGaWxlTmFtZSxhbGxJdGVtRmlsZU5hbWVdO1xyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdEV4dHJhY3QoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pbml0RXh0cmFjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yKHZhciBpPTA7aTxmaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVzW2ldKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgZGlzam9pbnQ7XHJcbiAgICB2YXIgZCA9IGl0ZW1GYWN0b3J5LmdldEl0ZW1EYXRhKHZtLml0ZW0pO1xyXG4gICAgaWYoZCAmJiBkLkRpc2pvaW50RHJvcDEgPiAwKSB7XHJcbiAgICAgIGRpc2pvaW50ID0gZC5EaXNqb2ludERyb3AxO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgaXRlbVR5cGUgPSBpdGVtc1t2bS5pdGVtLml0ZW1Tb3VyY2VdO1xyXG4gICAgXHJcbiAgICBpZihpdGVtVHlwZSAmJiBkLkVuY2hhbnRJRCkge1xyXG4gICAgICB2YXIgZW5jaGFudG1lbnRzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLmVuY2hhbnREbnQsICdFbmNoYW50SUQnLCBkLkVuY2hhbnRJRCk7XHJcbiAgICAgIGZvcih2YXIgaT0wO2k8ZW5jaGFudG1lbnRzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBpZihlbmNoYW50bWVudHNbaV0uRW5jaGFudExldmVsID09IHZtLml0ZW0uZW5jaGFudG1lbnROdW0pIHtcclxuICAgICAgICAgIGRpc2pvaW50ID0gZW5jaGFudG1lbnRzW2ldLkRpc2pvaW50RHJvcDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5pdGVtcyA9IFtdO1xyXG4gICAgaWYoZGlzam9pbnQpIHtcclxuICAgICAgdm0uZ2V0SXRlbXMoZGlzam9pbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEdvbGQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBkID0gaXRlbUZhY3RvcnkuZ2V0SXRlbURhdGEodGhpcy5pdGVtKTtcclxuICAgIHJldHVybiBOdW1iZXIoZC5EaXNqb2ludGFtb3VudCkvMTAwLzEwMDtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRJdGVtcyA9IGZ1bmN0aW9uKGRpc2pvaW50KSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2hlY2tpbmcgJyArIHBvdWNoRmlsZU5hbWUgKyAnIGZvciAnICsgYm94VHlwZSk7XHJcbiAgICBcclxuICAgIHZhciBwb3VjaERhdGEgPSBkbnREYXRhLmZpbmQoZXh0cmFjdEZpbGVOYW1lLCAnaWQnLCBkaXNqb2ludCk7XHJcbiAgICBpZihwb3VjaERhdGEubGVuZ3RoID09IDApIHtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YXIgZ29sZCA9IHBvdWNoRGF0YVswXS5Hb2xkTWluO1xyXG5cclxuICAgICAgdmFyIGl0ZW1JbmRleCA9IDE7XHJcbiAgICAgIHdoaWxlKCdJdGVtJyArIGl0ZW1JbmRleCArICdJbmRleCcgaW4gcG91Y2hEYXRhWzBdKSB7XHJcbiAgICAgICAgdmFyIGlzR3JvdXAgPSBwb3VjaERhdGFbMF1bJ0lzR3JvdXAnICsgaXRlbUluZGV4XTtcclxuICAgICAgICB2YXIgcG91Y2hJdGVtID0gcG91Y2hEYXRhWzBdWydJdGVtJyArIGl0ZW1JbmRleCArICdJbmRleCddO1xyXG4gICAgICAgIHZhciBwb3VjaEl0ZW1Db3VudCA9IHBvdWNoRGF0YVswXVsnSXRlbScgKyBpdGVtSW5kZXggKyAnSW5mbyddO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ3BvdWNoIGNvbnRhaW5zICcgKyBwb3VjaEl0ZW0pO1xyXG4gICAgICAgIGlmKHBvdWNoSXRlbSkge1xyXG4gICAgICAgICAgaWYoaXNHcm91cCkge1xyXG4gICAgICAgICAgICB2bS5nZXRJdGVtcyhwb3VjaEl0ZW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtZHMgPSBkbnREYXRhLmZpbmQoYWxsSXRlbUZpbGVOYW1lLCAnaWQnLCBwb3VjaEl0ZW0pO1xyXG4gICAgICAgICAgICBpZihpdGVtZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2ZvdW5kIGl0ZW0gJyk7XHJcbiAgXHJcbiAgICAgICAgICAgICAgdm0uaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBjb3VudDogcG91Y2hJdGVtQ291bnQsXHJcbiAgICAgICAgICAgICAgICBnb2xkOiBnb2xkLFxyXG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW1kc1swXSksXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaXRlbUluZGV4Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbVZpZXdFeHRyYWN0aW9uJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdpdGVtVmlld0V4dHJhY3Rpb25DdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2l0ZW0tdmlldy1leHRyYWN0aW9uLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdQbGF0ZUN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJ2RudERhdGEnLCdpdGVtRmFjdG9yeScsJ2hDb2RlVmFsdWVzJywndHJhbnNsYXRpb25zJyxcclxuICBmdW5jdGlvbigkdGltZW91dCwgZG50RGF0YSwgaXRlbUZhY3RvcnkpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHZtLml0ZW1zID0gW107XHJcbiAgXHJcbiAgdmFyIHBsYXRlRmlsZSA9ICdwbGF0ZXRhYmxlLmx6anNvbic7XHJcbiAgdmFyIGFsbEl0ZW1GaWxlTmFtZSA9ICdhbGwtaXRlbXMubHpqc29uJztcclxuICBcclxuICB2YXIgYWxsRmlsZXMgPSBbcGxhdGVGaWxlLGFsbEl0ZW1GaWxlTmFtZV07XHJcbiAgZm9yKHZhciBpPTA7aTxhbGxGaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICBkbnREYXRhLmluaXQoYWxsRmlsZXNbaV0sIG51bGwsIGZ1bmN0aW9uKCkge30sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICB2bS5pbml0U2V0cygpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmluaXRTZXRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPGFsbEZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoYWxsRmlsZXNbaV0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLml0ZW1zID0gW107XHJcbiAgICBnZXRQbGF0ZXMoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0UGxhdGVzKCkge1xyXG4gICAgdmFyIHJvd3MgPSBkbnREYXRhLmZpbmQocGxhdGVGaWxlLCAnSXRlbUlEJywgdm0uaXRlbS5pZCk7XHJcbiAgICBmb3IodmFyIHI9MDtyPHJvd3MubGVuZ3RoOysrcikge1xyXG4gICAgICB2YXIgcm93ID0gcm93c1tyXTtcclxuICAgICAgdmFyIGNvbD0wO1xyXG4gICAgICBmb3IoOzspIHtcclxuICAgICAgICBjb2wrKztcclxuICAgICAgICB2YXIgY29sTmFtZSA9ICdDb21wb3VuZFRhYmxlSW5kZXgnICsgY29sO1xyXG4gICAgICAgIGlmKCEoY29sTmFtZSBpbiByb3cpKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpdGVtRGF0YSA9IGRudERhdGEuZmluZChhbGxJdGVtRmlsZU5hbWUsICdpZCcsIHJvd1tjb2xOYW1lXSk7XHJcbiAgICAgICAgaWYoaXRlbURhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdm0uaXRlbXMucHVzaChpdGVtRmFjdG9yeS5jcmVhdGVCYXNpY0l0ZW0oaXRlbURhdGFbMF0pKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbVZpZXdQbGF0ZScsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdQbGF0ZUN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS12aWV3LXBsYXRlLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdTZXRDdHJsJyxcclxuXHJcblsnJHRpbWVvdXQnLCdkbnREYXRhJywnaXRlbUZhY3RvcnknLCdoQ29kZVZhbHVlcycsJ3RyYW5zbGF0aW9ucycsXHJcbiAgZnVuY3Rpb24oJHRpbWVvdXQsIGRudERhdGEsIGl0ZW1GYWN0b3J5KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICB2bS5pdGVtcyA9IFtdO1xyXG4gIFxyXG4gIHZhciBmaWxlcyA9IFtcclxuICAncGFydHN0YWJsZS5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY29tbW9uMjAxNC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY29tbW9uMjAxNS5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY29tbW9uMjAxNi5sempzb24nLFxyXG4gICdwYXJ0c3RhYmxlX2NvbW1vbmNhc2gubHpqc29uJyxcclxuICAncGFydHN0YWJsZV9lcXVpcG1lbnQub3B0aW1pc2VkLmpzb24nLFxyXG4gICdwYXJ0c3RhYmxlX2V2ZW50Lmx6anNvbicsXHJcbiAgJ3BhcnRzdGFibGVfZ3VpbGQubHpqc29uJyxcclxuICAncGFydHN0YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLFxyXG4gICdwYXJ0c3RhYmxlX3JlYm9vdC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfc2tpbGxsZXZlbHVwLmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAnd2VhcG9udGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2NvbW1vbjIwMTQub3B0aW1pc2VkLmpzb24nLFxyXG4gICd3ZWFwb250YWJsZV9jb21tb24yMDE1Lm9wdGltaXNlZC5qc29uJyxcclxuICAnd2VhcG9udGFibGVfY29tbW9uMjAxNi5sempzb24nLFxyXG4gICd3ZWFwb250YWJsZV9jb21tb25jYXNoLmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2VxdWlwbWVudC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2V2ZW50Lmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2d1aWxkLmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX3B2cC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX3JlYm9vdC5vcHRpbWlzZWQuanNvbicsXHJcbiAgLy8nd2VhcG9udGFibGVfc2tpbGxsZXZlbHVwLmx6anNvbidcclxuICBdO1xyXG4gIFxyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgXHJcbiAgdmFyIGFsbEZpbGVzID0gZmlsZXMuY29uY2F0KFthbGxJdGVtRmlsZU5hbWVdKTtcclxuICBmb3IodmFyIGk9MDtpPGFsbEZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgIGRudERhdGEuaW5pdChhbGxGaWxlc1tpXSwgbnVsbCwgZnVuY3Rpb24oKSB7fSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZtLmluaXRTZXRzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaW5pdFNldHMgPSBmdW5jdGlvbigpIHtcclxuICAgIGZvcih2YXIgaT0wO2k8YWxsRmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZighZG50RGF0YS5pc0xvYWRlZChhbGxGaWxlc1tpXSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uaXRlbXMgPSBbXTtcclxuICAgIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgICBnZXRTZXRJdGVtcyhmaWxlc1tpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFNldEl0ZW1zKGZpbGVOYW1lKSB7XHJcbiAgICB2YXIgcm93cyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ1NldEl0ZW1JRCcsIHZtLml0ZW0uc2V0SWQpO1xyXG4gICAgZm9yKHZhciByPTA7cjxyb3dzLmxlbmd0aDsrK3IpIHtcclxuICAgICAgdmFyIGl0ZW1EYXRhID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgcm93c1tyXS5pZCk7XHJcbiAgICAgIGlmKGl0ZW1EYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB2bS5pdGVtcy5wdXNoKGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtRGF0YVswXSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1WaWV3U2V0JywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdpdGVtVmlld1NldEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS12aWV3LXNldC5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2l0ZW1WaWV3U2hvcEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJ2RudERhdGEnLCdpdGVtRmFjdG9yeScsJ2hDb2RlVmFsdWVzJywndHJhbnNsYXRpb25zJyxcclxuICBmdW5jdGlvbigkdGltZW91dCwgZG50RGF0YSwgaXRlbUZhY3RvcnksIGhDb2RlVmFsdWVzLCB0cmFuc2xhdGlvbnMpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHZtLnNob3BDb3N0cyA9IFtdO1xyXG4gIFxyXG4gIHZhciBjU2hvcEZpbGVOYW1lID0gJ2NvbWJpbmVkc2hvcHRhYmxlLmx6anNvbic7XHJcbiAgdmFyIGNTeXNTaG9wRmlsZU5hbWUgPSAnY29tYmluZWRzaG9wdGFibGVfc3lzdGVtLmx6anNvbic7XHJcbiAgdmFyIGNDYXNoU2hvcEZpbGVOYW1lID0gJ2NvbWJpbmVkc2hvcHRhYmxlX2Nhc2gubHpqc29uJztcclxuICAvLyB2YXIgc2hvcEZpbGVOYW1lID0gJ3Nob3B0YWJsZS5sempzb24nO1xyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgXHJcbiAgdmFyIGZpbGVzID0gW2NDYXNoU2hvcEZpbGVOYW1lLGNTeXNTaG9wRmlsZU5hbWUsY1Nob3BGaWxlTmFtZSxhbGxJdGVtRmlsZU5hbWVdO1xyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdFNob3BzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaW5pdFNob3BzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZXNbaV0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLnNob3BDb3N0cyA9IFtdO1xyXG4gICAgZ2V0Q29tYmluZWRDb3N0cyhjU2hvcEZpbGVOYW1lKTtcclxuICAgIGdldENvbWJpbmVkQ29zdHMoY1N5c1Nob3BGaWxlTmFtZSk7XHJcbiAgICBnZXRDb21iaW5lZENvc3RzKGNDYXNoU2hvcEZpbGVOYW1lKTtcclxuICAgIC8vIGdldFNob3BDb3N0cygpO1xyXG4gICAgXHJcbiAgICB2YXIgbmV3U2hvcENvc3RzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLnNob3BDb3N0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IodmFyIGo9MDtqPG5ld1Nob3BDb3N0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgaWYodm0uc2hvcENvc3RzW2ldLnRhYk5hbWUgPT0gbmV3U2hvcENvc3RzW2pdLnRhYk5hbWUgJiZcclxuICAgICAgICAgIHZtLnNob3BDb3N0c1tpXS5nb2xkID09IG5ld1Nob3BDb3N0c1tqXS5nb2xkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0uaXRlbTEuaWQgPT0gbmV3U2hvcENvc3RzW2pdLml0ZW0xLmlkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0ubnVtSXRlbTEuaWQgPT0gbmV3U2hvcENvc3RzW2pdLm51bUl0ZW0xLmlkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0uaXRlbTIuaWQgPT0gbmV3U2hvcENvc3RzW2pdLml0ZW0yLmlkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0ubnVtSXRlbTIuaWQgPT0gbmV3U2hvcENvc3RzW2pdLm51bUl0ZW0yLmlkKSB7XHJcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZighZm91bmQpIHtcclxuICAgICAgICBuZXdTaG9wQ29zdHMucHVzaCh2bS5zaG9wQ29zdHNbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLnNob3BDb3N0cyA9IG5ld1Nob3BDb3N0cztcclxuICB9XHJcbiAgXHJcbiAgLypcclxuICBmdW5jdGlvbiBnZXRTaG9wQ29zdHMoKSB7XHJcbiAgICB2YXIgc2hvcHMgPSBkbnREYXRhLmdldERhdGEoc2hvcEZpbGVOYW1lKTtcclxuICAgIFxyXG4gICAgZm9yKHZhciBpPTA7aTxzaG9wcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBzID0gc2hvcHNbaV07XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYyA9IDA7XHJcbiAgICAgIGZvcig7Oykge1xyXG4gICAgICAgICsrYztcclxuICAgICAgICBcclxuICAgICAgICB2YXIgY29sTmFtZSA9ICdpdGVtSW5kZXgnICsgYztcclxuICAgICAgICBpZighKGNvbE5hbWUgaW4gcykpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB2YXIgaXRlbUlkID0gc1tjb2xOYW1lXTtcclxuICAgICAgICBpZighaXRlbUlkKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoaXRlbUlkID09IHZtLml0ZW0uaWQpIHtcclxuICAgICAgICAgIHMgPSB7XHJcbiAgICAgICAgICAgIHNob3BOYW1lOiBzLlNob3BJRCxcclxuICAgICAgICAgICAgdGFiTmFtZTogdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShzLlRhYk5hbWVJRCksXHJcbiAgICAgICAgICAgIGdvbGQ6IHNbJ1F1YW50aXR5JyArIGNdLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIFxyXG4gICAgICBcclxuICAgICAgICAgIGlmKHMuc2hvcE5hbWUgaW4gaENvZGVWYWx1ZXMuc2hvcE5hbWVzKSB7XHJcbiAgICAgICAgICAgIHMuc2hvcE5hbWUgPSBoQ29kZVZhbHVlcy5zaG9wTmFtZXNbcy5zaG9wTmFtZV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAgICAgaWYoIXMuc2hvcE5hbWUpIHtcclxuICAgICAgICAgICAgcy5zaG9wTmFtZSA9IHMuU2hvcElkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdm0uc2hvcENvc3RzLnB1c2gocyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSovXHJcblxyXG4gIGZ1bmN0aW9uIGdldENvbWJpbmVkQ29zdHMoZmlsZU5hbWUpIHtcclxuICAgIHZhciBzaG9wcyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ2l0ZW1pbmRleCcsIHZtLml0ZW0uaWQpO1xyXG4gICAgXHJcbiAgICBmb3IodmFyIGk9MDtpPHNob3BzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgdmFyIHMgPSBzaG9wc1tpXTtcclxuICAgICAgICBcclxuICAgICAgdmFyIGl0ZW0xcyA9IGRudERhdGEuZmluZChhbGxJdGVtRmlsZU5hbWUsICdpZCcsIHMuUHVyY2hhc2VJdGVtMSk7XHJcbiAgICAgIHZhciBpdGVtMnMgPSBkbnREYXRhLmZpbmQoYWxsSXRlbUZpbGVOYW1lLCAnaWQnLCBzLlB1cmNoYXNlSXRlbTIpO1xyXG4gICAgICBcclxuICAgICAgdmFyIHNob3BDb3N0ID0ge1xyXG4gICAgICAgIHNob3BOYW1lOiBzLlNob3BJRCxcclxuICAgICAgICB0YWJOYW1lOiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKHMuVGFiTmFtZUlEKSxcclxuICAgICAgICBnb2xkOiAwLFxyXG4gICAgICAgIG5pZ2h0bWFyZVBvaW50czogMCxcclxuICAgICAgICBsYWRkZXJQb2ludHM6IDAsXHJcbiAgICAgICAgaXRlbTE6IGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtMXNbMF0pLFxyXG4gICAgICAgIGl0ZW0yOiBpdGVtRmFjdG9yeS5jcmVhdGVCYXNpY0l0ZW0oaXRlbTJzWzBdKSxcclxuICAgICAgICBudW1JdGVtMTogMCxcclxuICAgICAgICBudW1JdGVtMjogMCxcclxuICAgICAgfTtcclxuICAgICAgXHJcbiAgICAgIGlmKHNob3BDb3N0LnNob3BOYW1lIGluIGhDb2RlVmFsdWVzLnNob3BOYW1lcykge1xyXG4gICAgICAgIHNob3BDb3N0LnNob3BOYW1lID0gaENvZGVWYWx1ZXMuc2hvcE5hbWVzW3Nob3BDb3N0LnNob3BOYW1lXTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYocy5QdXJjaGFzZVR5cGUxID09IDEpIHtcclxuICAgICAgICBzaG9wQ29zdC5nb2xkICs9IHMuUHVyY2hhc2VJdGVtVmFsdWUxO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYocy5QdXJjaGFzZVR5cGUxID09IDMpIHtcclxuICAgICAgICBzaG9wQ29zdC5sYWRkZXJQb2ludHMgKz0gcy5QdXJjaGFzZUl0ZW1WYWx1ZTE7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihzLlB1cmNoYXNlVHlwZTEgPT0gOCkge1xyXG4gICAgICAgIHNob3BDb3N0Lm5pZ2h0bWFyZVBvaW50cyArPSBzLlB1cmNoYXNlSXRlbVZhbHVlMTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzaG9wQ29zdC5udW1JdGVtMSA9IHMuUHVyY2hhc2VJdGVtVmFsdWUxO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihzLlB1cmNoYXNlVHlwZTIgPT0gMSkge1xyXG4gICAgICAgIHNob3BDb3N0LmdvbGQgKz0gcy5QdXJjaGFzZUl0ZW1WYWx1ZTI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihzLlB1cmNoYXNlVHlwZTIgPT0gMykge1xyXG4gICAgICAgIHNob3BDb3N0LmxhZGRlclBvaW50cyArPSBzLlB1cmNoYXNlSXRlbVZhbHVlMjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHMuUHVyY2hhc2VUeXBlMiA9PSA4KSB7XHJcbiAgICAgICAgc2hvcENvc3QubmlnaHRtYXJlUG9pbnRzICs9IHMuUHVyY2hhc2VJdGVtVmFsdWUyO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNob3BDb3N0Lm51bUl0ZW0yID0gcy5QdXJjaGFzZUl0ZW1WYWx1ZTI7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHNob3BDb3N0LmdvbGQgPSBzaG9wQ29zdC5nb2xkLzEwMC8xMDA7XHJcbiAgICAgIFxyXG4gICAgICB2bS5zaG9wQ29zdHMucHVzaChzaG9wQ29zdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1WaWV3U2hvcCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdTaG9wQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLXZpZXctc2hvcC5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2l0ZW1WaWV3VHJhbnNmZXJDdHJsJyxcclxuXHJcblsnJHRpbWVvdXQnLCdkbnREYXRhJywnaXRlbUZhY3RvcnknLCdoQ29kZVZhbHVlcycsXHJcbiAgZnVuY3Rpb24oJHRpbWVvdXQsIGRudERhdGEsIGl0ZW1GYWN0b3J5LCBoQ29kZVZhbHVlcykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0ubWF0Y2hpbmdUcmFuc2ZlcnMgPSBbXTtcclxuICBcclxuICB2YXIgdHJhbnNmZXJGaWxlTmFtZSA9ICdlbmNoYW50dHJhbnNmZXJ0YWJsZS5sempzb24nO1xyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgdmFyIHRyYW5zZmVySXRlbXNGaWxlTmFtZSA9ICdlbmNoYW50dHJhbnNmZXJpdGVtdGFibGUubHpqc29uJztcclxuICBcclxuICB2YXIgZmlsZXMgPSBbdHJhbnNmZXJGaWxlTmFtZSxhbGxJdGVtRmlsZU5hbWUsdHJhbnNmZXJJdGVtc0ZpbGVOYW1lXTtcclxuICBmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgIGRudERhdGEuaW5pdChmaWxlc1tpXSwgbnVsbCwgZnVuY3Rpb24oKSB7fSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZtLmluaXRUcmFuc2ZlcnMoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pbml0VHJhbnNmZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZXNbaV0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB2bS5tYXRjaGluZ1RyYW5zZmVycyA9IFtdO1xyXG4gICAgXHJcbiAgICB2YXIgdHJhbnNmZXJJdGVtID0gZG50RGF0YS5maW5kKHRyYW5zZmVySXRlbXNGaWxlTmFtZSwgJ0l0ZW1JRCcsIHZtLml0ZW0uaWQpO1xyXG4gICAgaWYodHJhbnNmZXJJdGVtICYmIHRyYW5zZmVySXRlbS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHZhciB0cmFuc2ZlcnMgPSBkbnREYXRhLmZpbmQodHJhbnNmZXJGaWxlTmFtZSwgJ0VuY2hhbnRMZXZlbCcsIHZtLml0ZW0uZW5jaGFudG1lbnROdW0pO1xyXG4gICAgICBcclxuICAgICAgZm9yKHZhciBpPTA7aTx0cmFuc2ZlcnMubGVuZ3RoOysraSkge1xyXG4gICAgICAgIHZhciB0ID0gdHJhbnNmZXJzW2ldO1xyXG4gICAgICAgIGlmKHQuUmFuayA9PSB2bS5pdGVtLnJhbmsuaWQgJiYgdC5MZXZlbExpbWl0ID09IHZtLml0ZW0ubGV2ZWxMaW1pdCkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgaXRlbTFzID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgdC5OZWVkSXRlbUlEMSk7XHJcbiAgICAgICAgICB2YXIgaXRlbTJzID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgdC5OZWVkSXRlbUlEMik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZtLm1hdGNoaW5nVHJhbnNmZXJzLnB1c2goe1xyXG4gICAgICAgICAgICBsZXZlbDogdC5SZXN1bHRMZXZlbCxcclxuICAgICAgICAgICAgZW5jaGFudG1lbnROdW06IHQuUmVzdWx0RW5jaGFudExldmVsLFxyXG4gICAgICAgICAgICBnb2xkOiB0Lk5lZWRDb2luLzEwMC8xMDAsXHJcbiAgICAgICAgICAgIHJhbms6IGhDb2RlVmFsdWVzLnJhbmtOYW1lc1t0LlJlc3VsdFJhbmtdLFxyXG4gICAgICAgICAgICBudW1JdGVtMTogdC5OZWVkSXRlbUNvdW50MSxcclxuICAgICAgICAgICAgaXRlbTE6IGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtMXNbMF0pLFxyXG4gICAgICAgICAgICBudW1JdGVtMjogdC5OZWVkSXRlbUNvdW50MixcclxuICAgICAgICAgICAgaXRlbTI6IGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtMnNbMF0pLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1WaWV3VHJhbnNmZXInLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1WaWV3VHJhbnNmZXJDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2l0ZW0tdmlldy10cmFuc2Zlci5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0l0ZW1DdHJsJyxcclxuWyckc2NvcGUnLCckd2luZG93JywnZG50RGF0YScsJ2hDb2RlVmFsdWVzJywnaXRlbXMnLCdqb2JzJywnZXhwb3J0TGlua0hlbHBlcicsJyRyb3V0ZVBhcmFtcycsJ3RyYW5zbGF0aW9ucycsJyRsb2NhdGlvbicsJ3JlZ2lvbicsJ2l0ZW1GYWN0b3J5JywnJHRpbWVvdXQnLCdzdGF0SGVscGVyJywnc2F2ZUhlbHBlcicsXHJcbmZ1bmN0aW9uKCRzY29wZSwkd2luZG93LGRudERhdGEsaENvZGVWYWx1ZXMsaXRlbXMsam9icyxleHBvcnRMaW5rSGVscGVyLCRyb3V0ZVBhcmFtcyx0cmFuc2xhdGlvbnMsJGxvY2F0aW9uLHJlZ2lvbixpdGVtRmFjdG9yeSwkdGltZW91dCxzdGF0SGVscGVyLHNhdmVIZWxwZXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgcmVnaW9uLnNldExvY2F0aW9uQnlOYW1lKCRyb3V0ZVBhcmFtcy5yZWdpb24pO1xyXG4gIFxyXG4gICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcbiAgXHJcbiAgJHNjb3BlLmpvYk5hbWUgPSBudWxsO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdzZWFyY2ggc3RyaW5nOiAnLCAkcm91dGVQYXJhbXMuaSk7XHJcbiAgJHNjb3BlLml0ZW0gPSBleHBvcnRMaW5rSGVscGVyLmRlY29kZUl0ZW0oJHJvdXRlUGFyYW1zLmkpO1xyXG4gIGlmKCdpdGVtU291cmNlJyBpbiAkc2NvcGUuaXRlbSkge1xyXG4gICAgJHNjb3BlLml0ZW1UeXBlID0gaXRlbXNbJHNjb3BlLml0ZW0uaXRlbVNvdXJjZV07XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5pdGVtLnNldFN0YXRzID0gbnVsbDtcclxuICAkc2NvcGUuaXRlbS5zZXRJZCA9IG51bGw7XHJcbiAgJHNjb3BlLmRldGFpbCA9IG51bGw7XHJcbiAgXHJcbiAgJHNjb3BlLmdldERlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZigkc2NvcGUuaXRlbS5kZXNjcmlwdGlvbikge1xyXG4gICAgICByZXR1cm4gJHNjb3BlLml0ZW0uZGVzY3JpcHRpb247XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKCRzY29wZS5pdGVtVHlwZSAmJlxyXG4gICAgICAkc2NvcGUuaXRlbVR5cGUubmFtZSA9PSAndGl0bGUnICYmXHJcbiAgICAgIHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpICYmXHJcbiAgICAgIGRudERhdGEuaXNMb2FkZWQoJHNjb3BlLml0ZW1UeXBlLm1haW5EbnQpKSB7XHJcblxyXG4gICAgICB2YXIgaXRlbURhdGEgPSBkbnREYXRhLmZpbmQoJHNjb3BlLml0ZW1UeXBlLm1haW5EbnQsICdpZCcsICRzY29wZS5pdGVtLmlkKTtcclxuICAgICAgaWYoaXRlbURhdGEgJiYgaXRlbURhdGEubGVuZ3RoID4gMCAmJiBpdGVtRGF0YVswXS5EZXNjcmlwdGlvbklEID4gMCkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGl0ZW1EYXRhWzBdLkRlc2NyaXB0aW9uSUQsIGl0ZW1EYXRhWzBdLkRlc2NyaXB0aW9uSURQYXJhbSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYoJHNjb3BlLml0ZW0uZmlsZU5hbWUgJiZcclxuICAgICAgZG50RGF0YS5pc0xvYWRlZCgkc2NvcGUuaXRlbS5maWxlTmFtZSArICcubHpqc29uJykpIHtcclxuICAgICAgICBcclxuICAgICAgdmFyIGl0ZW1EYXRhID0gZG50RGF0YS5maW5kKCRzY29wZS5pdGVtLmZpbGVOYW1lICsgJy5sempzb24nLCAnaWQnLCAkc2NvcGUuaXRlbS5pZCk7XHJcbiAgICAgIGlmKGl0ZW1EYXRhICYmIGl0ZW1EYXRhLmxlbmd0aCA+IDAgJiYgaXRlbURhdGFbMF0uRGVzY3JpcHRpb25JRCA+IDApIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShpdGVtRGF0YVswXS5EZXNjcmlwdGlvbklELCBpdGVtRGF0YVswXS5EZXNjcmlwdGlvbklEUGFyYW0pO1xyXG4gICAgICB9IFxyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUuZ2V0RXhjaGFuZ2VUeXBlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0dGluZyBleGNoYW5nZScpO1xyXG4gICAgdmFyIGV4Y2hhbmdlRG50ID0gJ2V4Y2hhbmdlLmx6anNvbic7XHJcbiAgICBpZih0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSAmJlxyXG4gICAgICBkbnREYXRhLmlzTG9hZGVkKGV4Y2hhbmdlRG50KSAmJlxyXG4gICAgICAkc2NvcGUuaXRlbS5leGNoYW5nZVR5cGUgPiAwKSB7XHJcbiAgICAgICAgXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdmaW5kaW5nIGV4Y2hhbmdlICcgKyAkc2NvcGUuaXRlbS5leGNoYW5nZVR5cGUpO1xyXG5cclxuICAgICAgdmFyIGV4Y2hhbmdlID0gZG50RGF0YS5maW5kKGV4Y2hhbmdlRG50LCAnRXhjaGFuZ2VUeXBlJywgJHNjb3BlLml0ZW0uZXhjaGFuZ2VUeXBlKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ2dvdCAnICsgZXhjaGFuZ2UubGVuZ3RoKTtcclxuICAgICAgaWYoZXhjaGFuZ2UgJiYgZXhjaGFuZ2UubGVuZ3RoID4gMCAmJiBleGNoYW5nZVswXS5OYW1lSUQgPiAwKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2V4Y2hhbmdlIG5hbWU6ICcgKyBleGNoYW5nZVswXS5OYW1lSUQpO1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGV4Y2hhbmdlWzBdLk5hbWVJRCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUuc2V0RGV0YWlsID0gZnVuY3Rpb24oZGV0YWlsKSB7XHJcbiAgICAkc2NvcGUuZGV0YWlsID0gZGV0YWlsO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUuZ2V0TnVtSW5TZXQgPSBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgdmFyIGJ1aWxkTmFtZSA9ICRzY29wZS5nZXRCdWlsZE5hbWUoKTtcclxuICAgIGlmKGJ1aWxkTmFtZSAmJiAkc2NvcGUuaXRlbSAmJiAkc2NvcGUuaXRlbS5zZXRJZCkge1xyXG4gICAgICByZXR1cm4gc3RhdEhlbHBlci5nZXROdW1JdGVtc0ZvclNldCgkc2NvcGUuYnVpbGRzW2J1aWxkTmFtZV0uaXRlbXMsICRzY29wZS5pdGVtLnNldElkKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5nZXRCdWlsZE5hbWUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBidWlsZE5hbWUgPSBzYXZlSGVscGVyLmdldEN1cnJlbnRCdWlsZCgpO1xyXG4gICAgaWYoJHNjb3BlLmJ1aWxkcykge1xyXG4gICAgICBpZighYnVpbGROYW1lIHx8ICEoYnVpbGROYW1lIGluICRzY29wZS5idWlsZHMpKSB7XHJcbiAgICAgICAgdmFyIGFsbEJ1aWxkTmFtZXMgPSBPYmplY3Qua2V5cygkc2NvcGUuYnVpbGRzKTtcclxuICAgICAgICBpZihhbGxCdWlsZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgYnVpbGROYW1lID0gYWxsQnVpbGROYW1lc1swXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGJ1aWxkTmFtZTtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmdldFNlcnZlclN0b3JhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpdGVtRGF0YSA9IGl0ZW1GYWN0b3J5LmdldEl0ZW1EYXRhKCRzY29wZS5pdGVtKTtcclxuICAgIHZhciByZXRWYWwgPSAnJztcclxuICAgIFxyXG4gICAgaWYoaXRlbURhdGEgJiYgJ0lzQ2FzaCcgaW4gaXRlbURhdGEgJiYgaXRlbURhdGEuSXNDYXNoID09IDApIHtcclxuICAgICAgaWYoaXRlbURhdGEgJiYgJ0FibGVXU3RvcmFnZScgaW4gaXRlbURhdGEpIHtcclxuICAgICAgICBpZihpdGVtRGF0YS5BYmxlV1N0b3JhZ2UgPT0gMSkge1xyXG4gICAgICAgICAgcmV0VmFsID0gJ2NhbiBzZXJ2ZXIgc3RvcmFnZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXRlbURhdGEuQWJsZVdTdG9yYWdlID09IDApIHtcclxuICAgICAgICAgIHJldFZhbCA9ICdub3QgdHJhbnNmZXJhYmxlJztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoaXRlbURhdGEgJiYgJ1JldmVyc2lvbicgaW4gaXRlbURhdGEpIHtcclxuICAgICAgICBpZihyZXRWYWwubGVuZ3RoKSB7XHJcbiAgICAgICAgICByZXRWYWwgKz0gJywgJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoaXRlbURhdGEuUmV2ZXJzaW9uID09IDApIHtcclxuICAgICAgICAgIHJldFZhbCArPSAnY2FuIHNlbGwnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGl0ZW1EYXRhLlJldmVyc2lvbiA9PSAxKSB7XHJcbiAgICAgICAgICByZXRWYWwgKz0gJ25vdCBzZWxsYWJsZSAnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldFZhbDtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmdldE1vcmVJbmZvID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VhbFRpbWVzID0gMDtcclxuICAgIHZhciBudW1TdGFtcHMgPSAwO1xyXG4gICAgXHJcbiAgICBpZigkc2NvcGUubW9yZUluZm9Mb2FkZWQoKSkge1xyXG4gICAgICB2YXIgaXRlbURhdGEgPSBpdGVtRmFjdG9yeS5nZXRJdGVtRGF0YSgkc2NvcGUuaXRlbSk7XHJcbiAgICAgIFxyXG4gICAgICBpZihpdGVtRGF0YSAmJiAnSXNDYXNoJyBpbiBpdGVtRGF0YSAmJiBpdGVtRGF0YS5Jc0Nhc2ggPT0gMCkge1xyXG4gICAgICAgIGlmKGl0ZW1EYXRhICYmICdTZWFsSUQnIGluIGl0ZW1EYXRhICYmICdTZWFsQ291bnQnIGluIGl0ZW1EYXRhKSB7XHJcbiAgICAgICAgICBzZWFsVGltZXMgPSBpdGVtRGF0YS5TZWFsQ291bnQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHNlYWxEYXRhID0gZG50RGF0YS5maW5kKCdzZWFsY291bnR0YWJsZS5sempzb24nLCAnVHlwZTInLCBpdGVtRGF0YS5TZWFsSUQpO1xyXG4gICAgICAgICAgaWYoc2VhbERhdGEgJiYgc2VhbERhdGEubGVuZ3RoID4gMCAmJiBzZWFsRGF0YVswXS5UeXBlMSA9PSAwKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgY29sTmFtZSA9ICdDb3VudDAnO1xyXG4gICAgICAgICAgICBpZigkc2NvcGUuaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgICAgIGNvbE5hbWUgPSAnQ291bnQnICsgJHNjb3BlLml0ZW0uZW5jaGFudG1lbnROdW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGNvbE5hbWUgaW4gc2VhbERhdGFbMF0pIHtcclxuICAgICAgICAgICAgICBudW1TdGFtcHMgPSBzZWFsRGF0YVswXVtjb2xOYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGl0ZW1EYXRhICYmICdJc0Nhc2gnIGluIGl0ZW1EYXRhICYmICdDYXNoVHJhZGVDb3VudCcgaW4gaXRlbURhdGEgJiYgJ1JldmVyc2lvbicgaW4gaXRlbURhdGEgJiYgJ0FibGVXU3RvcmFnZScgaW4gaXRlbURhdGEpIHtcclxuICAgICAgICBpZihpdGVtRGF0YS5SZXZlcnNpb24gPT0gMikge1xyXG4gICAgICAgICAgaWYoaXRlbURhdGEuQ2FzaFRyYWRlQ291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdjYXNoIHRyYWRlIGNvdW50OiAnICsgaXRlbURhdGEuQ2FzaFRyYWRlQ291bnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdjYW4gdXNlIHdhcnJhbnR5JztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpdGVtRGF0YS5BYmxlV1N0b3JhZ2UpIHtcclxuICAgICAgICAgIHJldHVybiAnY2FuIHNlcnZlciBzdG9yYWdlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gJ25vdCB0cmFkYWJsZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHNlYWxUaW1lcyAmJiBudW1TdGFtcHMpIHtcclxuICAgICAgcmV0dXJuICdjYW4gc3RhbXAgJyArIHNlYWxUaW1lcyArICcgdGltZXMgdXNpbmcgJyArIG51bVN0YW1wcyArICcgIHN0YW1wcyc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAkc2NvcGUubW9yZUluZm9Mb2FkZWQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBkbnREYXRhLmlzTG9hZGVkKCRzY29wZS5pdGVtLmZpbGVOYW1lICsgJy5sempzb24nKSAmJlxyXG4gICAgICBkbnREYXRhLmlzTG9hZGVkKCdzZWFsY291bnR0YWJsZS5sempzb24nKTtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmxvYWRNb3JlSW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZG50RGF0YS5pbml0KCRzY29wZS5pdGVtLmZpbGVOYW1lICsgJy5sempzb24nLCBudWxsLCAkdGltZW91dCk7XHJcbiAgICBkbnREYXRhLmluaXQoJ3NlYWxjb3VudHRhYmxlLmx6anNvbicsIG51bGwsICR0aW1lb3V0KTtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2NoYW5nZXMnKTtcclxuICAgIGlmKCRzY29wZS5pdGVtLml0ZW1Tb3VyY2UgIT0gJ2N1c3RvbScpIHtcclxuICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnaScsIGV4cG9ydExpbmtIZWxwZXIuZW5jb2RlSXRlbSgkc2NvcGUuaXRlbSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNldEZ1bGxTdGF0cygpO1xyXG4gICAgICAkc2NvcGUuaXRlbSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuaXRlbSk7XHJcbiAgICB9XHJcbiAgICBnZXRCdWlsZHMoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0Sm9iTmFtZSgpIHtcclxuICAgIHZhciBhbGxKb2JzID0gam9icy5nZXRBbGxKb2JzKCk7XHJcbiAgICBhbmd1bGFyLmZvckVhY2goYWxsSm9icywgZnVuY3Rpb24oam9iLCBpbmRleCkge1xyXG4gICAgICBpZihqb2IuaWQgPT0gJHNjb3BlLml0ZW0ubmVlZEpvYkNsYXNzKSB7XHJcbiAgICAgICAgJHNjb3BlLmpvYk5hbWUgPSBqb2IubmFtZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICBnZXRCdWlsZHMoKTtcclxuICAgICRzY29wZS5wcmVJbml0SXRlbSA9ICRzY29wZS5pdGVtO1xyXG4gICAgJHNjb3BlLml0ZW0gPSBudWxsO1xyXG4gIFxyXG4gICAgdmFyIGFueVRvTG9hZCA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICBhbmd1bGFyLmZvckVhY2goZXhwb3J0TGlua0hlbHBlci5nZXREbnRGaWxlcygkc2NvcGUucHJlSW5pdEl0ZW0pLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICBpZighZG50RGF0YS5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICBkbnREYXRhLmluaXQoZmlsZU5hbWUsIGNvbHVtbnMsIHJlcG9ydFByb2dyZXNzLCB0cnlJbml0KTtcclxuICAgICAgICBhbnlUb0xvYWQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYoIXRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgIHRyYW5zbGF0aW9ucy5pbml0KHJlcG9ydFByb2dyZXNzLCB0cnlJbml0KTtcclxuICAgICAgYW55VG9Mb2FkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoIWpvYnMuaXNMb2FkZWQoKSkge1xyXG4gICAgICBqb2JzLmluaXQocmVwb3J0UHJvZ3Jlc3MsIHRyeUluaXQpO1xyXG4gICAgICBhbnlUb0xvYWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZighYW55VG9Mb2FkKSB7XHJcbiAgICAgIHRyeUluaXQoKTtcclxuICAgIH1cclxuICB9XHJcbiAgaW5pdCgpO1xyXG5cclxuICBmdW5jdGlvbiBpc0xvYWRlZCgpIHtcclxuICAgIHZhciBhbnlEbnRUb0xvYWQgPSBmYWxzZTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChleHBvcnRMaW5rSGVscGVyLmdldERudEZpbGVzKCRzY29wZS5wcmVJbml0SXRlbSksIGZ1bmN0aW9uKGNvbHVtbnMsIGZpbGVOYW1lKSB7XHJcbiAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgICAgIGFueURudFRvTG9hZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAhYW55RG50VG9Mb2FkICYmIHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpICYmIGpvYnMuaXNMb2FkZWQoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gdHJ5SW5pdCgpIHtcclxuICAgIGlmKGlzTG9hZGVkKCkpIHtcclxuICAgICAgJHNjb3BlLml0ZW0gPSBleHBvcnRMaW5rSGVscGVyLnJlbG9hZEl0ZW0oJHNjb3BlLnByZUluaXRJdGVtKTtcclxuICAgICAgaWYoJHNjb3BlLml0ZW0gPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgc2V0RnVsbFN0YXRzKCk7XHJcbiAgICAgICR3aW5kb3cuZG9jdW1lbnQudGl0bGUgPSAnZG5nZWFyc2ltIHwgJyArICRzY29wZS5pdGVtLm5hbWU7XHJcbiAgICAgIGlmKCRzY29wZS5pdGVtLml0ZW1Tb3VyY2UgIT0gJ2N1c3RvbScpIHtcclxuICAgICAgXHJcbiAgICAgICAgaWYoJHNjb3BlLml0ZW0udHlwZU5hbWUgPT0gJ3NraWxscycpIHtcclxuICAgICAgICAgIGlmKCEkc2NvcGUuaXRlbS5wdmUgfHwgJHNjb3BlLml0ZW0ucHZlICE9ICdwdnAnKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pdGVtLnB2ZSA9ICdwdmUnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS5pdGVtLnB2ZSA9ICdwdnAnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGlmKCRzY29wZS5pdGVtLm5lZWRKb2JDbGFzcyA+IDApIHtcclxuICAgICAgICAgICAgZ2V0Sm9iTmFtZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBzZXRGaWxlTmFtZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZXR1cFRhYnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldHVwVGFicygpIHtcclxuICAgIHZhciBpdGVtRGF0YSA9IGl0ZW1GYWN0b3J5LmdldEl0ZW1EYXRhKCRzY29wZS5pdGVtKTtcclxuICAgIGlmKGl0ZW1EYXRhLkRpc2pvaW50RHJvcDEgPiAwKSB7XHJcbiAgICAgICRzY29wZS5jYW5FeHRyYWN0ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoKGl0ZW1EYXRhLlR5cGUgPT0gMCB8fCBpdGVtRGF0YS5UeXBlID09IDEpICYmICRzY29wZS5pdGVtLmVuY2hhbnRtZW50TnVtID4gMCkge1xyXG4gICAgICAkc2NvcGUuY2FuVHJhbnNmZXIgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZigkc2NvcGUuaXRlbS5zZXRJZCkge1xyXG4gICAgICAkc2NvcGUuaXNJblNldCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKCRzY29wZS5pdGVtLnR5cGVJZCA9PSA1KSB7XHJcbiAgICAgICRzY29wZS5pc1BsYXRlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoJHNjb3BlLml0ZW0udHlwZUlkID09IDQ2IHx8ICRzY29wZS5pdGVtLnR5cGVJZCA9PSA4IHx8ICRzY29wZS5pdGVtLnR5cGVJZCA9PSAxMTIgfHwgJHNjb3BlLml0ZW0udHlwZUlkID09IDEyMiB8fCAkc2NvcGUuaXRlbS50eXBlSWQgPT0gMTQyKSB7XHJcbiAgICAgICRzY29wZS5oYXNDb250ZW50cyA9IHRydWU7XHJcbiAgICAgICRzY29wZS5kZXRhaWwgPSAnY29udGVudHMnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZigkc2NvcGUuaXRlbS50eXBlTmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICRzY29wZS5jYW5Vc2UgPSB0cnVlO1xyXG4gICAgICAkc2NvcGUuZGV0YWlsID0gJ3VzZSc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKCRzY29wZS5jYW5FeHRyYWN0KSB7XHJcbiAgICAgICRzY29wZS5kZXRhaWwgPSAnZXh0cmFjdCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKCRzY29wZS5jYW5UcmFuc2Zlcikge1xyXG4gICAgICAkc2NvcGUuZGV0YWlsID0gJ3RyYW5zZmVyJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYoJHNjb3BlLmlzUGxhdGUpIHtcclxuICAgICAgJHNjb3BlLmRldGFpbCA9ICdwbGF0ZSc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgJHNjb3BlLmRldGFpbCA9ICdzaG9wcyc7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNldEZpbGVOYW1lKCkge1xyXG4gICAgaWYoISRzY29wZS5pdGVtLmZpbGVOYW1lKSB7XHJcbiAgICAgIGlmKCRzY29wZS5pdGVtLml0ZW1Tb3VyY2UgaW4gaXRlbXMgJiYgaXRlbXNbJHNjb3BlLml0ZW0uaXRlbVNvdXJjZV0ubWFpbkRudCkge1xyXG4gICAgICAgICRzY29wZS5pdGVtLmZpbGVOYW1lID0gaXRlbXNbJHNjb3BlLml0ZW0uaXRlbVNvdXJjZV0ubWFpbkRudC5yZXBsYWNlKCcubHpqc29uJywgJycpLnJlcGxhY2UoJy5qc29uJywgJycpLnJlcGxhY2UoJy5vcHRpbWlzZWQnLCAnJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2V0RnVsbFN0YXRzKCkge1xyXG4gICAgLy8gZnVsbCBzdGF0cyBhcmUgY2xlYXJlZCB3aGVuIHB1Ymxpc2hpbmcgYnVpbGRzXHJcbiAgICAkc2NvcGUuaXRlbS5mdWxsU3RhdHMgPSAkc2NvcGUuaXRlbS5zdGF0cztcclxuICAgIFxyXG4gICAgaWYoJHNjb3BlLml0ZW0uZW5jaGFudG1lbnRTdGF0cyAhPSBudWxsICYmICRzY29wZS5pdGVtLmVuY2hhbnRtZW50U3RhdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAkc2NvcGUuaXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKCRzY29wZS5pdGVtLmVuY2hhbnRtZW50U3RhdHMsICRzY29wZS5pdGVtLmZ1bGxTdGF0cyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKCRzY29wZS5pdGVtLnNwYXJrU3RhdHMgIT0gbnVsbCAmJiAkc2NvcGUuaXRlbS5zcGFya1N0YXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgJHNjb3BlLml0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cygkc2NvcGUuaXRlbS5zcGFya1N0YXRzLCAkc2NvcGUuaXRlbS5mdWxsU3RhdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiByZXBvcnRQcm9ncmVzcyhtc2cpIHtcclxuICAgIC8vICRzY29wZS5wcm9ncmVzcyArPSAnfCcgKyBtc2c7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncHJvZ3Jlc3M6ICcgKyBtc2cpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRCdWlsZHMoKSB7XHJcbiAgICB2YXIgYnVpbGRzID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICAkc2NvcGUuYnVpbGRzID0gYnVpbGRzO1xyXG4gIH1cclxufV0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0V4cG9ydEN0cmwnLCBcclxuICBbJyRzY29wZScsJyR3aW5kb3cnLCdzYXZlSGVscGVyJyxcclxuICAgZnVuY3Rpb24oJHNjb3BlLCAkd2luZG93LCBzYXZlSGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgIFxyXG4gIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ2RlZmF1bHQtYmFjayc7XHJcbiAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCBFWFBPUlQnO1xyXG4gIFxyXG4gIHZhciByYXdTYXZlZERhdGEgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICAkc2NvcGUuZXhwb3J0RGF0YSA9IEpTT04uc3RyaW5naWZ5KHJhd1NhdmVkRGF0YSwgbnVsbCwgMSk7XHJcbiAgXHJcbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzYXZlZEl0ZW1zJywgTFpTdHJpbmcuY29tcHJlc3NUb1VURjE2KCRzY29wZS5leHBvcnREYXRhKSk7XHJcbiAgfVxyXG59XSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0hlYWRlckN0cmwnLCBcclxuW1xyXG4gIGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICB9XHJcbl0pLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSGVhZGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvbmF2L2hlYWRlci5odG1sJyxcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdOYXZDdHJsJywgXHJcbiAgWyckc2NvcGUnLCckbG9jYXRpb24nLCd0cmFuc2xhdGlvbnMnLCdyZWdpb24nLCdpdGVtQ2F0ZWdvcnknLCdzYXZlSGVscGVyJyxcclxuICBmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLHRyYW5zbGF0aW9ucyxyZWdpb24saXRlbUNhdGVnb3J5LHNhdmVIZWxwZXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgdmFyIG5vTG9jYXRpb25NZW51ID0gW107XHJcbiAgICAgIHZhciBub3JtYWxNZW51ID0gW1xyXG4gICAgICAgIHtwYXRoOiAnYnVpbGRzJywgbmFtZTonYnVpbGRzJywgaWNvbjogJ21lbnUtaGFtYnVyZ2VyJ30sXHJcbiAgICAgICAge3BhdGg6ICdzZWFyY2gnLCBuYW1lOidzZWFyY2gnLCBpY29uOiAnc2VhcmNoJ30sXHJcbiAgICAgICAgXTtcclxuICAgICAgXHJcbiAgICAgIHZhciBidWlsZEFjdGlvbiA9IHtwYXRoOiAnYnVpbGQnLCBuYW1lOididWlsZCd9O1xyXG4gICAgICBcclxuICAgICAgdmFyIHdpdGhCdWlsZE1lbnUgPSBbXHJcbiAgICAgICAge3BhdGg6ICdidWlsZHMnLCBuYW1lOididWlsZHMnLCBpY29uOiAnbWVudS1oYW1idXJnZXInfSxcclxuICAgICAgICB7cGF0aDogJ3NlYXJjaCcsIG5hbWU6J3NlYXJjaCcsIGljb246ICdzZWFyY2gnfSxcclxuICAgICAgICBidWlsZEFjdGlvbixcclxuICAgICAgICBdO1xyXG4gICAgICAgIFxyXG4gICAgICByZWdpb24uaW5pdCgpO1xyXG4gICAgXHJcbiAgICAgICRzY29wZS5pc1NlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkbG9jYXRpb24ucGF0aCgpLmluZGV4T2YoJy9zZWFyY2gnKSA9PSAwO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgICRzY29wZS5pc0xvYWRpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25zLnN0YXJ0ZWRMb2FkaW5nICYmIFxyXG4gICAgICAgICAgICAgICF0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSAmJlxyXG4gICAgICAgICAgICAgIHJlZ2lvbi50bG9jYXRpb24gIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgIHJlZ2lvbi50bG9jYXRpb24udXJsICE9ICcnICYmXHJcbiAgICAgICAgICAgICAgISRzY29wZS5ub1JlZ2lvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUubm9SZWdpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gcmVnaW9uLmRudExvY2F0aW9uID09IG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICRzY29wZS5pc0h0dHBPbmx5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICE9ICdodHRwczonICYmIGxvY2F0aW9uLmhvc3RuYW1lICE9ICdsb2NhbGhvc3QnO1xyXG4gICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICRzY29wZS5nZXRBY3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBtZW51ID0gbnVsbDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGN1cnJlbnRCdWlsZCA9IHNhdmVIZWxwZXIuZ2V0Q3VycmVudEJ1aWxkKCk7XHJcbiAgICAgICAgICBpZihjdXJyZW50QnVpbGQpIHtcclxuICAgICAgICAgICAgaWYoISRzY29wZS5zYXZlZEl0ZW1zIHx8ICEoY3VycmVudEJ1aWxkIGluICRzY29wZS5zYXZlZEl0ZW1zKSkge1xyXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIHNhdmVkIGl0ZW1zJyk7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNhdmVkSXRlbXMgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoIShjdXJyZW50QnVpbGQgaW4gJHNjb3BlLnNhdmVkSXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgY3VycmVudEJ1aWxkID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICBpZihyZWdpb24uZG50TG9jYXRpb24gIT0gbnVsbCAmJiByZWdpb24uZG50TG9jYXRpb24udXJsID09ICcnKSB7XHJcbiAgICAgICAgICAgIG1lbnUgPSBub0xvY2F0aW9uTWVudTsgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKHJlZ2lvbi50bG9jYXRpb24gIT0gbnVsbCAmJiByZWdpb24udGxvY2F0aW9uLnVybCA9PSAnJykge1xyXG4gICAgICAgICAgICBtZW51ID0gbm9Mb2NhdGlvbk1lbnU7IFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihjdXJyZW50QnVpbGQgJiYgY3VycmVudEJ1aWxkICE9ICdudWxsJykge1xyXG4gICAgICAgICAgICBtZW51ID0gd2l0aEJ1aWxkTWVudTtcclxuICAgICAgICAgICAgYnVpbGRBY3Rpb24ucGF0aCA9ICdidWlsZC8nICsgY3VycmVudEJ1aWxkO1xyXG4gICAgICAgICAgICBidWlsZEFjdGlvbi5uYW1lID0gY3VycmVudEJ1aWxkO1xyXG4gICAgICAgICAgICBpZihjdXJyZW50QnVpbGQgaW4gJHNjb3BlLnNhdmVkSXRlbXMpIHtcclxuICAgICAgICAgICAgICBidWlsZEFjdGlvbi5idWlsZCA9ICRzY29wZS5zYXZlZEl0ZW1zW2N1cnJlbnRCdWlsZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoJGxvY2F0aW9uLnBhdGgoKSA9PSAnL3ZpZXctZ3JvdXAnIHx8IHJlZ2lvbi5kbnRMb2NhdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG1lbnUgPSBub3JtYWxNZW51O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1lbnUgPSBub3JtYWxNZW51O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgcGF0aCA9ICRsb2NhdGlvbi5wYXRoO1xyXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1lbnUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHZhbHVlLmV4dHJhQ3NzO1xyXG4gICAgICAgICAgICBpZihwYXRoICYmIHBhdGgubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICBpZih2YWx1ZS5wYXRoLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5leHRyYUNzcyA9ICdhY3RpdmUnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHZhbHVlLnBhdGggJiYgdmFsdWUucGF0aC5sZW5ndGggPiAxICYmIHBhdGguaW5kZXhPZignLycgKyB2YWx1ZS5wYXRoKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgaWYodmFsdWUucGF0aCAhPSAnYnVpbGRzJyB8fCBwYXRoID09ICcvYnVpbGRzJykge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuZXh0cmFDc3MgPSAnYWN0aXZlJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gbWVudTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZXgpIHtcclxuICAgICAgICAgICRzY29wZS5zaW1FcnJvciA9IGV4Lm1lc3NhZ2U7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXRjaChleCkge1xyXG4gICAgICAkc2NvcGUuc2ltRXJyb3IgPSBleC5tZXNzYWdlO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGV4KTtcclxuICAgIH1cclxuICB9XHJcbl0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbU5hdicsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL25hdi9uYXYuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdTZXR1cEN0cmwnLCBcclxuICBbJyRzY29wZScsJyR3aW5kb3cnLCckcm91dGUnLCckdGltZW91dCcsJ3RyYW5zbGF0aW9ucycsJ2RudEluaXQnLCdkbnRSZXNldCcsJ3JlZ2lvbicsXHJcbiAgIGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdywgJHJvdXRlLCAkdGltZW91dCwgdHJhbnNsYXRpb25zLCBkbnRJbml0LCBkbnRSZXNldCwgcmVnaW9uKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgIFxyXG4gIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ2RlZmF1bHQtYmFjayc7XHJcbiAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCBTRVRVUCc7XHJcbiAgXHJcbiAgJHNjb3BlLmFkdmFuY2VkU2V0dXAgPSBmYWxzZTtcclxuICAkc2NvcGUuaXNMb2FkaW5nID0gdHJhbnNsYXRpb25zLnN0YXJ0ZWRMb2FkaW5nICYmICF0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKTtcclxuICAkc2NvcGUudHJhbnNsYXRpb25SZXN1bHRzID0gW107XHJcbiAgJHNjb3BlLmhvc3RlZEZpbGVzID0gcmVnaW9uLmhvc3RlZEZpbGVzO1xyXG4gIFxyXG4gIHZhciBub0xvY2F0aW9uID0gJyc7XHJcbiAgdmFyIHNlc3Npb25Mb2NhdGlvbiA9IHJlZ2lvbi5hbHRlcm5hdGl2ZUZpbGVzLnVybDtcclxuICBpZihzZXNzaW9uTG9jYXRpb24gPT0gbnVsbCkge1xyXG4gICAgc2Vzc2lvbkxvY2F0aW9uID0gbm9Mb2NhdGlvbjtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmxvY2F0aW9uID0gc2Vzc2lvbkxvY2F0aW9uO1xyXG4gIGlmKCRzY29wZS5sb2NhdGlvbiA9PSBub0xvY2F0aW9uKSB7XHJcbiAgICAkc2NvcGUudGVzdFJlc3VsdHMgPSBbJ05vIGxvY2F0aW9uIHNldCddO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgICRzY29wZS50ZXN0UmVzdWx0cyA9IFsnVXNpbmcgbG9jYXRpb24gJyArICRzY29wZS5sb2NhdGlvbl07XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgJHNjb3BlLmxvY2F0aW9uID0gdXJsO1xyXG4gICAgJHNjb3BlLmlzTG9hZGluZyA9IHRydWU7XHJcbiAgICAkc2NvcGUuc2F2ZUxvY2F0aW9uKCk7XHJcbiAgICBkbnRSZXNldCgpO1xyXG5cclxuICAgICRzY29wZS50cmFuc2xhdGlvblJlc3VsdHMgPSBbXTtcclxuICAgIHZhciBleGlzdGluZ0ZpbGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVUlTdHJpbmdzX2ZpbGUnKTtcclxuICAgIGlmKGV4aXN0aW5nRmlsZSA9PSBudWxsIHx8IGV4aXN0aW5nRmlsZS5pbmRleE9mKHVybCkgPT0gLTEpIHtcclxuICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgnVUlTdHJpbmdzJyk7XHJcbiAgICB9XHJcbiAgICB0cmFuc2xhdGlvbnMucmVzZXQoKTtcclxuICAgIHRyYW5zbGF0aW9ucy5sb2NhdGlvbiA9IHVybDtcclxuICAgIHRyYW5zbGF0aW9ucy5pbml0KHByb2dyZXNzVHJhbnNsYXRpb25zLCB0cmFuc2xhdGlvbnNTdGF0dXMpO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUucmVzZXRTZXNzaW9uRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnRlc3RSZXN1bHRzID0gWydzZXNzaW9uIGRhdGEgcmVzZXQuLiByZWxvYWRpbmcgcGFnZSddO1xyXG4gICAgcmVnaW9uLnRsb2NhdGlvbiA9IG51bGw7XHJcbiAgICByZWdpb24uZG50TG9jYXRpb24gPSBudWxsO1xyXG4gICAgdHJhbnNsYXRpb25zLnJlc2V0KCk7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICB0aGlzLnNhdmVMb2NhdGlvbigpO1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7ICAgXHJcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcclxuICAgICAgbG9jYXRpb24ucmVsb2FkKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5sb2FkVWlTdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS50cmFuc2xhdGlvblJlc3VsdHMgPSBbXTtcclxuICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ1VJU3RyaW5ncycpO1xyXG4gICAgZG50UmVzZXQoKTtcclxuICAgIHRyYW5zbGF0aW9ucy5yZXNldCgpO1xyXG4gICAgdHJhbnNsYXRpb25zLmxvY2F0aW9uID0gcmVnaW9uLnRsb2NhdGlvbi51cmw7XHJcbiAgICB0cmFuc2xhdGlvbnMuaW5pdChwcm9ncmVzc1RyYW5zbGF0aW9ucywgdHJhbnNsYXRpb25zU3RhdHVzKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gdHJhbnNsYXRpb25zU3RhdHVzKCkge1xyXG4gICAgcHJvZ3Jlc3NUcmFuc2xhdGlvbnMoJ2N1cnJlbnQgdHJhbnNsYXRpb25zIGNvbnRhaW4gd29yZHMgbGlrZSAnICsgdHJhbnNsYXRpb25zLnRyYW5zbGF0ZSgzMjkpICsgJywgJyArIHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoMzIzKSArICcgYW5kICcgKyB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKDMzNSkpO1xyXG4gICAgJHNjb3BlLmlzTG9hZGluZyA9IGZhbHNlO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcm9ncmVzcyhtc2cpIHtcclxuICAgICR0aW1lb3V0KFxyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZigkc2NvcGUudGVzdFJlc3VsdHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgJHNjb3BlLnRlc3RSZXN1bHRzLnB1c2gobXNnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcm9ncmVzc1RyYW5zbGF0aW9ucyhtc2cpIHtcclxuICAgICR0aW1lb3V0KFxyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZigkc2NvcGUudHJhbnNsYXRpb25SZXN1bHRzICE9IG51bGwpIHtcclxuICAgICAgICAgICRzY29wZS50cmFuc2xhdGlvblJlc3VsdHMucHVzaChtc2cpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5zYXZlTG9jYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgIGRudFJlc2V0KCk7XHJcbiAgICBpZigkc2NvcGUubG9jYXRpb24gIT0gbm9Mb2NhdGlvbikge1xyXG4gICAgICByZWdpb24uc2V0Q3VzdG9tVXJsKCRzY29wZS5sb2NhdGlvbik7XHJcbiAgICAgIFxyXG4gICAgICByZWdpb24uaW5pdCgpO1xyXG4gICAgICBpZihyZWdpb24uYWx0ZXJuYXRpdmVGaWxlcy5yZWdpb24gPT0gcmVnaW9uLnRsb2NhdGlvbi5yZWdpb24pIHtcclxuICAgICAgICB0cmFuc2xhdGlvbnMucmVzZXQoKTtcclxuICAgICAgICB0cmFuc2xhdGlvbnMuaW5pdChwcm9ncmVzc1RyYW5zbGF0aW9ucywgdHJhbnNsYXRpb25zU3RhdHVzKTtcclxuICAgICAgfVxyXG4gICAgICAkc2NvcGUudGVzdFJlc3VsdHMgPSBbXHJcbiAgICAgICAgJ0xvY2F0aW9uIHNhdmVkJyxcclxuICAgICAgICAnVXNpbmcgbG9jYXRpb24gJyArICRzY29wZS5sb2NhdGlvbl07XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS50ZXN0TG9jYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKCRzY29wZS5sb2NhdGlvbiAhPSBub0xvY2F0aW9uKSB7XHJcbiAgICAgICRzY29wZS50ZXN0UmVzdWx0cyA9IFtcclxuICAgICAgICAnVXNpbmcgbG9jYXRpb24gJyArICRzY29wZS5sb2NhdGlvbixcclxuICAgICAgICAnTG9hZGluZyBhbGwgZGF0YSB1c2VkIGJ5IHRoZSBhcHAnXTtcclxuXHJcbiAgICAgIHRyYW5zbGF0aW9ucy5pbml0KHByb2dyZXNzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZG50SW5pdChwcm9ncmVzcyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufV0pO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0J1aWxkU2VhcmNoQ3RybCcsIFsnJHJvdXRlUGFyYW1zJywnJGxvY2F0aW9uJywnJHRpbWVvdXQnLCdvbmxpbmVTZXJ2aWNlJywnam9icycsIGJ1aWxkU2VhcmNoXSk7XHJcblxyXG5mdW5jdGlvbiBidWlsZFNlYXJjaCgkcm91dGVQYXJhbXMsJGxvY2F0aW9uLCR0aW1lb3V0LG9ubGluZVNlcnZpY2Usam9icykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZtLm1heERpc3BsYXkgPSAxNTtcclxuICB2bS50b3RhbE51bVJlc3VsdHMgPSAwO1xyXG4gIFxyXG4gIGpvYnMuaW5pdChudWxsLCBmdW5jdGlvbigpIHtcclxuICAgIGlmKCRyb3V0ZVBhcmFtcy5qb2JJZCkge1xyXG4gICAgICB2bS5qb2IgPSBqb2JzLmdldEJ5SWQoJHJvdXRlUGFyYW1zLmpvYklkKTtcclxuICAgICAgZ2V0Q2xhc3NCdWlsZHMoKTtcclxuICAgIH0gXHJcbiAgfSlcclxuICBcclxuICB0aGlzLnNldEpvYiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2pvYklkJywgdm0uam9iLmlkKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnNob3dNb3JlUmVzdWx0cyA9IGZ1bmN0aW9uKGV4dHJhKSB7XHJcbiAgICB2bS5tYXhEaXNwbGF5ID0gdm0udG90YWxOdW1SZXN1bHRzICsgZXh0cmE7XHJcbiAgICB2bS50b3RhbE51bVJlc3VsdHMgPSAwO1xyXG4gIH1cclxuICBcclxuICB2bS5hbGxSZXN1bHRzID0gbnVsbDtcclxuICB2bS5nZXRGaWx0ZXJlZEJ1aWxkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICAvLyBpbml0XHJcbiAgICBpZih2bS5hbGxSZXN1bHRzID09IG51bGwpIHtcclxuICAgICAgdm0uYWxsUmVzdWx0cyA9IFtdO1xyXG4gICAgICBmb3IodmFyIHVpZCBpbiB2bS5qb2JCdWlsZHMpIHtcclxuICAgICAgICBmb3IodmFyIGJ1aWxkTmFtZSBpbiB2bS5qb2JCdWlsZHNbdWlkXSkge1xyXG4gICAgICAgICAgdm0uYWxsUmVzdWx0cy5wdXNoKHtcclxuICAgICAgICAgICAgdWlkOiB1aWQsXHJcbiAgICAgICAgICAgIG5hbWU6IGJ1aWxkTmFtZSxcclxuICAgICAgICAgICAgZGF0YTogdm0uam9iQnVpbGRzW3VpZF1bYnVpbGROYW1lXVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLmFsbFJlc3VsdHMubGVuZ3RoOysraSkge1xyXG4gICAgICBcclxuICAgICAgdmFyIHJlc3VsdCA9IHZtLmFsbFJlc3VsdHNbaV07XHJcbiAgICAgIGlmKHZtLmZpbHRlciAmJiB2bS5maWx0ZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBmID0gdm0uZmlsdGVyLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgaWYocmVzdWx0Lm5hbWUudG9VcHBlckNhc2UoKS5pbmRleE9mKGYpID09IC0xKSB7XHJcbiAgICAgICAgICBpZighcmVzdWx0LmRhdGEuZ3VpbGQgfHxcclxuICAgICAgICAgICAgIHJlc3VsdC5kYXRhLmd1aWxkLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmKSA9PSAtMSkge1xyXG5cclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcclxuXHJcbiAgICAgIGlmKHJlc3VsdHMubGVuZ3RoID49IHZtLm1heERpc3BsYXkpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS50b3RhbE51bVJlc3VsdHMgPSByZXN1bHRzLmxlbmd0aDtcclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRDbGFzc0J1aWxkcygpIHtcclxuICAgIGlmKHZtLmpvYikge1xyXG4gICAgICBvbmxpbmVTZXJ2aWNlLmdldENsYXNzQnVpbGRzKHZtLmpvYikudGhlbihmdW5jdGlvbihidWlsZHMpIHtcclxuICAgICAgICBpZihidWlsZHMpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnb3QgYnVpbGRzJywgYnVpbGRzKTtcclxuICAgICAgICAgIHZtLmpvYkJ1aWxkcyA9IGJ1aWxkcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbm8gYnVpbGRzJyk7XHJcbiAgICAgICAgICB2bS5qb2JCdWlsZHMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDdHJsJywgWyckbG9jYXRpb24nLCAnJHJvdXRlUGFyYW1zJywgJ29ubGluZVNlcnZpY2UnLCBwcm9maWxlXSk7XHJcblxyXG5mdW5jdGlvbiBwcm9maWxlKCRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBvbmxpbmVTZXJ2aWNlLCBzYXZlSGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0udWlkID0gJHJvdXRlUGFyYW1zLnVpZDtcclxuICBcclxuICBnZXRTYXZlZEJ1aWxkcygpO1xyXG4gIGdldFByb2ZpbGUoKTtcclxuICBcclxuICBmdW5jdGlvbiBnZXRTYXZlZEJ1aWxkcygpIHtcclxuICAgIG9ubGluZVNlcnZpY2UuZ2V0VXNlckJ1aWxkcyh2bS51aWQpLnRoZW4oZnVuY3Rpb24oYnVpbGRzKSB7XHJcbiAgICAgIGlmKGJ1aWxkcykge1xyXG4gICAgICAgIHZtLnN0b3JlZEJ1aWxkcyA9IGJ1aWxkcztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5zdG9yZWRCdWlsZHMgPSB7fTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFByb2ZpbGUoKSB7XHJcbiAgICBvbmxpbmVTZXJ2aWNlLmdldFByb2ZpbGUodm0udWlkKS50aGVuKGZ1bmN0aW9uKHByb2ZpbGUpIHtcclxuICAgICAgaWYocHJvZmlsZSkge1xyXG4gICAgICAgIHZtLnByb2ZpbGUgPSBwcm9maWxlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHZtLnByb2ZpbGUgPSB7fTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMubG9hZCA9IGZ1bmN0aW9uKGJ1aWxkTmFtZSwgYnVpbGQpIHtcclxuXHJcbiAgICB2YXIgbmV3R3JvdXBOYW1lID0gc2F2ZUhlbHBlci5pbXBvcnRHcm91cChidWlsZE5hbWUsIGJ1aWxkLml0ZW1zKTtcclxuICAgIFxyXG4gICAgc2F2ZUhlbHBlci5zYXZlQnVpbGQoXHJcbiAgICAgIG5ld0dyb3VwTmFtZSwgXHJcbiAgICAgIG5ld0dyb3VwTmFtZSxcclxuICAgICAgYnVpbGQpO1xyXG4gICAgICBcclxuICAgIHZtLmJ1aWxkcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgXHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkLycgKyBuZXdHcm91cE5hbWUpO1xyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ1B1Ymxpc2hDdHJsJywgWyckbG9jYXRpb24nLCAnc2F2ZUhlbHBlcicsICdvbmxpbmVTZXJ2aWNlJywgJyRyb3V0ZVBhcmFtcycsICdyZWdpb24nLCBwdWJsaXNoXSk7XHJcblxyXG5mdW5jdGlvbiBwdWJsaXNoKCRsb2NhdGlvbiwgc2F2ZUhlbHBlciwgb25saW5lU2VydmljZSwgJHJvdXRlUGFyYW1zLCByZWdpb24pIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB2bS5zaG93ID0gJHJvdXRlUGFyYW1zLnNob3c7XHJcbiAgXHJcbiAgb25saW5lU2VydmljZS5sb2dpbigpLnRoZW4oZnVuY3Rpb24odXNlcikge1xyXG4gICAgZ2V0U2F2ZWRCdWlsZHMoKTtcclxuICAgIGdldFByb2ZpbGUoKTtcclxuICBcclxuICAgIHZtLmJ1aWxkcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFNhdmVkQnVpbGRzKCkge1xyXG4gICAgdmFyIHVzZXIgPSB2bS5nZXRVc2VyKCk7XHJcbiAgICBpZih1c2VyKSB7XHJcbiAgICAgIG9ubGluZVNlcnZpY2UuZ2V0VXNlckJ1aWxkcyh1c2VyLnVpZCkudGhlbihmdW5jdGlvbihidWlsZHMpIHtcclxuICAgICAgICBpZihidWlsZHMpIHtcclxuICAgICAgICAgIHZtLnN0b3JlZEJ1aWxkcyA9IGJ1aWxkcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB2bS5zdG9yZWRCdWlsZHMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRQcm9maWxlKCkge1xyXG4gICAgdmFyIHVzZXIgPSB2bS5nZXRVc2VyKCk7XHJcbiAgICBpZih1c2VyKSB7XHJcbiAgICAgIG9ubGluZVNlcnZpY2UuZ2V0UHJvZmlsZSh1c2VyLnVpZCkudGhlbihmdW5jdGlvbihwcm9maWxlKSB7XHJcbiAgICAgICAgaWYocHJvZmlsZSkge1xyXG4gICAgICAgICAgdm0ucHJvZmlsZSA9IHByb2ZpbGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdm0ucHJvZmlsZSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2F2ZVByb2ZpbGUgPSBmdW5jdGlvbigpIHtcclxuICAgIG9ubGluZVNlcnZpY2Uuc2F2ZVByb2ZpbGUodm0ucHJvZmlsZSkudGhlbihnZXRQcm9maWxlKS5jYXRjaChoYW5kbGVFcnJvcik7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG9ubGluZVNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnNhdmUgPSBmdW5jdGlvbihidWlsZE5hbWUsIGJ1aWxkKSB7XHJcbiAgICBidWlsZC5sYXN0VXBkYXRlID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcclxuICAgIG9ubGluZVNlcnZpY2Uuc2F2ZUJ1aWxkKGJ1aWxkTmFtZSwgYnVpbGQpLnRoZW4oZ2V0U2F2ZWRCdWlsZHMpLmNhdGNoKGhhbmRsZUVycm9yKTtcclxuICAgIHZtLnB1Ymxpc2hCdWlsZCA9IG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc3RhcnRQdWJsaXNoID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICBpZihidWlsZE5hbWUgaW4gdm0uc3RvcmVkQnVpbGRzKSB7XHJcbiAgICAgIGlmKCF2bS5idWlsZHNbYnVpbGROYW1lXS5yZWdpb24pIHtcclxuICAgICAgICB2bS5idWlsZHNbYnVpbGROYW1lXS5yZWdpb24gPSB2bS5zdG9yZWRCdWlsZHNbYnVpbGROYW1lXS5yZWdpb247XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKCF2bS5idWlsZHNbYnVpbGROYW1lXS5hYm91dCkge1xyXG4gICAgICAgIHZtLmJ1aWxkc1tidWlsZE5hbWVdLmFib3V0ID0gdm0uc3RvcmVkQnVpbGRzW2J1aWxkTmFtZV0uYWJvdXQ7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKCF2bS5idWlsZHNbYnVpbGROYW1lXS5ndWlsZCkge1xyXG4gICAgICAgIHZtLmJ1aWxkc1tidWlsZE5hbWVdLmd1aWxkID0gdm0uc3RvcmVkQnVpbGRzW2J1aWxkTmFtZV0uZ3VpbGQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoIXZtLmJ1aWxkc1tidWlsZE5hbWVdLnJlZ2lvbikge1xyXG4gICAgICB2bS5idWlsZHNbYnVpbGROYW1lXS5yZWdpb24gPSByZWdpb24uZG50TG9jYXRpb24ucmVnaW9uO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5wdWJsaXNoQnVpbGQgPSBidWlsZE5hbWU7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycikge1xyXG4gICAgY29uc29sZS5sb2coZXJyKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5kZWxldGVBY2NvdW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBvbmxpbmVTZXJ2aWNlLmRlbGV0ZUFjY291bnQodm0uc3RvcmVkQnVpbGRzKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRCdWlsZExpbWl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5wcm9maWxlICYmIHZtLnByb2ZpbGUubWF4QnVpbGRzKSB7XHJcbiAgICAgIHJldHVybiB2bS5wcm9maWxlLm1heEJ1aWxkcztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gMTU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0TnVtU3RvcmVkQnVpbGRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gXy5zaXplKHZtLnN0b3JlZEJ1aWxkcyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0TnVtQnVpbGRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gXy5zaXplKHZtLmJ1aWxkcyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMubG9hZCA9IGZ1bmN0aW9uKGJ1aWxkTmFtZSwgYnVpbGQpIHtcclxuXHJcbiAgICB2YXIgbmV3R3JvdXBOYW1lID0gc2F2ZUhlbHBlci5pbXBvcnRHcm91cChidWlsZE5hbWUsIGJ1aWxkLml0ZW1zKTtcclxuICAgIFxyXG4gICAgc2F2ZUhlbHBlci5zYXZlQnVpbGQoXHJcbiAgICAgIG5ld0dyb3VwTmFtZSwgXHJcbiAgICAgIG5ld0dyb3VwTmFtZSxcclxuICAgICAgYnVpbGQpO1xyXG4gICAgICBcclxuICAgIHZtLmJ1aWxkcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnNpZ25PdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIG9ubGluZVNlcnZpY2Uuc2lnbk91dCgpO1xyXG4gIH1cclxuICBcclxuICB2bS5kZWxldGVMb2NhbCA9IGZ1bmN0aW9uKGJ1aWxkTmFtZSkge1xyXG4gICAgdm0ubG9jYWxUb0RlbGV0ZSA9IGJ1aWxkTmFtZTtcclxuICB9XHJcbiAgXHJcbiAgdm0uZ2V0QWxsQnVpbGROYW1lcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGFsbEtleXMgPSBfLmtleXModm0uYnVpbGRzKS5jb25jYXQoXy5rZXlzKHZtLnN0b3JlZEJ1aWxkcykpO1xyXG4gICAgcmV0dXJuIF8udW5pcShhbGxLZXlzLnNvcnQoKSwgdHJ1ZSk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLnJlYWxseURlbGV0ZUxvY2FsID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICBzYXZlSGVscGVyLnVwZGF0ZWRTYXZlZEl0ZW1zKGJ1aWxkTmFtZSwgW10pO1xyXG4gICAgdm0ubG9jYWxUb0RlbGV0ZSA9IG51bGw7XHJcbiAgICB2bS5idWlsZHMgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICB9XHJcbiAgXHJcbiAgdm0uZGVsZXRlU2VydmVyID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICB2bS5zZXJ2ZXJUb0RlbGV0ZSA9IGJ1aWxkTmFtZTtcclxuICB9XHJcbiAgXHJcbiAgdm0ucmVhbGx5RGVsZXRlU2VydmVyID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICBvbmxpbmVTZXJ2aWNlLmRlbGV0ZUJ1aWxkKGJ1aWxkTmFtZSwgdm0uc3RvcmVkQnVpbGRzW2J1aWxkTmFtZV0pLnRoZW4oZ2V0U2F2ZWRCdWlsZHMpO1xyXG4gICAgdm0uc2VydmVyVG9EZWxldGUgPSBudWxsO1xyXG4gIH1cclxuICBcclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ1B1Ymxpc2hlZEN0cmwnLCBbJ29ubGluZVNlcnZpY2UnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICdzYXZlSGVscGVyJywgJ3N0YXRIZWxwZXInLCBwdWJsaXNoZWRdKTtcclxuXHJcbmZ1bmN0aW9uIHB1Ymxpc2hlZChvbmxpbmVTZXJ2aWNlLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgc2F2ZUhlbHBlciwgc3RhdEhlbHBlcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHZtLnVpZCA9ICRyb3V0ZVBhcmFtcy51aWQ7XHJcbiAgdm0uYnVpbGROYW1lID0gJHJvdXRlUGFyYW1zLmJ1aWxkTmFtZTtcclxuICBcclxuICBnZXRCdWlsZCgpO1xyXG4gIGdldFByb2ZpbGUoKTtcclxuICBcclxuICB2bS5jb3B5TG9jYWxseSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG5ld0dyb3VwTmFtZSA9IHNhdmVIZWxwZXIuaW1wb3J0R3JvdXAodm0uYnVpbGROYW1lLCB2bS5idWlsZC5pdGVtcyk7XHJcbiAgICBcclxuICAgIHNhdmVIZWxwZXIuc2F2ZUJ1aWxkKFxyXG4gICAgICBuZXdHcm91cE5hbWUsIFxyXG4gICAgICBuZXdHcm91cE5hbWUsXHJcbiAgICAgIHZtLmJ1aWxkKTtcclxuICAgICAgXHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkLycgKyBuZXdHcm91cE5hbWUpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRQcm9maWxlKCkge1xyXG4gICAgb25saW5lU2VydmljZS5nZXRQcm9maWxlKHZtLnVpZCkudGhlbihmdW5jdGlvbihwcm9maWxlKSB7XHJcbiAgICAgIGlmKHByb2ZpbGUpIHtcclxuICAgICAgICB2bS5wcm9maWxlID0gcHJvZmlsZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5wcm9maWxlID0ge307XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRCdWlsZCgpIHtcclxuICAgIG9ubGluZVNlcnZpY2UuZ2V0QnVpbGQodm0udWlkLCB2bS5idWlsZE5hbWUpLnRoZW4oZnVuY3Rpb24oYnVpbGQpIHtcclxuICAgICAgaWYoYnVpbGQpIHtcclxuICAgICAgICB2bS5idWlsZCA9IGJ1aWxkO1xyXG4gICAgICAgIHZtLnN0YXRzID0gc3RhdEhlbHBlci5nZXRCdWlsZFN0YXRzKGJ1aWxkKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5idWlsZCA9IHt9O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignUmVnaW9uQ3RybCcsIFxyXG4gIFsnJHRpbWVvdXQnLCckcm91dGUnLCckcm91dGVQYXJhbXMnLCckbG9jYXRpb24nLCd0cmFuc2xhdGlvbnMnLCdyZWdpb24nLCckaHR0cCcsXHJcbiAgZnVuY3Rpb24oJHRpbWVvdXQsJHJvdXRlLCRyb3V0ZVBhcmFtcywkbG9jYXRpb24sdHJhbnNsYXRpb25zLHJlZ2lvbiwkaHR0cCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgXHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLm92ZXJyaWRlID0gcmVnaW9uLmdldE92ZXJyaWRlKCk7XHJcbiAgICByZWdpb24uaW5pdCgpO1xyXG4gICAgdHJhbnNsYXRpb25zLmluaXQoXHJcbiAgICAgIGZ1bmN0aW9uKG1zZykgeyBcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtc2cpO1xyXG4gICAgICB9LCBcclxuICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgdm0ucmVnaW9uID0gcmVnaW9uO1xyXG4gICAgdm0udEhvdmVyTG9jYXRpb24gPSByZWdpb24udGxvY2F0aW9uO1xyXG4gICAgdm0uaG92ZXJMb2NhdGlvbiA9IHJlZ2lvbi5kbnRMb2NhdGlvbjtcclxuICAgIHZtLmVkaXQgPSAocmVnaW9uLmRudExvY2F0aW9uID09IG51bGwpO1xyXG4gICAgdm0uZG50VmVyc2lvbiA9ICcnO1xyXG4gICAgc2V0RG50VmVyc2lvbigpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzZXREbnRWZXJzaW9uKCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyB2ZXJzaW9uIGZvciAnLCB2bS5yZWdpb24uZG50TG9jYXRpb24pO1xyXG4gICAgICBpZih2bS5yZWdpb24uZG50TG9jYXRpb24gJiYgdm0ucmVnaW9uLmRudExvY2F0aW9uLnVybCkge1xyXG4gICAgICAgICRodHRwLmdldCh2bS5yZWdpb24uZG50TG9jYXRpb24udXJsICsgJy9WZXJzaW9uLmNmZycpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgICBpZihyZXMgJiYgcmVzLmRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0xpbmVEZXRhaWxzID0gcmVzLmRhdGEuc3BsaXQoJ1xcclxcbicpO1xyXG4gICAgICAgICAgICBpZihuZXdMaW5lRGV0YWlscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICB2YXIgc3BhY2VEZXRhaWxzID0gbmV3TGluZURldGFpbHNbMF0uc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICBpZihzcGFjZURldGFpbHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdm0uZG50VmVyc2lvbiA9ICd2JyArIHNwYWNlRGV0YWlsc1sxXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5nZXREbnRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gcmVnaW9uLmRudExvY2F0aW9uO1xyXG4gICAgfTtcclxuICAgIHZtLmdldFRsb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gcmVnaW9uLnRsb2NhdGlvbjtcclxuICAgIH07XHJcbiAgICAgXHJcbiAgICB2bS5nZXRIb3N0ZWRGaWxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnZ2V0dGluZyBob3N0ZWQgZmlsZXMnKTtcclxuICAgICAgcmV0dXJuIHJlZ2lvbi5ob3N0ZWRGaWxlcztcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZtLmdldFdvcmxkTmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZih0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKDEwMTY5KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZtLnNldFRMb2NhdGlvbiA9IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgIHJlZ2lvbi5zZXRUTG9jYXRpb24obG9jYXRpb24pO1xyXG4gICAgICB2bS5lZGl0ID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2bS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgIGlmKCF2bS5vdmVycmlkZSkge1xyXG4gICAgICAgIHZtLnNldFRMb2NhdGlvbihudWxsKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoJHJvdXRlUGFyYW1zLnJlZ2lvbikge1xyXG4gICAgICAgICRyb3V0ZVBhcmFtcy5yZWdpb24gPSBsb2NhdGlvbi5yZWdpb247XHJcbiAgICAgICAgJHJvdXRlLnVwZGF0ZVBhcmFtcygkcm91dGVQYXJhbXMpO1xyXG4gICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZWdpb24uc2V0TG9jYXRpb24obG9jYXRpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIHZtLmVkaXQgPSBmYWxzZTtcclxuICAgICAgc2V0RG50VmVyc2lvbigpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdm0uc2V0T3ZlcnJpZGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICByZWdpb24uc2V0T3ZlcnJpZGUodmFsdWUpO1xyXG4gICAgICB2bS5vdmVycmlkZSA9IHZhbHVlO1xyXG4gICAgICB2bS5lZGl0ID0gdmFsdWU7XHJcbiAgICB9O1xyXG4gIH1cclxuXSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltUmVnaW9uJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvcmVnaW9uL3JlZ2lvbi5odG1sJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gIH07XHJcbn0pOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5nZWFyc2ltQ3VzdG9tSXRlbXMnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHt9LFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6IFsnJHdpbmRvdycsJ3NhdmVIZWxwZXInLCckbG9jYXRpb24nLCdoQ29kZVZhbHVlcycsJ2l0ZW1DYXRlZ29yeScsJyR0aW1lb3V0JywgY3VzdG9tSXRlbUN0cmxdLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3VzdG9tSXRlbXMnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9zZWFyY2gvY3VzdG9tLWl0ZW1zLmh0bWwnXHJcbiAgfTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBjdXN0b21JdGVtQ3RybCgkd2luZG93LHNhdmVIZWxwZXIsJGxvY2F0aW9uLGhDb2RlVmFsdWVzLGl0ZW1DYXRlZ29yeSwkdGltZW91dCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB0aGlzLmN1c3RvbUl0ZW1zID0gaENvZGVWYWx1ZXMuY3VzdG9tSXRlbXM7XHJcbiAgXHJcbiAgdGhpcy5tYXhEaXNwbGF5ID0gMTA7XHJcbiAgdGhpcy5jdXJyZW50UmVzdWx0cyA9IDA7XHJcbiAgXHJcbiAgaWYodGhpcy5uYW1lU2VhcmNoID09IG51bGwpIHtcclxuICAgIHRoaXMubmFtZVNlYXJjaCA9ICcnO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldFJlc3VsdHMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmN1c3RvbUl0ZW1zO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldE5ld1N0YXROYW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLm5hbWVTZWFyY2ggPT0gJycgfHwgdGhpcy5uYW1lU2VhcmNoID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuICd1bm5hbWVkIGN1c3RvbSBpdGVtJztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5uYW1lU2VhcmNoO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmNyZWF0ZUN1c3RvbUl0ZW0gPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKHRoaXMubmFtZVNlYXJjaCA9PSAnJyB8fCB0aGlzLm5hbWVTZWFyY2ggPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLm5hbWVTZWFyY2ggPSB0aGlzLmdldE5ld1N0YXROYW1lKCk7XHJcbiAgICB9XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2l0ZW0vX2N1c3RvbTouJyArIHRoaXMubmFtZVNlYXJjaCk7XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5nZWFyc2ltRXZlcnl0aGluZ1NlYXJjaCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge30sXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIG5hbWVTZWFyY2g6ICc9bmFtZVNlYXJjaCdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiBldmVyeXRoaW5nU2VhcmNoQ3RybCxcclxuICAgIGNvbnRyb2xsZXJBczogJ2l0ZW1zJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvc2VhcmNoL2V2ZXJ5dGhpbmctc2VhcmNoLmh0bWwnXHJcbiAgfTtcclxufSk7XHJcblxyXG5cclxuZnVuY3Rpb24gZXZlcnl0aGluZ1NlYXJjaEN0cmwgKCR3aW5kb3csICR0aW1lb3V0LCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgaENvZGVWYWx1ZXMsIHJlZ2lvbiwgdHJhbnNsYXRpb25zLCBkbnREYXRhKSB7XHJcbiAgICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZtLmV2ZXJ5dGhpbmcgPSBudWxsO1xyXG4gIHZtLm1heERpc3BsYXkgPSAzMjtcclxuICB2bS5jdXJyZW50UmVzdWx0cyA9IDA7XHJcbiAgdm0ucmVzdWx0cyA9IG51bGw7XHJcbiAgdm0ubWluTGV2ZWwgPSAxO1xyXG4gIHZtLm1heExldmVsID0gOTk7XHJcbiAgdm0udmVyc2lvbiA9ICdhbGwnO1xyXG4gIHZtLnZlcnNpb25zID0gW3ZtLnZlcnNpb25dO1xyXG4gIFxyXG4gIHZhciBtaW5MZXZlbCA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWluTGV2ZWwnKSk7XHJcbiAgaWYoJHJvdXRlUGFyYW1zLm1pbkxldmVsKSB7XHJcbiAgICBtaW5MZXZlbCA9IE51bWJlcigkcm91dGVQYXJhbXMubWluTGV2ZWwpO1xyXG4gIH1cclxuICBpZihtaW5MZXZlbCA+IDAgJiYgbWluTGV2ZWwgPCAxMDApIHtcclxuICAgIHZtLm1pbkxldmVsID0gbWluTGV2ZWw7XHJcbiAgfVxyXG4gIHZtLm9yaWdNaW5MZXZlbCA9IG1pbkxldmVsO1xyXG4gIFxyXG4gIHZhciBtYXhMZXZlbCA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWF4TGV2ZWwnKSk7XHJcbiAgaWYoJHJvdXRlUGFyYW1zLm1heExldmVsKSB7XHJcbiAgICBtYXhMZXZlbCA9IE51bWJlcigkcm91dGVQYXJhbXMubWF4TGV2ZWwpO1xyXG4gIH1cclxuICBpZihtYXhMZXZlbCA+IDAgJiYgbWF4TGV2ZWwgPCAxMDApIHtcclxuICAgIHZtLm1heExldmVsID0gbWF4TGV2ZWw7XHJcbiAgfVxyXG4gIHZtLm9yaWdNYXhMZXZlbCA9IG1heExldmVsO1xyXG5cclxuICBpZighdm0ubmFtZVNlYXJjaCkge1xyXG4gICAgdm0ubmFtZVNlYXJjaCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCduYW1lU2VhcmNoJyk7XHJcbiAgICBpZigkcm91dGVQYXJhbXMubmFtZSkge1xyXG4gICAgICB2bS5uYW1lU2VhcmNoID0gJHJvdXRlUGFyYW1zLm5hbWU7XHJcbiAgICB9XHJcbiAgICBpZih2bS5uYW1lU2VhcmNoID09IG51bGwpIHtcclxuICAgICAgdm0ubmFtZVNlYXJjaCA9ICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAkd2luZG93LmRvY3VtZW50LnRpdGxlID0gJ2RuZ2VhcnNpbSB8IEFMTCBJVEVNIFNFQVJDSCc7XHJcbiAgXHJcbiAgdm0uaW5pdGV2ZXJ5dGhpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKGRudERhdGEuaXNMb2FkZWQoZmlsZU5hbWUpICYmIHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpICYmICF2bS5ldmVyeXRoaW5nKSB7XHJcbiAgICAgIHZtLmV2ZXJ5dGhpbmcgPSBbXTtcclxuICAgICAgXHJcbiAgICAgIHZhciB2ZXJzaW9uTWFwID0ge307XHJcbiAgICAgIHZhciBkYXRhcyA9IGRudERhdGEuZ2V0RGF0YShmaWxlTmFtZSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzLmxlbmd0aCArICcgZXZlcnl0aGluZycpO1xyXG4gICAgICBmb3IodmFyIGk9MDtpPGRhdGFzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IGRhdGFzW2ldO1xyXG4gICAgICAgIGlmKGRhdGEuTmFtZUlEID4gMCkge1xyXG4gICAgICAgICAgdmFyIGl0ZW0gPSB7XHJcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxyXG4gICAgICAgICAgICBuYW1lOiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGRhdGEuTmFtZUlELCBkYXRhLk5hbWVJRFBhcmFtKSxcclxuICAgICAgICAgICAgcmFuazogaENvZGVWYWx1ZXMucmFua05hbWVzW2RhdGEuUmFua10sXHJcbiAgICAgICAgICAgIGljb246IGRhdGEuSWNvbkltYWdlSW5kZXgsXHJcbiAgICAgICAgICAgIGxldmVsTGltaXQ6IGRhdGEuTGV2ZWxMaW1pdCxcclxuICAgICAgICAgICAgZmlsZU5hbWU6IGRhdGEuZmlsZU5hbWUsXHJcbiAgICAgICAgICAgIHZlcnNpb246IGRhdGEudmVyc2lvblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdm0uZXZlcnl0aGluZy5wdXNoKGl0ZW0pO1xyXG5cclxuICAgICAgICAgIGlmKGRhdGEudmVyc2lvbikge1xyXG4gICAgICAgICAgICB2ZXJzaW9uTWFwW2RhdGEudmVyc2lvbl0gPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yKHZhciB2ZXJzaW9uIGluIHZlcnNpb25NYXApIHtcclxuICAgICAgICB2bS52ZXJzaW9ucy5wdXNoKHZlcnNpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB2bS5ldmVyeXRoaW5nID0gXy5zb3J0Qnkodm0uZXZlcnl0aGluZywgJ25hbWUnKTtcclxuICAgICAgXHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZtLnNob3dNb3JlUmVzdWx0cygpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdm0uZ2V0UmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodm0uZXZlcnl0aGluZyA9PSBudWxsKSB7XHJcbiAgICAgIHZtLmluaXRldmVyeXRoaW5nKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHZtLmV2ZXJ5dGhpbmcgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG5ld1Jlc3VsdHMgPSBbXTtcclxuICAgIHZhciBudW1ldmVyeXRoaW5nID0gdm0uZXZlcnl0aGluZy5sZW5ndGg7XHJcbiAgICB2YXIgY3VyRGlzcGxheSA9IDA7XHJcbiAgICBmb3IodmFyIGk9MDtpPG51bWV2ZXJ5dGhpbmcgJiYgKGN1ckRpc3BsYXk8dm0ubWF4RGlzcGxheSk7KytpKSB7XHJcbiAgICAgIHZhciBlID0gdm0uZXZlcnl0aGluZ1tpXTtcclxuXHJcbiAgICAgIGlmKGUubGV2ZWxMaW1pdCA8IHZtLm1pbkxldmVsIHx8IGUubGV2ZWxMaW1pdCA+IHZtLm1heExldmVsIHx8ICghZS5sZXZlbExpbWl0KSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZih2bS52ZXJzaW9uICE9ICdhbGwnICYmIHZtLnZlcnNpb24gIT0gZS52ZXJzaW9uKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKHZtLm5hbWVTZWFyY2ggIT0gJycpIHtcclxuICAgICAgICB2YXIgbmFtZVNlYXJjaGVzID0gdm0ubmFtZVNlYXJjaC5zcGxpdCgnICcpO1xyXG4gICAgICAgIGlmKG5hbWVTZWFyY2hlcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgbmFtZVNlYXJjaGVzID0gW3ZtLm5hbWVTZWFyY2hdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWxsTWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgIGZvcih2YXIgbnM9MDtuczxuYW1lU2VhcmNoZXMubGVuZ3RoOysrbnMpIHtcclxuICAgICAgICAgIGlmKGUubmFtZSAmJiBlLm5hbWUudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpLmluZGV4T2YobmFtZVNlYXJjaGVzW25zXS50b1VwcGVyQ2FzZSgpKSA9PSAtMSkge1xyXG4gICAgICAgICAgICBhbGxNYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoIWFsbE1hdGNoKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIG5ld1Jlc3VsdHMucHVzaChlKTtcclxuICAgICAgY3VyRGlzcGxheSsrO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS50b3RhbE51bVJlc3VsdHMgPSBuZXdSZXN1bHRzLmxlbmd0aDtcclxuICAgIHJldHVybiBuZXdSZXN1bHRzO1xyXG4gIH1cclxuICBcclxuICB2bS5jaGFuZ2VTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKHZtLm1pbkxldmVsICE9IHZtLm9yaWdNaW5MZXZlbCkge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWluTGV2ZWwnLCB2bS5taW5MZXZlbCk7XHJcbiAgICAgICRsb2NhdGlvbi5zZWFyY2goJ21pbkxldmVsJywgdm0ubWluTGV2ZWwpO1xyXG4gICAgICB2bS5vcmlnTWluTGV2ZWwgPSB2bS5taW5MZXZlbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYodm0ubWF4TGV2ZWwgIT0gdm0ub3JpZ01heExldmVsKSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtYXhMZXZlbCcsIHZtLm1heExldmVsKTtcclxuICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnbWF4TGV2ZWwnLCB2bS5tYXhMZXZlbCk7XHJcbiAgICAgIHZtLm9yaWdNYXhMZXZlbCA9IHZtLm1heExldmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCduYW1lU2VhcmNoJywgdm0ubmFtZVNlYXJjaCk7XHJcbiAgICAkbG9jYXRpb24uc2VhcmNoKCduYW1lJywgdm0ubmFtZVNlYXJjaCk7XHJcbiAgICBcclxuICAgIHZtLm1heERpc3BsYXkgPSA2NDtcclxuICAgIHZtLnJlc3VsdHMgPSB2bS5nZXRSZXN1bHRzKCk7XHJcbiAgfVxyXG5cclxuICB2bS5zaG93TW9yZVJlc3VsdHMgPSBmdW5jdGlvbigpIHtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnc2hvdyBtb3JlJywgdm0ubWF4RGlzcGxheSk7XHJcbiAgICAgIHZtLm1heERpc3BsYXkgKz0gMTg7XHJcbiAgICAgIHZtLnJlc3VsdHMgPSB2bS5nZXRSZXN1bHRzKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhciBmaWxlTmFtZSA9ICdhbGwtaXRlbXMubHpqc29uJzsgIFxyXG4gIGRudERhdGEuaW5pdChmaWxlTmFtZSwgbnVsbCwgZnVuY3Rpb24oKSB7fSwgZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5pbml0ZXZlcnl0aGluZygpO1xyXG4gIH0pO1xyXG5cclxuICB0cmFuc2xhdGlvbnMuaW5pdChudWxsLCB2bS5pbml0ZXZlcnl0aGluZyk7XHJcbn1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBjb250cm9sbGVyUGFyYW1zID0gWyckc2NvcGUnLCckd2luZG93JywnJHJvdXRlUGFyYW1zJywnJHRpbWVvdXQnLCckbG9jYXRpb24nLCckcm91dGUnLFxyXG4ndHJhbnNsYXRpb25zJyxcclxuJ2l0ZW1DYXRlZ29yeScsXHJcbidqb2JzJyxcclxuJ2hDb2RlVmFsdWVzJyxcclxuJ2l0ZW1GYWN0b3J5JyxcclxuJ3JlZ2lvbicsXHJcbidzYXZlSGVscGVyJywgaXRlbVNlYXJjaEN0cmxdO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignSXRlbVNlYXJjaEN0cmwnLCBjb250cm9sbGVyUGFyYW1zKTtcclxuXHJcbmZ1bmN0aW9uIGl0ZW1TZWFyY2hDdHJsKFxyXG4gICRzY29wZSwkd2luZG93LCRyb3V0ZVBhcmFtcywkdGltZW91dCwkbG9jYXRpb24sJHJvdXRlLFxyXG4gIHRyYW5zbGF0aW9ucyxcclxuICBpdGVtQ2F0ZWdvcnksXHJcbiAgam9icyxcclxuICBoQ29kZVZhbHVlcyxcclxuICBpdGVtRmFjdG9yeSxcclxuICByZWdpb24sXHJcbiAgc2F2ZUhlbHBlcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZtLml0ZW1DYXRlZ29yeSA9IGl0ZW1DYXRlZ29yeS5ieVBhdGgoJHJvdXRlUGFyYW1zLmNhdCk7XHJcbiAgaWYoIXZtLml0ZW1DYXRlZ29yeSkge1xyXG4gICAgIHZhciBjYXROYW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlbGVjdGVkSXRlbUNhdGVnb3J5Jyk7XHJcbiAgICAgaWYoIWNhdE5hbWUpIHtcclxuICAgICAgIGNhdE5hbWUgPSAndGl0bGVzJztcclxuICAgICB9XHJcbiAgICAgXHJcbiAgICAgdm0uaXRlbUNhdGVnb3J5ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZShjYXROYW1lKTtcclxuICAgICBpZighdm0uaXRlbUNhdGVnb3J5IHx8IHZtLml0ZW1DYXRlZ29yeS5oaWRlSW5TZWFyY2gpIHtcclxuICAgICAgIGNhdE5hbWUgPSAndGl0bGVzJztcclxuICAgICAgIHZtLml0ZW1DYXRlZ29yeSA9IGl0ZW1DYXRlZ29yeS5ieU5hbWUoJ3RpdGxlcycpO1xyXG4gICAgIH1cclxuICAgICBpZih2bS5pdGVtQ2F0ZWdvcnkpIHtcclxuICAgICAgIC8vIGNvbnNvbGUubG9nKCdtb3ZpbmcnKTtcclxuICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2NhdCcsIHZtLml0ZW1DYXRlZ29yeS5wYXRoKTtcclxuICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcclxuICAgICB9XHJcbiAgICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBcclxuICAkd2luZG93LmRvY3VtZW50LnRpdGxlID0gJ2RuZ2VhcnNpbSB8IFNFQVJDSCAnICsgdm0uaXRlbUNhdGVnb3J5Lm5hbWUudG9VcHBlckNhc2UoKTtcclxuICBcclxuICB2bS5qb2IgPSB7aWQ6IC0xLCBuYW1lOiAnJ307XHJcbiAgdm0uam9icyA9IFt2bS5qb2JdO1xyXG4gIHZtLmFsbEpvYnMgPSBbXTtcclxuICB2bS5taW5MZXZlbCA9IDE7XHJcbiAgdm0ubWF4TGV2ZWwgPSA5OTtcclxuICB2bS5tYXhEaXNwbGF5ID0gMTA7XHJcbiAgdm0udG90YWxOdW1SZXN1bHRzID0gMDtcclxuICB2bS5ncmFkZXMgPSBoQ29kZVZhbHVlcy5yYW5rTmFtZXM7XHJcbiAgdm0uc3RhdCA9IHtpZDotMSwgbmFtZTonJ307XHJcbiAgdm0uc3RhdHMgPSBbdm0uc3RhdF07XHJcbiAgdm0ucmVzdWx0cyA9IG51bGw7XHJcbiAgXHJcbiAgYW5ndWxhci5mb3JFYWNoKGhDb2RlVmFsdWVzLnN0YXRzLCBmdW5jdGlvbihzdGF0LCBzdGF0SWQpIHtcclxuICAgIGlmKHN0YXQuc2VhcmNoYWJsZSkge1xyXG4gICAgICB2bS5zdGF0cy5wdXNoKHN0YXQpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIFxyXG4gIHZhciBtaW5MZXZlbCA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWluTGV2ZWwnKSk7XHJcbiAgaWYoJHJvdXRlUGFyYW1zLm1pbkxldmVsKSB7XHJcbiAgICBtaW5MZXZlbCA9IE51bWJlcigkcm91dGVQYXJhbXMubWluTGV2ZWwpO1xyXG4gIH1cclxuICBpZihtaW5MZXZlbCA+IDAgJiYgbWluTGV2ZWwgPCAxMDApIHtcclxuICAgIHZtLm1pbkxldmVsID0gbWluTGV2ZWw7XHJcbiAgfVxyXG4gIHZtLm9yaWdNaW5MZXZlbCA9IG1pbkxldmVsO1xyXG4gIFxyXG4gIHZhciBtYXhMZXZlbCA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWF4TGV2ZWwnKSk7XHJcbiAgaWYoJHJvdXRlUGFyYW1zLm1heExldmVsKSB7XHJcbiAgICBtYXhMZXZlbCA9IE51bWJlcigkcm91dGVQYXJhbXMubWF4TGV2ZWwpO1xyXG4gIH1cclxuICBpZihtYXhMZXZlbCA+IDAgJiYgbWF4TGV2ZWwgPCAxMDApIHtcclxuICAgIHZtLm1heExldmVsID0gbWF4TGV2ZWw7XHJcbiAgfVxyXG4gIHZtLm9yaWdNYXhMZXZlbCA9IG1heExldmVsO1xyXG4gIFxyXG4gIHZtLm5hbWVTZWFyY2ggPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmFtZVNlYXJjaCcpO1xyXG4gIGlmKCRyb3V0ZVBhcmFtcy5uYW1lKSB7XHJcbiAgICB2bS5uYW1lU2VhcmNoID0gJHJvdXRlUGFyYW1zLm5hbWU7XHJcbiAgfVxyXG4gIGlmKCF2bS5uYW1lU2VhcmNoKSB7XHJcbiAgICB2bS5uYW1lU2VhcmNoID0gJyc7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLm9yaWdTYXZlZFNlYXJjaFN0YXRJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWFyY2hTdGF0Jyk7XHJcbiAgaWYoJHJvdXRlUGFyYW1zLnN0YXQpIHtcclxuICAgIHZtLm9yaWdTYXZlZFNlYXJjaFN0YXRJZCA9ICRyb3V0ZVBhcmFtcy5zdGF0O1xyXG4gIH1cclxuICBpZih2bS5vcmlnU2F2ZWRTZWFyY2hTdGF0SWQgPiAtMSAmJiB2bS5vcmlnU2F2ZWRTZWFyY2hTdGF0SWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgIHZtLnN0YXQgPSBoQ29kZVZhbHVlcy5zdGF0c1t2bS5vcmlnU2F2ZWRTZWFyY2hTdGF0SWRdO1xyXG4gIH1cclxuXHJcbiAgdm0ubmF2aWdhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBjYXROYW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlbGVjdGVkSXRlbUNhdGVnb3J5Jyk7XHJcbiAgICBpZihjYXROYW1lKSB7XHJcbiAgICAgIHZtLml0ZW1DYXRlZ29yeSA9IGl0ZW1DYXRlZ29yeS5ieU5hbWUoY2F0TmFtZSk7XHJcbiAgICAgIGlmKHZtLml0ZW1DYXRlZ29yeSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCduYXZpZ2F0aW5nIHRvICcsIHZtLml0ZW1DYXRlZ29yeS5wYXRoKTtcclxuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdjYXQnLCB2bS5pdGVtQ2F0ZWdvcnkucGF0aCk7XHJcbiAgICAgICAgdm0uc2F2ZSgpO1xyXG4gICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdm0uc2F2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYoIXZtLml0ZW1DYXRlZ29yeS5oaWRlTGV2ZWwpIHtcclxuICAgICAgaWYodm0ubWluTGV2ZWwgIT0gdm0ub3JpZ01pbkxldmVsKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21pbkxldmVsJywgdm0ubWluTGV2ZWwpO1xyXG4gICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ21pbkxldmVsJywgdm0ubWluTGV2ZWwpO1xyXG4gICAgICAgIHZtLm9yaWdNaW5MZXZlbCA9IHZtLm1pbkxldmVsO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZih2bS5tYXhMZXZlbCAhPSB2bS5vcmlnTWF4TGV2ZWwpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWF4TGV2ZWwnLCB2bS5tYXhMZXZlbCk7XHJcbiAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnbWF4TGV2ZWwnLCB2bS5tYXhMZXZlbCk7XHJcbiAgICAgICAgdm0ub3JpZ01heExldmVsID0gdm0ubWF4TGV2ZWw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAkbG9jYXRpb24uc2VhcmNoKCdtaW5MZXZlbCcsIG51bGwpO1xyXG4gICAgICAkbG9jYXRpb24uc2VhcmNoKCdtYXhMZXZlbCcsIG51bGwpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZighdm0uaXRlbUNhdGVnb3J5LmhpZGVKb2IpIHtcclxuICAgICAgaWYodm0uam9iICE9IG51bGwpIHtcclxuICAgICAgICBpZih2bS5vcmlnSm9iTnVtYmVyICE9IHZtLmpvYi5pZCkge1xyXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2pvYk51bWJlcicsIHZtLmpvYi5pZCk7XHJcbiAgICAgICAgICBpZih2bS5qb2IuaWQgPiAtMSkge1xyXG4gICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdqb2InLCB2bS5qb2IuaWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2pvYicsIG51bGwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdm0ub3JpZ0pvYk51bWJlciA9IHZtLmpvYi5pZDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAkbG9jYXRpb24uc2VhcmNoKCdqb2InLCBudWxsKTtcclxuICAgIH1cclxuICBcclxuICAgIGlmKHZtLnN0YXQpIHtcclxuICAgICAgaWYodm0ub3JpZ1NhdmVkU2VhcmNoU3RhdElkICE9IHZtLnN0YXQuaWQpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2VhcmNoU3RhdCcsIHZtLnN0YXQuaWQpO1xyXG4gICAgICAgIGlmKHZtLnN0YXQuaWQgPiAtMSkge1xyXG4gICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnc3RhdCcsIHZtLnN0YXQuaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3N0YXQnLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdm0ub3JpZ1NhdmVkU2VhcmNoU3RhdElkID0gdm0uc3RhdC5pZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCduYW1lU2VhcmNoJywgdm0ubmFtZVNlYXJjaCk7XHJcbiAgICAkbG9jYXRpb24uc2VhcmNoKCduYW1lJywgdm0ubmFtZVNlYXJjaCk7XHJcbiAgfTtcclxuICBcclxuICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgam9icy5pbml0KHJlcG9ydFByb2dyZXNzLCBqb2JJbml0KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gcmVwb3J0UHJvZ3Jlc3MobXNnKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncHJvZ3Jlc3M6ICcgKyBtc2cpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBqb2JJbml0KCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbGxlZCB0aGUgam9iIGluaXQgZnVuYycpO1xyXG4gICAgaWYodHJhbnNsYXRpb25zLmlzTG9hZGVkKCkgJiYgam9icy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0cnlpbmcgdG8gaW5pdCBqb2JzJyk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdqb2IgZHJvcGRvd24gc2hvdWxkIGJlIHNldCcpO1xyXG4gICAgICB2YXIgbmV3Sm9icyA9IGpvYnMuZ2V0RmluYWxKb2JzKCk7XHJcblxyXG4gICAgICBuZXdKb2JzLnNwbGljZSgwLCAwLCB2bS5qb2JzWzBdKTtcclxuICAgICAgdm0uam9icyA9IG5ld0pvYnM7XHJcbiAgICAgIHZtLmFsbEpvYnMgPSBqb2JzLmdldEFsbEpvYnMoKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBsYXN0Sm9iTnVtYmVyID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdqb2JOdW1iZXInKSk7XHJcbiAgICAgIGlmKCRyb3V0ZVBhcmFtcy5qb2IgJiYgJHJvdXRlUGFyYW1zLmpvYikge1xyXG4gICAgICAgIGxhc3RKb2JOdW1iZXIgPSBOdW1iZXIoJHJvdXRlUGFyYW1zLmpvYik7XHJcbiAgICAgIH1cclxuICAgICAgaWYobGFzdEpvYk51bWJlciAhPSBudWxsKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKG5ld0pvYnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgIGlmKHZhbHVlLmlkID09IGxhc3RKb2JOdW1iZXIpIHtcclxuICAgICAgICAgICAgdm0uam9iID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaXRlbUNhdGVnb3J5LmluaXQodm0uaXRlbUNhdGVnb3J5Lm5hbWUsIGxvYWRSZXN1bHRzKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdm0ucmFua0NoZWNrZWQgPSBoQ29kZVZhbHVlcy5jaGVja2VkUmFuaztcclxuICAgIFxyXG4gIHZtLmNoYW5nZVNlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdm0uc2F2ZSgpO1xyXG4gICAgbG9hZFJlc3VsdHMoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gbG9hZFJlc3VsdHMoKSB7XHJcbiAgICB2bS5tYXhEaXNwbGF5ID0gMjQ7XHJcbiAgICB2bS5yZXN1bHRzID0gZ2V0UmVzdWx0cygpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRSZXN1bHRzKCkge1xyXG4gICAgdmFyIGFsbEl0ZW1zID0gaXRlbUNhdGVnb3J5LmdldEl0ZW1zKHZtLml0ZW1DYXRlZ29yeS5uYW1lKTtcclxuICAgIGlmKGFsbEl0ZW1zID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFsbEl0ZW1zID0gYWxsSXRlbXMuc29ydChmdW5jdGlvbihpdGVtMSwgaXRlbTIpIHtcclxuICAgICAgICByZXR1cm4gKGl0ZW0yLmxldmVsTGltaXQgLSBpdGVtMS5sZXZlbExpbWl0KTtcclxuICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgIHZhciBwY1N0YXRJZCA9IC0xO1xyXG4gICAgaWYoJ3BjJyBpbiB2bS5zdGF0KSB7XHJcbiAgICAgIHBjU3RhdElkID0gdm0uc3RhdC5wYztcclxuICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgdmFyIGFsdFN0YXRJZCA9IC0xO1xyXG4gICAgaWYoJ2FsdFN0YXQnIGluIHZtLnN0YXQpIHtcclxuICAgICAgYWx0U3RhdElkID0gdm0uc3RhdC5hbHRTdGF0O1xyXG4gICAgfVxyXG4gIFxyXG4gICAgdmFyIHN0YXRWYWxzID0gW107XHJcbiAgICB2YXIgbmV3UmVzdWx0cyA9IFtdO1xyXG4gICAgdmFyIG51bUVxdWlwID0gYWxsSXRlbXMubGVuZ3RoO1xyXG4gICAgdmFyIGN1ckRpc3BsYXkgPSAwO1xyXG4gICAgZm9yKHZhciBpPTA7aTxudW1FcXVpcCAmJiAoY3VyRGlzcGxheTx2bS5tYXhEaXNwbGF5IHx8IHZtLnN0YXQuaWQgPj0gMCk7KytpKSB7XHJcbiAgICAgIHZhciBlID0gYWxsSXRlbXNbaV07XHJcbiAgICAgIGlmKGUpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZighdm0uaXRlbUNhdGVnb3J5LmhpZGVMZXZlbCkge1xyXG4gICAgICAgICAgaWYoZS5sZXZlbExpbWl0IDwgdm0ubWluTGV2ZWwgfHwgZS5sZXZlbExpbWl0ID4gdm0ubWF4TGV2ZWwpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgaWYoIXZtLml0ZW1DYXRlZ29yeS5oaWRlUmFuaykge1xyXG4gICAgICAgICAgaWYoZS5yYW5rICYmICF2bS5yYW5rQ2hlY2tlZFtlLnJhbmsuaWRdKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgIGlmKCF2bS5pdGVtQ2F0ZWdvcnkuaGlkZUpvYikge1xyXG4gICAgICAgICAgaWYodm0uam9iICYmIHZtLmpvYi5pZCA+IC0xKSB7XHJcbiAgICAgICAgICAgIGlmKCF2bS5qb2IuaXNDbGFzc0pvYihlLm5lZWRKb2JDbGFzcykpIHtcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpdGVtRmFjdG9yeS5pbml0SXRlbShlKTtcclxuICAgICAgICBpZihlLnR5cGVOYW1lICE9IHZtLml0ZW1DYXRlZ29yeS5uYW1lKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ25hbWUgZmlsdGVyJywgdm0ubmFtZVNlYXJjaCk7IFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHZtLm5hbWVTZWFyY2ggIT0gJycpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdmaWx0ZXJpbmcgb24gbmFtZScpO1xyXG4gICAgICAgICAgdmFyIG5hbWVTZWFyY2hlcyA9IHZtLm5hbWVTZWFyY2guc3BsaXQoJyAnKTtcclxuICAgICAgICAgIGlmKCFuYW1lU2VhcmNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG5hbWVTZWFyY2hlcyA9IFt2bS5uYW1lU2VhcmNoXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciBhbGxNYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICBmb3IodmFyIG5zPTA7bnM8bmFtZVNlYXJjaGVzLmxlbmd0aDsrK25zKSB7XHJcbiAgICAgICAgICAgIGlmKGUubmFtZS50b1VwcGVyQ2FzZSgpLmluZGV4T2YobmFtZVNlYXJjaGVzW25zXS50b1VwcGVyQ2FzZSgpKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgIGFsbE1hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoIWFsbE1hdGNoKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZih2bS5zdGF0LmlkID49IDApIHtcclxuICAgICAgICAgIHZhciBzdGF0Rm91bmQgPSBmYWxzZTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHN0YXRWYWwgPSB7fTtcclxuICAgICAgICAgIGZvcih2YXIgcz0wO3M8ZS5zdGF0cy5sZW5ndGg7KytzKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ID0gZS5zdGF0c1tzXTtcclxuICAgICAgICAgICAgaWYoc3RhdC5pZCA9PSB2bS5zdGF0LmlkKSB7XHJcbiAgICAgICAgICAgICAgc3RhdEZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBzdGF0VmFsLmkgPSBjdXJEaXNwbGF5O1xyXG4gICAgICAgICAgICAgIHN0YXRWYWwucyA9IE51bWJlcihzdGF0Lm1heCk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihzdGF0LmlkID09IHBjU3RhdElkKSB7XHJcbiAgICAgICAgICAgICAgc3RhdEZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBzdGF0VmFsLmkgPSBjdXJEaXNwbGF5O1xyXG4gICAgICAgICAgICAgIHN0YXRWYWwucyA9IE51bWJlcihzdGF0Lm1heCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihzdGF0LmlkID09IGFsdFN0YXRJZCkge1xyXG4gICAgICAgICAgICAgIHN0YXRGb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgc3RhdFZhbC5pID0gY3VyRGlzcGxheTtcclxuICAgICAgICAgICAgICBzdGF0VmFsLnMgPSBOdW1iZXIoc3RhdC5tYXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKCFzdGF0Rm91bmQpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3RhdFZhbHMucHVzaChzdGF0VmFsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbmV3UmVzdWx0cy5wdXNoKGUpO1xyXG4gICAgICAgIGN1ckRpc3BsYXkrKztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZih2bS5zdGF0LmlkID49IDApIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBjdXJyZW50UmVzdWx0cyA9IE1hdGgubWluKGN1ckRpc3BsYXksIHZtLm1heERpc3BsYXkpO1xyXG4gICAgICBcclxuICAgICAgc3RhdFZhbHMgPSBzdGF0VmFscy5zb3J0KGZ1bmN0aW9uKHZhbHVlMSwgdmFsdWUyKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlMi5zIC0gdmFsdWUxLnM7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgdmFyIHN0YXRSZXN1bHRzID0gW107XHJcbiAgICAgIGZvcih2YXIgaT0wO2k8Y3VycmVudFJlc3VsdHM7KytpKSB7XHJcbiAgICAgICAgc3RhdFJlc3VsdHMucHVzaChuZXdSZXN1bHRzW3N0YXRWYWxzW2ldLmldKTtcclxuICAgICAgfVxyXG4gICAgICBuZXdSZXN1bHRzID0gc3RhdFJlc3VsdHM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLnRvdGFsTnVtUmVzdWx0cyA9IG5ld1Jlc3VsdHMubGVuZ3RoO1xyXG4gICAgXHJcbiAgICByZXR1cm4gbmV3UmVzdWx0cztcclxuICB9XHJcblxyXG4gIHZtLnNob3dNb3JlUmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZtLm1heERpc3BsYXkgKz0gMTg7XHJcbiAgICAgIHZtLnJlc3VsdHMgPSBnZXRSZXN1bHRzKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgcmVnaW9uLmluaXQoKTtcclxuICB0cmFuc2xhdGlvbnMuaW5pdChyZXBvcnRQcm9ncmVzcywgaW5pdCk7XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbmdlYXJzaW1Ta2lsbFNlYXJjaCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge30sXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGpvYjogJz1qb2InLFxyXG4gICAgICBqb2JzOiAnPWpvYnMnLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6IFsnJHdpbmRvdycsJyR0aW1lb3V0Jywnc2F2ZUhlbHBlcicsJ3JlZ2lvbicsJ2pvYnMnLCd0cmFuc2xhdGlvbnMnLCdkbnREYXRhJywnaENvZGVWYWx1ZXMnLCdpdGVtQ2F0ZWdvcnknLCckbG9jYXRpb24nLCBza2lsbFNlYXJjaEN0cmxdLFxyXG4gICAgY29udHJvbGxlckFzOiAnc2tpbGxTZWFyY2gnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9zZWFyY2gvc2tpbGwtc2VhcmNoLmh0bWwnXHJcbiAgfTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBza2lsbFNlYXJjaEN0cmwoJHdpbmRvdywkdGltZW91dCxzYXZlSGVscGVyLCByZWdpb24sIGpvYnMsIHRyYW5zbGF0aW9ucyxkbnREYXRhLGhDb2RlVmFsdWVzLGl0ZW1DYXRlZ29yeSwkbG9jYXRpb24pIHtcclxuXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB2bS5hbGxKb2JzID0gW107XHJcbiAgdm0uZG50TmFtZSA9ICcnO1xyXG4gIHZtLnNraWxscyA9IFtdO1xyXG4gIHZtLmxvYWRlZEpvYklkID0gLTE7XHJcblxyXG4gIHZtLml0ZW1DYXRlZ29yeSA9IGl0ZW1DYXRlZ29yeS5ieU5hbWUoJ3NraWxscycpO1xyXG5cclxuICB2bS5uYW1lU2VhcmNoID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25hbWVTZWFyY2gnKTtcclxuICBpZighdm0ubmFtZVNlYXJjaCkge1xyXG4gICAgdm0ubmFtZVNlYXJjaCA9ICcnO1xyXG4gIH1cclxuICBcclxuICByZWdpb24uaW5pdCgpO1xyXG4gIGlmKHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpKSB7XHJcbiAgICBpbml0KCk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdHJhbnNsYXRpb25zLmluaXQocmVwb3J0UHJvZ3Jlc3MsIGZ1bmN0aW9uKCkgeyAkdGltZW91dChpbml0KTsgfSApO1xyXG4gIH1cclxuXHJcbiAgdm0ubmF2aWdhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZih2bS5pdGVtQ2F0ZWdvcnkpIHtcclxuICAgICAgICAkbG9jYXRpb24ucGF0aCh2bS5pdGVtQ2F0ZWdvcnkucGF0aCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB2bS5pc0xvYWRpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgaWYoIXRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0cmFuc2F0aW9ucyBub3QgbG9hZGVkJyk7XHJcbiAgICAgIGlmKCF0cmFuc2xhdGlvbnMuc3RhcnRlZExvYWRpbmcpIHtcclxuICAgICAgICB0cmFuc2xhdGlvbnMuaW5pdChyZXBvcnRQcm9ncmVzcywgZnVuY3Rpb24oKSB7IH0gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBiYXNlTmFtZSA9IGpvYnMuZ2V0QmFzZUpvYk5hbWUodm0uam9iKTtcclxuICAgIHZhciBkbnROYW1lID0gZ2V0RG50TmFtZShiYXNlTmFtZSk7XHJcbiAgICBpZihkbnROYW1lKSB7XHJcbiAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGRudE5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuICBcclxuICBmdW5jdGlvbiBnZXREbnROYW1lKGJhc2VDbGFzc05hbWUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdnb3QgYmFzZSBjbGFzcyA6JyArIGJhc2VDbGFzc05hbWUpO1xyXG4gICAgaWYoYmFzZUNsYXNzTmFtZSAhPSBudWxsKSB7XHJcbiAgICAgIHJldHVybiAnc2tpbGx0YWJsZV9jaGFyYWN0ZXInICsgYmFzZUNsYXNzTmFtZS50b0xvd2VyQ2FzZSgpICsgJy5sempzb24nO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0U2tpbGxzKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dldHRpbmcgc2tpbGxzIGZvciAnICsgdm0uam9iLm5hbWUpO1xyXG4gICAgaWYodm0ubG9hZGVkSm9iSWQgPT0gdm0uam9iLmlkKSB7XHJcbiAgICAgIHJldHVybiB2bS5za2lsbHM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBiYXNlSm9iTmFtZXMgPSBbXTtcclxuICAgICAgaWYodm0uam9iLmlkID49IDApIHtcclxuICAgICAgICB2YXIgYmFzZU5hbWUgPSBqb2JzLmdldEJhc2VKb2JOYW1lKHZtLmpvYik7XHJcbiAgICAgICAgYmFzZUpvYk5hbWVzLnB1c2goYmFzZU5hbWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goYmFzZUpvYk5hbWVzLCBmdW5jdGlvbihiYXNlTmFtZSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgZG50TmFtZSA9IGdldERudE5hbWUoYmFzZU5hbWUpO1xyXG4gICAgICAgIGlmKGRudE5hbWUpIHtcclxuICAgICAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGRudE5hbWUpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIHNraWxscyBmb3IgJyArIGJhc2VOYW1lKTtcclxuICAgICAgICAgICAgZG50RGF0YS5pbml0KGRudE5hbWUsIG51bGwsIHJlcG9ydFByb2dyZXNzLCBmdW5jdGlvbigpIHsgJHRpbWVvdXQoZnVuY3Rpb24oKSB7IHNldHVwU2tpbGxzKGJhc2VKb2JOYW1lcywgdm0uam9iKTt9ICk7IH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNldHVwU2tpbGxzKGJhc2VKb2JOYW1lcywgdm0uam9iKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBzZXR1cFNraWxscyhiYXNlSm9iTmFtZXMsIGpvYikge1xyXG4gICAgXHJcbiAgICB2bS5za2lsbHMgPSBbXTtcclxuICAgIHZhciBhbGxSZWFkeSA9IHRydWU7XHJcbiAgICBhbmd1bGFyLmZvckVhY2goYmFzZUpvYk5hbWVzLCBmdW5jdGlvbihiYXNlTmFtZSwgaW5kZXgpIHtcclxuICAgICAgdmFyIGRudE5hbWUgPSBnZXREbnROYW1lKGJhc2VOYW1lKTtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZG50TmFtZSkpIHtcclxuICAgICAgICBhbGxSZWFkeSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYoYWxsUmVhZHkpIHtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGJhc2VKb2JOYW1lcywgZnVuY3Rpb24oYmFzZU5hbWUsIGluZGV4KSB7XHJcbiAgICAgICAgdmFyIGRudE5hbWUgPSBnZXREbnROYW1lKGJhc2VOYW1lKTtcclxuICAgICAgXHJcbiAgICAgICAgdmFyIHNraWxscyA9IGRudERhdGEuZ2V0RGF0YShkbnROYW1lKTtcclxuICAgICAgICB2YXIgbnVtU2tpbGxzID0gc2tpbGxzLmxlbmd0aDtcclxuICAgICAgICBmb3IodmFyIHM9MDtzPG51bVNraWxsczsrK3MpIHtcclxuICAgICAgICAgIGlmKHNraWxsc1tzXS5OYW1lSUQgPT0gMCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoc2tpbGxzW3NdLkVmZmVjdENsYXNzMSA+IDAgfHwgXHJcbiAgICAgICAgICAgICBza2lsbHNbc10uRWZmZWN0Q2xhc3MyID4gMCB8fCBcclxuICAgICAgICAgICAgIHNraWxsc1tzXS5FZmZlY3RDbGFzczMgPiAwIHx8IFxyXG4gICAgICAgICAgICAgc2tpbGxzW3NdLkVmZmVjdENsYXNzNCA+IDAgfHxcclxuICAgICAgICAgICAgIHNraWxsc1tzXS5FZmZlY3RDbGFzczUgPiAwIHx8ICBcclxuICAgICAgICAgICAgIHNraWxsc1tzXS5FZmZlY3RDbGFzczYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbmV3SXRlbSA9IHtkOiBza2lsbHNbc119O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbmV3SXRlbS5pZCA9IHNraWxsc1tzXS5pZDtcclxuICAgICAgICAgICAgbmV3SXRlbS50eXBlTmFtZSA9ICdza2lsbHMnO1xyXG4gICAgICAgICAgICBuZXdJdGVtLml0ZW1Tb3VyY2UgPSAnc2tpbGxzJztcclxuICAgICAgICAgICAgbmV3SXRlbS5uYW1lID0gdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShza2lsbHNbc10uTmFtZUlELCBza2lsbHNbc10uTmFtZUlEUGFyYW0pO1xyXG4gICAgICAgICAgICBuZXdJdGVtLm5lZWRKb2JDbGFzcyA9IHNraWxsc1tzXS5OZWVkSm9iO1xyXG4gICAgICAgICAgICBuZXdJdGVtLnJhbmsgPSBoQ29kZVZhbHVlcy5yYW5rTmFtZXNbMF07XHJcbiAgICAgICAgICAgIG5ld0l0ZW0uYmFzZUpvYk5hbWUgPSBiYXNlTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBuZXdJdGVtLmljb24gPSBza2lsbHNbc10uSWNvbkltYWdlSW5kZXg7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2bS5za2lsbHMucHVzaChuZXdJdGVtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIFxyXG4gICAgICB2bS5sb2FkZWRKb2JJZCA9IGpvYi5pZDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdm0uZ2V0UmVzdWx0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICB2YXIgc2tpbGxzID0gZ2V0U2tpbGxzKCk7XHJcbiAgICBpZihza2lsbHMgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHZtLmpvYiAmJiB2bS5qb2IuaWQgPj0gMCkge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnam9iTnVtYmVyJywgdm0uam9iLmlkKTtcclxuICAgIH1cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCduYW1lU2VhcmNoJywgdm0ubmFtZVNlYXJjaCk7XHJcblxyXG4gICAgdmFyIG5ld1Jlc3VsdHMgPSBbXTtcclxuICAgIHZhciBudW1Ta2lsbHMgPSBza2lsbHMubGVuZ3RoO1xyXG4gICAgdmFyIGN1ckRpc3BsYXkgPSAwO1xyXG4gICAgZm9yKHZhciBpPTA7aTxudW1Ta2lsbHM7KytpKSB7XHJcbiAgICAgIHZhciBlID0gc2tpbGxzW2ldO1xyXG4gICAgICBcclxuICAgICAgaWYodm0ubmFtZVNlYXJjaCAhPSAnJykge1xyXG4gICAgICAgIHZhciBuYW1lU2VhcmNoZXMgPSB2bS5uYW1lU2VhcmNoLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgaWYoIW5hbWVTZWFyY2hlcy5sZW5ndGgpIHtcclxuICAgICAgICAgIG5hbWVTZWFyY2hlcyA9IFt2bS5uYW1lU2VhcmNoXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFsbE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICBmb3IodmFyIG5zPTA7bnM8bmFtZVNlYXJjaGVzLmxlbmd0aDsrK25zKSB7XHJcbiAgICAgICAgICBpZihlLm5hbWUgJiYgZS5uYW1lLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKS5pbmRleE9mKG5hbWVTZWFyY2hlc1tuc10udG9VcHBlckNhc2UoKSkgPT0gLTEpIHtcclxuICAgICAgICAgICAgYWxsTWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCFhbGxNYXRjaCkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZih2bS5qb2IuaWQgPj0gMCAmJiAhdm0uam9iLmlzQ2xhc3NKb2IoZS5uZWVkSm9iQ2xhc3MpKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIG5ld1Jlc3VsdHMucHVzaChlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdSZXN1bHRzO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiByZXBvcnRQcm9ncmVzcyhtc2cpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdwcm9ncmVzczogJyArIG1zZyk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGpvYkluaXQoKSB7XHJcbiAgICBpZih0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSAmJiBqb2JzLmlzTG9hZGVkKCkpIHtcclxuICAgICAgdmFyIG5ld0pvYnMgPSBqb2JzLmdldEZpbmFsSm9icygpO1xyXG5cclxuICAgICAgaWYodm0uam9icyAmJiB2bS5qb2JzLmxlbmd0aCkge1xyXG4gICAgICAgIG5ld0pvYnMuc3BsaWNlKDAsIDAsIHZtLmpvYnNbMF0pO1xyXG4gICAgICB9XHJcbiAgICAgIHZtLmpvYnMgPSBuZXdKb2JzO1xyXG4gICAgICB2bS5hbGxKb2JzID0gam9icy5nZXRBbGxKb2JzKCk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgbGFzdEpvYk51bWJlciA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnam9iTnVtYmVyJykpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygndXNpbmcgam9iJywgbGFzdEpvYk51bWJlcik7XHJcbiAgICAgIGlmKGxhc3RKb2JOdW1iZXIgIT0gbnVsbCkge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChuZXdKb2JzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICBpZih2YWx1ZS5pZCA9PSBsYXN0Sm9iTnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHZtLmpvYiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndXNpbmcgam9iJywgdmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZtLmdldFJlc3VsdHMoKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdza2lsbCBpbml0Jyk7XHJcbiAgICBpZihqb2JzLmlzTG9hZGVkKCkpIHtcclxuICAgICAgJHRpbWVvdXQoam9iSW5pdCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgam9icy5pbml0KHJlcG9ydFByb2dyZXNzLCBmdW5jdGlvbigpIHsgJHRpbWVvdXQoam9iSW5pdCk7IH0gKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbUNob29zZUNsYXNzJywgY2hvb3NlQ2xhc3MpO1xyXG5cclxuZnVuY3Rpb24gY2hvb3NlQ2xhc3MoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICBzY29wZToge30sXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGpvYjogJz1qb2InLFxyXG4gICAgICBvblNldEpvYjogJyZvblNldEpvYidcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL3dpZGdldHMvY2hvb3NlLWNsYXNzLmh0bWwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICBjb250cm9sbGVyOiBbXHJcbiAgICAgICckd2luZG93JywnJGxvY2F0aW9uJywnJHJvdXRlUGFyYW1zJywnJHRpbWVvdXQnLCdzYXZlSGVscGVyJywnZG50RGF0YScsJ2pvYnMnLCdoQ29kZVZhbHVlcycsJ2l0ZW1Db2x1bW5zVG9Mb2FkJywnY2hhcmFjdGVyJywgXHJcbiAgICAgIGNob29zZUNsYXNzQ29udHJvbGxlcl0sXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hvb3NlQ2xhc3NDb250cm9sbGVyKCR3aW5kb3csJGxvY2F0aW9uLCRyb3V0ZVBhcmFtcywkdGltZW91dCxzYXZlSGVscGVyLGRudERhdGEsam9icyxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCxjaGFyYWN0ZXIpIHtcclxuICB0aGlzLmdldEZpbmFsSm9icyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGFsbEpvYnMgPSBqb2JzLmdldEZpbmFsSm9icygpO1xyXG4gICAgdmFyIGZpbmFsSm9icyA9IFtdO1xyXG4gICAgZm9yKHZhciBqPTA7ajxhbGxKb2JzLmxlbmd0aDsrK2opIHtcclxuICAgICAgaWYoam9icy5nZXRCYXNlSm9iTmFtZShhbGxKb2JzW2pdKSA9PSB0aGlzLmJKb2IpIHtcclxuICAgICAgICBmaW5hbEpvYnMucHVzaChhbGxKb2JzW2pdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbmFsSm9icztcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRCYXNlSm9icyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGpvYnMuZ2V0QmFzZUpvYnMoKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRKb2JOYW1lID0gZnVuY3Rpb24oZW5nbGlzaE5hbWUpIHtcclxuICAgIHZhciBhbGxKb2JzID0gam9icy5nZXRBbGxKb2JzKCk7XHJcbiAgICBmb3IodmFyIGo9MDtqPGFsbEpvYnMubGVuZ3RoOysraikge1xyXG4gICAgICBpZihhbGxKb2JzW2pdLmQuRW5nbGlzaE5hbWUgPT0gZW5nbGlzaE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gYWxsSm9ic1tqXS5uYW1lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2V0Sm9iID0gZnVuY3Rpb24oam9iKSB7XHJcbiAgICB0aGlzLmpvYiA9IGpvYjtcclxuICAgIGlmKGpvYikge1xyXG4gICAgICB0aGlzLm9uU2V0Sm9iKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIGpvYnMuaW5pdChyZXBvcnRQcm9ncmVzcywgJHRpbWVvdXQpO1xyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcblxyXG59XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbiAgXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5zaW1DYXRlZ29yeUxpbmtzJywgZG5zaW1DYXRlZ29yeUxpbmtzKTtcclxuXHJcbmZ1bmN0aW9uIGRuc2ltQ2F0ZWdvcnlMaW5rcygpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgY29sbGFwc2U6ICc9Y29sbGFwc2UnLFxyXG4gICAgICBjYXQ6ICc9Y2F0JyxcclxuICAgICAgYnVpbGRTY3JlZW46ICc9YnVpbGRTY3JlZW4nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZSdcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL3dpZGdldHMvZG5zaW0tY2F0ZWdvcnktbGlua3MuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiBkbnNpbUNhdGVnb3J5TGlua3NDb250cm9sbGVyLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgfTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGRuc2ltQ2F0ZWdvcnlMaW5rc0NvbnRyb2xsZXIoaXRlbUNhdGVnb3J5LCAkd2luZG93LCB0cmFuc2xhdGlvbnMpIHtcclxuXHJcbiAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgdm0uY2F0ZWdvcmllcyA9IGl0ZW1DYXRlZ29yeS5jYXRlZ29yaWVzO1xyXG4gIHZtLmNvbGxhcHNlZCA9IHRydWU7XHJcblxyXG4gIHZtLnNob3VsZFNob3cgPSBmdW5jdGlvbihhY3Rpb24pIHtcclxuICAgIGlmKHZtLmJ1aWxkU2NyZWVuKSB7XHJcbiAgICAgIHJldHVybiAhYWN0aW9uLmhpZGVJbkJ1aWxkO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiAhYWN0aW9uLmhpZGVJblNlYXJjaDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZtLmlzTG9hZGluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuICF0cmFuc2xhdGlvbnMubG9hZGVkO1xyXG4gIH1cclxuXHJcbiAgdm0uc2V0Q2F0ZWdvcnkgPSBmdW5jdGlvbihhY3Rpb24pIHtcclxuICAgIFxyXG4gICAgaWYodm0uY29sbGFwc2UpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ2NvbGxhcHNpbmcgY2F0JywgYWN0aW9uKTtcclxuICAgICAgdm0uY29sbGFwc2VkID0gIXZtLmNvbGxhcHNlZDtcclxuICAgICAgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gY29uc29sZS5sb2coJ3NldHRpbmcgY2F0JywgYWN0aW9uKTtcclxuICAgIGlmKHZtLmNhdCAhPSBhY3Rpb24pIHtcclxuICAgICAgdm0uY2F0ID0gYWN0aW9uO1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2VsZWN0ZWRJdGVtQ2F0ZWdvcnknLCBhY3Rpb24ubmFtZSk7XHJcblxyXG4gICAgICBpZih2bS5vbkNoYW5nZSkge1xyXG4gICAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZtLmdldE5hbWUgPSBmdW5jdGlvbihhY3Rpb24pIHtcclxuICAgIGlmKGFjdGlvbi50SWQpIHtcclxuICAgICAgcmV0dXJuIHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoYWN0aW9uLnRJZCkudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gYWN0aW9uLm5hbWU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbiAgXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5zaW1JdGVtSWNvbicsIFsnZXhwb3J0TGlua0hlbHBlcicsJyRsb2NhdGlvbicsJ3JlZ2lvbicsIGRuc2ltSXRlbUljb25dKTtcclxuXHJcbmZ1bmN0aW9uIGRuc2ltSXRlbUljb24oZXhwb3J0TGlua0hlbHBlciwkbG9jYXRpb24scmVnaW9uKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICBzY29wZToge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvd2lkZ2V0cy9kbnNpbS1pdGVtLWljb24uaHRtbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuJHdhdGNoKCdpdGVtJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAkc2NvcGUuaWNvbkltYWdlID0gJHNjb3BlLmdldEljb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgJHNjb3BlLmdldEljb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZigkc2NvcGUuaXRlbSAmJiAkc2NvcGUuaXRlbS5pY29uID4gMCkge1xyXG4gICAgICAgICAgdmFyIGZpbGVJbmRleCA9IE1hdGguZmxvb3IoJHNjb3BlLml0ZW0uaWNvbi8yMDAgKyAxKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHByZWZpeDtcclxuICAgICAgICAgIGlmKCRzY29wZS5pdGVtLnR5cGVOYW1lID09ICdza2lsbHMnKSB7XHJcbiAgICAgICAgICAgIHByZWZpeCA9ICdza2lsbGljb24nO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHByZWZpeCA9ICdpdGVtaWNvbic7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKGZpbGVJbmRleCA+IDkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIGZpbGVJbmRleCArICcucG5nJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJzAnICsgZmlsZUluZGV4ICsgJy5wbmcnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgJHNjb3BlLmljb25JbWFnZSA9ICRzY29wZS5nZXRJY29uKCk7XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuZ2V0SWNvblhQb3N0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYoJHNjb3BlLml0ZW0gJiYgJHNjb3BlLml0ZW0uaWNvbiA+IDApIHtcclxuICAgICAgICAgIHJldHVybiAoKCRzY29wZS5pdGVtLmljb24gJSAxMCkgKiA0MCkgKyA1O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgJHNjb3BlLmdldEljb25ZUG9zdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmKCRzY29wZS5pdGVtICYmICRzY29wZS5pdGVtLmljb24gPiAwKSB7XHJcbiAgICAgICAgICByZXR1cm4gKE1hdGguZmxvb3IoKCRzY29wZS5pdGVtLmljb24gJSAyMDApIC8gMTApICogNDApICsgNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2Ruc2ltSXRlbUxpbmsnLCBbJ2V4cG9ydExpbmtIZWxwZXInLCckbG9jYXRpb24nLCdyZWdpb24nLCBkbnNpbUl0ZW1MaW5rXSk7XHJcblxyXG5mdW5jdGlvbiBkbnNpbUl0ZW1MaW5rKGV4cG9ydExpbmtIZWxwZXIsJGxvY2F0aW9uLHJlZ2lvbikge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgc2NvcGU6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgICAgbm9DbGljazogJz1ub0NsaWNrJyxcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL3dpZGdldHMvZG5zaW0taXRlbS1saW5rLmh0bWwnLFxyXG4gICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAkc2NvcGUuaXRlbUxpbmsgPSAnaXRlbS8/cmVnaW9uPScgKyByZWdpb24uZG50TG9jYXRpb24ucmVnaW9uICsgJyZpPScgKyBleHBvcnRMaW5rSGVscGVyLmVuY29kZUl0ZW0oJHNjb3BlLml0ZW0pO1xyXG4gICAgICAvLyB2YXIgYmFzZVBhdGggPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuJHdhdGNoKCdpdGVtJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAkc2NvcGUuaXRlbUxpbmsgPSAnaXRlbS8/cmVnaW9uPScgKyByZWdpb24uZG50TG9jYXRpb24ucmVnaW9uICsgJyZpPScgKyBleHBvcnRMaW5rSGVscGVyLmVuY29kZUl0ZW0oJHNjb3BlLml0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5zaW1Kb2JJY29uJywgW2Ruc2ltSm9iSWNvbl0pO1xyXG5cclxuZnVuY3Rpb24gZG5zaW1Kb2JJY29uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgc2NvcGU6IHt9LFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBzbWFsbDogJz1zbWFsbCdcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL3dpZGdldHMvZG5zaW0tam9iLWljb24uaHRtbCcsXHJcbiAgICBjb250cm9sbGVyOiBkbnNpbUpvYkljb25Db250cm9sbGVyLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCdcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRuc2ltSm9iSWNvbkNvbnRyb2xsZXIoKSB7XHJcbiAgXHJcbiAgaWYodGhpcy5zbWFsbCkge1xyXG4gICAgdGhpcy5zaXplVmFsdWUgPSAnMjA1cHggMjA1cHgnO1xyXG4gICAgdGhpcy5pY29uU2l6ZSA9IDIyO1xyXG4gICAgdGhpcy5pY29uT2Zmc2V0ID0gMDtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB0aGlzLnNpemVWYWx1ZSA9ICc0MTBweCA0MTBweCc7XHJcbiAgICB0aGlzLmljb25TaXplID0gNDQ7XHJcbiAgICB0aGlzLmljb25PZmZzZXQgPSA1O1xyXG4gIH1cclxuXHJcbiAgdGhpcy5nZXRJY29uWFBvc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKHRoaXMuaXRlbSAmJiB0aGlzLml0ZW0uZCAmJiB0aGlzLml0ZW0uZC5Kb2JJY29uID4gMCkge1xyXG4gICAgICByZXR1cm4gKCh0aGlzLml0ZW0uZC5Kb2JJY29uICUgOSkgKiB0aGlzLmljb25TaXplKSArIHRoaXMuaWNvbk9mZnNldDtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEljb25ZUG9zdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodGhpcy5pdGVtICYmIHRoaXMuaXRlbS5kICYmIHRoaXMuaXRlbS5kLkpvYkljb24gPiAwKSB7XHJcbiAgICAgIHJldHVybiAoTWF0aC5mbG9vcih0aGlzLml0ZW0uZC5Kb2JJY29uIC8gOSkgKiB0aGlzLmljb25TaXplKSArIHRoaXMuaWNvbk9mZnNldDtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbUxvYWRpbmcnLCBbJ2RudERhdGEnLCd0cmFuc2xhdGlvbnMnLCckdGltZW91dCcsICdyZWdpb24nLCBkbnNpbUxvYWRpbmddKTtcclxuXHJcbmZ1bmN0aW9uIGRuc2ltTG9hZGluZyhkbnREYXRhLCB0cmFuc2xhdGlvbnMsICR0aW1lb3V0LCByZWdpb24pIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgc2NvcGU6IHtcclxuICAgICAgYWxzb1Nob3dGb3I6ICc9YWxzb1Nob3dGb3InLFxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvd2lkZ2V0cy9kbnNpbS1sb2FkaW5nLmh0bWwnLFxyXG4gICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAkc2NvcGUuJG9uKCdUUkFOU0xBVElPTl9MT0FEX0VWRU5UJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLnNldExvYWRDb3VudCgpO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS4kb24oJ0ROVERBVEFfTE9BRF9FVkVOVCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS5zZXRMb2FkQ291bnQoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuJG9uKCdETlREQVRBX0xPQURfRVJST1InLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzY29wZS5sb2FkRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS4kb24oJ1RSQU5TTEFUSU9OX0xPQURfRVJST1InLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzY29wZS5sb2FkRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgICRzY29wZS5udW1Mb2FkaW5nID0gMDtcclxuICAgICAgJHNjb3BlLnNldExvYWRDb3VudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS5ub1JlZ2lvbiA9ICFyZWdpb24uZG50TG9jYXRpb247XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG4gPSBkbnREYXRhLmFueUxvYWRpbmcoKTtcclxuICAgICAgICBpZighdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbisrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmKCRzY29wZS5udW1Mb2FkaW5nIDwgbiB8fCAhJHNjb3BlLnRvdGFsVG9Mb2FkKSB7XHJcbiAgICAgICAgICAgICRzY29wZS50b3RhbFRvTG9hZCA9IG47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAkc2NvcGUubnVtTG9hZGluZyA9IG47XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgJHRpbWVvdXQoKTtcclxuICAgICAgfTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS5sb2FkRXJyb3IgPSBmYWxzZTtcclxuICAgICAgJHNjb3BlLnNldExvYWRDb3VudCgpO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5zaW1TZWxlY3RBbGxPbkNsaWNrJywgW2Ruc2ltU2VsZWN0QWxsT25DbGlja10pO1xyXG5cclxuZnVuY3Rpb24gZG5zaW1TZWxlY3RBbGxPbkNsaWNrKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICB2YXIgaGFzU2VsZWN0ZWRBbGwgPSBmYWxzZTtcclxuICAgICAgZWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbigkZXZlbnQpIHtcclxuICAgICAgICBpZiAoIWhhc1NlbGVjdGVkQWxsKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvL0lPcywgU2FmYXJpLCB0aG93cyBleGNlcHRpb24gb24gQ2hyb21lIGV0Y1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSB0aGlzLnZhbHVlLmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgIGhhc1NlbGVjdGVkQWxsID0gdHJ1ZTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAvL05vbiBJT3Mgb3B0aW9uIGlmIG5vdCBzdXBwb3J0ZWQsIGUuZy4gQ2hyb21lXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0KCk7XHJcbiAgICAgICAgICAgIGhhc1NlbGVjdGVkQWxsID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICAvL09uIGJsdXIgcmVzZXQgaGFzU2VsZWN0ZWRBbGwgdG8gYWxsb3cgZnVsbCBzZWxlY3RcclxuICAgICAgZWxlbWVudC5vbignYmx1cicsIGZ1bmN0aW9uKCRldmVudCkge1xyXG4gICAgICAgIGhhc1NlbGVjdGVkQWxsID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbVN0YXRzJywgWydoQ29kZVZhbHVlcycsZG5zaW1TdGF0c10pO1xyXG5cclxuZnVuY3Rpb24gZG5zaW1TdGF0cyhoQ29kZVZhbHVlcykge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgc2NvcGU6IHtcclxuICAgICAgc3RhdHM6ICc9c3RhdHMnLFxyXG4gICAgICBidWlsZDogJz1idWlsZCcsXHJcbiAgICAgIGFsdFN0YXRzOiAnPWFsdFN0YXRzJyxcclxuICAgICAgc2VwYXJhdG9yOiAnPXNlcGFyYXRvcicsXHJcbiAgICAgIGZpbHRlcjogJz1maWx0ZXInLFxyXG4gICAgICBudW1JblNldDogJz1udW1JblNldCdcclxuICAgIH0sXHJcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgc2VwO1xyXG4gICAgICBpZighJHNjb3BlLnNlcGFyYXRvcikge1xyXG4gICAgICAgIHNlcCA9ICcnO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNlcCA9ICcmbmJzcDsnICsgJHNjb3BlLnNlcGFyYXRvciArICcgJztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdmFyIGFkZGVkRWxlbWVudHMgPSBbXTtcclxuICAgICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IGVsZW1lbnQuY3NzKCdkaXNwbGF5Jyk7XHJcbiAgICAgIFxyXG4gICAgICBmdW5jdGlvbiBzaG93U3RhdHMoKSB7XHJcbiAgICAgICAgZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScgKTtcclxuICAgICAgICB2YXIgc3RhdHMgPSAkc2NvcGUuc3RhdHM7XHJcbiAgICAgICAgaWYoIXN0YXRzKSB7XHJcbiAgICAgICAgICBzdGF0cyA9ICRzY29wZS5hbHRTdGF0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGFkZGVkRWxlbWVudHMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgIHZhbHVlLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBmaXJzdCA9IHRydWU7XHJcbiAgICAgICAgdmFyIGxhc3RFbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBhcHBlbmQodGV4dCkge1xyXG4gICAgICAgICAgdmFyIG5ld0VsZW1lbnQgPSBlbGVtZW50LmNsb25lKCk7XHJcbiAgICAgICAgICBuZXdFbGVtZW50LmNzcygnZGlzcGxheScsIG9yaWdpbmFsRGlzcGxheSk7XHJcbiAgICAgICAgICBuZXdFbGVtZW50Lmh0bWwodGV4dCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGxhc3RFbGVtZW50LmFmdGVyKG5ld0VsZW1lbnQpO1xyXG4gICAgICAgICAgbGFzdEVsZW1lbnQgPSBuZXdFbGVtZW50O1xyXG4gICAgICAgICAgYWRkZWRFbGVtZW50cy5wdXNoKG5ld0VsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ2V0IHN0YXRzIHRoYXQgYXJlIHVzZWQgdG8gc3VtbWFyaXNlXHJcbiAgICAgICAgdmFyIHN1bW1hcnlGb3JTdGF0cyA9IHt9O1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzdGF0cywgZnVuY3Rpb24oc3RhdCwga2V5KSB7XHJcbiAgICAgICAgICB2YXIgZGVmID0gaENvZGVWYWx1ZXMuc3RhdHNbc3RhdC5pZF07XHJcbiAgICAgICAgICBpZihkZWYgJiYgZGVmLnN1bW1hcnlGb3IpIHtcclxuICAgICAgICAgICAgc3VtbWFyeUZvclN0YXRzW2RlZi5zdW1tYXJ5Rm9yXSA9IHN0YXQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHN0YXRzLCBmdW5jdGlvbihzdGF0LCBrZXkpIHtcclxuICAgICAgICAgIHZhciBvdXRwdXQgPSAnJztcclxuXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygncHJvY2Vzc2luZyBzdGF0Jywgc3RhdCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKHN0YXQuaWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBkZWYgPSBoQ29kZVZhbHVlcy5zdGF0c1tzdGF0LmlkXTtcclxuICAgICAgICAgICAgaWYoISRzY29wZS5maWx0ZXIgJiYgJ2hpZGUnIGluIGRlZiAmJiBkZWYuaGlkZSkge1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoJHNjb3BlLmZpbHRlciAmJiAhZGVmWyRzY29wZS5maWx0ZXJdKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihkZWYuc3VtbWFyeUZvcikge1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbm8gc3VtbWFyeUZvcicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHNlcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCduZWVkU2V0TnVtJyBpbiBzdGF0KSB7XHJcbiAgICAgICAgICAgICAgaWYoc3RhdC5uZWVkU2V0TnVtIDw9ICRzY29wZS5udW1JblNldCkge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9ICcqJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHN0YXQubmVlZFNldE51bSArICcmbmJzcDsnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvdXRwdXQgKz0gJzxzdHJvbmc+JztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCRzY29wZS5idWlsZCkge1xyXG4gICAgICAgICAgICAgIGlmKGRlZi5lbGVtZW50ID09ICdwcmltYXJ5Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZUlkID0gMDtcclxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5idWlsZC5lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgIGVsZUlkID0gJHNjb3BlLmJ1aWxkLmVsZW1lbnQuaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaENvZGVWYWx1ZXMuZWxlbWVudHNbZWxlSWRdLm5hbWUgKyAnJm5ic3A7JztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSBpZihkZWYuZWxlbWVudCA9PSAnc2Vjb25kYXJ5Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZUlkID0gMDtcclxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5idWlsZC5zZWNvbmRhcnlFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgIGVsZUlkID0gJHNjb3BlLmJ1aWxkLnNlY29uZGFyeUVsZW1lbnQuaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaENvZGVWYWx1ZXMuZWxlbWVudHNbZWxlSWRdLm5hbWUgKyAnJm5ic3A7JztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG91dHB1dCArPSBkZWYubmFtZSsnOjwvc3Ryb25nPiZuYnNwOycrZGVmLmRpc3BsYXkoc3RhdCk7XHJcbiAgICAgICAgICAgIGlmKGRlZi5jb21iaW5lV2l0aCA+IDApIHtcclxuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc3RhdHMsIGZ1bmN0aW9uKHN0YXQyLCBrZXkyKSB7XHJcbiAgICAgICAgICAgICAgICBpZihzdGF0Mi5pZCA9PSBkZWYuY29tYmluZVdpdGgpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoc3RhdDIubWF4ICE9IHN0YXQubWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9ICctJyArIGRlZi5kaXNwbGF5KHN0YXQyKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihzdGF0LmlkIGluIHN1bW1hcnlGb3JTdGF0cykge1xyXG4gICAgICAgICAgICAgIHZhciBzU3RhdCA9IHN1bW1hcnlGb3JTdGF0c1tzdGF0LmlkXTtcclxuICAgICAgICAgICAgICB2YXIgc0RlZiA9IGhDb2RlVmFsdWVzLnN0YXRzW3NTdGF0LmlkXTtcclxuICAgICAgICAgICAgICBvdXRwdXQgKz0gJyZuYnNwO3wmbmJzcDs8ZW0+JyArIHNEZWYuZGlzcGxheShzU3RhdCk7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9ICc8L2VtPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHNlcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCduZWVkU2V0TnVtJyBpbiBzdGF0KSB7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHN0YXQubmVlZFNldE51bSArICctSW5jcmVhc2VzJm5ic3A7JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgb3V0cHV0ICs9IHN0YXQuaWQrJzombmJzcDsnK3N0YXQubWF4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBhcHBlbmQob3V0cHV0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAkc2NvcGUuJHdhdGNoKCdzdGF0cycsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICAgIGlmIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgc2hvd1N0YXRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS4kd2F0Y2goJ2FsdFN0YXRzJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICBzaG93U3RhdHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgJHNjb3BlLiR3YXRjaCgnbnVtSW5TZXQnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICBpZiAobmV3VmFsdWUgPj0gMCkge1xyXG4gICAgICAgICAgc2hvd1N0YXRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbVN0cmluZ1RvTnVtYmVyJywgZG5zaW1TdHJpbmdUb051bWJlcik7XHJcblxyXG5mdW5jdGlvbiBkbnNpbVN0cmluZ1RvTnVtYmVyKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuICcnICsgdmFsdWU7XHJcbiAgICAgIH0pO1xyXG4gICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5zaW1TdHJpbmdUb1BlcmNlbnQnLCBkbnNpbVN0cmluZ1RvTnVtYmVyKTtcclxuXHJcbmZ1bmN0aW9uIGRuc2ltU3RyaW5nVG9OdW1iZXIoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4gICAgICBuZ01vZGVsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gJycgKyAodmFsdWUvMTAwLjApO1xyXG4gICAgICB9KTtcclxuICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUsIDEwKSoxMDA7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2ZpbGVDaGFuZ2UnLCBbJyRwYXJzZScsIGZpbGVDaGFuZ2VGdW5jdGlvbl0pO1xyXG5cclxuZnVuY3Rpb24gZmlsZUNoYW5nZUZ1bmN0aW9uKCRwYXJzZSkge1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgaW4gdGhlIGZpbGUtY2hhbmdlIGF0dHJpYnV0ZS5cclxuICAgICAgICAvLyBOb3RlIHRoZSBhdHRyaWJ1dGUgaGFzIGJlY29tZSBhbiBhbmd1bGFyIGV4cHJlc3Npb24sXHJcbiAgICAgICAgLy8gd2hpY2ggaXMgd2hhdCB3ZSBhcmUgcGFyc2luZy4gVGhlIHByb3ZpZGVkIGhhbmRsZXIgaXMgXHJcbiAgICAgICAgLy8gd3JhcHBlZCB1cCBpbiBhbiBvdXRlciBmdW5jdGlvbiAoYXR0ckhhbmRsZXIpIC0gd2UnbGwgXHJcbiAgICAgICAgLy8gY2FsbCB0aGUgcHJvdmlkZWQgZXZlbnQgaGFuZGxlciBpbnNpZGUgdGhlIGhhbmRsZXIoKVxyXG4gICAgICAgIC8vIGZ1bmN0aW9uIGJlbG93LlxyXG4gICAgICAgIHZhciBhdHRySGFuZGxlciA9ICRwYXJzZShhdHRyc1snZmlsZUNoYW5nZSddKTtcclxuXHJcbiAgICAgICAgLy8gVGhpcyBpcyBhIHdyYXBwZXIgaGFuZGxlciB3aGljaCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZVxyXG4gICAgICAgIC8vIEhUTUwgY2hhbmdlIGV2ZW50LlxyXG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIHByb3ZpZGVkIGhhbmRsZXIgaW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlLlxyXG4gICAgICAgICAgICAvLyBUaGUgZmlsZXMgdmFyaWFibGUgd2lsbCBiZSBhdmFpbGFibGUgZm9yIGNvbnN1bXB0aW9uXHJcbiAgICAgICAgICAgIC8vIGJ5IHRoZSBldmVudCBoYW5kbGVyLlxyXG4gICAgICAgICAgICBhdHRySGFuZGxlcigkc2NvcGUsIHsgJGV2ZW50OiBlLCBmaWxlczogZS50YXJnZXQuZmlsZXMgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBBdHRhY2ggdGhlIGhhbmRsZXIgdG8gdGhlIEhUTUwgY2hhbmdlIGV2ZW50IFxyXG4gICAgICAgIGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2NoYXJhY3RlcicsIGNoYXJhY3Rlcik7XHJcbmZ1bmN0aW9uIGNoYXJhY3RlcihkbnREYXRhLGl0ZW1Db2x1bW5zVG9Mb2FkLGpvYnMsaENvZGVWYWx1ZXMpIHtcclxuXHJcbiAgdmFyIGpvYkNvbnZlcnNpb25zID0gJ3JlYm9vdHBsYXllcndlaWdodHRhYmxlLmx6anNvbic7XHJcbiAgdmFyIHN0YXRDYXBzID0gJ3BsYXllcmNvbW1vbmxldmVsdGFibGUubHpqc29uJztcclxuICB2YXIgam9iQmFzZVN0YXRzID0gJ3BsYXllcmxldmVsdGFibGUub3B0aW1pc2VkLmpzb24nO1xyXG5cclxuICB2YXIgaGVyb0xldmVscyA9ICdoZXJvbGV2ZWx0YWJsZS5sempzb24nO1xyXG4gIHZhciBoZXJvTGV2ZWxQb3RlbnRpYWxzID0gJ3BvdGVudGlhbHRhYmxlX2hlcm9sZXZlbC5sempzb24nO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpbml0OiBmdW5jdGlvbihjb21wbGV0ZSkge1xyXG4gICAgICBqb2JzLmluaXQocmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KGpvYkNvbnZlcnNpb25zLCBpdGVtQ29sdW1uc1RvTG9hZC5qb2JDb252ZXJzaW9uQ29sc1RvTG9hZCwgcmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KHN0YXRDYXBzLCBpdGVtQ29sdW1uc1RvTG9hZC5zdGF0Q2FwQ29sc1RvTG9hZCwgcmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KGpvYkJhc2VTdGF0cywgaXRlbUNvbHVtbnNUb0xvYWQuam9iQmFzZVN0YXRDb2xzVG9Mb2FkLCByZXBvcnRQcm9ncmVzcywgY29tcGxldGUpO1xyXG4gICAgICBkbnREYXRhLmluaXQoaGVyb0xldmVscywgbnVsbCwgcmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KGhlcm9MZXZlbFBvdGVudGlhbHMsIG51bGwsIHJlcG9ydFByb2dyZXNzLCBjb21wbGV0ZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRIZXJvU3RhdHM6IGZ1bmN0aW9uKGhlcm9MZXZlbCkge1xyXG4gICAgICB2YXIgaGVyb1N0YXRzID0gW107XHJcbiAgICAgIGlmKGhlcm9MZXZlbCA+IDApIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBkbnREYXRhLmZpbmRGYXN0KGhlcm9MZXZlbHMsICdpZCcsIGhlcm9MZXZlbCk7XHJcbiAgICAgICAgaWYoaW5kZXgubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHZhciBoID0gZG50RGF0YS5nZXRSb3coaGVyb0xldmVscywgaW5kZXhbMF0pO1xyXG4gICAgICAgICAgaWYoaCkge1xyXG4gICAgICAgICAgICB2YXIgcEluZGV4ID0gZG50RGF0YS5maW5kRmFzdChoZXJvTGV2ZWxQb3RlbnRpYWxzLCAnUG90ZW50aWFsSUQnLCBoLkhlcm9MZXZlbEFiaWxpdHlJRCk7XHJcbiAgICAgICAgICAgIGlmKHBJbmRleC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgIHZhciBwID0gZG50RGF0YS5nZXRSb3coaGVyb0xldmVsUG90ZW50aWFscywgcEluZGV4WzBdKTtcclxuICAgICAgICAgICAgICBpZihwKSB7XHJcbiAgICAgICAgICAgICAgICBoZXJvU3RhdHMgPSBoQ29kZVZhbHVlcy5nZXRTdGF0cyhwKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGhlcm9TdGF0cztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldFN0YXRDYXBzOiBmdW5jdGlvbihsZXZlbCkge1xyXG4gICAgICBpZihsZXZlbCA+IDApIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBkbnREYXRhLmZpbmRGYXN0KHN0YXRDYXBzLCAnaWQnLCBsZXZlbCk7XHJcbiAgICAgICAgaWYoaW5kZXgubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHJldHVybiBkbnREYXRhLmdldFJvdyhzdGF0Q2FwcywgaW5kZXhbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0Q29udmVyc2lvbnM6IGZ1bmN0aW9uKGpvYklkKSB7XHJcbiAgICAgIGlmKGpvYklkID4gMCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGRudERhdGEuZmluZEZhc3Qoam9iQ29udmVyc2lvbnMsICdpZCcsIGpvYklkKTtcclxuICAgICAgICBpZihpbmRleC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuIGRudERhdGEuZ2V0Um93KGpvYkNvbnZlcnNpb25zLCBpbmRleFswXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge307XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRCYXNlU3RhdHM6IGZ1bmN0aW9uKGxldmVsLCBqb2JJZCkge1xyXG4gICAgICBpZihsZXZlbCA+IDAgJiYgam9iSWQgPiAwKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gZG50RGF0YS5maW5kRmFzdChqb2JCYXNlU3RhdHMsICdpZCcsIChOdW1iZXIoam9iSWQpICogMTAwKSArIE51bWJlcihsZXZlbCkgLSAxMDApO1xyXG4gICAgICAgIGlmKGluZGV4Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gZG50RGF0YS5nZXRSb3coam9iQmFzZVN0YXRzLCBpbmRleFswXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2l0ZW1Db2x1bW5zVG9Mb2FkJyxbaXRlbUNvbHVtbnNUb0xvYWRdKTtcclxuZnVuY3Rpb24gaXRlbUNvbHVtbnNUb0xvYWQoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIG1haW5EbnQ6IHtcclxuICAgICAgTmFtZUlEOiB0cnVlLCBEZXNjcmlwdGlvbklEOiB0cnVlLCBOYW1lSURQYXJhbTogdHJ1ZSwgRGVzY3JpcHRpb25JRFBhcmFtOiB0cnVlLFxyXG4gICAgICBUeXBlOiB0cnVlLFR5cGVQYXJhbTE6IHRydWUsVHlwZVBhcmFtMjogdHJ1ZSwgVHlwZVBhcmFtMzogdHJ1ZSwgTGV2ZWxMaW1pdDogdHJ1ZSwgTmVlZEpvYkNsYXNzOiB0cnVlLCBSYW5rOiB0cnVlLFxyXG4gICAgICBTdGF0ZTE6IHRydWUsIFN0YXRlVmFsdWUxOiB0cnVlLCBTdGF0ZTFfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTI6IHRydWUsIFN0YXRlVmFsdWUyOiB0cnVlLCBTdGF0ZTJfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTM6IHRydWUsIFN0YXRlVmFsdWUzOiB0cnVlLCBTdGF0ZTNfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTQ6IHRydWUsIFN0YXRlVmFsdWU0OiB0cnVlLCBTdGF0ZTRfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTU6IHRydWUsIFN0YXRlVmFsdWU1OiB0cnVlLCBTdGF0ZTVfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTY6IHRydWUsIFN0YXRlVmFsdWU2OiB0cnVlLCBTdGF0ZTZfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTc6IHRydWUsIFN0YXRlVmFsdWU3OiB0cnVlLCBTdGF0ZTdfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTg6IHRydWUsIFN0YXRlVmFsdWU4OiB0cnVlLCBTdGF0ZThfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTk6IHRydWUsIFN0YXRlVmFsdWU5OiB0cnVlLCBTdGF0ZTlfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTEwOiB0cnVlLFN0YXRlVmFsdWUxMDogdHJ1ZSxTdGF0ZTEwX01heDogdHJ1ZSxcclxuICAgICAgRW5jaGFudElEOiB0cnVlLFxyXG4gICAgICBTa2lsbElEOiB0cnVlLFxyXG4gICAgICBkcmFnb25qZXdlbHR5cGU6IHRydWUsIEFibGVXU3RvcmFnZTogdHJ1ZSwgRXhjaGFuZ2VUeXBlOnRydWUsIEljb25JbWFnZUluZGV4OiB0cnVlLCBJc0Nhc2g6IHRydWUsIERpc2pvaW50RHJvcDE6IHRydWUsIERpc2pvaW50YW1vdW50OiB0cnVlXHJcbiAgICB9LFxyXG4gICAgcGFydHNEbnQ6IHtcclxuICAgICAgU2V0SXRlbUlEOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZW5jaGFudERudDoge1xyXG4gICAgICBFbmNoYW50SUQ6IHRydWUsRW5jaGFudExldmVsOiB0cnVlLEVuY2hhbnRSYXRpbzogdHJ1ZSxCcmVha1JhdGlvOiB0cnVlLE1pbkRvd246IHRydWUsTWF4RG93bjogdHJ1ZSxOZWVkQ29pbjogdHJ1ZSxcclxuICAgICAgRGlzam9pbnREcm9wOiB0cnVlLFxyXG4gICAgICBOZWVkSXRlbUlEMTogdHJ1ZSxOZWVkSXRlbUNvdW50MTogdHJ1ZSxOZWVkSXRlbUlEMjogdHJ1ZSxOZWVkSXRlbUNvdW50MjogdHJ1ZSxOZWVkSXRlbUlEMzogdHJ1ZSxOZWVkSXRlbUNvdW50MzogdHJ1ZSxOZWVkSXRlbUlENDogdHJ1ZSxOZWVkSXRlbUNvdW50NDogdHJ1ZSxOZWVkSXRlbUlENTogdHJ1ZSxOZWVkSXRlbUNvdW50NTogdHJ1ZSxQcm90ZWN0SXRlbUNvdW50OiB0cnVlLFxyXG4gICAgICBTdGF0ZTE6IHRydWUsU3RhdGUxVmFsdWU6IHRydWUsU3RhdGUyOiB0cnVlLFN0YXRlMlZhbHVlOiB0cnVlLFN0YXRlMzogdHJ1ZSxTdGF0ZTNWYWx1ZTogdHJ1ZSxTdGF0ZTQ6IHRydWUsU3RhdGU0VmFsdWU6IHRydWUsU3RhdGU1OiB0cnVlLFN0YXRlNVZhbHVlOiB0cnVlLFN0YXRlNjogdHJ1ZSxTdGF0ZTZWYWx1ZTogdHJ1ZSxTdGF0ZTc6IHRydWUsU3RhdGU3VmFsdWU6IHRydWUsU3RhdGU4OiB0cnVlLFN0YXRlOFZhbHVlOiB0cnVlLFN0YXRlOTogdHJ1ZSxTdGF0ZTlWYWx1ZTogdHJ1ZSxTdGF0ZTEwOiB0cnVlLFN0YXRlMTBWYWx1ZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHBvdGVudGlhbERudCA6IHtcclxuICAgICAgUG90ZW50aWFsSUQ6IHRydWUsIFBvdGVudGlhbE5vOiB0cnVlLFBvdGVudGlhbFJhdGlvOiB0cnVlLFxyXG4gICAgICBTdGF0ZTE6IHRydWUsU3RhdGUxVmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlMjogdHJ1ZSxTdGF0ZTJWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGUzOiB0cnVlLFN0YXRlM1ZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTQ6IHRydWUsU3RhdGU0VmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlNTogdHJ1ZSxTdGF0ZTVWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGU2OiB0cnVlLFN0YXRlNlZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTc6IHRydWUsU3RhdGU3VmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlODogdHJ1ZSxTdGF0ZThWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGU5OiB0cnVlLFN0YXRlOVZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTEwOiB0cnVlLFN0YXRlMTBWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGUxMTogdHJ1ZSxTdGF0ZTExVmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlMTI6IHRydWUsU3RhdGUxMlZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTEzOiB0cnVlLFN0YXRlMTNWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGUxNDogdHJ1ZSxTdGF0ZTE0VmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlMTU6IHRydWUsU3RhdGUxNVZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTE2OiB0cnVlLFN0YXRlMTZWYWx1ZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGdlbURudDoge1xyXG4gICAgICBUeXBlOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgc2V0RG50IDogbnVsbCxcclxuICAgIHNwYXJrRG50OiBudWxsLFxyXG4gICAgam9ic0RudDoge1xyXG4gICAgICBKb2JOYW1lOiB0cnVlLEpvYk51bWJlcjogdHJ1ZSxCYXNlQ2xhc3M6IHRydWUsUGFyZW50Sm9iOiB0cnVlLCBFbmdsaXNoTmFtZTogdHJ1ZSwgSm9iSWNvbjogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGpvYkJhc2VTdGF0Q29sc1RvTG9hZDoge1xyXG4gICAgICBTdHJlbmd0aDp0cnVlLEFnaWxpdHk6dHJ1ZSxJbnRlbGxpZ2VuY2U6dHJ1ZSxTdGFtaW5hOnRydWUsQWdncm9wZXJQdkU6dHJ1ZSxCYXNlTVA6dHJ1ZVxyXG4gICAgfSxcclxuICAgIHN0YXRDYXBDb2xzVG9Mb2FkOiB7XHJcbiAgICAgIENiYXNlOiB0cnVlLFxyXG4gICAgICBDZGVmZW5zZTogdHJ1ZSxcclxuICAgICAgQ2NyaXRpY2FsOiB0cnVlLFxyXG4gICAgICBDZmluYWxkYW1hZ2U6IHRydWUsXHJcbiAgICAgIENjcml0aWNhbERhbWFnZTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBqb2JDb252ZXJzaW9uQ29sc1RvTG9hZDoge1xyXG4gICAgICBIUDogdHJ1ZSxTdHJlbmd0aEF0dGFjazogdHJ1ZSxBZ2lsaXR5QXR0YWNrOiB0cnVlLEludGVsbGlnZW5jZUF0dGFjazogdHJ1ZSxQaHlzaWNhbERlZmVuc2U6IHRydWUsTWFnaWNEZWZlbnNlOiB0cnVlLENyaXRpY2FsOiB0cnVlLENyaXRpY2FsUmVzaXN0YW5jZTogdHJ1ZSxTdGlmZjogdHJ1ZSxTdGlmZlJlc2lzdGFuY2U6IHRydWUsU3R1bjogdHJ1ZSxTdHVuUmVzaXN0YW5jZTogdHJ1ZSxNb3ZlU3BlZWQ6IHRydWUsTW92ZVNwZWVkUmV2aXNpb246IHRydWUsRG93bkRlbGF5OiB0cnVlLEVsZW1lbnRBdHRhY2s6IHRydWUsRWxlbWVudERlZmVuc2U6IHRydWUsRWxlbWVudERlZmVuc2VNaW46IHRydWUsRWxlbWVudERlZmVuc2VNYXg6IHRydWUsU3RyZW5ndGhJbnRlbGxpZ2VuY2VUb0NyaXRpY2FsRGFtYWdlOiB0cnVlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2RudERhdGEnLCBbJyRyb290U2NvcGUnLCckdGltZW91dCcsZG50RGF0YV0pO1xyXG5cclxuZnVuY3Rpb24gZG50RGF0YSgkcm9vdFNjb3BlLCR0aW1lb3V0KSB7XHJcbiAgXHJcbiAgZnVuY3Rpb24gY3JlYXRlTG9hZGVyKGRudExvY2F0aW9uLCBmaWxlLCBjb2xzVG9Mb2FkKSB7XHJcblxyXG4gICAgdmFyIGxvYWRlciA9IHtcclxuICAgICAgcmVhZGVyOiBuZXcgRG50UmVhZGVyKCksXHJcbiAgICAgIFxyXG4gICAgICBsb2FkZWQ6IGZhbHNlLFxyXG4gICAgICBzdGFydGVkTG9hZGluZzogZmFsc2UsXHJcbiAgICAgIFxyXG4gICAgICBmaWxlOiBmaWxlLFxyXG4gICAgICBcclxuICAgICAgZG50TG9jYXRpb246IGRudExvY2F0aW9uLFxyXG4gICAgICBwcm9ncmVzc0NhbGxiYWNrOiBudWxsLFxyXG4gICAgICBjb21wbGV0ZUNhbGxiYWNrcyA6IFtdLFxyXG4gICAgICBcclxuICAgICAgaW5pdDogZnVuY3Rpb24ocHJvZ3Jlc3MsIGNvbXBsZXRlLCBpZ25vcmVFcnJvcnMpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZih0aGlzLmxvYWRlZCkge1xyXG4gICAgICAgICAgaWYoY29tcGxldGUpIHtcclxuICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzQ2FsbGJhY2sgPSBwcm9ncmVzcztcclxuICAgICAgICAgIGlmKGNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVDYWxsYmFja3MucHVzaChjb21wbGV0ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKCF0aGlzLnN0YXJ0ZWRMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZExvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnJlYWRlci5jb2xzVG9Mb2FkID0gY29sc1RvTG9hZDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMuZG50TG9jYXRpb24gJiYgXHJcbiAgICAgICAgICAgICAgdGhpcy5kbnRMb2NhdGlvbi51cmwgJiZcclxuICAgICAgICAgICAgICB0aGlzLmRudExvY2F0aW9uLnVybC5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdETlREQVRBX0xPQURfRVZFTlQnKTtcclxuXHJcbiAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0LnJlYWRlci5sb2FkRG50RnJvbVNlcnZlckZpbGUoXHJcbiAgICAgICAgICAgICAgICAgIHQuZG50TG9jYXRpb24udXJsICsgJy8nICsgZmlsZSxcclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodC5wcm9ncmVzc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0LnByb2dyZXNzQ2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sIFxyXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXN1bHQsIGZpbGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5pbmZvKCdkbnQgbG9hZGluZyBjb21wbGV0ZSA6ICcgKyBmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB0LmxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHQuY29tcGxldGVDYWxsYmFja3MsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jb21wbGV0ZUNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnRE5UREFUQV9MT0FEX0VWRU5UJyk7XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZmFpbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihpZ25vcmVFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHQubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpZ25vcmluZyB0aGUgZXJyb3IgLSB0aGlzIGZpbGUgbWF5IG5vdCBleGlzdCB5ZXQgZm9yIHRoZSByZWdpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0LmNvbXBsZXRlQ2FsbGJhY2tzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0LmNvbXBsZXRlQ2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0ROVERBVEFfTE9BRF9FVkVOVCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHQuc3RhcnRlZExvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgIHQubG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0ROVERBVEFfTE9BRF9FUlJPUicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSAgKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRudCBsb2NhdGlvbiBub3Qgc2V0IVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgXHJcbiAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnJlYWRlciA9IG5ldyBEbnRSZWFkZXIoKTtcclxuICAgICAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnRlZExvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcmV0dXJuIGxvYWRlcjtcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBsb2FkZXJzIDoge30sXHJcbiAgICBmaW5kSW5kZXhlcyA6IHt9LFxyXG4gICAgZG50TG9jYXRpb24gOiBudWxsLFxyXG4gICAgXHJcbiAgICBzZXRMb2NhdGlvbjogZnVuY3Rpb24obG9jYXRpb24pIHtcclxuICAgICAgdGhpcy5kbnRMb2NhdGlvbiA9IGxvY2F0aW9uO1xyXG4gICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmxvYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZih2YWx1ZS5kbnRMb2NhdGlvbiAhPSBsb2NhdGlvbikge1xyXG4gICAgICAgICAgdmFsdWUuZG50TG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICAgICAgICAgIHQucmVzZXQoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgaW5pdCA6IGZ1bmN0aW9uIChmaWxlTmFtZSwgY29sc1RvTG9hZCwgcHJvZ3Jlc3MsIGNvbXBsZXRlLCBpZ25vcmVFcnJvcnMpIHtcclxuICAgICAgaWYoIXByb2dyZXNzKSB7XHJcbiAgICAgICAgcHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgICB9XHJcbiAgICAgIGlmKCEoZmlsZU5hbWUgaW4gdGhpcy5sb2FkZXJzKSkge1xyXG4gICAgICAgIGlmKGZpbGVOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHRoaXMubG9hZGVyc1tmaWxlTmFtZV0gPSBjcmVhdGVMb2FkZXIodGhpcy5kbnRMb2NhdGlvbiwgZmlsZU5hbWUsIGNvbHNUb0xvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLmluaXQocHJvZ3Jlc3MsIGNvbXBsZXRlLCBpZ25vcmVFcnJvcnMpO1xyXG4gICAgfSxcclxuICAgIGdldERhdGEgOiBmdW5jdGlvbiAoZmlsZU5hbWUpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICB2YXIgcmVhZGVyID0gdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZWFkZXI7XHJcbiAgICAgICAgdmFyIHJldFZhbCA9IG5ldyBBcnJheShyZWFkZXIubnVtUm93cyk7XHJcbiAgICAgICAgZm9yKHZhciBpPTA7aTxyZWFkZXIubnVtUm93czsrK2kpIHtcclxuICAgICAgICAgIHJldFZhbFtpXSA9IHJlYWRlci5nZXRSb3coaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmluZCA6IGZ1bmN0aW9uKGZpbGVOYW1lLCBjb2x1bW4sIHZhbHVlKSB7XHJcbiAgICAgIHZhciByZXN1bHRzID0gdGhpcy5maW5kRmFzdChmaWxlTmFtZSwgY29sdW1uLCB2YWx1ZSk7XHJcbiAgICAgIHZhciByZXRWYWwgPSBbXTtcclxuICAgICAgdmFyIG51bVJlc3VsdHMgPSByZXN1bHRzLmxlbmd0aDtcclxuICAgICAgZm9yKHZhciBpPTA7aTxudW1SZXN1bHRzOysraSkge1xyXG4gICAgICAgIHJldFZhbC5wdXNoKHRoaXMuZ2V0Um93KGZpbGVOYW1lLCByZXN1bHRzW2ldKSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICB9LFxyXG4gICAgZmluZEZhc3QgOiBmdW5jdGlvbihmaWxlTmFtZSwgY29sdW1uLCB2YWx1ZSkge1xyXG4gICAgICBcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICBpZighKGZpbGVOYW1lIGluIHRoaXMuZmluZEluZGV4ZXMpKXtcclxuICAgICAgICAgIHRoaXMuZmluZEluZGV4ZXNbZmlsZU5hbWVdID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciByZWFkZXIgPSB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLnJlYWRlcjtcclxuICAgICAgICB2YXIgY29sSW5kZXggPSByZWFkZXIuY29sdW1uSW5kZXhlc1tjb2x1bW5dO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBmaW5kSW5kZXggPSB0aGlzLmZpbmRJbmRleGVzW2ZpbGVOYW1lXTtcclxuICAgICAgICBcclxuICAgICAgICBpZighKGNvbHVtbiBpbiBmaW5kSW5kZXgpKSB7XHJcbiAgICAgICAgICB2YXIgaW5kZXggPSB7fVxyXG4gICAgICAgICAgZmluZEluZGV4W2NvbHVtbl0gPSBpbmRleDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGRhdGEgPSByZWFkZXIuZGF0YTtcclxuICAgICAgICAgIHZhciBsZW4gPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICAgIGZvcih2YXIgcj0wO3I8bGVuOysrcikge1xyXG4gICAgICAgICAgICB2YXIgZCA9IGRhdGFbcl07XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSBkW2NvbEluZGV4XTtcclxuXHJcbiAgICAgICAgICAgIGlmKCEodmFsIGluIGluZGV4KSkge1xyXG4gICAgICAgICAgICAgIGluZGV4W3ZhbF0gPSBbcl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgaW5kZXhbdmFsXS5wdXNoKHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHZhbHVlIGluIGZpbmRJbmRleFtjb2x1bW5dKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmluZEluZGV4W2NvbHVtbl1bdmFsdWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH0sXHJcbiAgICBpc0xvYWRlZCA6IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICAgIHJldHVybiBmaWxlTmFtZSBpbiB0aGlzLmxvYWRlcnMgJiYgdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5sb2FkZWQ7XHJcbiAgICB9LFxyXG4gICAgaGFzRmFpbGVkIDogZnVuY3Rpb24oZmlsZU5hbWUpIHtcclxuICAgICAgcmV0dXJuIGZpbGVOYW1lIGluIHRoaXMubG9hZGVycyAmJiB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLmZhaWxlZDtcclxuICAgIH0sXHJcbiAgICBoYXNTdGFydGVkTG9hZGluZyA6IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmlzTG9hZGVkKGZpbGVOYW1lKSB8fCAoZmlsZU5hbWUgaW4gdGhpcy5sb2FkZXJzICYmIHRoaXMubG9hZGVyc1tmaWxlTmFtZV0uc3RhcnRlZExvYWRpbmcpO1xyXG4gICAgfSxcclxuICAgIHJlc2V0IDogZnVuY3Rpb24oZmlsZU5hbWUpIHtcclxuICAgICAgaWYoZmlsZU5hbWUgaW4gdGhpcy5sb2FkZXJzKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZXNldCgpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmZpbmRJbmRleGVzW2ZpbGVOYW1lXTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlc2V0QWxsIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMubG9hZGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgIHQucmVzZXQoa2V5KTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYW55TG9hZGluZyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgIHZhciBmb3VuZCA9IDA7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmxvYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZighdmFsdWUubG9hZGVkICYmIHZhbHVlLnN0YXJ0ZWRMb2FkaW5nKSB7XHJcbiAgICAgICAgICBmb3VuZCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gZm91bmQ7XHJcbiAgICB9LFxyXG4gICAgZ2V0TnVtUm93cyA6IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICAgIGlmKHRoaXMuaXNMb2FkZWQoZmlsZU5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZGVyc1tmaWxlTmFtZV0ucmVhZGVyLm51bVJvd3M7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRSb3cgOiBmdW5jdGlvbihmaWxlTmFtZSwgaW5kZXgpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZWFkZXIuZ2V0Um93KGluZGV4KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsb29rdXBWYWx1ZTogZnVuY3Rpb24oZmlsZU5hbWUsIGRhdGEsIGNvbHVtbk5hbWUpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gZGF0YVt0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLnJlYWRlci5jb2x1bW5OYW1lc1tjb2x1bW5OYW1lXV07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb252ZXJ0RGF0YTogZnVuY3Rpb24oZmlsZU5hbWUsIGRhdGEpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZWFkZXIuY29udmVydERhdGEoZGF0YSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRWYWx1ZSA6IGZ1bmN0aW9uKGZpbGVOYW1lLCBpbmRleCwgY29sdW1uTmFtZSkge1xyXG4gICAgICBpZih0aGlzLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLnJlYWRlci5nZXRWYWx1ZShpbmRleCwgY29sdW1uTmFtZSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2RudEluaXQnLCBbJ2l0ZW1zJywnam9icycsJ2RudERhdGEnLCdpdGVtRmFjdG9yeScsZG50SW5pdF0pO1xyXG5mdW5jdGlvbiBkbnRJbml0KGl0ZW1zLGpvYnMsZG50RGF0YSxpdGVtRmFjdG9yeSkge1xyXG4gIHJldHVybiBmdW5jdGlvbihwcm9ncmVzcykge1xyXG4gICAgXHJcbiAgICBwcm9ncmVzcygnc3RhcnRpbmcgaW5pdCcpO1xyXG4gICAgXHJcbiAgICB2YXIgYWxsRmFjdG9yaWVzID0gW2pvYnNdO1xyXG4gICAgXHJcbiAgICB2YXIgZG50RmlsZXMgPSB7fTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSwga2V5KSB7XHJcbiAgICAgIGlmKGtleSAhPSAnYWxsJykge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtLCBmdW5jdGlvbih2YWx1ZSwgcHJvcCkge1xyXG4gICAgICAgICAgaWYocHJvcC5pbmRleE9mKCdEbnQnKSA9PSBwcm9wLmxlbmd0aC0zKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdGYWN0b3J5ID0geyBcclxuICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbihwcm9ncmVzcywgY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIGRudERhdGEuaW5pdCh2YWx1ZSwgbnVsbCwgcHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGlzTG9hZGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkbnREYXRhLmlzTG9hZGVkKHZhbHVlKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGZpbGVOYW1lOiB2YWx1ZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFsbEZhY3Rvcmllcy5wdXNoKG5ld0ZhY3RvcnkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gaW5pdEZhY3RvcnkoaW5kZXgpIHtcclxuICAgIFxyXG4gICAgICBpZihpbmRleCA8IGFsbEZhY3Rvcmllcy5sZW5ndGgpIHtcclxuICAgICAgICBhbGxGYWN0b3JpZXNbaW5kZXhdLmluaXQocHJvZ3Jlc3MsIGZ1bmN0aW9uKCkgeyBcclxuICAgICAgICAgIGlmKGFsbEZhY3Rvcmllc1tpbmRleF0uaXNMb2FkZWQoKSkge1xyXG4gICAgICAgICAgICBpZignZmlsZU5hbWUnIGluIGFsbEZhY3Rvcmllc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICBwcm9ncmVzcygnZG50IGxvYWRlZDogJyArIGFsbEZhY3Rvcmllc1tpbmRleF0uZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluaXRGYWN0b3J5KGluZGV4KzEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHByb2dyZXNzKCdGdWxsIGluaXRpYWxpc2UgY29tcGxldGUnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpbml0RmFjdG9yeSgwKTtcclxuICB9XHJcbn1cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdkbnRSZXNldCcsWydpdGVtcycsJ2pvYnMnLCdkbnREYXRhJyxkbnRSZXNldF0pO1xyXG5mdW5jdGlvbiBkbnRSZXNldChpdGVtcywgam9icywgZG50RGF0YSkge1xyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihzb3VyY2UsIG5hbWUpIHtcclxuICAgICAgc291cmNlLnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgam9icy5yZXNldCgpO1xyXG4gICAgZG50RGF0YS5yZXNldEFsbCgpO1xyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdkdlN0YXRjYXJkSGVscGVyJywgZHZTdGF0Y2FyZEhlbHBlcik7XHJcbmZ1bmN0aW9uIGR2U3RhdGNhcmRIZWxwZXIoKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAvLyBDb252ZXJzaW9ucyBiZXR3ZWVuIGRuZ3Mgc3RhdCBJRHMgYW5kIGR2c3RhdGNhcmQga2V5c1xyXG4gIHZhciBzdGF0TWFwID0ge1xyXG4gICAgICAwOiAnc3RhdFN0cicsXHJcbiAgICAgIDE6ICdzdGF0QWdpJyxcclxuICAgICAgMjogJ3N0YXRJbnQnLFxyXG4gICAgICAzOiAnc3RhdFZpdCcsXHJcbiAgICAgIDQ6ICdzdGF0UERtZ01pbicsXHJcbiAgICAgIDU6ICdzdGF0UERtZ01heCcsXHJcbiAgICAgIDY6ICdzdGF0TURtZ01pbicsXHJcbiAgICAgIDc6ICdzdGF0TURtZ01heCcsXHJcbiAgICAgIDg6ICdzdGF0UERlZicsXHJcbiAgICAgIDk6ICdzdGF0TURlZicsXHJcbiAgICAgIDEyOiAnc3RhdENyaXQnLFxyXG4gICAgICAxNjogJ3N0YXRGaXJlJyxcclxuICAgICAgMTc6ICdzdGF0SWNlJyxcclxuICAgICAgMTg6ICdzdGF0TGlnaHQnLFxyXG4gICAgICAxOTogJ3N0YXREYXJrJyxcclxuICAgICAgMjU6ICdzdGF0SHAnLFxyXG4gICAgICAyNjogJ3N0YXRNYW5hJyxcclxuICAgICAgMjk6ICdzdGF0RkQnLFxyXG4gICAgICAxMDM6ICdzdGF0Q3JpdERtZycsXHJcbiAgfTtcclxuXHJcbiAgLy8gICAgQ29udmVydHMgZG5ncyBzdGF0IElEcyB0byBkdnN0YXRjYXJkIHN0YXQga2V5c1xyXG4gIGZ1bmN0aW9uIGNvbnZlcnRTdGF0KHN0YXQpIHtcclxuICAgIHZhciByZXQgPSBzdGF0TWFwW3N0YXQuaWRdO1xyXG4gICAgcmV0dXJuIHJldCB8fCAndW5rbm93bic7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gY29udmVydFBlcmNlbnRUb051bSh2YWwpIHtcclxuICAgICAgcmV0dXJuIHZhbCAqIDEwMDtcclxuICB9O1xyXG5cclxuICAvLyAgICBTdGF0cyB0aGF0IG5lZWQgdG8gaGF2ZSBzb21lIGNvbnZlcnNpb24gYXBwbGllZCBiZXR3ZWVuIGRuZ3MgYW5kIGR2c3RhdGNhcmRcclxuICB2YXIgYWRqdXN0bWVudHMgPSB7XHJcbiAgICAgIDE2OiBjb252ZXJ0UGVyY2VudFRvTnVtLFxyXG4gICAgICAxNzogY29udmVydFBlcmNlbnRUb051bSxcclxuICAgICAgMTg6IGNvbnZlcnRQZXJjZW50VG9OdW0sXHJcbiAgICAgIDE5OiBjb252ZXJ0UGVyY2VudFRvTnVtLFxyXG4gIH1cclxuXHJcbiAgLy8gICAgQ29udmVydCBiZXR3ZWVuIG51bWVyaWNhbCBzdGFuZGFyZHMgYmV0d2VlbiBkbmdzIGFuZCBkdnN0YXRjYXJkXHJcbiAgZnVuY3Rpb24gYWRqdXN0U3RhdChzdGF0KSB7XHJcbiAgICAgIHZhciBmdW5jID0gYWRqdXN0bWVudHNbc3RhdC5pZF07XHJcbiAgICAgIGlmIChmdW5jKSB7XHJcbiAgICAgICAgICByZXR1cm4gZnVuYyhzdGF0Lm1heCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHN0YXQubWF4O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAgIGNvbnZlcnRTdGF0czogZnVuY3Rpb24oYnVpbGQsIGJ1aWxkTmFtZSwgY2FsY1N0YXRzKSB7XHJcbiAgICAgICAgdmFyIHJldCA9IHtcclxuICAgICAgICAgICAgY2hhcmFjdGVyTmFtZTogYnVpbGROYW1lLFxyXG4gICAgICAgICAgICByZW1hcms6ICdJbXBvcnRlZCBmcm9tIEROR2VhcnNpbScsXHJcbiAgICAgICAgICAgIGNsYXNzSWQ6IGJ1aWxkLmpvYi5pZCxcclxuICAgICAgICAgICAgc3RhdEhlcm9MZXZlbDogYnVpbGQuaGVyb0xldmVsLFxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBrIGluIGNhbGNTdGF0cykge1xyXG4gICAgICAgICAgICB2YXIgdiA9IGNhbGNTdGF0c1trXTtcclxuICAgICAgICAgICAgcmV0W2NvbnZlcnRTdGF0KHYpXSA9IGFkanVzdFN0YXQodik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNhcmRJbXBvcnRVcmw6ICdodHRwczovL3JlZGlyZWN0LmRpdmluaXRvci5jb20vZG5nc2ltcG9ydCcsXHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2V4cG9ydExpbmtIZWxwZXInLCBleHBvcnRMaW5rSGVscGVyKTtcclxuZnVuY3Rpb24gZXhwb3J0TGlua0hlbHBlcigkaHR0cCxpdGVtcyxkbnREYXRhLGl0ZW1GYWN0b3J5LGhDb2RlVmFsdWVzLGl0ZW1Db2x1bW5zVG9Mb2FkLHN0YXRIZWxwZXIsdHJhbnNsYXRpb25zLGl0ZW1DYXRlZ29yeSxyZWdpb24pIHtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIFxyXG4gICAgZW5jb2RlSXRlbTogZnVuY3Rpb24oaXRlbSwgc21hbGwpIHtcclxuICAgICAgaWYoaXRlbSkge1xyXG4gICAgICAgIHZhciBpdGVtU3RyaW5nO1xyXG5cclxuICAgICAgICBpZihpdGVtLnR5cGVOYW1lID09ICdjdXN0b20nKSAge1xyXG4gICAgICAgICAgaXRlbVN0cmluZyA9ICdfY3VzdG9tJztcclxuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtLnN0YXRzLCBmdW5jdGlvbihzdGF0LCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZihpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICBpdGVtU3RyaW5nICs9ICd8JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBpdGVtU3RyaW5nICs9ICc6Qyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaXRlbVN0cmluZyArPSBzdGF0LmlkLnRvU3RyaW5nKDM2KSArICc9JyArIHN0YXQubWF4O1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXRlbS5pZCkge1xyXG4gICAgICAgICAgaXRlbVN0cmluZyA9ICdJJyArIGl0ZW0uaWQudG9TdHJpbmcoMzYpICsgJzpfJztcclxuICAgICAgICAgIGlmKCdpdGVtU291cmNlJyBpbiBpdGVtKSB7XHJcbiAgICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gaXRlbS5pdGVtU291cmNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZignaXRlbVR5cGVOYW1lJyBpbiBpdGVtKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gc3VwcG9ydCBncm91cHMgc2F2ZWQgd2l0aCB0aGUgb2xkIHByb3BlcnR5IG5hbWVcclxuICAgICAgICAgICAgaXRlbVN0cmluZyArPSBpdGVtLml0ZW1UeXBlTmFtZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbS5maWxlTmFtZSkge1xyXG4gICAgICAgICAgICBpdGVtU3RyaW5nICs9ICc6RicgKyBpdGVtLmZpbGVOYW1lO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgaWYoaXRlbS5lbmNoYW50bWVudE51bSB8fCBpdGVtLmVuY2hhbnRtZW50TnVtID09IDApIHtcclxuICAgICAgICAgICAgaXRlbVN0cmluZyArPSAnOkUnICsgaXRlbS5lbmNoYW50bWVudE51bS50b1N0cmluZygzNik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihpdGVtLnBpZCA+IDApIHtcclxuICAgICAgICAgICAgaXRlbVN0cmluZyArPSAnOlAnICsgaXRlbS5waWQudG9TdHJpbmcoMzYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gaWYoaXRlbS5zZXRJZCA+IDApIHtcclxuICAgICAgICAgICAgLy8gaXRlbVN0cmluZyArPSAnOlMnICsgaXRlbS5zZXRJZC50b1N0cmluZygzNik7XHJcbiAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICBpZihpdGVtLnNwYXJrSWQgPiAwKSB7XHJcbiAgICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gJzpIJyArIGl0ZW0uc3BhcmtJZC50b1N0cmluZygzNik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihpdGVtLnR5cGVOYW1lID09ICdza2lsbHMnKSB7XHJcbiAgICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gJzpKJyArIGl0ZW0uYmFzZUpvYk5hbWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZihpdGVtLnB2ZSkge1xyXG4gICAgICAgICAgICBpdGVtU3RyaW5nICs9ICc6VicgKyBpdGVtLnB2ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoaXRlbS5uYW1lICYmICFzbWFsbCkge1xyXG4gICAgICAgICAgaXRlbVN0cmluZyArPSAnOi4nICsgaXRlbS5uYW1lLnJlcGxhY2UoLyAvZywgJy0nKS5yZXBsYWNlKC9cXC8vZywgJyAnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpdGVtU3RyaW5nO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBkZWNvZGVJdGVtOiBmdW5jdGlvbihpdGVtU3RyKSB7XHJcbiAgICAgIHZhciBpdGVtID0ge307XHJcbiAgICAgIFxyXG4gICAgICBpZihpdGVtU3RyKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1TdHIuc3BsaXQoJzonKSwgZnVuY3Rpb24oaXRlbUJpdCwgYml0SW5kZXgpIHtcclxuICAgICAgICAgIGlmKGl0ZW1CaXQuY2hhckF0KDApID09ICdJJykge1xyXG4gICAgICAgICAgICBpdGVtLmlkID0gcGFyc2VJbnQoaXRlbUJpdC5zdWJzdHIoMSksIDM2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbUJpdC5jaGFyQXQoMCkgPT0gJ0UnKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uZW5jaGFudG1lbnROdW0gPSBwYXJzZUludChpdGVtQml0LnN1YnN0cigxKSwgMzYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnUCcpIHtcclxuICAgICAgICAgICAgaXRlbS5waWQgPSBwYXJzZUludChpdGVtQml0LnN1YnN0cigxKSwgMzYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnUycpIHtcclxuICAgICAgICAgICAgaXRlbS5zZXRJZCA9IHBhcnNlSW50KGl0ZW1CaXQuc3Vic3RyKDEpLCAzNik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGl0ZW1CaXQuY2hhckF0KDApID09ICdIJykge1xyXG4gICAgICAgICAgICBpdGVtLnNwYXJrSWQgPSBwYXJzZUludChpdGVtQml0LnN1YnN0cigxKSwgMzYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnSicpIHtcclxuICAgICAgICAgICAgaXRlbS5iYXNlSm9iTmFtZSA9IGl0ZW1CaXQuc3Vic3RyKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnVicpIHtcclxuICAgICAgICAgICAgaXRlbS5wdmUgPSBpdGVtQml0LnN1YnN0cigxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbUJpdC5jaGFyQXQoMCkgPT0gJ18nKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uaXRlbVNvdXJjZSA9IGl0ZW1CaXQuc3Vic3RyKDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnLicpIHtcclxuICAgICAgICAgICAgaXRlbS5uYW1lID0gaXRlbUJpdC5zdWJzdHIoMSkucmVwbGFjZSgnLScsICcgJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGl0ZW1CaXQuY2hhckF0KDApID09ICdDJykge1xyXG4gICAgICAgICAgICBpdGVtLnN0YXRzID0gW107XHJcbiAgICAgICAgICAgIHZhciBzdGF0U3RyaW5nID0gaXRlbUJpdC5zdWJzdHIoMSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzdGF0U3RyaW5nLnNwbGl0KCd8JyksIGZ1bmN0aW9uKHN0YXRCaXQsIHN0YXRCaXRJbmRleCkge1xyXG4gICAgICAgICAgICAgIHZhciBzcGxpdFN0YXQgPSBzdGF0Qml0LnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgICAgaXRlbS5zdGF0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBwYXJzZUludChzcGxpdFN0YXRbMF0sIDM2KSxcclxuICAgICAgICAgICAgICAgIG1heDogTnVtYmVyKHNwbGl0U3RhdFsxXSlcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGl0ZW1CaXQuY2hhckF0KDApID09ICdGJykge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaXRlbS5maWxlTmFtZSA9IGl0ZW1CaXQuc3Vic3RyKDEpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW1Tb3VyY2UsIGtleSkge1xyXG4gICAgICAgICAgICAgIGlmKGl0ZW1Tb3VyY2UubWFpbkRudCAmJiBpdGVtU291cmNlLm1haW5EbnQuaW5kZXhPZihpdGVtLmZpbGVOYW1lICsgJy4nKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLml0ZW1Tb3VyY2UgPSBrZXk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBjcmVhdGVHcm91cExpbms6IGZ1bmN0aW9uKGdyb3VwTmFtZSwgZ3JvdXApIHtcclxuICAgICAgdmFyIGl0ZW1TdHJpbmdzID0gW107XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgXHJcbiAgICAgIGlmKGdyb3VwID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cC5pdGVtcywgZnVuY3Rpb24oaXRlbSwga2V5KSB7XHJcbiAgICAgICAgdmFyIGl0ZW1TdHJpbmcgPSBzZWxmLmVuY29kZUl0ZW0oaXRlbSwgdHJ1ZSk7ICBcclxuICAgICAgICBpZihpdGVtU3RyaW5nICYmIGl0ZW1TdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgICBpdGVtU3RyaW5ncy5wdXNoKGl0ZW1TdHJpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgXHJcbiAgICAgIHZhciByZXRWYWwgPSAndmlldy1ncm91cD9yZWdpb249JztcclxuICAgICAgaWYocmVnaW9uLmRudExvY2F0aW9uICYmIHJlZ2lvbi5kbnRMb2NhdGlvbi5yZWdpb24pIHtcclxuICAgICAgICByZXRWYWwgKz0gcmVnaW9uLmRudExvY2F0aW9uLnJlZ2lvbjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoZ3JvdXAuZW5lbXlMZXZlbCkge1xyXG4gICAgICAgIHJldFZhbCArPSAnJmU9JyArIGdyb3VwLmVuZW15TGV2ZWw7XHJcbiAgICAgIH1cclxuICAgICAgaWYoZ3JvdXAucGxheWVyTGV2ZWwpIHtcclxuICAgICAgICByZXRWYWwgKz0gJyZwPScgKyBncm91cC5wbGF5ZXJMZXZlbDtcclxuICAgICAgfVxyXG4gICAgICBpZihncm91cC5oZXJvTGV2ZWwpIHtcclxuICAgICAgICByZXRWYWwgKz0gJyZoPScgKyBncm91cC5oZXJvTGV2ZWw7XHJcbiAgICAgIH1cclxuICAgICAgaWYoZ3JvdXAuam9iICYmIGdyb3VwLmpvYi5pZCkge1xyXG4gICAgICAgIHJldFZhbCArPSAnJmo9JyArIGdyb3VwLmpvYi5pZDtcclxuICAgICAgfVxyXG4gICAgICBpZihncm91cC5kYW1hZ2VUeXBlICYmIGdyb3VwLmRhbWFnZVR5cGUuaWQpIHtcclxuICAgICAgICByZXRWYWwgKz0gJyZkPScgKyBncm91cC5kYW1hZ2VUeXBlLmlkO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGdyb3VwLmVsZW1lbnQgJiYgZ3JvdXAuZWxlbWVudC5pZCkge1xyXG4gICAgICAgIHJldFZhbCArPSAnJnQ9JyArIGdyb3VwLmVsZW1lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYoZ3JvdXAuc2Vjb25kYXJ5RWxlbWVudCAmJiBncm91cC5zZWNvbmRhcnlFbGVtZW50LmlkKSB7XHJcbiAgICAgICAgcmV0VmFsICs9ICcmcz0nICsgZ3JvdXAuc2Vjb25kYXJ5RWxlbWVudC5pZDtcclxuICAgICAgfVxyXG4gICAgICByZXRWYWwgKz0gJyZnPScgKyBlbmNvZGVVUkkoZ3JvdXBOYW1lKSArICcmaT0nICsgaXRlbVN0cmluZ3Muam9pbignLCcpO1xyXG4gICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGVTaG9ydFVybDogZnVuY3Rpb24oZ3JvdXBOYW1lLCBncm91cCkge1xyXG4gICAgICBcclxuICAgICAgdmFyIHBhdGggPSB0aGlzLmNyZWF0ZUdyb3VwTGluayhncm91cE5hbWUsIGdyb3VwKTtcclxuICAgICAgdmFyIGJhc2VQYXRoID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKSkuYXR0cignaHJlZicpO1xyXG4gICAgICB2YXIgbG9uZ1VybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KGJhc2VQYXRoKVswXSArIGJhc2VQYXRoICsgcGF0aDtcclxuICAgICAgdmFyIGRhdGEgPSB7IGxvbmdVcmw6IGxvbmdVcmwgfTtcclxuICAgICAgY29uc29sZS5sb2coJ2dldHRpbmcgc2hvcnQgdXJsIGZvciAnLCBsb25nVXJsKTtcclxuICAgICAgXHJcbiAgICBcdCRodHRwLnBvc3QoXHJcbiAgICBcdCAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3VybHNob3J0ZW5lci92MS91cmw/a2V5PUFJemFTeUQ1dDVvN1pjU0F2TS14TXdjMTRmdDJCQS1NS1FBN0xNbycsIGRhdGEpLnN1Y2Nlc3MoXHJcbiAgICBcdCAgICBmdW5jdGlvbihkYXRhLHN0YXR1cyxoZWFkZXJzLGNvbmZpZyl7XHJcbiAgICAgICAgXHRcdGdyb3VwLnNob3J0VXJsID0gZGF0YS5pZDtcclxuICAgIFx0ICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShwYXRoLCBkYXRhLmlkKTtcclxuICAgICAgICBcdH0pLlxyXG4gICAgICAgIFx0ZXJyb3IoZnVuY3Rpb24oZGF0YSxzdGF0dXMsaGVhZGVycyxjb25maWcpe1xyXG4gICAgICAgIFx0XHQvLyBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICBcdFx0Ly8gY29uc29sZS5sb2coc3RhdHVzKTtcclxuICAgICAgICBcdFx0Ly8gY29uc29sZS5sb2coaGVhZGVycyk7XHJcbiAgICAgICAgXHRcdC8vIGNvbnNvbGUubG9nKGNvbmZpZyk7XHJcbiAgICAgICAgXHR9KTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHJlbG9hZEl0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHJcbiAgICAgIGlmKGl0ZW0gPT0gbnVsbCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjYW5ub3QgcmVsb2FkIG51bGwgaXRlbScpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gc3VwcG9ydCBmb3Igb2xkIHByb3BlcnR5IG5hbWVcclxuICAgICAgaWYoJ2l0ZW1UeXBlTmFtZScgaW4gaXRlbSAmJiAhaXRlbS5pdGVtU291cmNlKSB7XHJcbiAgICAgICAgaXRlbS5pdGVtU291cmNlID0gaXRlbS5pdGVtVHlwZU5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdjaGVja2luZyAnICsgaXRlbS5pdGVtU291cmNlKVxyXG4gICAgICBpZihpdGVtLml0ZW1Tb3VyY2UgPT0gJ3JiVGVjaCcpIHtcclxuICAgICAgICBpdGVtLml0ZW1Tb3VyY2UgPSAndGVjaCc7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NoYW5nZWQgdG8gJyArIGl0ZW0uaXRlbVNvdXJjZSlcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoaXRlbS5pdGVtU291cmNlID09ICdjdXN0b20nIHx8IGl0ZW0udHlwZU5hbWUgPT0gJ2N1c3RvbScpIHtcclxuICAgICAgICBpdGVtLnR5cGVOYW1lID0gJ2N1c3RvbSc7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihpdGVtLml0ZW1Tb3VyY2UgPT0gJ3NraWxscycgfHwgaXRlbS50eXBlTmFtZSA9PSAnc2tpbGxzJykge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCFpdGVtLmVuY2hhbnRtZW50TnVtKSB7XHJcbiAgICAgICAgICBpdGVtLmVuY2hhbnRtZW50TnVtID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHNraWxsRG50ID0gJ3NraWxsdGFibGVfY2hhcmFjdGVyJyArIGl0ZW0uYmFzZUpvYk5hbWUgKyAnLmx6anNvbic7XHJcbiAgICAgICAgdmFyIHB2ID0gJ3B2ZSc7XHJcbiAgICAgICAgaWYoaXRlbS5wdmUgPT0gJ3B2cCcpIHtcclxuICAgICAgICAgIHB2ID0gJ3B2cCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBza2lsbExldmVsRG50ID0gJ3NraWxsbGV2ZWx0YWJsZV9jaGFyYWN0ZXInICsgaXRlbS5iYXNlSm9iTmFtZSArIHB2ICsgJy5sempzb24nO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBza2lsbERhdGEgPSBkbnREYXRhLmZpbmQoc2tpbGxEbnQsICdpZCcsIGl0ZW0uaWQpWzBdO1xyXG4gICAgICAgIGlmKCFza2lsbERhdGEpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdjYW5ub3QgZ2V0IHNraWxsIGRhdGEgZnJvbSAnLCBza2lsbERudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBza2lsbExldmVsRGF0YXMgPSBkbnREYXRhLmdldERhdGEoc2tpbGxMZXZlbERudCk7XHJcblxyXG4gICAgICAgIHZhciBza2lsbExldmVsVmFscyA9IHt9O1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChza2lsbExldmVsRGF0YXMsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgaWYodmFsdWUuU2tpbGxJbmRleCA9PSBpdGVtLmlkICYmIHZhbHVlLlNraWxsTGV2ZWwgPT0gaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgICBza2lsbExldmVsVmFscyA9IHZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG5ld0l0ZW0gPSB7XHJcbiAgICAgICAgICBpZDogaXRlbS5pZCxcclxuICAgICAgICAgIGl0ZW1Tb3VyY2U6IGl0ZW0uaXRlbVNvdXJjZSxcclxuICAgICAgICAgIHR5cGVOYW1lOiBpdGVtLml0ZW1Tb3VyY2UsXHJcbiAgICAgICAgICBuZWVkSm9iQ2xhc3M6IHNraWxsRGF0YS5OZWVkSm9iLFxyXG4gICAgICAgICAgYmFzZUpvYk5hbWU6IGl0ZW0uYmFzZUpvYk5hbWUsXHJcbiAgICAgICAgICByYW5rOiBoQ29kZVZhbHVlcy5yYW5rTmFtZXNbMF0sXHJcbiAgICAgICAgICBlbmNoYW50bWVudE51bTogaXRlbS5lbmNoYW50bWVudE51bSxcclxuICAgICAgICAgIG5hbWU6IHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoc2tpbGxEYXRhLk5hbWVJRCwgc2tpbGxEYXRhLk5hbWVJRFBhcmFtKSxcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKHNraWxsTGV2ZWxWYWxzLlNraWxsRXhwbGFuYXRpb25JRCwgc2tpbGxMZXZlbFZhbHMuU2tpbGxFeHBsYW5hdGlvbklEUGFyYW0pLFxyXG4gICAgICAgICAgaWNvbjogc2tpbGxEYXRhLkljb25JbWFnZUluZGV4LFxyXG4gICAgICAgICAgcHZlOiBpdGVtLnB2ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgbmV3SXRlbS5zdGF0cyA9IHN0YXRIZWxwZXIuZ2V0U2tpbGxTdGF0cyhuZXdJdGVtLCBza2lsbERhdGEsIHNraWxsTGV2ZWxEYXRhcyk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0l0ZW07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihpdGVtLml0ZW1Tb3VyY2UgaW4gaXRlbXMpIHtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgaXRlbVR5cGUgPSBpdGVtc1tpdGVtLml0ZW1Tb3VyY2VdO1xyXG4gICAgICAgIHZhciBkcyA9IGRudERhdGEuZmluZEZhc3QoaXRlbVR5cGUubWFpbkRudCwgJ2lkJywgaXRlbS5pZCk7XHJcbiAgICAgICAgaWYoIWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2l0ZW0gJyArIGl0ZW0uaWQgKyAnIG5vdCBmb3VuZCBpbiAnICsgaXRlbVR5cGUubWFpbkRudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdmFyIHJvd051bSA9IGRzWzBdO1xyXG4gICAgICAgICAgdmFyIHR5cGVQYXJhbTEgPSBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHJvd051bSwgJ1R5cGVQYXJhbTEnKTtcclxuICAgICAgICBcclxuICAgICAgICAgIHZhciBwID0gbnVsbDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHBzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnBvdGVudGlhbERudCwgJ2lkJywgaXRlbS5waWQpO1xyXG4gICAgICAgICAgaWYoIXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBwcyA9IGRudERhdGEuZmluZChpdGVtVHlwZS5wb3RlbnRpYWxEbnQsICdQb3RlbnRpYWxJRCcsIHR5cGVQYXJhbTEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZighcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHBzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnBvdGVudGlhbERudEV4LCAnaWQnLCBpdGVtLnBpZCk7XHJcbiAgICAgICAgICAgIGlmKCFwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICBwcyA9IGRudERhdGEuZmluZChpdGVtVHlwZS5wb3RlbnRpYWxEbnRFeCwgJ1BvdGVudGlhbElEJywgdHlwZVBhcmFtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYocHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwID0gcHNbMF07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihwLlBvdGVudGlhbElEICE9IHR5cGVQYXJhbTEpIHtcclxuICAgICAgICAgICAgICAvLyB0aGlzIGhhcHBlbmVkIG9uZSB0aW1lXHJcbiAgICAgICAgICAgICAgLy8gbm90IHN1cmUgaG93IGJ1dCBpdCBjb3JydXB0ZWQgdGhlIHN0YXRzXHJcbiAgICAgICAgICAgICAgcCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2JhZCBwb3RlbnRpYWwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgbmV3SXRlbSA9IGl0ZW1GYWN0b3J5LmNyZWF0ZUl0ZW0oaXRlbVR5cGUsIHJvd051bSwgcCk7XHJcbiAgICAgICAgICBpdGVtRmFjdG9yeS5pbml0SXRlbShuZXdJdGVtKTtcclxuICAgICAgICAgIGl0ZW1DYXRlZ29yeS5zZXRJdGVtQ2F0ZWdvcnkobmV3SXRlbSwgZCk7XHJcbiAgICAgICAgICBuZXdJdGVtLmdlbVNsb3QgPSBpdGVtLmdlbVNsb3Q7XHJcblxyXG4gICAgICAgICAgdmFyIHVzZVBhcnREbnQgPSBudWxsO1xyXG4gICAgICAgICAgaWYobmV3SXRlbS50eXBlTmFtZSAhPSAnd2VhcG9ucycgJiYgbmV3SXRlbS50eXBlSWQgIT0gMCkge1xyXG4gICAgICAgICAgICB1c2VQYXJ0RG50ID0gJ3BhcnRzRG50JztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1c2VQYXJ0RG50ID0gJ3dlYXBvbkRudCc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAgICAgaWYodXNlUGFydERudCkge1xyXG4gICAgICAgICAgICBpZihkbnREYXRhLmlzTG9hZGVkKGl0ZW1UeXBlW3VzZVBhcnREbnRdKSAmJiBkbnREYXRhLmlzTG9hZGVkKGl0ZW1UeXBlLnNldERudCkpIHtcclxuICAgICAgICAgICAgICBuZXdJdGVtLnNldFN0YXRzID0gW107XHJcbiAgICAgICAgICAgICAgdmFyIHBhcnRzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlW3VzZVBhcnREbnRdLCAnaWQnLCBpdGVtLmlkKTtcclxuICAgICAgICAgICAgICBpZihwYXJ0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJdGVtLnNldElkID0gcGFydHNbMF0uU2V0SXRlbUlEO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNldHMgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUuc2V0RG50LCAnaWQnLCBwYXJ0c1swXS5TZXRJdGVtSUQpO1xyXG4gICAgICAgICAgICAgICAgaWYoc2V0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIG5ld0l0ZW0uc2V0U3RhdHMgPSBoQ29kZVZhbHVlcy5nZXRTdGF0cyhzZXRzWzBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBuZXdJdGVtLmZ1bGxTdGF0cyA9IG5ld0l0ZW0uc3RhdHM7XHJcbiAgICAgICAgICBpZihpdGVtLmVuY2hhbnRtZW50TnVtID49IDApIHtcclxuICAgICAgICAgICAgbmV3SXRlbS5lbmNoYW50bWVudE51bSA9IGl0ZW0uZW5jaGFudG1lbnROdW07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihuZXdJdGVtLnR5cGVOYW1lID09ICdza2lsbHMnKSB7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihuZXdJdGVtLnR5cGVOYW1lID09ICd0YWxpc21hbicpIHtcclxuICAgICAgICAgICAgICB2YXIgZXh0cmFTdGF0cyA9IFtdO1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChuZXdJdGVtLnN0YXRzLCBmdW5jdGlvbihzdGF0LCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgZXh0cmFTdGF0cy5wdXNoKHtpZDogc3RhdC5pZCwgbWF4OiBzdGF0Lm1heCAqIChuZXdJdGVtLmVuY2hhbnRtZW50TnVtLzEwMCl9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBuZXdJdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBleHRyYVN0YXRzO1xyXG4gICAgICAgICAgICAgIG5ld0l0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhuZXdJdGVtLmVuY2hhbnRtZW50U3RhdHMsIG5ld0l0ZW0uc3RhdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoaXRlbVR5cGUuZW5jaGFudERudCkge1xyXG4gICAgICAgICAgICAgIHZhciBlbmNoYW50bWVudHMgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUuZW5jaGFudERudCwgJ0VuY2hhbnRJRCcsIG5ld0l0ZW0uZW5jaGFudG1lbnRJZCk7XHJcbiAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGVuY2hhbnRtZW50cywgZnVuY3Rpb24oZW5jaGFudG1lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBpZihlbmNoYW50bWVudC5FbmNoYW50TGV2ZWwgPT0gbmV3SXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgICAgICAgICBuZXdJdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBoQ29kZVZhbHVlcy5nZXRTdGF0cyhlbmNoYW50bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgIG5ld0l0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhuZXdJdGVtLmVuY2hhbnRtZW50U3RhdHMsIG5ld0l0ZW0uc3RhdHMpO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihpdGVtVHlwZS5wZXRMZXZlbERudCkge1xyXG4gICAgICAgICAgICAgIHZhciBlbmNoYW50bWVudHMgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUucGV0TGV2ZWxEbnQsICdQZXRMZXZlbFR5cGVJRCcsIG5ld0l0ZW0uZW5jaGFudG1lbnRJZCk7XHJcbiAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGVuY2hhbnRtZW50cywgZnVuY3Rpb24oZW5jaGFudG1lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBpZihlbmNoYW50bWVudC5QZXRMZXZlbCA9PSBuZXdJdGVtLmVuY2hhbnRtZW50TnVtKSB7XHJcbiAgICAgICAgICAgICAgICAgIG5ld0l0ZW0uZW5jaGFudG1lbnRTdGF0cyA9IGhDb2RlVmFsdWVzLmdldFN0YXRzKGVuY2hhbnRtZW50KTtcclxuICAgICAgICAgICAgICAgICAgbmV3SXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKG5ld0l0ZW0uZW5jaGFudG1lbnRTdGF0cywgbmV3SXRlbS5zdGF0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoaXRlbS5zcGFya0lkID4gMCkge1xyXG4gICAgICAgICAgICBuZXdJdGVtLnNwYXJrSWQgPSBpdGVtLnNwYXJrSWQ7XHJcbiAgICAgICAgICAgIHZhciBzcGFya3MgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUuc3BhcmtEbnQsICdpZCcsIGl0ZW0uc3BhcmtJZCk7XHJcbiAgICAgICAgICAgIGlmKHNwYXJrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgbmV3SXRlbS5zcGFya1N0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMoc3BhcmtzWzBdKTtcclxuICAgICAgICAgICAgICBuZXdJdGVtLmZ1bGxTdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMobmV3SXRlbS5mdWxsU3RhdHMsIG5ld0l0ZW0uc3BhcmtTdGF0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYobmV3SXRlbS5kcmFnb25qZXdlbHR5cGUpIHtcclxuICAgICAgICAgICAgbmV3SXRlbS5vZmZlbnNpdmVHZW1TbG90cyA9IDA7XHJcbiAgICAgICAgICAgIG5ld0l0ZW0uaW5jcmVhc2luZ0dlbVNsb3RzID0gMDtcclxuICAgICAgICAgICAgdmFyIGl0ZW1EYXRhID0gZG50RGF0YS5maW5kKCdkcmFnb25qZXdlbHNsb3R0YWJsZS5sempzb24nLCAnRHJhZ29uSmV3ZWxJRCcsIG5ld0l0ZW0uZHJhZ29uamV3ZWx0eXBlKTtcclxuICAgICAgICAgICAgaWYoaXRlbURhdGEgJiYgaXRlbURhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIGlmKGl0ZW1EYXRhWzBdLkRyYWdvbkpld2VsU2xvdDEgPT0gMSkgbmV3SXRlbS5vZmZlbnNpdmVHZW1TbG90cysrO1xyXG4gICAgICAgICAgICAgIGlmKGl0ZW1EYXRhWzBdLkRyYWdvbkpld2VsU2xvdDIgPT0gMSkgbmV3SXRlbS5vZmZlbnNpdmVHZW1TbG90cysrO1xyXG4gICAgICAgICAgICAgIGlmKGl0ZW1EYXRhWzBdLkRyYWdvbkpld2VsU2xvdDMgPT0gMSkgbmV3SXRlbS5vZmZlbnNpdmVHZW1TbG90cysrO1xyXG4gICAgICAgICAgICAgIGlmKGl0ZW1EYXRhWzBdLkRyYWdvbkpld2VsU2xvdDQgPT0gMSkgbmV3SXRlbS5vZmZlbnNpdmVHZW1TbG90cysrO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGlmKGl0ZW1EYXRhWzBdLkRyYWdvbkpld2VsU2xvdDEgPT0gMikgbmV3SXRlbS5pbmNyZWFzaW5nR2VtU2xvdHMrKztcclxuICAgICAgICAgICAgICBpZihpdGVtRGF0YVswXS5EcmFnb25KZXdlbFNsb3QyID09IDIpIG5ld0l0ZW0uaW5jcmVhc2luZ0dlbVNsb3RzKys7XHJcbiAgICAgICAgICAgICAgaWYoaXRlbURhdGFbMF0uRHJhZ29uSmV3ZWxTbG90MyA9PSAyKSBuZXdJdGVtLmluY3JlYXNpbmdHZW1TbG90cysrO1xyXG4gICAgICAgICAgICAgIGlmKGl0ZW1EYXRhWzBdLkRyYWdvbkpld2VsU2xvdDQgPT0gMikgbmV3SXRlbS5pbmNyZWFzaW5nR2VtU2xvdHMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gbmV3SXRlbTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKGl0ZW0uZmlsZU5hbWUpIHtcclxuICAgICAgICB2YXIgZGF0YXMgPSBkbnREYXRhLmZpbmRGYXN0KGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsICdpZCcsIGl0ZW0uaWQpO1xyXG4gICAgICAgIGlmKGRhdGFzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHZhciByb3cgPSBkYXRhc1swXTtcclxuICAgICAgICAgIHZhciBkID0gZG50RGF0YS5nZXRSb3coaXRlbS5maWxlTmFtZSArICcubHpqc29uJywgcm93KTtcclxuICAgICAgICAgIG5ld0l0ZW0gPSBpdGVtRmFjdG9yeS5jcmVhdGVCYXNpY0l0ZW0oZCk7XHJcbiAgICAgICAgICBuZXdJdGVtLnJvdyA9IHJvdztcclxuICAgICAgICAgIG5ld0l0ZW0ubmVlZEpvYkNsYXNzID0gZC5OZWVkSm9iQ2xhc3M7XHJcbiAgICAgICAgICBuZXdJdGVtLmV4Y2hhbmdlVHlwZSA9IGQuRXhjaGFuZ2VUeXBlO1xyXG4gICAgICAgICAgbmV3SXRlbS5maWxlTmFtZSA9IGl0ZW0uZmlsZU5hbWU7XHJcbiAgICAgICAgICBuZXdJdGVtLmdlbVNsb3QgPSBpdGVtLmdlbVNsb3Q7XHJcbiAgICAgICAgICBuZXdJdGVtLmRlc2NyaXB0aW9uID0gdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShkLkRlc2NyaXB0aW9uSUQsIGQuRGVzY3JpcHRpb25JRFBhcmFtKTtcclxuICAgICAgICAgIGl0ZW1GYWN0b3J5LmluaXRJdGVtKG5ld0l0ZW0pO1xyXG4gICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHtuYW1lOiAndW5rbm93biBpdGVtJ307XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7bmFtZTogJ3Vua25vd24gaXRlbSBzb3VyY2U6ICcgKyBpdGVtLml0ZW1Tb3VyY2V9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXREbnRGaWxlczogZnVuY3Rpb24oaXRlbSkge1xyXG5cclxuICAgICAgdmFyIGRudEZpbGVzID0ge307XHJcblxyXG4gICAgICBpZihpdGVtID09IG51bGwpIHtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpZighaXRlbS5pdGVtU291cmNlICYmIGl0ZW0uaXRlbVR5cGVOYW1lIGluIGl0ZW1zKSB7XHJcbiAgICAgICAgICBpdGVtLml0ZW1Tb3VyY2UgPSBpdGVtLml0ZW1UeXBlTmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoaXRlbS5pdGVtU291cmNlID09ICdyYlRlY2gnKSB7XHJcbiAgICAgICAgICBpdGVtLml0ZW1Tb3VyY2UgPSAndGVjaCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0uaXRlbVNvdXJjZSBpbiBpdGVtcykge1xyXG4gICAgICAgICAgdmFyIGl0ZW1UeXBlID0gaXRlbXNbaXRlbS5pdGVtU291cmNlXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZG50RmlsZXNbJ2V4Y2hhbmdlLmx6anNvbiddID0gbnVsbDtcclxuICAgICAgICAgIGRudEZpbGVzW2l0ZW1UeXBlLm1haW5EbnRdID0gaXRlbUNvbHVtbnNUb0xvYWQubWFpbkRudDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBmaWxlVHlwZSBpbiBpdGVtVHlwZSkge1xyXG4gICAgICAgICAgICBpZihmaWxlVHlwZS5pbmRleE9mKCdEbnQnKSA+IDApIHtcclxuICAgICAgICAgICAgICBpZihmaWxlVHlwZSA9PSAnZW5jaGFudERudCcgJiYgIWl0ZW0uZW5jaGFudG1lbnROdW0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBkbnRGaWxlc1tpdGVtVHlwZVtmaWxlVHlwZV1dID0gaXRlbUNvbHVtbnNUb0xvYWRbZmlsZVR5cGVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0uaXRlbVNvdXJjZSA9PSAnc2tpbGxzJyB8fCBpdGVtLnR5cGVOYW1lID09ICdza2lsbHMnKSB7XHJcbiAgICAgICAgICAgIHZhciBza2lsbERudCA9ICdza2lsbHRhYmxlX2NoYXJhY3RlcicgKyBpdGVtLmJhc2VKb2JOYW1lICsgJy5sempzb24nO1xyXG4gICAgICAgICAgICBkbnRGaWxlc1tza2lsbERudF0gPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgc2tpbGxMZXZlbERudCA9ICdza2lsbGxldmVsdGFibGVfY2hhcmFjdGVyJyArIGl0ZW0uYmFzZUpvYk5hbWUgKyAncHZlJyArICcubHpqc29uJztcclxuICAgICAgICAgICAgZG50RmlsZXNbc2tpbGxMZXZlbERudF0gPSBudWxsO1xyXG4gICAgICAgICAgICBza2lsbExldmVsRG50ID0gJ3NraWxsbGV2ZWx0YWJsZV9jaGFyYWN0ZXInICsgaXRlbS5iYXNlSm9iTmFtZSArICdwdnAnICsgJy5sempzb24nO1xyXG4gICAgICAgICAgICBkbnRGaWxlc1tza2lsbExldmVsRG50XSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0uZmlsZU5hbWUpIHtcclxuICAgICAgICAgIGRudEZpbGVzW2l0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbiddID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiBkbnRGaWxlcztcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2dyb3VwSGVscGVyJywgWydleHBvcnRMaW5rSGVscGVyJyxncm91cEhlbHBlcl0pO1xyXG5mdW5jdGlvbiBncm91cEhlbHBlcihleHBvcnRMaW5rSGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICByZWxvYWRHcm91cDogZnVuY3Rpb24oZ3JvdXBOYW1lLCBncm91cCkge1xyXG4gICAgICB2YXIgbmV3SXRlbXMgPSBbXTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLml0ZW1zLCBmdW5jdGlvbihpdGVtLCBrZXkpIHtcclxuICAgICAgICB2YXIgbmV3SXRlbSA9IGV4cG9ydExpbmtIZWxwZXIucmVsb2FkSXRlbShpdGVtKTtcclxuICAgICAgICBpZihuZXdJdGVtKSB7XHJcbiAgICAgICAgICBuZXdJdGVtcy5wdXNoKG5ld0l0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gbmV3SXRlbXM7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXREbnRGaWxlczogZnVuY3Rpb24oZ3JvdXApIHtcclxuXHJcbiAgICAgIHZhciBhbGxEbnRGaWxlcyA9IHt9O1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXAuaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGtleTEpIHtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZG50RmlsZXMgPSBleHBvcnRMaW5rSGVscGVyLmdldERudEZpbGVzKGl0ZW0pO1xyXG5cclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goZG50RmlsZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgIGFsbERudEZpbGVzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gYWxsRG50RmlsZXM7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2l0ZW1DYXRlZ29yeScsXHJcblsnaXRlbUZhY3RvcnknLCdpdGVtcycsJ2RudERhdGEnLGl0ZW1DYXRlZ29yeV0pO1xyXG5mdW5jdGlvbiBpdGVtQ2F0ZWdvcnkoaXRlbUZhY3RvcnksaXRlbXMsZG50RGF0YSkge1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2F0ZWdvcmllczogW1xyXG4gICAgICB7cGF0aDogJ2V2ZXJ5dGhpbmcnLCBuYW1lOidldmVyeXRoaW5nJywgc2VhcmNoVHlwZTogJ2V2ZXJ5dGhpbmcnLCBoaWRlSW5CdWlsZDogdHJ1ZX0sXHJcbiAgICAgIHtwYXRoOiAndGl0bGVzJywgbmFtZTondGl0bGVzJywgc291cmNlVHlwZTogJ3RpdGxlcycsIGhpZGVSYW5rOiB0cnVlLCBoaWRlSm9iOiB0cnVlLCBoaWRlTGV2ZWw6IHRydWUsIG51bUl0ZW1UZXh0OiAnMScsIG1heENhdDogMX0sXHJcbiAgICAgIHtwYXRoOiAnd2VhcG9ucycsIG5hbWU6J3dlYXBvbnMnLCBzb3VyY2VUeXBlOiAnZXF1aXBtZW50JywgbnVtSXRlbVRleHQ6ICcyJywgbWF4RXhjaGFuZ2U6IDEsIG1heENhdDogMiwgbGltaXRFeGNoYW5nZTogWzEsMl19LFxyXG4gICAgICB7cGF0aDogJ2FybW91cicsIG5hbWU6J2FybW91cicsIHNvdXJjZVR5cGU6ICdlcXVpcG1lbnQnLCBudW1JdGVtVGV4dDogJzUnLCBtYXhFeGNoYW5nZTogMSwgbWF4Q2F0OiA1LCBsaW1pdEV4Y2hhbmdlOiBbMyw0LDUsNiw3XX0sXHJcbiAgICAgIHtwYXRoOiAnYWNjZXNzb3JpZXMnLCBuYW1lOidhY2Nlc3NvcmllcycsIHNvdXJjZVR5cGU6ICdlcXVpcG1lbnQnLCBoaWRlSm9iOiB0cnVlLCBtYXhDYXQ6IDQsIG1heEV4Y2hhbmdlOiAyLCBsaW1pdEV4Y2hhbmdlOiBbOCw5LDEwXSwgdElkOiA3NjA0fSxcclxuICAgICAge3BhdGg6ICd0ZWNocycsIG5hbWU6J3RlY2hzJywgc291cmNlVHlwZTogJ3RlY2hzJywgbWF4Q2F0OiA0LCBtYXhFeGNoYW5nZTogMiwgbGltaXRFeGNoYW5nZTogWzgsOSwxMF0sIGhpZGVKb2I6IHRydWV9LFxyXG4gICAgICB7cGF0aDogJ29mZmVuc2l2ZS1nZW1zJywgbmFtZTonb2ZmZW5zaXZlIGdlbXMnLCBzb3VyY2VUeXBlOiAnZ2VtcycsIGhpZGVKb2I6IHRydWUsIG1heENhdDogNCwgbWF4RXhjaGFuZ2U6IDQsIGxpbWl0RXhjaGFuZ2U6IFs1NF19LFxyXG4gICAgICB7cGF0aDogJ2luY3JlYXNpbmctZ2VtcycsIG5hbWU6J2luY3JlYXNpbmcgZ2VtcycsIHNvdXJjZVR5cGU6ICdnZW1zJywgaGlkZUpvYjogdHJ1ZSwgbWF4Q2F0OiAxNCwgbWF4RXhjaGFuZ2U6IDE0LCBsaW1pdEV4Y2hhbmdlOiBbNTRdfSxcclxuICAgICAge3BhdGg6ICdlbmhhbmNlbWVudC1wbGF0ZXMnLCBuYW1lOidlbmhhbmNlbWVudCBwbGF0ZXMnLCBzb3VyY2VUeXBlOiAncGxhdGVzJywgaGlkZUpvYjogdHJ1ZSwgbnVtSXRlbVRleHQ6ICc4KzMnLCBtYXhDYXQ6IDExLCBtYXhFeGNoYW5nZTogMTUsIGxpbWl0RXhjaGFuZ2U6IFszM119LFxyXG4gICAgICB7cGF0aDogJ2V4cGVkaXRpb24tcGxhdGVzJywgbmFtZTonZXhwZWRpdGlvbiBwbGF0ZXMnLCBzb3VyY2VUeXBlOiAncGxhdGVzJywgaGlkZVJhbms6IHRydWUsIGhpZGVKb2I6IHRydWUsIG51bUl0ZW1UZXh0OiAnNCcsIG1heENhdDogNCwgbWF4RXhjaGFuZ2U6IDE1LCBsaW1pdEV4Y2hhbmdlOiBbMzNdfSxcclxuICAgICAge3BhdGg6ICd0YWxpc21hbicsIG5hbWU6J3RhbGlzbWFuJywgc291cmNlVHlwZTogJ3RhbGlzbWFuJywgaGlkZUpvYjogdHJ1ZSwgbnVtSXRlbVRleHQ6ICc4KzQnLCBtYXhDYXQ6IDEyLCBtYXhFeGNoYW5nZTogMTIsIGxpbWl0RXhjaGFuZ2U6IFs1Miw1M10sIHRJZDogMTAwMDA1NDE0OX0sXHJcbiAgICAgIHtwYXRoOiAnY29zdHVtZScsIG5hbWU6J2Nvc3R1bWUnLCBzb3VyY2VUeXBlOiAnY2FzaCcsIG51bUl0ZW1UZXh0OiAnNycsIG1heENhdDogNywgbWF4RXhjaGFuZ2U6IDEsIGhpZGVMZXZlbDogdHJ1ZSwgbGltaXRFeGNoYW5nZTogWzE2LDE3LDE4LDE5LDIwLDIxLDIyXSwgdElkOiA3NjA3fSxcclxuICAgICAge3BhdGg6ICdpbXByaW50JywgbmFtZTonaW1wcmludCcsIHNvdXJjZVR5cGU6ICdpbXByaW50JywgbnVtSXRlbVRleHQ6ICc3JywgbWF4Q2F0OiA3LCBoaWRlTGV2ZWw6IHRydWUsIGhpZGVKb2I6IHRydWUsIHRJZDogMTAwMDEwODMxNH0sXHJcbiAgICAgIHtwYXRoOiAnY2FzaCcsIG5hbWU6J2Nhc2gnLCBzb3VyY2VUeXBlOiAnY2FzaCcsIG51bUl0ZW1UZXh0OiAnOCcsIG1heENhdDogOCwgbWF4RXhjaGFuZ2U6IDIsIGhpZGVKb2I6IHRydWUsIGhpZGVMZXZlbDogdHJ1ZSwgbGltaXRFeGNoYW5nZTogWzIzLDI0LDI1LDI2LDI3LDI4LDI5XSwgdElkOiA3NjA4fSxcclxuICAgICAge3BhdGg6ICdleHRyYXMnLCBuYW1lOidleHRyYXMnLCBzb3VyY2VUeXBlOiAneHRyYXMnLCBsaW1pdEV4Y2hhbmdlOiBbNDddLCBoaWRlSm9iOiB0cnVlLCBoaWRlTGV2ZWw6IHRydWUsfSxcclxuICAgICAge3BhdGg6ICdza2lsbHMnLCBuYW1lOidza2lsbHMnLCBzZWFyY2hUeXBlOiAnc2tpbGxzJ30sXHJcbiAgICAgIHtwYXRoOiAnY3VzdG9tJywgbmFtZTonY3VzdG9tJywgc2VhcmNoVHlwZTogJ2N1c3RvbScsIGhpZGVJblNlYXJjaDogdHJ1ZX0sXHJcbiAgICAgIF0sXHJcbiAgICAgIFxyXG4gICAgYnlOYW1lOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHZhciByZXRWYWwgPSBudWxsO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5jYXRlZ29yaWVzLCBmdW5jdGlvbihjYXRlZ29yeSwgaW5kZXgpIHtcclxuICAgICAgICBpZihjYXRlZ29yeS5uYW1lID09IG5hbWUpIHtcclxuICAgICAgICAgIHJldFZhbCA9IGNhdGVnb3J5O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgfSxcclxuICAgICAgXHJcbiAgICBieVBhdGg6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgdmFyIHJldFZhbCA9IG51bGw7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmNhdGVnb3JpZXMsIGZ1bmN0aW9uKGNhdGVnb3J5LCBpbmRleCkge1xyXG4gICAgICAgIGlmKGNhdGVnb3J5LnBhdGggPT0gbmFtZSkge1xyXG4gICAgICAgICAgcmV0VmFsID0gY2F0ZWdvcnk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRJdGVtczogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICB2YXIgY2F0ID0gdGhpcy5ieU5hbWUobmFtZSk7XHJcbiAgICAgIGlmKGNhdCAmJiAnc291cmNlVHlwZScgaW4gY2F0KSB7XHJcbiAgICAgICAgdmFyIHJldFZhbCA9IFtdO1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oc291cmNlLCBzb3VyY2VOYW1lKSB7XHJcbiAgICAgICAgICBpZihzb3VyY2UudHlwZSA9PSBjYXQuc291cmNlVHlwZSAmJiByZXRWYWwpIHtcclxuICAgICAgICAgICAgaWYoIXNvdXJjZS5pdGVtcyAmJiAhc291cmNlLmxvYWRpbmcpIHtcclxuICAgICAgICAgICAgICBpdGVtRmFjdG9yeS5sb2FkSXRlbXMoc291cmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoc291cmNlLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgcmV0VmFsID0gcmV0VmFsLmNvbmNhdChzb3VyY2UuaXRlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldFZhbCA9IG51bGw7IC8vIGlmIGFueSBhcmUgbnVsbCBqdXN0IHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgY2F0SXRlbXMgPSBbXTtcclxuICAgICAgICBpZihyZXRWYWwpIHtcclxuICAgICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmV0VmFsLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZihpdGVtLnR5cGVOYW1lID09IGNhdC5uYW1lIHx8XHJcbiAgICAgICAgICAgICAgdm0uaXNJdGVtRm9yQ2F0KGNhdCwgaXRlbSwgaXRlbS5kYXRhKSkge1xyXG5cclxuICAgICAgICAgICAgICBpdGVtLnR5cGVOYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICBjYXRJdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNhdEl0ZW1zO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBpc0l0ZW1Gb3JDYXQ6IGZ1bmN0aW9uKGNhdCwgaXRlbSwgcmF3RGF0YSkge1xyXG4gICAgICBcclxuICAgICAgaWYoaXRlbS5pdGVtU291cmNlIGluIGl0ZW1zICYmIGl0ZW1zW2l0ZW0uaXRlbVNvdXJjZV0udHlwZSAhPSBjYXQuc291cmNlVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoaXRlbS5pdGVtVHlwZSA9PSBjYXQubmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihjYXQubGltaXRFeGNoYW5nZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvcih2YXIgaT0wO2k8Y2F0LmxpbWl0RXhjaGFuZ2UubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgaWYoY2F0LmxpbWl0RXhjaGFuZ2VbaV0gPT0gaXRlbS5leGNoYW5nZVR5cGUgfHwgKHJhd0RhdGEgJiYgY2F0LmxpbWl0RXhjaGFuZ2VbaV0gPT0gcmF3RGF0YS5FeGNoYW5nZVR5cGUpKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihpdGVtLml0ZW1Tb3VyY2UgPT0gJ3BsYXRlJykge1xyXG4gICAgICAgICAgICAgIGlmKChpdGVtLnJhd0RhdGEgJiYgcmF3RGF0YS5SYW5rID09IDQpIHx8IChpdGVtLnJhbmsgJiYgaXRlbS5yYW5rLmlkID09IDQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2F0Lm5hbWUgPT0gJ2V4cGVkaXRpb24gcGxhdGVzJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2F0Lm5hbWUgPT0gJ2VuaGFuY2VtZW50IHBsYXRlcyc7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoaXRlbS5pdGVtU291cmNlID09ICdnZW0nKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGdlbVR5cGVzID0gZG50RGF0YS5maW5kKGl0ZW1zLmdlbS5nZW1EbnQsICdpZCcsIGl0ZW0uaWQpO1xyXG4gICAgICAgICAgICAgIGlmKGdlbVR5cGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoZ2VtVHlwZXNbMF0uVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYXQubmFtZSA9PSAnb2ZmZW5zaXZlIGdlbXMnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihnZW1UeXBlc1swXS5UeXBlID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhdC5uYW1lID09ICdpbmNyZWFzaW5nIGdlbXMnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGl0ZW0uaXRlbVNvdXJjZSBpbiBpdGVtcykge1xyXG4gICAgICAgIHJldHVybiBpdGVtc1tpdGVtLml0ZW1Tb3VyY2VdLnR5cGUgPT0gY2F0LnNvdXJjZVR5cGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGluaXQ6IGZ1bmN0aW9uKG5hbWUsIGNvbXBsZXRlKSB7XHJcbiAgICAgIHZhciBjYXQgPSB0aGlzLmJ5TmFtZShuYW1lKTtcclxuICAgICAgaWYoY2F0ICYmICdzb3VyY2VUeXBlJyBpbiBjYXQpIHtcclxuICAgICAgICB2YXIgc291cmNlcyA9IF8uZmlsdGVyKGl0ZW1zLCBmdW5jdGlvbihzb3VyY2UpIHtcclxuICAgICAgICAgIHJldHVybiAoc291cmNlLnR5cGUgPT0gY2F0LnNvdXJjZVR5cGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgbnVtQ29tcGxldGUgPSAwO1xyXG4gICAgICAgIF8uZWFjaChzb3VyY2VzLCBmdW5jdGlvbihzb3VyY2UpIHtcclxuICAgICAgICAgIHNvdXJjZS5pbml0KGZ1bmN0aW9uKCkge30sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIG51bUNvbXBsZXRlKys7XHJcbiAgICAgICAgICAgICAgaWYobnVtQ29tcGxldGUgPT0gc291cmNlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNldEl0ZW1DYXRlZ29yeTogZnVuY3Rpb24gKGl0ZW0sIHJhd0RhdGEpIHtcclxuICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgXHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmNhdGVnb3JpZXMsIGZ1bmN0aW9uKGNhdCwgaW5kZXgpIHtcclxuICAgICAgICBpZih2bS5pc0l0ZW1Gb3JDYXQoY2F0LCBpdGVtLCByYXdEYXRhKSkge1xyXG4gICAgICAgICAgaXRlbS50eXBlTmFtZSA9IGNhdC5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRJdGVtc0J5Q2F0ZWdvcnk6IGZ1bmN0aW9uKGl0ZW1zKSB7XHJcbiAgICAgIHZhciBpdGVtTWFwID0ge307XHJcbiAgICAgIGlmKGl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIHR5cGVzID0ge307XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgaWYoaXRlbSkge1xyXG4gICAgICAgICAgICBpZighKGl0ZW0udHlwZU5hbWUgaW4gdHlwZXMpKSB7XHJcbiAgICAgICAgICAgICAgdHlwZXNbaXRlbS50eXBlTmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0eXBlc1tpdGVtLnR5cGVOYW1lXS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmNhdGVnb3JpZXMsIGZ1bmN0aW9uKGNhdGVnb3J5LCBpbmRleCkge1xyXG5cclxuICAgICAgICAgIGlmKGNhdGVnb3J5Lm5hbWUgaW4gdHlwZXMpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBzb3J0ZWQgPSB0eXBlc1tjYXRlZ29yeS5uYW1lXS5zb3J0KGZ1bmN0aW9uKGl0ZW0xLCBpdGVtMikge1xyXG4gICAgICAgICAgICAgIGlmKGNhdGVnb3J5Lm5hbWUgPT0gJ3RhbGlzbWFuJykge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgZW5oMSA9IGl0ZW0xLmVuY2hhbnRtZW50TnVtO1xyXG4gICAgICAgICAgICAgICAgaWYoIWVuaDEpIGVuaDEgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVuaDIgPSBpdGVtMi5lbmNoYW50bWVudE51bTtcclxuICAgICAgICAgICAgICAgIGlmKCFlbmgyKSBlbmgyID0gMDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYoZW5oMSAhPSBlbmgyKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBlbmgyIC0gZW5oMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSBpZihpdGVtMS5pdGVtU291cmNlID09ICdnZW0nIHx8IGl0ZW0xLml0ZW1Tb3VyY2UgPT0gJ3BsYXRlJykge1xyXG4gICAgICAgICAgICAgICAgaWYoaXRlbTEuZ2VtU2xvdCB8fCBpdGVtMi5nZW1TbG90KSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmKCFpdGVtMS5nZW1TbG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZWxzZSBpZighaXRlbTIuZ2VtU2xvdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTEuZ2VtU2xvdCAtIGl0ZW0yLmdlbVNsb3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmKGl0ZW0yLmxldmVsTGltaXQgIT0gaXRlbTEubGV2ZWxMaW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTIubGV2ZWxMaW1pdCAtIGl0ZW0xLmxldmVsTGltaXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2UgaWYoJ2V4Y2hhbmdlVHlwZScgaW4gaXRlbTEgJiYgJ2V4Y2hhbmdlVHlwZScgaW4gaXRlbTIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtMS5leGNoYW5nZVR5cGUgLSBpdGVtMi5leGNoYW5nZVR5cGU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIHJldHVybiBpdGVtMS5uYW1lLmxvY2FsZUNvbXBhcmUoaXRlbTIubmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpdGVtTWFwW2NhdGVnb3J5Lm5hbWVdID0gc29ydGVkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGl0ZW1NYXBbY2F0ZWdvcnkubmFtZV0gPSBbXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICBpZihpdGVtICYmICEoaXRlbS50eXBlTmFtZSBpbiBpdGVtTWFwKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnd2UgZG9udCBrbm93ICcgKyBpdGVtLnR5cGVOYW1lICsgJyBhbnltb3JlJylcclxuICAgICAgICAgICAgaXRlbU1hcC50eXBlRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBpdGVtTWFwO1xyXG4gICAgfSxcclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgnZXhjbHVkZVNlcnZpY2UnLCBleGNsdWRlU2VydmljZSk7XHJcblxyXG5mdW5jdGlvbiBleGNsdWRlU2VydmljZSgpIHtcclxuIHJldHVybiB7XHJcbiAgICAgaWRzOiBbe1xyXG4gICAgICAgICAgICBuYW1lOiAndW5ib3VuZCBwbGF0ZXMnLFxyXG4gICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgIG1heDogMFxyXG4gICAgICAgIH1cclxuICAgICBdLFxyXG4gfTtcclxufVxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2l0ZW1GYWN0b3J5JyxpdGVtRmFjdG9yeSk7XHJcblxyXG5mdW5jdGlvbiBpdGVtRmFjdG9yeSh0cmFuc2xhdGlvbnMsZG50RGF0YSxoQ29kZVZhbHVlcyxpdGVtcykge1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBsb2FkSXRlbXM6IGxvYWRJdGVtcyxcclxuICAgIGluaXRJdGVtOiBpbml0SXRlbSxcclxuICAgIGNyZWF0ZUl0ZW06IGNyZWF0ZUl0ZW0sXHJcbiAgICBnZXRJdGVtRGF0YTogZ2V0SXRlbURhdGEsXHJcbiAgICBjcmVhdGVCYXNpY0l0ZW06IGNyZWF0ZUJhc2ljSXRlbSxcclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUl0ZW0oaXRlbVR5cGUsIHJvdywgcCkge1xyXG4gICAgXHJcbiAgICAvLyBkYXRhIGFuZCBwb3RlbnRpYWwgYXJlIHVzZWQgdG8gaW5pdGlhbGlzZSBuYW1lIGFuZCBzdGF0c1xyXG4gICAgLy8gdGhpcyBpcyBvbmx5IGRvbmUgd2hlbiBuZWVkZWRcclxuICAgIC8vIHRoZXkgYXJlIHRoZW4gcmVtb3ZlZCBmcm9tIHRoZSBvYmplY3RcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJvdzogcm93LFxyXG4gICAgICBwb3RlbnRpYWwgOiBwLFxyXG4gICAgICBpZDogZG50RGF0YS5nZXRWYWx1ZShpdGVtVHlwZS5tYWluRG50LCByb3csICdpZCcpLFxyXG4gICAgICBpdGVtU291cmNlIDogaXRlbVR5cGUubmFtZSxcclxuICAgICAgbGV2ZWxMaW1pdCA6IGRudERhdGEuZ2V0VmFsdWUoaXRlbVR5cGUubWFpbkRudCwgcm93LCAnTGV2ZWxMaW1pdCcpLFxyXG4gICAgICBuZWVkSm9iQ2xhc3MgOiBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHJvdywgJ05lZWRKb2JDbGFzcycpLFxyXG4gICAgICB0eXBlSWQgOiBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHJvdywgJ1R5cGUnKSxcclxuICAgICAgZXhjaGFuZ2VUeXBlOiBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHJvdywgJ0V4Y2hhbmdlVHlwZScpLFxyXG4gICAgICByYW5rIDogaENvZGVWYWx1ZXMucmFua05hbWVzW2RudERhdGEuZ2V0VmFsdWUoaXRlbVR5cGUubWFpbkRudCwgcm93LCAnUmFuaycpXSxcclxuICAgICAgcGlkOiBudWxsLFxyXG4gICAgICBuYW1lIDogbnVsbCxcclxuICAgICAgc3RhdHMgOiBudWxsLFxyXG4gICAgICBwb3RlbnRpYWxSYXRpbyA6IG51bGwsXHJcbiAgICAgIHR5cGVOYW1lIDogbnVsbCxcclxuICAgICAgc3BhcmtJZDogbnVsbCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpc0RhdGFMb2FkZWQoaXRlbVR5cGUpIHtcclxuICAgIFxyXG4gICAgaWYoIWRudERhdGEuaXNMb2FkZWQoaXRlbVR5cGUubWFpbkRudCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZighdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZigncG90ZW50aWFsRG50JyBpbiBpdGVtVHlwZSAmJiAhZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZS5wb3RlbnRpYWxEbnQpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoJ3BvdGVudGlhbERudEV4JyBpbiBpdGVtVHlwZSAmJiAhZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZS5wb3RlbnRpYWxEbnRFeCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG5cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gbG9hZEl0ZW1zKGl0ZW1UeXBlKSB7XHJcblxyXG4gICAgaWYoIWlzRGF0YUxvYWRlZChpdGVtVHlwZSkpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgXHJcbiAgICBpdGVtVHlwZS5pdGVtcyA9IFtdO1xyXG4gICAgdmFyIG51bVJvd3MgPSBkbnREYXRhLmdldE51bVJvd3MoaXRlbVR5cGUubWFpbkRudCk7XHJcbiAgICBmb3IodmFyIHI9MDtyPG51bVJvd3M7KytyKSB7XHJcbiAgICAgIHZhciBkVHlwZSA9IGRudERhdGEuZ2V0VmFsdWUoaXRlbVR5cGUubWFpbkRudCwgciwgJ1R5cGUnKTtcclxuXHJcbiAgICAgIHZhciBzdGF0ZTFNYXggPSBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHIsICdTdGF0ZTFfTWF4Jyk7XHJcbiAgICAgIHZhciBkU3RhdGVWYWx1ZTEgPSBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHIsICdTdGF0ZVZhbHVlMScpO1xyXG4gICAgICB2YXIgZFR5cGVQYXJhbTEgPSBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHIsICdUeXBlUGFyYW0xJyk7XHJcbiAgICAgICAgXHJcbiAgICAgIC8vIHNraXAgaXRlbXMgd2l0aCBubyBkYXRhXHJcbiAgICAgIGlmKHN0YXRlMU1heCA+IDAgfHwgZFN0YXRlVmFsdWUxID4gMCB8fCBkVHlwZVBhcmFtMSA+IDAgfHwgZFR5cGUgPT0gMzUpIHsgICAgICAgIFxyXG4gICAgICAgIHZhciBwb3RlbnRpYWxzID0gW107XHJcbiAgICAgICAgaWYoZFR5cGVQYXJhbTEgPiAwICYmICdwb3RlbnRpYWxEbnQnIGluIGl0ZW1UeXBlKSB7XHJcbiAgICAgICAgICBwb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnBvdGVudGlhbERudCwgJ1BvdGVudGlhbElEJywgZFR5cGVQYXJhbTEpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZighcG90ZW50aWFscy5sZW5ndGggJiYgJ3BvdGVudGlhbERudEV4JyBpbiBpdGVtVHlwZSkge1xyXG4gICAgICAgICAgICBwb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnBvdGVudGlhbERudEV4LCAnUG90ZW50aWFsSUQnLCBkVHlwZVBhcmFtMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBudW1Qb3RlbnRpYWxzID0gcG90ZW50aWFscy5sZW5ndGg7XHJcbiAgICAgICAgaWYoIW51bVBvdGVudGlhbHMpIHtcclxuICAgICAgICAgIHBvdGVudGlhbHMgPSBbbnVsbF07XHJcbiAgICAgICAgICBudW1Qb3RlbnRpYWxzID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcih2YXIgcD0wO3A8bnVtUG90ZW50aWFsczsrK3ApIHtcclxuICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOyAgICAgICAgICBcclxuICAgICAgICAgIGlmKCFmb3VuZCkge1xyXG4gICAgICAgICAgICBpdGVtVHlwZS5pdGVtcy5wdXNoKGNyZWF0ZUl0ZW0oaXRlbVR5cGUsIHIsIHBvdGVudGlhbHNbcF0sIDApKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICB2YXIgZW5kID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICB2YXIgdGltZSA9IGVuZCAtIHN0YXJ0O1xyXG4gICAgY29uc29sZS5sb2coJ2l0ZW0gaW5pdCB0aW1lOiAnICsgKHRpbWUvMTAwMCkgKyAncyBmb3IgJyArIGl0ZW1UeXBlLm5hbWUpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBpbml0SXRlbShpdGVtKSB7XHJcbiAgICBcclxuICAgIGlmKGl0ZW0ucm93ID49IDApIHtcclxuICAgICAgdmFyIGQ7XHJcbiAgICAgIGlmKGl0ZW0uaXRlbVNvdXJjZSAmJiBpdGVtLml0ZW1Tb3VyY2UgaW4gaXRlbXMpIHtcclxuICAgICAgICBkID0gZG50RGF0YS5nZXRSb3coaXRlbXNbaXRlbS5pdGVtU291cmNlXS5tYWluRG50LCBpdGVtLnJvdyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihpdGVtLmZpbGVOYW1lKSB7XHJcbiAgICAgICAgZCA9IGRudERhdGEuZ2V0Um93KGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsIGl0ZW0ucm93KTtcclxuICAgICAgfVxyXG4gICAgICBkZWxldGUgaXRlbS5yb3c7XHJcblxyXG4gICAgICB2YXIgcCA9IGl0ZW0ucG90ZW50aWFsO1xyXG4gIFxyXG4gICAgICBpZihpdGVtLm5hbWUgPT0gbnVsbCkge1xyXG4gICAgICAgIGl0ZW0ubmFtZSA9IHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoZC5OYW1lSUQsIGQuTmFtZUlEUGFyYW0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZighaXRlbS5zcGFya1R5cGVJZCAmJiBkLlR5cGVQYXJhbTIgPiAwKSB7XHJcbiAgICAgICAgaXRlbS5zcGFya1R5cGVJZCA9IGQuVHlwZVBhcmFtMjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoaXRlbS5zdGF0cyA9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMoZCk7XHJcbiAgICAgICAgaWYocCkge1xyXG4gICAgICAgICAgdmFyIHBvdGVudGlhbFN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMocCk7XHJcbiAgICAgICAgICBzdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoc3RhdHMsIHBvdGVudGlhbFN0YXRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaXRlbS5zdGF0cyA9IHN0YXRzO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihkLlNraWxsSUQgJiYgIWl0ZW0uc2tpbGxJZCkge1xyXG4gICAgICAgIGl0ZW0uc2tpbGxJZCA9IGQuU2tpbGxJRDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoaXRlbS5pY29uSW5kZXggPT0gbnVsbCkge1xyXG4gICAgICAgIGl0ZW0uaWNvbiA9IGQuSWNvbkltYWdlSW5kZXg7XHJcbiAgICAgICAgaWYoIWl0ZW0uaWNvbiAmJiBpdGVtLml0ZW1Tb3VyY2UgPT0gJ3RpdGxlJykge1xyXG4gICAgICAgICAgaXRlbS5pY29uID0gMTI0MTc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihkLmRyYWdvbmpld2VsdHlwZSA+PSAwKSB7XHJcbiAgICAgICAgaXRlbS5kcmFnb25qZXdlbHR5cGUgPSBkLmRyYWdvbmpld2VsdHlwZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoZC5FbmNoYW50SUQgJiYgIWl0ZW0uZW5jaGFudG1lbnRJZCkge1xyXG4gICAgICAgIGl0ZW0uZW5jaGFudG1lbnRJZCA9IGQuRW5jaGFudElEO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihkLkVuY2hhbnRJRCAmJiAhaXRlbS5lbmNoYW50bWVudElkKSB7XHJcbiAgICAgICAgaXRlbS5lbmNoYW50bWVudElkID0gZC5FbmNoYW50SUQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihkLlR5cGUgPT0gMzUpIHtcclxuICAgICAgICBpdGVtLml0ZW1Tb3VyY2UgPSAneHRyYXMnO1xyXG4gICAgICAgIHZhciBpdGVtVHlwZSA9IGl0ZW1zW2l0ZW0uaXRlbVNvdXJjZV07XHJcbiAgICAgICAgaWYoaXRlbVR5cGUpIHtcclxuICAgICAgICAgIC8vIGl0ZW0uZmlsZU5hbWUgPSBpdGVtVHlwZS5tYWluRG50O1xyXG4gICAgICAgICAgdmFyIHBldERhdGEgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUucGV0RG50LCAnaWQnLCBkLmlkKTtcclxuICAgICAgICAgIGlmKHBldERhdGEgJiYgcGV0RGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaXRlbS5lbmNoYW50bWVudElkID0gcGV0RGF0YVswXS5QZXRMZXZlbFR5cGVJRDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKHApIHtcclxuICAgICAgICBpdGVtLnBpZCA9IHAuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGRlbGV0ZSBpdGVtLnBvdGVudGlhbDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0SXRlbURhdGEoaXRlbSkge1xyXG4gICAgdmFyIGl0ZW1UeXBlID0gaXRlbXNbaXRlbS5pdGVtU291cmNlXTtcclxuICAgIFxyXG4gICAgaWYoaXRlbS5maWxlTmFtZSAmJiBkbnREYXRhLmlzTG9hZGVkKGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicpKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBnZXRJdGVtRGF0YUZyb21GaWxlKGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsIGl0ZW0pO1xyXG4gICAgICBpZihyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKGl0ZW0uZmlsZU5hbWUgJiYgZG50RGF0YS5pc0xvYWRlZChpdGVtLmZpbGVOYW1lICsgJy5vcHRpbWlzZWQuanNvbicpKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBnZXRJdGVtRGF0YUZyb21GaWxlKGl0ZW0uZmlsZU5hbWUgKyAnLm9wdGltaXNlZC5qc29uJywgaXRlbSk7XHJcbiAgICAgIGlmKHJlc3VsdCkge1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoaXRlbVR5cGUgJiYgZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZS5tYWluRG50KSkge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0SXRlbURhdGFGcm9tRmlsZShpdGVtVHlwZS5tYWluRG50LCBpdGVtKTtcclxuICAgICAgaWYocmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldEl0ZW1EYXRhRnJvbUZpbGUoZmlsZU5hbWUsIGl0ZW0pIHtcclxuICAgIGlmKGZpbGVOYW1lKSB7XHJcbiAgICAgIHZhciBpdGVtRGF0YSA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ2lkJywgaXRlbS5pZCk7XHJcbiAgICAgIGlmKGl0ZW1EYXRhICYmIGl0ZW1EYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZXR1cm4gaXRlbURhdGFbMF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUJhc2ljSXRlbShkKSB7XHJcbiAgICBpZighZCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogZC5pZCxcclxuICAgICAgbmFtZTogdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShkLk5hbWVJRCwgZC5OYW1lSURQYXJhbSksXHJcbiAgICAgIHJhbms6IGhDb2RlVmFsdWVzLnJhbmtOYW1lc1tkLlJhbmtdLFxyXG4gICAgICBpY29uOiBkLkljb25JbWFnZUluZGV4LFxyXG4gICAgICBsZXZlbExpbWl0IDogZC5MZXZlbExpbWl0LFxyXG4gICAgICBmaWxlTmFtZTogZC5maWxlTmFtZSxcclxuICAgICAgdHlwZUlkOiBkLlR5cGVcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgnaXRlbXMnLFxyXG5bJ3RyYW5zbGF0aW9ucycsJ2RudERhdGEnLCdpdGVtQ29sdW1uc1RvTG9hZCcsaXRlbXNdKTtcclxuZnVuY3Rpb24gaXRlbXModHJhbnNsYXRpb25zLGRudERhdGEsaXRlbUNvbHVtbnNUb0xvYWQpIHtcclxuICBcclxuICB2YXIgaXRlbVNvdXJjZXMgPSB7XHJcbiAgICBcclxuICAgICAgdGl0bGUgOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2FwcGVsbGF0aW9udGFibGUub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB0eXBlOiAndGl0bGVzJywgXHJcbiAgICAgICAgbWluTGV2ZWw6IDAsIFxyXG4gICAgICAgIG1pblJhbms6IDAgfSxcclxuICAgICAgLy8gd3NwcjogeyBtYWluRG50OiAnaXRlbXRhYmxlX3NvdXJjZS5kbnQnLCB0eXBlOiAnd2VsbHNwcmluZycsIG1pbkxldmVsOiAyNCB9LFxyXG4gICAgICBcclxuICAgICAgdGVjaDogeyBcclxuICAgICAgICBtYWluRG50OiAnaXRlbXRhYmxlX3NraWxsbGV2ZWx1cC5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBvdGVudGlhbERudDogJ3BvdGVudGlhbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBwb3RlbnRpYWxEbnRFeDogJ3BvdGVudGlhbHRhYmxlX3JlYm9vdC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgc3BhcmtEbnQ6ICdwb3RlbnRpYWx0YWJsZV9wb3RlbnRpYWxqZXdlbC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgZ2VtU2xvdERudDogJ2RyYWdvbmpld2Vsc2xvdHRhYmxlLmx6anNvbicsXHJcbiAgICAgICAgdHlwZTogJ3RlY2hzJywgXHJcbiAgICAgICAgbWluTGV2ZWw6IDYwLFxyXG4gICAgICAgIG1pblJhbms6IDB9LFxyXG4gICAgICBcclxuICAgICAgdG1hbjogeyBcclxuICAgICAgICBtYWluRG50OiAnaXRlbXRhYmxlX3RhbGlzbWFuLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgdHlwZTogJ3RhbGlzbWFuJywgXHJcbiAgICAgICAgcG90ZW50aWFsRG50OiAncG90ZW50aWFsdGFibGVfdGFsaXNtYW5pdGVtLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBtaW5MZXZlbDogMjQsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgICBcclxuICAgICAgZ2VtOiB7IFxyXG4gICAgICAgIG1haW5EbnQ6ICdpdGVtdGFibGVfZHJhZ29uamV3ZWwub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwb3RlbnRpYWxEbnQ6ICdwb3RlbnRpYWx0YWJsZV9kcmFnb25qZXdlbC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgcG90ZW50aWFsRG50RXg6ICdwb3RlbnRpYWx0YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIGVuY2hhbnREbnQ6ICdlbmNoYW50dGFibGVfZHJhZ29uamV3ZWwub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBnZW1EbnQ6ICdkcmFnb25qZXdlbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnZ2VtcycsXHJcbiAgICAgICAgbWluTGV2ZWw6IDI0LFxyXG4gICAgICAgIG1pblJhbms6IDN9LFxyXG4gICAgICBcclxuICAgICAgcGxhdGU6IHsgXHJcbiAgICAgICAgbWFpbkRudCA6ICdpdGVtdGFibGVfZ2x5cGgub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwb3RlbnRpYWxEbnQ6ICdwb3RlbnRpYWx0YWJsZV9nbHlwaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgdHlwZTogJ3BsYXRlcycsXHJcbiAgICAgICAgbWluTGV2ZWw6IDE2LFxyXG4gICAgICAgIG1pblJhbms6IDIgfSxcclxuXHJcbiAgICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHdlYXBvbkRudDogJ3dlYXBvbnRhYmxlLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgZW5jaGFudERudDogJ2VuY2hhbnR0YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBvdGVudGlhbERudDogJ3BvdGVudGlhbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIGdlbVNsb3REbnQ6ICdkcmFnb25qZXdlbHNsb3R0YWJsZS5sempzb24nLFxyXG4gICAgICAgIHR5cGU6ICdlcXVpcG1lbnQnLFxyXG4gICAgICAgIG1pbkxldmVsOiA4MCxcclxuICAgICAgICBtaW5SYW5rOiAzIH0sXHJcbiAgICAgIGVxOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9lcXVpcG1lbnQub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwYXJ0c0RudDogJ3BhcnRzdGFibGVfZXF1aXBtZW50Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgd2VhcG9uRG50OiAnd2VhcG9udGFibGVfZXF1aXBtZW50Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgZW5jaGFudERudDogJ2VuY2hhbnR0YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBvdGVudGlhbERudDogJ3BvdGVudGlhbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBzcGFya0RudDogJ3BvdGVudGlhbHRhYmxlX3BvdGVudGlhbGpld2VsLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIGdlbVNsb3REbnQ6ICdkcmFnb25qZXdlbHNsb3R0YWJsZS5sempzb24nLFxyXG4gICAgICAgIHR5cGU6ICdlcXVpcG1lbnQnLFxyXG4gICAgICAgIG1pbkxldmVsOiAyMSxcclxuICAgICAgICBtaW5SYW5rOiAzIH0sXHJcbiAgICAgIHJiZXE6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwYXJ0c0RudDogJ3BhcnRzdGFibGVfcmVib290Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgd2VhcG9uRG50OiAnd2VhcG9udGFibGVfcmVib290Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgZW5jaGFudERudDogJ2VuY2hhbnR0YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwb3RlbnRpYWxEbnQ6ICdwb3RlbnRpYWx0YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHNldERudDogJ3NldGl0ZW10YWJsZS5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgZ2VtU2xvdERudDogJ2RyYWdvbmpld2Vsc2xvdHRhYmxlLmx6anNvbicsXHJcbiAgICAgICAgdHlwZTogJ2VxdWlwbWVudCcsXHJcbiAgICAgICAgbWluTGV2ZWw6IDI0LFxyXG4gICAgICAgIG1pblJhbms6IDMgfSxcclxuICAgICAgcHZwZXE6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB3ZWFwb25EbnQ6ICd3ZWFwb250YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBlbmNoYW50RG50OiAnZW5jaGFudHRhYmxlLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnZXF1aXBtZW50JyxcclxuICAgICAgICBnZW1TbG90RG50OiAnZHJhZ29uamV3ZWxzbG90dGFibGUubHpqc29uJyxcclxuICAgICAgICBtaW5MZXZlbDogMjQsXHJcbiAgICAgICAgbWluUmFuazogMyB9LFxyXG5cclxuICAgICAgY0Nsb25lOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9jYXNoY2xvbmUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZV9jYXNoY2xvbmUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHR5cGU6ICdjYXNoJyxcclxuICAgICAgICBtaW5MZXZlbDogMCxcclxuICAgICAgICBpZ25vcmVFcnJvcnM6IHRydWUsXHJcbiAgICAgICAgbWluUmFuazogNCB9LFxyXG4gICAgICBjMjAxNjogeyBcclxuICAgICAgICBtYWluRG50OiAnaXRlbXRhYmxlX2NvbW1vbjIwMTYub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwYXJ0c0RudDogJ3BhcnRzdGFibGVfY29tbW9uMjAxNi5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHdlYXBvbkRudDogJ3dlYXBvbnRhYmxlX2NvbW1vbjIwMTYub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgdHlwZTogJ2Nhc2gnLFxyXG4gICAgICAgIG1pbkxldmVsOiAwLFxyXG4gICAgICAgIG1pblJhbms6IDAgfSxcclxuICAgICAgYzIwMTc6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9jb21tb24yMDE3Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgcGFydHNEbnQ6ICdwYXJ0c3RhYmxlX2NvbW1vbjIwMTcub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB3ZWFwb25EbnQ6ICd3ZWFwb250YWJsZV9jb21tb24yMDE3Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlX2Nhc2gub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHR5cGU6ICdjYXNoJyxcclxuICAgICAgICBtaW5MZXZlbDogMCxcclxuICAgICAgICBpZ25vcmVFcnJvcnM6IHRydWUsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgICBjMjAxNTogeyBcclxuICAgICAgICBtYWluRG50OiAnaXRlbXRhYmxlX2NvbW1vbjIwMTUub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwYXJ0c0RudDogJ3BhcnRzdGFibGVfY29tbW9uMjAxNS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHdlYXBvbkRudDogJ3dlYXBvbnRhYmxlX2NvbW1vbjIwMTUub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgdHlwZTogJ2Nhc2gnLFxyXG4gICAgICAgIG1pbkxldmVsOiAwLFxyXG4gICAgICAgIG1pblJhbms6IDAgfSxcclxuICAgICAgYzIwMTQ6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9jb21tb24yMDE0Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgcGFydHNEbnQ6ICdwYXJ0c3RhYmxlX2NvbW1vbjIwMTQub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB3ZWFwb25EbnQ6ICd3ZWFwb250YWJsZV9jb21tb24yMDE0Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlX2Nhc2gub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHR5cGU6ICdjYXNoJyxcclxuICAgICAgICBtaW5MZXZlbDogMCxcclxuICAgICAgICBtaW5SYW5rOiAwIH0sXHJcbiAgICAgIGNhc2g6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9jYXNoLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgcGFydHNEbnQ6ICdwYXJ0c3RhYmxlX2Nhc2gub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB3ZWFwb25EbnQ6ICd3ZWFwb250YWJsZV9jYXNoLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlX2Nhc2gub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHR5cGU6ICdjYXNoJyxcclxuICAgICAgICBtaW5MZXZlbDogMCxcclxuICAgICAgICBtaW5SYW5rOiAwIH0sXHJcbiAgICAgIGV2ZW50OiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9ldmVudC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgcGFydHNEbnQ6ICdwYXJ0c3RhYmxlX2V2ZW50Lm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB3ZWFwb25EbnQ6ICd3ZWFwb250YWJsZV9ldmVudC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlX2Nhc2gub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHR5cGU6ICdjYXNoJyxcclxuICAgICAgICBtaW5MZXZlbDogMCxcclxuICAgICAgICBtaW5SYW5rOiAwIH0sXHJcbiAgICAgIHh0cmFzOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV92ZWhpY2xlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBwYXJ0c0RudDogJ3ZlaGljbGVwYXJ0c3RhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgcGV0RG50OiAndmVoaWNsZXRhYmxlLmx6anNvbicsXHJcbiAgICAgICAgcGV0TGV2ZWxEbnQ6ICdwZXRsZXZlbHRhYmxlLmx6anNvbicsIFxyXG4gICAgICAgIHR5cGU6ICd4dHJhcycsXHJcbiAgICAgICAgbWluTGV2ZWw6IDAsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgICBpbXByaW50OiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9pbXByaW50aW5nLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnaW1wcmludCcsXHJcbiAgICAgICAgbWluTGV2ZWw6IDAsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gbm93IHRoYXQgdGhlIHNvdXJjZXMgYXJlIHNldCB1cCBhZGQgc29tZSBtZXRob2RzIG9uIHRoZW0gZm9yIGluaXRpYWxpc2F0aW9uXHJcbiAgICAvLyBlYWNoIHNvdXJjZSB3aWxsIHN0b3JlIHRoZSBpdGVtcyBmcm9tIHRoYXQgc291cmNlIGZvciByZXVzZSBieSBzZWFyY2hlc1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1Tb3VyY2VzLCBmdW5jdGlvbihpdGVtU291cmNlLCBrZXkpIHtcclxuICAgICAgaXRlbVNvdXJjZS5uYW1lID0ga2V5O1xyXG4gICAgICBpdGVtU291cmNlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgaXRlbVNvdXJjZS5pdGVtcyA9IG51bGw7XHJcbiAgICAgIGl0ZW1Tb3VyY2UuaW5pdCA9IGluaXQ7IC8vIGRlY2FsYXJlZCBiZWxvd1xyXG4gICAgICBpdGVtU291cmNlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaXRlbVNvdXJjZS5pdGVtcyA9IG51bGw7XHJcbiAgICAgICAgaXRlbVNvdXJjZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaXRlbVNvdXJjZXM7XHJcbiAgXHJcbiAgXHJcbiAgICBmdW5jdGlvbiBpbml0KHByb2dyZXNzLCBjb21wbGV0ZSkge1xyXG4gICAgICB2YXIgaXRlbVNvdXJjZSA9IHRoaXM7XHJcbiAgICAgIGl0ZW1Tb3VyY2UubG9hZGluZyA9IHRydWU7XHJcbiAgXHJcbiAgICAgIGlmKGl0ZW1Tb3VyY2UuaXRlbXMpIHtcclxuICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyYW5zbGF0aW9ucy5pbml0KHByb2dyZXNzLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGRvQ29tcGxldGUoaXRlbVNvdXJjZSwgY29tcGxldGUpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZG50RGF0YS5pbml0KGl0ZW1Tb3VyY2UubWFpbkRudCwgaXRlbUNvbHVtbnNUb0xvYWQubWFpbkRudCwgcHJvZ3Jlc3MsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZG9Db21wbGV0ZShpdGVtU291cmNlLCBjb21wbGV0ZSlcclxuICAgICAgICB9LCBpdGVtU291cmNlLmlnbm9yZUVycm9ycyk7XHJcbiAgICAgICAgaWYoJ3BvdGVudGlhbERudCcgaW4gaXRlbVNvdXJjZSkge1xyXG4gICAgICAgICAgZG50RGF0YS5pbml0KGl0ZW1Tb3VyY2UucG90ZW50aWFsRG50LCBpdGVtQ29sdW1uc1RvTG9hZC5wb3RlbnRpYWxEbnQsIHByb2dyZXNzLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZG9Db21wbGV0ZShpdGVtU291cmNlLCBjb21wbGV0ZSlcclxuICAgICAgICAgIH0sIGl0ZW1Tb3VyY2UuaWdub3JlRXJyb3JzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoJ3BvdGVudGlhbERudEV4JyBpbiBpdGVtU291cmNlKSB7XHJcbiAgICAgICAgICBkbnREYXRhLmluaXQoaXRlbVNvdXJjZS5wb3RlbnRpYWxEbnRFeCwgaXRlbUNvbHVtbnNUb0xvYWQucG90ZW50aWFsRG50LCBwcm9ncmVzcywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGRvQ29tcGxldGUoaXRlbVNvdXJjZSwgY29tcGxldGUpXHJcbiAgICAgICAgICB9LCBpdGVtU291cmNlLmlnbm9yZUVycm9ycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCdnZW1EbnQnIGluIGl0ZW1Tb3VyY2UpIHtcclxuICAgICAgICAgIGRudERhdGEuaW5pdChpdGVtU291cmNlLmdlbURudCwgaXRlbUNvbHVtbnNUb0xvYWQuZ2VtRG50LCBwcm9ncmVzcywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGRvQ29tcGxldGUoaXRlbVNvdXJjZSwgY29tcGxldGUpXHJcbiAgICAgICAgICB9LCBpdGVtU291cmNlLmlnbm9yZUVycm9ycyk7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIGRvQ29tcGxldGUoaXRlbVNvdXJjZSwgY29tcGxldGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGRvQ29tcGxldGUoaXRlbVNvdXJjZSwgY29tcGxldGUpIHtcclxuICAgICAgaWYodHJhbnNsYXRpb25zLmlzTG9hZGVkKCkgJiYgXHJcbiAgICAgIGRudERhdGEuaXNMb2FkZWQoaXRlbVNvdXJjZS5tYWluRG50KSAmJiBcclxuICAgICAgKCEoJ3BvdGVudGlhbERudCcgaW4gaXRlbVNvdXJjZSkgfHwgZG50RGF0YS5pc0xvYWRlZChpdGVtU291cmNlLnBvdGVudGlhbERudCkgfHwgZG50RGF0YS5oYXNGYWlsZWQoaXRlbVNvdXJjZS5wb3RlbnRpYWxEbnQpKSAmJlxyXG4gICAgICAoISgncG90ZW50aWFsRG50RXgnIGluIGl0ZW1Tb3VyY2UpIHx8IGRudERhdGEuaXNMb2FkZWQoaXRlbVNvdXJjZS5wb3RlbnRpYWxEbnRFeCkgfHwgZG50RGF0YS5oYXNGYWlsZWQoaXRlbVNvdXJjZS5wb3RlbnRpYWxEbnRFeCkpICYmXHJcbiAgICAgICghKCdnZW1EbnQnIGluIGl0ZW1Tb3VyY2UpIHx8IGRudERhdGEuaXNMb2FkZWQoaXRlbVNvdXJjZS5nZW1EbnQpIHx8IGRudERhdGEuaGFzRmFpbGVkKGl0ZW1Tb3VyY2UuZ2VtRG50KSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICBpdGVtU291cmNlLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgnam9icycsIFsnZG50RGF0YScsICd0cmFuc2xhdGlvbnMnLCAnaXRlbUNvbHVtbnNUb0xvYWQnLCBqb2JzXSk7XHJcbmZ1bmN0aW9uIGpvYnMoZG50RGF0YSwgdHJhbnNsYXRpb25zLCBpdGVtQ29sdW1uc1RvTG9hZCkge1xyXG4gIFxyXG4gIHZhciBmaWxlTmFtZSA9J2pvYnRhYmxlLmx6anNvbic7XHJcbiAgdmFyIGNvbHNUb0xvYWQgPSBpdGVtQ29sdW1uc1RvTG9hZC5qb2JzRG50O1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBmaWxlTmFtZSA6IGZpbGVOYW1lLFxyXG4gICAgYWxsSm9icyA6IG51bGwsXHJcbiAgICBcclxuICAgIGlzTG9hZGVkIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBkbnREYXRhLmlzTG9hZGVkKGZpbGVOYW1lKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGhhc1N0YXJ0ZWRMb2FkaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGRudERhdGEuaGFzU3RhcnRlZExvYWRpbmcoZmlsZU5hbWUpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgaW5pdCA6IGZ1bmN0aW9uKHByb2dyZXNzLCBjb21wbGV0ZSkge1xyXG4gICAgICBkbnREYXRhLmluaXQoZmlsZU5hbWUsIGNvbHNUb0xvYWQsIHByb2dyZXNzLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXNldCA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmFsbEpvYnMgPSBudWxsO1xyXG4gICAgICBkbnREYXRhLnJlc2V0KGZpbGVOYW1lKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldEZpbmFsSm9icyA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGpvYnMgPSBbXTtcclxuICAgICAgdmFyIGFsbGpvYnMgPSB0aGlzLmdldEFsbEpvYnMoKTtcclxuICAgICAgaWYoYWxsam9icykge1xyXG4gICAgICAgIHZhciBudW1Sb3dzID0gYWxsam9icy5sZW5ndGg7XHJcbiAgICAgICAgZm9yKHZhciByPTA7cjxudW1Sb3dzOysrcikge1xyXG4gICAgICAgICAgaWYoYWxsam9ic1tyXS5kLkpvYk51bWJlciA9PSAyICYmIGFsbGpvYnNbcl0uZC5Kb2JJY29uID4gMCkge1xyXG4gICAgICAgICAgICBqb2JzLnB1c2goYWxsam9ic1tyXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gam9icztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldEJhc2VKb2JzIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgcmV0VmFsPVtdO1xyXG4gICAgICB2YXIgYmFzZUpvYnMgPSB7fTtcclxuXHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuZ2V0RmluYWxKb2JzKCksIGZ1bmN0aW9uKGpvYiwga2V5KSB7XHJcbiAgICAgICAgYmFzZUpvYnNbc2VsZi5nZXRCYXNlSm9iTmFtZShqb2IpXSA9IGpvYjtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goYmFzZUpvYnMsIGZ1bmN0aW9uKGpvYiwgam9iTmFtZSkge1xyXG4gICAgICAgIHJldFZhbC5wdXNoKGpvYk5hbWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRBbGxKb2JzIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZih0aGlzLmFsbEpvYnMgPT0gbnVsbCAmJiB0aGlzLmlzTG9hZGVkKCkgJiYgdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpIHtcclxuICAgICAgICB2YXIgam9icyA9IFtdO1xyXG4gICAgICAgIHZhciBkYXRhID0gZG50RGF0YS5nZXREYXRhKGZpbGVOYW1lKTtcclxuICAgICAgICB2YXIgbnVtUm93cyA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIGZvcih2YXIgcj0wO3I8bnVtUm93czsrK3IpIHtcclxuICAgICAgICAgIGpvYnNbam9icy5sZW5ndGhdID0gdGhpcy5jcmVhdGVKb2IoZGF0YVtyXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuYWxsSm9icyA9IGpvYnM7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXMuYWxsSm9icztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldEJ5SWQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHZhciBkYXRhID0gdGhpcy5nZXRBbGxKb2JzKCk7XHJcbiAgICAgIGlmKGRhdGEpIHtcclxuICAgICAgICB2YXIgbnVtUm93cyA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIGZvcih2YXIgcj0wO3I8bnVtUm93czsrK3IpIHtcclxuICAgICAgICAgIGlmKGRhdGFbcl0uaWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGFbcl07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBjcmVhdGVKb2IgOiBmdW5jdGlvbihkKSB7XHJcbiAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGQgOiBkLFxyXG4gICAgICAgICAgaWQgOiBkLmlkLFxyXG4gICAgICAgICAgbmFtZSA6IHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoZC5Kb2JOYW1lKSxcclxuICAgICAgICAgIGlzQ2xhc3NKb2IgOiBmdW5jdGlvbihjKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmlzQ2xhc3NKb2IoZCwgYyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGlzQ2xhc3NKb2IgOiBmdW5jdGlvbiAoZCwgYykge1xyXG4gICAgICBpZihjID09IDApIHJldHVybiB0cnVlO1xyXG4gICAgICBpZihkLmlkID09IGMpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdmFyIHBhcmVudEpvYiA9IGQuUGFyZW50Sm9iO1xyXG4gICAgICBcclxuICAgICAgaWYoIXBhcmVudEpvYikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZihwYXJlbnRKb2IgPT0gYykgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICB2YXIgcGFyZW50Sm9iRGF0YSA9IHRoaXMuZ2V0QnlJZChwYXJlbnRKb2IpO1xyXG4gICAgICBpZihwYXJlbnRKb2JEYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDbGFzc0pvYihwYXJlbnRKb2JEYXRhLmQsIGMpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRCYXNlSm9iTmFtZSA6IGZ1bmN0aW9uKGpvYikge1xyXG4gICAgICBpZih0aGlzLmlzTG9hZGVkKCkpIHtcclxuICAgICAgICB2YXIgYWxsam9icyA9IHRoaXMuZ2V0QWxsSm9icygpO1xyXG4gICAgICAgIGlmKGFsbGpvYnMpIHtcclxuICAgICAgICAgIHZhciBudW1Sb3dzID0gYWxsam9icy5sZW5ndGg7XHJcbiAgICAgICAgICBmb3IodmFyIHI9MDtyPG51bVJvd3M7KytyKSB7XHJcbiAgICAgICAgICAgIGlmKGFsbGpvYnNbcl0uaWQgPT0gKGpvYi5kLkJhc2VDbGFzcysxKSAmJiBhbGxqb2JzW3JdLmQuRW5nbGlzaE5hbWUpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gYWxsam9ic1tyXS5kLkVuZ2xpc2hOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0sXHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ29ubGluZVNlcnZpY2UnLCBbJyR3aW5kb3cnLCckcScsJ2hDb2RlVmFsdWVzJyxvbmxpbmVTZXJ2aWNlXSk7XHJcblxyXG5mdW5jdGlvbiBvbmxpbmVTZXJ2aWNlKCR3aW5kb3csICRxLCBoQ29kZVZhbHVlcykge1xyXG4gIC8vIGNvbnNvbGUubG9nKCdzZXR1cCBvbmxpbmUgc2VydmljZScpO1xyXG4gIFxyXG4gIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgbG9naW46IGxvZ2luLFxyXG4gICAgZ2V0VXNlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXI7XHJcbiAgICB9LFxyXG4gICAgc2lnbk91dDogc2lnbk91dCxcclxuICAgIGRlbGV0ZUFjY291bnQ6IGRlbGV0ZUFjY291bnQsXHJcbiAgICBcclxuICAgIGdldFVzZXJCdWlsZHM6IGdldFVzZXJCdWlsZHMsXHJcbiAgICBkZWxldGVCdWlsZDogZGVsZXRlQnVpbGQsXHJcbiAgICBzYXZlQnVpbGQ6IHNhdmVCdWlsZCxcclxuICAgIGdldEJ1aWxkOiBnZXRCdWlsZCxcclxuICAgIGdldENsYXNzQnVpbGRzOiBnZXRDbGFzc0J1aWxkcyxcclxuICAgIFxyXG4gICAgZ2V0UHJvZmlsZTogZ2V0UHJvZmlsZSxcclxuICAgIHNhdmVQcm9maWxlOiBzYXZlUHJvZmlsZSxcclxuICAgIFxyXG4gICAgc3RyaXBCdWlsZE5hbWU6IHN0cmlwQnVpbGROYW1lXHJcbiAgfTtcclxuICBcclxuICBpbml0KCk7XHJcbiAgXHJcbiAgcmV0dXJuIHNlcnZpY2U7XHJcbiAgXHJcbiAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbml0Jyk7XHJcbiAgICBmaXJlYmFzZS5pbml0aWFsaXplQXBwKHtcclxuICAgICAgYXBpS2V5OiAnQUl6YVN5Qy1NY2tnaG8xeEFJMlNRenNLbnBzcjJPYkRLT2hkU3JFJyxcclxuICAgICAgYXV0aERvbWFpbjogJ2RuZ2VhcnNpbS5maXJlYmFzZWFwcC5jb20nLFxyXG4gICAgICBkYXRhYmFzZVVSTDogJ2h0dHBzOi8vZG5nZWFyc2ltLmZpcmViYXNlaW8uY29tJyxcclxuICAgICAgc3RvcmFnZUJ1Y2tldDogJ2RuZ2VhcnNpbS5hcHBzcG90LmNvbScsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gbG9naW4oKSB7XHJcbiAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIHZhciBhdXRoID0gZmlyZWJhc2UuYXV0aCgpO1xyXG4gICAgICAgIFxyXG4gICAgICBhdXRoLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbih1c2VyKSB7XHJcbiAgICAgICAgaWYodXNlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmVkaXJlY3RpbmcnKTtcclxuICAgICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdsb2dpbi5odG1sJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9nZ2VkIGluJyk7XHJcbiAgICAgICAgICByZXNvbHZlKHVzZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0UHJvZmlsZSh1aWQpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdnZXQgcHJvZmlsZScpO1xyXG4gICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigncHJvZmlsZS8nICsgdWlkKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHN0b3JlZFByb2ZpbGUpIHtcclxuICAgICAgICBpZihzdG9yZWRQcm9maWxlKSB7XHJcbiAgICAgICAgICByZXNvbHZlKHN0b3JlZFByb2ZpbGUudmFsKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUoe30pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0QnVpbGQodWlkLCBidWlsZE5hbWUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdnZXQgYnVpbGQnKTtcclxuICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkcy8nICsgdWlkICsgJy8nICsgc3RyaXBCdWlsZE5hbWUoYnVpbGROYW1lKSkub25jZSgndmFsdWUnLCBmdW5jdGlvbihzdG9yZWRQcm9maWxlKSB7XHJcbiAgICAgICAgaWYoc3RvcmVkUHJvZmlsZSkge1xyXG4gICAgICAgICAgcmVzb2x2ZShkZWNvbXByZXNzQnVpbGQoc3RvcmVkUHJvZmlsZS52YWwoKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUoe30pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2F2ZVByb2ZpbGUocHJvZmlsZSkge1xyXG4gICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICB2YXIgdXNlciA9IHNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gICAgICBpZih1c2VyKSB7XHJcbiAgICAgICAgcHJvZmlsZSA9IGFuZ3VsYXIuY29weShwcm9maWxlKTtcclxuICAgICAgICBkZWxldGVOdWxsUHJvcGVydGllcyhwcm9maWxlLCB0cnVlKTtcclxuICAgICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigncHJvZmlsZS8nICsgdXNlci51aWQpLnNldChwcm9maWxlKS50aGVuKHJlc29sdmUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0VXNlckJ1aWxkcyh1aWQpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdnZXQgYnVpbGRzJyk7XHJcbiAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdnZXR0aW5nIGJ1aWxkcycpO1xyXG4gICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZignYnVpbGRzLycgKyB1aWQpLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oc3RvcmVkQnVpbGRzKSB7XHJcbiAgICAgICAgaWYoc3RvcmVkQnVpbGRzKSB7XHJcbiAgICAgICAgICB2YXIgcmV0VmFsID0ge307XHJcbiAgICAgICAgICB2YXIgdmFsID0gc3RvcmVkQnVpbGRzLnZhbCgpO1xyXG4gICAgICAgICAgZm9yKHZhciBidWlsZE5hbWUgaW4gdmFsKSB7XHJcbiAgICAgICAgICAgIHJldFZhbFtidWlsZE5hbWVdID0gZGVjb21wcmVzc0J1aWxkKHZhbFtidWlsZE5hbWVdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc29sdmUocmV0VmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldENsYXNzQnVpbGRzKGpvYikge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dldCBjbGFzcyBidWlsZHMnKTtcclxuICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ2dldHRpbmcgYnVpbGRzJywgam9iLmlkKTtcclxuICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2pvYi1idWlsZHMvJyArIGpvYi5pZCkub25jZSgndmFsdWUnLCBmdW5jdGlvbihqb2JCdWlsZHMpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnb2snKTtcclxuICAgICAgICBpZihqb2JCdWlsZHMpIHtcclxuICAgICAgICAgIHJlc29sdmUoam9iQnVpbGRzLnZhbCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGNvbXByZXNzQnVpbGQoYnVpbGQpIHtcclxuICAgIFxyXG4gICAgaWYoYnVpbGQuaXRlbXMpIHtcclxuICAgICAgXy5lYWNoKGJ1aWxkLml0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgZGVsZXRlIGl0ZW0uZnVsbFN0YXRzO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIHN0cmluZ2lmaWVkRGF0YSA9IEpTT04uc3RyaW5naWZ5KGJ1aWxkKTtcclxuICAgIHJldHVybiBMWlN0cmluZy5jb21wcmVzc1RvVVRGMTYoc3RyaW5naWZpZWREYXRhKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZGVjb21wcmVzc0J1aWxkKGNvbXByZXNzZWRCdWlsZCkge1xyXG4gICAgdmFyIHN0cmluZ2lmaWVkRGF0YSA9IExaU3RyaW5nLmRlY29tcHJlc3NGcm9tVVRGMTYoY29tcHJlc3NlZEJ1aWxkKTtcclxuICAgIHZhciBidWlsZCA9IEpTT04ucGFyc2Uoc3RyaW5naWZpZWREYXRhKTtcclxuICAgIFxyXG4gICAgaWYoYnVpbGQuaXRlbXMpIHtcclxuICAgICAgXy5lYWNoKGJ1aWxkLml0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgaXRlbS5mdWxsU3RhdHMgPSBpdGVtLnN0YXRzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0uZW5jaGFudG1lbnRTdGF0cyAmJiBpdGVtLmVuY2hhbnRtZW50U3RhdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBpdGVtLmZ1bGxTdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoaXRlbS5lbmNoYW50bWVudFN0YXRzLCBpdGVtLmZ1bGxTdGF0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0uc3BhcmtTdGF0cyAmJiBpdGVtLnNwYXJrU3RhdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBpdGVtLmZ1bGxTdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoaXRlbS5zcGFya1N0YXRzLCBpdGVtLmZ1bGxTdGF0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGJ1aWxkO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBzYXZlQnVpbGQoYnVpbGROYW1lLCBidWlsZCkge1xyXG4gICAgdmFyIHVzZXIgPSBzZXJ2aWNlLmdldFVzZXIoKTtcclxuICAgIHZhciBhY3Rpb25zID0gW107XHJcbiAgICBpZih1c2VyKSB7XHJcbiAgICAgIGJ1aWxkID0gYW5ndWxhci5jb3B5KGJ1aWxkKTtcclxuICAgICAgZGVsZXRlTnVsbFByb3BlcnRpZXMoYnVpbGQsIHRydWUpO1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnc2F2aW5nJywgYnVpbGQpO1xyXG4gICAgICBhY3Rpb25zLnB1c2goXHJcbiAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkcy8nICsgdXNlci51aWQgKyAnLycgKyBzdHJpcEJ1aWxkTmFtZShidWlsZE5hbWUpKS5zZXQoY29tcHJlc3NCdWlsZChidWlsZCkpXHJcbiAgICAgICk7XHJcbiAgICAgIFxyXG4gICAgICBpZihidWlsZC5qb2IgJiYgYnVpbGQuam9iLmlkKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3NhdmluZyBidWlsZCcpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcclxuICAgICAgICBpZihidWlsZC5wbGF5ZXJMZXZlbCkge1xyXG4gICAgICAgICAgZGF0YS5sZXYgPSBidWlsZC5wbGF5ZXJMZXZlbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoYnVpbGQucmVnaW9uKSB7XHJcbiAgICAgICAgICBkYXRhLnJlZ2lvbiA9IGJ1aWxkLnJlZ2lvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoYnVpbGQuZ3VpbGQpIHtcclxuICAgICAgICAgIGRhdGEuZ3VpbGQgPSBidWlsZC5ndWlsZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoYnVpbGQuYWJvdXQpIHtcclxuICAgICAgICAgIGRhdGEuYWJvdXQgPSBidWlsZC5hYm91dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGVsZXRlTnVsbFByb3BlcnRpZXMoZGF0YSwgdHJ1ZSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICBhY3Rpb25zLnB1c2goXHJcbiAgICAgICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZignam9iLWJ1aWxkcy8nICsgYnVpbGQuam9iLmlkICsgJy8nICsgdXNlci51aWQgKyAnLycgKyBzdHJpcEJ1aWxkTmFtZShidWlsZE5hbWUpKS5zZXQoZGF0YSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJHEuYWxsKGFjdGlvbnMpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBkZWxldGVOdWxsUHJvcGVydGllcyh0ZXN0LCByZWN1cnNlKSB7XHJcbiAgICBmb3IgKHZhciBpIGluIHRlc3QpIHtcclxuICAgICAgICBpZiAodGVzdFtpXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0ZXN0W2ldO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmVjdXJzZSAmJiB0eXBlb2YgdGVzdFtpXSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgZGVsZXRlTnVsbFByb3BlcnRpZXModGVzdFtpXSwgcmVjdXJzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBzaWduT3V0KCkge1xyXG4gICAgdmFyIGF1dGggPSBmaXJlYmFzZS5hdXRoKCk7XHJcbiAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGF1dGguc2lnbk91dCgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgIHJlamVjdCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBkZWxldGVBY2NvdW50KGJ1aWxkcykge1xyXG4gICAgdmFyIGF1dGggPSBmaXJlYmFzZS5hdXRoKCk7XHJcbiAgICB2YXIgdXNlciA9IHNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgcExpc3QgPSBbXHJcbiAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkcy8nICsgdXNlci51aWQpLnJlbW92ZSgpLFxyXG4gICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdwcm9maWxlLycgKyB1c2VyLnVpZCkucmVtb3ZlKCksXHJcbiAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ3ByaXZhdGUvJyArIHVzZXIudWlkKS5yZW1vdmUoKV07XHJcbiAgICAgICAgXHJcbiAgICAgIHZhciBqb2JJZHMgPSBbXTtcclxuICAgICAgZm9yKHZhciBidWlsZE5hbWUgaW4gYnVpbGRzKSB7XHJcbiAgICAgICAgaWYoYnVpbGRzW2J1aWxkTmFtZV0uam9iKSB7XHJcbiAgICAgICAgICBqb2JJZHMucHVzaChidWlsZHNbYnVpbGROYW1lXS5qb2IuaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgam9iSWRzID0gXy51bmlxKGpvYklkcyk7XHJcbiAgICAgIF8uZWFjaChqb2JJZHMsIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgcExpc3QucHVzaChcclxuICAgICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdqb2ItYnVpbGRzLycgKyBpZCArICcvJyArIHVzZXIudWlkKS5yZW1vdmUoKVxyXG4gICAgICAgIClcclxuICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICRxLmFsbChwTGlzdCkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZGVsZXRlZCBkYXRhJyk7XHJcbiAgICAgICAgdXNlci5kZWxldGUoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ2RlbGV0ZWQgdXNlcicpO1xyXG4gICAgICAgICAgYXV0aC5zaWduT3V0KCkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3NpZ25lZCBvdXQnKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZGVsZXRlQnVpbGQoYnVpbGROYW1lLCBidWlsZCkge1xyXG4gICAgXHJcbiAgICB2YXIgcExpc3QgPSBbXTtcclxuICAgIHZhciB1c2VyID0gc2VydmljZS5nZXRVc2VyKCk7XHJcbiAgICBpZih1c2VyKSB7XHJcbiAgICAgIHBMaXN0LnB1c2goXHJcbiAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkcy8nICsgdXNlci51aWQgKyAnLycgKyBzdHJpcEJ1aWxkTmFtZShidWlsZE5hbWUpKS5yZW1vdmUoKSk7XHJcbiAgICAgIFxyXG4gICAgICBpZihidWlsZC5qb2IpIHtcclxuICAgICAgICBwTGlzdC5wdXNoKFxyXG4gICAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2pvYi1idWlsZHMvJyArIGJ1aWxkLmpvYi5pZCArICcvJyArIHVzZXIudWlkICsgJy8nICsgc3RyaXBCdWlsZE5hbWUoYnVpbGROYW1lKSkucmVtb3ZlKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiAkcS5hbGwocExpc3QpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBzdHJpcEJ1aWxkTmFtZShidWlsZE5hbWUpIHtcclxuICAgIHJldHVybiBidWlsZE5hbWUucmVwbGFjZSgvWy4kXFxbXFxdI1xcL10vZywgJycpO1xyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdxdWlja0FkZEhlbHBlcicsIHF1aWNrQWRkSGVscGVyKTtcclxuZnVuY3Rpb24gcXVpY2tBZGRIZWxwZXIoZG50RGF0YSwgdHJhbnNsYXRpb25zLCBpdGVtQ29sdW1uc1RvTG9hZCwgaXRlbUNhdGVnb3J5LGl0ZW1GYWN0b3J5LGpvYnMsaENvZGVWYWx1ZXMpIHtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEl0ZW06IGdldEl0ZW0sXHJcbiAgICBmaW5kRGF0YTogZmluZERhdGFcclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldEl0ZW0oZGF0YXMpIHtcclxuICAgIHZhciBpdGVtID0gbnVsbDtcclxuICAgIGZvcih2YXIgZD0wO2Q8ZGF0YXMubGVuZ3RoOysrZCkge1xyXG4gICAgICBpZihkYXRhc1tkXS5kZWYuaXNJdGVtU3RlcCkge1xyXG4gICAgICAgIGl0ZW0gPSBkYXRhc1tkXS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmb3IodmFyIGQ9MDtkPGRhdGFzLmxlbmd0aDsrK2QpIHtcclxuICAgICAgaWYoZGF0YXNbZF0uZGVmLmFsdGVySXRlbSkge1xyXG4gICAgICAgIGRhdGFzW2RdLmRlZi5hbHRlckl0ZW0oZGF0YXNbZF0udmFsdWUuaWQsIGl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBpdGVtO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBmaW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzLCBtYXhJdGVtcykge1xyXG4gICAgaWYoIW1heEl0ZW1zKSB7XHJcbiAgICAgIG1heEl0ZW1zID0gOTk5OTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIGFsbEl0ZW1zID0gaXRlbUNhdGVnb3J5LmdldEl0ZW1zKGNhdGVnb3J5Lm5hbWUpO1xyXG4gICAgdmFyIHJldFZhbCA9IFtdO1xyXG4gICAgdmFyIG51bUl0ZW1zID0gYWxsSXRlbXMubGVuZ3RoO1xyXG5cclxuICAgIHZhciBzb3J0RnVuYyA9IG51bGw7XHJcbiAgICB2YXIgc29ydElkID0gbnVsbDtcclxuICAgIFxyXG4gICAgZm9yKHZhciBpPTA7aTxudW1JdGVtczsrK2kpIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBpdGVtID0gYWxsSXRlbXNbaV07XHJcbiAgICAgIFxyXG4gICAgICBpZighY2F0ZWdvcnkuaGlkZUpvYiAmJiBidWlsZC5qb2IuaWQgPiAwICYmIGl0ZW0ubmVlZEpvYkNsYXNzID4gMCAmJiAham9icy5pc0NsYXNzSm9iKGJ1aWxkLmpvYi5kLCBpdGVtLm5lZWRKb2JDbGFzcykpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBpdGVtRmFjdG9yeS5pbml0SXRlbShpdGVtKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBhZGRJdGVtID0gdHJ1ZTtcclxuICAgICAgZm9yKHZhciBkPTA7ZDxkYXRhcy5sZW5ndGg7KytkKSB7XHJcbiAgICAgICAgaWYoIWRhdGFzW2RdLmRlZi5tYXRjaGVzSXRlbSB8fCBkYXRhc1tkXS5kZWYubWF0Y2hlc0l0ZW0oZGF0YXNbZF0udmFsdWUuaWQsIGl0ZW0pKSB7XHJcbiAgICAgICAgICBpZignc29ydEZ1bmMnIGluIGRhdGFzW2RdLmRlZikge1xyXG4gICAgICAgICAgICBzb3J0RnVuYyA9IGRhdGFzW2RdLmRlZi5zb3J0RnVuYztcclxuICAgICAgICAgICAgc29ydElkID0gZGF0YXNbZF0udmFsdWUuaWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgYWRkSXRlbSA9IGZhbHNlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihhZGRJdGVtKSB7XHJcbiAgICAgICAgcmV0VmFsLnB1c2goaXRlbSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKHJldFZhbC5sZW5ndGggPj0gbWF4SXRlbXMpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldFZhbCA9IGZpbHRlckR1cGxpY2F0ZXMocmV0VmFsKTtcclxuXHJcbiAgICByZXRWYWwgPSByZXRWYWwuc29ydChmdW5jdGlvbihpdGVtMSwgaXRlbTIpIHtcclxuICAgICAgaWYoc29ydEZ1bmMpIHtcclxuICAgICAgICByZXR1cm4gc29ydEZ1bmMoc29ydElkLCBpdGVtMSwgaXRlbTIpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBpdGVtMS5uYW1lLmxvY2FsZUNvbXBhcmUoaXRlbTIubmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICByZXR1cm4gcmV0VmFsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZmlsdGVyRHVwbGljYXRlcyhpdGVtcykge1xyXG4gICAgdmFyIHJldFZhbCA9IFtdO1xyXG4gICAgZm9yKHZhciBpPTA7aTxpdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgZm9yKHZhciBqPTA7ajxpOysraikge1xyXG4gICAgICAgICAgICBpZihhcmVTYW1lSXRlbShpdGVtc1tpXSwgaXRlbXNbal0pKSB7XHJcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIWZvdW5kKSB7XHJcbiAgICAgICAgICAgIHJldFZhbC5wdXNoKGl0ZW1zW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJldFZhbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFyZVNhbWVJdGVtKGl0ZW0xLCBpdGVtMikge1xyXG4gICAgICBpZihpdGVtMS5uYW1lICE9IGl0ZW0yLm5hbWUgfHwgaXRlbTEuc3RhdHMubGVuZ3RoICE9IGl0ZW0yLnN0YXRzLmxlbmd0aCB8fCBpdGVtMS5yYW5rICE9IGl0ZW0yLnJhbmsgfHwgaXRlbTEubGV2ZWxMaW1pdCAhPSBpdGVtMS5sZXZlbExpbWl0KSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBfLmlzRXF1YWwoaXRlbTEuc3RhdHMsIGl0ZW0yLnN0YXRzKTtcclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgncXVpY2tBZGQnLCBxdWlja0FkZCk7XHJcbmZ1bmN0aW9uIHF1aWNrQWRkKGRudERhdGEsIHRyYW5zbGF0aW9ucywgaXRlbUNvbHVtbnNUb0xvYWQsIGl0ZW1DYXRlZ29yeSxpdGVtRmFjdG9yeSxqb2JzLGhDb2RlVmFsdWVzLCBxdWlja0FkZFN0ZXBzLCBxdWlja0FkZEhlbHBlcikge1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2F0ZWdvcnlTdGVwczoge1xyXG4gICAgICB0aXRsZXM6IFsndGl0bGVTdGVwJ10sXHJcbiAgICAgIHdlYXBvbnM6IFsnZXhjaGFuZ2VTdGVwJywnc2l4dHlMZXZlbFN0ZXAnLCdlcXVpcFJhbmtTdGVwJywnaXRlbU5hbWVTdGVwJywnaGFzU3RhdFN0ZXAnLCdpdGVtU3RlcCcsJ2VuaGFuY2VTdGVwJ10sXHJcbiAgICAgIGFybW91cjogWydleGNoYW5nZVN0ZXAnLCdzaXh0eUxldmVsU3RlcCcsJ2VxdWlwUmFua1N0ZXAnLCdpdGVtTmFtZVN0ZXAnLCdoYXNTdGF0U3RlcCcsJ2l0ZW1TdGVwJywnZW5oYW5jZVN0ZXAnXSxcclxuICAgICAgYWNjZXNzb3JpZXM6IFsnYWNjRXhjaGFuZ2VTdGVwJywnYWxsTGV2ZWxTdGVwJywnZXF1aXBSYW5rU3RlcCcsJ2l0ZW1OYW1lU3RlcCcsJ2hhc1N0YXRTdGVwJywnaXRlbVN0ZXAnXSxcclxuICAgICAgdGVjaHM6IFsnZXhjaGFuZ2VTdGVwJywnYWxsTGV2ZWxTdGVwJywndGVjaFJhbmtTdGVwJywndGVjaFNraWxsU3RlcCcsJ2l0ZW1OYW1lU3RlcCcsJ2hhc1N0YXRTdGVwJywnaXRlbVN0ZXAnXSxcclxuICAgICAgJ29mZmVuc2l2ZSBnZW1zJzogWydzaXh0eUxldmVsU3RlcCcsJ2dlbVJhbmtTdGVwJywnaXRlbU5hbWVTdGVwJywnbnVtU3RhdHNTdGVwJywnaGFzU3RhdFN0ZXAnLCdpdGVtU3RlcCcsJ2VuaGFuY2VTdGVwJ10sXHJcbiAgICAgICdpbmNyZWFzaW5nIGdlbXMnOiBbJ3NpeHR5TGV2ZWxTdGVwJywnZ2VtUmFua1N0ZXAnLCdpdGVtTmFtZVN0ZXAnLCdudW1TdGF0c1N0ZXAnLCdoYXNTdGF0U3RlcCcsJ2l0ZW1TdGVwJywnZW5oYW5jZVN0ZXAnXSxcclxuICAgICAgJ2VuaGFuY2VtZW50IHBsYXRlcyc6IFsnYWxsTGV2ZWxTdGVwJywncGxhdGVSYW5rU3RlcCcsJ2Rpc3RpbmN0SXRlbU5hbWVTdGVwJywnbnVtU3RhdHNTdGVwJywnaGFzU3RhdFN0ZXAnLCdpdGVtU3RlcCddLFxyXG4gICAgICAnZXhwZWRpdGlvbiBwbGF0ZXMnOiBbJ3NpeHR5TGV2ZWxTdGVwJywnZGlzdGluY3RJdGVtTmFtZVN0ZXAnLCdudW1TdGF0c1N0ZXAnLCdoaWdoU3RhdFN0ZXAnLCdoYXNTdGF0U3RlcCcsJ2l0ZW1TdGVwJ10sXHJcbiAgICAgIHRhbGlzbWFuOiBbJ3NpeHR5TGV2ZWxTdGVwJywndGFsaXNtYW5SYW5rU3RlcCcsJ2Rpc3RpbmN0SXRlbU5hbWVTdGVwJywnbnVtU3RhdHNTdGVwJywnaGFzU3RhdFN0ZXAnLCdpdGVtU3RlcCcsJ2VuaGFuY2VUYWxpc21hblN0ZXAnXSxcclxuICAgICAgY29zdHVtZTogWydleGNoYW5nZVN0ZXAnLCdjYXNoUmFua1N0ZXAnLCdpdGVtTmFtZVN0ZXAnLCdpdGVtU3RlcCddLFxyXG4gICAgICBpbXByaW50OiBbJ2ltcHJpbnRSYW5rU3RlcCcsJ2l0ZW1OYW1lU3RlcCcsJ2hpZ2hTdGF0U3RlcCcsJ2l0ZW1TdGVwJ10sXHJcbiAgICAgIGNhc2g6IFsnYWNjRXhjaGFuZ2VTdGVwJywnY2FzaFJhbmtTdGVwJywnaXRlbU5hbWVTdGVwJywnaXRlbVN0ZXAnXSxcclxuICAgICAgY3VzdG9tOiBbJ2N1c3RvbVN0ZXAnXSxcclxuICAgIH0sXHJcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgaWYoY2F0ZWdvcnkubmFtZSBpbiB0aGlzLmNhdGVnb3J5U3RlcHMpIHtcclxuICAgICAgICB2YXIgc3RlcE5hbWUgPSB0aGlzLmdldFN0ZXBOYW1lKGNhdGVnb3J5LCBkYXRhcy5sZW5ndGgpO1xyXG4gICAgICAgIHZhciBzdGVwRGVmID0gcXVpY2tBZGRTdGVwc1tzdGVwTmFtZV07XHJcbiAgICAgICAgdmFyIGFsbE9wdGlvbnMgPSBzdGVwRGVmLmdldE9wdGlvbnMoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgaWYoc3RlcERlZi5pc0l0ZW1TdGVwKSB7XHJcbiAgICAgICAgICByZXR1cm4gYWxsT3B0aW9ucztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBpZihzdGVwRGVmLm1pbk9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICB2YXIgdW5maWx0ZXJlZEl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcywgNTApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHZhciBuZXdPcHRpb25zID0gXy5maWx0ZXIoYWxsT3B0aW9ucywgZnVuY3Rpb24ob3B0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wRGF0YXMgPSBkYXRhcy5jb25jYXQoW1xyXG4gICAgICAgICAgICAgIHQuY3JlYXRlRGF0YShvcHRpb24sIGNhdGVnb3J5LCBkYXRhcy5sZW5ndGgpXHJcbiAgICAgICAgICAgIF0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGl0ZW1zO1xyXG4gICAgICAgICAgICBpZihzdGVwRGVmLm1pbk9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICBpZihhbGxPcHRpb25zWzBdID09IG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpdGVtcyA9IHF1aWNrQWRkSGVscGVyLmZpbmREYXRhKGNhdGVnb3J5LCBidWlsZCwgdGVtcERhdGFzLCA1MCk7XHJcbiAgICAgICAgICAgICAgaWYoaXRlbXMubGVuZ3RoID4gMCAmJiBpdGVtcy5sZW5ndGggPCA1MCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aCA8IHVuZmlsdGVyZWRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCB0ZW1wRGF0YXMsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZihzdGVwRGVmLm1pbk9wdGlvbnMgJiYgbmV3T3B0aW9ucy5sZW5ndGggPCBzdGVwRGVmLm1pbk9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFthbGxPcHRpb25zWzBdXTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gbmV3T3B0aW9ucztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgaGFzT3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICBpZihjYXRlZ29yeS5uYW1lIGluIHRoaXMuY2F0ZWdvcnlTdGVwcykge1xyXG4gICAgICAgIHZhciBzdGVwTmFtZSA9IHRoaXMuZ2V0U3RlcE5hbWUoY2F0ZWdvcnksIGRhdGFzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYocXVpY2tBZGRTdGVwc1tzdGVwTmFtZV0uaGFzT3B0aW9ucykge1xyXG4gICAgICAgICAgcmV0dXJuIHF1aWNrQWRkU3RlcHNbc3RlcE5hbWVdLmhhc09wdGlvbnMoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHF1aWNrQWRkU3RlcHNbc3RlcE5hbWVdLmdldE9wdGlvbnMoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykubGVuZ3RoID4gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgaXNWYWxpZFN0ZXBOdW1iZXI6IGZ1bmN0aW9uKGNhdGVnb3J5LCBzdGVwTnVtYmVyKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNhdGVnb3J5U3RlcHNbY2F0ZWdvcnkubmFtZV0ubGVuZ3RoID4gc3RlcE51bWJlcjtcclxuICAgIH0sXHJcbiAgICBjcmVhdGVEYXRhOiBmdW5jdGlvbih2YWx1ZSwgY2F0ZWdvcnksIHN0ZXBOdW1iZXIpIHtcclxuICAgICAgdmFyIHN0ZXBOYW1lID0gdGhpcy5nZXRTdGVwTmFtZShjYXRlZ29yeSwgc3RlcE51bWJlcik7XHJcbiAgICAgIHZhciBkZWYgPSBxdWlja0FkZFN0ZXBzW3N0ZXBOYW1lXTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RlcDogc3RlcE5hbWUsXHJcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgIGRlZjogZGVmLFxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuICAgIGdldEl0ZW06IHF1aWNrQWRkSGVscGVyLmdldEl0ZW0sXHJcbiAgICBnZXRTdGVwTmFtZTogZnVuY3Rpb24oY2F0ZWdvcnksIHN0ZXBOdW1iZXIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY2F0ZWdvcnlTdGVwc1tjYXRlZ29yeS5uYW1lXVtzdGVwTnVtYmVyXTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ3F1aWNrQWRkU3RlcHMnLCBxdWlja0FkZFN0ZXBzKTtcclxuZnVuY3Rpb24gcXVpY2tBZGRTdGVwcyhkbnREYXRhLCB0cmFuc2xhdGlvbnMsIGl0ZW1Db2x1bW5zVG9Mb2FkLCBpdGVtQ2F0ZWdvcnksaXRlbUZhY3Rvcnksam9icyxoQ29kZVZhbHVlcywgcXVpY2tBZGRIZWxwZXIpIHtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgICAgZXhjaGFuZ2VTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3R5cGUnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGV4Y2hhbmdlcyA9IFtdO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBmb3IodmFyIGU9MDtlPGNhdGVnb3J5LmxpbWl0RXhjaGFuZ2UubGVuZ3RoOysrZSkge1xyXG4gICAgICAgICAgICB2YXIgZXhJZCA9IGNhdGVnb3J5LmxpbWl0RXhjaGFuZ2VbZV07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbnVtRXhjaGFuZ2UgPSAwO1xyXG4gICAgICAgICAgICBpZihidWlsZC5pdGVtcykge1xyXG4gICAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8YnVpbGQuaXRlbXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgICAgICAgaWYoYnVpbGQuaXRlbXNbaV0uZXhjaGFuZ2VUeXBlID09IGV4SWQpIHtcclxuICAgICAgICAgICAgICAgICAgbnVtRXhjaGFuZ2UrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKG51bUV4Y2hhbmdlID49IGNhdGVnb3J5Lm1heEV4Y2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBleGNoYW5nZSA9IGRudERhdGEuZmluZCgnZXhjaGFuZ2UubHpqc29uJywnRXhjaGFuZ2VUeXBlJyxleElkKTtcclxuICAgICAgICAgICAgdmFyIGV4TmFtZSA9ICcnO1xyXG4gICAgICAgICAgICBpZihleGNoYW5nZSAmJiBleGNoYW5nZS5sZW5ndGggPiAwICYmIGV4Y2hhbmdlWzBdLk5hbWVJRCA+IDApIHtcclxuICAgICAgICAgICAgICBleE5hbWUgPSB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGV4Y2hhbmdlWzBdLk5hbWVJRCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBleGNoYW5nZXMucHVzaCh7aWQ6IGV4SWQsIG5hbWU6IGV4TmFtZS50b0xvd2VyQ2FzZSgpfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBleGNoYW5nZXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmV4Y2hhbmdlVHlwZSA9PSBpZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGFjY0V4Y2hhbmdlU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICd0eXBlJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZhciBleGNoYW5nZXMgPSBbXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBlPTA7ZTxjYXRlZ29yeS5saW1pdEV4Y2hhbmdlLmxlbmd0aDsrK2UpIHtcclxuICAgICAgICAgICAgdmFyIGV4SWQgPSBjYXRlZ29yeS5saW1pdEV4Y2hhbmdlW2VdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIG51bUV4Y2hhbmdlID0gMDtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxidWlsZC5pdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgICAgaWYoYnVpbGQuaXRlbXNbaV0gJiYgYnVpbGQuaXRlbXNbaV0uZXhjaGFuZ2VUeXBlID09IGV4SWQpIHtcclxuICAgICAgICAgICAgICAgIG51bUV4Y2hhbmdlKys7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihleElkID09IDEwIHx8IGV4SWQgPT0gMjUpIHtcclxuICAgICAgICAgICAgICBpZihudW1FeGNoYW5nZSA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgaWYobnVtRXhjaGFuZ2UgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgZXhjaGFuZ2UgPSBkbnREYXRhLmZpbmQoJ2V4Y2hhbmdlLmx6anNvbicsJ0V4Y2hhbmdlVHlwZScsZXhJZCk7XHJcbiAgICAgICAgICAgIGlmKGV4Y2hhbmdlICYmIGV4Y2hhbmdlLmxlbmd0aCA+IDAgJiYgZXhjaGFuZ2VbMF0uTmFtZUlEID4gMCkge1xyXG4gICAgICAgICAgICAgIHZhciBleE5hbWUgPSB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGV4Y2hhbmdlWzBdLk5hbWVJRCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBleGNoYW5nZXMucHVzaCh7aWQ6IGV4SWQsIG5hbWU6IGV4TmFtZS50b0xvd2VyQ2FzZSgpfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIGV4Y2hhbmdlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0uZXhjaGFuZ2VUeXBlID09IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgc2l4dHlMZXZlbFN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnbGV2ZWwnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHsgaWQ6IDkzLCBuYW1lOiAnbGV2ZWwgOTMnIH0sXHJcbiAgICAgICAgICB7IGlkOiA5MCwgbmFtZTogJ2xldmVsIDkwJyB9LFxyXG4gICAgICAgICAgeyBpZDogODAsIG5hbWU6ICdsZXZlbCA4MCcgfSxcclxuICAgICAgICAgIHsgaWQ6IDcwLCBuYW1lOiAnbGV2ZWwgNzAnIH0sIFxyXG4gICAgICAgICAgeyBpZDogNjAsIG5hbWU6ICdsZXZlbCA2MCcgfSwgXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5sZXZlbExpbWl0ID09IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgYWxsTGV2ZWxTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ2xldmVsJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7IGlkOiA5MywgbmFtZTogJ2xldmVsIDkzJyB9LFxyXG4gICAgICAgICAgeyBpZDogOTAsIG5hbWU6ICdsZXZlbCA5MCcgfSxcclxuICAgICAgICAgIHsgaWQ6IDgwLCBuYW1lOiAnbGV2ZWwgODAnIH0sXHJcbiAgICAgICAgICB7IGlkOiA3MCwgbmFtZTogJ2xldmVsIDcwJyB9LCBcclxuICAgICAgICAgIHsgaWQ6IDYwLCBuYW1lOiAnbGV2ZWwgNjAnIH0sIFxyXG4gICAgICAgICAgeyBpZDogNTAsIG5hbWU6ICdsZXZlbCA1MCcgfSwgXHJcbiAgICAgICAgICB7IGlkOiA0MCwgbmFtZTogJ2xldmVsIDQwJyB9LCBcclxuICAgICAgICAgIHsgaWQ6IDMyLCBuYW1lOiAnbGV2ZWwgMzInIH0sIFxyXG4gICAgICAgICAgeyBpZDogMjQsIG5hbWU6ICdsZXZlbCAyNCcgfSwgXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5sZXZlbExpbWl0ID09IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgY2FzaFJhbmtTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3JhbmsnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHsgaWQ6IDQsIG5hbWU6ICd1bmlxdWUnIH0sXHJcbiAgICAgICAgICB7IGlkOiAzLCBuYW1lOiAnZXBpYycgfSxcclxuICAgICAgICAgIHsgaWQ6IDIsIG5hbWU6ICdyYXJlJyB9LFxyXG4gICAgICAgICAgeyBpZDogMSwgbmFtZTogJ21hZ2ljJyB9LFxyXG4gICAgICAgICAgeyBpZDogMCwgbmFtZTogJ25vcm1hbCcgfSxcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLnJhbmsuaWQgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBpbXByaW50UmFua1N0ZXA6IHtcclxuICAgICAgICBuYW1lOiAncmFuaycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogNCwgbmFtZTogJ3VuaXF1ZScgfSxcclxuICAgICAgICAgIHsgaWQ6IDMsIG5hbWU6ICdlcGljJyB9LFxyXG4gICAgICAgICAgeyBpZDogMiwgbmFtZTogJ3JhcmUnIH0sXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5yYW5rLmlkID09IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdGVjaFJhbmtTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3JhbmsnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHsgaWQ6IDQsIG5hbWU6ICd1bmlxdWUnIH0sXHJcbiAgICAgICAgICB7IGlkOiAzLCBuYW1lOiAnZXBpYycgfSxcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLnJhbmsuaWQgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0YWxpc21hblJhbmtTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3JhbmsnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHsgaWQ6IDMsIG5hbWU6ICdlcGljJyB9LFxyXG4gICAgICAgICAgeyBpZDogMiwgbmFtZTogJ3JhcmUnIH0sXHJcbiAgICAgICAgICB7IGlkOiA5OTksIG5hbWU6ICdxdWFsaXR5IGhpZ2ggZ3JhZGUnIH0sXHJcbiAgICAgICAgICB7IGlkOiAxLCBuYW1lOiAnbWFnaWMnIH0sXHJcbiAgICAgICAgICB7IGlkOiAwLCBuYW1lOiAnbm9ybWFsJyB9LFxyXG4gICAgICAgICAgXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgaXRlbUZhY3RvcnkuaW5pdEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICBpZihpdGVtLm5hbWUpIHtcclxuICAgICAgICAgICAgLy8gdG9kbzogY2hhbmdlIHRoaXMgdG8gdXNlIHRoZSBuYW1lIGlkXHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IE1hdGgubWF4KFxyXG4gICAgICAgICAgICAgIGl0ZW0ubmFtZS5pbmRleE9mKCdRdWFsaXR5JyksXHJcbiAgICAgICAgICAgICAgaXRlbS5uYW1lLmluZGV4T2YoJ0hpZ2ggR3JhZGUnKSk7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGlkID09IDk5OSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gaXRlbS5yYW5rLmlkID09IGlkICYmIGluZGV4ICE9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGdlbVJhbmtTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3JhbmsnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHsgaWQ6IDUsIG5hbWU6ICdsZWdlbmRhcnknIH0sXHJcbiAgICAgICAgICB7IGlkOiA5OTksIG5hbWU6ICdxdWFsaXR5IGhpZ2ggZ3JhZGUgZXBpYycgfSxcclxuICAgICAgICAgIHsgaWQ6IDMsIG5hbWU6ICdlcGljJyB9LFxyXG4gICAgICAgICAgXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgaXRlbUZhY3RvcnkuaW5pdEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgICBpZihpdGVtLm5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICAgICAgaXRlbS5uYW1lLmluZGV4T2YoJ1F1YWxpdHknKSxcclxuICAgICAgICAgICAgICBpdGVtLm5hbWUuaW5kZXhPZignSGlnaCBHcmFkZScpKTtcclxuICAgICAgICAgICAgaWYoaWQgPT0gOTk5KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucmFuay5pZCA9PSAzICYmIGluZGV4ID49IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucmFuay5pZCA9PSBpZCAmJiBpbmRleCA8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHBsYXRlUmFua1N0ZXA6IHtcclxuICAgICAgICBuYW1lOiAncmFuaycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogMywgbmFtZTogJ2VwaWMnIH0sXHJcbiAgICAgICAgICB7IGlkOiAyLCBuYW1lOiAncmFyZScgfSxcclxuICAgICAgICAgIHsgaWQ6IDEsIG5hbWU6ICdub3JtYWwnIH0sXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5yYW5rLmlkID09IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZXF1aXBSYW5rU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdyYW5rJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7IGlkOiA1LCBuYW1lOiAnbGVnZW5kYXJ5JyB9LFxyXG4gICAgICAgICAgeyBpZDogNCwgbmFtZTogJ3VuaXF1ZScgfSxcclxuICAgICAgICAgIHsgaWQ6IDMsIG5hbWU6ICdlcGljJyB9LFxyXG4gICAgICAgICAgXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0ucmFuay5pZCA9PSBpZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGVuaGFuY2VUYWxpc21hblN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnc2xvdCcsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogMTAwLCBuYW1lOiAnKzEwMCUgc2xvdCcgfSxcclxuICAgICAgICAgIHsgaWQ6IDc1LCBuYW1lOiAnKzc1JSBzbG90JyB9LFxyXG4gICAgICAgICAgeyBpZDogMjUsIG5hbWU6ICcrMjUlIHNsb3QnIH0sXHJcbiAgICAgICAgICB7IGlkOiAwLCBuYW1lOiAnKzAlIHNsb3QnIH0sXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWx0ZXJJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgaXRlbS5lbmNoYW50bWVudE51bSA9IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgdGl0bGVTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3NlbGVjdCcsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgdmFyIGFsbFRpdGxlcyA9IHF1aWNrQWRkSGVscGVyLmZpbmREYXRhKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMsIDk5OTkpO1xyXG4gICAgICAgICAgdmFyIHVzZWZ1bFRpdGxlcyA9IFtdO1xyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTxhbGxUaXRsZXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgICBzd2l0Y2goYWxsVGl0bGVzW2ldLmlkKSB7XHJcbiAgICAgICAgICAgICAgY2FzZSAxOTc1OiAvLyBNYW50aWNvcmUgRXhwZXJ0XHJcbiAgICAgICAgICAgICAgY2FzZSAxOTczOiAvLyBSZXR1cm5lZFxyXG4gICAgICAgICAgICAgIGNhc2UgMTAwODogLy8gRGFyayBLbmlnaHRcclxuICAgICAgICAgICAgICBjYXNlIDIzMDogLy8gTWlyYWN1bG91c1xyXG4gICAgICAgICAgICAgIGNhc2UgMjc5OiAvLyBQcm92b2tpbmdcclxuICAgICAgICAgICAgICBjYXNlIDIwMzI6IC8vIFNoYXJpbmcgR29kZGVzcydzIEdyaWVmXHJcbiAgICAgICAgICAgICAgY2FzZSAyMDMzOiAvLyBHcmllZi1zdHJpY2tlblxyXG4gICAgICAgICAgICAgIGNhc2UgMTMxMzogLy8gSmFrYXJkJ3MgRGVtaXNlXHJcbiAgICAgICAgICAgICAgY2FzZSAyMTg4OiAvLyBUZWFyeSBleWVkXHJcbiAgICAgICAgICAgICAgLy8gY2FzZSAxMjgwOiAvLyBEcmFnb24gVGFtZXJcclxuICAgICAgICAgICAgICAvLyBjYXNlIDMzOTogLy8gQ293IFdyYW5nbGVyXHJcbiAgICAgICAgICAgICAgICB1c2VmdWxUaXRsZXMucHVzaChhbGxUaXRsZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIHVzZWZ1bFRpdGxlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhc09wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJdGVtU3RlcDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgZW5oYW5jZVN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnZW5oYW5jZScsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgaXRlbSA9IHF1aWNrQWRkSGVscGVyLmdldEl0ZW0oZGF0YXMpO1xyXG4gICAgICAgICAgaWYoaXRlbSAmJiBpdGVtLmVuY2hhbnRtZW50SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgeyBpZDogMTUsIG5hbWU6ICdlbmhhbmNlIHRvICsxNScgfSxcclxuICAgICAgICAgICAgeyBpZDogMTQsIG5hbWU6ICdlbmhhbmNlIHRvICsxNCcgfSxcclxuICAgICAgICAgICAgeyBpZDogMTMsIG5hbWU6ICdlbmhhbmNlIHRvICsxMycgfSxcclxuICAgICAgICAgICAgeyBpZDogMTIsIG5hbWU6ICdlbmhhbmNlIHRvICsxMicgfSxcclxuICAgICAgICAgICAgeyBpZDogMTEsIG5hbWU6ICdlbmhhbmNlIHRvICsxMScgfSxcclxuICAgICAgICAgICAgeyBpZDogMTAsIG5hbWU6ICdlbmhhbmNlIHRvICsxMCcgfSxcclxuICAgICAgICAgICAgeyBpZDogOSwgbmFtZTogJ2VuaGFuY2UgdG8gKzknIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6IDgsIG5hbWU6ICdlbmhhbmNlIHRvICs4JyB9LFxyXG4gICAgICAgICAgICB7IGlkOiA3LCBuYW1lOiAnZW5oYW5jZSB0byArNycgfSxcclxuICAgICAgICAgICAgeyBpZDogNiwgbmFtZTogJ2VuaGFuY2UgdG8gKzYnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6IDUsIG5hbWU6ICdlbmhhbmNlIHRvICs1JyB9LFxyXG4gICAgICAgICAgICB7IGlkOiA0LCBuYW1lOiAnZW5oYW5jZSB0byArNCcgfSxcclxuICAgICAgICAgICAgeyBpZDogMywgbmFtZTogJ2VuaGFuY2UgdG8gKzMnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6IDIsIG5hbWU6ICdlbmhhbmNlIHRvICsyJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAxLCBuYW1lOiAnZW5oYW5jZSB0byArMScgfSxcclxuICAgICAgICAgICAgeyBpZDogMCwgbmFtZTogJ25vdCBlbmhhbmNlZCcgfSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gW3sgaWQ6IDAsIG5hbWU6ICdub3QgZW5oYW5jZWQnIH1dO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWx0ZXJJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgaXRlbS5lbmNoYW50bWVudE51bSA9IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgaXRlbVN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnc2VsZWN0JyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICByZXR1cm4gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiB0cnVlLFxyXG4gICAgICAgIGhpZGVOYW1lOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBuYW1lZEl0ZW1TdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3NlbGVjdCcsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgcmV0dXJuIHF1aWNrQWRkSGVscGVyLmZpbmREYXRhKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJdGVtU3RlcDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgdGVjaFNraWxsU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdza2lsbCcsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgdmFyIGl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcywgMSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIGV2ZW50dWFsbHkgc2hvdyBhbGwgdGhlIHNraWxsc1xyXG4gICAgICAgICAgLy8gYnV0IGZvciBub3dcclxuICAgICAgICAgIGlmKGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt7aWQ6IGl0ZW1zWzBdLnNraWxsSWQsIG5hbWU6IGl0ZW1zWzBdLnNraWxsSWR9XTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLnNraWxsSWQgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBpdGVtTmFtZVN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnaXRlbScsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgdmFyIGl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgICB2YXIgaXRlbU5hbWVzID0ge307XHJcbiAgICAgICAgICB2YXIgaXRlbU5hbWVzTGlzdCA9IFtdO1xyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgaWYoIShuYW1lIGluIGl0ZW1OYW1lcykpIHtcclxuICAgICAgICAgICAgICBpdGVtTmFtZXNbbmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgIGl0ZW1OYW1lc0xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogbmFtZSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIGl0ZW1OYW1lc0xpc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT0gaWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBkaXN0aW5jdEl0ZW1OYW1lU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdpdGVtJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICB2YXIgaXRlbXMgPSBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKTtcclxuICAgICAgICAgIHZhciBpdGVtTmFtZXMgPSB7fTtcclxuICAgICAgICAgIHZhciBpdGVtTmFtZXNMaXN0ID0gW107XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGZvcih2YXIgaT0wO2k8YnVpbGQuaXRlbXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGJ1aWxkLml0ZW1zW2ldO1xyXG4gICAgICAgICAgICBpdGVtTmFtZXNbaXRlbS5uYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGZvcih2YXIgaT0wO2k8aXRlbXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGl0ZW1zW2ldLm5hbWU7XHJcbiAgICAgICAgICAgIGlmKCEobmFtZSBpbiBpdGVtTmFtZXMpKSB7XHJcbiAgICAgICAgICAgICAgaXRlbU5hbWVzW25hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBpdGVtTmFtZXNMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBpdGVtTmFtZXNMaXN0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09IGlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJdGVtU3RlcDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgbnVtU3RhdHNTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ051bSBTdGF0cycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgdmFyIGl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgICB2YXIgbnVtU3RhdHMgPSB7fTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgIHZhciBsZW4gPSAwO1xyXG4gICAgICAgICAgICBmb3IodmFyIGo9MDtqPGl0ZW1zW2ldLnN0YXRzLmxlbmd0aDsrK2opIHtcclxuICAgICAgICAgICAgICB2YXIgc3RhdCA9IGhDb2RlVmFsdWVzLnN0YXRzW2l0ZW1zW2ldLnN0YXRzW2pdLmlkXTtcclxuICAgICAgICAgICAgICBpZihzdGF0ICYmICFzdGF0LmhpZGUpIHtcclxuICAgICAgICAgICAgICAgIGxlbisrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBudW1TdGF0c1tsZW4gKyAneCBzdGF0cyddID0gbGVuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgcmV0VmFsID0gW107XHJcbiAgICAgICAgICBmb3IodmFyIHZhbCBpbiBudW1TdGF0cykge1xyXG4gICAgICAgICAgICByZXRWYWwucHVzaCh7XHJcbiAgICAgICAgICAgICAgaWQ6IG51bVN0YXRzW3ZhbF0sXHJcbiAgICAgICAgICAgICAgbmFtZTogdmFsLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0VmFsID0gcmV0VmFsLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHZhciBsZW4gPSAwO1xyXG4gICAgICAgICAgZm9yKHZhciBqPTA7ajxpdGVtLnN0YXRzLmxlbmd0aDsrK2opIHtcclxuICAgICAgICAgICAgdmFyIHN0YXQgPSBoQ29kZVZhbHVlcy5zdGF0c1tpdGVtLnN0YXRzW2pdLmlkXTtcclxuICAgICAgICAgICAgaWYoc3RhdCAmJiAhc3RhdC5oaWRlKSB7XHJcbiAgICAgICAgICAgICAgbGVuKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gbGVuID09IGlkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJdGVtU3RlcDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgICAgaGlnaFN0YXRTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ0hpZ2ggU3RhdCcsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgdmFyIGl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGFsbEl0ZW0gPSB7IGlkOiAtMSwgbmFtZTogJ2FsbCcgfTtcclxuICAgICAgICAgIHZhciByZXRWYWwgPSBbYWxsSXRlbV07XHJcbiAgICAgICAgICBpZihpdGVtcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHZhciBhbGxTdGF0cyA9IHt9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgICAgZm9yKHZhciBqPTA7ajxpdGVtc1tpXS5zdGF0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdCA9IGhDb2RlVmFsdWVzLnN0YXRzW2l0ZW1zW2ldLnN0YXRzW2pdLmlkXTtcclxuICAgICAgICAgICAgICAgIGlmKHN0YXQgJiYgc3RhdC5xdWlja0hpZ2ggJiYgISgnaGlnaCAnICsgc3RhdC5uYW1lIGluIGFsbFN0YXRzKSkge1xyXG4gICAgICAgICAgICAgICAgICBhbGxTdGF0c1snaGlnaCAnICsgc3RhdC5uYW1lXSA9IHN0YXQuaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IodmFyIHZhbCBpbiBhbGxTdGF0cykge1xyXG4gICAgICAgICAgICAgIHJldFZhbC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBhbGxTdGF0c1t2YWxdLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogdmFsLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihyZXRWYWwubGVuZ3RoIDw9IDIpIHtcclxuICAgICAgICAgICAgICByZXRWYWwgPSBbYWxsSXRlbV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0VmFsID0gcmV0VmFsLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICBpZihpZCA9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGxhcmdlc3RWYWwgPSAwO1xyXG4gICAgICAgICAgdmFyIHNlbGVjdGVkVmFsID0gMDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBqPTA7ajxpdGVtLnN0YXRzLmxlbmd0aDsrK2opIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IGl0ZW0uc3RhdHNbal07XHJcbiAgICAgICAgICAgIHZhciBzdGF0ID0gaENvZGVWYWx1ZXMuc3RhdHNbdmFsLmlkXTtcclxuICAgICAgICAgICAgaWYoc3RhdC5xdWlja0hpZ2gpIHtcclxuICAgICAgICAgICAgICBpZih2YWwuaWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFsICs9IHZhbC5tYXg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2UgaWYodmFsLm1heCA+IGxhcmdlc3RWYWwpIHtcclxuICAgICAgICAgICAgICAgIGxhcmdlc3RWYWwgPSB2YWwubWF4O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRWYWwgPiBsYXJnZXN0VmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc29ydEZ1bmM6IGZ1bmN0aW9uKGlkLCBpdGVtMSwgaXRlbTIpIHtcclxuICAgICAgICAgIHZhciB2YWwxID0gMDtcclxuICAgICAgICAgIHZhciB2YWwyID0gMDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtMS5zdGF0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgIGlmKGl0ZW0xLnN0YXRzW2ldLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgdmFsMSA9IGl0ZW0xLnN0YXRzW2ldLm1heDtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yKHZhciBqPTA7ajxpdGVtMi5zdGF0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgICAgIGlmKGl0ZW0yLnN0YXRzW2pdLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgdmFsMiA9IGl0ZW0yLnN0YXRzW2pdLm1heDtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHZhbDIgLSB2YWwxO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJdGVtU3RlcDogZmFsc2UsXHJcbiAgICAgICAgbWluT3B0aW9uczogMyxcclxuICAgICAgfSxcclxuICAgICAgaGFzU3RhdFN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnSGFzIFN0YXQnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIHZhciBpdGVtcyA9IHF1aWNrQWRkSGVscGVyLmZpbmREYXRhKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIHZhciBhbGxJdGVtID0geyBpZDogLTEsIG5hbWU6ICdhbGwnIH07XHJcbiAgICAgICAgICB2YXIgcmV0VmFsID0gW2FsbEl0ZW1dO1xyXG4gICAgICAgICAgaWYoaXRlbXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICB2YXIgYWxsU3RhdHMgPSB7fTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8aXRlbXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgICAgIGZvcih2YXIgaj0wO2o8aXRlbXNbaV0uc3RhdHMubGVuZ3RoOysraikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXQgPSBoQ29kZVZhbHVlcy5zdGF0c1tpdGVtc1tpXS5zdGF0c1tqXS5pZF07XHJcbiAgICAgICAgICAgICAgICBpZihzdGF0ICYmIHN0YXQuc2VhcmNoYWJsZSAmJiAhKCdoaWdoICcgKyBzdGF0Lm5hbWUgaW4gYWxsU3RhdHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGFsbFN0YXRzWydoYXMgJyArIHN0YXQubmFtZV0gPSBzdGF0LmlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yKHZhciB2YWwgaW4gYWxsU3RhdHMpIHtcclxuICAgICAgICAgICAgICByZXRWYWwucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogYWxsU3RhdHNbdmFsXSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IHZhbCxcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYocmV0VmFsLmxlbmd0aCA8PSAyKSB7XHJcbiAgICAgICAgICAgICAgcmV0VmFsID0gW2FsbEl0ZW1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldFZhbCA9IHJldFZhbC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuaWQgLSBiLmlkO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgaWYoaWQgPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGZvcih2YXIgaj0wO2o8aXRlbS5zdGF0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSBpdGVtLnN0YXRzW2pdO1xyXG4gICAgICAgICAgICB2YXIgc3RhdCA9IGhDb2RlVmFsdWVzLnN0YXRzW3ZhbC5pZF07XHJcbiAgICAgICAgICAgIGlmKHN0YXQuc2VhcmNoYWJsZSkge1xyXG4gICAgICAgICAgICAgIGlmKHZhbC5pZCA9PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNvcnRGdW5jOiBmdW5jdGlvbihpZCwgaXRlbTEsIGl0ZW0yKSB7XHJcbiAgICAgICAgICB2YXIgdmFsMSA9IDA7XHJcbiAgICAgICAgICB2YXIgdmFsMiA9IDA7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGZvcih2YXIgaT0wO2k8aXRlbTEuc3RhdHMubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgICBpZihpdGVtMS5zdGF0c1tpXS5pZCA9PSBpZCkge1xyXG4gICAgICAgICAgICAgIHZhbDEgPSBpdGVtMS5zdGF0c1tpXS5tYXg7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvcih2YXIgaj0wO2o8aXRlbTIuc3RhdHMubGVuZ3RoOysraikge1xyXG4gICAgICAgICAgICBpZihpdGVtMi5zdGF0c1tqXS5pZCA9PSBpZCkge1xyXG4gICAgICAgICAgICAgIHZhbDIgPSBpdGVtMi5zdGF0c1tqXS5tYXg7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB2YWwyIC0gdmFsMTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzSXRlbVN0ZXA6IGZhbHNlLFxyXG4gICAgICAgIG1pbk9wdGlvbnM6IDMsXHJcbiAgICAgIH0sXHJcbiAgICAgIGN1c3RvbVN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnbWlzYycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgcmV0dXJuIGhDb2RlVmFsdWVzLmN1c3RvbUl0ZW1zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJdGVtU3RlcDogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdyZWdpb24nLCBbJ3RyYW5zbGF0aW9ucycsJ2RudFJlc2V0JywnZG50RGF0YScsJyRyb3V0ZScscmVnaW9uXSk7XHJcbmZ1bmN0aW9uIHJlZ2lvbih0cmFuc2xhdGlvbnMsZG50UmVzZXQsZG50RGF0YSwkcm91dGUpIHtcclxuICBcclxuICB2YXIgYWx0ZXJuYXRpdmVGaWxlcyA9IHtyZWdpb246ICdBTFQnLCBuYW1lOiAnQWx0ZXJuYXRpdmUgdXNlciBzcGVjaWZpZWQgZmlsZXMnLCB1cmwgOiAnJ307XHJcbiAgdmFyIGhvc3RlZEZpbGVzID1bXHJcbiAgICAgIHtyZWdpb246ICdzZWEnLCBuYW1lOiAnc291dGggZWFzdCBhc2lhJywgdXJsIDogJ2h0dHBzOi8vc2VhZG5maWxlcy5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgICAge3JlZ2lvbjogJ25hJywgbmFtZTogJ25vcnRoIGFtZXJpY2EnLCB1cmwgOiAnaHR0cHM6Ly9kbm5hLmZpcmViYXNlYXBwLmNvbSd9LFxyXG4gICAgICB7cmVnaW9uOiAnZXUnLCBuYW1lOiAnZXVyb3BlJywgdXJsIDogJ2h0dHBzOi8vZXVmaWxlcy5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgICAge3JlZ2lvbjogJ2luYScsIG5hbWU6ICdpbmRvbmVzaWEgJywgdXJsIDogJ2h0dHBzOi8vaW5hZmlsZXMtZGE0OTEuZmlyZWJhc2VhcHAuY29tJ30sXHJcbiAgICAgIHtyZWdpb246ICd0aCcsIG5hbWU6ICd0aGFpbGFuZCcsIHVybCA6ICdodHRwczovL3RoZG5maWxlcy5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgICAge3JlZ2lvbjogJ3R3JywgbmFtZTogJ3RhaXdhbiDoh7rngaMnLCB1cmwgOiAnaHR0cHM6Ly90d2RuZmlsZXMuZmlyZWJhc2VhcHAuY29tJ30sXHJcbiAgICAgIC8vIHtyZWdpb246ICdqZG4nLCBuYW1lOiAnamFwYW4g5pel5pysJywgdXJsIDogJ2h0dHBzOi8vamRuZmlsZXMtNTlkNTcuZmlyZWJhc2VhcHAuY29tJ30sXHJcbiAgICAgIHtyZWdpb246ICdjZG4nLCBuYW1lOiAnY2hpbmEg5Lit5ZyLJywgdXJsIDogJ2h0dHBzOi8vY2RuZmlsZXMuZmlyZWJhc2VhcHAuY29tJ30sXHJcbiAgICAgIHtyZWdpb246ICdrZG4nLCBuYW1lOiAna29yZWEg64yA7ZWc66+86rWtJywgdXJsIDogJ2h0dHBzOi8va2RuZmlsZXMuZmlyZWJhc2VhcHAuY29tJ30sXHJcbiAgICBdO1xyXG4gIFxyXG4gIHZhciBkbnRMb2NhdGlvblJlZ2lvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYXN0RE5UUmVnaW9uJyk7XHJcbiAgdmFyIGRudExvY2F0aW9uID0gbnVsbDtcclxuICBpZihkbnRMb2NhdGlvblJlZ2lvbikge1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKGhvc3RlZEZpbGVzLCBmdW5jdGlvbihob3N0ZWRGaWxlLCBpbmRleCkge1xyXG4gICAgICBpZihob3N0ZWRGaWxlLnJlZ2lvbiA9PSBkbnRMb2NhdGlvblJlZ2lvbikge1xyXG4gICAgICAgIGRudExvY2F0aW9uID0gaG9zdGVkRmlsZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB2YXIgbGFzdFRGaWxlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1VJU3RyaW5nc19maWxlJyk7XHJcbiAgdmFyIHRsb2NhdGlvbiA9IG51bGw7XHJcbiAgaWYobGFzdFRGaWxlKSB7XHJcbiAgICBhbmd1bGFyLmZvckVhY2goaG9zdGVkRmlsZXMsIGZ1bmN0aW9uKGhvc3RlZEZpbGUsIGluZGV4KSB7XHJcbiAgICAgIGlmKGhvc3RlZEZpbGUucmVnaW9uICE9IGFsdGVybmF0aXZlRmlsZXMucmVnaW9uICYmIGxhc3RURmlsZS5pbmRleE9mKGhvc3RlZEZpbGUudXJsKSA+IC0xKSB7XHJcbiAgICAgICAgdGxvY2F0aW9uID0gaG9zdGVkRmlsZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGlmKHRsb2NhdGlvbiA9PSBudWxsKSB7XHJcbiAgICB0bG9jYXRpb24gPSBkbnRMb2NhdGlvbjtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBob3N0ZWRGaWxlcyA6IGhvc3RlZEZpbGVzLFxyXG4gICAgYWx0ZXJuYXRpdmVGaWxlcyA6IGFsdGVybmF0aXZlRmlsZXMsXHJcbiAgICBkbnRMb2NhdGlvbiA6IGRudExvY2F0aW9uLFxyXG4gICAgdGxvY2F0aW9uIDogdGxvY2F0aW9uLFxyXG4gICAgXHJcbiAgICBzZXRDdXN0b21Vcmw6IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyBjdXN0b20gbG9jYXRpb24nKTtcclxuICAgICAgdGhpcy5hbHRlcm5hdGl2ZUZpbGVzLnVybCA9IHVybDtcclxuXHJcbiAgICAgIHZhciBuZXdGaWxlcyA9IFtdO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaG9zdGVkRmlsZXMsIGZ1bmN0aW9uKGhvc3RlZEZpbGUsIGluZGV4KSB7XHJcbiAgICAgICAgaWYoaG9zdGVkRmlsZS5yZWdpb24gIT0gYWx0ZXJuYXRpdmVGaWxlcy5yZWdpb24pIHtcclxuICAgICAgICAgIG5ld0ZpbGVzLnB1c2goaG9zdGVkRmlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICBcclxuICAgICAgbmV3RmlsZXMucHVzaChhbHRlcm5hdGl2ZUZpbGVzKTtcclxuICAgICAgaG9zdGVkRmlsZXMgPSBuZXdGaWxlcztcclxuICAgICAgdGhpcy5ob3N0ZWRGaWxlcyA9IG5ld0ZpbGVzO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2V0TG9jYXRpb25CeU5hbWU6IGZ1bmN0aW9uKGxvY2F0aW9uTmFtZSkge1xyXG4gICAgICB2YXIgbmV3TG9jYXRpb24gPSBudWxsO1xyXG4gICAgICBcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGhvc3RlZEZpbGVzLCBmdW5jdGlvbihob3N0ZWRGaWxlLCBpbmRleCkge1xyXG4gICAgICAgIGlmKGhvc3RlZEZpbGUucmVnaW9uID09IGxvY2F0aW9uTmFtZSkge1xyXG4gICAgICAgICAgbmV3TG9jYXRpb24gPSBob3N0ZWRGaWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgIHRoaXMuc2V0TG9jYXRpb24obmV3TG9jYXRpb24pO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2V0TG9jYXRpb246IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgIGlmKGxvY2F0aW9uICYmIGxvY2F0aW9uICE9IHRoaXMuZG50TG9jYXRpb24pIHtcclxuICAgICAgICB0aGlzLmRudExvY2F0aW9uID0gbG9jYXRpb247XHJcbiAgICAgICAgZG50UmVzZXQoKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbGFzdEROVFJlZ2lvbicsIGxvY2F0aW9uLnJlZ2lvbik7XHJcbiAgICAgICAgZG50UmVzZXQoKTtcclxuICAgICAgICAkcm91dGUucmVsb2FkKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBvdmVycmlkZSA9IHRoaXMuZ2V0T3ZlcnJpZGUoKTtcclxuICAgICAgaWYodGhpcy50bG9jYXRpb24gPT0gbnVsbCB8fCAhb3ZlcnJpZGUpIHtcclxuICAgICAgICB0aGlzLnNldFRMb2NhdGlvbihsb2NhdGlvbik7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICBcclxuICAgICAgLy8gJHJvdXRlLnJlbG9hZCgpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2V0VExvY2F0aW9uOiBmdW5jdGlvbihsb2NhdGlvbikge1xyXG4gICAgICBcclxuICAgICAgaWYobG9jYXRpb24gIT0gdGhpcy50bG9jYXRpb24pIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnRsb2NhdGlvbiA9IGxvY2F0aW9uO1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ1VJU3RyaW5ncycpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdVSVN0cmluZ3NfZmlsZScpO1xyXG4gICAgICAgIGRudFJlc2V0KCk7XHJcbiAgICAgICAgdHJhbnNsYXRpb25zLnJlc2V0KCk7XHJcbiAgICAgICAgaWYobG9jYXRpb24pIHtcclxuICAgICAgICAgIHZhciBvdmVycmlkZSA9IHRoaXMuZ2V0T3ZlcnJpZGUoKTtcclxuICAgICAgICAgIHRyYW5zbGF0aW9ucy5zbWFsbCA9ICFvdmVycmlkZTtcclxuICAgICAgICAgIHRyYW5zbGF0aW9ucy5sb2NhdGlvbiA9IHRoaXMudGxvY2F0aW9uLnVybDtcclxuICAgICAgICAgIHRyYW5zbGF0aW9ucy5pbml0KGZ1bmN0aW9uKCkge30sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkcm91dGUucmVsb2FkKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldE92ZXJyaWRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RPdmVycmlkZScpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRPdmVycmlkZTogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgaWYoIXZhbHVlKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3RPdmVycmlkZScpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0T3ZlcnJpZGUnLCAnMScpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2V0VExvY2F0aW9uKHRoaXMuZG50TG9jYXRpb24pO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmKHRoaXMuZ2V0T3ZlcnJpZGUoKSkge1xyXG4gICAgICAgIHRyYW5zbGF0aW9ucy5zbWFsbCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMudExvY2F0aW9uID0gdGhpcy5kbnRMb2NhdGlvbjtcclxuICAgICAgICB0cmFuc2xhdGlvbnMuc21hbGwgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZih0aGlzLnRsb2NhdGlvbikge1xyXG4gICAgICAgIHRyYW5zbGF0aW9ucy5sb2NhdGlvbiA9IHRoaXMudGxvY2F0aW9uLnVybDtcclxuICAgICAgfVxyXG4gICAgICBkbnREYXRhLnNldExvY2F0aW9uKHRoaXMuZG50TG9jYXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdzYXZlSGVscGVyJywgWydpdGVtQ2F0ZWdvcnknLHNhdmVIZWxwZXJdKTtcclxuZnVuY3Rpb24gc2F2ZUhlbHBlcihpdGVtQ2F0ZWdvcnkpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2F2ZUl0ZW06IGZ1bmN0aW9uKGdyb3VwTmFtZSwgaXRlbSkge1xyXG4gICAgICB2YXIgZ3JvdXBzID0gdGhpcy5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICAgIGlmKGdyb3VwTmFtZSBpbiBncm91cHMgJiYgQXJyYXkuaXNBcnJheShncm91cHNbZ3JvdXBOYW1lXS5pdGVtcykpIHtcclxuICAgICAgICBcclxuICAgICAgICBncm91cHNbZ3JvdXBOYW1lXS5pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIGdyb3Vwc1tncm91cE5hbWVdLmxhc3RVcGRhdGUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlZFNhdmVkSXRlbXMoZ3JvdXBOYW1lLCBncm91cHNbZ3JvdXBOYW1lXS5pdGVtcyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVkU2F2ZWRJdGVtcyhncm91cE5hbWUsIFtpdGVtXSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNhdmVCdWlsZFNlbGVjdGlvbiA6IGZ1bmN0aW9uKGJ1aWxkTmFtZSwgYnVpbGRzKSB7XHJcbiAgICAgIHRoaXMuc2V0Q3VycmVudEJ1aWxkKGJ1aWxkTmFtZSk7XHJcbiAgICAgIGlmKGJ1aWxkcyAmJiBidWlsZE5hbWUgaW4gYnVpbGRzICYmIGJ1aWxkc1tidWlsZE5hbWVdLmpvYiAmJiBidWlsZHNbYnVpbGROYW1lXS5qb2IuaWQpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnam9iTnVtYmVyJywgYnVpbGRzW2J1aWxkTmFtZV0uam9iLmlkKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgaW1wb3J0R3JvdXA6IGZ1bmN0aW9uKGdyb3VwTmFtZSwgdXBkYXRlZEl0ZW1zKSB7XHJcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgICBncm91cE5hbWUgPSB0aGlzLmdldFVuaXF1ZUdyb3VwTmFtZShncm91cE5hbWUsIGl0ZW1zKTtcclxuICAgICAgdGhpcy51cGRhdGVkU2F2ZWRJdGVtcyhncm91cE5hbWUsIHVwZGF0ZWRJdGVtcyk7XHJcbiAgICAgIHJldHVybiBncm91cE5hbWU7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRVbmlxdWVHcm91cE5hbWU6IGZ1bmN0aW9uKGdyb3VwTmFtZSwgZXhpc3RpbmdHcm91cHMpIHtcclxuICAgICAgdmFyIGdyb3VwTmFtZUluZGV4ID0gMDtcclxuICAgICAgaWYoZ3JvdXBOYW1lLmxhc3RJbmRleE9mKCcpJykgPT0gZ3JvdXBOYW1lLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSBncm91cE5hbWUubGFzdEluZGV4T2YoJygnKTtcclxuICAgICAgICBpZihzdGFydEluZGV4ID4gMCkge1xyXG4gICAgICAgICAgdmFyIGZvdW5kSW5kZXggPSBOdW1iZXIoZ3JvdXBOYW1lLnN1YnN0cihzdGFydEluZGV4KzEsIGdyb3VwTmFtZS5sZW5ndGgtc3RhcnRJbmRleC0yKSk7XHJcbiAgICAgICAgICBpZihmb3VuZEluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICBncm91cE5hbWVJbmRleCA9IGZvdW5kSW5kZXggKyAxO1xyXG4gICAgICAgICAgICBncm91cE5hbWUgPSBncm91cE5hbWUuc3Vic3RyKDAsIHN0YXJ0SW5kZXggLSAxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBvcmlnaW5hbE5hbWUgPSBncm91cE5hbWU7XHJcbiAgICAgIGZvcig7Oykge1xyXG4gICAgICAgIHZhciBncm91cE5hbWUgPSBvcmlnaW5hbE5hbWU7XHJcbiAgICAgICAgaWYoZ3JvdXBOYW1lSW5kZXggPiAwKSB7XHJcbiAgICAgICAgICBncm91cE5hbWUgPSBvcmlnaW5hbE5hbWUgKyAnICgnICsgZ3JvdXBOYW1lSW5kZXggKyAnKSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGdyb3VwTmFtZSBpbiBleGlzdGluZ0dyb3Vwcykge1xyXG4gICAgICAgICAgZ3JvdXBOYW1lSW5kZXgrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiBncm91cE5hbWU7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBkZWxldGVCdWlsZDogZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICAgIHZhciBidWlsZHMgPSB0aGlzLmdldFNhdmVkSXRlbXMoKTtcclxuICAgICAgaWYoYnVpbGROYW1lIGluIGJ1aWxkcykge1xyXG4gICAgICAgICAgZGVsZXRlIGJ1aWxkc1tidWlsZE5hbWVdO1xyXG4gICAgICAgICAgdGhpcy5zZXRDdXJyZW50QnVpbGQobnVsbCk7XHJcbiAgICAgICAgICB0aGlzLnNhdmVCdWlsZHMoYnVpbGRzKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgdXBkYXRlZFNhdmVkSXRlbXM6IGZ1bmN0aW9uKGdyb3VwTmFtZSwgdXBkYXRlZEl0ZW1zKSB7XHJcbiAgICAgIHZhciBpdGVtcyA9IHRoaXMuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgICBpZihncm91cE5hbWUgaW4gaXRlbXMpIHtcclxuICAgICAgICBpdGVtc1tncm91cE5hbWVdLml0ZW1zID0gdXBkYXRlZEl0ZW1zO1xyXG4gICAgICAgIGl0ZW1zW2dyb3VwTmFtZV0ubGFzdFVwZGF0ZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaXRlbXNbZ3JvdXBOYW1lXSA9IHtpdGVtcyA6IHVwZGF0ZWRJdGVtcywgbGFzdFVwZGF0ZTogKG5ldyBEYXRlKCkpLmdldFRpbWUoKX07XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY3JlYXRlZCBncm91cCcpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLnNhdmVCdWlsZHMoaXRlbXMpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2F2ZUJ1aWxkczogZnVuY3Rpb24oYnVpbGRzKSB7XHJcbiAgICAgIHZhciBzdHJpbmdpZmllZERhdGEgPSBKU09OLnN0cmluZ2lmeShidWlsZHMpO1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2F2ZWRJdGVtcycsIExaU3RyaW5nLmNvbXByZXNzVG9VVEYxNihzdHJpbmdpZmllZERhdGEpKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2F2ZUJ1aWxkOiBmdW5jdGlvbihvbGRHcm91cE5hbWUsIG5ld0dyb3VwTmFtZSwgYnVpbGQpIHtcclxuICAgICAgdGhpcy51cGRhdGVCdWlsZChcclxuICAgICAgICBvbGRHcm91cE5hbWUsIFxyXG4gICAgICAgIG5ld0dyb3VwTmFtZSxcclxuICAgICAgICBidWlsZC5lbmVteUxldmVsLFxyXG4gICAgICAgIGJ1aWxkLnBsYXllckxldmVsLFxyXG4gICAgICAgIGJ1aWxkLmhlcm9MZXZlbCxcclxuICAgICAgICBidWlsZC5qb2IsXHJcbiAgICAgICAgYnVpbGQuZGFtYWdlVHlwZSxcclxuICAgICAgICBidWlsZC5lbGVtZW50LFxyXG4gICAgICAgIGJ1aWxkLnNlY29uZGFyeUVsZW1lbnQsXHJcbiAgICAgICAgYnVpbGQuY3JpdFJlc2lzdCxcclxuICAgICAgICBidWlsZC5lbGVSZXNpc3QsXHJcbiAgICAgICAgYnVpbGQuZW5lbXlTdGF0Q2FwcywgXHJcbiAgICAgICAgYnVpbGQucGxheWVyU3RhdENhcHMsIFxyXG4gICAgICAgIGJ1aWxkLmNvbnZlcnNpb25zLCBcclxuICAgICAgICBidWlsZC5iYXNlU3RhdHMsIFxyXG4gICAgICAgIGJ1aWxkLmhlcm9TdGF0cyk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICB1cGRhdGVCdWlsZDogZnVuY3Rpb24oXHJcbiAgICAgIG9sZEdyb3VwTmFtZSwgbmV3R3JvdXBOYW1lLCBlbmVteUxldmVsLCBwbGF5ZXJMZXZlbCwgaGVyb0xldmVsLCBqb2IsIGRhbWFnZVR5cGUsIGVsZW1lbnQsIHNlY29uZGFyeUVsZW1lbnQsIGNyaXRSZXNpc3QsIGVsZVJlc2lzdCxcclxuICAgICAgZW5lbXlTdGF0Q2FwcywgcGxheWVyU3RhdENhcHMsIGNvbnZlcnNpb25zLCBiYXNlU3RhdHMsIGhlcm9TdGF0cykge1xyXG4gICAgICAgIFxyXG4gICAgICB2YXIgc2F2ZWRJdGVtcyA9IHRoaXMuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgICBcclxuICAgICAgaWYobmV3R3JvdXBOYW1lIGluIHNhdmVkSXRlbXMgfHwgb2xkR3JvdXBOYW1lID09IG5ld0dyb3VwTmFtZSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdub3QgY2hhbmdpbmcgbmFtZScpO1xyXG4gICAgICAgIG5ld0dyb3VwTmFtZSA9IG9sZEdyb3VwTmFtZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG9sZEdyb3VwTmFtZSBpbiBzYXZlZEl0ZW1zKSB7XHJcbiAgICAgICAgdmFyIGdyb3VwID0gc2F2ZWRJdGVtc1tvbGRHcm91cE5hbWVdO1xyXG4gICAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXSA9IGdyb3VwO1xyXG4gICAgICAgIGRlbGV0ZSBzYXZlZEl0ZW1zW29sZEdyb3VwTmFtZV07XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5lbmVteUxldmVsID0gZW5lbXlMZXZlbDtcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLnBsYXllckxldmVsID0gcGxheWVyTGV2ZWw7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5oZXJvTGV2ZWwgPSBoZXJvTGV2ZWw7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5qb2IgPSBqb2I7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5kYW1hZ2VUeXBlID0gZGFtYWdlVHlwZTtcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0uc2Vjb25kYXJ5RWxlbWVudCA9IHNlY29uZGFyeUVsZW1lbnQ7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5jcml0UmVzaXN0ID0gY3JpdFJlc2lzdDtcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLmVsZVJlc2lzdCA9IGVsZVJlc2lzdDtcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLmVuZW15U3RhdENhcHMgPSBlbmVteVN0YXRDYXBzO1xyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0ucGxheWVyU3RhdENhcHMgPSBwbGF5ZXJTdGF0Q2FwcztcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLmNvbnZlcnNpb25zID0gY29udmVyc2lvbnM7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5iYXNlU3RhdHMgPSBiYXNlU3RhdHM7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5oZXJvU3RhdHMgPSBoZXJvU3RhdHM7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLnNhdmVCdWlsZHMoc2F2ZWRJdGVtcyk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRTYXZlZEl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2YXIgc3RyaW5naWZpZWREYXRhID0gTFpTdHJpbmcuZGVjb21wcmVzc0Zyb21VVEYxNihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2F2ZWRJdGVtcycpKTtcclxuICAgICAgICB2YXIgc2F2ZWRJdGVtcyA9IEpTT04ucGFyc2Uoc3RyaW5naWZpZWREYXRhKTtcclxuICAgICAgICByZXR1cm4gc2F2ZWRJdGVtcztcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChleCkge1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge307XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBjdXJyZW50QnVpbGQ6IG51bGwsXHJcbiAgICBnZXRDdXJyZW50QnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZighdGhpcy5jdXJyZW50QnVpbGQpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRCdWlsZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjdXJyZW50R3JvdXAnKTtcclxuICAgICAgICBpZih0aGlzLmN1cnJlbnRCdWlsZCkge1xyXG4gICAgICAgICAgdmFyIHNhdmVkSXRlbXMgPSB0aGlzLmdldFNhdmVkSXRlbXMoKTtcclxuICAgICAgICAgIGlmKCEodGhpcy5jdXJyZW50QnVpbGQgaW4gc2F2ZWRJdGVtcykpIHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2N1cnJlbnRHcm91cCcpO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRCdWlsZCA9IG51bGw7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50QnVpbGQ7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRDdXJyZW50QnVpbGQ6IGZ1bmN0aW9uKGJ1aWxkTmFtZSkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRCdWlsZCA9IGJ1aWxkTmFtZTtcclxuICAgICAgaWYoIWJ1aWxkTmFtZSkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdjdXJyZW50R3JvdXAnLCBidWlsZE5hbWUpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjdXJyZW50R3JvdXAnLCBidWlsZE5hbWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdzdGF0SGVscGVyJywgWydoQ29kZVZhbHVlcycsc3RhdEhlbHBlcl0pO1xyXG5mdW5jdGlvbiBzdGF0SGVscGVyKGhDb2RlVmFsdWVzKSB7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBcclxuICAgIGdldFNldFN0YXRzOiBmdW5jdGlvbihncm91cEl0ZW1zKSB7XHJcbiAgICAgIHZhciBzdGF0cyA9IFtdO1xyXG4gICAgICB2YXIgc2V0cyA9IHt9O1xyXG4gICAgICBcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwSXRlbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZih2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS5zZXRTdGF0cyAhPSBudWxsKSB7XHJcbiAgICAgICAgICBpZih2YWx1ZS5zZXRJZCBpbiBzZXRzKSB7XHJcbiAgICAgICAgICAgIHNldHNbdmFsdWUuc2V0SWRdLm51bUl0ZW1zKys7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0c1t2YWx1ZS5zZXRJZF0gPSB7IG51bUl0ZW1zIDogMSwgc3RhdHMgOiB2YWx1ZS5zZXRTdGF0cyB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goc2V0cywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZS5zdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgICAgIGlmKHN0YXQubmVlZFNldE51bSA8PSB2YWx1ZS5udW1JdGVtcykge1xyXG4gICAgICAgICAgICBzdGF0cy5wdXNoKHN0YXQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKHN0YXRzKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldE51bUl0ZW1zRm9yU2V0OiBmdW5jdGlvbihpdGVtcywgc2V0SWQpIHtcclxuICAgICAgdmFyIG51bUl0ZW1zID0gMDtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgaWYodmFsdWUgJiYgdmFsdWUuc2V0SWQgJiYgdmFsdWUuc2V0SWQgPT0gc2V0SWQpIHtcclxuICAgICAgICAgIG51bUl0ZW1zKys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBudW1JdGVtcztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldENvbWJpbmVkU3RhdHM6IGZ1bmN0aW9uKGdyb3VwSXRlbXMpIHtcclxuICAgICAgdmFyIHN0YXRzID0gW107XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXBJdGVtcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKHZhbHVlLmZ1bGxTdGF0cykge1xyXG4gICAgICAgICAgICBzdGF0cyA9IHN0YXRzLmNvbmNhdCh2YWx1ZS5mdWxsU3RhdHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZih2YWx1ZS5zdGF0cykge1xyXG4gICAgICAgICAgICBzdGF0cyA9IHN0YXRzLmNvbmNhdCh2YWx1ZS5zdGF0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKHN0YXRzKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldENhbGN1bGF0ZWRTdGF0c0Zyb21JdGVtczogZnVuY3Rpb24oZ3JvdXAsIGl0ZW1zKSB7XHJcbiAgICAgIHZhciBuYWtlZFN0YXRzID0gdGhpcy5nZXROYWtlZFN0YXRzKGdyb3VwKTtcclxuICAgICAgdmFyIGNvbWJpbmVkU3RhdHMgPSB0aGlzLmdldENvbWJpbmVkU3RhdHMoaXRlbXMpO1xyXG4gICAgICB2YXIgc2V0U3RhdHMgPSB0aGlzLmdldFNldFN0YXRzKGl0ZW1zKTtcclxuICAgICAgdmFyIGFsbFN0YXRzID0gbmFrZWRTdGF0cy5jb25jYXQoY29tYmluZWRTdGF0cykuY29uY2F0KHNldFN0YXRzKTtcclxuICAgICAgaWYoZ3JvdXAuaGVyb1N0YXRzICE9IG51bGwgJiYgZ3JvdXAuaGVyb1N0YXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBhbGxTdGF0cyA9IGFsbFN0YXRzLmNvbmNhdChncm91cC5oZXJvU3RhdHMpO1xyXG4gICAgICB9XHJcbiAgICAgIGFsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhhbGxTdGF0cyk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gdGhpcy5nZXRDYWxjdWxhdGVkU3RhdHMoZ3JvdXAsIGFsbFN0YXRzKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldENhbGN1bGF0ZWRTdGF0czogZnVuY3Rpb24oZ3JvdXAsIGNvbWJpbmVkU3RhdHMpIHtcclxuICAgICAgXHJcbiAgICAgIHZhciByZXRWYWwgPSBbXTtcclxuICAgICAgdmFyIHN0YXRMb29rdXAgPSB7fTtcclxuICAgICAgaWYoIWdyb3VwLmNvbnZlcnNpb25zIHx8ICFncm91cC5lbmVteVN0YXRDYXBzIHx8ICFncm91cC5wbGF5ZXJTdGF0Q2Fwcykge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbWJpbmVkU3RhdHMsIGZ1bmN0aW9uKHN0YXQsIGluZGV4KSB7XHJcbiAgICAgICAgc3RhdExvb2t1cFtzdGF0LmlkXSA9IHN0YXQ7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gZ2V0UGMoc3RhdCkge1xyXG4gICAgICAgIHZhciBzdGF0RGVmID0gaENvZGVWYWx1ZXMuc3RhdHNbc3RhdC5pZF07XHJcbiAgICAgICAgaWYoc3RhdExvb2t1cFtzdGF0RGVmLnBjXSkge1xyXG4gICAgICAgICAgcmV0dXJuIE51bWJlcihzdGF0TG9va3VwW3N0YXREZWYucGNdLm1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBmdW5jdGlvbiBnZXRTa2lsbFBjKHN0YXQpIHtcclxuICAgICAgICB2YXIgc3RhdERlZiA9IGhDb2RlVmFsdWVzLnN0YXRzW3N0YXQuaWRdO1xyXG4gICAgICAgIGlmKHN0YXRMb29rdXBbc3RhdERlZi5za1BjXSkge1xyXG4gICAgICAgICAgcmV0dXJuIE51bWJlcihzdGF0TG9va3VwW3N0YXREZWYuc2tQY10ubWF4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGZ1bmN0aW9uIGFwcGx5UGMoc3RhdCkge1xyXG4gICAgICAgIHN0YXQubWF4ID0gTWF0aC5mbG9vcihcclxuICAgICAgICAgIHN0YXQubWF4ICogKDErZ2V0UGMoc3RhdCkpICogKDErZ2V0U2tpbGxQYyhzdGF0KSlcclxuICAgICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGZ1bmN0aW9uIGR1cGVTdGF0KGlkKSB7XHJcbiAgICAgICAgdmFyIHN0YXQgPSBzdGF0TG9va3VwW2lkXTtcclxuICAgICAgICBpZihzdGF0KSB7XHJcbiAgICAgICAgICByZXR1cm4ge2lkOiBpZCwgbWF4OiBOdW1iZXIoc3RhdC5tYXgpLCBwYzogc3RhdC5wY307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHtpZDogaWQsIG1heDogMCwgcGM6IDB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gYWRkU3RhdChzdGF0KSB7XHJcbiAgICAgICAgaWYoc3RhdC5tYXggPiAwKSB7XHJcbiAgICAgICAgICByZXRWYWwucHVzaChzdGF0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBjcml0UmVzaXN0O1xyXG4gICAgICBpZighKCdjcml0UmVzaXN0JyBpbiBncm91cCkpIHtcclxuICAgICAgICBjcml0UmVzaXN0ID0gMC4yMDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBjcml0UmVzaXN0ID0gZ3JvdXAuY3JpdFJlc2lzdCAvIDEwMC4wO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZWxlUmVzaXN0O1xyXG4gICAgICBpZighKCdlbGVSZXNpc3QnIGluIGdyb3VwKSkge1xyXG4gICAgICAgIGVsZVJlc2lzdCA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZWxlUmVzaXN0ID0gZ3JvdXAuZWxlUmVzaXN0IC8gMTAwLjA7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIGJhc2Ugc3RhdHNcclxuICAgICAgdmFyIHN0ciA9IGR1cGVTdGF0KDApO1xyXG4gICAgICBhcHBseVBjKHN0cik7XHJcbiAgICAgIGFkZFN0YXQoc3RyKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBhZ2kgPSBkdXBlU3RhdCgxKTtcclxuICAgICAgYXBwbHlQYyhhZ2kpO1xyXG4gICAgICBhZGRTdGF0KGFnaSk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaW50ID0gZHVwZVN0YXQoMik7XHJcbiAgICAgIGFwcGx5UGMoaW50KTtcclxuICAgICAgYWRkU3RhdChpbnQpO1xyXG5cclxuICAgICAgdmFyIHZpdCA9IGR1cGVTdGF0KDMpO1xyXG4gICAgICBhcHBseVBjKHZpdCk7XHJcbiAgICAgIGFkZFN0YXQodml0KTtcclxuXHJcbiAgICAgIC8vIGFkZCB2aXQgdG8gaHBcclxuICAgICAgdmFyIGhwID0gZHVwZVN0YXQoMjUpO1xyXG4gICAgICBocC5tYXggKz0gKHZpdC5tYXggKiBOdW1iZXIoZ3JvdXAuY29udmVyc2lvbnMuSFApKTtcclxuICAgICAgYXBwbHlQYyhocCk7XHJcbiAgICAgIGFkZFN0YXQoaHApO1xyXG4gICAgICBcclxuICAgICAgLy8gZGVmc1xyXG4gICAgICB2YXIgZGVmID0gZHVwZVN0YXQoOCk7XHJcbiAgICAgIGRlZi5tYXggKz0gKHZpdC5tYXggKiBOdW1iZXIoZ3JvdXAuY29udmVyc2lvbnMuUGh5c2ljYWxEZWZlbnNlKSk7XHJcbiAgICAgIGFwcGx5UGMoZGVmKTtcclxuICAgICAgYWRkU3RhdChkZWYpO1xyXG4gICAgICBcclxuICAgICAgdmFyIGRlZnBjID0gZHVwZVN0YXQoMTAwOCk7XHJcbiAgICAgIC8vIGRlZnBjLm1heCA9IE1hdGgubWF4KDAuODUsIE51bWJlcihkZWYubWF4KS9OdW1iZXIoZ3JvdXAuZW5lbXlTdGF0Q2Fwcy5DZGVmZW5zZSkpO1xyXG4gICAgICBkZWZwYy5tYXggPSBNYXRoLm1pbigwLjg1LGRlZi5tYXgvTnVtYmVyKGdyb3VwLmVuZW15U3RhdENhcHMuQ2RlZmVuc2UpKTtcclxuICAgICAgYWRkU3RhdChkZWZwYyk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgbWRlZiA9IGR1cGVTdGF0KDkpO1xyXG4gICAgICBtZGVmLm1heCArPSAoaW50Lm1heCAqIE51bWJlcihncm91cC5jb252ZXJzaW9ucy5NYWdpY0RlZmVuc2UpKTtcclxuICAgICAgYXBwbHlQYyhtZGVmKTtcclxuICAgICAgYWRkU3RhdChtZGVmKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBtZGVmcGMgPSBkdXBlU3RhdCgxMDA5KTtcclxuICAgICAgLy8gbWRlZnBjLm1heCA9IE1hdGgubWF4KDAuODUsIE51bWJlcihtZGVmLm1heCkvTnVtYmVyKGdyb3VwLmVuZW15U3RhdENhcHMuQ2RlZmVuc2UpKTtcclxuICAgICAgbWRlZnBjLm1heCA9IE1hdGgubWluKDAuODUsbWRlZi5tYXgvTnVtYmVyKGdyb3VwLmVuZW15U3RhdENhcHMuQ2RlZmVuc2UpKTtcclxuICAgICAgYWRkU3RhdChtZGVmcGMpO1xyXG4gICAgICBcclxuICAgICAgLy8gYXR0YWNrIHBvd2VyIC0gbGlrZSBmZCBidXQgZm9yIGJ1ZnNcclxuICAgICAgLy8gdGhpcyBzaG93cyBhcyBibHVlIGRhbWFnZVxyXG4gICAgICAvLyBpIHRoaW5rIHRoZXJlIGFyZSBtYWdpYyBhbmQgcGhpcyB2YXJpYW50cyBvZiB0aGlzIGJ1dCBkb2VzbnQgbWF0dGVyXHJcbiAgICAgIHZhciBhUHdyID0gZHVwZVN0YXQoMzAwMCk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgbWluUGRtZyA9IGR1cGVTdGF0KDQpO1xyXG4gICAgICB2YXIgbWF4UGRtZyA9IGR1cGVTdGF0KDUpO1xyXG5cclxuICAgICAgLy8gcGh5c2ljYWwgZGFtYWdlXHJcbiAgICAgIGlmKCFncm91cC5kYW1hZ2VUeXBlIHx8IGdyb3VwLmRhbWFnZVR5cGUuaWQgIT0gMikge1xyXG4gICAgICAgIHZhciBleHRyYVBkbWcgPSBkdXBlU3RhdCgzMik7XHJcbiAgICAgICAgdmFyIGV4dHJhUGRtZ01vZD0gZHVwZVN0YXQoMTAxKTtcclxuICAgICAgICB2YXIgcGFQd3IgPSBkdXBlU3RhdCgzMDAxKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzcGVjaWFsIHN0YXRzIGZvciB6ZWFsXHJcbiAgICAgICAgdmFyIGludFRvUGRtZyA9IGR1cGVTdGF0KDEwMTY0KTtcclxuICAgICAgICB2YXIgZGVmVG9QZG1nID0gZHVwZVN0YXQoMTEwMzczKTtcclxuICAgICAgICBcclxuICAgICAgICBtaW5QZG1nLm1heCArPSBleHRyYVBkbWcubWF4O1xyXG4gICAgICAgIG1pblBkbWcubWF4ICs9IE1hdGguZmxvb3Ioc3RyLm1heCpOdW1iZXIoZ3JvdXAuY29udmVyc2lvbnMuU3RyZW5ndGhBdHRhY2spKTtcclxuICAgICAgICBtaW5QZG1nLm1heCArPSBNYXRoLmZsb29yKGFnaS5tYXgqTnVtYmVyKGdyb3VwLmNvbnZlcnNpb25zLkFnaWxpdHlBdHRhY2spKTtcclxuICAgICAgICBcclxuICAgICAgICBtaW5QZG1nLm1heCA9IE1hdGguZmxvb3IobWluUGRtZy5tYXgqKDErKGdldFBjKG1pblBkbWcpICsgZXh0cmFQZG1nTW9kLm1heCkpKTtcclxuICAgICAgICBtaW5QZG1nLm1heCA9IE1hdGguZmxvb3IobWluUGRtZy5tYXggKiAoMSthUHdyLm1heCtwYVB3ci5tYXgpKTtcclxuICAgICAgICBtaW5QZG1nLm1heCArPSBNYXRoLmZsb29yKGludFRvUGRtZy5tYXggKiBpbnQubWF4KTtcclxuICAgICAgICBtaW5QZG1nLm1heCArPSBNYXRoLmZsb29yKGRlZlRvUGRtZy5tYXggKiBkZWYubWF4KTtcclxuICAgICAgICBhZGRTdGF0KG1pblBkbWcpO1xyXG4gIFxyXG4gICAgICAgIG1heFBkbWcubWF4ICs9IGV4dHJhUGRtZy5tYXg7XHJcbiAgICAgICAgbWF4UGRtZy5tYXggKz0gTWF0aC5mbG9vcihzdHIubWF4Kk51bWJlcihncm91cC5jb252ZXJzaW9ucy5TdHJlbmd0aEF0dGFjaykpO1xyXG4gICAgICAgIG1heFBkbWcubWF4ICs9IE1hdGguZmxvb3IoYWdpLm1heCpOdW1iZXIoZ3JvdXAuY29udmVyc2lvbnMuQWdpbGl0eUF0dGFjaykpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1heFBkbWcubWF4ID0gTWF0aC5mbG9vcihtYXhQZG1nLm1heCooMSsoZ2V0UGMobWF4UGRtZykgKyBleHRyYVBkbWdNb2QubWF4KSkpO1xyXG4gICAgICAgIG1heFBkbWcubWF4ID0gTWF0aC5mbG9vcihtYXhQZG1nLm1heCAqICgxK2FQd3IubWF4K3BhUHdyLm1heCkpO1xyXG4gICAgICAgIG1heFBkbWcubWF4ICs9IE1hdGguZmxvb3IoaW50VG9QZG1nLm1heCAqIGludC5tYXgpO1xyXG4gICAgICAgIG1heFBkbWcubWF4ICs9IE1hdGguZmxvb3IoZGVmVG9QZG1nLm1heCAqIGRlZi5tYXgpO1xyXG4gICAgICAgIGFkZFN0YXQobWF4UGRtZyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBtaW5NZG1nID0gZHVwZVN0YXQoNik7XHJcbiAgICAgIHZhciBtYXhNZG1nID0gZHVwZVN0YXQoNyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBtYWdpYyBkYW1hZ2VcclxuICAgICAgaWYoIWdyb3VwLmRhbWFnZVR5cGUgfHwgZ3JvdXAuZGFtYWdlVHlwZS5pZCAhPSAxKSB7XHJcbiAgICAgICAgdmFyIGV4dHJhTWRtZyA9IGR1cGVTdGF0KDMzKTtcclxuICAgICAgICB2YXIgZXh0cmFNZG1nTW9kID0gZHVwZVN0YXQoMTAyKTtcclxuICAgICAgICB2YXIgbWFQd3IgPSBkdXBlU3RhdCgzMDAyKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzcGVjaWFsIHN0YXRzIGZvciB6ZWFsXHJcbiAgICAgICAgdmFyIHN0clRvTWRtZyA9IGR1cGVTdGF0KDEwMTY1KTtcclxuICAgICAgICB2YXIgaW50VG9NZG1nID0gZHVwZVN0YXQoMTAzNzIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1pbk1kbWcubWF4ICs9IGV4dHJhTWRtZy5tYXg7XHJcbiAgICAgICAgbWluTWRtZy5tYXggKz0gTWF0aC5mbG9vcihpbnQubWF4Kk51bWJlcihncm91cC5jb252ZXJzaW9ucy5JbnRlbGxpZ2VuY2VBdHRhY2spKTtcclxuXHJcbiAgICAgICAgbWluTWRtZy5tYXggPSBNYXRoLmZsb29yKG1pbk1kbWcubWF4KigxKyhnZXRQYyhtaW5NZG1nKSArIGV4dHJhTWRtZ01vZC5tYXgpKSk7XHJcbiAgICAgICAgbWluTWRtZy5tYXggPSBtaW5NZG1nLm1heCAqICgxK2FQd3IubWF4K21hUHdyLm1heCk7XHJcbiAgICAgICAgbWluTWRtZy5tYXggKz0gTWF0aC5mbG9vcihzdHJUb01kbWcubWF4ICogc3RyLm1heCk7XHJcbiAgICAgICAgbWluTWRtZy5tYXggKz0gTWF0aC5mbG9vcihpbnRUb01kbWcubWF4ICogaW50Lm1heCk7XHJcbiAgICAgICAgYWRkU3RhdChtaW5NZG1nKTtcclxuICAgICAgICBcclxuICAgICAgICBtYXhNZG1nLm1heCArPSBleHRyYU1kbWcubWF4O1xyXG4gICAgICAgIG1heE1kbWcubWF4ICs9IChpbnQubWF4Kk51bWJlcihncm91cC5jb252ZXJzaW9ucy5JbnRlbGxpZ2VuY2VBdHRhY2spKTtcclxuICAgICAgICBcclxuICAgICAgICBtYXhNZG1nLm1heCA9IE1hdGguZmxvb3IobWF4TWRtZy5tYXgqKDErKGdldFBjKG1heE1kbWcpICsgZXh0cmFNZG1nTW9kLm1heCkpKTtcclxuICAgICAgICBtYXhNZG1nLm1heCA9IG1heE1kbWcubWF4ICogKDErYVB3ci5tYXgrbWFQd3IubWF4KTtcclxuICAgICAgICBtYXhNZG1nLm1heCArPSBNYXRoLmZsb29yKHN0clRvTWRtZy5tYXggKiBzdHIubWF4KTtcclxuICAgICAgICBtYXhNZG1nLm1heCArPSBNYXRoLmZsb29yKGludFRvTWRtZy5tYXggKiBpbnQubWF4KTtcclxuICAgICAgICBhZGRTdGF0KG1heE1kbWcpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgICAgLy8gY3JpdCBjaGFuY2UgJVxyXG4gICAgICB2YXIgY3JpdCA9IGR1cGVTdGF0KDEyKTtcclxuICAgICAgY3JpdC5tYXggKz0gKGFnaS5tYXgqTnVtYmVyKGdyb3VwLmNvbnZlcnNpb25zLkNyaXRpY2FsKSk7XHJcbiAgICAgIGFwcGx5UGMoY3JpdCk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgc2tDcml0ID0gZHVwZVN0YXQoNDAxMik7XHJcbiAgICAgIGNyaXQubWF4ICs9IHNrQ3JpdC5tYXg7XHJcbiAgICAgIGFkZFN0YXQoY3JpdCk7XHJcbiAgICAgIHZhciBpdGVtQ3JpdCA9IGR1cGVTdGF0KDEwMTIpO1xyXG4gICAgICBcclxuICAgICAgdmFyIGNyaXRDaGFuY2UgPSBNYXRoLm1pbigwLjg5LCAoY3JpdC5tYXggLyBOdW1iZXIoZ3JvdXAuZW5lbXlTdGF0Q2Fwcy5DY3JpdGljYWwpKSArIGl0ZW1Dcml0Lm1heCk7XHJcbiAgICAgIHJldFZhbC5wdXNoKHtpZDogMTAxMiwgbWF4OiBjcml0Q2hhbmNlfSk7XHJcblxyXG4gICAgICAvLyBjcml0IGRhbWFnZSAlXHJcbiAgICAgIHZhciBjRG1nID0gZHVwZVN0YXQoMTAzKTtcclxuICAgICAgY0RtZy5tYXggKz0gKChzdHIubWF4K2ludC5tYXgpICogTnVtYmVyKGdyb3VwLmNvbnZlcnNpb25zLlN0cmVuZ3RoSW50ZWxsaWdlbmNlVG9Dcml0aWNhbERhbWFnZSkpO1xyXG4gICAgICBhcHBseVBjKGNEbWcpO1xyXG4gICAgICBhZGRTdGF0KGNEbWcpO1xyXG5cclxuICAgICAgdmFyIGl0ZW1DdHJpRG1nID0gZHVwZVN0YXQoMTEwMyk7XHJcbiAgICAgIHZhciBjcml0RGFtYWdlUGMgPSBNYXRoLm1pbigxLCAoY0RtZy5tYXggLyBncm91cC5wbGF5ZXJTdGF0Q2Fwcy5DY3JpdGljYWxEYW1hZ2UpICsgaXRlbUN0cmlEbWcubWF4KTtcclxuICAgICAgYWRkU3RhdCh7aWQ6IDExMDMsIG1heDogY3JpdERhbWFnZVBjICsgMn0pO1xyXG5cclxuICAgICAgLy8gZmRcclxuICAgICAgdmFyIGZkID0gZHVwZVN0YXQoMjkpO1xyXG4gICAgICBhZGRTdGF0KGZkKTtcclxuICAgICAgdmFyIG1heEZkID0gTnVtYmVyKGdyb3VwLmVuZW15U3RhdENhcHMuQ2ZpbmFsZGFtYWdlKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBmZFBjID0gZHVwZVN0YXQoMTAyOSk7XHJcbiAgICAgIGZkUGMubWF4ICs9IE1hdGgubWluKE1hdGgubWF4KDAuMzUqTnVtYmVyKGZkLm1heCkvbWF4RmQsTWF0aC5wb3coTnVtYmVyKGZkLm1heCkvbWF4RmQsMi4yKSksMSk7XHJcbiAgICAgIGFkZFN0YXQoZmRQYyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBlbGVtZW50c1xyXG4gICAgICB2YXIgZmlyZVBjID0gZHVwZVN0YXQoMTYpO1xyXG4gICAgICBhZGRTdGF0KGZpcmVQYyk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaWNlUGMgPSBkdXBlU3RhdCgxNyk7XHJcbiAgICAgIGFkZFN0YXQoaWNlUGMpO1xyXG4gICAgICBcclxuICAgICAgdmFyIGxpZ2h0UGMgPSBkdXBlU3RhdCgxOCk7XHJcbiAgICAgIGFkZFN0YXQobGlnaHRQYyk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgZGFya1BjID0gZHVwZVN0YXQoMTkpO1xyXG4gICAgICBhZGRTdGF0KGRhcmtQYyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBhdmVyYWdlIGRhbWFnZVxyXG4gICAgICBmdW5jdGlvbiBhZGRBdmdEYW1hZ2VTdGF0KGlkLCBtaW4sIG1heCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBub25FbGVEYW1hZ2UgPSAobWluK21heCkvMjtcclxuICAgICAgICAvLyBhZGQgY3JpdFxyXG4gICAgICAgIG5vbkVsZURhbWFnZSArPSAoY3JpdENoYW5jZSAqIChjcml0RGFtYWdlUGMrMSkgKiBub25FbGVEYW1hZ2UgKiAoMSAtIGNyaXRSZXNpc3QpKTtcclxuICAgICAgICAvLyBhcHBseSBmZFxyXG4gICAgICAgIG5vbkVsZURhbWFnZSA9IG5vbkVsZURhbWFnZSAqICgxICsgZmRQYy5tYXgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGFwcGx5IGVsZW1lbnQocylcclxuICAgICAgICB2YXIgYXZnRG1nID0gbm9uRWxlRGFtYWdlO1xyXG4gICAgICAgIGlmKGdyb3VwLmVsZW1lbnQgJiYgZ3JvdXAuZWxlbWVudC5pZCA+IDApIHtcclxuICAgICAgICAgIHZhciBlbGVtZW50U3RhdCA9IHN0YXRMb29rdXBbaENvZGVWYWx1ZXMuZWxlbWVudHNbZ3JvdXAuZWxlbWVudC5pZF0uZG1nU3RhdF07XHJcbiAgICAgICAgICBpZihlbGVtZW50U3RhdCkge1xyXG4gICAgICAgICAgICBhdmdEbWcgPSBhdmdEbWcgKiAoMSArIE51bWJlcihlbGVtZW50U3RhdC5tYXgpKSAqICgxIC0gTnVtYmVyKGVsZVJlc2lzdCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhZGRTdGF0KHtpZDogaWQsIG1heDogYXZnRG1nfSk7XHJcbiAgICAgICAgdmFyIHNlY0VsZW1lbnRJZCA9IDA7XHJcbiAgICAgICAgdmFyIHByaUVsZW1lbnRJZCA9IDA7XHJcbiAgICAgICAgaWYoZ3JvdXAuZWxlbWVudCkge1xyXG4gICAgICAgICAgcHJpRWxlbWVudElkID0gZ3JvdXAuZWxlbWVudC5pZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBwcmlFbGVtZW50SWQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihncm91cC5zZWNvbmRhcnlFbGVtZW50KSB7XHJcbiAgICAgICAgICBzZWNFbGVtZW50SWQgPSBncm91cC5zZWNvbmRhcnlFbGVtZW50LmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHNlY0VsZW1lbnRJZCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHNlY0VsZW1lbnRJZCAhPSBwcmlFbGVtZW50SWQpIHtcclxuICAgICAgICAgIGlmKHNlY0VsZW1lbnRJZCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHNlY29uZGFyeUVsZW1lbnRTdGF0ID0gc3RhdExvb2t1cFtoQ29kZVZhbHVlcy5lbGVtZW50c1tncm91cC5zZWNvbmRhcnlFbGVtZW50LmlkXS5kbWdTdGF0XTtcclxuICAgICAgICAgICAgaWYoc2Vjb25kYXJ5RWxlbWVudFN0YXQpIHtcclxuICAgICAgICAgICAgICB2YXIgc2VjQXZnRG1nID0gbm9uRWxlRGFtYWdlICogKDErTnVtYmVyKHNlY29uZGFyeUVsZW1lbnRTdGF0Lm1heCkpICogKDEgLSBOdW1iZXIoZWxlUmVzaXN0KSk7XHJcbiAgICAgICAgICAgICAgYWRkU3RhdCh7aWQ6IGlkICsgMTAwMCwgbWF4OiBzZWNBdmdEbWd9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFkZFN0YXQoe2lkOiBpZCArIDEwMDAsIG1heDogbm9uRWxlRGFtYWdlfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBhdmVyYWdlIGRhbWFnZXNcclxuICAgICAgaWYoIWdyb3VwLmRhbWFnZVR5cGUgfHwgZ3JvdXAuZGFtYWdlVHlwZS5pZCA9PSAxIHx8IGdyb3VwLmRhbWFnZVR5cGUuaWQgPT0gMCkge1xyXG4gICAgICAgIGFkZEF2Z0RhbWFnZVN0YXQoMTAwNCwgbWluUGRtZy5tYXgsIG1heFBkbWcubWF4KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYoIWdyb3VwLmRhbWFnZVR5cGUgfHwgZ3JvdXAuZGFtYWdlVHlwZS5pZCA9PSAyIHx8IGdyb3VwLmRhbWFnZVR5cGUuaWQgPT0gMCkge1xyXG4gICAgICAgIGFkZEF2Z0RhbWFnZVN0YXQoMTAwNiwgbWluTWRtZy5tYXgsIG1heE1kbWcubWF4KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoIWdyb3VwLmRhbWFnZVR5cGUgfHwgZ3JvdXAuZGFtYWdlVHlwZS5pZCA9PSAzKSB7XHJcbiAgICAgICAgYWRkQXZnRGFtYWdlU3RhdCgxMDAxLCBtaW5NZG1nLm1heCttaW5QZG1nLm1heCwgbWF4TWRtZy5tYXgrbWF4UGRtZy5tYXgpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBFcXVpdmFsZW50IEhQXHJcbiAgICAgIHZhciBwZGVmRXFIcCA9IGR1cGVTdGF0KDIwMDgpO1xyXG4gICAgICBwZGVmRXFIcC5tYXggPSBocC5tYXggLyAoMS1kZWZwYy5tYXgpO1xyXG4gICAgICBcclxuICAgICAgdmFyIG1kZWZFcUhwID0gZHVwZVN0YXQoMjAwOSk7XHJcbiAgICAgIG1kZWZFcUhwLm1heCA9IGhwLm1heCAvICgxLW1kZWZwYy5tYXgpO1xyXG4gICAgICBcclxuICAgICAgdmFyIGVxSHAgPSBkdXBlU3RhdCgzMDA4KTtcclxuICAgICAgZXFIcC5tYXggPSAocGRlZkVxSHAubWF4ICsgbWRlZkVxSHAubWF4KSAvIDI7XHJcbiAgICAgIGFkZFN0YXQoZXFIcCk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0TmFrZWRTdGF0czogZnVuY3Rpb24oZ3JvdXApIHtcclxuICAgICAgXHJcbiAgICAgIGlmKFxyXG4gICAgICAgIGdyb3VwLmJhc2VTdGF0cyAmJiBcclxuICAgICAgICBncm91cC5iYXNlU3RhdHMuU3RyZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7aWQ6MCwgbWF4Omdyb3VwLmJhc2VTdGF0cy5TdHJlbmd0aH0sXHJcbiAgICAgICAgICB7aWQ6MSwgbWF4Omdyb3VwLmJhc2VTdGF0cy5BZ2lsaXR5fSxcclxuICAgICAgICAgIHtpZDoyLCBtYXg6Z3JvdXAuYmFzZVN0YXRzLkludGVsbGlnZW5jZX0sXHJcbiAgICAgICAgICB7aWQ6MywgbWF4Omdyb3VwLmJhc2VTdGF0cy5TdGFtaW5hfVxyXG4gICAgICAgICAgXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldFNraWxsU3RhdHMgOiBmdW5jdGlvbiAoaXRlbSwgZGF0YSwgc2tpbGxEYXRhKSB7XHJcblxyXG4gICAgICB2YXIgc2tpbGxMZXZlbFZhbHMgPSBudWxsO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goc2tpbGxEYXRhLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcclxuICAgICAgICBpZih2YWx1ZS5Ta2lsbEluZGV4ID09IGl0ZW0uaWQgJiYgdmFsdWUuU2tpbGxMZXZlbCA9PSBpdGVtLmVuY2hhbnRtZW50TnVtKSB7XHJcbiAgICAgICAgICBza2lsbExldmVsVmFscyA9IHZhbHVlO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpZighc2tpbGxMZXZlbFZhbHMpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdmFyIGluZGV4ID0gMTtcclxuICAgICAgdmFyIGVmZmVjdHMgPSBbXTtcclxuICAgICAgdmFyIHN0aWxsQ29scyA9IHRydWU7XHJcbiAgICAgIFxyXG4gICAgICB3aGlsZShzdGlsbENvbHMpIHtcclxuICAgICAgICB2YXIgY29sTmFtZSA9ICdFZmZlY3RDbGFzcycgKyBpbmRleDtcclxuICAgICAgICB2YXIgdmFsQ29sTmFtZSA9ICdFZmZlY3RDbGFzc1ZhbHVlJyArIGluZGV4O1xyXG4gICAgICAgIGlmKGRhdGEgJiYgY29sTmFtZSBpbiBkYXRhICYmIHZhbENvbE5hbWUgaW4gc2tpbGxMZXZlbFZhbHMpIHtcclxuICAgICAgICAgIGlmKGRhdGFbY29sTmFtZV0gPiAwKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgdmFsID0gc2tpbGxMZXZlbFZhbHNbdmFsQ29sTmFtZV07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBmb3Igbm93IGFkZCAxMGtcclxuICAgICAgICAgICAgdmFyIGVmZmVjdElkID0gZGF0YVtjb2xOYW1lXTtcclxuICAgICAgICAgICAgdmFyIG1hcCA9IGhDb2RlVmFsdWVzLnNraWxsRWZmZWN0TWFwcGluZ1tlZmZlY3RJZF07XHJcbiAgICAgICAgICAgIGlmKG1hcCAmJiBtYXAuZ2V0VmFscykge1xyXG4gICAgICAgICAgICAgIHZhciB2YWxzID0gbWFwLmdldFZhbHModmFsKTtcclxuICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPHZhbHMubGVuZ3RoOysraSkge1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0cy5wdXNoKHZhbHNbaV0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICB2YXIgc3RhdElkO1xyXG4gICAgICAgICAgICAgIGlmKG1hcCAmJiBtYXAubWFwVG8pIHtcclxuICAgICAgICAgICAgICAgIHN0YXRJZCA9IG1hcC5tYXBUbztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0SWQgPSAxMDAwMCArIGVmZmVjdElkO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBpZih2YWwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RzLnB1c2goeyBpZDogc3RhdElkLCBlZmZlY3Q6IGVmZmVjdElkLCBtYXg6IHZhbCB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZih2YWwudG9TdHJpbmcoKS5pbmRleE9mKCc7JykgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciB2YWxzID0gdmFsLnNwbGl0KCc7Jyk7XHJcbiAgICAgICAgICAgICAgICAgIGlmKHZhbHMubGVuZ3RoID4gMCAmJiB2YWxzWzBdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaCh7IGlkOiBzdGF0SWQsIGVmZmVjdDogZWZmZWN0SWQsIG1heDogdmFsc1swXSB9KTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHN0aWxsQ29scyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gZWZmZWN0cztcclxuICAgIH0sXHJcblxyXG4gICAgZ2V0QnVpbGRTdGF0czogZnVuY3Rpb24oYnVpbGQpIHtcclxuICAgICAgdmFyIHN0YXRzID0ge307XHJcbiAgICAgIHN0YXRzLm5ha2VkU3RhdHMgPSB0aGlzLmdldE5ha2VkU3RhdHMoYnVpbGQpO1xyXG4gICAgICBzdGF0cy5jb21iaW5lZFN0YXRzID0gdGhpcy5nZXRDb21iaW5lZFN0YXRzKGJ1aWxkLml0ZW1zKTtcclxuICAgICAgc3RhdHMuc2V0U3RhdHMgPSB0aGlzLmdldFNldFN0YXRzKGJ1aWxkLml0ZW1zKTtcclxuICAgICAgc3RhdHMuYWxsU3RhdHMgPSBzdGF0cy5uYWtlZFN0YXRzLmNvbmNhdChzdGF0cy5jb21iaW5lZFN0YXRzKS5jb25jYXQoc3RhdHMuc2V0U3RhdHMpO1xyXG4gICAgICBpZihidWlsZC5oZXJvU3RhdHMgJiYgYnVpbGQuaGVyb1N0YXRzLmxlbmd0aCkge1xyXG4gICAgICAgIHN0YXRzLmhlcm9TdGF0cyA9IGJ1aWxkLmhlcm9TdGF0cztcclxuICAgICAgICBzdGF0cy5hbGxTdGF0cyA9IHN0YXRzLmFsbFN0YXRzLmNvbmNhdChidWlsZC5oZXJvU3RhdHMpO1xyXG4gICAgICB9XHJcbiAgICAgIHN0YXRzLmFsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhzdGF0cy5hbGxTdGF0cyk7XHJcbiAgICAgIFxyXG4gICAgICBzdGF0cy5jYWxjdWxhdGVkU3RhdHMgPSB0aGlzLmdldENhbGN1bGF0ZWRTdGF0cyhidWlsZCwgc3RhdHMuYWxsU3RhdHMpO1xyXG4gICAgICByZXR1cm4gc3RhdHM7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCd0cmFuc2xhdGlvbnMnLCBbJyRyb3V0ZVBhcmFtcycsICckcm9vdFNjb3BlJywgdHJhbnNsYXRpb25zXSk7XHJcbmZ1bmN0aW9uIHRyYW5zbGF0aW9ucygkcm91dGVQYXJhbXMsICRyb290U2NvcGUpIHtcclxuXHJcbiAgdmFyIGRuVHJhbnNsYXRpb25zID0gbmV3IERuVHJhbnNsYXRpb25zKCk7XHJcbiAgdmFyIHNtYWxsRmlsZSA9ICd1aXN0cmluZy5vcHRpbWlzZWQubHpqc29uJztcclxuICB2YXIgYmlnRmlsZSA9ICd1aXN0cmluZy5sempzb24nO1xyXG5cclxuICB2YXIgY29tcGxldGVDYWxsYmFjayA9IFtdO1xyXG4gIHZhciBwcm9ncmVzc0NhbGxiYWNrID0gW107XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBcclxuICAgIHJlc2V0IDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGRuVHJhbnNsYXRpb25zID0gbmV3IERuVHJhbnNsYXRpb25zKCk7XHJcbiAgICAgIGRuVHJhbnNsYXRpb25zLnNpemVMaW1pdCA9IDEwMDtcclxuICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcclxuICAgICAgdGhpcy5zdGFydGVkTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICBjb21wbGV0ZUNhbGxiYWNrID0gW107XHJcbiAgICAgIHByb2dyZXNzQ2FsbGJhY2sgPSBbXTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldEZpbGVOYW1lOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYodGhpcy5zbWFsbCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIG9wdGltaXNlZCB0cmFuc2xhdGlvbnMnKTtcclxuICAgICAgICByZXR1cm4gc21hbGxGaWxlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIGZ1bGwgdHJhbnNsYXRpb25zJyk7XHJcbiAgICAgICAgcmV0dXJuIGJpZ0ZpbGU7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIGxvYWRlZCA6IGZhbHNlLFxyXG4gICAgc3RhcnRlZExvYWRpbmcgOiBmYWxzZSxcclxuICAgIHNtYWxsOiBmYWxzZSxcclxuICAgIFxyXG4gICAgbG9jYXRpb24gOiBudWxsLFxyXG4gIFxyXG4gICAgaW5pdCA6IGZ1bmN0aW9uKHByb2dyZXNzLCBjb21wbGV0ZSkge1xyXG5cclxuICAgICAgaWYodGhpcy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBwcm9ncmVzc0NhbGxiYWNrID0gW107XHJcbiAgICAgICAgaWYocHJvZ3Jlc3MpIHtcclxuICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2sucHVzaChwcm9ncmVzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGNvbXBsZXRlKSB7XHJcbiAgICAgICAgICBjb21wbGV0ZUNhbGxiYWNrLnB1c2goY29tcGxldGUpO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICBpZighdGhpcy5zdGFydGVkTG9hZGluZykge1xyXG4gICAgICAgICAgdGhpcy5zdGFydGVkTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZhciBmaWxlTmFtZSA9IG51bGw7XHJcbiAgICAgICAgICBpZih0aGlzLmxvY2F0aW9uICYmIHRoaXMubG9jYXRpb24gIT0gJycpIHtcclxuICAgICAgICAgICAgZmlsZU5hbWUgPSB0aGlzLmxvY2F0aW9uICsgJy8nICsgdGhpcy5nZXRGaWxlTmFtZSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoZmlsZU5hbWUgIT0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJVSVN0cmluZ3NfZmlsZVwiKSkge1xyXG4gICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ1VJU3RyaW5ncycpO1xyXG4gICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdVSVN0cmluZ3NfZmlsZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnVFJBTlNMQVRJT05fTE9BRF9FVkVOVCcpO1xyXG4gICAgICAgICAgZG5UcmFuc2xhdGlvbnMubG9hZERlZmF1bHRGaWxlKFxyXG4gICAgICAgICAgICBmaWxlTmFtZSwgXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcm9ncmVzc0NhbGxiYWNrLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7IHZhbHVlKG1zZyk7IH0pO1xyXG4gICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgdC5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChjb21wbGV0ZUNhbGxiYWNrLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7IHZhbHVlKCk7IH0pO1xyXG4gICAgICAgICAgICAgIGNvbXBsZXRlQ2FsbGJhY2sgPSBbXTtcclxuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ1RSQU5TTEFUSU9OX0xPQURfRVZFTlQnKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHByb2dyZXNzQ2FsbGJhY2ssIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgdmFsdWUobXNnKTsgfSk7XHJcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdUUkFOU0xBVElPTl9MT0FEX0VSUk9SJyk7XHJcbiAgICAgICAgICAgICAgdC5zdGFydGVkTG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIHQubG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBpc0xvYWRlZCA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZighdGhpcy5sb2FkZWQpIHtcclxuICAgICAgICB2YXIgZmlsZU5hbWUgPSB0aGlzLmxvY2F0aW9uICsgJy8nICsgdGhpcy5nZXRGaWxlTmFtZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGZpbGVOYW1lICE9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiVUlTdHJpbmdzX2ZpbGVcIikpIHtcclxuICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ1VJU3RyaW5ncycpO1xyXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ1VJU3RyaW5nc19maWxlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvYWRlZCA9IGRuVHJhbnNsYXRpb25zLmxvYWRGcm9tU2Vzc2lvbigpO1xyXG4gICAgICAgIGlmKHRoaXMubG9hZGVkKSB7XHJcbiAgICAgICAgICB0aGlzLnN0YXJ0ZWRMb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXMubG9hZGVkO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgdHJhbnNsYXRlIDogZnVuY3Rpb24oaWQsaWRQYXJhbSkge1xyXG4gICAgICBpZih0aGlzLmxvYWRlZCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXIgbmFtZTtcclxuICAgICAgICAgIGlmKCFpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbmFtZSA9IGRuVHJhbnNsYXRpb25zLnRyYW5zbGF0ZShpZCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZih0eXBlb2YgbmFtZSAhPSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgIHJldHVybiAnbScgKyBuYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKGlkUGFyYW0gJiYgbmFtZSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodHlwZW9mIGlkUGFyYW0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGlkUGFyYW0uc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICBmb3IodmFyIHA9MDtwPHBhcmFtcy5sZW5ndGg7KytwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGlkID0gcGFyYW1zW3BdO1xyXG4gICAgICAgICAgICAgICAgaWYocGlkLmluZGV4T2YoJ3snKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgIHBpZCA9IHBhcmFtc1twXS5yZXBsYWNlKC9cXHt8XFx9L2csJycpO1xyXG4gICAgICAgICAgICAgICAgICBwaWQgPSBkblRyYW5zbGF0aW9ucy50cmFuc2xhdGUocGlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgneycgKyBwICsgJ30nLCBwaWQpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKCd7MH0nLCBpZFBhcmFtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChleCkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ3VuYWJsZSB0byB0cmFuc2xhdGUnLCBpZCwgaWRQYXJhbSwgZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuICdtJyArIGlkO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdoQ29kZVZhbHVlcycsIFtoQ29kZVZhbHVlc10pO1xyXG5mdW5jdGlvbiBoQ29kZVZhbHVlcygpIHtcclxuXHJcbiAgZnVuY3Rpb24gdG9PbmVEZWMoc3RhdCkge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoc3RhdC5tYXgqMTApLzEwO1xyXG4gIH1cclxuICBmdW5jdGlvbiB0b05vRGVjKHN0YXQpIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKHN0YXQubWF4KTtcclxuICB9XHJcbiAgZnVuY3Rpb24gaW5UaG91c2FuZHMoc3RhdCkge1xyXG4gICAgdmFyIHZhbCA9IE51bWJlcihzdGF0Lm1heCk7XHJcbiAgICBpZih2YWwgPCAxMDApIHtcclxuICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodmFsIDwgMTAwMDAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbC8xMDApLzEwICsgJ2snO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih2YWwgPCAxMDAwMDAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbC8xMDAwKSArICdrJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYodmFsIDwgMTAwMDAwMDApIHtcclxuICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsLzEwMDAwKS8xMDAgKyAnbSc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsLzEwMDAwMDApICsgJ20nO1xyXG4gICAgfVxyXG4gIH1cclxuICBmdW5jdGlvbiB0b1BlcmNlbnQoc3RhdCkge1xyXG4gICAgcmV0dXJuIChNYXRoLnJvdW5kKHN0YXQubWF4KjEwMDAwKS8xMDApICsgJyUnO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgc3RhdHMgOiB7XHJcbiAgICAgIDAgIDoge2lkOiAwLCBuYW1lOiAnc3RyJywgZGlzcGxheTogdG9Ob0RlYywgZHBzOiB0cnVlLCBwYzogNTAsIHNrUGM6IDQwNTAsIHNlYXJjaGFibGU6IHRydWUsIHF1aWNrSGlnaDogdHJ1ZSB9LFxyXG4gICAgICAxICA6IHtpZDogMSwgbmFtZTogJ2FnaScsIGRpc3BsYXk6IHRvTm9EZWMsIGRwczogdHJ1ZSwgcGM6IDUxLCBza1BjOiA0MDUxLCBzZWFyY2hhYmxlOiB0cnVlLCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgMiAgOiB7aWQ6IDIsIG5hbWU6ICdpbnQnLCBkaXNwbGF5OiB0b05vRGVjLCBkcHM6IHRydWUsIHBjOiA1Miwgc2tQYzogNDA1Miwgc2VhcmNoYWJsZTogdHJ1ZSwgcXVpY2tIaWdoOiB0cnVlIH0sXHJcbiAgICAgIDMgIDoge2lkOiAzLCBuYW1lOiAndml0JywgZGlzcGxheTogdG9Ob0RlYywgZGVmOiB0cnVlLCBwYzogNTMsIHNrUGM6IDQwNTMsIHNlYXJjaGFibGU6IHRydWUsIHF1aWNrSGlnaDogdHJ1ZSB9LFxyXG4gICAgICA0ICA6IHtpZDogNCwgbmFtZTogJ3BkbWcnLCBkaXNwbGF5OiB0b05vRGVjLCBjb21iaW5lV2l0aDogNSwgZHBzOiB0cnVlLCBwYzogNTQsIHNlYXJjaGFibGU6IHRydWUsIGFsdFN0YXQ6IDMyLCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgNSAgOiB7aWQ6IDUsIG5hbWU6ICdtYXhQZG1nJywgZGlzcGxheTogdG9Ob0RlYywgaGlkZTogdHJ1ZSwgcGM6IDU1IH0sXHJcbiAgICAgIDYgIDoge2lkOiA2LCBuYW1lOiAnbWRtZycsIGRpc3BsYXk6IHRvTm9EZWMsIGNvbWJpbmVXaXRoOiA3LCBkcHM6IHRydWUsIHBjOiA1Niwgc2VhcmNoYWJsZTogdHJ1ZSwgYWx0U3RhdDogMzMsIHF1aWNrSGlnaDogdHJ1ZSB9LFxyXG4gICAgICA3ICA6IHtpZDogNywgbmFtZTogJ21heE1kbWcnLCBkaXNwbGF5OiB0b05vRGVjLCBoaWRlOiB0cnVlLCBwYzogNTcgfSxcclxuICAgICAgOCAgOiB7aWQ6IDgsIG5hbWU6ICdwZGVmJywgZGlzcGxheTogaW5UaG91c2FuZHMsIGRlZjogdHJ1ZSwgcGM6IDU4LCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIDkgIDoge2lkOiA5LCBuYW1lOiAnbWRlZicsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBkZWY6IHRydWUsIHBjOiA1OSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAxMCA6IHtpZDogMTAsIG5hbWU6ICdwYXJhJywgZGlzcGxheTogaW5UaG91c2FuZHMsIHBjOiA2MCwgbm9DdXN0b206IHRydWUgfSxcclxuICAgICAgMTEgOiB7aWQ6IDExLCBuYW1lOiAncGFyYSByZXNpc3QnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgcGM6IDYxLCBub0N1c3RvbTogdHJ1ZSB9LFxyXG4gICAgICAxMiA6IHtpZDogMTIsIG5hbWU6ICdjcml0JywgZGlzcGxheTogaW5UaG91c2FuZHMsIGRwczogdHJ1ZSwgcGM6IDYyLCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIDEzIDoge2lkOiAxMywgbmFtZTogJ2NyaXQgcmVzaXN0JywgZGlzcGxheTogaW5UaG91c2FuZHMsIHBjOiA2Mywgbm9DdXN0b206IHRydWUgfSxcclxuICAgICAgMTQgOiB7aWQ6IDE0LCBuYW1lOiAnc3R1bicsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBwYzogNjQsIG5vQ3VzdG9tOiB0cnVlIH0sXHJcbiAgICAgIDE1IDoge2lkOiAxNSwgbmFtZTogJ3N0dW4gcmVzaXN0JywgZGlzcGxheTogaW5UaG91c2FuZHMsIHBjOiA2NSwgbm9DdXN0b206IHRydWUgfSxcclxuICAgICAgMTYgOiB7aWQ6IDE2LCBuYW1lOiAnZmlyZSUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRwczogdHJ1ZSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAxNyA6IHtpZDogMTcsIG5hbWU6ICdpY2UlJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUsIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMTggOiB7aWQ6IDE4LCBuYW1lOiAnbGlnaHQlJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUsIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMTkgOiB7aWQ6IDE5LCBuYW1lOiAnZGFyayUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRwczogdHJ1ZSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAyMCA6IHtpZDogMjAsIG5hbWU6ICdmaXJlIGRlZicsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlLCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIDIxIDoge2lkOiAyMSwgbmFtZTogJ2ljZSBkZWYnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAyMiA6IHtpZDogMjIsIG5hbWU6ICdsaWdodCBkZWYnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAyMyA6IHtpZDogMjMsIG5hbWU6ICdkYXJrIGRlZicsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlLCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIDI1IDoge2lkOiAyNSwgbmFtZTogJ2hwJywgZGlzcGxheTogaW5UaG91c2FuZHMsIGRlZjogdHJ1ZSwgcGM6IDc1LCBza1BjOiA0MDc1LCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIDI2IDoge2lkOiAyNiwgbmFtZTogJ21wJywgZGlzcGxheTogaW5UaG91c2FuZHMsIGRlZjogdHJ1ZSwgcGM6IDc2LCBza1BjOiA0MDc2IH0sXHJcbiAgICAgIDI5IDoge2lkOiAyOSwgbmFtZTogJ2ZkJywgZGlzcGxheTogdG9Ob0RlYywgZHBzOiB0cnVlLCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIFxyXG4gICAgICAvLyB0aGVzZSBhcmUgYm90aCBtaW4gYW5kIG1heFxyXG4gICAgICAvLyBzaG93cyB3aXRoIHRoZSBzYW1lIG5hbWUgYnV0IHRoZXNlIGFyZSB1c2VkIHJlYWxseSBqdXN0IGZvciBzZXQgYm9udXMgSSB0aGlua1xyXG4gICAgICAzMiA6IHtpZDogMzIsIG5hbWU6ICdwZG1nJywgZGlzcGxheTogdG9Ob0RlYywgZHBzOiB0cnVlLCBwYzogNTQsIHF1aWNrSGlnaDogdHJ1ZSB9LFxyXG4gICAgICAzMyA6IHtpZDogMzMsIG5hbWU6ICdtZG1nJywgZGlzcGxheTogdG9Ob0RlYywgZHBzOiB0cnVlLCBwYzogNTYsIHF1aWNrSGlnaDogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgNTAgOiB7aWQ6IDUwLCBuYW1lOiAnc3RyJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDUxIDoge2lkOiA1MSwgbmFtZTogJ2FnaSUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRwczogdHJ1ZSB9LFxyXG4gICAgICA1MiA6IHtpZDogNTIsIG5hbWU6ICdpbnQlJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUgfSxcclxuICAgICAgNTMgOiB7aWQ6IDUzLCBuYW1lOiAndml0JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIDU0IDoge2lkOiA1NCwgbmFtZTogJ3BkbWclJywgZGlzcGxheTogdG9QZXJjZW50LCBjb21iaW5lV2l0aDogNTUsIGRwczogdHJ1ZSB9LFxyXG4gICAgICA1NSA6IHtpZDogNTUsIG5hbWU6ICdtYXhQZG1nJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgaGlkZTogdHJ1ZSB9LFxyXG4gICAgICA1NiA6IHtpZDogNTYsIG5hbWU6ICdtZG1nJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgY29tYmluZVdpdGg6IDU3LCBkcHM6IHRydWUgfSxcclxuICAgICAgNTcgOiB7aWQ6IDU3LCBuYW1lOiAnbWF4TWRtZyUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGhpZGU6IHRydWUgfSxcclxuICAgICAgNTggOiB7aWQ6IDU4LCBuYW1lOiAncGRlZiUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA1OSA6IHtpZDogNTksIG5hbWU6ICdtZGVmJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIDYwIDoge2lkOiA2MCwgbmFtZTogJ3BhcmElJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIDYxIDoge2lkOiA2MSwgbmFtZTogJ3BhcmEgcmVzaXN0JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA2MiA6IHtpZDogNjIsIG5hbWU6ICdjcml0JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDYzIDoge2lkOiA2MywgbmFtZTogJ2NyaXQgcmVzaXN0JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIDY0IDoge2lkOiA2NCwgbmFtZTogJ3N0dW4lJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIDY1IDoge2lkOiA2NSwgbmFtZTogJ3N0dW4gcmVzaXN0JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA3NCA6IHtpZDogNzQsIG5hbWU6ICdtb3ZlJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA3NSA6IHtpZDogNzUsIG5hbWU6ICdocCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA3NiA6IHtpZDogNzYsIG5hbWU6ICdtcCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA3NyA6IHtpZDogNzcsIG5hbWU6ICdtcCByZWNvdmVyJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIDgxIDoge2lkOiA4MSwgbmFtZTogJ3NhZmUgbW92ZSUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkZWY6IHRydWUgfSxcclxuXHJcbiAgICAgIC8vIHRoZXNlIGFyZSBib3RoIG1pbiBhbmQgbWF4XHJcbiAgICAgIC8vIHNob3dzIHdpdGggdGhlIHNhbWUgbmFtZSBidXQgdGhlc2UgYXJlIHVzZWQgcmVhbGx5IGp1c3QgZm9yIHNldCBib251cyBJIHRoaW5rXHJcbiAgICAgIDEwMSA6IHtpZDogMTAxLCBuYW1lOiAncGRtZyUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkcHM6IHRydWUsIHF1aWNrSGlnaDogdHJ1ZSB9LFxyXG4gICAgICAxMDIgOiB7aWQ6IDEwMiwgbmFtZTogJ21kbWclJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlLCBxdWlja0hpZ2g6IHRydWUgfSxcclxuXHJcbiAgICAgIDEwMzoge2lkOiAxMDMsIG5hbWU6ICdjZG1nJywgZGlzcGxheTogaW5UaG91c2FuZHMsIGRwczogdHJ1ZSwgcGM6IDEwNCwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAxMDQ6IHtpZDogMTA0LCBuYW1lOiAnY3JpdCBkbWclJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDEwNToge2lkOiAxMDQsIG5hbWU6ICdwdnAgZG1nJywgZGlzcGxheTogaW5UaG91c2FuZHMsIG5vQ3VzdG9tOiB0cnVlLCBkcHM6IHRydWUgfSxcclxuICAgICAgMTA2OiB7aWQ6IDEwNiwgbmFtZTogJ3B2cCBkZWYnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgbm9DdXN0b206IHRydWUsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICAxMDc6IHtpZDogMTA3LCBuYW1lOiAnbXA/JywgZGlzcGxheTogdG9Ob0RlYywgbm9DdXN0b206IHRydWUsIGhpZGU6IHRydWUsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgLy8gc3RhdHMgYmVsb3cgaGVyZSBhcmUgb25lcyBJIG1hZGUgdXBcclxuICAgICAgMTAwMToge2lkOiAxMDAxLCBuYW1lOiAnZG1nJywgZGlzcGxheTogaW5UaG91c2FuZHMsIHN1bW1hcnlEaXNwbGF5OiB0cnVlLCBlbGVtZW50OiAncHJpbWFyeScsIG5vQ3VzdG9tOiB0cnVlLCBoaWRlOiB0cnVlIH0sXHJcbiAgICAgIDEwMDQ6IHtpZDogMTAwNCwgbmFtZTogJ3BkbWcnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgc3VtbWFyeURpc3BsYXk6IHRydWUsIGVsZW1lbnQ6ICdwcmltYXJ5Jywgbm9DdXN0b206IHRydWUsIGhpZGU6IHRydWUgfSxcclxuICAgICAgMTAwNjoge2lkOiAxMDA2LCBuYW1lOiAnbWRtZycsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBzdW1tYXJ5RGlzcGxheTogdHJ1ZSwgZWxlbWVudDogJ3ByaW1hcnknLCBub0N1c3RvbTogdHJ1ZSwgaGlkZTogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgMTAwODoge2lkOiAxMDA4LCBuYW1lOiAncGRlZicsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIHN1bW1hcnlGb3I6IDggfSxcclxuICAgICAgMTAwOToge2lkOiAxMDA5LCBuYW1lOiAnbWRlZicsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIHN1bW1hcnlGb3I6IDkgfSxcclxuICAgICAgXHJcbiAgICAgIDEwMTI6IHtpZDogMTAxMiwgbmFtZTogJ2NyaXQgY2hhbmNlJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlLCBzdW1tYXJ5Rm9yOiAxMiB9LFxyXG4gICAgICAxMDI5OiB7aWQ6IDEwMjksIG5hbWU6ICdmZCcsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRwczogdHJ1ZSwgc3VtbWFyeUZvcjogMjkgfSxcclxuICAgICAgMTEwMzoge2lkOiAxMTAzLCBuYW1lOiAnY3JpdCBkbWcnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkcHM6IHRydWUsIHN1bW1hcnlGb3I6IDEwMyB9LFxyXG4gICAgICBcclxuICAgICAgMjAwMToge2lkOiAyMDAxLCBuYW1lOiAnZG1nJywgZGlzcGxheTogaW5UaG91c2FuZHMsIHN1bW1hcnlEaXNwbGF5OiB0cnVlLCBlbGVtZW50OiAnc2Vjb25kYXJ5Jywgbm9DdXN0b206IHRydWUsIGhpZGU6IHRydWUgfSxcclxuICAgICAgMjAwNDoge2lkOiAyMDA0LCBuYW1lOiAncGRtZycsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBzdW1tYXJ5RGlzcGxheTogdHJ1ZSwgZWxlbWVudDogJ3NlY29uZGFyeScsIG5vQ3VzdG9tOiB0cnVlLCBoaWRlOiB0cnVlIH0sXHJcbiAgICAgIDIwMDY6IHtpZDogMjAwNiwgbmFtZTogJ21kbWcnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgc3VtbWFyeURpc3BsYXk6IHRydWUsIGVsZW1lbnQ6ICdzZWNvbmRhcnknLCBub0N1c3RvbTogdHJ1ZSwgaGlkZTogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgMjAwODoge2lkOiAyMDA4LCBuYW1lOiAncGRlZiBlcWhwJywgZGlzcGxheTogaW5UaG91c2FuZHMsIG5vQ3VzdG9tOiB0cnVlIH0sXHJcbiAgICAgIDIwMDk6IHtpZDogMjAwOSwgbmFtZTogJ21kZWYgZXFocCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBub0N1c3RvbTogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgMzAwMDoge2lkOiAzMDAwLCBuYW1lOiAnc2tEbWclJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUgfSxcclxuICAgICAgMzAwMToge2lkOiAzMDAxLCBuYW1lOiAnc2tQRG1nJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDMwMDI6IHtpZDogMzAwMiwgbmFtZTogJ3NrTURtZyUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRwczogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgMzAwODoge2lkOiAzMDA4LCBuYW1lOiAnZXFocCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBzdW1tYXJ5RGlzcGxheTogdHJ1ZSwgbm9DdXN0b206IHRydWUsIGhpZGU6IHRydWUgfSxcclxuICAgICAgXHJcbiAgICAgIDQwMTI6IHtpZDogNDAxMiwgbmFtZTogJ3NrQ3JpdCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBkcHM6IHRydWUgfSxcclxuICAgICAgNDA1MDoge2lkOiA0MDUwLCBuYW1lOiAnc2tTdHIlJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUgfSxcclxuICAgICAgNDA1MToge2lkOiA0MDUxLCBuYW1lOiAnc2tBZ2klJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUgfSxcclxuICAgICAgNDA1Mjoge2lkOiA0MDUyLCBuYW1lOiAnc2tJbnQlJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUgfSxcclxuICAgICAgNDA1Mzoge2lkOiA0MDUzLCBuYW1lOiAnc2tWaXQlJywgZGlzcGxheTogdG9QZXJjZW50LCBkZWY6IHRydWUgfSxcclxuICAgICAgNDA3NToge2lkOiA0MDc1LCBuYW1lOiAnc2tIcCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA0MDc2OiB7aWQ6IDQwNzYsIG5hbWU6ICdza01wJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIFxyXG4gICAgICAvLyBzcGVjaWFsIGNhc2VzIGZvciBza2lsbHNcclxuICAgICAgMTAxNjQ6IHtpZDogMTAxNjQsIG5hbWU6ICdpbnRUb1BkbWcnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkcHM6IHRydWUgfSxcclxuICAgICAgMTAxNjU6IHtpZDogMTAxNjUsIG5hbWU6ICdzdHJUb01kbWcnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkcHM6IHRydWUgfSxcclxuICAgICAgMTAzNzI6IHtpZDogMTAzNzIsIG5hbWU6ICdpbnRUb01kbWcnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkcHM6IHRydWUgfSxcclxuICAgICAxMTAzNzM6IHtpZDogMTEwMzczLCBuYW1lOiAnZGVmVG9QZG1nJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIC8vIGl0ZW1zIG92ZXIgMTAwMDAgYXJlIHVua25vd24gc2tpbGwgZWZmZWN0c1xyXG4gICAgfSxcclxuICBcclxuICAgIHJhbmtOYW1lcyA6IHtcclxuICAgICAgMCA6IHsgaWQ6IDAsIG5hbWUgOiAnbm9ybWFsJyB9LFxyXG4gICAgICAxIDogeyBpZDogMSwgbmFtZSA6ICdtYWdpYycgfSxcclxuICAgICAgMiA6IHsgaWQ6IDIsIG5hbWUgOiAncmFyZScgfSxcclxuICAgICAgMyA6IHsgaWQ6IDMsIG5hbWUgOiAnZXBpYycgfSxcclxuICAgICAgNCA6IHsgaWQ6IDQsIG5hbWUgOiAndW5pcXVlJyB9LFxyXG4gICAgICA1IDogeyBpZDogNSwgbmFtZSA6ICdsZWdlbmRhcnknIH0sXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzaG9wTmFtZXMgOiB7XHJcbiAgICAgIDI4MDAxOiAnbGFtZW50JywyODAwMjogJ2xhbWVudCcsMjgwMDM6ICdsYW1lbnQnLDI4MDA0OiAnbGFtZW50JywyODAwNTogJ2xhbWVudCcsMjgwMDY6ICdsYW1lbnQnLDI4MDA3OiAnbGFtZW50JywyODAwODogJ2xhbWVudCcsMjgwMDk6ICdsYW1lbnQnLDI4MTAxOiAnbGFtZW50JyxcclxuICAgICAgMjkwMDE6ICdhdXJhJywyOTAwMjogJ2F1cmEnLDI5MDAzOiAnYXVyYScsMjkwMDQ6ICdhdXJhJywyOTAwNTogJ2F1cmEnLDI5MDA2OiAnYXVyYScsMjkwMDc6ICdhdXJhJywyOTAwODogJ2F1cmEnLDI5MDA5OiAnYXVyYScsXHJcbiAgICAgIDUwMDE6ICdtZWRhbCcsNTAwMjogJ21lZGFsJyw1MDAzOiAnbWVkYWwnLDUwMDQ6ICdtZWRhbCcsNTAwNTogJ21lZGFsJyw1MDA2OiAnbWVkYWwnLDUwMDc6ICdtZWRhbCcsNTAwODogJ21lZGFsJyw1MDA5OiAnbWVkYWwnLFxyXG4gICAgICA1MTAxOiAnbGFkZGVyJyw1MTAyOiAnbGFkZGVyJyw1MTAzOiAnbGFkZGVyJyw1MTA0OiAnbGFkZGVyJyw1MTA1OiAnbGFkZGVyJyw1MTA2OiAnbGFkZGVyJyw1MTA3OiAnbGFkZGVyJyw1MTA4OiAnbGFkZGVyJyw1MTA5OiAnbGFkZGVyJyxcclxuICAgICAgNTkwMDE6ICdnYXJkZW4gYnVubnknLFxyXG4gICAgICA1MjAwMSA6ICduaWdodG1hcmUnLCA1MjAwMiA6ICduaWdodG1hcmUnLCA1MjAwMyA6ICduaWdodG1hcmUnLCA1MjAwNCA6ICduaWdodG1hcmUnLCA1MjAwNSA6ICduaWdodG1hcmUnLCA1MjAwNiA6ICduaWdodG1hcmUnLCA1MjAwNyA6ICduaWdodG1hcmUnLCA1MjAwOCA6ICduaWdodG1hcmUnLCA1MjAwOSA6ICduaWdodG1hcmUnLFxyXG4gICAgICAyMTogJ2JsYWNrc21pdGgnLCAyMjogJ2JsYWNrc21pdGgnLCAyMzogJ2JsYWNrc21pdGgnLCAyNDogJ2JsYWNrc21pdGgnLCAyNTogJ2JsYWNrc21pdGgnLCAyNjogJ2JsYWNrc21pdGgnLCAyNzogJ2JsYWNrc21pdGgnLCAyODogJ2JsYWNrc21pdGgnLCAyOTogJ2JsYWNrc21pdGgnLCBcclxuICAgICAgODkwMDE6ICdndWlsZCBtYXN0ZXInLFxyXG4gICAgICA4ODAwMTogJ2JhdHRsZWZpZWxkJywgODgwMDI6ICdiYXR0bGVmaWVsZCcsIDg4MDAzOiAnYmF0dGxlZmllbGQnLCA4ODAwNDogJ2JhdHRsZWZpZWxkJywgODgwMDU6ICdiYXR0bGVmaWVsZCcsIDg4MDA2OiAnYmF0dGxlZmllbGQnLCA4ODAwNzogJ2JhdHRsZWZpZWxkJywgODgwMDg6ICdiYXR0bGVmaWVsZCcsIDg4MDA5OiAnYmF0dGxlZmllbGQnLCBcclxuICAgICAgNjYwMDE6ICdlcm9zaW9uJyxcclxuICAgICAgMzUwMDY6ICdwbGF0ZScsXHJcbiAgICAgIDE0MDUxOiAnYWJ5c3MnLCAxNDA1MjogJ2FieXNzJywgMTQwNTM6ICdhYnlzcycsIDE0MDU0OiAnYWJ5c3MnLCAxNDA1NTogJ2FieXNzJywgMTQwNTY6ICdhYnlzcycsIDE0MDU3OiAnYWJ5c3MnLCAxNDA1ODogJ2FieXNzJywgMTQwNTk6ICdhYnlzcycsIFxyXG4gICAgICA0MDAxMTogJ2RhcmVkZXZpbCBmYWlyZScsIDQwMDEyOiAnZGFyZWRldmlsIGZhaXJlJywgNDAwMTM6ICdkYXJlZGV2aWwgZmFpcmUnLCA0MDAxNDogJ2RhcmVkZXZpbCBmYWlyZScsIDQwMDE1OiAnZGFyZWRldmlsIGZhaXJlJywgNDAwMTY6ICdkYXJlZGV2aWwgZmFpcmUnLCA0MDAxNzogJ2RhcmVkZXZpbCBmYWlyZScsIDQwMDE4OiAnZGFyZWRldmlsIGZhaXJlJyxcclxuICAgICAgNDAwMDE6ICdkYXJlZGV2aWwgZmFpcmUnLCA0MDAwMjogJ2RhcmVkZXZpbCBmYWlyZScsIDQwMTExOiAnZGFyZWRldmlsIGZhaXJlJyxcclxuICAgICAgOTEwMDE6ICd3cmF0aCcsXHJcbiAgICAgIDQ1MDAxOiAnZmFybScsXHJcbiAgICAgIDEwMDAwNDogJ2V2ZW50J1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgY2hlY2tlZFJhbmsgOiB7XHJcbiAgICAgIDAgOiB0cnVlLFxyXG4gICAgICAxIDogdHJ1ZSxcclxuICAgICAgMiA6IHRydWUsXHJcbiAgICAgIDMgOiB0cnVlLFxyXG4gICAgICA0IDogdHJ1ZSxcclxuICAgICAgNSA6IHRydWUsXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICB0eXBlTmFtZXMgOiB7XHJcbiAgICAgIDAgOiAnd2VhcG9ucycsXHJcbiAgICAgIDEgOiAnZXF1aXBtZW50JyxcclxuICAgICAgNSA6ICdwbGF0ZXMnLFxyXG4gICAgICA4IDogJ3BvdWNoJyxcclxuICAgICAgMzggOiAncGxhdGVzJyxcclxuICAgICAgOTAgOiAnd2Vsc3ByaW5nJyxcclxuICAgICAgMTMyIDogJ3RhbGlzbWFuJyxcclxuICAgICAgMTM5IDogJ2dlbXMnLFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZWxlbWVudHMgOiB7XHJcbiAgICAgIDAgOiB7IGlkOiAwLCBuYW1lOiAnbm9uLWVsZScgfSxcclxuICAgICAgMSA6IHsgaWQ6IDEsIG5hbWU6ICdmaXJlJywgZG1nU3RhdDogMTYgfSxcclxuICAgICAgMiA6IHsgaWQ6IDIsIG5hbWU6ICdpY2UnLCBkbWdTdGF0OiAxNyB9LFxyXG4gICAgICAzIDogeyBpZDogMywgbmFtZTogJ2xpZ2h0JywgZG1nU3RhdDogMTggfSxcclxuICAgICAgNCA6IHsgaWQ6IDQsIG5hbWU6ICdkYXJrJywgZG1nU3RhdDogMTkgfSxcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGRhbWFnZVR5cGVzIDoge1xyXG4gICAgICAwIDogeyBpZDogMCwgbmFtZTogJ2JvdGggc2VwYXJhdGUnIH0sXHJcbiAgICAgIDEgOiB7IGlkOiAxLCBuYW1lOiAncGh5c2ljYWwnIH0sXHJcbiAgICAgIDIgOiB7IGlkOiAyLCBuYW1lOiAnbWFnaWNhbCcgfSxcclxuICAgICAgMyA6IHsgaWQ6IDMsIG5hbWU6ICdib3RoIGNvbWJpbmVkJyB9LFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgLy8gbm90ZTogc2tpbGxzIHNob3duIG9uLXNjcmVlbiBoYXZlIDFrIGFkZGVkIHRvIHRoZWlyIGlkXHJcbiAgICBza2lsbEVmZmVjdE1hcHBpbmcgOiB7XHJcbiAgICAgIDIgOiB7IGlkOiAyLCBuYW1lOiAncGh5aXNpY2FsIGF0dGFjayBwb3dlcicsIG1hcFRvOiAzMDAxIH0sXHJcbiAgICAgIDEzIDogeyBpZDogMTMsIG5hbWU6ICdtcCcsIG1hcFRvOiAyNiB9LFxyXG4gICAgICAyNSA6IHsgaWQ6IDI1LCBuYW1lOiAnYWN0aW9uIHNwZWVkJyB9LFxyXG4gICAgICAyOSA6IHsgaWQ6IDI5LCBuYW1lOiAnbWFnaWMgYXR0YWNrIHBvd2VyJywgbWFwVG86IDMwMDIgfSxcclxuICAgICAgMzIgOiB7IGlkOiAzMiwgbmFtZTogJ2ZpcmUgJScsIG1hcFRvOiAxNiB9LFxyXG4gICAgICAzMyA6IHsgaWQ6IDMzLCBuYW1lOiAnaWNlICUnLCBtYXBUbzogMTcgfSxcclxuICAgICAgMzQgOiB7IGlkOiAzNCwgbmFtZTogJ2xpZ2h0ICUnLCBtYXBUbzogMTggfSxcclxuICAgICAgMzUgOiB7IGlkOiAzNSwgbmFtZTogJ2RhcmsgJScsIG1hcFRvOiAxOSB9LFxyXG4gICAgICAzNiA6IHsgaWQ6IDM2LCBuYW1lOiAnZmlyZSBkZWYnLCBtYXBUbzogMjAgfSxcclxuICAgICAgMzcgOiB7IGlkOiAzNywgbmFtZTogJ2ljZSBkZWYnLCBtYXBUbzogMjEgfSxcclxuICAgICAgMzggOiB7IGlkOiAzOCwgbmFtZTogJ2xpZ2h0IGRlZicsIG1hcFRvOiAyMiB9LFxyXG4gICAgICAzOSA6IHsgaWQ6IDM5LCBuYW1lOiAnZGFyayBkZWYnLCBtYXBUbzogMjMgfSxcclxuICAgICAgNTggOiB7IGlkOiA1OCwgbmFtZTogJ2hwJScsIG1hcFRvOiA0MDc1IH0sXHJcbiAgICAgIDU5IDogeyBpZDogNTksIG5hbWU6ICdtcCUnLCBtYXBUbzogNDA3NiB9LFxyXG4gICAgICA2NSA6IHsgaWQ6IDY1LCBuYW1lOiAncmFuZ2UnIH0sXHJcbiAgICAgIDc2IDogeyBpZDogNzYsIG5hbWU6ICdtb3ZlbWVudCBzcGVlZCcsIG1hcFRvOiA3NCB9LFxyXG4gICAgICA4NyA6IHsgaWQ6IDg3LCBuYW1lOiAnc3RyJScsIG1hcFRvOiA0MDUwIH0sXHJcbiAgICAgIDg4IDogeyBpZDogODgsIG5hbWU6ICdhZ2klJywgbWFwVG86IDQwNTEgfSxcclxuICAgICAgODkgOiB7IGlkOiA4OSwgbmFtZTogJ2ludCUnLCBtYXBUbzogNDA1MiB9LFxyXG4gICAgICA5MCA6IHsgaWQ6IDkwLCBuYW1lOiAndml0JScsIG1hcFRvOiA0MDUzIH0sXHJcbiAgICAgIC8vIDEzNCA6IHsgaWQ6IDEzNCwgbmFtZTogJ3AgZG1nIHJlZHVjdGlvbiUnIH0sXHJcbiAgICAgIC8vIDEzNSA6IHsgaWQ6IDEzNSwgbmFtZTogJ20gZG1nIHJlZHVjdGlvbiUnIH0sXHJcbiAgICAgIDE4NSA6IHsgaWQ6IDE4NSwgbmFtZTogJ3dvdHMgYXR0YWNrIHBvd2VyJywgbWFwVG86IDMwMDAgfSxcclxuICAgICAgMjUxIDogeyBpZDogMjUxLCBuYW1lOiAnY3JpdGljYWwgY2hhbmNlJScsIG1hcFRvOiAxMDEyIH0sXHJcbiAgICAgIDE2NCA6IHsgaWQ6IDE2NCwgbmFtZTogJ2ludFRvUGRtZycsIG1hcFRvOiAxMDE2NCB9LFxyXG4gICAgICAxNjUgOiB7IGlkOiAxNjUsIG5hbWU6ICdzdHJUb01kbWcnLCBtYXBUbzogMTAxNjUgfSxcclxuICAgICAgMjIyOiB7XHJcbiAgICAgICAgaWQ6IDIyMiwgXHJcbiAgICAgICAgbmFtZTogJ2hlbGxmaXJlJywgXHJcbiAgICAgICAgZ2V0VmFsczogZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgICBpZih2YWwuaW5kZXhPZignOycpID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgdmFscyA9IHZhbC5zcGxpdCgnOycpO1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgIHtpZDogNjIsIGVmZmVjdDogMjIyLCBtYXg6IE51bWJlcih2YWxzWzBdKS8xMDAuMH0sXHJcbiAgICAgICAgICAgICAge2lkOiA0MDEyLCBlZmZlY3Q6IDIyMiwgbWF4OiBOdW1iZXIodmFsc1sxXSl9LFxyXG4gICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt7aWQ6IDYyLCBlZmZlY3Q6IDIyMiwgbWF4OiBOdW1iZXIodmFsKS8xMDAuMH1dO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgMzcyOiB7XHJcbiAgICAgICAgaWQ6IDM3MixcclxuICAgICAgICBuYW1lOiAnc3RhdENvbnZlcnNpb24nLFxyXG4gICAgICAgIGdldFZhbHM6IGZ1bmN0aW9uKHZhbCkge1xyXG4gICAgICAgICAgaWYodmFsLmluZGV4T2YoJzsnKSA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHZhbHMgPSB2YWwuc3BsaXQoJzsnKTtcclxuICAgICAgICAgICAgaWYodmFscy5sZW5ndGggPT0gMyAmJiB2YWxzWzBdID09IDIgJiYgdmFsc1syXSA9PSA2KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFt7IGlkOiAxMDM3MiwgbmFtZTogJ2ludFRvTWRtZycsIG1heDogTnVtYmVyKHZhbHNbMV0pIH1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYodmFscy5sZW5ndGggPT0gMyAmJiB2YWxzWzBdID09IDUgJiYgdmFsc1syXSA9PSA3KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFt7IGlkOiAxMTAzNzMsIG5hbWU6ICdkZWZUb1BkbWcnLCBtYXg6IE51bWJlcih2YWxzWzFdKSB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgXHJcbiAgICAgIFxyXG4gICAgICAzODk6IHsgaWQ6IDM4OSwgbmFtZTogJ2ZkIGJ1ZicsIG1hcFRvOiAxMDI5IH0sXHJcbiAgICAgIDQwNDogeyBpZDogNDA0LCBuYW1lOiAnY3JpdGljYWwgZGFtYWdlJScsIG1hcFRvOiAxMTAzIH0sXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZW1FeGNoYW5nZXM6IFtcclxuICAgICAge2lkOiAyLCBleGNoYW5nZTogMSwgbmFtZTogJ1dlYXBvbid9LFxyXG4gICAgICB7aWQ6IDMsIGV4Y2hhbmdlOiAyLCBuYW1lOiAnT2ZmLUhhbmQgV2VhcG9uJ30sXHJcbiAgICAgIHtpZDogNCwgZXhjaGFuZ2U6IDMsIG5hbWU6ICdIZWFkZ2Vhcid9LFxyXG4gICAgICB7aWQ6IDUsIGV4Y2hhbmdlOiA0LCBuYW1lOiAnQm9keSBBcm1vcid9LFxyXG4gICAgICB7aWQ6IDYsIGV4Y2hhbmdlOiA1LCBuYW1lOiAnTGVnIEFybW9yJ30sXHJcbiAgICAgIHtpZDogNywgZXhjaGFuZ2U6IDYsIG5hbWU6ICdHbG92ZXMnfSxcclxuICAgICAge2lkOiA4LCBleGNoYW5nZTogNywgbmFtZTogJ1Nob2VzJ30sXHJcbiAgICAgIHtpZDogMTAxLCBleGNoYW5nZTogOCwgbmFtZTogJ05lY2tsYWNlJ30sXHJcbiAgICAgIHtpZDogMTAyLCBleGNoYW5nZTogOSwgbmFtZTogJ0VhcnJpbmdzJ30sXHJcbiAgICAgIHtpZDogMTAzLCBleGNoYW5nZTogMTAsIG5hbWU6ICdSaW5nJ30sXHJcbiAgICBdLFxyXG4gICAgXHJcbiAgICBjdXN0b21JdGVtczogXHJcbiAgICBbXHJcbiAgICB7aWQ6IDAsIHR5cGVOYW1lOidjdXN0b20nLCBuYW1lOiAnaHAgdW5pZmllZCcsIHN0YXRzOiBbe2lkOiA0MDc1LCBtYXg6MC4wNX1dfSxcclxuICAgIF0sXHJcbiAgXHJcbiAgICBnZXRTdGF0cyA6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHJcbiAgICAgIHZhciB1c2VNYXg9ZmFsc2U7XHJcbiAgICAgIHZhciB1c2VTdGF0ZVhWYWw9ZmFsc2U7XHJcbiAgICAgIHZhciBtaWdodEhhdmVTZXRzPXRydWU7XHJcbiAgICAgIHZhciBwcm9wID0gJ1N0YXRlMV9NYXgnO1xyXG4gICAgICBpZihwcm9wIGluIGRhdGEpIHtcclxuICAgICAgICB1c2VNYXggPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHByb3AgPSAnU3RhdGUxVmFsdWUnO1xyXG4gICAgICAgIGlmKHByb3AgaW4gZGF0YSkge1xyXG4gICAgICAgICAgdXNlU3RhdGVYVmFsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBjdXJyZW50U3RhdGUgPSAwO1xyXG4gICAgICB2YXIgc3RhdFZhbHMgPSBbXTtcclxuICAgICAgZm9yKDs7KSB7XHJcbiAgICAgICAgY3VycmVudFN0YXRlKys7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHN0YXRlUHJvcCA9ICdTdGF0ZScgKyBjdXJyZW50U3RhdGU7XHJcbiAgICAgICAgaWYoIShzdGF0ZVByb3AgaW4gZGF0YSkpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHN0YXRlSWQgPSBkYXRhW3N0YXRlUHJvcF07XHJcbiAgICAgICAgaWYoc3RhdGVJZCA9PSAtMSkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHN0YXRlSWQgPT0gMTA3KSB7XHJcbiAgICAgICAgICAvLyBpcyB0aGlzIG1wP1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGN1cnJlbnREYXRhID0geyBpZDogc3RhdGVJZCB9O1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgcHJvcDtcclxuICAgICAgICBcclxuICAgICAgICAgIGlmKHVzZU1heCkge1xyXG4gICAgICAgICAgICBwcm9wID0gJ1N0YXRlJyArIGN1cnJlbnRTdGF0ZSArICdfTWF4JztcclxuICAgICAgICAgICAgY3VycmVudERhdGEubWF4ID0gZGF0YVtwcm9wXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYodXNlU3RhdGVYVmFsKSB7XHJcbiAgICAgICAgICAgIHByb3AgPSAnU3RhdGUnICsgY3VycmVudFN0YXRlICsgJ1ZhbHVlJztcclxuICAgICAgICAgICAgY3VycmVudERhdGEubWF4ID0gZGF0YVtwcm9wXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwcm9wID0gJ1N0YXRlVmFsdWUnICsgY3VycmVudFN0YXRlO1xyXG4gICAgICAgICAgICBjdXJyZW50RGF0YS5tYXggPSBOdW1iZXIoZGF0YVtwcm9wXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKGN1cnJlbnREYXRhLm1heCA+IDAgfHwgY3VycmVudERhdGEubWF4IDwgMCkge1xyXG4gICAgICAgICAgICBpZihtaWdodEhhdmVTZXRzKSB7XHJcbiAgICAgICAgICAgICAgcHJvcCA9ICdOZWVkU2V0TnVtJyArIGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICAgICAgICBpZihwcm9wIGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGFbcHJvcF0gPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRhLm5lZWRTZXROdW0gPSBkYXRhW3Byb3BdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1pZ2h0SGF2ZVNldHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICBzdGF0VmFscy5wdXNoKGN1cnJlbnREYXRhKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiBzdGF0VmFscztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNldHVwU3RhdCA6IGZ1bmN0aW9uKHN0YXQsIGlkKSB7XHJcbiAgICAgIHN0YXQuaWQgPSBOdW1iZXIoaWQpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgbWVyZ2VTdGF0cyA6IGZ1bmN0aW9uKHN0YXRzMSwgc3RhdHMyKSB7XHJcbiAgICAgIHZhciBzdGF0TWFwID0ge307XHJcbiAgICAgIFxyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgIGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBhbW91bnQgPSBOdW1iZXIodmFsdWUubWF4KTtcclxuICAgICAgICBpZihzZWxmLnN0YXRzW3ZhbHVlLmlkXSAmJiAncGMnIGluIHNlbGYuc3RhdHNbdmFsdWUuaWRdKSB7XHJcbiAgICAgICAgICBhbW91bnQgPSBNYXRoLmZsb29yKGFtb3VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHZhbHVlLmlkIGluIHN0YXRNYXApIHtcclxuICAgICAgICAgIHN0YXRNYXBbdmFsdWUuaWRdICs9IGFtb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBzdGF0TWFwW3ZhbHVlLmlkXSA9IGFtb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChzdGF0czEsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZih2YWx1ZSkge1xyXG4gICAgICAgICAgYWRkKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgaWYoc3RhdHMyKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHN0YXRzMiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgaWYodmFsdWUpIHtcclxuICAgICAgICAgICAgYWRkKHZhbHVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdmFyIG5ld1N0YXRzID0gW107XHJcbiAgICAgIFxyXG4gICAgICBmb3IodmFyIGtleSBpbiBzdGF0TWFwKSB7XHJcbiAgICAgICAgdmFyIHN0YXQgPSB7IG1heCA6IHN0YXRNYXBba2V5XSwgaWQ6IE51bWJlcihrZXkpIH07XHJcbiAgICAgICAgbmV3U3RhdHMucHVzaChzdGF0KTtcclxuICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICByZXR1cm4gbmV3U3RhdHM7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyJdfQ==
