"use strict";!function(){function l(l){l.when("/about",{templateUrl:"ui/about/about.html",controller:"AboutCtrl as about"}).when("/setup",{templateUrl:"ui/nav/setup.html",controller:"SetupCtrl"}).when("/test",{templateUrl:"ui/nav/test.html",controller:"TestCtrl"}).when("/items",{templateUrl:"ui/search/everything-search.html",controller:"ItemsCtrl as items",reloadOnSearch:!1}).when("/",{templateUrl:"ui/welcome.html"}).when("/builds",{templateUrl:"ui/builds/build-list.html",controller:"BuildListCtrl as buildList"}).when("/build/:buildName*",{templateUrl:"ui/builds/build-list.html",controller:"BuildListCtrl as buildList"}).when("/view-group/:region?",{templateUrl:"ui/builds/view-group.html",controller:"ViewGroupCtrl"}).when("/edit-build/:buildName*",{templateUrl:"ui/builds/edit-build.html",controller:"EditBuildCtrl as editGroup"}).when("/new-build",{templateUrl:"ui/builds/edit-build.html",controller:"EditBuildCtrl as editGroup"}).when("/delete-build/:name*",{templateUrl:"ui/builds/delete-build.html",controller:"DeleteBuildCtrl as deleteBuild"}).when("/reload-build/:name*",{templateUrl:"ui/builds/reload-build.html",controller:"ReloadBuildCtrl as ctrl"}).when("/search/:cat?",{templateUrl:"ui/search/search.html",controller:"ItemSearchCtrl as ctrl",reloadOnSearch:!1}).when("/item",{templateUrl:"ui/item/item.html",controller:"ItemCtrl"}).when("/item/:region?/:i*",{templateUrl:"ui/item/item.html",controller:"ItemCtrl"}).when("/export",{templateUrl:"ui/nav/export.html",controller:"ExportCtrl"}).when("/talismans",{templateUrl:"ui/builds/build-talismans.html",controller:"BuildTalismansCtrl as ctrl"}).when("/publish",{templateUrl:"ui/online/publish.html",controller:"PublishCtrl as ctrl"}).when("/profile/:uid?",{templateUrl:"ui/online/profile.html",controller:"ProfileCtrl as ctrl"}).when("/published",{templateUrl:"ui/online/published.html",controller:"PublishedCtrl as ctrl"}).when("/import",{templateUrl:"ui/builds/build-import.html",controller:"BuildImportCtrl as ctrl"}).when("/published/:uid/:buildName*",{templateUrl:"ui/online/published.html",controller:"PublishedCtrl as ctrl"}).when("/build-search/:jobId?",{templateUrl:"ui/online/build-search.html",controller:"BuildSearchCtrl as ctrl"}).otherwise({redirectTo:"/"})}angular.module("dnsim").config(["$routeProvider",l])}();
"use strict";!function(){angular.module("dnsim").controller("AboutCtrl",["$window",function(t){document.body.className="default-back",t.document.title="dngearsim | ABOUT/FAQ"}])}();
"use strict";angular.module("dnsim").controller("buildActionsCtrl",["$location","saveHelper","exportLinkHelper",function(e,i,l){var t=this;this.deleteGroup=function(){e.path("/delete-build/"+t.buildName)},this.editGroup=function(){e.path("/edit-build/"+t.buildName)},this.copyGroup=function(){var l=i.importGroup(t.buildName,t.build.items);i.renameSavedGroup(l,l,t.build.enemyLevel,t.build.playerLevel,t.build.heroLevel,t.build.job,t.build.damageType,t.build.element,t.build.secondaryElement,t.build.enemyStatCaps,t.build.playerStatCaps,t.build.conversions,t.build.baseStats,t.build.heroStats),e.path("/build/"+l)},this.reloaded=!1,this.reloadGroup=function(){e.path("/reload-build/"+t.buildName)},this.createShortUrl=function(){l.createShortUrl(t.buildName,t.build)},this.setShortUrl=function(){if(t.build){var e=l.createGroupLink(t.buildName,t.build);t.build.shortUrl=sessionStorage.getItem(e)}},this.setShortUrl()}]).directive("dngearsimBuildActions",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build",onChange:"&onChange"},controller:"buildActionsCtrl",controllerAs:"buildActions",templateUrl:"ui/builds/build-actions.html"}});
"use strict";angular.module("dnsim").controller("buildExportActionCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset",function(t,e,l,r,i,o,n,u,a,d,s){function c(){var t=new Blob([JSON.stringify(p.build,null,1)],{type:"text/plain;charset=utf-8"});saveAs(t,"dngearsim-"+p.buildName+".json")}var p=this;p.export=c}]).directive("dngearsimBuildExportAction",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build"},controller:"buildExportActionCtrl",controllerAs:"ctrl",templateUrl:"ui/builds/build-export-action.html"}});
"use strict";angular.module("dnsim").controller("BuildImportCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset",function(e,l,t,i,a,r,n,u,d,o,s){function b(l){var t=l.target.files;if(console.log("importing files",t),t&&t.length){var i=t[0].name,a=new FileReader;a.readAsText(t[0]),a.onload=function(){p.build=JSON.parse(a.result),i&&i.length>5?(p.buildName=i.substr(0,i.length-5),p.buildName=p.buildName.replace("dngearsim-","")):p.buildName="imported build",e()}}}function m(){var e=r.importGroup(p.buildName,p.build.items);r.renameSavedGroup(e,e,p.build.enemyLevel,p.build.playerLevel,p.build.heroLevel,p.build.job,p.build.damageType,p.build.element,p.build.secondaryElement,p.build.enemyStatCaps,p.build.playerStatCaps,p.build.conversions,p.build.baseStats,p.build.heroStats),l.path("/build/"+e)}var p=this;p.onFileChange=b,p.copyLocally=m}]);
"use strict";angular.module("dnsim").controller("buildItemCtrl",["$timeout","statHelper","saveHelper","hCodeValues",function(t,e,l,i){function m(t){if(t.gemSlot)for(var e=0;e<a.gemSlots.length;++e)if(a.gemSlots[e].id==t.gemSlot)return a.gemSlots[e].name}function n(){a.item.fullStats=a.item.stats,null!=a.item.enchantmentStats&&a.item.enchantmentStats.length>0&&(a.item.fullStats=i.mergeStats(a.item.enchantmentStats,a.item.fullStats)),null!=a.item.sparkStats&&a.item.sparkStats.length>0&&(a.item.fullStats=i.mergeStats(a.item.sparkStats,a.item.fullStats))}var a=this;a.updateItem=n,a.gemSlots=i.gemExchanges,a.getGemSlotName=m}]).directive("dngearsimBuildItem",function(){return{scope:!0,bindToController:{item:"=item",editMode:"=editMode",onChange:"&onChange",cancelEdit:"&cancelEdit"},controller:"buildItemCtrl",controllerAs:"ctrl",templateUrl:"ui/builds/build-item.html"}});
"use strict";angular.module("dnsim").controller("BuildListCtrl",["$window","$location","$routeParams","$timeout","saveHelper",function(t,e,s,i,u){var r=this;document.body.className="saved-back",this.setupBuilds=function(){r.savedItems=u.getSavedItems(),r.buildNames=Object.keys(r.savedItems).sort(),r.builds=[];for(var t=0;t<r.buildNames.length;++t)r.builds.push({name:r.buildNames[t],build:r.savedItems[r.buildNames[t]]})},this.setupBuilds(),"buildName"in s?s.buildName in r.savedItems?s.buildName!=this.currentGroup&&(this.currentGroup=s.buildName,u.saveBuildSelection(this.currentGroup,this.savedItems)):e.path("/builds/"):this.currentGroup&&this.currentGroup in this.savedItems?e.path("/build/"+this.currentGroup):this.currentGroup=null,this.currentGroup?t.document.title="dngearsim | "+this.currentGroup:t.document.title="dngearsim | BUILDS",this.anyItems=function(){return Object.keys(this.savedItems).length>0},this.createGroup=function(){e.path("/new-build")},this.handleChange=function(){r.setupBuilds(),i()},this.toggleGroup=function(t){u.saveBuildSelection(t,this.savedItems),e.url("/build/"+t)},this.publish=function(){e.url("/publish")},this.search=function(){e.url("/build-search")}}]);
"use strict";angular.module("dnsim").controller("buildStatsCtrl",["$routeParams","$location","hCodeValues","statHelper","itemCategory",function(t,l,r,s,e){}]).directive("dngearsimBuildStats",function(){return{scope:!0,bindToController:{stats:"=stats",build:"=build"},controller:"buildStatsCtrl",controllerAs:"statsCtrl",templateUrl:"ui/builds/build-stats.html"}});
"use strict";angular.module("dnsim").controller("buildSummaryCtrl",["$routeParams","$location","hCodeValues","statHelper","itemCategory",function(t,e,i,l,a){var r=this;this.stats=l.getBuildStats(this.build),this.itemsByCategory=a.getItemsByCategory(this.build.items),this.getSaveDate=function(t){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleDateString()}},this.getSaveTime=function(t){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleTimeString()}},this.getBuildSummary=function(t){var e="";return angular.forEach(r.itemsByCategory,function(t,i){t.length>0&&(e.length>0&&(e+=", "),e+=t.length+" "+i)}),e}}]).directive("dngearsimBuildSummary",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build"},controller:"buildSummaryCtrl",controllerAs:"buildCtrl",templateUrl:"ui/builds/build-summary.html"}});
"use strict";angular.module("dnsim").controller("BuildTalismansCtrl",["$window","$location","$routeParams","$timeout","saveHelper","statHelper","jobs","hCodeValues","itemColumnsToLoad","character",function(e,t,s,a,n,m,i,r,u,c){function l(e,t){return e&&t?Math.round(1e4*(1-t/e))/100:0}var o=this;if(e.document.title="dngearsim | TALISMANS",e.scrollTo(0,0),this.savedItems=n.getSavedItems(),this.groupNames=Object.keys(this.savedItems),this.groupNames||(this.groupNames=[]),this.groupNames.length>0?this.groupName=n.getCurrentBuild():this.groupName=null,this.groupName&&this.groupName in this.savedItems||this.groupNames.length>0&&(this.groupName=this.groupNames[0]),this.groupName){this.getGroupCalcStats=function(){if(null==this.groupCalcStats){var e=o.savedItems[o.groupName];e&&(this.groupCalcStats=m.getCalculatedStatsFromItems(e,e.items))}return this.groupCalcStats},this.getBuild=function(){return o.savedItems[o.groupName]},this.pickup=function(e){o.selectedIndex=e,o.replaceHPAffectAmount=[],o.replaceMDmgAffectAmount=[],o.replacePDmgAffectAmount=[],o.replaceAvgDmgAffectAmount=[]},this.headers=["+100%","+75%","+25%","+0%"],this.summaryStatIds=[];for(var d in r.stats)r.stats[d].summaryDisplay&&this.summaryStatIds.push(d);this.pcIndexes={},this.pcIndexes[100]=0,this.pcIndexes[75]=1,this.pcIndexes[25]=2,this.pcIndexes[0]=3,this.selectedIndex=-1,this.rows=[],this.updateRows=function(){o.rows=[],angular.forEach(o.savedItems[o.groupName].items,function(e,t){if("talisman"==e.typeName){var s=o.pcIndexes[e.enchantmentNum];s||0==s||(s=3);for(var a=0;;){if(o.rows[a]||(o.rows[a]=o.makeFakeCells()),o.rows[a][s].index<0){e.enchantmentNum||(e.enchantmentNum=0);var n=o.makeCell(e,t);o.rows[a][s]=n;break}a++}}}),o.rows.length<3&&(o.rows[o.rows.length+1]=o.makeFakeCells())},this.makeFakeCells=function(e){return[o.makeCell({enchantmentNum:100},-1),o.makeCell({enchantmentNum:75},-2),o.makeCell({enchantmentNum:25},-3),o.makeCell({enchantmentNum:0},-4)]},this.makeCell=function(e,t){return{item:e,index:t}},this.click=function(e){o.selectedIndex==-1?e.index>=0&&o.pickup(e.index):o.move(e)},this.move=function(e){var t=o.savedItems[o.groupName].items;if(e.index>=0){var s=e.item.enchantmentNum;o.setTalisman(e.item,t[o.selectedIndex].enchantmentNum),o.setTalisman(t[o.selectedIndex],s),t[e.index]=t[o.selectedIndex],t[o.selectedIndex]=e.item}else{var n=t[o.selectedIndex];o.setTalisman(n,e.item.enchantmentNum),t.splice(o.selectedIndex,1),t.push(n)}o.groupCalcStats=null,o.selectedIndex=-1,o.updateRows(),o.replaceAffectAmount={},a()},this.setTalisman=function(e,t){var s=[];angular.forEach(e.stats,function(e,a){t&&s.push({id:e.id,max:e.max*(t/100)})}),e.enchantmentStats=s,e.enchantmentNum=t,e.fullStats=r.mergeStats(e.enchantmentStats,e.stats)},this.replaceAffectAmount={},this.getReplaceAffectAmount=function(e,t,s){if(this.initReplaceAffects(t,s),this.replaceAffectAmount[t])return this.replaceAffectAmount[t][e]},this.initReplaceAffects=function(e,t){if(!o.replaceAffectAmount[e]&&o.selectedIndex!=-1){this.replaceAffectAmount[e]={};var s=o.savedItems[o.groupName],a=s.items[o.selectedIndex],n=[],i=[];t.stats&&(angular.forEach(t.stats,function(e,t){n.push({id:e.id,max:e.max*(a.enchantmentNum/100)})}),i=r.mergeStats(n,t.stats)),n=[],angular.forEach(a.stats,function(e,s){n.push({id:e.id,max:e.max*(t.enchantmentNum/100)})});var u=r.mergeStats(n,a.stats),c=[{stats:i},{stats:u}];angular.forEach(s.items,function(e,s){t!==e&&a!==e&&c.push(e)});var d=m.getCalculatedStatsFromItems(s,c),h=o.getGroupCalcStats();for(var p in r.stats)r.stats[p].summaryDisplay&&(o.replaceAffectAmount[e][p]=l(o.getStat(p,d).max,o.getStat(p,h).max))}},this.getStatName=function(e){var t="";if("primary"==r.stats[e].element){var s=0;o.savedItems[o.groupName].element&&(s=o.savedItems[o.groupName].element.id),t+=r.elements[s].name}else if("secondary"==r.stats[e].element){var s=0;o.savedItems[o.groupName].secondaryElement&&(s=o.savedItems[o.groupName].secondaryElement.id),t+=r.elements[s].name}return t+" "+r.stats[e].name},this.getStat=function(e,t){for(var s=t.length,a=0;a<s;++a)if(t[a].id==e)return t[a];return{id:e,max:0}},this.save=function(){n.updatedSavedItems(o.groupName,o.savedItems[o.groupName].items),t.path("/build/"+o.groupName)},this.updateRows()}}]);
"use strict";angular.module("dnsim").controller("buildCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper",function(e,t,n,a,i,r){var o=this;this.stats=a.getBuildStats(this.build);var s=localStorage.getItem("selectedItemCategory");this.category=i.byName(s),this.category&&!this.category.hideInBuild||(s="titles",this.category=i.byName("titles")),this.getCategoryItems=function(){var e=i.getItemsByCategory(this.build.items);return o.category.name in e?e[o.category.name]:[]};var u={},m="";this.getSubCategories=function(){if(m!=o.category.name){u={},m=o.category.name;var e=[],t=o.build.items.sort(function(e,t){return e.exchangeType-t.exchangeType});"increasing gems"==o.category.name?e=_.filter(t,function(e){return e.increasingGemSlots>0}):"offensive gems"==o.category.name&&(e=_.filter(t,function(e){return e.offensiveGemSlots>0})),_.each(e,function(e){e.exchangeType in u||(u[e.exchangeType]={names:[],slots:0,exchangeType:e.exchangeType}),u[e.exchangeType].names.push(e.name),"increasing gems"==o.category.name&&(u[e.exchangeType].slots+=e.increasingGemSlots),"offensive gems"==o.category.name&&(u[e.exchangeType].slots+=e.offensiveGemSlots)}),u[0]=null}return u},this.getNumTaken=function(e){var t=0,a=_.find(n.gemExchanges,function(t){return t.exchange==e.exchangeType});if(a){var i=this.getCategoryItems();_.each(i,function(e){e.gemSlot==a.id&&++t})}return t},this.isInSubCat=function(e,t){if(!t&&!e.gemSlot)return!0;var a=_.find(n.gemExchanges,function(t){return t.id==e.gemSlot});if(t||!a)return!(!t||!a)&&a.exchange==t.exchangeType;var i=this.getSubCategories();return!_.find(i,function(e){return null!=e&&a.exchange==e.exchangeType})||void 0},this.canMove=function(){return"increasing gems"==o.category.name||"offensive gems"==o.category.name},this.getGemSlot=function(e){if(e){return _.find(n.gemExchanges,function(t){return t.exchange==e.exchangeType}).id}},this.move=function(e,t){e.gemSlot=o.getGemSlot(t),r.updatedSavedItems(o.buildName,o.build.items),o.handleChange()},this.getCategories=function(){return i.categories},this.setSelectedCategory=function(e){this.category=i.byName(e),localStorage.setItem("selectedItemCategory",e)},this.getSaveDate=function(e){if(o.build.lastUpdate>0){return new Date(o.build.lastUpdate).toLocaleDateString()}},this.getSaveTime=function(e){if(o.build.lastUpdate>0){return new Date(o.build.lastUpdate).toLocaleTimeString()}},this.allowMoreItems=function(){return!o.category.maxCat||this.getCategoryItems().length<o.category.maxCat},this.getItemCount=function(){var e="",t=o.build.items;if("offensive gems"==o.category.name){var n=0,a=0;angular.forEach(t,function(e,t){e.typeName==o.category.name?a++:e.offensiveGemSlots&&(n+=e.offensiveGemSlots)}),e=a+" / "+n}else if("increasing gems"==o.category.name){var r=0,s=0,u={};angular.forEach(t,function(e,t){if(e.typeName==o.category.name){var n=e.sparkTypeId;n||(n=0),n in u||(u[n]=0),u[n]++,r++}else e.increasingGemSlots&&(s+=e.increasingGemSlots)}),e="",angular.forEach(u,function(t,n){e.length>0&&(e+="+"),e+=t}),e=r+" ("+e+") / "+s}else{var m=0;angular.forEach(t,function(e,t){e&&e.typeName==o.category.name&&m++}),e=m;var g=i.byName(o.category.name);g&&"numItemText"in g&&(e+=" / "+g.numItemText)}return e},this.newCustom=function(){var e={id:0,typeName:"custom",name:"new custom item",stats:[]};o.build.items=o.build.items.concat(e),r.updatedSavedItems(o.buildName,o.build.items),o.handleChange()},this.handleChange=function(){o.stats=a.getBuildStats(o.build),m="",o.onChange()},this.handleItemEdit=function(){r.updatedSavedItems(o.buildName,o.build.items),o.handleChange()},this.cancelEdit=function(){o.onChange()},this.canEdit=function(e){return"custom"==e.typeName||"weapons"==e.typeName||"armour"==e.typeName||"offensive gems"==e.typeName||"increasing gems"==e.typeName},this.removeItem=function(e){m="",e.removeItem=!0;var t=[];angular.forEach(o.build.items,function(e,n){e&&!e.removeItem&&t.push(e)}),o.build.items=t,r.updatedSavedItems(o.buildName,t),o.handleChange()}}]).directive("dngearsimBuild",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build",onChange:"&onChange",server:"=server"},controller:"buildCtrl",controllerAs:"buildCtrl",templateUrl:"ui/builds/build.html"}});
"use strict";angular.module("dnsim").controller("DeleteBuildCtrl",["$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad",function(e,t,n,a,i,l,o,s){this.newGroup=!0,"name"in t&&(this.name=t.name),this.delete=function(){a.deleteBuild(this.name),e.path("/builds/")}}]);
"use strict";!function(){function e(e,t,n,o,a,r,l,m,u,p,s){var i=this;i.savedItems=a.getSavedItems(),i.group={},i.newGroup=!0,"buildName"in n?(i.groupName=n.buildName,i.groupName in i.savedItems&&(i.group=i.savedItems[i.groupName],i.newGroup=!1)):i.groupName="",i.oldGroupName=i.groupName,i.heroStats=[],i.elements=m.elements,i.damageTypes=m.damageTypes,i.initDamageType=function(){i.job&&(i.group.damageType?i.damageType=i.group.damageType:i.newGroup&&"DamageType"in i.job.d?i.job.d.DamageType?i.damageType=m.damageTypes[2]:i.damageType=m.damageTypes[1]:i.damageType=m.damageTypes[0])},i.initDefaultElement=function(){var e=m.elements[0],t=m.elements[0];if(i.job&&i.job.d){var n=i.job.d.EnglishName;"CRUSADES"==n||"INQUISITOR"==n||"GUARDIAN"==n||"SAINT"==n||"SILVERHUNTER"==n||"STINGBREEZER"==n?(e=m.elements[3],t=m.elements[3]):"RAVEN"==n||"MAJESTY"==n||"SOULEATER"==n||"DARKSUMMONER"==n||"ABYSSWALKER"==n||"BLACKMARA"==n||"PHYSICIAN"==n?(e=m.elements[4],t=m.elements[4]):"SALEANA"==n||"RIPPER"==n||"DARKAVENGER"==n?(e=m.elements[1],t=m.elements[1]):"ELESTRA"==n?(e=m.elements[2],t=m.elements[2]):"ADEPT"==n?(e=m.elements[1],t=m.elements[2]):"LIGHTFURY"==n&&(e=m.elements[3],t=m.elements[4])}i.newGroup&&(i.element=e,i.secondaryElement=t),i.element||(i.element=e),i.secondaryElement||(i.secondaryElement=e)},i.group.element?i.element=i.group.element:i.element=m.elements[0],i.group.secondaryElement?i.secondaryElement=i.group.secondaryElement:i.secondaryElement=m.elements[0],i.group.enemyLevel?i.enemyLevel=i.group.enemyLevel:i.enemyLevel=90,i.group.playerLevel?i.playerLevel=i.group.playerLevel:i.playerLevel=93,i.group.heroLevel&&i.group.heroLevel>0?i.heroLevel=i.group.heroLevel:i.heroLevel=1,i.init=function(){var e=l.getFinalJobs();e.length>0&&o(function(){"job"in i.group&&angular.forEach(e,function(e,t){e.id==i.group.job.id&&(i.job=e)}),i.initDamageType(),i.initDefaultElement(),i.setHeroStats()})},i.setJob=function(){e.scrollTo(0,0),o(function(){i.initDamageType(),i.initDefaultElement()})},s.init(),p.init(function(){i.init()}),i.getStatCap=function(e,t){return p.getStatCaps(t)[e]},i.getJobConversion=function(e){return p.getConversions(i.job.id)[e]},i.getJobBaseStat=function(e){return p.getBaseStats(i.playerLevel,i.job.id)[e]},i.invalidGroupName=function(){return!i.groupName||!(!(i.groupName in i.savedItems)||!i.newGroup&&i.groupName==i.oldGroupName)},i.ok=function(){var e=p.getStatCaps(i.enemyLevel),n=p.getStatCaps(i.playerLevel),o=p.getConversions(i.job.id),r=p.getBaseStats(i.playerLevel,i.job.id),l=p.getHeroStats(i.heroLevel);i.newGroup&&(i.oldGroupName=i.groupName,a.importGroup(i.groupName,[])),a.renameSavedGroup(i.oldGroupName,i.groupName,i.enemyLevel,i.playerLevel,i.heroLevel,i.job,i.damageType,i.element,i.secondaryElement,e,n,o,r,l),t.path("/build/"+i.groupName)},i.setHeroStats=function(){i.heroStats=p.getHeroStats(i.heroLevel)},o(function(){var e=document.getElementById("groupNameInput");e&&(e.focus(),e.setSelectionRange(0,9999))})}e.$inject=["$window","$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad","character","region"],angular.module("dnsim").controller("EditBuildCtrl",e)}();
"use strict";angular.module("dnsim").controller("quickAddCtrl",["$timeout","statHelper","saveHelper","quickAdd","itemCategory","jobs","dntData","exportLinkHelper",function(t,e,n,i,a,o,s,r){var u=this;u.startedForCat="",u.stepNumber=0,u.datas=[],u.options=[],this.setOptions=function(){u.hasStarted()&&(u.options=i.getOptions(u.category,u.build,u.datas),1==u.options.length&&u.selectOption(u.options[0]))},this.selectOption=function(t){var e=i.createData(t,u.category,u.stepNumber);if(u.datas.push(e),u.stepNumber++,i.isValidStepNumber(u.category,u.stepNumber))u.setOptions();else{var n=i.getItem(u.datas),a=r.getDntFiles(n);angular.forEach(a,function(t,e){s.init(e,t,function(){},function(){u.tryToAddItem(a,n)})}),u.tryToAddItem(a,n)}},this.tryToAddItem=function(t,e){if(!s.anyLoading()){var i=!0;if(angular.forEach(t,function(t,e){s.isLoaded(e)||(i=!1)}),i&&u.datas.length>0){u.cancel();var a=r.reloadItem(e);a.gemSlot=u.gemSlot,n.saveItem(u.buildName,a),u.build.items.push(a),u.onChange()}}},this.reset=function(){u.stepNumber=0,u.datas=[],t(function(){u.setOptions()})},this.hasStarted=function(){return u.startedForCat==u.category.name},this.start=function(){u.startedForCat=u.category.name,o.init(function(){},u.reset),a.init(u.category.name,u.reset)},this.hasOptions=function(){return i.hasOptions(u.category,u.build,[])},this.cancel=function(){u.startedForCat="",u.reset()},this.back=function(){if(0==u.stepNumber)u.cancel();else{do{u.stepNumber--,u.datas.pop();var t=i.getOptions(u.category,u.build,u.datas)}while(t.length<=1&&u.stepNumber>0);u.setOptions()}},s.init("exchange.lzjson",null,function(){},u.reset)}]).directive("dngearsimQuickAdd",function(){return{scope:!0,bindToController:{category:"=category",build:"=build",buildName:"=buildName",gemSlot:"=gemSlot",onChange:"&onChange"},controller:"quickAddCtrl",controllerAs:"quickAdd",templateUrl:"ui/builds/quick-add.html"}});
"use strict";function reloadBuildCtrl(e,a,n,i,t,d,l,o){function r(){}function u(){if(!s.reloaded){var e=!0,a=l.getDntFiles(s.build);if(angular.forEach(a,function(a,n){if(!t.isLoaded(n))return void(e=!1)}),e&&o.isLoaded()){var n=l.reloadGroup(s.name,s.build);i.updatedSavedItems(s.name,n),s.build.items=n,s.reloaded=!0}}}var s=this;"name"in a&&(s.name=a.name);var m=i.getSavedItems();s.name in m&&(s.build=m[s.name]),s.reloaded=!1,s.reload=function(){d(),s.reloaded=!1,o.init(r,u);var e=l.getDntFiles(s.build);angular.forEach(e,function(e,a){t.init(a,e,r,u)})},s.goToBuild=function(){e.path("/build/"+s.name)}}angular.module("dnsim").controller("ReloadBuildCtrl",["$location","$routeParams","$timeout","saveHelper","dntData","dntReset","groupHelper","translations",reloadBuildCtrl]);
"use strict";angular.module("dnsim").controller("ViewGroupCtrl",["$scope","$window","region","$location","$routeParams","saveHelper","dntData","$timeout","translations","dntReset","exportLinkHelper","groupHelper","jobs","character","statHelper","hCodeValues",function(e,a,t,s,n,l,o,i,r,d,m,u,p,b,v,y){function c(){var a=!0;angular.forEach(u.getDntFiles(e.build),function(e,t){o.isLoaded(t)||(a=!1)}),a&&!o.anyLoading()&&r.isLoaded()&&p.isLoaded()&&i(function(){var a=e.buildName,t=e.build;e.job=p.getById(e.job.id),e.enemyStatCaps=b.getStatCaps(e.enemyLevel),e.playerStatCaps=b.getStatCaps(e.playerLevel),e.job&&(e.conversions=b.getConversions(e.job.id),e.baseStats=b.getBaseStats(e.playerLevel,e.job.id)),e.heroStats=b.getHeroStats(e.heroLevel);var s=u.reloadGroup(a,t);e.savedItems={},e.build={items:s,lastUpdate:t.lastUpdate,enemyLevel:e.enemyLevel,playerLevel:e.playerLevel,heroLevel:e.heroLevel,job:e.job,damageType:e.damageType,element:e.element,secondaryElement:e.secondaryElement,enemyStatCaps:e.enemyStatCaps,playerStatCaps:e.playerStatCaps,conversions:e.conversions,baseStats:e.baseStats,heroStats:e.heroStats},e.savedItems[a]=e.build,e.stats=v.getBuildStats(e.build);var n=m.createGroupLink(e.buildName,e.build);e.build.shortUrl=sessionStorage.getItem(n)})}function g(){}if(document.body.className="saved-back",t.setLocationByName(n.region),e.buildName="",e.build={},"g"in n&&"i"in n){e.buildName=n.g,a.document.title="dngearsim | "+n.g,e.enemyLevel=n.e,e.playerLevel=n.p,e.heroLevel=n.h,e.job={id:n.j},e.damageType=y.damageTypes[n.d],e.element=y.elements[n.t],e.secondaryElement=y.elements[n.s];var L=[],S=n.i;angular.forEach(S.split(","),function(e,a){var t=m.decodeItem(e);t.id>0&&L.push(t)}),e.build={},e.savedItems={},e.savedItems[e.buildName]=e.build,e.build.items=L,e.isLoading=!0,angular.forEach(u.getDntFiles(e.build),function(e,a){o.init(a,e,g,c)}),r.init(g,c),p.init(g,c),b.init(c),i()}e.anyItems=Object.keys(e.savedItems).length>0,e.copyGroup=function(){var a=l.importGroup(e.buildName,e.build.items);l.renameSavedGroup(a,a,e.enemyLevel,e.playerLevel,e.heroLevel,e.job,e.damageType,e.element,e.secondaryElement,e.enemyStatCaps,e.playerStatCaps,e.conversions,e.baseStats,e.heroStats),s.url("/build/"+a)}}]);
"use strict";!function(){angular.module("dnsim").filter("escape",[function(){function n(n){return n?window.encodeURIComponent(n):""}return n}])}();
"use strict";!function(){angular.module("dnsim").filter("percentage",[function(){function n(n){return"number"==typeof n?Math.round(100*n*100)/100+"%":n}return n.$stateful=!1,n}])}();
"use strict";angular.module("dnsim").controller("groupAssignmentCtrl",["hCodeValues","statHelper","saveHelper","itemCategory","$scope",function(e,t,a,r,s){function n(e,t){return e&&t?Math.round(1e4*(1-t/e))/100:0}function m(){a.saveBuildSelection(u.groupName,u.savedItems)}var u=this;if(this.savedItems=a.getSavedItems(),this.groupNames=Object.keys(this.savedItems),this.groupName||(this.groupName=a.getCurrentBuild()),this.groupName in this.savedItems||(this.groupName=null),!this.groupName&&this.savedItems)for(var i in this.savedItems){this.groupName=i;break}if(this.groupName){this.summaryStatIds=[];for(var o in e.stats)e.stats[o].summaryDisplay&&this.summaryStatIds.push(o);this.clearGroup=function(){u.addAffectAmount=null,u.replaceAffectAmount={},u.groupItems=null,u.groupCalcStats=null},s.$watch("editCtrl.item",function(){u.clearGroup()}),this.getAddAffectAmount=function(e){return this.initAddAffects(),this.addAffectAmount[e]},this.getReplaceAffectAmount=function(e,t,a){return this.initReplaceAffects(t,a),this.replaceAffectAmount[t][e]},this.getGroupCalcStats=function(){if(null==this.groupCalcStats){var e=u.savedItems[u.groupName];e&&(this.groupCalcStats=t.getCalculatedStatsFromItems(e,e.items))}return this.groupCalcStats},this.getBuild=function(){return u.savedItems[u.groupName]},this.initAddAffects=function(){if(!u.addAffectAmount){var a=u.getGroupCalcStats(),r=u.savedItems[u.groupName],s=[];r.items&&(s=r.items.concat([u.item]));var m=t.getCalculatedStatsFromItems(r,s);this.addAffectAmount={};for(var i in e.stats)e.stats[i].summaryDisplay&&(u.addAffectAmount[i]=n(u.getStat(i,m).max,u.getStat(i,a).max))}},this.initReplaceAffects=function(a,r){if(!u.replaceAffectAmount[a]){var s=u.savedItems[u.groupName],m=[u.item];angular.forEach(s.items,function(e,t){r!==e&&m.push(e)});var i=t.getCalculatedStatsFromItems(s,m),o=u.getGroupCalcStats();this.replaceAffectAmount[a]={};for(var c in e.stats)e.stats[c].summaryDisplay&&(u.replaceAffectAmount[a][c]=n(u.getStat(c,i).max,u.getStat(c,o).max))}},this.getStat=function(e,t){for(var a=t.length,r=0;r<a;++r)if(t[r].id==e)return t[r];return{id:e,max:0}},this.getStatName=function(t){var a="";if("primary"==e.stats[t].element){var r=0;u.savedItems[u.groupName].element&&(r=u.savedItems[u.groupName].element.id),a+=e.elements[r].name}else if("secondary"==e.stats[t].element){var r=0;u.savedItems[u.groupName].secondaryElement&&(r=u.savedItems[u.groupName].secondaryElement.id),a+=e.elements[r].name}return a+" "+e.stats[t].name},this.getGroupItems=function(){function e(e){if(e){for(var a=0,r=0;r<t.length;++r)e.indexOf(t[r])>0&&a++;return a}return-1}var t;if(null==u.groupItems&&u.groupName&&u.groupName in u.savedItems&&u.item&&u.item.typeName){u.groupItems=[];var a=[];angular.forEach(u.savedItems[u.groupName].items,function(e,t){e.exchangeType&&"gem"!=e.itemSource&&"plate"!=e.itemSource&&"tman"!=e.itemSource?e.exchangeType==u.item.exchangeType&&a.push(e):e.typeName==u.item.typeName&&a.push(e)}),u.item.name&&(t=u.item.name.split(" ")),a.sort(function(t,a){return e(a.name)-e(t.name)}),angular.forEach(a,function(e,t){e.name==u.item.name&&u.groupItems.push(e)}),angular.forEach(a,function(e,t){e.name!=u.item.name&&u.groupItems.push(e)})}return u.groupItems},this.hasMaxExchangable=function(){var e=r.byName(this.item.typeName),t=this.getGroupItems();if(e&&e.maxCat&&t.length>=e.maxCat)return!0;if(e&&e.maxExchange&&t.length>=e.maxExchange){for(var a=0;a<t.length;++a)if(!t[a].exchangeType)return!1;return!0}return!1},this.nextGroup=function(){var e=!1,t=null;angular.forEach(u.groupNames,function(a,r){e&&null==t&&(t=a),a==u.groupName&&(e=!0)}),null==t&&(t=u.groupNames[0]),u.groupName=t,m(),u.clearGroup()},this.prevGroup=function(){var e=!1,t=null;angular.forEach(u.groupNames,function(a,r){a==u.groupName&&(e=!0),e||(t=a)}),null==t&&(t=u.groupNames[u.groupNames.length-1]),u.groupName=t,m(),u.clearGroup()},this.addToGroup=function(){a.saveItem(u.groupName,u.item),this.savedItems=a.getSavedItems(),u.clearGroup(),u.onChange()},this.replace=function(e){e.replaceItem=!0;var t=[];angular.forEach(u.savedItems[u.groupName].items,function(e,a){e.replaceItem?t.push(u.item):t.push(e)}),a.updatedSavedItems(u.groupName,t),this.savedItems=a.getSavedItems(),u.clearGroup(),u.onChange()}}}]).directive("dngearsimGroupAssignment",function(){return{scope:!0,bindToController:{item:"=item",compact:"=compact",onChange:"&onChange"},controller:"groupAssignmentCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/group-assignment.html"}});
"use strict";angular.module("dnsim").controller("itemEditCustomCtrl",["hCodeValues","$scope",function(t,i){if(null!=this.item&&("custom"==this.item.itemSource||"custom"==this.item.typeName)){var e=this;this.statMap={},_.forEach(e.item.stats,function(t){e.statMap[t.id]=t.max});for(var a in t.stats)i.$watch("editCtrl.statMap["+a+"]",function(t,i){if(t!=i){var a=!1,s=[];for(var m in e.statMap)if(e.statMap[m]&&Number(e.statMap[m])){s.push({id:Number(m),max:Number(e.statMap[m])});var o=!1;_.each(e.item.stats,function(t){t.id==m&&(o=!0,m in e.statMap&&t.max==e.statMap[m]||(a=!0))}),o||(a=!0)}else _.each(e.item.stats,function(t){t.id==m&&(a=!0)});a&&(e.item.stats=s,e.onChange())}})}}]).directive("dngearsimItemEditCustom",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditCustomCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-custom.html"}});
"use strict";angular.module("dnsim").controller("itemEditEnchantmentCtrl",["dntData","hCodeValues","items","$timeout","translations","itemColumnsToLoad","itemFactory",function(t,n,e,m,a,i,h){function c(t){return"petLevelDnt"in s.itemType?s.enchantments[t].PetLevel:s.enchantments[t].EnchantLevel}var s=this;if(s.item&&s.item.enchantmentId&&("itemSource"in this.item&&(s.itemType=e[s.item.itemSource]),s.itemType&&("enchantDnt"in s.itemType||"petLevelDnt"in s.itemType))){s.itemType.enchantDnt&&t.init(s.itemType.enchantDnt,i.enchantDnt,null,s.getEnchantments),s.itemType.petLevelDnt&&(t.init(s.itemType.petDnt,i.petDnt,null,s.getEnchantments),t.init(s.itemType.petLevelDnt,i.petLevelDnt,null,s.getEnchantments)),s.enchantments=null,s.enchantment=null,s.enchantmentAfter=null,s.enchantmentCost="",s.enhancementOptions=[],null==s.item.enchantmentStats&&(s.item.enchantmentStats=[]),this.setEnchantment=function(){if(s.item.enchantmentStats=[],s.enchantments&&s.enchantments.length>0){"number"!=typeof s.item.enchantmentNum&&(s.item.enchantmentNum=0,s.onChange());for(var t=0;t<s.enchantments.length;++t)s.item.enchantmentNum==c(t)?(s.enchantment=s.enchantments[t],s.item.enchantmentStats=n.getStats(s.enchantment)):s.item.enchantmentNum+1==c(t)&&(s.enchantmentAfter=s.enchantments[t],s.enchantmentAfter.NeedCoin<1e4?s.enchantmentCost=Math.round(s.enchantmentAfter.NeedCoin/1e3)/10+"g":s.enchantmentCost=Math.round(s.enchantmentAfter.NeedCoin/1e4)+"g")}},this.setPetLevel=function(){if(s.item.enchantmentStats=[],s.enchantments&&s.enchantments.length>0){"number"!=typeof s.item.enchantmentNum&&(s.item.enchantmentNum=6,s.onChange());for(var t=0;t<s.enchantments.length;++t)s.item.enchantmentNum==s.enchantments[t].PetLevel&&(s.enchantment=s.enchantments[t],s.item.enchantmentStats=n.getStats(s.enchantment))}},this.isMaxEnchantLevel=function(){if(null!=s.enchantments&&s.enchantments.length>0&&"number"==typeof s.item.enchantmentNum){for(var t=0;t<s.enchantments.length;++t)if(s.item.enchantmentNum+1==c(t))return!1;return!0}return!1},this.setEnchantmentNum=function(t){s.item.enchantmentNum=t,s.enhancementOptions=[],"petLevelDnt"in s.itemType?s.setPetLevel():s.setEnchantment(),s.onChange()},this.nextEnchantment=function(){for(var t=s.item.enchantmentNum;0==t||s.enchantments[t-1];++t)0==t?s.enhancementOptions.push({number:0}):s.enhancementOptions.push(s.getOption(t-1))},this.prevEnchantment=function(){s.enhancementOptions=[];for(var t=s.item.enchantmentNum;t>0;--t)s.enhancementOptions.push(s.getOption(t-1));s.enhancementOptions.push({number:0})},this.getOption=function(t){return{number:c(t),stats:n.getStats(s.enchantments[t])}},this.getEnchantments=function(){return!s.enchantments&&s.item&&s.item.enchantmentId&&(s.itemType.enchantDnt&&t.isLoaded(s.itemType.enchantDnt)&&(s.enchantments=t.find(s.itemType.enchantDnt,"EnchantID",s.item.enchantmentId),s.setEnchantment()),s.itemType.petLevelDnt&&t.isLoaded(s.itemType.petLevelDnt)&&(s.enchantments=t.find(s.itemType.petLevelDnt,"PetLevelTypeID",s.item.enchantmentId),s.setPetLevel())),s.enchantments};var o="all-items.lzjson";this.showMaterials=function(){t.init(o,null,function(){},function(){m(function(){if(s.enchantmentAfter){s.materials=[];for(var n=1;n<=5;++n){var e=s.enchantmentAfter["NeedItemID"+n],m=s.enchantmentAfter["NeedItemCount"+n];if(e>0&&m>0){var a=t.find(o,"id",e);if(0==a.length)s.materials.push({num:m,name:"unknown ("+e+")"});else{var i=a[0];if(i){var c={item:h.createBasicItem(i),num:m};s.materials.push(c)}}}}}})})},t.isLoaded(o)&&this.showMaterials()}}]).directive("dngearsimItemEditEnchantment",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditEnchantmentCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-enchantment.html"}});
"use strict";angular.module("dnsim").controller("itemEditPotentialCtrl",["dntData","items","hCodeValues","itemColumnsToLoad",function(t,i,n,e){function l(){var t={},i=null;return null!=o.potentials&&angular.forEach(o.potentials,function(e,l){var o=[];angular.forEach(n.getStats(e),function(t,i){n.stats[t.id].hide||o.push(t)}),o.length>0?t[e.id]=o:i||(t[e.id]=[],i=e.id)}),t}var o=this;this.potentials=null,this.potential=null,this.changingPotentials=!1,this.potentialStats={},null!=this.item&&("itemSource"in this.item&&(this.itemType=i[this.item.itemSource]),this.itemType&&this.item.pid&&"potentialDnt"in this.itemType&&(o.itemType.potentialDnt&&t.init(o.itemType.potentialDnt,e.potentialDnt,null,o.getPotentials),this.getPotentials=function(){if(!o.potentials&&o.item&&o.item.pid&&"potentialDnt"in o.itemType){var i=t.find(o.itemType.potentialDnt,"id",o.item.pid);1==i.length?(o.potential=i[0],o.potentials=t.find(o.itemType.potentialDnt,"PotentialID",o.potential.PotentialID),o.potentialStats=l(o.potentials)):"potentialDntEx"in o.itemType&&(i=t.find(o.itemType.potentialDntEx,"id",o.item.pid),1==i.length&&(o.potential=i[0],o.potentials=t.find(o.itemType.potentialDntEx,"PotentialID",o.potential.PotentialID),o.potentialStats=l(o.potentials)))}return o.potentials},this.nextPotential=function(){for(var t=0;t<o.potentials.length;++t)if(o.potential.id==o.potentials[t].id)return o.potential=o.potentials[t+1],o.item.pid=o.potential.id,o.onChange(),void(this.changingPotentials=!0)},this.prevPotential=function(){for(var t=0;t<o.potentials.length;++t)if(o.potential.id==o.potentials[t].id)return o.potential=o.potentials[t-1],o.item.pid=o.potential.id,o.onChange(),void(this.changingPotentials=!0)},this.changePotential=function(t){for(var i=0;i<o.potentials.length;++i)if(t==o.potentials[i].id)return o.potential=o.potentials[i],o.item.pid=o.potential.id,o.changingPotentials=!1,void o.onChange()},this.isFirstPotential=function(){return this.getPotentials(),!o.potentials||o.potentials.length<=1||!o.potential||o.potential.id==o.potentials[0].id},this.isLastPotential=function(){return this.getPotentials(),!o.potentials||o.potentials.length<=1||!o.potential||o.potential.id==o.potentials[o.potentials.length-1].id}))}]).directive("dngearsimItemEditPotential",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditPotentialCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-potential.html"}});
"use strict";angular.module("dnsim").controller("itemEditSkillCtrl",["$timeout","dntData","statHelper",function(t,i,n){function e(){return"skillleveltable_character"+m.item.baseJobName+m.item.pve+".lzjson"}function l(t){}if(null!=this.item&&"skills"==this.item.itemSource){this.item.enchantmentNum||(this.item.enchantmentNum=1);var m=this;this.initSkills=function(){var n=e();i.init(n,null,l,function(){t(function(){m.skillData=i.find(n,"SkillIndex",m.item.id)})})},this.nextEnchantment=function(){this.skillData&&this.item.enchantmentNum<this.skillData.length&&(this.item.enchantmentNum++,m.onChange())},this.isMaxSkillLevel=function(){return this.skillData&&this.item&&this.item.enchantmentNum>=this.skillData.length},this.prevEnchantment=function(){this.item.enchantmentNum>0?this.item.enchantmentNum--:this.item.enchantmentNum=0,m.onChange()},i.init(e(),null,null,m.initSkills)}}]).directive("dngearsimItemEditSkill",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditSkillCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-skill.html"}});
"use strict";angular.module("dnsim").controller("itemEditSparkCtrl",["dntData","hCodeValues","items","itemColumnsToLoad",function(t,e,r,i){function n(){var t=-1;return s.item.sparkId>0&&angular.forEach(s.sparks,function(e,r){if(e.id==s.item.sparkId)return void(t=r)}),t}var s=this;null!=this.item&&("itemSource"in this.item&&(this.itemType=r[this.item.itemSource]),s.itemType&&s.itemType.sparkDnt&&(s.itemType.sparkDnt&&t.init(s.itemType.sparkDnt,i.sparkDnt,null,s.getSparks),this.sparks=null,this.nextSpark=function(){var t=n();++t>=s.sparks.length&&(t=0);var r=s.sparks[t];s.item.sparkId=r.id,s.item.sparkStats=e.getStats(r),s.onChange()},this.isMoreSparks=function(){return null!=s.sparks&&n()>=s.sparks.length-1},this.isFirstSpark=function(){return 0==n()},this.prevSpark=function(){var t=n();--t<0&&(t=s.sparks.length-1);var r=s.sparks[t];s.item.sparkId=r.id,s.item.sparkStats=e.getStats(r),s.onChange()},this.removeSpark=function(){s.item.sparkId=null,s.item.sparkStats=null,s.onChange()},this.getSparks=function(){if(null==s.item||null==s.itemType)return null;if(null==s.sparks){var e=s.item.sparkTypeId;e&&t.isLoaded(s.itemType.sparkDnt)&&(s.sparks=t.find(s.itemType.sparkDnt,"PotentialID",e))}return s.sparks}))}]).directive("dngearsimItemEditSpark",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditSparkCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-spark.html"}});
"use strict";angular.module("dnsim").controller("itemEditTalismanCtrl",[function(){null!=this.item&&"tman"==this.item.itemSource&&(this.setTalisman=function(t){if(0==t)this.item.enchantmentNum=null,this.item.enchantmentStats=[];else{this.item.enchantmentNum=t;var i=[];angular.forEach(this.item.stats,function(e,n){i.push({id:e.id,max:e.max*(t/100)})}),this.item.enchantmentStats=i}this.onChange()})}]).directive("dngearsimItemEditTalisman",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditTalismanCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-talisman.html"}});
"use strict";angular.module("dnsim").controller("itemEditCtrl",["hCodeValues",function(t){var e=this;e.item&&(e.onUpdateItem=function(){e.updateItem()})}]).directive("dngearsimItemEdit",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange",updateItem:"&updateItem"},controller:"itemEditCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-edit.html"}});
"use strict";angular.module("dnsim").controller("itemViewBoxCtrl",["$timeout","dntData","itemFactory",function(t,e,i){if(null!=this.item){if(46!=this.item.typeId&&8!=this.item.typeId&&112!=this.item.typeId&&122!=this.item.typeId&&142!=this.item.typeId)return void console.log("not box item type "+this.item.typeId);var o,m=this,l=["itemdroptable.lzjson","itemdroptable_abyss.lzjson","itemdroptable_apprentice.lzjson","itemdroptable_cook.lzjson","itemdroptable_darklair.lzjson","itemdroptable_dimension.lzjson","itemdroptable_disjoint.lzjson","itemdroptable_dnexpedition.lzjson","itemdroptable_event.lzjson","itemdroptable_farm.lzjson","itemdroptable_fishing.lzjson","itemdroptable_guildwar.lzjson","itemdroptable_item.lzjson","itemdroptable_monsteritem.lzjson","itemdroptable_propdrop.lzjson","itemdroptable_pvp.lzjson","itemdroptable_randomcompound.lzjson","itemdroptable_stageclear.lzjson","itemdroptable_themepark.lzjson","itemdroptable_union.lzjson"];46==this.item.typeId||112==this.item.typeId||122==this.item.typeId||142==this.item.typeId?o=["all-items.lzjson","charmitemtable.lzjson","charmitemtable_common.lzjson"]:8==this.item.typeId&&(o=["all-items.lzjson"].concat(l));for(var n=0;n<o.length;++n)e.init(o[n],null,function(){},function(){t(function(){m.initBoxContents()})});this.initBoxContents=function(){for(var t=0;t<o.length;++t)if(!e.isLoaded(o[t]))return;var i=e.find(this.item.fileName+".lzjson","id",this.item.id);if(i.length>0){var l=i[0];m.items=[],46==m.item.typeId||112==m.item.typeId||122==m.item.typeId||142==m.item.typeId?m.getCharmItems(l.TypeParam1):8==m.item.typeId&&m.getPouchItems(l.TypeParam1)}},this.getPouchItems=function(t){for(var e=0;e<l.length;++e)m.getPouchItemsFromFile(t,l[e])},this.getPouchItemsFromFile=function(t,o){var l=e.find(o,"id",t);if(0==l.length);else{var n=l[0].GoldMin,r=0;do{r++;var s=l[0]["IsGroup"+r],a=l[0]["Item"+r+"Index"],d=l[0]["Item"+r+"Info"];if(a)if(s)m.getPouchItems(a,o);else{var p=e.find("all-items.lzjson","id",a);if(p.length>0){var h=i.createBasicItem(p[0]);m.items.push({count:d,gold:n,item:h})}}}while(a)}},this.getCharmItems=function(t){for(var o=["charmitemtable.lzjson","charmitemtable_common.lzjson"],l=0;l<o.length;++l)for(var n=e.getData(o[l]),r=0;r<n.length;++r){var s=n[r];if(s.CharmNum==t&&s.Look)if(s.CharmType)this.getCharmItems(s.ItemID);else{var a=e.find("all-items.lzjson","id",s.ItemID);a.length>0&&m.items.push({count:s.Count,gold:s.Gold,item:i.createBasicItem(a[0])})}}}}}]).directive("dngearsimItemViewBox",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewBoxCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-box.html"}});
"use strict";angular.module("dnsim").controller("itemViewCraftCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,i,n,r){if(null!=this.item){var l=this;l.crafts=[];for(var o=["itemcompoundtable.lzjson","itemcompoundtable_custom.lzjson","itemcompoundtable_glyph.lzjson","itemcompoundtable_jewel.lzjson","itemcompoundtable_renewal.lzjson","itemcompoundtable_set.lzjson"],a=o.concat(["all-items.lzjson"]),s=0;s<a.length;++s)e.init(a[s],null,function(){},function(){t(function(){l.initCrafts()})});this.initCrafts=function(){for(var t=0;t<a.length;++t)if(!e.isLoaded(a[t]))return;l.crafts=[];for(var t=0;t<o.length;++t)l.initCraft(o[t]);for(var i=[],t=0;t<l.crafts.length;++t){for(var n=!1,r=0;r<i.length;++r)if(l.crafts[t].gold==i[r].gold&&l.crafts[t].items.length==i[r].items.length){n=!0;for(var s=0;s<l.crafts[t].items.length;++s)l.crafts[t].items[s].item.id==i[r].items[s].item.id&&l.crafts[t].items[s].num==i[r].items[s].num||(n=!1)}n||i.push(l.crafts[t])}l.crafts=i},this.initCraft=function(t){for(var n=e.find(t,"SuccessItemID1",l.item.id),r=0;r<n.length;++r){for(var o=n[r],a={id:o.id,fileName:t.replace(".lzjson",""),gold:o.Cost/100/100,items:[]},s=0;;){s++;var m="Slot"+s+"Id",c="Slot"+s+"Num";if(!(m in o))break;var f=e.find("all-items.lzjson","id",o[m]);f.length>0&&a.items.push({item:i.createBasicItem(f[0]),num:o[c]})}l.crafts.push(a)}}}}]).directive("dngearsimItemViewCraft",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewCraftCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-craft.html"}});
"use strict";angular.module("dnsim").controller("itemViewExtractionCtrl",["$timeout","dntData","itemFactory","items",function(t,i,e,n){if(null!=this.item){for(var o=this,r=["itemdroptable_disjoint.lzjson","all-items.lzjson"],a=0;a<r.length;++a)i.init(r[a],null,function(){},function(){t(function(){o.initExtract()})});this.initExtract=function(){for(var t=0;t<r.length;++t)if(!i.isLoaded(r[t]))return;var a,l=e.getItemData(o.item);l&&l.DisjointDrop1>0&&(a=l.DisjointDrop1);var m=n[o.item.itemSource];if(m&&l.EnchantID)for(var s=i.find(m.enchantDnt,"EnchantID",l.EnchantID),t=0;t<s.length;++t)if(s[t].EnchantLevel==o.item.enchantmentNum){a=s[t].DisjointDrop;break}o.items=[],a&&o.getItems(a)},this.getGold=function(){var t=e.getItemData(this.item);return Number(t.Disjointamount)/100/100},this.getItems=function(t){var n=i.find("itemdroptable_disjoint.lzjson","id",t);if(0==n.length);else for(var r=n[0].GoldMin,a=1;"Item"+a+"Index"in n[0];){var l=n[0]["IsGroup"+a],m=n[0]["Item"+a+"Index"],s=n[0]["Item"+a+"Info"];if(m)if(l)o.getItems(m);else{var c=i.find("all-items.lzjson","id",m);c.length>0&&o.items.push({count:s,gold:r,item:e.createBasicItem(c[0])})}a++}}}}]).directive("dngearsimItemViewExtraction",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewExtractionCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-extraction.html"}});
"use strict";angular.module("dnsim").controller("itemViewPlateCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,i){function n(){for(var t=e.find(r,"ItemID",l.item.id),n=0;n<t.length;++n)for(var a=t[n],m=0;;){m++;var s="CompoundTableIndex"+m;if(!(s in a))break;var u=e.find(o,"id",a[s]);u.length>0&&l.items.push(i.createBasicItem(u[0]))}}if(null!=this.item){var l=this;l.items=[];for(var r="platetable.lzjson",o="all-items.lzjson",a=[r,o],m=0;m<a.length;++m)e.init(a[m],null,function(){},function(){t(function(){l.initSets()})});this.initSets=function(){for(var t=0;t<a.length;++t)if(!e.isLoaded(a[t]))return;l.items=[],n()}}}]).directive("dngearsimItemViewPlate",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewPlateCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-plate.html"}});
"use strict";angular.module("dnsim").controller("itemViewSetCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,o){function n(t){for(var n=e.find(t,"SetItemID",i.item.setId),s=0;s<n.length;++s){var l=e.find(a,"id",n[s].id);l.length>0&&i.items.push(o.createBasicItem(l[0]))}}if(null!=this.item){var i=this;i.items=[];for(var s=["partstable.optimised.json","partstable_cash.optimised.json","partstable_common2014.optimised.json","partstable_common2015.optimised.json","partstable_common2016.lzjson","partstable_commoncash.lzjson","partstable_equipment.optimised.json","partstable_event.lzjson","partstable_guild.lzjson","partstable_pvp.optimised.json","partstable_reboot.optimised.json","partstable_skilllevelup.lzjson","weapontable.optimised.json","weapontable_cash.optimised.json","weapontable_common2014.optimised.json","weapontable_common2015.optimised.json","weapontable_common2016.lzjson","weapontable_commoncash.lzjson","weapontable_equipment.optimised.json","weapontable_event.lzjson","weapontable_guild.lzjson","weapontable_pvp.optimised.json","weapontable_reboot.optimised.json"],a="all-items.lzjson",l=s.concat([a]),m=0;m<l.length;++m)e.init(l[m],null,function(){},function(){t(function(){i.initSets()})});this.initSets=function(){for(var t=0;t<l.length;++t)if(!e.isLoaded(l[t]))return;i.items=[];for(var t=0;t<s.length;++t)n(s[t])}}}]).directive("dngearsimItemViewSet",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewSetCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-set.html"}});
"use strict";angular.module("dnsim").controller("itemViewShopCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(e,t,s,o,i){function a(e){for(var a=t.find(e,"itemindex",m.item.id),h=0;h<a.length;++h){var l=a[h],r=t.find(n,"id",l.PurchaseItem1),u=t.find(n,"id",l.PurchaseItem2),c={shopName:l.ShopID,tabName:i.translate(l.TabNameID),gold:0,nightmarePoints:0,ladderPoints:0,item1:s.createBasicItem(r[0]),item2:s.createBasicItem(u[0]),numItem1:0,numItem2:0};c.shopName in o.shopNames&&(c.shopName=o.shopNames[c.shopName]),1==l.PurchaseType1?c.gold+=l.PurchaseItemValue1:3==l.PurchaseType1?c.ladderPoints+=l.PurchaseItemValue1:8==l.PurchaseType1?c.nightmarePoints+=l.PurchaseItemValue1:c.numItem1=l.PurchaseItemValue1,1==l.PurchaseType2?c.gold+=l.PurchaseItemValue2:3==l.PurchaseType2?c.ladderPoints+=l.PurchaseItemValue2:8==l.PurchaseType2?c.nightmarePoints+=l.PurchaseItemValue2:c.numItem2=l.PurchaseItemValue2,c.gold=c.gold/100/100,m.shopCosts.push(c)}}if(null!=this.item){var m=this;m.shopCosts=[];for(var n="all-items.lzjson",h=["combinedshoptable_cash.lzjson","combinedshoptable_system.lzjson","combinedshoptable.lzjson",n],l=0;l<h.length;++l)t.init(h[l],null,function(){},function(){e(function(){m.initShops()})});this.initShops=function(){for(var e=0;e<h.length;++e)if(!t.isLoaded(h[e]))return;m.shopCosts=[],a("combinedshoptable.lzjson"),a("combinedshoptable_system.lzjson"),a("combinedshoptable_cash.lzjson");for(var s=[],e=0;e<m.shopCosts.length;++e){for(var o=!1,i=0;i<s.length;++i)if(m.shopCosts[e].tabName==s[i].tabName&&m.shopCosts[e].gold==s[i].gold&&m.shopCosts[e].item1.id==s[i].item1.id&&m.shopCosts[e].numItem1.id==s[i].numItem1.id&&m.shopCosts[e].item2.id==s[i].item2.id&&m.shopCosts[e].numItem2.id==s[i].numItem2.id){o=!0;break}o||s.push(m.shopCosts[e])}m.shopCosts=s}}}]).directive("dngearsimItemViewShop",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewShopCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-shop.html"}});
"use strict";angular.module("dnsim").controller("itemViewTransferCtrl",["$timeout","dntData","itemFactory","hCodeValues",function(e,t,n,i){if(null!=this.item){var r=this;r.matchingTransfers=[];for(var a=["enchanttransfertable.lzjson","all-items.lzjson","enchanttransferitemtable.lzjson"],l=0;l<a.length;++l)t.init(a[l],null,function(){},function(){e(function(){r.initTransfers()})});this.initTransfers=function(){for(var e=0;e<a.length;++e)if(!t.isLoaded(a[e]))return;r.matchingTransfers=[];var l=t.find("enchanttransferitemtable.lzjson","ItemID",r.item.id);if(l&&l.length>0)for(var m=t.find("enchanttransfertable.lzjson","EnchantLevel",r.item.enchantmentNum),e=0;e<m.length;++e){var s=m[e];if(s.Rank==r.item.rank.id&&s.LevelLimit==r.item.levelLimit){var o=t.find("all-items.lzjson","id",s.NeedItemID1),f=t.find("all-items.lzjson","id",s.NeedItemID2);r.matchingTransfers.push({level:s.ResultLevel,enchantmentNum:s.ResultEnchantLevel,gold:s.NeedCoin/100/100,rank:i.rankNames[s.ResultRank],numItem1:s.NeedItemCount1,item1:n.createBasicItem(o[0]),numItem2:s.NeedItemCount2,item2:n.createBasicItem(f[0])})}}}}}]).directive("dngearsimItemViewTransfer",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewTransferCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-transfer.html"}});
"use strict";angular.module("dnsim").controller("ItemCtrl",["$scope","$window","dntData","hCodeValues","items","jobs","exportLinkHelper","$routeParams","translations","$location","region","itemFactory","$timeout","statHelper","saveHelper",function(e,t,i,n,a,s,m,o,r,l,u,c,d,f,p){function g(){var t=s.getAllJobs();angular.forEach(t,function(t,i){if(t.id==e.item.needJobClass)return void(e.jobName=t.name)})}function I(){if(!i.anyLoading()&&r.isLoaded()&&s.isLoaded()){if(e.item=m.reloadItem(e.preInitItem),null==e.item)return;S(),t.document.title="dngearsim | "+e.item.name,"custom"!=e.item.itemSource&&("skills"==e.item.typeName?e.item.pve&&"pvp"==e.item.pve?e.item.pve="pvp":e.item.pve="pve":e.item.needJobClass>0&&g(),h());var n=c.getItemData(e.item);n.DisjointDrop1>0&&(e.canExtract=!0),(0==n.Type||1==n.Type)&&e.item.enchantmentNum>0&&(e.canTransfer=!0),e.item.setId&&(e.isInSet=!0),5==e.item.typeId&&(e.isPlate=!0),46==e.item.typeId||8==e.item.typeId||112==e.item.typeId||122==e.item.typeId||142==e.item.typeId?(e.hasContents=!0,e.detail="contents"):null!=e.item.typeName?(e.canUse=!0,e.detail="use"):e.canExtract?e.detail="extract":e.canTransfer?e.detail="transfer":e.isPlate?e.detail="plate":e.detail="shops"}}function h(){e.item.fileName||e.item.itemSource in a&&a[e.item.itemSource].mainDnt&&(e.item.fileName=a[e.item.itemSource].mainDnt.replace(".lzjson","").replace(".optimised",""))}function S(){e.item.fullStats=e.item.stats,null!=e.item.enchantmentStats&&e.item.enchantmentStats.length>0&&(e.item.fullStats=n.mergeStats(e.item.enchantmentStats,e.item.fullStats)),null!=e.item.sparkStats&&e.item.sparkStats.length>0&&(e.item.fullStats=n.mergeStats(e.item.sparkStats,e.item.fullStats))}function v(e){}function D(){var t=p.getSavedItems();e.builds=t}u.setLocationByName(o.region),t.scrollTo(0,0),e.jobName=null,e.item=m.decodeItem(o.i),"itemSource"in e.item&&(e.itemType=a[e.item.itemSource]),e.item.setStats=null,e.item.setId=null,e.detail=null,e.getDescription=function(){if(e.item.description)return e.item.description;if(e.itemType&&"title"==e.itemType.name&&r.isLoaded()&&i.isLoaded(e.itemType.mainDnt)){var t=i.find(e.itemType.mainDnt,"id",e.item.id);if(t&&t.length>0&&t[0].DescriptionID>0)return r.translate(t[0].DescriptionID,t[0].DescriptionIDParam)}else if(e.item.fileName&&i.isLoaded(e.item.fileName+".lzjson")){var t=i.find(e.item.fileName+".lzjson","id",e.item.id);if(t&&t.length>0&&t[0].DescriptionID>0)return r.translate(t[0].DescriptionID,t[0].DescriptionIDParam)}return""},e.getExchangeType=function(){if(r.isLoaded()&&i.isLoaded("exchange.lzjson")&&e.item.exchangeType>0){var t=i.find("exchange.lzjson","ExchangeType",e.item.exchangeType);if(t&&t.length>0&&t[0].NameID>0)return r.translate(t[0].NameID).toLowerCase()}return""},e.setDetail=function(t){e.detail=t},e.getNumInSet=function(){var t=e.getBuildName();return t&&e.item&&e.item.setId?f.getNumItemsForSet(e.builds[t].items,e.item.setId):0},e.getBuildName=function(){var t=p.getCurrentBuild();if(e.builds&&!(t&&t in e.builds)){var i=Object.keys(e.builds);i.length&&(t=i[0])}return t},e.getServerStorage=function(){var t=c.getItemData(e.item),i="";return t&&"IsCash"in t&&0==t.IsCash&&(t&&"AbleWStorage"in t&&(1==t.AbleWStorage?i="can server storage":0==t.AbleWStorage&&(i="not transferable")),t&&"Reversion"in t&&(i.length&&(i+=", "),0==t.Reversion?i+="can sell":1==t.Reversion&&(i+="not sellable "))),i},e.getMoreInfo=function(){var t=0,n=0;if(e.moreInfoLoaded()){var a=c.getItemData(e.item);if(a&&"IsCash"in a&&0==a.IsCash){if(a&&"SealID"in a&&"SealCount"in a){t=a.SealCount;var s=i.find("sealcounttable.lzjson","Type2",a.SealID);if(s&&s.length>0&&0==s[0].Type1){var m="Count0";e.item.enchantmentNum&&(m="Count"+e.item.enchantmentNum),m in s[0]&&(n=s[0][m])}}}else if(a&&"IsCash"in a&&"CashTradeCount"in a&&"Reversion"in a&&"AbleWStorage"in a)return 2==a.Reversion?a.CashTradeCount?"cash trade count: "+a.CashTradeCount:"can use warranty":a.AbleWStorage?"can server storage":"not tradable"}return t&&n?"can stamp "+t+" times using "+n+"  stamps":""},e.moreInfoLoaded=function(){return i.isLoaded(e.item.fileName+".lzjson")&&i.isLoaded("sealcounttable.lzjson")},e.loadMoreInfo=function(){i.init(e.item.fileName+".lzjson",null,d),i.init("sealcounttable.lzjson",null,d)},e.handleChange=function(){"custom"!=e.item.itemSource?l.search("i",m.encodeItem(e.item)):(S(),e.item=angular.copy(e.item)),D()},function(){D(),e.preInitItem=e.item,e.item=null;var t=!1;angular.forEach(m.getDntFiles(e.preInitItem),function(e,n){i.isLoaded(n)||(i.init(n,e,v,function(){I()}),t=!0)}),r.isLoaded()||(r.init(v,function(){I()}),t=!0),s.isLoaded()||(s.init(v,function(){I()}),t=!0),t||I()}()}]);
"use strict";angular.module("dnsim").controller("ExportCtrl",["$scope","$window","saveHelper",function(e,t,a){document.body.className="default-back",t.document.title="dngearsim | EXPORT";var o=a.getSavedItems();e.exportData=JSON.stringify(o,null,1),e.save=function(){localStorage.setItem("savedItems",LZString.compressToUTF16(e.exportData))}}]);
"use strict";angular.module("dnsim").controller("HeaderCtrl",[function(){}]).directive("dngearsimHeader",function(){return{templateUrl:"ui/nav/header.html"}});
"use strict";angular.module("dnsim").controller("NavCtrl",["$scope","$location","translations","region","itemCategory","saveHelper",function(t,n,e,a,r,o){try{var i=[],s=[{path:"builds",name:"builds",icon:"menu-hamburger"},{path:"search",name:"search",icon:"search"}],l={path:"build",name:"build"},c=[{path:"builds",name:"builds",icon:"menu-hamburger"},{path:"search",name:"search",icon:"search"},l];a.init(),t.isSearch=function(){return 0==n.path().indexOf("/search")},t.isLoading=function(){return e.startedLoading&&!e.isLoaded()&&null!=a.tlocation&&""!=a.tlocation.url&&!t.noRegion()},t.noRegion=function(){return null==a.dntLocation},t.isHttpOnly=function(){return"https:"!=location.protocol&&"localhost"!=location.hostname},t.getActions=function(){try{var e=null,r=o.getCurrentBuild();r&&(t.savedItems&&r in t.savedItems||(t.savedItems=o.getSavedItems()),r in t.savedItems||(r=null)),null!=a.dntLocation&&""==a.dntLocation.url?e=i:null!=a.tlocation&&""==a.tlocation.url?e=i:r&&"null"!=r?(e=c,l.path="build/"+r,l.name=r,r in t.savedItems&&(l.build=t.savedItems[r])):e=("/view-group"==n.path()||a.dntLocation,s);var u=n.path;return angular.forEach(e,function(t,n){delete t.extraCss,u&&1==u.length?1==t.path.length&&(t.extraCss="active"):t.path&&t.path.length>1&&0==u.indexOf("/"+t.path)&&("builds"==t.path&&"/builds"!=u||(t.extraCss="active"))}),e}catch(n){t.simError=n.message,console.error(n)}}}catch(n){t.simError=n.message,console.error(n)}}]).directive("dngearsimNav",function(){return{templateUrl:"ui/nav/nav.html"}});
"use strict";angular.module("dnsim").controller("SetupCtrl",["$scope","$window","$route","$timeout","translations","dntInit","dntReset","region",function(t,n,o,e,s,i,a,l){function c(){u("current translations contain words like "+s.translate(329)+", "+s.translate(323)+" and "+s.translate(335)),t.isLoading=!1}function r(n){e(function(){null!=t.testResults&&t.testResults.push(n)})}function u(n){e(function(){null!=t.translationResults&&t.translationResults.push(n)})}document.body.className="default-back",n.document.title="dngearsim | SETUP",t.advancedSetup=!1,t.isLoading=s.startedLoading&&!s.isLoaded(),t.translationResults=[],t.hostedFiles=l.hostedFiles;var d=l.alternativeFiles.url;null==d&&(d=""),t.location=d,""==t.location?t.testResults=["No location set"]:t.testResults=["Using location "+t.location],t.setLocation=function(n){t.location=n,t.isLoading=!0,t.saveLocation(),a(),t.translationResults=[];var o=localStorage.getItem("UIStrings_file");null!=o&&o.indexOf(n)!=-1||sessionStorage.removeItem("UIStrings"),s.reset(),s.location=n,s.init(u,c)},t.resetSessionData=function(){t.testResults=["session data reset.. reloading page"],l.tlocation=null,l.dntLocation=null,s.reset(),sessionStorage.clear(),localStorage.clear(),this.saveLocation(),e(function(){location.hash="",location.reload(!0)})},t.loadUiString=function(){t.translationResults=[],sessionStorage.removeItem("UIStrings"),a(),s.reset(),s.location=l.tlocation.url,s.init(u,c)},t.saveLocation=function(){a(),""!=t.location&&(l.setCustomUrl(t.location),l.init(),l.alternativeFiles.region==l.tlocation.region&&(s.reset(),s.init(u,c)),t.testResults=["Location saved","Using location "+t.location])},t.testLocation=function(){""!=t.location&&(t.testResults=["Using location "+t.location,"Loading all data used by the app"],s.init(r,function(){i(r)}))}}]);
"use strict";!function(){function l(l,t,e,s,i){function u(){o.job&&s.getClassBuilds(o.job).then(function(l){o.jobBuilds=l?l:{}})}var o=this;o.maxDisplay=15,o.totalNumResults=0,i.init(null,function(){l.jobId&&(o.job=i.getById(l.jobId),u())}),this.setJob=function(){e(function(){t.search("jobId",o.job.id)})},this.showMoreResults=function(l){o.maxDisplay=o.totalNumResults+l,o.totalNumResults=0},o.allResults=null,o.getFilteredBuilds=function(){if(null==o.allResults){o.allResults=[];for(var l in o.jobBuilds)for(var t in o.jobBuilds[l])o.allResults.push({uid:l,name:t,data:o.jobBuilds[l][t]})}for(var e=[],s=0;s<o.allResults.length;++s){var i=o.allResults[s];if(o.filter&&o.filter.length>0){var u=o.filter.toUpperCase();if(i.name.toUpperCase().indexOf(u)==-1&&(!i.data.guild||i.data.guild.toUpperCase().indexOf(u)==-1))continue}if(e.push(i),e.length>=o.maxDisplay)break}return o.totalNumResults=e.length,e}}angular.module("dnsim").controller("BuildSearchCtrl",["$routeParams","$location","$timeout","onlineService","jobs",l])}();
"use strict";!function(){function e(e,t,n,i){var o=this;o.uid=t.uid,function(){n.getUserBuilds(o.uid).then(function(e){o.storedBuilds=e?e:{}})}(),function(){n.getProfile(o.uid).then(function(e){o.profile=e?e:{}})}(),this.load=function(t,n){var r=i.importGroup(t,n.items);i.renameSavedGroup(r,r,n.enemyLevel,n.playerLevel,n.heroLevel,n.job,n.damageType,n.element,n.secondaryElement,n.enemyStatCaps,n.playerStatCaps,n.conversions,n.baseStats,n.heroStats),o.builds=i.getSavedItems(),e.path("/build/"+r)}}angular.module("dnsim").controller("ProfileCtrl",["$location","$routeParams","onlineService",e])}();
"use strict";!function(){function e(e,t,i,l,n){function s(){var e=r.getUser();e&&i.getUserBuilds(e.uid).then(function(e){r.storedBuilds=e?e:{}})}function u(){var e=r.getUser();e&&i.getProfile(e.uid).then(function(e){r.profile=e?e:{}})}function o(e){console.log(e)}var r=this;r.show=l.show,i.login().then(function(e){s(),u(),r.builds=t.getSavedItems()}),this.saveProfile=function(){i.saveProfile(r.profile).then(u).catch(o)},this.getUser=function(){return i.getUser()},this.save=function(e,t){t.lastUpdate=(new Date).getTime(),i.saveBuild(e,t).then(s).catch(o),r.publishBuild=null},this.startPublish=function(e){e in r.storedBuilds&&(r.builds[e].region||(r.builds[e].region=r.storedBuilds[e].region),r.builds[e].about||(r.builds[e].about=r.storedBuilds[e].about),r.builds[e].guild||(r.builds[e].guild=r.storedBuilds[e].guild)),r.builds[e].region||(r.builds[e].region=n.dntLocation.region),r.publishBuild=e},this.deleteAccount=function(){i.deleteAccount(r.storedBuilds)},this.getBuildLimit=function(){return r.profile&&r.profile.maxBuilds?r.profile.maxBuilds:15},this.getNumStoredBuilds=function(){return _.size(r.storedBuilds)},this.getNumBuilds=function(){return _.size(r.builds)},this.load=function(e,i){var l=t.importGroup(e,i.items);t.renameSavedGroup(l,l,i.enemyLevel,i.playerLevel,i.heroLevel,i.job,i.damageType,i.element,i.secondaryElement,i.enemyStatCaps,i.playerStatCaps,i.conversions,i.baseStats,i.heroStats),r.builds=t.getSavedItems()},this.signOut=function(){i.signOut()},r.deleteLocal=function(e){r.localToDelete=e},r.getAllBuildNames=function(){var e=_.keys(r.builds).concat(_.keys(r.storedBuilds));return _.uniq(e.sort(),!0)},r.reallyDeleteLocal=function(e){t.updatedSavedItems(e,[]),r.localToDelete=null,r.builds=t.getSavedItems()},r.deleteServer=function(e){r.serverToDelete=e},r.reallyDeleteServer=function(e){i.deleteBuild(e,r.storedBuilds[e]).then(s),r.serverToDelete=null}}angular.module("dnsim").controller("PublishCtrl",["$location","saveHelper","onlineService","$routeParams","region",e])}();
"use strict";!function(){function e(e,i,l,u,t){var d=this;d.uid=l.uid,d.buildName=l.buildName,function(){e.getBuild(d.uid,d.buildName).then(function(e){e?(d.build=e,d.stats=t.getBuildStats(e)):d.build={}})}(),function(){e.getProfile(d.uid).then(function(e){d.profile=e?e:{}})}(),d.copyLocally=function(){var e=u.importGroup(d.buildName,d.build.items);u.renameSavedGroup(e,e,d.build.enemyLevel,d.build.playerLevel,d.build.heroLevel,d.build.job,d.build.damageType,d.build.element,d.build.secondaryElement,d.build.enemyStatCaps,d.build.playerStatCaps,d.build.conversions,d.build.baseStats,d.build.heroStats),i.path("/build/"+e)}}angular.module("dnsim").controller("PublishedCtrl",["onlineService","$location","$routeParams","saveHelper","statHelper",e])}();
"use strict";angular.module("dnsim").controller("RegionCtrl",["$timeout","$route","$routeParams","$location","translations","region","$http",function(t,n,o,i,e,r,a){function c(){d.region.dntLocation&&d.region.dntLocation.url&&a.get(d.region.dntLocation.url+"/Version.cfg").then(function(t){if(t&&t.data){var n=t.data.split("\r\n");if(n.length){var o=n[0].split(" ");o.length>1&&(d.dntVersion="v"+o[1])}}})}var d=this;d.override=r.getOverride(),r.init(),e.init(function(t){},function(){t()}),d.region=r,d.tHoverLocation=r.tlocation,d.hoverLocation=r.dntLocation,d.edit=null==r.dntLocation,d.dntVersion="",c(),d.getDntLocation=function(){return r.dntLocation},d.getTlocation=function(){return r.tlocation},d.getHostedFiles=function(){return r.hostedFiles},d.getWorldName=function(){return e.isLoaded()?e.translate(10169):""},d.setTLocation=function(t){r.setTLocation(t),d.edit=!1},d.setLocation=function(t){d.override||d.setTLocation(null),o.region?(o.region=t.region,n.updateParams(o),n.reload()):r.setLocation(t),d.edit=!1,c()},d.setOverride=function(t){r.setOverride(t),d.override=t,d.edit=t}}]).directive("dngearsimRegion",function(){return{templateUrl:"ui/region/region.html",controllerAs:"ctrl"}});
"use strict";!function(){function t(t,e,s,n,i,m){this.customItems=n.customItems,this.maxDisplay=10,this.currentResults=0,null==this.nameSearch&&(this.nameSearch=""),this.getResults=function(){return this.customItems},this.getNewStatName=function(){return""==this.nameSearch||null==this.nameSearch?"unnamed custom item":this.nameSearch},this.createCustomItem=function(){""!=this.nameSearch&&null!=this.nameSearch||(this.nameSearch=this.getNewStatName()),s.path("/item/_custom:."+this.nameSearch)}}angular.module("dnsim").directive("dngearsimCustomItems",function(){return{scope:{},bindToController:{},controller:["$window","saveHelper","$location","hCodeValues","itemCategory","$timeout",t],controllerAs:"customItems",templateUrl:"ui/search/custom-items.html"}})}();
"use strict";!function(){function e(e,a,n,l,t,r,i,m){var o=this;o.boxes=null,o.maxDisplay=32,o.currentResults=0,o.results=null,o.minLevel=1,o.maxLevel=99;var s=Number(localStorage.getItem("minLevel"));n.minLevel&&(s=Number(n.minLevel)),s>0&&s<100&&(o.minLevel=s),o.origMinLevel=s;var c=Number(localStorage.getItem("maxLevel"));n.maxLevel&&(c=Number(n.maxLevel)),c>0&&c<100&&(o.maxLevel=c),o.origMaxLevel=c,o.nameSearch||(o.nameSearch=localStorage.getItem("nameSearch"),n.name&&(o.nameSearch=n.name),null==o.nameSearch&&(o.nameSearch="")),e.document.title="dngearsim | ALL ITEM SEARCH";var u="all-items.lzjson";m.init(u,null,function(){},function(){a(function(){o.initBoxes()})}),o.initBoxes=function(){if(m.isLoaded(u)&&i.isLoaded()){o.boxes=[];for(var e=m.getData(u),n=0;n<e.length;++n){var l=e[n];if(l.NameID>0){var r={id:l.id,name:i.translate(l.NameID,l.NameIDParam),rank:t.rankNames[l.Rank],icon:l.IconImageIndex,levelLimit:l.LevelLimit,fileName:l.fileName};o.boxes.push(r)}}o.boxes=_.sortBy(o.boxes,"name"),a(function(){o.showMoreResults()})}},o.getResults=function(){if(null==o.boxes&&o.initBoxes(),null==o.boxes)return[];for(var e=[],a=o.boxes.length,n=0,l=0;l<a&&n<o.maxDisplay;++l){var t=o.boxes[l];if(!(t.levelLimit<o.minLevel||t.levelLimit>o.maxLevel)&&t.levelLimit){if(""!=o.nameSearch){var r=o.nameSearch.split(" ");0==r.length&&(r=[o.nameSearch]);for(var i=!0,m=0;m<r.length;++m)if(t.name&&t.name.toString().toUpperCase().indexOf(r[m].toUpperCase())==-1){i=!1;break}if(!i)continue}e.push(t),n++}}return o.totalNumResults=e.length,e},o.changeSearch=function(){o.minLevel!=o.origMinLevel&&(localStorage.setItem("minLevel",o.minLevel),l.search("minLevel",o.minLevel),o.origMinLevel=o.minLevel),o.maxLevel!=o.origMaxLevel&&(localStorage.setItem("maxLevel",o.maxLevel),l.search("maxLevel",o.maxLevel),o.origMaxLevel=o.maxLevel),localStorage.setItem("nameSearch",o.nameSearch),l.search("name",o.nameSearch),o.maxDisplay=64,o.results=o.getResults()},o.showMoreResults=function(){a(function(){o.maxDisplay+=18,o.results=o.getResults()})}}var a=["$window","$timeout","$routeParams","$location","hCodeValues","region","translations","dntData",e];angular.module("dnsim").controller("ItemsCtrl",a),angular.module("dnsim").directive("dngearsimEverythingSearch",function(){return{scope:{},bindToController:{nameSearch:"=nameSearch"},controller:a,controllerAs:"items",templateUrl:"ui/search/everything-search.html"}})}();
"use strict";!function(){function e(e,t,a,i,r,o,n,l,s,m,c,u,g){function v(){s.isLoaded()?h():s.init(d,function(){i(h)}),l.init(f.itemCategory.name,b)}function d(e){}function h(){if(n.isLoaded()&&s.isLoaded()){var e=s.getFinalJobs();e.splice(0,0,f.jobs[0]),f.jobs=e,f.allJobs=s.getAllJobs();var t=Number(localStorage.getItem("jobNumber"));f.origJobNumber,a.job&&a.job&&(t=Number(a.job)),null!=t&&angular.forEach(e,function(e,a){if(e.id==t)return void(f.job=e)})}}function b(){i(function(){f.maxDisplay=24,f.results=S()})}function S(){var e=l.getItems(f.itemCategory.name);if(null==e)return null;e=e.sort(function(e,t){return t.levelLimit-e.levelLimit});var t=-1;"pc"in f.stat&&(t=f.stat.pc);var a=-1;"altStat"in f.stat&&(a=f.stat.altStat);for(var i=[],r=[],o=e.length,n=0,s=0;s<o&&(n<f.maxDisplay||f.stat.id>=0);++s){var m=e[s];if(m){if(!f.itemCategory.hideLevel&&(m.levelLimit<f.minLevel||m.levelLimit>f.maxLevel))continue;if(!f.itemCategory.hideRank&&m.rank&&!f.rankChecked[m.rank.id])continue;if(!f.itemCategory.hideJob&&f.job&&f.job.id>-1&&!f.job.isClassJob(m.needJobClass))continue;if(c.initItem(m),m.typeName!=f.itemCategory.name)continue;if(""!=f.nameSearch){var u=f.nameSearch.split(" ");u.length||(u=[f.nameSearch]);for(var g=!0,v=0;v<u.length;++v)if(m.name.toUpperCase().indexOf(u[v].toUpperCase())==-1){g=!1;break}if(!g)continue}if(f.stat.id>=0){for(var d=!1,h={},b=0;b<m.stats.length;++b){var S=m.stats[b];if(S.id==f.stat.id){d=!0,h.i=n,h.s=Number(S.max);break}S.id==t?(d=!0,h.i=n,h.s=Number(S.max)):S.id==a&&(d=!0,h.i=n,h.s=Number(S.max))}if(!d)continue;i.push(h)}r.push(m),n++}}if(f.stat.id>=0){var L=Math.min(n,f.maxDisplay);i=i.sort(function(e,t){return t.s-e.s});for(var y=[],s=0;s<L;++s)y.push(r[i[s].i]);r=y}return f.totalNumResults=r.length,r}var f=this;if(f.itemCategory=l.byPath(a.cat),!f.itemCategory){var L=localStorage.getItem("selectedItemCategory");return L||(L="titles"),f.itemCategory=l.byName(L),f.itemCategory&&!f.itemCategory.hideInSearch||(L="titles",f.itemCategory=l.byName("titles")),void(f.itemCategory&&(r.search("cat",f.itemCategory.path),o.reload()))}t.document.title="dngearsim | SEARCH "+f.itemCategory.name.toUpperCase(),f.job={id:-1,name:""},f.jobs=[f.job],f.allJobs=[],f.minLevel=1,f.maxLevel=99,f.maxDisplay=10,f.totalNumResults=0,f.grades=m.rankNames,f.stat={id:-1,name:""},f.stats=[f.stat],f.results=null,angular.forEach(m.stats,function(e,t){e.searchable&&f.stats.push(e)});var y=Number(localStorage.getItem("minLevel"));a.minLevel&&(y=Number(a.minLevel)),y>0&&y<100&&(f.minLevel=y),f.origMinLevel=y;var C=Number(localStorage.getItem("maxLevel"));a.maxLevel&&(C=Number(a.maxLevel)),C>0&&C<100&&(f.maxLevel=C),f.origMaxLevel=C,f.nameSearch=localStorage.getItem("nameSearch"),a.name&&(f.nameSearch=a.name),f.nameSearch||(f.nameSearch=""),f.origSavedSearchStatId=localStorage.getItem("searchStat"),a.stat&&(f.origSavedSearchStatId=a.stat),f.origSavedSearchStatId>-1&&f.origSavedSearchStatId in m.stats&&(f.stat=m.stats[f.origSavedSearchStatId]),f.navigate=function(){var e=localStorage.getItem("selectedItemCategory");e&&(f.itemCategory=l.byName(e),f.itemCategory&&(r.search("cat",f.itemCategory.path),f.save(),o.reload()))},f.save=function(){f.itemCategory.hideLevel?(r.search("minLevel",null),r.search("maxLevel",null)):(f.minLevel!=f.origMinLevel&&(localStorage.setItem("minLevel",f.minLevel),r.search("minLevel",f.minLevel),f.origMinLevel=f.minLevel),f.maxLevel!=f.origMaxLevel&&(localStorage.setItem("maxLevel",f.maxLevel),r.search("maxLevel",f.maxLevel),f.origMaxLevel=f.maxLevel)),f.itemCategory.hideJob?r.search("job",null):null!=f.job&&f.origJobNumber!=f.job.id&&(localStorage.setItem("jobNumber",f.job.id),f.job.id>-1?r.search("job",f.job.id):r.search("job",null),f.origJobNumber=f.job.id),f.stat&&f.origSavedSearchStatId!=f.stat.id&&(localStorage.setItem("searchStat",f.stat.id),f.stat.id>-1?r.search("stat",f.stat.id):r.search("stat",null),f.origSavedSearchStatId=f.stat.id),localStorage.setItem("nameSearch",f.nameSearch),r.search("name",f.nameSearch)},f.rankChecked=m.checkedRank,f.changeSearch=function(){f.save(),b()},f.showMoreResults=function(){i(function(){f.maxDisplay+=18,f.results=S()})},u.init(),n.isLoaded()?v():n.init(d,function(){i(v)})}var t=["$scope","$window","$routeParams","$timeout","$location","$route","translations","itemCategory","jobs","hCodeValues","itemFactory","region","saveHelper",e];angular.module("dnsim").controller("ItemSearchCtrl",t)}();
"use strict";!function(){function e(e,a,o,n,t,i,r,s,l,c){function u(e){return null!=e?"skilltable_character"+e.toLowerCase()+".lzjson":null}function d(){if(h.loadedJobId==h.job.id)return h.skills;var e=[];if(h.job.id>=0){var o=t.getBaseJobName(h.job);e.push(o)}angular.forEach(e,function(o,n){var t=u(o);t&&(r.isLoaded(t)?f(e,h.job):r.init(t,null,b,function(){a(function(){f(e,h.job)})}))})}function f(e,a){h.skills=[];var o=!0;angular.forEach(e,function(e,a){var n=u(e);r.isLoaded(n)||(o=!1)}),o&&(angular.forEach(e,function(e,a){for(var o=u(e),n=r.getData(o),t=n.length,l=0;l<t;++l)if(0!=n[l].NameID&&(n[l].EffectClass1>0||n[l].EffectClass2>0||n[l].EffectClass3>0||n[l].EffectClass4>0||n[l].EffectClass5>0||n[l].EffectClass6>0)){var c={d:n[l]};c.id=n[l].id,c.typeName="skills",c.itemSource="skills",c.name=i.translate(n[l].NameID,n[l].NameIDParam),c.needJobClass=n[l].NeedJob,c.rank=s.rankNames[0],c.baseJobName=e.toLowerCase(),c.icon=n[l].IconImageIndex,h.skills.push(c)}}),h.loadedJobId=a.id)}function b(e){}function m(){if(i.isLoaded()&&t.isLoaded()){var e=t.getFinalJobs();h.jobs&&h.jobs.length&&e.splice(0,0,h.jobs[0]),h.jobs=e,h.allJobs=t.getAllJobs();var a=Number(localStorage.getItem("jobNumber"));null!=a&&angular.forEach(e,function(e,o){if(e.id==a)return void(h.job=e)}),h.getResults()}}function g(){t.isLoaded()?a(m):t.init(b,function(){a(m)})}var h=this;h.allJobs=[],h.dntName="",h.skills=[],h.loadedJobId=-1,h.itemCategory=l.byName("skills"),h.nameSearch=localStorage.getItem("nameSearch"),h.nameSearch||(h.nameSearch=""),n.init(),i.isLoaded()?g():i.init(b,function(){a(g)}),h.navigate=function(){a(function(){h.itemCategory&&c.path(h.itemCategory.path)})},h.isLoading=function(){if(!i.isLoaded())return i.startedLoading||i.init(b,function(){}),!0;var e=t.getBaseJobName(h.job),a=u(e);return!(!a||r.isLoaded(a))},h.getResults=function(){var e=d();if(null==e)return[];h.job&&h.job.id>=0&&localStorage.setItem("jobNumber",h.job.id),localStorage.setItem("nameSearch",h.nameSearch);for(var a=[],o=e.length,n=0;n<o;++n){var t=e[n];if(""!=h.nameSearch){var i=h.nameSearch.split(" ");i.length||(i=[h.nameSearch]);for(var r=!0,s=0;s<i.length;++s)if(t.name&&t.name.toString().toUpperCase().indexOf(i[s].toUpperCase())==-1){r=!1;break}if(!r)continue}h.job.id>=0&&!h.job.isClassJob(t.needJobClass)||a.push(t)}return a}}angular.module("dnsim").directive("dngearsimSkillSearch",function(){return{scope:{},bindToController:{job:"=job",jobs:"=jobs"},controller:["$window","$timeout","saveHelper","region","jobs","translations","dntData","hCodeValues","itemCategory","$location",e],controllerAs:"skillSearch",templateUrl:"ui/search/skill-search.html"}})}();
"use strict";!function(){function t(){return{restrict:"E",scope:{},bindToController:{job:"=job",onSetJob:"&onSetJob"},templateUrl:"ui/widgets/choose-class.html",controllerAs:"ctrl",controller:["$window","$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad","character",o]}}function o(t,o,e,n,s,i,r,a,l,u){function c(t){}this.getFinalJobs=function(){for(var t=r.getFinalJobs(),o=[],e=0;e<t.length;++e)r.getBaseJobName(t[e])==this.bJob&&o.push(t[e]);return o},this.getBaseJobs=function(){return r.getBaseJobs()},this.getJobName=function(t){for(var o=r.getAllJobs(),e=0;e<o.length;++e)if(o[e].d.EnglishName==t)return o[e].name},this.setJob=function(t){this.job=t,t&&this.onSetJob()},r.init(c,n)}angular.module("dnsim").directive("dnsimChooseClass",t)}();
"use strict";!function(){function e(){return{restrict:"E",scope:{},bindToController:{collapse:"=collapse",cat:"=cat",buildScreen:"=buildScreen",onChange:"&onChange"},templateUrl:"ui/widgets/dnsim-category-links.html",controller:t,controllerAs:"ctrl"}}function t(e,t,n){var o=this;o.categories=e.categories,o.collapsed=!0,o.shouldShow=function(e){return o.buildScreen?!e.hideInBuild:!e.hideInSearch},o.isLoading=function(){return!n.loaded},o.setCategory=function(e){o.collapse&&(o.collapsed=!o.collapsed,t.scrollTo(0,0)),o.cat!=e&&(o.cat=e,localStorage.setItem("selectedItemCategory",e.name),o.onChange&&o.onChange())},o.getName=function(e){return e.tId?n.translate(e.tId).toLowerCase():e.name}}t.$inject=["itemCategory","$window","translations"],angular.module("dnsim").directive("dnsimCategoryLinks",e)}();
"use strict";!function(){function i(i,t,n){return{restrict:"E",scope:{item:"=item"},templateUrl:"ui/widgets/dnsim-item-icon.html",link:function(i,t,n){i.$watch("item",function(t,n){t&&(i.iconImage=i.getIcon())}),i.getIcon=function(){if(i.item&&i.item.icon>0){var t,n=Math.floor(i.item.icon/200+1);return t="skills"==i.item.typeName?"skillicon":"itemicon",n>9?t+n+".png":t+"0"+n+".png"}return null},i.iconImage=i.getIcon(),i.getIconXPostion=function(){return i.item&&i.item.icon>0?i.item.icon%10*40+5:0},i.getIconYPostion=function(){return i.item&&i.item.icon>0?40*Math.floor(i.item.icon%200/10)+4:0}}}}angular.module("dnsim").directive("dnsimItemIcon",["exportLinkHelper","$location","region",i])}();
"use strict";!function(){function i(i,e,t){return{restrict:"E",scope:{item:"=item",noClick:"=noClick"},templateUrl:"ui/widgets/dnsim-item-link.html",link:function(e,n,o){e.itemLink="item/?region="+t.dntLocation.region+"&i="+i.encodeItem(e.item),e.$watch("item",function(n,o){n&&(e.itemLink="item/?region="+t.dntLocation.region+"&i="+i.encodeItem(e.item))})}}}angular.module("dnsim").directive("dnsimItemLink",["exportLinkHelper","$location","region",i])}();
"use strict";!function(){function i(){return{restrict:"E",scope:{},bindToController:{item:"=item",small:"=small"},templateUrl:"ui/widgets/dnsim-job-icon.html",controller:t,controllerAs:"ctrl"}}function t(){this.small?(this.sizeValue="205px 205px",this.iconSize=22,this.iconOffset=0):(this.sizeValue="410px 410px",this.iconSize=44,this.iconOffset=5),this.getIconXPostion=function(){return this.item&&this.item.d&&this.item.d.JobIcon>0?this.item.d.JobIcon%9*this.iconSize+this.iconOffset:0},this.getIconYPostion=function(){return this.item&&this.item.d&&this.item.d.JobIcon>0?Math.floor(this.item.d.JobIcon/9)*this.iconSize+this.iconOffset:0}}angular.module("dnsim").directive("dnsimJobIcon",[i])}();
"use strict";!function(){function o(o,n,t,i){return{restrict:"E",transclude:!0,scope:{alsoShowFor:"=alsoShowFor"},templateUrl:"ui/widgets/dnsim-loading.html",link:function(a,d,u){a.$on("TRANSLATION_LOAD_EVENT",function(){a.setLoadCount()}),a.$on("DNTDATA_LOAD_EVENT",function(){a.setLoadCount()}),a.$on("DNTDATA_LOAD_ERROR",function(){t(function(){a.loadError=!0})}),a.$on("TRANSLATION_LOAD_ERROR",function(){t(function(){a.loadError=!0})}),a.numLoading=0,a.setLoadCount=function(){a.noRegion=!i.dntLocation;var d=o.anyLoading();n.isLoaded()||d++,(a.numLoading<d||!a.totalToLoad)&&(a.totalToLoad=d),a.numLoading=d,t()},a.loadError=!1,a.setLoadCount()}}}angular.module("dnsim").directive("dnsimLoading",["dntData","translations","$timeout","region",o])}();
"use strict";!function(){function t(){return{restrict:"A",link:function(t,n,i){var c=!1;n.on("click",function(t){if(!c)try{this.selectionStart=0,this.selectionEnd=this.value.length+1,c=!0}catch(t){this.select(),c=!0}}),n.on("blur",function(t){c=!1})}}}angular.module("dnsim").directive("dnsimSelectAllOnClick",[t])}();
"use strict";!function(){function t(t){return{restrict:"A",scope:{stats:"=stats",build:"=build",altStats:"=altStats",separator:"=separator",filter:"=filter",numInSet:"=numInSet"},link:function(e,n,a){function s(){function a(t){var e=n.clone();e.css("display",u),e.html(t),m.after(e),m=e,r.push(e)}n.css("display","none");var s=e.stats;s||(s=e.altStats),angular.forEach(r,function(t,e){t.remove()});var l=!0,m=n,d={};angular.forEach(s,function(e,n){var a=t.stats[e.id];a.summaryFor&&(d[a.summaryFor]=e)}),angular.forEach(s,function(n,r){var u="";if(n.id in t.stats){var m=t.stats[n.id];if(!e.filter&&"hide"in m&&m.hide)return;if(e.filter&&!m[e.filter])return;if(m.summaryFor)return;if(l||(u+=i),l=!1,"needSetNum"in n&&(n.needSetNum<=e.numInSet&&(u+="*"),u+=n.needSetNum+"&nbsp;"),u+="<strong>",e.build)if("primary"==m.element){var o=0;e.build.element&&(o=e.build.element.id),u+=t.elements[o].name+"&nbsp;"}else if("secondary"==m.element){var o=0;e.build.secondaryElement&&(o=e.build.secondaryElement.id),u+=t.elements[o].name+"&nbsp;"}if(u+=m.name+":</strong>&nbsp;"+m.display(n),m.combineWith>0&&angular.forEach(s,function(t,e){t.id==m.combineWith&&t.max!=n.max&&(u+="-"+m.display(t))}),n.id in d){var c=d[n.id];u+="&nbsp;|&nbsp;<em>"+t.stats[c.id].display(c),u+="</em>"}}else l||(u+=i),l=!1,"needSetNum"in n&&(u+=n.needSetNum+"-Increases&nbsp;"),u+=n.id+":&nbsp;"+n.max;a(u)})}var i;i=e.separator?"&nbsp;"+e.separator+" ":"";var r=[],u=n.css("display");e.$watch("stats",function(t,e){t&&s()}),e.$watch("altStats",function(t,e){t&&s()}),e.$watch("numInSet",function(t,e){t>=0&&s()})}}}angular.module("dnsim").directive("dnsimStats",["hCodeValues",t])}();
"use strict";!function(){function n(){return{require:"ngModel",link:function(n,r,t,u){u.$parsers.push(function(n){return""+n}),u.$formatters.push(function(n){return parseFloat(n,10)})}}}angular.module("dnsim").directive("dnsimStringToNumber",n)}();
"use strict";!function(){function n(){return{require:"ngModel",link:function(n,r,t,e){e.$parsers.push(function(n){return""+n/100}),e.$formatters.push(function(n){return 100*parseFloat(n,10)})}}}angular.module("dnsim").directive("dnsimStringToPercent",n)}();
"use strict";!function(){function e(e){return{restrict:"A",link:function(n,i,t){var r=e(t.fileChange),a=function(e){n.$apply(function(){r(n,{$event:e,files:e.target.files})})};i[0].addEventListener("change",a,!1)}}}angular.module("dnsim").directive("fileChange",["$parse",e])}();
"use strict";!function(){function t(t,e,n,o){function i(t){}var a="rebootplayerweighttable.lzjson",l="playercommonleveltable.lzjson",r="playerleveltable.optimised.json",s="heroleveltable.lzjson";return{init:function(o){n.init(i,o),t.init(a,e.jobConversionColsToLoad,i,o),t.init(l,e.statCapColsToLoad,i,o),t.init(r,e.jobBaseStatColsToLoad,i,o),t.init(s,null,i,o),t.init("potentialtable_herolevel.lzjson",null,i,o)},getHeroStats:function(e){var n=[];if(e>0){var i=t.findFast(s,"id",e);if(1==i.length){var a=t.getRow(s,i[0]);if(a){var l=t.findFast("potentialtable_herolevel.lzjson","PotentialID",a.HeroLevelAbilityID);if(1==l.length){var r=t.getRow("potentialtable_herolevel.lzjson",l[0]);r&&(n=o.getStats(r))}}}}return n},getStatCaps:function(e){if(e>0){var n=t.findFast(l,"id",e);if(1==n.length)return t.getRow(l,n[0])}return{}},getConversions:function(e){if(e>0){var n=t.findFast(a,"id",e);if(1==n.length)return t.getRow(a,n[0])}return{}},getBaseStats:function(e,n){if(e>0&&n>0){var o=t.findFast(r,"id",100*Number(n)+Number(e)-100);if(1==o.length)return t.getRow(r,o[0])}return{}}}}t.$inject=["dntData","itemColumnsToLoad","jobs","hCodeValues"],angular.module("dnsim").factory("character",t)}();
"use strict";!function(){function t(){return{mainDnt:{NameID:!0,DescriptionID:!0,NameIDParam:!0,DescriptionIDParam:!0,Type:!0,TypeParam1:!0,TypeParam2:!0,TypeParam3:!0,LevelLimit:!0,NeedJobClass:!0,Rank:!0,State1:!0,StateValue1:!0,State1_Max:!0,State2:!0,StateValue2:!0,State2_Max:!0,State3:!0,StateValue3:!0,State3_Max:!0,State4:!0,StateValue4:!0,State4_Max:!0,State5:!0,StateValue5:!0,State5_Max:!0,State6:!0,StateValue6:!0,State6_Max:!0,State7:!0,StateValue7:!0,State7_Max:!0,State8:!0,StateValue8:!0,State8_Max:!0,State9:!0,StateValue9:!0,State9_Max:!0,State10:!0,StateValue10:!0,State10_Max:!0,EnchantID:!0,SkillID:!0,dragonjeweltype:!0,AbleWStorage:!0,ExchangeType:!0,IconImageIndex:!0,IsCash:!0,DisjointDrop1:!0,Disjointamount:!0},partsDnt:{SetItemID:!0},enchantDnt:{EnchantID:!0,EnchantLevel:!0,EnchantRatio:!0,BreakRatio:!0,MinDown:!0,MaxDown:!0,NeedCoin:!0,DisjointDrop:!0,NeedItemID1:!0,NeedItemCount1:!0,NeedItemID2:!0,NeedItemCount2:!0,NeedItemID3:!0,NeedItemCount3:!0,NeedItemID4:!0,NeedItemCount4:!0,NeedItemID5:!0,NeedItemCount5:!0,ProtectItemCount:!0,State1:!0,State1Value:!0,State2:!0,State2Value:!0,State3:!0,State3Value:!0,State4:!0,State4Value:!0,State5:!0,State5Value:!0,State6:!0,State6Value:!0,State7:!0,State7Value:!0,State8:!0,State8Value:!0,State9:!0,State9Value:!0,State10:!0,State10Value:!0},potentialDnt:{PotentialID:!0,PotentialNo:!0,PotentialRatio:!0,State1:!0,State1Value:!0,State2:!0,State2Value:!0,State3:!0,State3Value:!0,State4:!0,State4Value:!0,State5:!0,State5Value:!0,State6:!0,State6Value:!0,State7:!0,State7Value:!0,State8:!0,State8Value:!0,State9:!0,State9Value:!0,State10:!0,State10Value:!0,State11:!0,State11Value:!0,State12:!0,State12Value:!0,State13:!0,State13Value:!0,State14:!0,State14Value:!0,State15:!0,State15Value:!0,State16:!0,State16Value:!0},gemDnt:{Type:!0},setDnt:null,sparkDnt:null,jobsDnt:{JobName:!0,JobNumber:!0,BaseClass:!0,ParentJob:!0,EnglishName:!0,JobIcon:!0},jobBaseStatColsToLoad:{Strength:!0,Agility:!0,Intelligence:!0,Stamina:!0,AggroperPvE:!0,BaseMP:!0},statCapColsToLoad:{Cbase:!0,Cdefense:!0,Ccritical:!0,Cfinaldamage:!0,CcriticalDamage:!0},jobConversionColsToLoad:{HP:!0,StrengthAttack:!0,AgilityAttack:!0,IntelligenceAttack:!0,PhysicalDefense:!0,MagicDefense:!0,Critical:!0,CriticalResistance:!0,Stiff:!0,StiffResistance:!0,Stun:!0,StunResistance:!0,MoveSpeed:!0,MoveSpeedRevision:!0,DownDelay:!0,ElementAttack:!0,ElementDefense:!0,ElementDefenseMin:!0,ElementDefenseMax:!0,StrengthIntelligenceToCriticalDamage:!0}}}angular.module("dnsim").factory("itemColumnsToLoad",[t])}();
"use strict";!function(){function t(t,e){function n(n,a,o){return{reader:new DntReader,loaded:!1,startedLoading:!1,file:a,dntLocation:n,progressCallback:null,completeCallbacks:[],init:function(n,i,r){if(this.loaded)i&&i();else if(this.progressCallback=n,i&&this.completeCallbacks.push(i),!this.startedLoading){this.startedLoading=!0;var s=this;this.reader.colsToLoad=o,this.dntLocation&&this.dntLocation.url&&this.dntLocation.url.length&&(t.$broadcast("DNTDATA_LOAD_EVENT"),e(function(){s.reader.loadDntFromServerFile(s.dntLocation.url+"/"+a,function(t){s.progressCallback&&s.progressCallback(t)},function(e,n){s.loaded=!0,angular.forEach(s.completeCallbacks,function(t,e){t&&t()}),s.completeCallbacks=[],t.$broadcast("DNTDATA_LOAD_EVENT")},function(e){s.failed=!0,r?(s.loaded=!0,console.log("ignoring the error - this file may not exist yet for the region"),angular.forEach(s.completeCallbacks,function(t,e){t&&t()}),s.completeCallbacks=[],t.$broadcast("DNTDATA_LOAD_EVENT")):(s.startedLoading=!1,s.loaded=!1,t.$broadcast("DNTDATA_LOAD_ERROR"))})}))}},reset:function(){this.reader=new DntReader,this.loaded=!1,this.startedLoading=!1}}}return{loaders:{},findIndexes:{},dntLocation:null,setLocation:function(t){this.dntLocation=t;var e=this;angular.forEach(this.loaders,function(n,a){n.dntLocation!=t&&(n.dntLocation=t,e.reset(a))})},init:function(t,e,a,o,i){a||(a=function(){}),t in this.loaders||t.length>0&&(this.loaders[t]=n(this.dntLocation,t,e)),this.loaders[t].init(a,o,i)},getData:function(t){if(this.isLoaded(t)){for(var e=this.loaders[t].reader,n=new Array(e.numRows),a=0;a<e.numRows;++a)n[a]=e.getRow(a);return n}return[]},find:function(t,e,n){for(var a=this.findFast(t,e,n),o=[],i=a.length,r=0;r<i;++r)o.push(this.getRow(t,a[r]));return o},findFast:function(t,e,n){if(this.isLoaded(t)){t in this.findIndexes||(this.findIndexes[t]={});var a=this.loaders[t].reader,o=a.columnIndexes[e],i=this.findIndexes[t];if(!(e in i)){var r={};i[e]=r;for(var s=a.data,d=s.length,l=0;l<d;++l){var u=s[l],c=u[o];c in r?r[c].push(l):r[c]=[l]}}return n in i[e]?i[e][n]:[]}return[]},isLoaded:function(t){return t in this.loaders&&this.loaders[t].loaded},hasFailed:function(t){return t in this.loaders&&this.loaders[t].failed},hasStartedLoading:function(t){return this.isLoaded(t)||t in this.loaders&&this.loaders[t].startedLoading},reset:function(t){t in this.loaders&&(this.loaders[t].reset(),delete this.loaders[t],delete this.findIndexes[t])},resetAll:function(){var t=this;angular.forEach(this.loaders,function(e,n){t.reset(n)})},anyLoading:function(){var t=0;return angular.forEach(this.loaders,function(e,n){!e.loaded&&e.startedLoading&&t++}),t},getNumRows:function(t){return this.isLoaded(t)?this.loaders[t].reader.numRows:0},getRow:function(t,e){return this.isLoaded(t)?this.loaders[t].reader.getRow(e):{}},lookupValue:function(t,e,n){return this.isLoaded(t)?e[this.loaders[t].reader.columnNames[n]]:null},convertData:function(t,e){return this.isLoaded(t)?this.loaders[t].reader.convertData(e):null},getValue:function(t,e,n){return this.isLoaded(t)?this.loaders[t].reader.getValue(e,n):null}}}angular.module("dnsim").factory("dntData",["$rootScope","$timeout",t])}();
"use strict";!function(){function n(n,i,t,a){return function(a){function e(n){n<o.length?o[n].init(a,function(){o[n].isLoaded()&&("fileName"in o[n]&&a("dnt loaded: "+o[n].fileName),e(n+1))}):a("Full initialise complete")}a("starting init");var o=[i];angular.forEach(n,function(n,i){"all"!=i&&angular.forEach(n,function(n,i){if(i.indexOf("Dnt")==i.length-3){var a={init:function(i,a){t.init(n,null,i,a)},isLoaded:function(){return t.isLoaded(n)},fileName:n};o.push(a)}})}),e(0)}}angular.module("dnsim").factory("dntInit",["items","jobs","dntData","itemFactory",n])}();
"use strict";!function(){function t(t,n,e){return function(){angular.forEach(t,function(t,n){t.reset()}),n.reset(),e.resetAll()}}angular.module("dnsim").factory("dntReset",["items","jobs","dntData",t])}();
"use strict";!function(){function e(e,t,n,a,i,r,l,s,o,m){return{encodeItem:function(e,t){if(e){var n;return"custom"==e.typeName?(n="_custom",angular.forEach(e.stats,function(e,t){n+=t>0?"|":":C",n+=e.id.toString(36)+"="+e.max})):e.id&&(n="I"+e.id.toString(36)+":_","itemSource"in e?n+=e.itemSource:"itemTypeName"in e?n+=e.itemTypeName:e.fileName&&(n+=":F"+e.fileName),(e.enchantmentNum||0==e.enchantmentNum)&&(n+=":E"+e.enchantmentNum.toString(36)),e.pid>0&&(n+=":P"+e.pid.toString(36)),e.sparkId>0&&(n+=":H"+e.sparkId.toString(36)),"skills"==e.typeName&&(n+=":J"+e.baseJobName),e.pve&&(n+=":V"+e.pve)),e.name&&!t&&(n+=":."+e.name.replace(/ /g,"-").replace(/\//g," ")),n}return""},decodeItem:function(e){var n={};return e&&angular.forEach(e.split(":"),function(e,a){if("I"==e.charAt(0))n.id=parseInt(e.substr(1),36);else if("E"==e.charAt(0))n.enchantmentNum=parseInt(e.substr(1),36);else if("P"==e.charAt(0))n.pid=parseInt(e.substr(1),36);else if("S"==e.charAt(0))n.setId=parseInt(e.substr(1),36);else if("H"==e.charAt(0))n.sparkId=parseInt(e.substr(1),36);else if("J"==e.charAt(0))n.baseJobName=e.substr(1);else if("V"==e.charAt(0))n.pve=e.substr(1);else if("_"==e.charAt(0))n.itemSource=e.substr(1);else if("."==e.charAt(0))n.name=e.substr(1).replace("-"," ");else if("C"==e.charAt(0)){n.stats=[];var i=e.substr(1);angular.forEach(i.split("|"),function(e,t){var a=e.split("=");n.stats.push({id:parseInt(a[0],36),max:Number(a[1])})})}else"F"==e.charAt(0)&&(n.fileName=e.substr(1),angular.forEach(t,function(e,t){e.mainDnt&&0==e.mainDnt.indexOf(n.fileName+".")&&(n.itemSource=t)}))}),n},createGroupLink:function(e,t){var n=[],a=this;if(null==t)return"";angular.forEach(t.items,function(e,t){var i=a.encodeItem(e,!0);i&&i.length&&n.push(i)});var i="view-group?region=";return m.dntLocation&&m.dntLocation.region&&(i+=m.dntLocation.region),t.enemyLevel&&(i+="&e="+t.enemyLevel),t.playerLevel&&(i+="&p="+t.playerLevel),t.heroLevel&&(i+="&h="+t.heroLevel),t.job&&t.job.id&&(i+="&j="+t.job.id),t.damageType&&t.damageType.id&&(i+="&d="+t.damageType.id),t.element&&t.element.id&&(i+="&t="+t.element.id),t.secondaryElement&&t.secondaryElement.id&&(i+="&s="+t.secondaryElement.id),i+="&g="+encodeURI(e)+"&i="+n.join(",")},createShortUrl:function(t,n){var a=this.createGroupLink(t,n),i=angular.element(document.querySelector("base")).attr("href"),r=window.location.href.split(i)[0]+i+a,l={longUrl:r};console.log("getting short url for ",r),e.post("https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo",l).success(function(e,t,i,r){n.shortUrl=e.id,sessionStorage.setItem(a,e.id)}).error(function(e,t,n,a){})},reloadItem:function(e){if(null!=e){if("itemTypeName"in e&&!e.itemSource&&(e.itemSource=e.itemTypeName),"rbTech"==e.itemSource&&(e.itemSource="tech"),"custom"==e.itemSource||"custom"==e.typeName)return e.typeName="custom",e;if("skills"==e.itemSource||"skills"==e.typeName){e.enchantmentNum||(e.enchantmentNum=1);var r="skilltable_character"+e.baseJobName+".lzjson",m="pve";"pvp"==e.pve&&(m="pvp");var c="skillleveltable_character"+e.baseJobName+m+".lzjson",u=n.find(r,"id",e.id)[0];u||console.log("cannot get skill data from ",r);var f=n.getData(c),d={};angular.forEach(f,function(t,n){if(t.SkillIndex==e.id&&t.SkillLevel==e.enchantmentNum)return void(d=t)});var p={id:e.id,itemSource:e.itemSource,typeName:e.itemSource,needJobClass:u.NeedJob,baseJobName:e.baseJobName,rank:i.rankNames[0],enchantmentNum:e.enchantmentNum,name:s.translate(u.NameID,u.NameIDParam),description:s.translate(d.SkillExplanationID,d.SkillExplanationIDParam),icon:u.IconImageIndex,pve:e.pve};return p.stats=l.getSkillStats(p,u,f),p}if(e.itemSource in t){var g=t[e.itemSource],h=n.findFast(g.mainDnt,"id",e.id);if(h.length){var S=h[0],v=n.getValue(g.mainDnt,S,"TypeParam1"),N=null,I=n.find(g.potentialDnt,"id",e.pid);I.length||(I=n.find(g.potentialDnt,"PotentialID",v)),I.length||(I=n.find(g.potentialDntEx,"id",e.pid),I.length||(I=n.find(g.potentialDntEx,"PotentialID",v))),I.length>0&&(N=I[0],N.PotentialID!=v&&(N=null,console.log("bad potential")));var p=a.createItem(g,S,N);a.initItem(p),o.setItemCategory(p,x),p.gemSlot=e.gemSlot;var D=null;if((D="weapons"!=p.typeName&&0!=p.typeId?"partsDnt":"weaponDnt")&&n.isLoaded(g[D])&&n.isLoaded(g.setDnt)){p.setStats=[];var b=n.find(g[D],"id",e.id);if(b.length>0){p.setId=b[0].SetItemID;var y=n.find(g.setDnt,"id",b[0].SetItemID);y.length>0&&(p.setStats=i.getStats(y[0]))}}if(p.fullStats=p.stats,e.enchantmentNum>=0)if(p.enchantmentNum=e.enchantmentNum,"skills"==p.typeName);else if("talisman"==p.typeName){var k=[];angular.forEach(p.stats,function(e,t){k.push({id:e.id,max:e.max*(p.enchantmentNum/100)})}),p.enchantmentStats=k,p.fullStats=i.mergeStats(p.enchantmentStats,p.stats)}else if(g.enchantDnt){var w=n.find(g.enchantDnt,"EnchantID",p.enchantmentId);angular.forEach(w,function(e,t){if(e.EnchantLevel==p.enchantmentNum)return p.enchantmentStats=i.getStats(e),void(p.fullStats=i.mergeStats(p.enchantmentStats,p.stats))})}else if(g.petLevelDnt){var w=n.find(g.petLevelDnt,"PetLevelTypeID",p.enchantmentId);angular.forEach(w,function(e,t){e.PetLevel==p.enchantmentNum&&(p.enchantmentStats=i.getStats(e),p.fullStats=i.mergeStats(p.enchantmentStats,p.stats))})}if(e.sparkId>0){p.sparkId=e.sparkId;var J=n.find(g.sparkDnt,"id",e.sparkId);J.length>0&&(p.sparkStats=i.getStats(J[0]),p.fullStats=i.mergeStats(p.fullStats,p.sparkStats))}else if(p.dragonjeweltype){p.offensiveGemSlots=0,p.increasingGemSlots=0;var L=n.find("dragonjewelslottable.lzjson","DragonJewelID",p.dragonjeweltype);L&&L.length>0&&(1==L[0].DragonJewelSlot1&&p.offensiveGemSlots++,1==L[0].DragonJewelSlot2&&p.offensiveGemSlots++,1==L[0].DragonJewelSlot3&&p.offensiveGemSlots++,1==L[0].DragonJewelSlot4&&p.offensiveGemSlots++,2==L[0].DragonJewelSlot1&&p.increasingGemSlots++,2==L[0].DragonJewelSlot2&&p.increasingGemSlots++,2==L[0].DragonJewelSlot3&&p.increasingGemSlots++,2==L[0].DragonJewelSlot4&&p.increasingGemSlots++)}return p}console.log("item "+e.id+" not found in "+g.mainDnt)}if(e.fileName){var E=n.findFast(e.fileName+".lzjson","id",e.id);if(E.length>0){var j=E[0],x=n.getRow(e.fileName+".lzjson",j);return p=a.createBasicItem(x),p.row=j,p.needJobClass=x.NeedJobClass,p.exchangeType=x.ExchangeType,p.fileName=e.fileName,p.gemSlot=e.gemSlot,p.description=s.translate(x.DescriptionID,x.DescriptionIDParam),a.initItem(p),p}return{name:"unknown item"}}return{name:"unknown item source: "+e.itemSource}}},getDntFiles:function(e){var n={};if(null==e);else{if(!e.itemSource&&e.itemTypeName in t&&(e.itemSource=e.itemTypeName),"rbTech"==e.itemSource&&(e.itemSource="tech"),e.itemSource in t){var a=t[e.itemSource];n["exchange.lzjson"]=null,n[a.mainDnt]=r.mainDnt;for(var i in a)if(i.indexOf("Dnt")>0){if("enchantDnt"==i&&!e.enchantmentNum)continue;n[a[i]]=r[i]}}if("skills"==e.itemSource||"skills"==e.typeName){n["skilltable_character"+e.baseJobName+".lzjson"]=null;var l="skillleveltable_character"+e.baseJobName+"pve.lzjson";n[l]=null,l="skillleveltable_character"+e.baseJobName+"pvp.lzjson",n[l]=null}e.fileName&&(n[e.fileName+".lzjson"]=null)}return n}}}e.$inject=["$http","items","dntData","itemFactory","hCodeValues","itemColumnsToLoad","statHelper","translations","itemCategory","region"],angular.module("dnsim").factory("exportLinkHelper",e)}();
"use strict";!function(){function r(r){return{reloadGroup:function(n,t){var e=[];return angular.forEach(t.items,function(n,t){var u=r.reloadItem(n);u&&e.push(u)}),e},getDntFiles:function(n){var t={};return angular.forEach(n.items,function(n,e){var u=r.getDntFiles(n);angular.forEach(u,function(r,n){t[n]=r})}),t}}}angular.module("dnsim").factory("groupHelper",["exportLinkHelper",r])}();
"use strict";!function(){function e(e,a,t){return{categories:[{path:"everything",name:"everything",searchType:"everything",hideInBuild:!0},{path:"titles",name:"titles",sourceType:"titles",hideRank:!0,hideJob:!0,hideLevel:!0,numItemText:"1",maxCat:1},{path:"weapons",name:"weapons",sourceType:"equipment",numItemText:"2",maxExchange:1,maxCat:2,limitExchange:[1,2]},{path:"armour",name:"armour",sourceType:"equipment",numItemText:"5",maxExchange:1,maxCat:5,limitExchange:[3,4,5,6,7]},{path:"accessories",name:"accessories",sourceType:"equipment",hideJob:!0,maxCat:4,maxExchange:2,limitExchange:[8,9,10],tId:7604},{path:"techs",name:"techs",sourceType:"techs",maxCat:4,maxExchange:2,limitExchange:[8,9,10],hideJob:!0},{path:"offensive-gems",name:"offensive gems",sourceType:"gems",hideJob:!0,maxCat:4,maxExchange:4,limitExchange:[54]},{path:"increasing-gems",name:"increasing gems",sourceType:"gems",hideJob:!0,maxCat:14,maxExchange:14,limitExchange:[54]},{path:"enhancement-plates",name:"enhancement plates",sourceType:"plates",hideJob:!0,numItemText:"8+3",maxCat:11,maxExchange:15,limitExchange:[33]},{path:"expedition-plates",name:"expedition plates",sourceType:"plates",hideRank:!0,hideJob:!0,numItemText:"4",maxCat:4,maxExchange:15,limitExchange:[33]},{path:"talisman",name:"talisman",sourceType:"talisman",hideJob:!0,numItemText:"8+4",maxCat:12,maxExchange:12,limitExchange:[52,53],tId:1000054149},{path:"costume",name:"costume",sourceType:"cash",numItemText:"7",maxCat:7,maxExchange:1,hideLevel:!0,limitExchange:[16,17,18,19,20,21,22],tId:7607},{path:"imprint",name:"imprint",sourceType:"imprint",numItemText:"7",maxCat:7,hideLevel:!0,hideJob:!0,tId:1000108314},{path:"cash",name:"cash",sourceType:"cash",numItemText:"8",maxCat:8,maxExchange:2,hideJob:!0,hideLevel:!0,limitExchange:[23,24,25,26,27,28,29],tId:7608},{path:"extras",name:"extras",sourceType:"xtras",limitExchange:[47],hideJob:!0,hideLevel:!0},{path:"skills",name:"skills",searchType:"skills"},{path:"custom",name:"custom",searchType:"custom",hideInSearch:!0}],byName:function(e){var a=null;return angular.forEach(this.categories,function(t,n){t.name==e&&(a=t)}),a},byPath:function(e){var a=null;return angular.forEach(this.categories,function(t,n){t.path==e&&(a=t)}),a},getItems:function(t){var n=this.byName(t);if(n&&"sourceType"in n){var i=[];angular.forEach(a,function(a,t){a.type==n.sourceType&&i&&(a.items||a.loading||e.loadItems(a),i=a.items?i.concat(a.items):null)});var m=[];if(i){var r=this;angular.forEach(i,function(e,a){(e.typeName==n.name||r.isItemForCat(n,e,e.data))&&(e.typeName=t,m.push(e))})}return m}return null},isItemForCat:function(e,n,i){if(n.itemSource in a&&a[n.itemSource].type!=e.sourceType)return!1;if(n.itemType==e.name)return!0;if(e.limitExchange){for(var m=0;m<e.limitExchange.length;++m)if(e.limitExchange[m]==n.exchangeType||i&&e.limitExchange[m]==i.ExchangeType){if("plate"==n.itemSource)return n.rawData&&4==i.Rank||n.rank&&4==n.rank.id?"expedition plates"==e.name:"enhancement plates"==e.name;if("gem"==n.itemSource){var r=t.find(a.gem.gemDnt,"id",n.id);if(r.length>0)return 1==r[0].Type?"offensive gems"==e.name:2==r[0].Type&&"increasing gems"==e.name}return!0}}else if(n.itemSource in a)return a[n.itemSource].type==e.sourceType;return!1},init:function(e,t){var n=this.byName(e);n&&"sourceType"in n&&angular.forEach(a,function(e,a){e.type==n.sourceType&&e.init(function(){},t)})},setItemCategory:function(e,a){var t=this;angular.forEach(this.categories,function(n,i){t.isItemForCat(n,e,a)&&(e.typeName=n.name)})},getItemsByCategory:function(e){var a={};if(e){var t={};angular.forEach(e,function(e,a){e&&(e.typeName in t||(t[e.typeName]=[]),t[e.typeName].push(e))}),angular.forEach(this.categories,function(e,n){if(e.name in t){var i=t[e.name].sort(function(a,t){if("talisman"==e.name){var n=a.enchantmentNum;n||(n=0);var i=t.enchantmentNum;if(i||(n=0),n!=i)return i-n}else{if("gem"==a.itemSource||"plate"==a.itemSource)return a.gemSlot||t.gemSlot?a.gemSlot?t.gemSlot?a.gemSlot-t.gemSlot:-1:1:t.levelLimit-a.levelLimit;if("exchangeType"in a&&"exchangeType"in t)return a.exchangeType-t.exchangeType}return a.name.localeCompare(t.name)});a[e.name]=i}else a[e.name]=[]}),angular.forEach(e,function(e,t){!e||e.typeName in a||(a.typeError=!0)})}return a}}}angular.module("dnsim").factory("itemCategory",["itemFactory","items","dntData",e])}();
"use strict";!function(){function n(){return{ids:[{name:"unbound plates",min:0,max:0}]}}angular.module("dnsim").factory("excludeService",n)}();
"use strict";!function(){function e(e,t,n,a){function i(e,a,i){return{row:a,potential:i,id:t.getValue(e.mainDnt,a,"id"),itemSource:e.name,levelLimit:t.getValue(e.mainDnt,a,"LevelLimit"),needJobClass:t.getValue(e.mainDnt,a,"NeedJobClass"),typeId:t.getValue(e.mainDnt,a,"Type"),exchangeType:t.getValue(e.mainDnt,a,"ExchangeType"),rank:n.rankNames[t.getValue(e.mainDnt,a,"Rank")],pid:null,name:null,stats:null,potentialRatio:null,typeName:null,sparkId:null}}function l(n){return!!t.isLoaded(n.mainDnt)&&(!!e.isLoaded()&&(!("potentialDnt"in n&&!t.isLoaded(n.potentialDnt))&&!("potentialDntEx"in n&&!t.isLoaded(n.potentialDntEx))))}function r(e){if(!l(e))return null;var n=(new Date).getTime();e.items=[];for(var a=t.getNumRows(e.mainDnt),r=0;r<a;++r){var m=t.getValue(e.mainDnt,r,"Type"),o=t.getValue(e.mainDnt,r,"State1_Max"),d=t.getValue(e.mainDnt,r,"StateValue1"),u=t.getValue(e.mainDnt,r,"TypeParam1");if(o>0||d>0||u>0||35==m){var s=[];u>0&&"potentialDnt"in e&&(s=t.find(e.potentialDnt,"PotentialID",u),!s.length&&"potentialDntEx"in e&&(s=t.find(e.potentialDntEx,"PotentialID",u)));var c=s.length;c||(s=[null],c=1);for(var f=0;f<c;++f){e.items.push(i(e,r,s[f],0))}}}var D=(new Date).getTime(),p=D-n;console.log("item init time: "+p/1e3+"s for "+e.name)}function m(i){if(i.row>=0){var l;i.itemSource&&i.itemSource in a?l=t.getRow(a[i.itemSource].mainDnt,i.row):i.fileName&&(l=t.getRow(i.fileName+".lzjson",i.row)),delete i.row;var r=i.potential;if(null==i.name&&(i.name=e.translate(l.NameID,l.NameIDParam)),!i.sparkTypeId&&l.TypeParam2>0&&(i.sparkTypeId=l.TypeParam2),null==i.stats){var m=n.getStats(l);if(r){var o=n.getStats(r);m=n.mergeStats(m,o)}i.stats=m}if(l.SkillID&&!i.skillId&&(i.skillId=l.SkillID),null==i.iconIndex&&(i.icon=l.IconImageIndex,i.icon||"title"!=i.itemSource||(i.icon=12417)),l.dragonjeweltype>=0&&(i.dragonjeweltype=l.dragonjeweltype),l.EnchantID&&!i.enchantmentId&&(i.enchantmentId=l.EnchantID),l.EnchantID&&!i.enchantmentId)i.enchantmentId=l.EnchantID;else if(35==l.Type){i.itemSource="xtras";var d=a[i.itemSource];if(d){var u=t.find(d.petDnt,"id",l.id);u&&u.length&&(i.enchantmentId=u[0].PetLevelTypeID)}}r&&(i.pid=r.id),delete i.potential}}function o(e){var n=a[e.itemSource];if(e.fileName&&t.isLoaded(e.fileName+".lzjson")){var i=d(e.fileName+".lzjson",e);if(i)return i}if(e.fileName&&t.isLoaded(e.fileName+".optimised.json")){var i=d(e.fileName+".optimised.json",e);if(i)return i}if(n&&t.isLoaded(n.mainDnt)){var i=d(n.mainDnt,e);if(i)return i}return[]}function d(e,n){if(e){var a=t.find(e,"id",n.id);if(a&&a.length>0)return a[0]}return null}function u(t){return t?{id:t.id,name:e.translate(t.NameID,t.NameIDParam),rank:n.rankNames[t.Rank],icon:t.IconImageIndex,levelLimit:t.LevelLimit,fileName:t.fileName,typeId:t.Type}:[]}return{loadItems:r,initItem:m,createItem:i,getItemData:o,createBasicItem:u}}e.$inject=["translations","dntData","hCodeValues","items"],angular.module("dnsim").factory("itemFactory",e)}();
"use strict";!function(){function t(t,e,n){function i(i,a){var s=this;s.loading=!0,s.items?a():(t.init(i,function(){o(s,a)}),e.init(s.mainDnt,n.mainDnt,i,function(){o(s,a)},s.ignoreErrors),"potentialDnt"in s&&e.init(s.potentialDnt,n.potentialDnt,i,function(){o(s,a)},s.ignoreErrors),"potentialDntEx"in s&&e.init(s.potentialDntEx,n.potentialDnt,i,function(){o(s,a)},s.ignoreErrors),"gemDnt"in s&&e.init(s.gemDnt,n.gemDnt,i,function(){o(s,a)},s.ignoreErrors),o(s,a))}function o(n,i){!t.isLoaded()||!e.isLoaded(n.mainDnt)||"potentialDnt"in n&&!e.isLoaded(n.potentialDnt)&&!e.hasFailed(n.potentialDnt)||"potentialDntEx"in n&&!e.isLoaded(n.potentialDntEx)&&!e.hasFailed(n.potentialDntEx)||"gemDnt"in n&&!e.isLoaded(n.gemDnt)&&!e.hasFailed(n.gemDnt)||(i(),n.loading=!1)}var a={title:{mainDnt:"appellationtable.optimised.json",type:"titles",minLevel:0,minRank:0},tech:{mainDnt:"itemtable_skilllevelup.optimised.json",potentialDnt:"potentialtable.optimised.json",potentialDntEx:"potentialtable_reboot.optimised.json",sparkDnt:"potentialtable_potentialjewel.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"techs",minLevel:60,minRank:0},tman:{mainDnt:"itemtable_talisman.optimised.json",type:"talisman",potentialDnt:"potentialtable_talismanitem.optimised.json",minLevel:24,minRank:0},gem:{mainDnt:"itemtable_dragonjewel.optimised.json",potentialDnt:"potentialtable_dragonjewel.optimised.json",potentialDntEx:"potentialtable_reboot.optimised.json",enchantDnt:"enchanttable_dragonjewel.optimised.json",gemDnt:"dragonjeweltable.optimised.json",type:"gems",minLevel:24,minRank:3},plate:{mainDnt:"itemtable_glyph.optimised.json",potentialDnt:"potentialtable_glyph.optimised.json",type:"plates",minLevel:16,minRank:2},items:{mainDnt:"itemtable.optimised.json",partsDnt:"partstable.optimised.json",weaponDnt:"weapontable.optimised.json",enchantDnt:"enchanttable.optimised.json",potentialDnt:"potentialtable.optimised.json",setDnt:"setitemtable.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:80,minRank:3},eq:{mainDnt:"itemtable_equipment.optimised.json",partsDnt:"partstable_equipment.optimised.json",weaponDnt:"weapontable_equipment.optimised.json",enchantDnt:"enchanttable.optimised.json",potentialDnt:"potentialtable.optimised.json",sparkDnt:"potentialtable_potentialjewel.optimised.json",setDnt:"setitemtable.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:21,minRank:3},rbeq:{mainDnt:"itemtable_reboot.optimised.json",partsDnt:"partstable_reboot.optimised.json",weaponDnt:"weapontable_reboot.optimised.json",enchantDnt:"enchanttable_reboot.optimised.json",potentialDnt:"potentialtable_reboot.optimised.json",setDnt:"setitemtable.optimised.json",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:24,minRank:3},pvpeq:{mainDnt:"itemtable_pvp.optimised.json",partsDnt:"partstable_pvp.optimised.json",weaponDnt:"weapontable_pvp.optimised.json",enchantDnt:"enchanttable.optimised.json",setDnt:"setitemtable.optimised.json",type:"equipment",gemSlotDnt:"dragonjewelslottable.lzjson",minLevel:24,minRank:3},cClone:{mainDnt:"itemtable_cashclone.optimised.json",partsDnt:"partstable_cashclone.optimised.json",type:"cash",minLevel:0,ignoreErrors:!0,minRank:4},c2016:{mainDnt:"itemtable_common2016.optimised.json",partsDnt:"partstable_common2016.optimised.json",weaponDnt:"weapontable_common2016.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},c2015:{mainDnt:"itemtable_common2015.optimised.json",partsDnt:"partstable_common2015.optimised.json",weaponDnt:"weapontable_common2015.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},c2014:{mainDnt:"itemtable_common2014.optimised.json",partsDnt:"partstable_common2014.optimised.json",weaponDnt:"weapontable_common2014.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},cash:{mainDnt:"itemtable_cash.optimised.json",partsDnt:"partstable_cash.optimised.json",weaponDnt:"weapontable_cash.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},event:{mainDnt:"itemtable_event.optimised.json",partsDnt:"partstable_event.optimised.json",weaponDnt:"weapontable_event.optimised.json",setDnt:"setitemtable_cash.optimised.json",type:"cash",minLevel:0,minRank:0},xtras:{mainDnt:"itemtable_vehicle.optimised.json",partsDnt:"vehiclepartstable.optimised.json",setDnt:"setitemtable_cash.optimised.json",petDnt:"vehicletable.lzjson",petLevelDnt:"petleveltable.lzjson",type:"xtras",minLevel:0,minRank:0},imprint:{mainDnt:"itemtable_imprinting.optimised.json",type:"imprint",minLevel:0,minRank:0}};return angular.forEach(a,function(t,e){t.name=e,t.loading=!1,t.items=null,t.init=i,t.reset=function(){t.items=null,t.loading=!1}}),a}angular.module("dnsim").factory("items",["translations","dntData","itemColumnsToLoad",t])}();
"use strict";!function(){function t(t,n,i){var a="jobtable.lzjson",s=i.jobsDnt;return{fileName:a,allJobs:null,isLoaded:function(){return t.isLoaded(a)},hasStartedLoading:function(){return t.hasStartedLoading(a)},init:function(n,i){t.init(a,s,n,function(){i()})},reset:function(){this.allJobs=null,t.reset(a)},getFinalJobs:function(){var t=[],n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)2==n[a].d.JobNumber&&n[a].d.JobIcon>0&&t.push(n[a]);return t},getBaseJobs:function(){var t=[],n={},i=this;return angular.forEach(this.getFinalJobs(),function(t,a){n[i.getBaseJobName(t)]=t}),angular.forEach(n,function(n,i){t.push(i)}),t},getAllJobs:function(){if(null==this.allJobs&&this.isLoaded()&&n.isLoaded()){for(var i=[],s=t.getData(a),e=s.length,o=0;o<e;++o)i[i.length]=this.createJob(s[o]);this.allJobs=i}return this.allJobs},getById:function(t){var n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)if(n[a].id==t)return n[a]},createJob:function(t){var i=this;return{d:t,id:t.id,name:n.translate(t.JobName),isClassJob:function(n){return i.isClassJob(t,n)}}},isClassJob:function(t,n){if(0==n)return!0;if(t.id==n)return!0;var i=t.ParentJob;if(!i)return!1;if(i==n)return!0;var a=this.getById(i);return!!a&&this.isClassJob(a.d,n)},getBaseJobName:function(t){if(this.isLoaded()){var n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)if(n[a].id==t.d.BaseClass+1&&n[a].d.EnglishName)return n[a].d.EnglishName}return null}}}angular.module("dnsim").factory("jobs",["dntData","translations","itemColumnsToLoad",t])}();
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){function e(e,t,n){function a(){return t(function(t,n){firebase.auth().onAuthStateChanged(function(n){null==n?e.location.href="login.html":t(n)})})}function i(e){return t(function(t,n){firebase.database().ref("profile/"+e).once("value",function(e){t(e?e.val():{})})})}function r(e,n){return t(function(t,a){firebase.database().ref("builds/"+e+"/"+v(n)).once("value",function(e){t(e?l(e.val()):{})})})}function u(e){return t(function(t,n){var a=m.getUser();a&&(e=angular.copy(e),b(e,!0),firebase.database().ref("profile/"+a.uid).set(e).then(t))})}function o(e){return t(function(t,n){firebase.database().ref("builds/"+e).once("value",function(e){if(e){var n={},a=e.val();for(var i in a)n[i]=l(a[i]);t(n)}else t({})})})}function s(e){return t(function(t,n){firebase.database().ref("job-builds/"+e.id).once("value",function(e){t(e?e.val():{})})})}function f(e){e.items&&_.each(e.items,function(e){delete e.fullStats});var t=JSON.stringify(e);return LZString.compressToUTF16(t)}function l(e){var t=LZString.decompressFromUTF16(e),a=JSON.parse(t);return a.items&&_.each(a.items,function(e){e.fullStats=e.stats,e.enchantmentStats&&e.enchantmentStats.length&&(e.fullStats=n.mergeStats(e.enchantmentStats,e.fullStats)),e.sparkStats&&e.sparkStats.length&&(e.fullStats=n.mergeStats(e.sparkStats,e.fullStats))}),a}function c(e,n){var a=m.getUser(),i=[];if(a&&(n=angular.copy(n),b(n,!0),i.push(firebase.database().ref("builds/"+a.uid+"/"+v(e)).set(f(n))),n.job&&n.job.id)){var r={};n.playerLevel&&(r.lev=n.playerLevel),n.region&&(r.region=n.region),n.guild&&(r.guild=n.guild),n.about&&(r.about=n.about),b(r,!0),i.push(firebase.database().ref("job-builds/"+n.job.id+"/"+a.uid+"/"+v(e)).set(r))}return t.all(i)}function b(e,t){for(var n in e)void 0===e[n]?delete e[n]:t&&"object"===_typeof(e[n])&&b(e[n],t)}function d(){var e=firebase.auth();return t(function(t,n){e.signOut().then(function(){t()},function(e){n()})})}function p(e){var n=firebase.auth(),a=m.getUser();return t(function(i,r){var u=[firebase.database().ref("builds/"+a.uid).remove(),firebase.database().ref("profile/"+a.uid).remove(),firebase.database().ref("private/"+a.uid).remove()],o=[];for(var s in e)e[s].job&&o.push(e[s].job.id);o=_.uniq(o),_.each(o,function(e){u.push(firebase.database().ref("job-builds/"+e+"/"+a.uid).remove())}),t.all(u).then(function(){a.delete().then(function(){n.signOut().then(function(){i()},function(e){r()})})})})}function g(e,n){var a=[],i=m.getUser();return i&&(a.push(firebase.database().ref("builds/"+i.uid+"/"+v(e)).remove()),n.job&&a.push(firebase.database().ref("job-builds/"+n.job.id+"/"+i.uid+"/"+v(e)).remove())),t.all(a)}function v(e){return e.replace(/[.$\[\]#\/]/g,"")}var m={login:a,getUser:function(){return firebase.auth().currentUser},signOut:d,deleteAccount:p,getUserBuilds:o,deleteBuild:g,saveBuild:c,getBuild:r,getClassBuilds:s,getProfile:i,saveProfile:u,stripBuildName:v};return function(){firebase.initializeApp({apiKey:"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE",authDomain:"dngearsim.firebaseapp.com",databaseURL:"https://dngearsim.firebaseio.com",storageBucket:"dngearsim.appspot.com"})}(),m}angular.module("dnsim").factory("onlineService",["$window","$q","hCodeValues",e])}();
"use strict";!function(){function e(e,t,n,a,r,l,i){function o(e){for(var t=null,n=0;n<e.length;++n)e[n].def.isItemStep&&(t=e[n].value);for(var n=0;n<e.length;++n)e[n].def.alterItem&&e[n].def.alterItem(e[n].value.id,t);return t}function s(e,t,n,i){i||(i=9999);for(var o=a.getItems(e.name),s=[],f=o.length,m=null,d=null,c=0;c<f;++c){var h=o[c];if(!(!e.hideJob&&t.job.id>0&&h.needJobClass>0)||l.isClassJob(t.job.d,h.needJobClass)){r.initItem(h);for(var v=!0,g=0;g<n.length;++g){if(n[g].def.matchesItem&&!n[g].def.matchesItem(n[g].value.id,h)){v=!1;break}"sortFunc"in n[g].def&&(m=n[g].def.sortFunc,d=n[g].value.id)}if(v&&s.push(h),s.length>=i)break}}return s=u(s),s=s.sort(function(e,t){return m?m(d,e,t):e.name.localeCompare(t.name)})}function u(e){for(var t=[],n=0;n<e.length;++n){for(var a=!1,r=0;r<n;++r)if(f(e[n],e[r])){a=!0;break}a||t.push(e[n])}return t}function f(e,t){return e.name==t.name&&e.stats.length==t.stats.length&&e.rank==t.rank&&e.levelLimit==e.levelLimit&&_.isEqual(e.stats,t.stats)}return{getItem:o,findData:s}}e.$inject=["dntData","translations","itemColumnsToLoad","itemCategory","itemFactory","jobs","hCodeValues"],angular.module("dnsim").factory("quickAddHelper",e)}();
"use strict";!function(){function t(t,e,a,n,i,p,S,s,m){return{categorySteps:{titles:["titleStep"],weapons:["exchangeStep","sixtyLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep","enhanceStep"],armour:["exchangeStep","sixtyLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep","enhanceStep"],accessories:["accExchangeStep","allLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep"],techs:["exchangeStep","allLevelStep","techRankStep","techSkillStep","itemNameStep","hasStatStep","itemStep"],"offensive gems":["sixtyLevelStep","gemRankStep","itemNameStep","numStatsStep","hasStatStep","itemStep","enhanceStep"],"increasing gems":["sixtyLevelStep","gemRankStep","itemNameStep","numStatsStep","hasStatStep","itemStep","enhanceStep"],"enhancement plates":["allLevelStep","otherRankStep","distinctItemNameStep","numStatsStep","hasStatStep","itemStep"],"expedition plates":["sixtyLevelStep","distinctItemNameStep","numStatsStep","highStatStep","hasStatStep","itemStep"],talisman:["sixtyLevelStep","talismanRankStep","distinctItemNameStep","numStatsStep","hasStatStep","itemStep","enhanceTalismanStep"],costume:["exchangeStep","otherRankStep","itemNameStep","itemStep"],imprint:["imprintRankStep","itemNameStep","highStatStep","itemStep"],cash:["accExchangeStep","cashRankStep","itemNameStep","itemStep"],custom:["customStep"]},getOptions:function(t,e,a){var n=this;if(t.name in this.categorySteps){var i=this.getStepName(t,a.length),p=s[i],S=p.getOptions(t,e,a);if(p.isItemStep)return S;if(p.minOptions)var h=m.findData(t,e,a,50);var r=_.filter(S,function(i){var s,r=a.concat([n.createData(i,t,a.length)]);if(p.minOptions){if(S[0]==i)return!0;if(s=m.findData(t,e,r,50),s.length>0&&s.length<50)return s.length<h.length}else s=m.findData(t,e,r,1);return s.length});return p.minOptions&&r.length<p.minOptions?[S[0]]:r}return[]},hasOptions:function(t,e,a){if(t.name in this.categorySteps){var n=this.getStepName(t,a.length);return s[n].hasOptions?s[n].hasOptions(t,e,a):s[n].getOptions(t,e,a).length>0}return!1},isValidStepNumber:function(t,e){return this.categorySteps[t.name].length>e},createData:function(t,e,a){var n=this.getStepName(e,a);return{step:n,value:t,def:s[n]}},getItem:m.getItem,getStepName:function(t,e){return this.categorySteps[t.name][e]}}}t.$inject=["dntData","translations","itemColumnsToLoad","itemCategory","itemFactory","jobs","hCodeValues","quickAddSteps","quickAddHelper"],angular.module("dnsim").factory("quickAdd",t)}();
"use strict";!function(){function e(e,n,t,a,i,r,m,s){return{exchangeStep:{name:"type",getOptions:function(t,a,i){for(var r=[],m=0;m<t.limitExchange.length;++m){var s=t.limitExchange[m],o=0;if(a.items)for(var c=0;c<a.items.length;++c)a.items[c].exchangeType==s&&o++;if(!(o>=t.maxExchange)){var u=e.find("exchange.lzjson","ExchangeType",s),d="";u&&u.length>0&&u[0].NameID>0&&(d=n.translate(u[0].NameID).toLowerCase()),r.push({id:s,name:d.toLowerCase()})}}return r},matchesItem:function(e,n){return n.exchangeType==e}},accExchangeStep:{name:"type",getOptions:function(t,a,i){for(var r=[],m=0;m<t.limitExchange.length;++m){for(var s=t.limitExchange[m],o=0,c=0;c<a.items.length;++c)a.items[c]&&a.items[c].exchangeType==s&&o++;if(10==s||25==s){if(o>=2)continue}else if(o>=1)continue;var u=e.find("exchange.lzjson","ExchangeType",s);if(u&&u.length>0&&u[0].NameID>0){var d=n.translate(u[0].NameID).toLowerCase();r.push({id:s,name:d.toLowerCase()})}}return r},matchesItem:function(e,n){return n.exchangeType==e}},sixtyLevelStep:{name:"level",getOptions:function(e,n,t){return[{id:93,name:"level 93"},{id:90,name:"level 90"},{id:80,name:"level 80"},{id:70,name:"level 70"},{id:60,name:"level 60"}]},matchesItem:function(e,n){return n.levelLimit==e}},allLevelStep:{name:"level",getOptions:function(e,n,t){return[{id:93,name:"level 93"},{id:90,name:"level 90"},{id:80,name:"level 80"},{id:70,name:"level 70"},{id:60,name:"level 60"},{id:50,name:"level 50"},{id:40,name:"level 40"},{id:32,name:"level 32"},{id:24,name:"level 24"}]},matchesItem:function(e,n){return n.levelLimit==e}},cashRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:4,name:"unique"},{id:3,name:"epic"},{id:2,name:"rare"},{id:1,name:"magic"},{id:0,name:"normal"}]},matchesItem:function(e,n){return n.rank.id==e}},imprintRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:4,name:"unique"},{id:3,name:"epic"},{id:2,name:"rare"}]},matchesItem:function(e,n){return n.rank.id==e}},techRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:4,name:"unique"},{id:3,name:"epic"}]},matchesItem:function(e,n){return n.rank.id==e}},talismanRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:3,name:"epic"},{id:2,name:"rare"},{id:999,name:"quality high grade"},{id:1,name:"magic"},{id:0,name:"normal"}]},matchesItem:function(e,n){if(i.initItem(n),n.name){var t=Math.max(n.name.indexOf("Quality"),n.name.indexOf("High Grade"));return 999==e?0===t:n.rank.id==e&&0!=t}return!1}},gemRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:5,name:"legendary"},{id:999,name:"quality high grade epic"},{id:3,name:"epic"}]},matchesItem:function(e,n){if(i.initItem(n),n.name){var t=Math.max(n.name.indexOf("Quality"),n.name.indexOf("High Grade"));return 999==e?3==n.rank.id&&t>=0:n.rank.id==e&&t<0}return!1}},otherRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:3,name:"epic"},{id:2,name:"rare"},{id:1,name:"normal"}]},matchesItem:function(e,n){return n.rank.id==e}},equipRankStep:{name:"rank",getOptions:function(e,n,t){return[{id:5,name:"legendary"},{id:4,name:"unique"},{id:3,name:"epic"}]},matchesItem:function(e,n){return n.rank.id==e}},enhanceTalismanStep:{name:"slot",getOptions:function(e,n,t){return[{id:100,name:"+100% slot"},{id:75,name:"+75% slot"},{id:25,name:"+25% slot"},{id:0,name:"+0% slot"}]},alterItem:function(e,n){n.enchantmentNum=e}},titleStep:{name:"select",getOptions:function(e,n,t){for(var a=s.findData(e,n,t,9999),i=[],r=0;r<a.length;++r)switch(a[r].id){case 1975:case 1973:case 1008:case 230:case 279:case 2032:case 2033:case 1313:case 2188:i.push(a[r])}return i},hasOptions:function(e,n,t){return!0},isItemStep:!0},enhanceStep:{name:"enhance",getOptions:function(e,n,t){var a=s.getItem(t);return a&&a.enchantmentId?[{id:15,name:"enhance to +15"},{id:14,name:"enhance to +14"},{id:13,name:"enhance to +13"},{id:12,name:"enhance to +12"},{id:11,name:"enhance to +11"},{id:10,name:"enhance to +10"},{id:9,name:"enhance to +9"},{id:8,name:"enhance to +8"},{id:7,name:"enhance to +7"},{id:6,name:"enhance to +6"},{id:5,name:"enhance to +5"},{id:4,name:"enhance to +4"},{id:3,name:"enhance to +3"},{id:2,name:"enhance to +2"},{id:1,name:"enhance to +1"},{id:0,name:"not enhanced"}]:[{id:0,name:"not enhanced"}]},alterItem:function(e,n){n.enchantmentNum=e}},itemStep:{name:"select",getOptions:function(e,n,t){return s.findData(e,n,t)},isItemStep:!0,hideName:!0},namedItemStep:{name:"select",getOptions:function(e,n,t){return s.findData(e,n,t)},isItemStep:!0},techSkillStep:{name:"skill",getOptions:function(e,n,t){var a=s.findData(e,n,t,1);return a.length>0?[{id:a[0].skillId,name:a[0].skillId}]:[]},matchesItem:function(e,n){return n.skillId==e}},itemNameStep:{name:"item",getOptions:function(e,n,t){for(var a=s.findData(e,n,t),i={},r=[],m=0;m<a.length;++m){var o=a[m].name;o in i||(i[o]=!0,r.push({id:o,name:o}))}return r},matchesItem:function(e,n){return n.name==e},isItemStep:!0},distinctItemNameStep:{name:"item",getOptions:function(e,n,t){for(var a=s.findData(e,n,t),i={},r=[],m=0;m<n.items.length;++m){i[n.items[m].name]=!0}for(var m=0;m<a.length;++m){var o=a[m].name;o in i||(i[o]=!0,r.push({id:o,name:o}))}return r},matchesItem:function(e,n){return n.name==e},isItemStep:!0},numStatsStep:{name:"Num Stats",getOptions:function(e,n,t){for(var a=s.findData(e,n,t),i={},r=0;r<a.length;++r){for(var o=0,c=0;c<a[r].stats.length;++c){var u=m.stats[a[r].stats[c].id];u&&!u.hide&&o++}i[o+"x stats"]=o}var d=[];for(var h in i)d.push({id:i[h],name:h});return d=d.sort(function(e,n){return e.id-n.id})},matchesItem:function(e,n){for(var t=0,a=0;a<n.stats.length;++a){var i=m.stats[n.stats[a].id];i&&!i.hide&&t++}return t==e},isItemStep:!0},highStatStep:{name:"High Stat",getOptions:function(e,n,t){var a=s.findData(e,n,t),i={id:-1,name:"all"},r=[i];if(a.length>1){for(var o={},c=0;c<a.length;++c)for(var u=0;u<a[c].stats.length;++u){var d=m.stats[a[c].stats[u].id];!d||!d.quickHigh||"high "+d.name in o||(o["high "+d.name]=d.id)}for(var h in o)r.push({id:o[h],name:h});r=r.length<=2?[i]:r.sort(function(e,n){return e.id-n.id})}return r},matchesItem:function(e,n){if(e==-1)return!0;for(var t=0,a=0,i=0;i<n.stats.length;++i){var r=n.stats[i];m.stats[r.id].quickHigh&&(r.id==e?a+=r.max:r.max>t&&(t=r.max))}return a>t},sortFunc:function(e,n,t){for(var a=0,i=0,r=0;r<n.stats.length;++r)if(n.stats[r].id==e){a=n.stats[r].max;break}for(var m=0;m<t.stats.length;++m)if(t.stats[m].id==e){i=t.stats[m].max;break}return i-a},isItemStep:!1,minOptions:3},hasStatStep:{name:"Has Stat",getOptions:function(e,n,t){var a=s.findData(e,n,t),i={id:-1,name:"all"},r=[i];if(a.length>1){for(var o={},c=0;c<a.length;++c)for(var u=0;u<a[c].stats.length;++u){var d=m.stats[a[c].stats[u].id];!d||!d.searchable||"high "+d.name in o||(o["has "+d.name]=d.id)}for(var h in o)r.push({id:o[h],name:h});r=r.length<=2?[i]:r.sort(function(e,n){return e.id-n.id})}return r},matchesItem:function(e,n){if(e==-1)return!0;for(var t=0;t<n.stats.length;++t){var a=n.stats[t];if(m.stats[a.id].searchable&&a.id==e)return!0}return!1},sortFunc:function(e,n,t){for(var a=0,i=0,r=0;r<n.stats.length;++r)if(n.stats[r].id==e){a=n.stats[r].max;break}for(var m=0;m<t.stats.length;++m)if(t.stats[m].id==e){i=t.stats[m].max;break}return i-a},isItemStep:!1,minOptions:3},customStep:{name:"misc",getOptions:function(e,n,t){return m.customItems},isItemStep:!0}}}e.$inject=["dntData","translations","itemColumnsToLoad","itemCategory","itemFactory","jobs","hCodeValues","quickAddHelper"],angular.module("dnsim").factory("quickAddSteps",e)}();
"use strict";!function(){function t(t,e,i,n){var o={region:"ALT",name:"Alternative user specified files",url:""},a=[{region:"sea",name:"south east asia",url:"https://seadnfiles.firebaseapp.com"},{region:"na",name:"north america",url:"https://dnna.firebaseapp.com"},{region:"eu",name:"europe",url:"https://eufiles.firebaseapp.com"},{region:"ina",name:"indonesia ",url:"https://inafiles-da491.firebaseapp.com"},{region:"th",name:"thailand",url:"https://thdnfiles.firebaseapp.com"},{region:"tw",name:"taiwan 臺灣",url:"https://twdnfiles.firebaseapp.com"},{region:"cdn",name:"china 中國",url:"https://cdnfiles.firebaseapp.com"},{region:"kdn",name:"korea 대한민국",url:"https://kdnfiles.firebaseapp.com"}],r=localStorage.getItem("lastDNTRegion"),s=null;r&&angular.forEach(a,function(t,e){t.region==r&&(s=t)});var l=localStorage.getItem("UIStrings_file"),c=null;return l&&angular.forEach(a,function(t,e){t.region!=o.region&&l.indexOf(t.url)>-1&&(c=t)}),null==c&&(c=s),{hostedFiles:a,alternativeFiles:o,dntLocation:s,tlocation:c,setCustomUrl:function(t){this.alternativeFiles.url=t;var e=[];angular.forEach(a,function(t,i){t.region!=o.region&&e.push(t)}),e.push(o),a=e,this.hostedFiles=e},setLocationByName:function(t){var e=null;angular.forEach(a,function(i,n){i.region==t&&(e=i)}),this.setLocation(e)},setLocation:function(t){t&&t!=this.dntLocation&&(this.dntLocation=t,e(),localStorage.setItem("lastDNTRegion",t.region),e(),n.reload()),null==this.tlocation&&this.setTLocation(t),this.init()},setTLocation:function(i){if(i!=this.tlocation&&(this.tlocation=i,sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file"),e(),t.reset(),i)){var o=this.getOverride();t.small=!o,t.location=this.tlocation.url,t.init(function(){},function(){n.reload()})}},getOverride:function(){return!!localStorage.getItem("tOverride")},setOverride:function(t){t?localStorage.setItem("tOverride","1"):localStorage.removeItem("tOverride"),this.setTLocation(this.dntLocation)},init:function(){this.getOverride()?t.small=!1:(this.tLocation=this.dntLocation,t.small=!0),this.tlocation&&(t.location=this.tlocation.url),i.setLocation(this.dntLocation)}}}angular.module("dnsim").factory("region",["translations","dntReset","dntData","$route",t])}();
"use strict";!function(){function e(e){return{saveItem:function(e,t){var r=this.getSavedItems();e in r&&Array.isArray(r[e].items)?(r[e].items.push(t),r[e].lastUpdate=(new Date).getTime(),this.updatedSavedItems(e,r[e].items)):this.updatedSavedItems(e,[t])},saveBuildSelection:function(e,t){this.setCurrentBuild(e),t&&e in t&&t[e].job&&t[e].job.id&&localStorage.setItem("jobNumber",t[e].job.id)},importGroup:function(e,t){var r=this.getSavedItems();return e=this.getUniqueGroupName(e,r),this.updatedSavedItems(e,t),e},getUniqueGroupName:function(e,t){var r=0;if(e.lastIndexOf(")")==e.length-1){var i=e.lastIndexOf("(");if(i>0){var a=Number(e.substr(i+1,e.length-i-2));a>0&&(r=a+1,e=e.substr(0,i-1))}}for(var s=e;;){var e=s;if(r>0&&(e=s+" ("+r+")"),!(e in t))break;r++}return e},deleteBuild:function(e){var t=this.getSavedItems();e in t&&(delete t[e],this.setCurrentBuild(null),this.saveBuilds(t))},updatedSavedItems:function(e,t){var r=this.getSavedItems();e in r?(r[e].items=t,r[e].lastUpdate=(new Date).getTime()):r[e]={items:t,lastUpdate:(new Date).getTime()},this.saveBuilds(r)},saveBuilds:function(e){var t=JSON.stringify(e);localStorage.setItem("savedItems",LZString.compressToUTF16(t))},renameSavedGroup:function(e,t,r,i,a,s,n,u,l,o,d,m,c,v){var g=this.getSavedItems();if(t in g||e==t)t=e;else if(e in g){var h=g[e];g[t]=h,delete g[e]}g[t].enemyLevel=r,g[t].playerLevel=i,g[t].heroLevel=a,g[t].job=s,g[t].damageType=n,g[t].element=u,g[t].secondaryElement=l,g[t].enemyStatCaps=o,g[t].playerStatCaps=d,g[t].conversions=m,g[t].baseStats=c,g[t].heroStats=v,this.saveBuilds(g)},getSavedItems:function(){try{var e=LZString.decompressFromUTF16(localStorage.getItem("savedItems"));return JSON.parse(e)}catch(e){}return{}},currentBuild:null,getCurrentBuild:function(){if(!this.currentBuild&&(this.currentBuild=localStorage.getItem("currentGroup"),this.currentBuild)){var e=this.getSavedItems();this.currentBuild in e||(localStorage.removeItem("currentGroup"),this.currentBuild=null)}return this.currentBuild},setCurrentBuild:function(e){this.currentBuild=e,e?localStorage.setItem("currentGroup",e):localStorage.removeItem("currentGroup",e)}}}angular.module("dnsim").factory("saveHelper",["itemCategory",e])}();
"use strict";!function(){function a(a){return{getSetStats:function(t){var e=[],m={};return angular.forEach(t,function(a,t){null!==a&&null!=a.setStats&&(a.setId in m?m[a.setId].numItems++:m[a.setId]={numItems:1,stats:a.setStats})}),angular.forEach(m,function(a,t){angular.forEach(a.stats,function(t,m){t.needSetNum<=a.numItems&&e.push(t)})}),a.mergeStats(e)},getNumItemsForSet:function(a,t){var e=0;return angular.forEach(a,function(a,m){a&&a.setId&&a.setId==t&&e++}),e},getCombinedStats:function(t){var e=[];return angular.forEach(t,function(a,t){a&&(a.fullStats?e=e.concat(a.fullStats):a.stats&&(e=e.concat(a.stats)))}),a.mergeStats(e)},getCalculatedStatsFromItems:function(t,e){var m=this.getNakedStats(t),r=this.getCombinedStats(e),n=this.getSetStats(e),s=m.concat(r).concat(n);return null!=t.heroStats&&t.heroStats.length>0&&(s=s.concat(t.heroStats)),s=a.mergeStats(s),this.getCalculatedStats(t,s)},getCalculatedStats:function(t,e){function m(t){var e=a.stats[t.id];return l[e.pc]?Number(l[e.pc].max):0}function r(t){var e=a.stats[t.id];return l[e.skPc]?Number(l[e.skPc].max):0}function n(a){a.max=Math.floor(a.max*(1+m(a))*(1+r(a)))}function s(a){var t=l[a];return t?{id:a,max:Number(t.max),pc:t.pc}:{id:a,max:0,pc:0}}function x(a){a.max>0&&o.push(a)}function i(e,m,r){var n=(m+r)/2;n+=O*(z+1)*n*.75,n*=1+K.max;var s=n;if(t.element&&t.element.id>0){var i=l[a.elements[t.element.id].dmgStat];i&&(s*=1+Number(i.max))}x({id:e,max:s});var o=0,c=0;if(c=t.element?t.element.id:0,(o=t.secondaryElement?t.secondaryElement.id:0)!=c)if(o>0){var u=l[a.elements[t.secondaryElement.id].dmgStat];if(u){var f=n*(1+Number(u.max));x({id:e+1e3,max:f})}}else x({id:e+1e3,max:n})}var o=[],l={};if(!t.conversions||!t.enemyStatCaps||!t.playerStatCaps)return[];angular.forEach(e,function(a,t){l[a.id]=a});var c=s(0);n(c),x(c);var u=s(1);n(u),x(u);var f=s(2);n(f),x(f);var d=s(3);n(d),x(d);var S=s(25);S.max+=d.max*Number(t.conversions.HP),n(S),x(S);var h=s(8);h.max+=d.max*Number(t.conversions.PhysicalDefense),n(h),x(h);var g=s(1008);g.max=Math.min(.85,h.max/Number(t.enemyStatCaps.Cdefense)),x(g);var v=s(9);v.max+=f.max*Number(t.conversions.MagicDefense),n(v),x(v);var p=s(1009);p.max=Math.min(.85,v.max/Number(t.enemyStatCaps.Cdefense)),x(p);var b=s(3e3),M=s(4),N=s(5);if(!t.damageType||2!=t.damageType.id){var y=s(32),C=s(101),k=s(3001),I=s(10164),T=s(110373);M.max+=y.max,M.max+=Math.floor(c.max*Number(t.conversions.StrengthAttack)),M.max+=Math.floor(u.max*Number(t.conversions.AgilityAttack)),M.max=Math.floor(M.max*(1+(m(M)+C.max))),M.max=Math.floor(M.max*(1+b.max+k.max)),M.max+=Math.floor(I.max*f.max),M.max+=Math.floor(T.max*h.max),x(M),N.max+=y.max,N.max+=Math.floor(c.max*Number(t.conversions.StrengthAttack)),N.max+=Math.floor(u.max*Number(t.conversions.AgilityAttack)),N.max=Math.floor(N.max*(1+(m(N)+C.max))),N.max=Math.floor(N.max*(1+b.max+k.max)),N.max+=Math.floor(I.max*f.max),N.max+=Math.floor(T.max*h.max),x(N)}var E=s(6),A=s(7);if(!t.damageType||1!=t.damageType.id){var D=s(33),P=s(102),V=s(3002),F=s(10165),H=s(10372);E.max+=D.max,E.max+=Math.floor(f.max*Number(t.conversions.IntelligenceAttack)),E.max=Math.floor(E.max*(1+(m(E)+P.max))),E.max=E.max*(1+b.max+V.max),E.max+=Math.floor(F.max*c.max),E.max+=Math.floor(H.max*f.max),x(E),A.max+=D.max,A.max+=f.max*Number(t.conversions.IntelligenceAttack),A.max=Math.floor(A.max*(1+(m(A)+P.max))),A.max=A.max*(1+b.max+V.max),A.max+=Math.floor(F.max*c.max),A.max+=Math.floor(H.max*f.max),x(A)}var w=s(12);w.max+=u.max*Number(t.conversions.Critical),n(w);var B=s(4012);w.max+=B.max,x(w);var L=s(1012),O=Math.min(.89,w.max/Number(t.enemyStatCaps.Ccritical)+L.max);o.push({id:1012,max:O});var j=s(103);j.max+=(c.max+f.max)*Number(t.conversions.StrengthIntelligenceToCriticalDamage),n(j),x(j);var q=s(1103),z=Math.min(1,j.max/t.playerStatCaps.CcriticalDamage+q.max);x({id:1103,max:z+2});var G=s(29);x(G);var J=Number(t.enemyStatCaps.Cfinaldamage),K=s(1029);K.max+=Math.min(Math.max(.35*Number(G.max)/J,Math.pow(Number(G.max)/J,2.2)),1),x(K),x(s(16)),x(s(17)),x(s(18)),x(s(19)),t.damageType&&1!=t.damageType.id&&0!=t.damageType.id||i(1004,M.max,N.max),t.damageType&&2!=t.damageType.id&&0!=t.damageType.id||i(1006,E.max,A.max),t.damageType&&3!=t.damageType.id||i(1001,E.max+M.max,A.max+N.max);var Q=s(2008);Q.max=S.max/(1-g.max);var R=s(2009);R.max=S.max/(1-p.max);var U=s(3008);return U.max=(Q.max+R.max)/2,x(U),o},getNakedStats:function(a){return a.baseStats&&a.baseStats.Strength>0?[{id:0,max:a.baseStats.Strength},{id:1,max:a.baseStats.Agility},{id:2,max:a.baseStats.Intelligence},{id:3,max:a.baseStats.Stamina}]:[]},getSkillStats:function(t,e,m){var r=null;if(angular.forEach(m,function(a,e){if(a.SkillIndex==t.id&&a.SkillLevel==t.enchantmentNum)return void(r=a)}),!r)return null;for(var n=1,s=[],x=!0;x;){var i="EffectClass"+n,o="EffectClassValue"+n;if(e&&i in e&&o in r){if(e[i]>0){var l=r[o],c=e[i],u=a.skillEffectMapping[c];if(u&&u.getVals)for(var f=u.getVals(l),d=0;d<f.length;++d)s.push(f[d]);else{var S;if(S=u&&u.mapTo?u.mapTo:1e4+c,l>0)s.push({id:S,effect:c,max:l});else if(l.toString().indexOf(";")>0){var f=l.split(";");f.length>0&&f[0]>0&&s.push({id:S,effect:c,max:f[0]})}}}}else x=!1;n++}return s},getBuildStats:function(t){var e={};return e.nakedStats=this.getNakedStats(t),e.combinedStats=this.getCombinedStats(t.items),e.setStats=this.getSetStats(t.items),e.allStats=e.nakedStats.concat(e.combinedStats).concat(e.setStats),t.heroStats&&t.heroStats.length&&(e.heroStats=t.heroStats,e.allStats=e.allStats.concat(t.heroStats)),e.allStats=a.mergeStats(e.allStats),e.calculatedStats=this.getCalculatedStats(t,e.allStats),e}}}angular.module("dnsim").factory("statHelper",["hCodeValues",a])}();
"use strict";!function(){function t(t,e){var a=new DnTranslations,i=[],n=[];return{reset:function(){a=new DnTranslations,a.sizeLimit=100,this.loaded=!1,this.startedLoading=!1,i=[],n=[]},getFileName:function(){return this.small?"uistring.optimised.lzjson":"uistring.lzjson"},loaded:!1,startedLoading:!1,small:!1,location:null,init:function(t,o){if(this.isLoaded())o();else if(n=[],t&&n.push(t),o&&i.push(o),!this.startedLoading){this.startedLoading=!0;var s=this,r=null;this.location&&""!=this.location&&(r=this.location+"/"+this.getFileName())!=localStorage.getItem("UIStrings_file")&&(sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file")),e.$broadcast("TRANSLATION_LOAD_EVENT"),a.loadDefaultFile(r,function(t){angular.forEach(n,function(e,a){e(t)})},function(){s.loaded=!0,angular.forEach(i,function(t,e){t()}),i=[],e.$broadcast("TRANSLATION_LOAD_EVENT")},function(t){angular.forEach(n,function(e,a){e(t)}),e.$broadcast("TRANSLATION_LOAD_ERROR"),s.startedLoading=!1,s.loaded=!1})}},isLoaded:function(){if(!this.loaded){this.location+"/"+this.getFileName()!=localStorage.getItem("UIStrings_file")&&(sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file")),this.loaded=a.loadFromSession(),this.loaded&&(this.startedLoading=!0)}return this.loaded},translate:function(t,e){if(this.loaded)try{var i;if(!t)return"";if("string"!=typeof(i=a.translate(t)))return"m"+i;if(e&&i)if("string"==typeof e)for(var n=e.split(","),o=0;o<n.length;++o){var s=n[o];0==s.indexOf("{")&&(s=n[o].replace(/\{|\}/g,""),s=a.translate(s)),i=i.replace("{"+o+"}",s)}else i=i.replace("{0}",e);return i}catch(a){console.log("unable to translate",t,e,a)}return"m"+t}}}angular.module("dnsim").factory("translations",["$routeParams","$rootScope",t])}();
"use strict";!function(){function a(){function a(a){return Math.floor(a.max)}function e(a){var e=Number(a.max);return e<100?e:e<1e5?Math.round(e/100)/10+"k":e<1e6?Math.round(e/1e3)+"k":e<1e7?Math.round(e/1e4)/100+"m":Math.round(e/1e6)+"m"}function d(a){return Math.round(1e4*a.max)/100+"%"}return{stats:{0:{id:0,name:"str",display:a,dps:!0,pc:50,skPc:4050,searchable:!0,quickHigh:!0},1:{id:1,name:"agi",display:a,dps:!0,pc:51,skPc:4051,searchable:!0,quickHigh:!0},2:{id:2,name:"int",display:a,dps:!0,pc:52,skPc:4052,searchable:!0,quickHigh:!0},3:{id:3,name:"vit",display:a,def:!0,pc:53,skPc:4053,searchable:!0,quickHigh:!0},4:{id:4,name:"pdmg",display:a,combineWith:5,dps:!0,pc:54,searchable:!0,altStat:32,quickHigh:!0},5:{id:5,name:"maxPdmg",display:a,hide:!0,pc:55},6:{id:6,name:"mdmg",display:a,combineWith:7,dps:!0,pc:56,searchable:!0,altStat:33,quickHigh:!0},7:{id:7,name:"maxMdmg",display:a,hide:!0,pc:57},8:{id:8,name:"pdef",display:e,def:!0,pc:58,searchable:!0},9:{id:9,name:"mdef",display:e,def:!0,pc:59,searchable:!0},10:{id:10,name:"para",display:e,pc:60,noCustom:!0},11:{id:11,name:"para resist",display:e,pc:61,noCustom:!0},12:{id:12,name:"crit",display:e,dps:!0,pc:62,searchable:!0},13:{id:13,name:"crit resist",display:e,pc:63,noCustom:!0},14:{id:14,name:"stun",display:e,pc:64,noCustom:!0},15:{id:15,name:"stun resist",display:e,pc:65,noCustom:!0},16:{id:16,name:"fire%",display:d,dps:!0,searchable:!0},17:{id:17,name:"ice%",display:d,dps:!0,searchable:!0},18:{id:18,name:"light%",display:d,dps:!0,searchable:!0},19:{id:19,name:"dark%",display:d,dps:!0,searchable:!0},20:{id:20,name:"fire def",display:d,def:!0,searchable:!0},21:{id:21,name:"ice def",display:d,def:!0,searchable:!0},22:{id:22,name:"light def",display:d,def:!0,searchable:!0},23:{id:23,name:"dark def",display:d,def:!0,searchable:!0},25:{id:25,name:"hp",display:e,def:!0,pc:75,skPc:4075,searchable:!0},26:{id:26,name:"mp",display:e,def:!0,pc:76,skPc:4076},29:{id:29,name:"fd",display:a,dps:!0,searchable:!0},32:{id:32,name:"pdmg",display:a,dps:!0,pc:54,quickHigh:!0},33:{id:33,name:"mdmg",display:a,dps:!0,pc:56,quickHigh:!0},50:{id:50,name:"str%",display:d,dps:!0},51:{id:51,name:"agi%",display:d,dps:!0},52:{id:52,name:"int%",display:d,dps:!0},53:{id:53,name:"vit%",display:d,def:!0},54:{id:54,name:"pdmg%",display:d,combineWith:55,dps:!0},55:{id:55,name:"maxPdmg%",display:d,hide:!0},56:{id:56,name:"mdmg%",display:d,combineWith:57,dps:!0},57:{id:57,name:"maxMdmg%",display:d,hide:!0},58:{id:58,name:"pdef%",display:d,def:!0},59:{id:59,name:"mdef%",display:d,def:!0},60:{id:60,name:"para%",display:d,noCustom:!0,def:!0},61:{id:61,name:"para resist%",display:d,noCustom:!0,def:!0},62:{id:62,name:"crit%",display:d,dps:!0},63:{id:63,name:"crit resist%",display:d,def:!0},64:{id:64,name:"stun%",display:d,noCustom:!0,def:!0},65:{id:65,name:"stun resist%",display:d,noCustom:!0,def:!0},74:{id:74,name:"move%",display:d,noCustom:!0,def:!0},75:{id:75,name:"hp%",display:d,def:!0},76:{id:76,name:"mp%",display:d,def:!0},77:{id:77,name:"mp recover%",display:d,def:!0},81:{id:81,name:"safe move%",display:d,noCustom:!0,def:!0},101:{id:101,name:"pdmg%",display:d,noCustom:!0,dps:!0,quickHigh:!0},102:{id:102,name:"mdmg%",display:d,noCustom:!0,dps:!0,quickHigh:!0},103:{id:103,name:"cdmg",display:e,dps:!0,pc:104,searchable:!0},104:{id:104,name:"crit dmg%",display:d,noCustom:!0,dps:!0},105:{id:104,name:"pvp dmg",display:e,noCustom:!0,dps:!0},106:{id:106,name:"pvp def",display:e,noCustom:!0,def:!0},107:{id:107,name:"mp?",display:a,noCustom:!0,hide:!0,def:!0},1001:{id:1001,name:"dmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1004:{id:1004,name:"pdmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1006:{id:1006,name:"mdmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1008:{id:1008,name:"pdef",display:d,noCustom:!0,summaryFor:8},1009:{id:1009,name:"mdef",display:d,noCustom:!0,summaryFor:9},1012:{id:1012,name:"crit chance",display:d,noCustom:!0,dps:!0,summaryFor:12},1029:{id:1029,name:"fd",display:d,noCustom:!0,dps:!0,summaryFor:29},1103:{id:1103,name:"crit dmg",display:d,noCustom:!0,dps:!0,summaryFor:103},2001:{id:2001,name:"dmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2004:{id:2004,name:"pdmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2006:{id:2006,name:"mdmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2008:{id:2008,name:"pdef eqhp",display:e,noCustom:!0},2009:{id:2009,name:"mdef eqhp",display:e,noCustom:!0},3e3:{id:3e3,name:"skDmg%",display:d,dps:!0},3001:{id:3001,name:"skPDmg%",display:d,dps:!0},3002:{id:3002,name:"skMDmg%",display:d,dps:!0},3008:{id:3008,name:"eqhp",display:e,summaryDisplay:!0,noCustom:!0,hide:!0},4012:{id:4012,name:"skCrit",display:e,dps:!0},4050:{id:4050,name:"skStr%",display:d,dps:!0},4051:{id:4051,name:"skAgi%",display:d,dps:!0},4052:{id:4052,name:"skInt%",display:d,dps:!0},4053:{id:4053,name:"skVit%",display:d,def:!0},4075:{id:4075,name:"skHp%",display:d,def:!0},4076:{id:4076,name:"skMp%",display:d,def:!0},10164:{id:10164,name:"intToPdmg",display:d,noCustom:!0,dps:!0},10165:{id:10165,name:"strToMdmg",display:d,noCustom:!0,dps:!0},10372:{id:10372,name:"intToMdmg",display:d,noCustom:!0,dps:!0},110373:{id:110373,name:"defToPdmg",display:d,noCustom:!0,dps:!0}},rankNames:{0:{id:0,name:"normal"},1:{id:1,name:"magic"},2:{id:2,name:"rare"},3:{id:3,name:"epic"},4:{id:4,name:"unique"},5:{id:5,name:"legendary"}},shopNames:{28001:"lament",28002:"lament",28003:"lament",28004:"lament",28005:"lament",28006:"lament",28007:"lament",28008:"lament",28009:"lament",28101:"lament",29001:"aura",29002:"aura",29003:"aura",29004:"aura",29005:"aura",29006:"aura",29007:"aura",29008:"aura",29009:"aura",5001:"medal",5002:"medal",5003:"medal",5004:"medal",5005:"medal",5006:"medal",5007:"medal",5008:"medal",5009:"medal",5101:"ladder",5102:"ladder",5103:"ladder",5104:"ladder",5105:"ladder",5106:"ladder",5107:"ladder",5108:"ladder",5109:"ladder",59001:"garden bunny",52001:"nightmare",52002:"nightmare",52003:"nightmare",52004:"nightmare",52005:"nightmare",52006:"nightmare",52007:"nightmare",52008:"nightmare",52009:"nightmare",21:"blacksmith",22:"blacksmith",23:"blacksmith",24:"blacksmith",25:"blacksmith",26:"blacksmith",27:"blacksmith",28:"blacksmith",29:"blacksmith",89001:"guild master",88001:"battlefield",88002:"battlefield",88003:"battlefield",88004:"battlefield",88005:"battlefield",88006:"battlefield",88007:"battlefield",88008:"battlefield",88009:"battlefield",66001:"erosion",35006:"plate",14051:"abyss",14052:"abyss",14053:"abyss",14054:"abyss",14055:"abyss",14056:"abyss",14057:"abyss",14058:"abyss",14059:"abyss",40011:"daredevil faire",40012:"daredevil faire",40013:"daredevil faire",40014:"daredevil faire",40015:"daredevil faire",40016:"daredevil faire",40017:"daredevil faire",40018:"daredevil faire",40001:"daredevil faire",40002:"daredevil faire",40111:"daredevil faire",91001:"wrath",45001:"farm",100004:"event"},checkedRank:{0:!0,1:!0,2:!0,3:!0,4:!0,5:!0},typeNames:{0:"weapons",1:"equipment",5:"plates",8:"pouch",38:"plates",90:"welspring",132:"talisman",139:"gems"},elements:{0:{id:0,name:"non-ele"},1:{id:1,name:"fire",dmgStat:16},2:{id:2,name:"ice",dmgStat:17},3:{id:3,name:"light",dmgStat:18},4:{id:4,name:"dark",dmgStat:19}},damageTypes:{0:{id:0,name:"both separate"},1:{id:1,name:"physical"},2:{id:2,name:"magical"},3:{id:3,name:"both combined"}},skillEffectMapping:{2:{id:2,name:"phyisical attack power",mapTo:3001},13:{id:13,name:"mp",mapTo:26},25:{id:25,name:"action speed"},29:{id:29,name:"magic attack power",mapTo:3002},32:{id:32,name:"fire %",mapTo:16},33:{id:33,name:"ice %",mapTo:17},34:{id:34,name:"light %",mapTo:18},35:{id:35,name:"dark %",mapTo:19},36:{id:36,name:"fire def",mapTo:20},37:{id:37,name:"ice def",mapTo:21},38:{id:38,name:"light def",mapTo:22},39:{id:39,name:"dark def",mapTo:23},58:{id:58,name:"hp%",mapTo:4075},59:{id:59,name:"mp%",mapTo:4076},65:{id:65,name:"range"},76:{id:76,name:"movement speed",mapTo:74},87:{id:87,name:"str%",mapTo:4050},88:{id:88,name:"agi%",mapTo:4051},89:{id:89,name:"int%",mapTo:4052},90:{id:90,name:"vit%",mapTo:4053},185:{id:185,name:"wots attack power",mapTo:3e3},251:{id:251,name:"critical chance%",mapTo:1012},164:{id:164,name:"intToPdmg",mapTo:10164},165:{id:165,name:"strToMdmg",mapTo:10165},222:{id:222,name:"hellfire",getVals:function(a){if(a.indexOf(";")>0){var e=a.split(";");return[{id:62,effect:222,max:Number(e[0])/100},{id:4012,effect:222,max:Number(e[1])}]}return[{id:62,effect:222,max:Number(a)/100}]}},372:{id:372,name:"statConversion",getVals:function(a){if(a.indexOf(";")>0){var e=a.split(";");if(3==e.length&&2==e[0]&&6==e[2])return[{id:10372,name:"intToMdmg",max:Number(e[1])}];if(3==e.length&&5==e[0]&&7==e[2])return[{id:110373,name:"defToPdmg",max:Number(e[1])}]}return[]}},389:{id:389,name:"fd buf",mapTo:1029},404:{id:404,name:"critical damage%",mapTo:1103}},gemExchanges:[{id:2,exchange:1,name:"Weapon"},{id:3,exchange:2,name:"Off-Hand Weapon"},{id:4,exchange:3,name:"Headgear"},{id:5,exchange:4,name:"Body Armor"},{id:6,exchange:5,name:"Leg Armor"},{id:7,exchange:6,name:"Gloves"},{id:8,exchange:7,name:"Shoes"},{id:101,exchange:8,name:"Necklace"},{id:102,exchange:9,name:"Earrings"},{id:103,exchange:10,name:"Ring"}],customItems:[{id:0,typeName:"custom",name:"hp unified",stats:[{id:4075,max:.05}]}],getStats:function(a){var e=!1,d=!1,i=!0,m="State1_Max";m in a?e=!0:(m="State1Value")in a&&(d=!0);for(var n=0,s=[];;){n++;var t="State"+n;if(!(t in a))break;var p=a[t];if(p==-1)break;if(107==p);else{var m,l={id:p};if(e?(m="State"+n+"_Max",l.max=a[m]):d?(m="State"+n+"Value",l.max=a[m]):(m="StateValue"+n,l.max=Number(a[m])),l.max>0||l.max<0){if(i)if((m="NeedSetNum"+n)in a){if(0==a[m])break;l.needSetNum=a[m]}else i=!1;s.push(l)}}}return s},setupStat:function(a,e){a.id=Number(e)},mergeStats:function(a,e){function d(a){var e=Number(a.max);m.stats[a.id]&&"pc"in m.stats[a.id]&&(e=Math.floor(e)),a.id in i?i[a.id]+=e:i[a.id]=e}var i={},m=this;angular.forEach(a,function(a,e){a&&d(a)}),e&&angular.forEach(e,function(a,e){a&&d(a)});var n=[];for(var s in i){var t={max:i[s],id:Number(s)};n.push(t)}return n}}}angular.module("dnsim").factory("hCodeValues",[a])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlcy5qcyIsImFib3V0L2Fib3V0LmpzIiwiYnVpbGRzL2J1aWxkLWFjdGlvbnMuanMiLCJidWlsZHMvYnVpbGQtZXhwb3J0LWFjdGlvbi5qcyIsImJ1aWxkcy9idWlsZC1pbXBvcnQuanMiLCJidWlsZHMvYnVpbGQtaXRlbS5qcyIsImJ1aWxkcy9idWlsZC1saXN0LmpzIiwiYnVpbGRzL2J1aWxkLXN0YXRzLmpzIiwiYnVpbGRzL2J1aWxkLXN1bW1hcnkuanMiLCJidWlsZHMvYnVpbGQtdGFsaXNtYW5zLmpzIiwiYnVpbGRzL2J1aWxkLmpzIiwiYnVpbGRzL2RlbGV0ZS1idWlsZC5qcyIsImJ1aWxkcy9lZGl0LWJ1aWxkLmpzIiwiYnVpbGRzL3F1aWNrLWFkZC5qcyIsImJ1aWxkcy9yZWxvYWQtYnVpbGQuanMiLCJidWlsZHMvdmlldy1ncm91cC5qcyIsImZpbHRlcnMvZXNjYXBlLmZpbHRlci5qcyIsImZpbHRlcnMvcGVyY2VudGFnZS5maWx0ZXIuanMiLCJpdGVtL2dyb3VwLWFzc2lnbm1lbnQuanMiLCJpdGVtL2l0ZW0tZWRpdC1jdXN0b20uanMiLCJpdGVtL2l0ZW0tZWRpdC1lbmNoYW50bWVudC5qcyIsIml0ZW0vaXRlbS1lZGl0LXBvdGVudGlhbC5qcyIsIml0ZW0vaXRlbS1lZGl0LXNraWxsLmpzIiwiaXRlbS9pdGVtLWVkaXQtc3BhcmsuanMiLCJpdGVtL2l0ZW0tZWRpdC10YWxpc21hbi5qcyIsIml0ZW0vaXRlbS1lZGl0LmpzIiwiaXRlbS9pdGVtLXZpZXctYm94LmpzIiwiaXRlbS9pdGVtLXZpZXctY3JhZnQuanMiLCJpdGVtL2l0ZW0tdmlldy1leHRyYWN0aW9uLmpzIiwiaXRlbS9pdGVtLXZpZXctcGxhdGUuanMiLCJpdGVtL2l0ZW0tdmlldy1zZXQuanMiLCJpdGVtL2l0ZW0tdmlldy1zaG9wLmpzIiwiaXRlbS9pdGVtLXZpZXctdHJhbnNmZXIuanMiLCJpdGVtL2l0ZW0uanMiLCJuYXYvZXhwb3J0LmpzIiwibmF2L2hlYWRlci5qcyIsIm5hdi9uYXYuanMiLCJuYXYvc2V0dXAuanMiLCJvbmxpbmUvYnVpbGQtc2VhcmNoLmpzIiwib25saW5lL3Byb2ZpbGUuanMiLCJvbmxpbmUvcHVibGlzaC5qcyIsIm9ubGluZS9wdWJsaXNoZWQuanMiLCJyZWdpb24vcmVnaW9uLmpzIiwic2VhcmNoL2N1c3RvbS1pdGVtcy5qcyIsInNlYXJjaC9ldmVyeXRoaW5nLXNlYXJjaC5qcyIsInNlYXJjaC9zZWFyY2guanMiLCJzZWFyY2gvc2tpbGwtc2VhcmNoLmpzIiwid2lkZ2V0cy9jaG9vc2UtY2xhc3MuanMiLCJ3aWRnZXRzL2Ruc2ltLWNhdGVnb3J5LWxpbmtzLmpzIiwid2lkZ2V0cy9kbnNpbS1pdGVtLWljb24uanMiLCJ3aWRnZXRzL2Ruc2ltLWl0ZW0tbGluay5qcyIsIndpZGdldHMvZG5zaW0tam9iLWljb24uanMiLCJ3aWRnZXRzL2Ruc2ltLWxvYWRpbmcuanMiLCJ3aWRnZXRzL2Ruc2ltLXNlbGVjdC1hbGwtb24tY2xpY2suanMiLCJ3aWRnZXRzL2Ruc2ltLXN0YXRzLmpzIiwid2lkZ2V0cy9kbnNpbS1zdHJpbmctdG8tbnVtYmVyLmpzIiwid2lkZ2V0cy9kbnNpbS1zdHJpbmctdG8tcGVyY2VudC5qcyIsIndpZGdldHMvZmlsZS1jaGFuZ2UuanMiLCJjaGFyYWN0ZXJTZXJ2aWNlLmpzIiwiY29sdW1uc1RvTG9hZFNlcnZpY2UuanMiLCJkbnREYXRhU2VydmljZS5qcyIsImRudEluaXRTZXJ2aWNlLmpzIiwiZG50UmVzZXRTZXJ2aWNlLmpzIiwiZXhwb3J0TGlua1NlcnZpY2VzLmpzIiwiZ3JvdXBTZXJ2aWNlcy5qcyIsIml0ZW1DYXRlZ29yeVNlcnZpY2UuanMiLCJpdGVtRXhjbHVkZVNlcnZpY2UuanMiLCJpdGVtRmFjdG9yeVNlcnZpY2UuanMiLCJpdGVtU291cmNlU2VydmljZS5qcyIsImpvYlNlcnZpY2UuanMiLCJvbmxpbmVTZXJ2aWNlLmpzIiwicXVpY2tBZGRIZWxwZXJTZXJ2aWNlLmpzIiwicXVpY2tBZGRTZXJ2aWNlLmpzIiwicXVpY2tBZGRTdGVwc1NlcnZpY2UuanMiLCJyZWdpb25TZXJ2aWNlLmpzIiwic2F2ZVNlcnZpY2UuanMiLCJzdGF0U2VydmljZS5qcyIsInRyYW5zbGF0aW9uU2VydmljZS5qcyIsInZhbHVlU2VydmljZXMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIiRyb3V0ZVByb3ZpZGVyIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwid2hlbiIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJtb2R1bGUiLCJjb25maWciLCJkb2N1bWVudCIsImJvZHkiLCJjbGFzc05hbWUiLCIkbG9jYXRpb24iLCJzYXZlSGVscGVyIiwiZXhwb3J0TGlua0hlbHBlciIsInZtIiwidGhpcyIsInBhdGgiLCJidWlsZE5hbWUiLCJjb3B5R3JvdXAiLCJuZXdHcm91cE5hbWUiLCJpbXBvcnRHcm91cCIsImJ1aWxkIiwiaXRlbXMiLCJyZW5hbWVTYXZlZEdyb3VwIiwiZW5lbXlMZXZlbCIsInJlbG9hZGVkIiwicGxheWVyTGV2ZWwiLCJyZWxvYWRHcm91cCIsImRhbWFnZVR5cGUiLCJlbGVtZW50IiwicHJvZ3Jlc3MiLCJlbmVteVN0YXRDYXBzIiwiY3JlYXRlU2hvcnRVcmwiLCJiYXNlU3RhdHMiLCJoZXJvU3RhdHMiLCJjb250cm9sbGVyQXMiLCJjcmVhdGVHcm91cExpbmsiLCJzaG9ydFVybCIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsImxvbmdVcmwiLCJzZXRTaG9ydFVybCIsImRpcmVjdGl2ZSIsInNjb3BlIiwiYmluZFRvQ29udHJvbGxlciIsIm9uQ2hhbmdlIiwiJHRpbWVvdXQiLCJoQ29kZVZhbHVlcyIsInN0YXRIZWxwZXIiLCJpdGVtQ2F0ZWdvcnkiLCJncm91cEhlbHBlciIsInRyYW5zbGF0aW9ucyIsImRudERhdGEiLCJkbnRSZXNldCIsImJsb2IiLCJzYXZlQXMiLCJCbG9iIiwiSlNPTiIsInN0cmluZ2lmeSIsInR5cGUiLCJleHBvcnQiLCJleHBvcnRCdWlsZCIsImZpbGVzIiwidGFyZ2V0IiwiY29uc29sZSIsImV2ZW50IiwibGVuZ3RoIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc1RleHQiLCJvbmxvYWQiLCJmaWxlTmFtZSIsInJlcGxhY2UiLCJjb3B5TG9jYWxseSIsImhlcm9MZXZlbCIsImpvYiIsInNlY29uZGFyeUVsZW1lbnQiLCJwbGF5ZXJTdGF0Q2FwcyIsImNvbnZlcnNpb25zIiwiaXRlbSIsImdlbVNsb3QiLCJnZW1TbG90cyIsIm5hbWUiLCJpIiwic2V0RnVsbFN0YXRzIiwiZnVsbFN0YXRzIiwic3RhdHMiLCJtZXJnZVN0YXRzIiwiZW5jaGFudG1lbnRTdGF0cyIsInNwYXJrU3RhdHMiLCJnZXRHZW1TbG90TmFtZSIsImVkaXRNb2RlIiwiY2FuY2VsRWRpdCIsInNldHVwQnVpbGRzIiwic2F2ZWRJdGVtcyIsImdldFNhdmVkSXRlbXMiLCJidWlsZE5hbWVzIiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJidWlsZHMiLCJwdXNoIiwiJHJvdXRlUGFyYW1zIiwiY3VycmVudEdyb3VwIiwic2F2ZUJ1aWxkU2VsZWN0aW9uIiwiJHdpbmRvdyIsInRpdGxlIiwiY3JlYXRlR3JvdXAiLCJoYW5kbGVDaGFuZ2UiLCJ0b2dnbGVHcm91cCIsInVybCIsInNlYXJjaCIsIml0ZW1zQnlDYXRlZ29yeSIsImdldEl0ZW1zQnlDYXRlZ29yeSIsImdldFNhdmVEYXRlIiwibGFzdFVwZGF0ZSIsImdyb3VwIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImdldFNhdmVUaW1lIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiZ2V0QnVpbGRTdW1tYXJ5Iiwic3VtbWFyeSIsIml0ZW1zQnlUeXBlIiwiam9icyIsIml0ZW1Db2x1bW5zVG9Mb2FkIiwiY2hhcmFjdGVyIiwidXBkYXRlUm93cyIsIm5ld1ZhbCIsIm9yaWdWYWwiLCJNYXRoIiwicm91bmQiLCJzY3JvbGxUbyIsImdyb3VwTmFtZXMiLCJncm91cE5hbWUiLCJnZXRDdXJyZW50QnVpbGQiLCJnZXRHcm91cENhbGNTdGF0cyIsImdyb3VwQ2FsY1N0YXRzIiwiZ2V0Q2FsY3VsYXRlZFN0YXRzRnJvbUl0ZW1zIiwiZ2V0QnVpbGQiLCJwaWNrdXAiLCJpbmRleCIsInJlcGxhY2VIUEFmZmVjdEFtb3VudCIsInJlcGxhY2VQRG1nQWZmZWN0QW1vdW50IiwicmVwbGFjZUF2Z0RtZ0FmZmVjdEFtb3VudCIsInN1bW1hcnlTdGF0SWRzIiwicGNJbmRleGVzIiwiaWQiLCJzdW1tYXJ5RGlzcGxheSIsInJvd3MiLCJwY0luZGV4Iiwicm93SW5kZXgiLCJ0eXBlTmFtZSIsImVuY2hhbnRtZW50TnVtIiwibWFrZUZha2VDZWxscyIsImRhdGEiLCJtYWtlQ2VsbCIsInNlbGVjdGVkSW5kZXgiLCJudW0iLCJjb2wiLCJjbGljayIsIm1vdmUiLCJzZXRUYWxpc21hbiIsInN3YXBFbmNoYW50bWVudE51bWJlciIsIm5ld0VuaGFuY2VtZW50TnVtIiwiZXh0cmFTdGF0cyIsInJlcGxhY2VBZmZlY3RBbW91bnQiLCJmb3JFYWNoIiwic3RhdCIsImdldFJlcGxhY2VBZmZlY3RBbW91bnQiLCJtYXgiLCJzdGF0SWQiLCJpdGVtSW5kZXgiLCJpbml0UmVwbGFjZUFmZmVjdHMiLCJpdGVtMiIsImZ1bGxTdGF0czIiLCJuZXdJdGVtcyIsImZ1bGxTdGF0czEiLCJnSXRlbSIsIm5ld1N0YXRzIiwib3JpZ1N0YXRzIiwiY2FsY1N0YXRQZXJjZW50IiwiZWxlSWQiLCJyZXRWYWwiLCJlbGVtZW50cyIsImdldFN0YXQiLCJnZXRTdGF0TmFtZSIsImxlbiIsInNhdmUiLCJ1cGRhdGVkU2F2ZWRJdGVtcyIsImdldEJ1aWxkU3RhdHMiLCJzZWxlY3RlZENhdGVnb3J5IiwiY2F0ZWdvcnkiLCJoaWRlSW5CdWlsZCIsImJ5TmFtZSIsImdldENhdGVnb3J5SXRlbXMiLCJpdGVtc0J5Q2F0Iiwic3ViQ2F0cyIsInN1YkNhdENhdE5hbWUiLCJzdWJDYXRMaXN0IiwiaXRlbTEiLCJfIiwiZXhjaGFuZ2VUeXBlIiwiZWFjaCIsImZpbHRlciIsInNsb3RzIiwibmFtZXMiLCJpbmNyZWFzaW5nR2VtU2xvdHMiLCJvZmZlbnNpdmVHZW1TbG90cyIsImdldE51bVRha2VuIiwic3ViQ2F0IiwiZ2VtRXhjaGFuZ2UiLCJmaW5kIiwiZ2VtRXhjaGFuZ2VzIiwiZSIsImlzSW5TdWJDYXQiLCJhbGxTdWJDYXRJdGVtcyIsImV4Y2hhbmdlIiwiZ2V0U3ViQ2F0ZWdvcmllcyIsInN1YkNhdEl0ZW0iLCJjYW5Nb3ZlIiwiZ2V0R2VtU2xvdCIsIm1vdmVJdGVtIiwiZGVzdGluYXRpb24iLCJjYXRlZ29yaWVzIiwic2V0U2VsZWN0ZWRDYXRlZ29yeSIsImdldENhdGVnb3JpZXMiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwidmFsdWUiLCJhbGxvd01vcmVJdGVtcyIsIm1heENhdCIsImFsbEl0ZW1zIiwiaXRlbUNvdW50VGV4dCIsIm51bU9mZmVuc2l2ZUdlbXMiLCJudW1PZmZlbnNpdmVTbG90cyIsInRvdGFsSW5jcmVhc2luZ0dlbXMiLCJudW1JbmNyZWFzaW5nU2xvdHMiLCJnZW1UeXBlIiwibnVtSW5jcmVhc2luZ0dlbXMiLCJudW1JdGVtcyIsIm51bWJlciIsImNvbmNhdCIsIm5ld0N1c3RvbSIsImNhdCIsIm51bUl0ZW1UZXh0IiwiaGFuZGxlSXRlbUVkaXQiLCJyZW1vdmVJdGVtIiwibmV3SXRlbUxpc3QiLCJjYW5FZGl0Iiwic2VydmVyIiwibmV3R3JvdXAiLCJkZWxldGVCdWlsZCIsImVkaXRCdWlsZEN0cmwiLCJyZWdpb24iLCJvbGRHcm91cE5hbWUiLCJkYW1hZ2VUeXBlcyIsImluaXREYW1hZ2VUeXBlIiwiZCIsIkRhbWFnZVR5cGUiLCJpbml0RGVmYXVsdEVsZW1lbnQiLCJkZWZhdWx0RWxlbWVudCIsImRlZmF1bHRTZWNvbmRhcnlFbGVtZW50Iiwiam9iTmFtZSIsIkVuZ2xpc2hOYW1lIiwiaW5pdCIsIm5ld0pvYnMiLCJnZXRGaW5hbEpvYnMiLCJrZXkiLCJzZXRIZXJvU3RhdHMiLCJzZXRKb2IiLCJnZXRTdGF0Q2FwIiwiZ2V0Sm9iQmFzZVN0YXQiLCJjb2xOYW1lIiwidXNlTGV2ZWwiLCJnZXRTdGF0Q2FwcyIsImdldEpvYkNvbnZlcnNpb24iLCJnZXRCYXNlU3RhdHMiLCJpbnZhbGlkR3JvdXBOYW1lIiwiZ2V0Q29udmVyc2lvbnMiLCJvayIsImdldEhlcm9TdGF0cyIsImlucHV0IiwiZ2V0RWxlbWVudEJ5SWQiLCJmb2N1cyIsInNldFNlbGVjdGlvblJhbmdlIiwiJGluamVjdCIsInF1aWNrQWRkIiwic3RhcnRlZEZvckNhdCIsInN0ZXBOdW1iZXIiLCJkYXRhcyIsIm9wdGlvbnMiLCJzZXRPcHRpb25zIiwiaGFzU3RhcnRlZCIsImdldE9wdGlvbnMiLCJzZWxlY3RPcHRpb24iLCJjcmVhdGVEYXRhIiwiaXNWYWxpZFN0ZXBOdW1iZXIiLCJkbnRGaWxlcyIsImdldERudEZpbGVzIiwibmV3SXRlbSIsImNvbHVtbnMiLCJ0cnlUb0FkZEl0ZW0iLCJhbGxMb2FkZWQiLCJjYW5jZWwiLCJyZWxvYWRJdGVtIiwic2F2ZUl0ZW0iLCJyZXNldCIsInN0YXJ0IiwiaGFzT3B0aW9ucyIsImJhY2siLCJwb3AiLCJ0ZXN0T3B0aW9ucyIsInJlbG9hZEJ1aWxkQ3RybCIsInRyeUluaXQiLCJnb1RvQnVpbGQiLCJpc0xvYWRlZCIsIiRzY29wZSIsImFsbEluaXQiLCJhbnlMb2FkaW5nIiwiZ2V0QnlJZCIsInNldExvY2F0aW9uQnlOYW1lIiwiZyIsInAiLCJoIiwicyIsIml0ZW1TdHJpbmciLCJkZWNvZGVJdGVtIiwiaXRlbVN0ciIsImlzTG9hZGluZyIsImFueUl0ZW1zIiwibmV3QnVpbGROYW1lIiwid2luZG93IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlRmlsdGVyIiwicGVyY2VudGFnZUZpbHRlciIsIiRzdGF0ZWZ1bCIsImFkZEFmZmVjdEFtb3VudCIsImNsZWFyR3JvdXAiLCJnZXRBZGRBZmZlY3RBbW91bnQiLCJpbml0QWRkQWZmZWN0cyIsImdldEdyb3VwSXRlbXMiLCJudW1NYXRjaGVzIiwic3RyIiwiaXRlbVNwbGl0IiwiaW5kZXhPZiIsImdyb3VwSXRlbXMiLCJpdGVtU291cmNlIiwic3BsaXQiLCJhIiwiaGFzTWF4RXhjaGFuZ2FibGUiLCJtYXhFeGNoYW5nZSIsInVwdG9JdGVtIiwibmV4dEdyb3VwIiwic2F2ZUdyb3VwIiwicHJldkdyb3VwIiwiZm91bmRHcm91cCIsImFkZFRvR3JvdXAiLCJyZXBsYWNlSXRlbSIsImNvbXBhY3QiLCJzdGF0TWFwIiwiJHdhdGNoIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIk51bWJlciIsImZvdW5kIiwiYW55Q2hhbmdlIiwiaXRlbUZhY3RvcnkiLCJnZXRFbmNoYW50TGV2ZWwiLCJlbmNoYW50bWVudHMiLCJpdGVtVHlwZSIsIkVuY2hhbnRMZXZlbCIsImVuY2hhbnRtZW50SWQiLCJlbmNoYW50RG50IiwiZ2V0RW5jaGFudG1lbnRzIiwicGV0TGV2ZWxEbnQiLCJwZXREbnQiLCJlbmNoYW50bWVudCIsImVuY2hhbnRtZW50QWZ0ZXIiLCJlbmNoYW50bWVudENvc3QiLCJlbmhhbmNlbWVudE9wdGlvbnMiLCJzZXRFbmNoYW50bWVudCIsImdldFN0YXRzIiwiTmVlZENvaW4iLCJzZXRQZXRMZXZlbCIsImlzTWF4RW5jaGFudExldmVsIiwiZW5oYW5jZW1lbnRPcHRpb24iLCJuZXh0RW5jaGFudG1lbnQiLCJwcmV2RW5jaGFudG1lbnQiLCJnZXRPcHRpb24iLCJpdGVtSWQiLCJpdGVtQ291bnQiLCJtYXRlcmlhbCIsIm1hdGVyaWFscyIsImNyZWF0ZUJhc2ljSXRlbSIsImVtcHR5U3RhdElkIiwicFN0YXRzIiwicG90ZW50aWFscyIsInNJbmRleCIsImhpZGUiLCJyZXBvcnRQcm9ncmVzcyIsInBvdGVudGlhbCIsImNoYW5naW5nUG90ZW50aWFscyIsInBvdGVudGlhbFN0YXRzIiwicGlkIiwicG90ZW50aWFsRG50IiwiZ2V0UG90ZW50aWFscyIsImdldFBvdGVudGlhbFN0YXRzIiwiUG90ZW50aWFsSUQiLCJwb3RlbnRpYWxEbnRFeCIsIm5leHRQb3RlbnRpYWwiLCJwcmV2UG90ZW50aWFsIiwiY2hhbmdlUG90ZW50aWFsIiwiaXNGaXJzdFBvdGVudGlhbCIsImlzTGFzdFBvdGVudGlhbCIsImdldERudEZpbGUiLCJiYXNlSm9iTmFtZSIsInB2ZSIsIm1zZyIsImluaXRTa2lsbHMiLCJkbnRGaWxlIiwic2tpbGxEYXRhIiwiaXNNYXhTa2lsbExldmVsIiwicG90ZW50aWFsSW5kZXgiLCJzcGFya3MiLCJzcGFyayIsInNwYXJrSWQiLCJzcGFya0RudCIsImdldFNwYXJrcyIsIm5leHRTcGFyayIsImdldFBvdGVudGlhbEluZGV4IiwiaXNNb3JlU3BhcmtzIiwiaXNGaXJzdFNwYXJrIiwicHJldlNwYXJrIiwic2lkIiwic3BhcmtUeXBlSWQiLCJhbW91bnQiLCJ1cGRhdGVJdGVtIiwidHlwZUlkIiwibG9nIiwicG91Y2hGaWxlTmFtZXMiLCJnZXRDaGFybUl0ZW1zIiwiVHlwZVBhcmFtMSIsImdldFBvdWNoSXRlbXMiLCJwb3VjaERhdGEiLCJnb2xkIiwiaXNHcm91cCIsImJveFR5cGUiLCJmIiwiYmFzaWNJdGVtIiwiZ2V0UG91Y2hJdGVtc0Zyb21GaWxlIiwicG91Y2hGaWxlTmFtZSIsInBvdWNoSXRlbSIsIkdvbGRNaW4iLCJjaGFybUZpbGVzIiwiY2hhcm1JdGVtdGFibGUiLCJjb21tb25DaGFybUl0ZW10YWJsZSIsInBvdWNoSXRlbUNvdW50IiwiYyIsImNoYXJtRGF0YSIsIkNoYXJtTnVtIiwiY2QiLCJDaGFybVR5cGUiLCJpdGVtZHMiLCJJdGVtSUQiLCJjb3VudCIsImdldERhdGEiLCJMb29rIiwiQ291bnQiLCJHb2xkIiwiY3JhZnRzIiwiY0ZpbGVzIiwiaW5pdENyYWZ0cyIsImluaXRDcmFmdCIsImoiLCJuZXdDcmFmdHMiLCJrIiwiZkNyYWZ0cyIsImNyYWZ0IiwiQ29zdCIsIml0ZW1Db2xOYW1lIiwicXR5Q29sTmFtZSIsImluaXRFeHRyYWN0IiwiRGlzam9pbnREcm9wMSIsImRpc2pvaW50IiwiRW5jaGFudElEIiwiRGlzam9pbnREcm9wIiwiZ2V0SXRlbXMiLCJnZXRHb2xkIiwiRGlzam9pbnRhbW91bnQiLCJyIiwicm93IiwiaXRlbURhdGEiLCJhbGxJdGVtRmlsZU5hbWUiLCJhbGxGaWxlcyIsImluaXRTZXRzIiwiZ2V0UGxhdGVzIiwiZ2V0U2V0SXRlbXMiLCJzZXRJZCIsIml0ZW0xcyIsInNob3BzIiwiaXRlbTJzIiwiUHVyY2hhc2VJdGVtMiIsInNob3BDb3N0Iiwic2hvcE5hbWUiLCJTaG9wSUQiLCJQdXJjaGFzZUl0ZW0xIiwibmlnaHRtYXJlUG9pbnRzIiwibnVtSXRlbTEiLCJ0cmFuc2xhdGUiLCJUYWJOYW1lSUQiLCJudW1JdGVtMiIsImxhZGRlclBvaW50cyIsInNob3BOYW1lcyIsIlB1cmNoYXNlVHlwZTEiLCJQdXJjaGFzZUl0ZW1WYWx1ZTEiLCJQdXJjaGFzZVR5cGUyIiwiUHVyY2hhc2VJdGVtVmFsdWUyIiwic2hvcENvc3RzIiwiY0Nhc2hTaG9wRmlsZU5hbWUiLCJjU3lzU2hvcEZpbGVOYW1lIiwiaW5pdFNob3BzIiwiZ2V0Q29tYmluZWRDb3N0cyIsIm5ld1Nob3BDb3N0cyIsInRhYk5hbWUiLCJtYXRjaGluZ1RyYW5zZmVycyIsInRyYW5zZmVySXRlbXNGaWxlTmFtZSIsImluaXRUcmFuc2ZlcnMiLCJ0cmFuc2Zlckl0ZW0iLCJ0cmFuc2ZlckZpbGVOYW1lIiwidHJhbnNmZXJzIiwidCIsIlJhbmsiLCJyYW5rIiwiTGV2ZWxMaW1pdCIsImxldmVsTGltaXQiLCJOZWVkSXRlbUlEMiIsImxldmVsIiwiUmVzdWx0TGV2ZWwiLCJSZXN1bHRFbmNoYW50TGV2ZWwiLCJyYW5rTmFtZXMiLCJOZWVkSXRlbUNvdW50MSIsIlJlc3VsdFJhbmsiLCJOZWVkSXRlbUNvdW50MiIsImdldEpvYk5hbWUiLCJhbGxKb2JzIiwiYW55VG9Mb2FkIiwicHJlSW5pdEl0ZW0iLCJzZXRGaWxlTmFtZSIsIlR5cGUiLCJuZWVkSm9iQ2xhc3MiLCJnZXRJdGVtRGF0YSIsImlzUGxhdGUiLCJjYW5FeHRyYWN0IiwiaGFzQ29udGVudHMiLCJkZXRhaWwiLCJpc0luU2V0IiwiY2FuVHJhbnNmZXIiLCJtYWluRG50IiwiZ2V0QnVpbGRzIiwic2V0U3RhdHMiLCJnZXREZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiRGVzY3JpcHRpb25JRCIsImdldEV4Y2hhbmdlVHlwZSIsIkRlc2NyaXB0aW9uSURQYXJhbSIsInNldERldGFpbCIsIk5hbWVJRCIsInRvTG93ZXJDYXNlIiwiZ2V0TnVtSXRlbXNGb3JTZXQiLCJnZXROdW1JblNldCIsImdldEJ1aWxkTmFtZSIsImFsbEJ1aWxkTmFtZXMiLCJnZXRTZXJ2ZXJTdG9yYWdlIiwiQWJsZVdTdG9yYWdlIiwiSXNDYXNoIiwiUmV2ZXJzaW9uIiwiZ2V0TW9yZUluZm8iLCJudW1TdGFtcHMiLCJzZWFsVGltZXMiLCJzZWFsRGF0YSIsIm1vcmVJbmZvTG9hZGVkIiwiU2VhbElEIiwiVHlwZTEiLCJDYXNoVHJhZGVDb3VudCIsImxvYWRNb3JlSW5mbyIsImVuY29kZUl0ZW0iLCJyYXdTYXZlZERhdGEiLCJleHBvcnREYXRhIiwiTFpTdHJpbmciLCJjb21wcmVzc1RvVVRGMTYiLCJub0xvY2F0aW9uTWVudSIsIm5vcm1hbE1lbnUiLCJpY29uIiwiYnVpbGRBY3Rpb24iLCJ3aXRoQnVpbGRNZW51IiwiaXNTZWFyY2giLCJub1JlZ2lvbiIsImlzSHR0cE9ubHkiLCJzdGFydGVkTG9hZGluZyIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJ0bG9jYXRpb24iLCJnZXRBY3Rpb25zIiwiY3VycmVudEJ1aWxkIiwiaG9zdG5hbWUiLCJtZW51IiwiZG50TG9jYXRpb24iLCJleHRyYUNzcyIsInNpbUVycm9yIiwiZXgiLCJtZXNzYWdlIiwiZXJyb3IiLCJkbnRJbml0IiwicHJvZ3Jlc3NUcmFuc2xhdGlvbnMiLCJ0ZXN0UmVzdWx0cyIsInRyYW5zbGF0aW9uUmVzdWx0cyIsImFkdmFuY2VkU2V0dXAiLCJob3N0ZWRGaWxlcyIsInNlc3Npb25Mb2NhdGlvbiIsImFsdGVybmF0aXZlRmlsZXMiLCJzYXZlTG9jYXRpb24iLCJleGlzdGluZ0ZpbGUiLCJ0cmFuc2xhdGlvbnNTdGF0dXMiLCJjbGVhciIsInJlbG9hZCIsInNldEN1c3RvbVVybCIsIm5vTG9jYXRpb24iLCJidWlsZFNlYXJjaCIsIm9ubGluZVNlcnZpY2UiLCJnZXRDbGFzc0J1aWxkcyIsInRoZW4iLCJqb2JCdWlsZHMiLCJtYXhEaXNwbGF5IiwidG90YWxOdW1SZXN1bHRzIiwiam9iSWQiLCJzaG93TW9yZVJlc3VsdHMiLCJleHRyYSIsImdldEZpbHRlcmVkQnVpbGRzIiwiYWxsUmVzdWx0cyIsInVpZCIsInJlc3VsdHMiLCJ0b1VwcGVyQ2FzZSIsInJlc3VsdCIsInByb2ZpbGUiLCJnZXRTYXZlZEJ1aWxkcyIsImdldFByb2ZpbGUiLCJzdG9yZWRCdWlsZHMiLCJsb2FkIiwicHVibGlzaCIsInVzZXIiLCJnZXRVc2VyIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJzaG93IiwibG9naW4iLCJzYXZlUHJvZmlsZSIsImNhdGNoIiwiZ2V0VGltZSIsInNhdmVCdWlsZCIsInN0YXJ0UHVibGlzaCIsImFib3V0IiwiZ3VpbGQiLCJwdWJsaXNoQnVpbGQiLCJkZWxldGVBY2NvdW50IiwiZ2V0QnVpbGRMaW1pdCIsIm1heEJ1aWxkcyIsImdldE51bVN0b3JlZEJ1aWxkcyIsInNpemUiLCJnZXROdW1CdWlsZHMiLCJzaWduT3V0IiwiZGVsZXRlTG9jYWwiLCJsb2NhbFRvRGVsZXRlIiwiZ2V0QWxsQnVpbGROYW1lcyIsImFsbEtleXMiLCJkZWxldGVTZXJ2ZXIiLCJyZWFsbHlEZWxldGVTZXJ2ZXIiLCJyZWFsbHlEZWxldGVMb2NhbCIsInNlcnZlclRvRGVsZXRlIiwicHVibGlzaGVkIiwiJHJvdXRlIiwiJGh0dHAiLCJyZXMiLCJuZXdMaW5lRGV0YWlscyIsInNwYWNlRGV0YWlscyIsImRudFZlcnNpb24iLCJvdmVycmlkZSIsImdldE92ZXJyaWRlIiwiaG92ZXJMb2NhdGlvbiIsImVkaXQiLCJzZXREbnRWZXJzaW9uIiwiZ2V0RG50TG9jYXRpb24iLCJnZXRUbG9jYXRpb24iLCJnZXRIb3N0ZWRGaWxlcyIsImdldFdvcmxkTmFtZSIsInNldFRMb2NhdGlvbiIsInNldExvY2F0aW9uIiwic2V0T3ZlcnJpZGUiLCJjdXN0b21JdGVtQ3RybCIsImN1c3RvbUl0ZW1zIiwiY3VycmVudFJlc3VsdHMiLCJuYW1lU2VhcmNoIiwiZ2V0UmVzdWx0cyIsImdldE5ld1N0YXROYW1lIiwiY3JlYXRlQ3VzdG9tSXRlbSIsImV2ZXJ5dGhpbmdTZWFyY2hDdHJsIiwiYm94ZXMiLCJtaW5MZXZlbCIsIm1heExldmVsIiwiYm94Iiwic29ydEJ5IiwibmV3UmVzdWx0cyIsIm51bUJveGVzIiwiY3VyRGlzcGxheSIsIm5hbWVTZWFyY2hlcyIsImFsbE1hdGNoIiwibnMiLCJldmVyeXRoaW5nUGFyYW1zIiwiY2F0TmFtZSIsImpvYkluaXQiLCJzcGxpY2UiLCJsb2FkUmVzdWx0cyIsImdldEFsbEpvYnMiLCJsYXN0Sm9iTnVtYmVyIiwiY2hhbmdlU2VhcmNoIiwiYWx0U3RhdElkIiwiYWx0U3RhdCIsInN0YXRWYWxzIiwicGNTdGF0SWQiLCJudW1FcXVpcCIsImhpZGVMZXZlbCIsImhpZGVSYW5rIiwicmFua0NoZWNrZWQiLCJpc0NsYXNzSm9iIiwiaW5pdEl0ZW0iLCJzdGF0Rm91bmQiLCJzdGF0VmFsIiwic3RhdFJlc3VsdHMiLCJtaW4iLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJieVBhdGgiLCJoaWRlSW5TZWFyY2giLCJncmFkZXMiLCJvcmlnTWF4TGV2ZWwiLCJvcmlnTWluTGV2ZWwiLCJvcmlnU2F2ZWRTZWFyY2hTdGF0SWQiLCJuYXZpZ2F0ZSIsImhpZGVKb2IiLCJjaGVja2VkUmFuayIsImNvbnRyb2xsZXJQYXJhbXMiLCJpdGVtU2VhcmNoQ3RybCIsInNraWxsU2VhcmNoQ3RybCIsImdldERudE5hbWUiLCJiYXNlQ2xhc3NOYW1lIiwiZ2V0U2tpbGxzIiwibG9hZGVkSm9iSWQiLCJza2lsbHMiLCJiYXNlSm9iTmFtZXMiLCJnZXRCYXNlSm9iTmFtZSIsImJhc2VOYW1lIiwiZG50TmFtZSIsInNldHVwU2tpbGxzIiwiYWxsUmVhZHkiLCJFZmZlY3RDbGFzczIiLCJFZmZlY3RDbGFzczMiLCJFZmZlY3RDbGFzczQiLCJFZmZlY3RDbGFzczYiLCJOZWVkSm9iIiwiTmFtZUlEUGFyYW0iLCJJY29uSW1hZ2VJbmRleCIsIm51bVNraWxscyIsInRvU3RyaW5nIiwicmVzdHJpY3QiLCJjaG9vc2VDbGFzcyIsIm9uU2V0Sm9iIiwiY2hvb3NlQ2xhc3NDb250cm9sbGVyIiwiZmluYWxKb2JzIiwiYkpvYiIsImdldEJhc2VKb2JzIiwiZW5nbGlzaE5hbWUiLCJkbnNpbUNhdGVnb3J5TGlua3NDb250cm9sbGVyIiwiY29sbGFwc2UiLCJidWlsZFNjcmVlbiIsImNvbGxhcHNlZCIsImFjdGlvbiIsImxvYWRlZCIsInNldENhdGVnb3J5IiwiZ2V0TmFtZSIsInRJZCIsImRuc2ltQ2F0ZWdvcnlMaW5rcyIsImRuc2ltSXRlbUljb24iLCJsaW5rIiwiYXR0cnMiLCJnZXRJY29uIiwicHJlZml4IiwiZmxvb3IiLCJmaWxlSW5kZXgiLCJkbnNpbUl0ZW1MaW5rIiwibm9DbGljayIsImRuc2ltSm9iSWNvbiIsInNtYWxsIiwiZG5zaW1Kb2JJY29uQ29udHJvbGxlciIsInNpemVWYWx1ZSIsImljb25TaXplIiwiaWNvbk9mZnNldCIsImdldEljb25YUG9zdGlvbiIsIkpvYkljb24iLCJnZXRJY29uWVBvc3Rpb24iLCJ0cmFuc2NsdWRlIiwiYWxzb1Nob3dGb3IiLCIkb24iLCJzZXRMb2FkQ291bnQiLCJsb2FkRXJyb3IiLCJudW1Mb2FkaW5nIiwibiIsInRvdGFsVG9Mb2FkIiwiZG5zaW1Mb2FkaW5nIiwiaGFzU2VsZWN0ZWRBbGwiLCIkZXZlbnQiLCJzZWxlY3Rpb25FbmQiLCJzZWxlY3Rpb25TdGFydCIsIm9uIiwiZG5zaW1TZWxlY3RBbGxPbkNsaWNrIiwiZG5zaW1TdGF0cyIsImFsdFN0YXRzIiwic2VwYXJhdG9yIiwibnVtSW5TZXQiLCJzaG93U3RhdHMiLCJhcHBlbmQiLCJ0ZXh0IiwibmV3RWxlbWVudCIsImNsb25lIiwibGFzdEVsZW1lbnQiLCJhZnRlciIsImNzcyIsImFkZGVkRWxlbWVudHMiLCJmaXJzdCIsInN1bW1hcnlGb3JTdGF0cyIsImRlZiIsInN1bW1hcnlGb3IiLCJvdXRwdXQiLCJzZXAiLCJuZWVkU2V0TnVtIiwiZGlzcGxheSIsInN0YXQyIiwic1N0YXQiLCJzRGVmIiwib3JpZ2luYWxEaXNwbGF5IiwicmVxdWlyZSIsImRuc2ltU3RyaW5nVG9OdW1iZXIiLCJuZ01vZGVsIiwiJGZvcm1hdHRlcnMiLCJwYXJzZUZsb2F0IiwiZmlsZUNoYW5nZUZ1bmN0aW9uIiwiJHBhcnNlIiwiYXR0ckhhbmRsZXIiLCJoYW5kbGVyIiwiJGFwcGx5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhlcm9MZXZlbHMiLCJzdGF0Q2FwcyIsImpvYkJhc2VTdGF0cyIsImNvbXBsZXRlIiwiam9iQ29udmVyc2lvbnMiLCJqb2JDb252ZXJzaW9uQ29sc1RvTG9hZCIsInN0YXRDYXBDb2xzVG9Mb2FkIiwiam9iQmFzZVN0YXRDb2xzVG9Mb2FkIiwiaGVyb0xldmVsUG90ZW50aWFscyIsImZpbmRGYXN0IiwiZ2V0Um93IiwiSGVyb0xldmVsQWJpbGl0eUlEIiwicEluZGV4IiwiZmFjdG9yeSIsIlR5cGVQYXJhbTIiLCJUeXBlUGFyYW0zIiwiTmVlZEpvYkNsYXNzIiwiU3RhdGVWYWx1ZTEiLCJTdGF0ZTFfTWF4IiwiU3RhdGUxIiwiU3RhdGVWYWx1ZTMiLCJTdGF0ZTNfTWF4IiwiU3RhdGUyIiwiU3RhdGVWYWx1ZTQiLCJTdGF0ZVZhbHVlMiIsIlN0YXRlNF9NYXgiLCJTdGF0ZTJfTWF4IiwiU3RhdGUzIiwiU3RhdGVWYWx1ZTUiLCJTdGF0ZTVfTWF4IiwiU3RhdGU0IiwiU3RhdGVWYWx1ZTYiLCJTdGF0ZTZfTWF4IiwiU3RhdGU1IiwiU3RhdGVWYWx1ZTciLCJTdGF0ZTdfTWF4IiwiU3RhdGU2IiwiU3RhdGVWYWx1ZTgiLCJTdGF0ZThfTWF4IiwiU3RhdGU3IiwiU3RhdGVWYWx1ZTkiLCJTdGF0ZTlfTWF4IiwiU3RhdGU4IiwiU3RhdGVWYWx1ZTEwIiwiU3RhdGUxMF9NYXgiLCJTdGF0ZTkiLCJTdGF0ZTEwIiwiRXhjaGFuZ2VUeXBlIiwiZHJhZ29uamV3ZWx0eXBlIiwiU2V0SXRlbUlEIiwiRW5jaGFudFJhdGlvIiwiQnJlYWtSYXRpbyIsIk1pbkRvd24iLCJNYXhEb3duIiwiTmVlZEl0ZW1JRDQiLCJOZWVkSXRlbUNvdW50NCIsIk5lZWRJdGVtSUQ1IiwiTmVlZEl0ZW1Db3VudDUiLCJQcm90ZWN0SXRlbUNvdW50IiwiU3RhdGUyVmFsdWUiLCJTdGF0ZTNWYWx1ZSIsIlN0YXRlNFZhbHVlIiwiU3RhdGU1VmFsdWUiLCJTdGF0ZTZWYWx1ZSIsIlN0YXRlN1ZhbHVlIiwiU3RhdGU4VmFsdWUiLCJTdGF0ZTlWYWx1ZSIsIlN0YXRlMTBWYWx1ZSIsIlBvdGVudGlhbE5vIiwiUG90ZW50aWFsUmF0aW8iLCJTdGF0ZTFWYWx1ZSIsIlN0YXRlMTFWYWx1ZSIsIlN0YXRlMTJWYWx1ZSIsIlN0YXRlMTEiLCJTdGF0ZTEzVmFsdWUiLCJTdGF0ZTEyIiwiU3RhdGUxNFZhbHVlIiwiU3RhdGUxMyIsIlN0YXRlMTVWYWx1ZSIsIlN0YXRlMTQiLCJTdGF0ZTE2VmFsdWUiLCJTdGF0ZTE2Iiwic2V0RG50IiwiSm9iTnVtYmVyIiwiQmFzZUNsYXNzIiwiUGFyZW50Sm9iIiwiSm9iTmFtZSIsIlN0cmVuZ3RoIiwiQWdpbGl0eSIsIkludGVsbGlnZW5jZSIsIlN0YW1pbmEiLCJBZ2dyb3BlclB2RSIsIkJhc2VNUCIsIkNiYXNlIiwiQ2RlZmVuc2UiLCJDY3JpdGljYWwiLCJDY3JpdGljYWxEYW1hZ2UiLCJIUCIsIlN0cmVuZ3RoQXR0YWNrIiwiQWdpbGl0eUF0dGFjayIsIkludGVsbGlnZW5jZUF0dGFjayIsIlBoeXNpY2FsRGVmZW5zZSIsIk1hZ2ljRGVmZW5zZSIsIkNyaXRpY2FsIiwiQ3JpdGljYWxSZXNpc3RhbmNlIiwiU3RpZmYiLCJTdGlmZlJlc2lzdGFuY2UiLCJTdHVuIiwiU3R1blJlc2lzdGFuY2UiLCJNb3ZlU3BlZWQiLCJNb3ZlU3BlZWRSZXZpc2lvbiIsIkRvd25EZWxheSIsIkVsZW1lbnRBdHRhY2siLCJFbGVtZW50RGVmZW5zZSIsIkVsZW1lbnREZWZlbnNlTWluIiwiRWxlbWVudERlZmVuc2VNYXgiLCJTdHJlbmd0aEludGVsbGlnZW5jZVRvQ3JpdGljYWxEYW1hZ2UiLCIkcm9vdFNjb3BlIiwiY29sc1RvTG9hZCIsIkRudFJlYWRlciIsImZpbGUiLCJwcm9ncmVzc0NhbGxiYWNrIiwiY29tcGxldGVDYWxsYmFja3MiLCJpZ25vcmVFcnJvcnMiLCIkYnJvYWRjYXN0IiwiZmFpbGVkIiwibG9hZGVyIiwiZmluZEluZGV4ZXMiLCJsb2FkZXJzIiwiY3JlYXRlTG9hZGVyIiwiQXJyYXkiLCJudW1Sb3dzIiwiY29sdW1uIiwibnVtUmVzdWx0cyIsImNvbEluZGV4IiwiY29sdW1uSW5kZXhlcyIsImZpbmRJbmRleCIsInZhbCIsImhhc0ZhaWxlZCIsInJlc2V0QWxsIiwiZ2V0TnVtUm93cyIsImxvb2t1cFZhbHVlIiwiY29sdW1uTmFtZSIsImdldFZhbHVlIiwiY29sdW1uTmFtZXMiLCJjb252ZXJ0RGF0YSIsImluaXRGYWN0b3J5IiwiYWxsRmFjdG9yaWVzIiwicHJvcCIsIm5ld0ZhY3RvcnkiLCJzb3VyY2UiLCJpdGVtQml0IiwiY2hhckF0IiwiYml0SW5kZXgiLCJwYXJzZUludCIsInN1YnN0ciIsInN0YXRTdHJpbmciLCJzdGF0Qml0Iiwic3BsaXRTdGF0Iiwic3RhdEJpdEluZGV4IiwiaXRlbVN0cmluZ3MiLCJzZWxmIiwiZW5jb2RlVVJJIiwiaHJlZiIsImpvaW4iLCJiYXNlUGF0aCIsInF1ZXJ5U2VsZWN0b3IiLCJhdHRyIiwic3VjY2VzcyIsInN0YXR1cyIsImhlYWRlcnMiLCJza2lsbERudCIsInNraWxsTGV2ZWxEbnQiLCJza2lsbExldmVsRGF0YXMiLCJTa2lsbEluZGV4IiwiU2tpbGxMZXZlbCIsInNraWxsTGV2ZWxWYWxzIiwicHYiLCJTa2lsbEV4cGxhbmF0aW9uSUQiLCJyb3dOdW0iLCJ0eXBlUGFyYW0xIiwiU2tpbGxFeHBsYW5hdGlvbklEUGFyYW0iLCJwcyIsImdldFNraWxsU3RhdHMiLCJkcyIsImNyZWF0ZUl0ZW0iLCJzZXRJdGVtQ2F0ZWdvcnkiLCJ1c2VQYXJ0RG50IiwicGFydHMiLCJzZXRzIiwiRHJhZ29uSmV3ZWxTbG90MSIsIkRyYWdvbkpld2VsU2xvdDIiLCJEcmFnb25KZXdlbFNsb3QzIiwiUGV0TGV2ZWwiLCJEcmFnb25KZXdlbFNsb3Q0IiwiaXRlbVR5cGVOYW1lIiwiZmlsZVR5cGUiLCJrZXkxIiwiYWxsRG50RmlsZXMiLCJzZWFyY2hUeXBlIiwic291cmNlVHlwZSIsImxpbWl0RXhjaGFuZ2UiLCJjYXRJdGVtcyIsImxvYWRpbmciLCJpc0l0ZW1Gb3JDYXQiLCJyYXdEYXRhIiwiZ2VtVHlwZXMiLCJnZW0iLCJnZW1EbnQiLCJpdGVtTWFwIiwidHlwZXMiLCJzb3VyY2VOYW1lIiwiZW5oMSIsImVuaDIiLCJzb3J0ZWQiLCJsb2NhbGVDb21wYXJlIiwidHlwZUVycm9yIiwiaWRzIiwiZXhjbHVkZVNlcnZpY2UiLCJpc0RhdGFMb2FkZWQiLCJsb2FkSXRlbXMiLCJzdGF0ZTFNYXgiLCJkU3RhdGVWYWx1ZTEiLCJkVHlwZVBhcmFtMSIsImRUeXBlIiwibnVtUG90ZW50aWFscyIsImVuZCIsInRpbWUiLCJTa2lsbElEIiwic2tpbGxJZCIsImljb25JbmRleCIsInBldERhdGEiLCJQZXRMZXZlbFR5cGVJRCIsImdldEl0ZW1EYXRhRnJvbUZpbGUiLCJkb0NvbXBsZXRlIiwiaXRlbVNvdXJjZXMiLCJ0ZWNoIiwiZ2VtU2xvdERudCIsInRtYW4iLCJwbGF0ZSIsInBhcnRzRG50Iiwid2VhcG9uRG50IiwibWluUmFuayIsImVxIiwicmJlcSIsInB2cGVxIiwiY0Nsb25lIiwiYzIwMTYiLCJjMjAxNSIsImMyMDE0IiwiY2FzaCIsInh0cmFzIiwiaW1wcmludCIsImpvYnNEbnQiLCJoYXNTdGFydGVkTG9hZGluZyIsImFsbGpvYnMiLCJiYXNlSm9icyIsImNyZWF0ZUpvYiIsInBhcmVudEpvYiIsInBhcmVudEpvYkRhdGEiLCIkcSIsInN0b3JhZ2VCdWNrZXQiLCJyZXNvbHZlIiwicmVqZWN0IiwiZmlyZWJhc2UiLCJhdXRoIiwib25BdXRoU3RhdGVDaGFuZ2VkIiwib25jZSIsInN0b3JlZFByb2ZpbGUiLCJkYXRhYmFzZSIsInJlZiIsInN0cmlwQnVpbGROYW1lIiwic2VydmljZSIsImNvcHkiLCJkZWxldGVOdWxsUHJvcGVydGllcyIsInNldCIsImdldFVzZXJCdWlsZHMiLCJkZWNvbXByZXNzQnVpbGQiLCJjb21wcmVzc0J1aWxkIiwic3RyaW5naWZpZWREYXRhIiwicGFyc2UiLCJjb21wcmVzc2VkQnVpbGQiLCJhY3Rpb25zIiwiYWxsIiwidGVzdCIsInJlY3Vyc2UiLCJ1bmRlZmluZWQiLCJfdHlwZW9mIiwicExpc3QiLCJqb2JJZHMiLCJyZW1vdmUiLCJ1bmlxIiwiZGVsZXRlIiwiY3VycmVudFVzZXIiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJpbml0aWFsaXplQXBwIiwicXVpY2tBZGRIZWxwZXIiLCJmaW5kRGF0YSIsImFsdGVySXRlbSIsIm1heEl0ZW1zIiwic29ydEZ1bmMiLCJzb3J0SWQiLCJhZGRJdGVtIiwibWF0Y2hlc0l0ZW0iLCJmaWx0ZXJEdXBsaWNhdGVzIiwiYXJlU2FtZUl0ZW0iLCJpc0VxdWFsIiwicXVpY2tBZGRTdGVwcyIsImNhdGVnb3J5U3RlcHMiLCJ0aXRsZXMiLCJ3ZWFwb25zIiwiYXJtb3VyIiwiYWNjZXNzb3JpZXMiLCJ0ZWNocyIsImV4cGVkaXRpb24gcGxhdGVzIiwidGFsaXNtYW4iLCJjb3N0dW1lIiwiY3VzdG9tIiwiZ2V0U3RlcE5hbWUiLCJzdGVwTmFtZSIsInN0ZXBEZWYiLCJhbGxPcHRpb25zIiwidW5maWx0ZXJlZEl0ZW1zIiwibmV3T3B0aW9ucyIsIm9wdGlvbiIsInRlbXBEYXRhcyIsIm1pbk9wdGlvbnMiLCJzdGVwIiwiZXhjaGFuZ2VTdGVwIiwiZXhjaGFuZ2VzIiwibnVtRXhjaGFuZ2UiLCJleElkIiwiZXhOYW1lIiwiYWNjRXhjaGFuZ2VTdGVwIiwic2l4dHlMZXZlbFN0ZXAiLCJhbGxMZXZlbFN0ZXAiLCJjYXNoUmFua1N0ZXAiLCJpbXByaW50UmFua1N0ZXAiLCJ0ZWNoUmFua1N0ZXAiLCJ0YWxpc21hblJhbmtTdGVwIiwib3RoZXJSYW5rU3RlcCIsImdlbVJhbmtTdGVwIiwidGl0bGVTdGVwIiwiYWxsVGl0bGVzIiwidXNlZnVsVGl0bGVzIiwiZXF1aXBSYW5rU3RlcCIsImlzSXRlbVN0ZXAiLCJlbmhhbmNlU3RlcCIsImVuaGFuY2VUYWxpc21hblN0ZXAiLCJpdGVtU3RlcCIsImhpZGVOYW1lIiwidGVjaFNraWxsU3RlcCIsIml0ZW1OYW1lcyIsIml0ZW1OYW1lc0xpc3QiLCJkaXN0aW5jdEl0ZW1OYW1lU3RlcCIsIm51bVN0YXRzU3RlcCIsIm51bVN0YXRzIiwiaGlnaFN0YXRTdGVwIiwiYWxsSXRlbSIsImFsbFN0YXRzIiwicXVpY2tIaWdoIiwic2VsZWN0ZWRWYWwiLCJiIiwidmFsMSIsImhhc1N0YXRTdGVwIiwibGFyZ2VzdFZhbCIsInZhbDIiLCJzZWFyY2hhYmxlIiwiY3VzdG9tU3RlcCIsImRudExvY2F0aW9uUmVnaW9uIiwiaG9zdGVkRmlsZSIsImxhc3RURmlsZSIsIm5ld0ZpbGVzIiwibmV3TG9jYXRpb24iLCJsb2NhdGlvbk5hbWUiLCJ0TG9jYXRpb24iLCJncm91cHMiLCJzZXRDdXJyZW50QnVpbGQiLCJ1cGRhdGVkSXRlbXMiLCJnZXRVbmlxdWVHcm91cE5hbWUiLCJleGlzdGluZ0dyb3VwcyIsImdyb3VwTmFtZUluZGV4IiwibGFzdEluZGV4T2YiLCJzdGFydEluZGV4IiwiZm91bmRJbmRleCIsIm9yaWdpbmFsTmFtZSIsInNhdmVCdWlsZHMiLCJkZWNvbXByZXNzRnJvbVVURjE2IiwiZ2V0U2V0U3RhdHMiLCJnZXRDb21iaW5lZFN0YXRzIiwibmFrZWRTdGF0cyIsImdldE5ha2VkU3RhdHMiLCJjb21iaW5lZFN0YXRzIiwiZ2V0Q2FsY3VsYXRlZFN0YXRzIiwiZ2V0UGMiLCJzdGF0RGVmIiwic3RhdExvb2t1cCIsInNrUGMiLCJhcHBseVBjIiwiZHVwZVN0YXQiLCJnZXRTa2lsbFBjIiwicGMiLCJhZGRTdGF0Iiwibm9uRWxlRGFtYWdlIiwiY3JpdERhbWFnZVBjIiwiYXZnRG1nIiwic2VjRWxlbWVudElkIiwiZG1nU3RhdCIsImVsZW1lbnRTdGF0IiwicHJpRWxlbWVudElkIiwic2Vjb25kYXJ5RWxlbWVudFN0YXQiLCJzZWNBdmdEbWciLCJhZ2kiLCJpbnQiLCJ2aXQiLCJocCIsImRlZnBjIiwibWRlZiIsIm1kZWZwYyIsImFQd3IiLCJtaW5QZG1nIiwiZXh0cmFQZG1nIiwibWF4UGRtZyIsImV4dHJhUGRtZ01vZCIsImludFRvUGRtZyIsInBhUHdyIiwiZGVmVG9QZG1nIiwibWluTWRtZyIsIm1heE1kbWciLCJleHRyYU1kbWciLCJleHRyYU1kbWdNb2QiLCJzdHJUb01kbWciLCJtYVB3ciIsImludFRvTWRtZyIsImNyaXQiLCJpdGVtQ3JpdCIsInNrQ3JpdCIsImNEbWciLCJjcml0Q2hhbmNlIiwiQ2ZpbmFsZGFtYWdlIiwiaXRlbUN0cmlEbWciLCJmZCIsIm1heEZkIiwiZmlyZVBjIiwiZmRQYyIsInBvdyIsImljZVBjIiwibGlnaHRQYyIsImRhcmtQYyIsImFkZEF2Z0RhbWFnZVN0YXQiLCJwZGVmRXFIcCIsIm1kZWZFcUhwIiwiZXFIcCIsInZhbENvbE5hbWUiLCJlZmZlY3RzIiwic3RpbGxDb2xzIiwibWFwIiwiZWZmZWN0SWQiLCJza2lsbEVmZmVjdE1hcHBpbmciLCJ2YWxzIiwibWFwVG8iLCJlZmZlY3QiLCJjYWxjdWxhdGVkU3RhdHMiLCJkblRyYW5zbGF0aW9ucyIsImNvbXBsZXRlQ2FsbGJhY2siLCJEblRyYW5zbGF0aW9ucyIsInNpemVMaW1pdCIsImdldEZpbGVOYW1lIiwibG9hZEZyb21TZXNzaW9uIiwiaWRQYXJhbSIsInBhcmFtcyIsInRvTm9EZWMiLCJpblRob3VzYW5kcyIsInRvUGVyY2VudCIsIjAiLCJkcHMiLCIxIiwiMiIsImNvbWJpbmVXaXRoIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4Iiwibm9DdXN0b20iLCI5IiwiMTAiLCIxMSIsIjEyIiwiMTMiLCIxNCIsIjE1IiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjIxIiwiMjIiLCIyMyIsIjI1IiwiMjYiLCIyOSIsIjMyIiwiMzMiLCI1MCIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNTUiLCI1NiIsIjU3IiwiNTgiLCI1OSIsIjYwIiwiNjEiLCI2MiIsIjYzIiwiNjQiLCI2NSIsIjc0IiwiNzUiLCI3NiIsIjc3IiwiODEiLCIxMDEiLCIxMDIiLCIxMDMiLCIxMDQiLCIxMDUiLCIxMDYiLCIxMDciLCIxMDAxIiwiMTAwNCIsIjEwMDYiLCIxMDA4IiwiMTAwOSIsIjEwMTIiLCIxMDI5IiwiMTEwMyIsIjIwMDEiLCIyMDA0IiwiMjAwNiIsIjIwMDgiLCIyMDA5IiwiMzAwMCIsIjMwMDEiLCIzMDAyIiwiMzAwOCIsIjQwMTIiLCI0MDUwIiwiNDA1MSIsIjQwNTIiLCI0MDUzIiwiNDA3NSIsIjQwNzYiLCIxMDE2NCIsIjEwMTY1IiwiMTAzNzIiLCIxMTAzNzMiLCIyODAwMSIsIjI4MDAyIiwiMjgwMDMiLCIyODAwNCIsIjI4MDA1IiwiMjgwMDYiLCIyODAwNyIsIjI4MDA4IiwiMjgwMDkiLCIyODEwMSIsIjI5MDAxIiwiMjkwMDIiLCIyOTAwMyIsIjI5MDA0IiwiMjkwMDUiLCIyOTAwNiIsIjI5MDA3IiwiMjkwMDgiLCIyOTAwOSIsIjUwMDEiLCI1MDAyIiwiNTAwMyIsIjUwMDQiLCI1MDA1IiwiNTAwNiIsIjUwMDciLCI1MDA4IiwiNTAwOSIsIjUxMDEiLCI1MTAyIiwiNTEwMyIsIjUxMDQiLCI1MTA1IiwiNTEwNiIsIjUxMDciLCI1MTA4IiwiNTEwOSIsIjU5MDAxIiwiNTIwMDEiLCI1MjAwMiIsIjUyMDAzIiwiNTIwMDQiLCI1MjAwNSIsIjUyMDA2IiwiNTIwMDciLCI1MjAwOCIsIjUyMDA5IiwiMjQiLCIyNyIsIjI4IiwiODkwMDEiLCI4ODAwMSIsIjg4MDAyIiwiODgwMDMiLCI4ODAwNCIsIjg4MDA1IiwiODgwMDYiLCI4ODAwNyIsIjg4MDA4IiwiODgwMDkiLCI2NjAwMSIsIjM1MDA2IiwiMTQwNTEiLCIxNDA1MiIsIjE0MDUzIiwiMTQwNTQiLCIxNDA1NSIsIjE0MDU2IiwiMTQwNTciLCIxNDA1OCIsIjE0MDU5IiwiNDAwMTEiLCI0MDAxMiIsIjQwMDEzIiwiNDAwMTQiLCI0MDAxNSIsIjQwMDE2IiwiNDAwMTciLCI0MDAxOCIsIjQwMDAxIiwiNDAwMDIiLCI0MDExMSIsIjkxMDAxIiwiNDUwMDEiLCJ0eXBlTmFtZXMiLCIzOCIsIjkwIiwiMTMyIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOSIsIjg3IiwiODgiLCI4OSIsIjE4NSIsIjI1MSIsImdldFZhbHMiLCIzNzIiLCIzODkiLCI0MDQiLCJ1c2VNYXgiLCJ1c2VTdGF0ZVhWYWwiLCJjdXJyZW50U3RhdGUiLCJzdGF0ZVByb3AiLCJzdGF0ZUlkIiwibWlnaHRIYXZlU2V0cyIsImN1cnJlbnREYXRhIiwic2V0dXBTdGF0Iiwic3RhdHMyIiwic3RhdHMxIiwiYWRkIl0sIm1hcHBpbmdzIjoiY0FBQSxXQUdBQSxRQUFBQSxHQUFBQyxHQUVBQSxFQUVFQSxLQUFBQSxVQUdJQyxZQUFhLHNCQUNiQyxXQUFZLHVCQUtaQSxLQUFBQSxVQVRKRCxZQUFBLG9CQVlJQSxXQUFBQSxjQURZRSxLQUtkQSxTQUNFRixZQUFhLG1CQUNiQyxXQUFZLGFBS1pELEtBQUFBLFVBdkJKQSxZQXlCTyxtQ0FDSEEsV0FBQUEscUJBQ0FDLGdCQUFZLElBSVpBLEtBQUFBLEtBL0JKRCxZQWlDTyxvQkFFSEMsS0FBQUEsV0FuQ0pELFlBcUNPLDRCQUNIQSxXQUFBQSwrQkFEOEJFLEtBS2hDQSxzQkFDRUYsWUFBYSw0QkFDYkMsV0FBWSwrQkFJWkQsS0FBQUEsd0JBQ0FDLFlBQVksNEJBakRoQkEsV0FvRE8sa0JBRUhBLEtBQUFBLDJCQXRESkQsWUEwRE8sNEJBQ0hBLFdBQUFBLCtCQURvQkUsS0FNdEJBLGNBQ0VGLFlBQWEsNEJBQ2JDLFdBQVksK0JBS1pBLEtBQUFBLHdCQXZFSkQsWUEyRU8sOEJBQ0hBLFdBQUFBLG1DQUtBQSxLQUFBQSx3QkFDQUMsWUFBWSw4QkFsRmhC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LFNBQVMxeEMsRUFBT3VDLEdBQ25DdkMsR0FDRDJ4QyxFQUFJM3hDLEtBSUx5eEMsR0FDRC8vQyxRQUFRd0ssUUFBUXUxQyxFQUFRLFNBQVN6eEMsRUFBT3VDLEdBQ25DdkMsR0FDRDJ4QyxFQUFJM3hDLElBS1YsSUFBSWxELEtBRUosS0FBSSxHQUFJeUYsS0FBTzRGLEdBQVMsQ0FDdEIsR0FBSWhNLElBQVNFLElBQU04TCxFQUFRNUYsR0FBTXpILEdBQUl5TixPQUFPaEcsR0FDNUN6RixHQUFTOUUsS0FBS21FLEdBR2hCLE1BQU9XLEtBelpicEwsUUFBQU8sT0FBQSxTQUFBbTJCLFFBQUEsZUFBQTF6QiIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBjb25maWddKTtcclxuXHJcbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlcikge1xyXG5cclxuICAkcm91dGVQcm92aWRlci5cclxuICBcclxuICAgIHdoZW4oJy9hYm91dCcsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9hYm91dC9hYm91dC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0Fib3V0Q3RybCBhcyBhYm91dCdcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvc2V0dXAnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvbmF2L3NldHVwLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnU2V0dXBDdHJsJ1xyXG4gICAgfSkuXHJcbiAgICB3aGVuKCcvdGVzdCcsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9uYXYvdGVzdC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ1Rlc3RDdHJsJ1xyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy9pdGVtcycsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9zZWFyY2gvZXZlcnl0aGluZy1zZWFyY2guaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdJdGVtc0N0cmwgYXMgaXRlbXMnLFxyXG4gICAgICByZWxvYWRPblNlYXJjaDogZmFsc2UsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignLycsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS93ZWxjb21lLmh0bWwnLFxyXG4gICAgfSkuXHJcbiAgICB3aGVuKCcvYnVpbGRzJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL2J1aWxkcy9idWlsZC1saXN0Lmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnQnVpbGRMaXN0Q3RybCBhcyBidWlsZExpc3QnXHJcbiAgICB9KS5cclxuICAgIHdoZW4oJy9idWlsZC86YnVpbGROYW1lKicsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvYnVpbGQtbGlzdC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0J1aWxkTGlzdEN0cmwgYXMgYnVpbGRMaXN0J1xyXG4gICAgfSkuXHJcbiAgICB3aGVuKCcvdmlldy1ncm91cC86cmVnaW9uPycsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvdmlldy1ncm91cC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ1ZpZXdHcm91cEN0cmwnXHJcbiAgICB9KS5cclxuICAgIHdoZW4oJy9lZGl0LWJ1aWxkLzpidWlsZE5hbWUqJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL2J1aWxkcy9lZGl0LWJ1aWxkLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnRWRpdEJ1aWxkQ3RybCBhcyBlZGl0R3JvdXAnLFxyXG4gICAgICAvLyByZWxvYWRPblNlYXJjaDogZmFsc2UsXHJcbiAgICB9KS5cclxuICAgIHdoZW4oJy9uZXctYnVpbGQnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2VkaXQtYnVpbGQuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdFZGl0QnVpbGRDdHJsIGFzIGVkaXRHcm91cCcsXHJcbiAgICAgIC8vIHJlbG9hZE9uU2VhcmNoOiBmYWxzZSxcclxuICAgIH0pLlxyXG4gICAgd2hlbignL2RlbGV0ZS1idWlsZC86bmFtZSonLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2RlbGV0ZS1idWlsZC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0RlbGV0ZUJ1aWxkQ3RybCBhcyBkZWxldGVCdWlsZCcsXHJcbiAgICAgIC8vIHJlbG9hZE9uU2VhcmNoOiBmYWxzZSxcclxuICAgIH0pLlxyXG4gICAgd2hlbignL3JlbG9hZC1idWlsZC86bmFtZSonLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL3JlbG9hZC1idWlsZC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ1JlbG9hZEJ1aWxkQ3RybCBhcyBjdHJsJyxcclxuICAgICAgLy8gcmVsb2FkT25TZWFyY2g6IGZhbHNlLFxyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy9zZWFyY2gvOmNhdD8nLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvc2VhcmNoL3NlYXJjaC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0l0ZW1TZWFyY2hDdHJsIGFzIGN0cmwnLFxyXG4gICAgICByZWxvYWRPblNlYXJjaDogZmFsc2UsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL2l0ZW0nLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnSXRlbUN0cmwnLFxyXG4gICAgICAvLyByZWxvYWRPblNlYXJjaDogZmFsc2UsXHJcbiAgICB9KS5cclxuICAgIHdoZW4oJy9pdGVtLzpyZWdpb24/LzppKicsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2l0ZW0uaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdJdGVtQ3RybCcsXHJcbiAgICAgIC8vIHJlbG9hZE9uU2VhcmNoOiBmYWxzZSxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvZXhwb3J0Jywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL25hdi9leHBvcnQuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdFeHBvcnRDdHJsJyxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvdGFsaXNtYW5zJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3VpL2J1aWxkcy9idWlsZC10YWxpc21hbnMuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdCdWlsZFRhbGlzbWFuc0N0cmwgYXMgY3RybCcsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL3B1Ymxpc2gnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvb25saW5lL3B1Ymxpc2guaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdQdWJsaXNoQ3RybCBhcyBjdHJsJyxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvcHJvZmlsZS86dWlkPycsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9vbmxpbmUvcHJvZmlsZS5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ1Byb2ZpbGVDdHJsIGFzIGN0cmwnLFxyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy9wdWJsaXNoZWQnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvb25saW5lL3B1Ymxpc2hlZC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ1B1Ymxpc2hlZEN0cmwgYXMgY3RybCcsXHJcbiAgICB9KS5cclxuICAgIFxyXG4gICAgd2hlbignL2ltcG9ydCcsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9idWlsZHMvYnVpbGQtaW1wb3J0Lmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnQnVpbGRJbXBvcnRDdHJsIGFzIGN0cmwnLFxyXG4gICAgfSkuXHJcbiAgICBcclxuICAgIHdoZW4oJy9wdWJsaXNoZWQvOnVpZC86YnVpbGROYW1lKicsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICd1aS9vbmxpbmUvcHVibGlzaGVkLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnUHVibGlzaGVkQ3RybCBhcyBjdHJsJyxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICB3aGVuKCcvYnVpbGQtc2VhcmNoLzpqb2JJZD8nLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndWkvb25saW5lL2J1aWxkLXNlYXJjaC5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0J1aWxkU2VhcmNoQ3RybCBhcyBjdHJsJyxcclxuICAgIH0pLlxyXG4gICAgXHJcbiAgICBvdGhlcndpc2Uoe1xyXG4gICAgICByZWRpcmVjdFRvOiAnLydcclxuICAgIH0pO1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJylcclxuLmNvbnRyb2xsZXIoJ0Fib3V0Q3RybCcsIFxyXG4gIFsnJHdpbmRvdycsXHJcbiAgZnVuY3Rpb24oJHdpbmRvdykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAnZGVmYXVsdC1iYWNrJztcclxuICAgICR3aW5kb3cuZG9jdW1lbnQudGl0bGUgPSAnZG5nZWFyc2ltIHwgQUJPVVQvRkFRJztcclxuICB9XVxyXG4pO1xyXG59KSgpOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2J1aWxkQWN0aW9uc0N0cmwnLFxyXG5cclxuWyckbG9jYXRpb24nLCdzYXZlSGVscGVyJywnZXhwb3J0TGlua0hlbHBlcicsXHJcbmZ1bmN0aW9uKCRsb2NhdGlvbixzYXZlSGVscGVyLGV4cG9ydExpbmtIZWxwZXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB0aGlzLmRlbGV0ZUdyb3VwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2RlbGV0ZS1idWlsZC8nICsgdm0uYnVpbGROYW1lKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5lZGl0R3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvZWRpdC1idWlsZC8nICsgdm0uYnVpbGROYW1lKVxyXG4gIH1cclxuICBcclxuICB0aGlzLmNvcHlHcm91cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG5ld0dyb3VwTmFtZSA9IHNhdmVIZWxwZXIuaW1wb3J0R3JvdXAodm0uYnVpbGROYW1lLCB2bS5idWlsZC5pdGVtcyk7XHJcbiAgICBcclxuICAgIHNhdmVIZWxwZXIucmVuYW1lU2F2ZWRHcm91cChcclxuICAgICAgbmV3R3JvdXBOYW1lLCBcclxuICAgICAgbmV3R3JvdXBOYW1lLFxyXG4gICAgICB2bS5idWlsZC5lbmVteUxldmVsLFxyXG4gICAgICB2bS5idWlsZC5wbGF5ZXJMZXZlbCxcclxuICAgICAgdm0uYnVpbGQuaGVyb0xldmVsLFxyXG4gICAgICB2bS5idWlsZC5qb2IsXHJcbiAgICAgIHZtLmJ1aWxkLmRhbWFnZVR5cGUsXHJcbiAgICAgIHZtLmJ1aWxkLmVsZW1lbnQsXHJcbiAgICAgIHZtLmJ1aWxkLnNlY29uZGFyeUVsZW1lbnQsXHJcbiAgICAgIHZtLmJ1aWxkLmVuZW15U3RhdENhcHMsIFxyXG4gICAgICB2bS5idWlsZC5wbGF5ZXJTdGF0Q2FwcywgXHJcbiAgICAgIHZtLmJ1aWxkLmNvbnZlcnNpb25zLCBcclxuICAgICAgdm0uYnVpbGQuYmFzZVN0YXRzLCBcclxuICAgICAgdm0uYnVpbGQuaGVyb1N0YXRzKTtcclxuICAgIFxyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9idWlsZC8nICsgbmV3R3JvdXBOYW1lKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5yZWxvYWRlZCA9IGZhbHNlO1xyXG4gIHRoaXMucmVsb2FkR3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvcmVsb2FkLWJ1aWxkLycgKyB2bS5idWlsZE5hbWUpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcm9ncmVzcygpIHtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5jcmVhdGVTaG9ydFVybCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZXhwb3J0TGlua0hlbHBlci5jcmVhdGVTaG9ydFVybCh2bS5idWlsZE5hbWUsIHZtLmJ1aWxkKTtcclxuICB9XHJcbiAgICBcclxuICB0aGlzLnNldFNob3J0VXJsID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5idWlsZCkge1xyXG4gICAgICB2YXIgbG9uZ1VybCA9IGV4cG9ydExpbmtIZWxwZXIuY3JlYXRlR3JvdXBMaW5rKHZtLmJ1aWxkTmFtZSwgdm0uYnVpbGQpO1xyXG4gICAgICB2bS5idWlsZC5zaG9ydFVybCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0obG9uZ1VybCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2V0U2hvcnRVcmwoKTtcclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUJ1aWxkQWN0aW9ucycsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgYnVpbGROYW1lOiAnPWJ1aWxkTmFtZScsXHJcbiAgICAgIGJ1aWxkOiAnPWJ1aWxkJyxcclxuICAgICAgb25DaGFuZ2U6ICcmb25DaGFuZ2UnXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2J1aWxkQWN0aW9uc0N0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnYnVpbGRBY3Rpb25zJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWFjdGlvbnMuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdidWlsZEV4cG9ydEFjdGlvbkN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJyRsb2NhdGlvbicsJ2hDb2RlVmFsdWVzJywnc3RhdEhlbHBlcicsJ2l0ZW1DYXRlZ29yeScsJ3NhdmVIZWxwZXInLCdleHBvcnRMaW5rSGVscGVyJywnZ3JvdXBIZWxwZXInLCd0cmFuc2xhdGlvbnMnLCdkbnREYXRhJywnZG50UmVzZXQnLFxyXG5mdW5jdGlvbigkdGltZW91dCwkbG9jYXRpb24saENvZGVWYWx1ZXMsc3RhdEhlbHBlcixpdGVtQ2F0ZWdvcnksc2F2ZUhlbHBlcixleHBvcnRMaW5rSGVscGVyLGdyb3VwSGVscGVyLHRyYW5zbGF0aW9ucyxkbnREYXRhLGRudFJlc2V0KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgdm0uZXhwb3J0ID0gZXhwb3J0QnVpbGQ7XHJcbiAgXHJcbiAgZnVuY3Rpb24gZXhwb3J0QnVpbGQoKSB7XHJcbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeSh2bS5idWlsZCwgbnVsbCwgMSldLCB7dHlwZTogXCJ0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLThcIn0pO1xyXG4gICAgc2F2ZUFzKGJsb2IsICdkbmdlYXJzaW0tJyArIHZtLmJ1aWxkTmFtZSArICcuanNvbicpO1xyXG4gIH1cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUJ1aWxkRXhwb3J0QWN0aW9uJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBidWlsZE5hbWU6ICc9YnVpbGROYW1lJyxcclxuICAgICAgYnVpbGQ6ICc9YnVpbGQnXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2J1aWxkRXhwb3J0QWN0aW9uQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWV4cG9ydC1hY3Rpb24uaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdCdWlsZEltcG9ydEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJyRsb2NhdGlvbicsJ2hDb2RlVmFsdWVzJywnc3RhdEhlbHBlcicsJ2l0ZW1DYXRlZ29yeScsJ3NhdmVIZWxwZXInLCdleHBvcnRMaW5rSGVscGVyJywnZ3JvdXBIZWxwZXInLCd0cmFuc2xhdGlvbnMnLCdkbnREYXRhJywnZG50UmVzZXQnLFxyXG5mdW5jdGlvbigkdGltZW91dCwkbG9jYXRpb24saENvZGVWYWx1ZXMsc3RhdEhlbHBlcixpdGVtQ2F0ZWdvcnksc2F2ZUhlbHBlcixleHBvcnRMaW5rSGVscGVyLGdyb3VwSGVscGVyLHRyYW5zbGF0aW9ucyxkbnREYXRhLGRudFJlc2V0KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgdm0ub25GaWxlQ2hhbmdlID0gb25GaWxlQ2hhbmdlO1xyXG4gIHZtLmNvcHlMb2NhbGx5ID0gY29weUxvY2FsbHk7XHJcbiAgXHJcbiAgZnVuY3Rpb24gb25GaWxlQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICB2YXIgZmlsZXMgPSBldmVudC50YXJnZXQuZmlsZXM7XHJcbiAgICBjb25zb2xlLmxvZygnaW1wb3J0aW5nIGZpbGVzJywgZmlsZXMpO1xyXG4gICAgaWYoZmlsZXMgJiYgZmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgZmlsZU5hbWUgPSBmaWxlc1swXS5uYW1lO1xyXG4gICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZXNbMF0pO1xyXG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uYnVpbGQgPSBKU09OLnBhcnNlKHJlYWRlci5yZXN1bHQpO1xyXG4gICAgICAgIGlmKGZpbGVOYW1lICYmIGZpbGVOYW1lLmxlbmd0aCA+IDUpIHtcclxuICAgICAgICAgIHZtLmJ1aWxkTmFtZSA9IGZpbGVOYW1lLnN1YnN0cigwLCBmaWxlTmFtZS5sZW5ndGgtNSk7XHJcbiAgICAgICAgICB2bS5idWlsZE5hbWUgPSB2bS5idWlsZE5hbWUucmVwbGFjZSgnZG5nZWFyc2ltLScsICcnKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHZtLmJ1aWxkTmFtZSA9ICdpbXBvcnRlZCBidWlsZCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICR0aW1lb3V0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gY29weUxvY2FsbHkoKSB7XHJcbiAgICB2YXIgbmV3R3JvdXBOYW1lID0gc2F2ZUhlbHBlci5pbXBvcnRHcm91cCh2bS5idWlsZE5hbWUsIHZtLmJ1aWxkLml0ZW1zKTtcclxuICAgIFxyXG4gICAgc2F2ZUhlbHBlci5yZW5hbWVTYXZlZEdyb3VwKFxyXG4gICAgICBuZXdHcm91cE5hbWUsIFxyXG4gICAgICBuZXdHcm91cE5hbWUsXHJcbiAgICAgIHZtLmJ1aWxkLmVuZW15TGV2ZWwsXHJcbiAgICAgIHZtLmJ1aWxkLnBsYXllckxldmVsLFxyXG4gICAgICB2bS5idWlsZC5oZXJvTGV2ZWwsXHJcbiAgICAgIHZtLmJ1aWxkLmpvYixcclxuICAgICAgdm0uYnVpbGQuZGFtYWdlVHlwZSxcclxuICAgICAgdm0uYnVpbGQuZWxlbWVudCxcclxuICAgICAgdm0uYnVpbGQuc2Vjb25kYXJ5RWxlbWVudCxcclxuICAgICAgdm0uYnVpbGQuZW5lbXlTdGF0Q2FwcywgXHJcbiAgICAgIHZtLmJ1aWxkLnBsYXllclN0YXRDYXBzLCBcclxuICAgICAgdm0uYnVpbGQuY29udmVyc2lvbnMsIFxyXG4gICAgICB2bS5idWlsZC5iYXNlU3RhdHMsIFxyXG4gICAgICB2bS5idWlsZC5oZXJvU3RhdHMpO1xyXG4gICAgICBcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvYnVpbGQvJyArIG5ld0dyb3VwTmFtZSk7XHJcbiAgfVxyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignYnVpbGRJdGVtQ3RybCcsXHJcblxyXG5bJyR0aW1lb3V0Jywnc3RhdEhlbHBlcicsJ3NhdmVIZWxwZXInLCdoQ29kZVZhbHVlcycsXHJcbmZ1bmN0aW9uKCR0aW1lb3V0LHN0YXRIZWxwZXIsc2F2ZUhlbHBlcixoQ29kZVZhbHVlcykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZtLnVwZGF0ZUl0ZW0gPSBzZXRGdWxsU3RhdHM7XHJcbiAgdm0uZ2VtU2xvdHMgPSBoQ29kZVZhbHVlcy5nZW1FeGNoYW5nZXM7XHJcbiAgdm0uZ2V0R2VtU2xvdE5hbWUgPSBnZXRHZW1TbG90TmFtZTtcclxuICBcclxuICBmdW5jdGlvbiBnZXRHZW1TbG90TmFtZShpdGVtKSB7XHJcbiAgICBpZihpdGVtLmdlbVNsb3QpIHtcclxuICAgICAgZm9yKHZhciBpPTA7aTx2bS5nZW1TbG90cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgaWYodm0uZ2VtU2xvdHNbaV0uaWQgPT0gaXRlbS5nZW1TbG90KSB7XHJcbiAgICAgICAgICByZXR1cm4gdm0uZ2VtU2xvdHNbaV0ubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2V0RnVsbFN0YXRzKCkge1xyXG4gICAgLy8gZnVsbCBzdGF0cyBhcmUgY2xlYXJlZCB3aGVuIHB1Ymxpc2hpbmcgYnVpbGRzXHJcbiAgICB2bS5pdGVtLmZ1bGxTdGF0cyA9IHZtLml0ZW0uc3RhdHM7XHJcbiAgICBcclxuICAgIGlmKHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cyAhPSBudWxsICYmIHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHZtLml0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyh2bS5pdGVtLmVuY2hhbnRtZW50U3RhdHMsIHZtLml0ZW0uZnVsbFN0YXRzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYodm0uaXRlbS5zcGFya1N0YXRzICE9IG51bGwgJiYgdm0uaXRlbS5zcGFya1N0YXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgdm0uaXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKHZtLml0ZW0uc3BhcmtTdGF0cywgdm0uaXRlbS5mdWxsU3RhdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUJ1aWxkSXRlbScsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgICAgZWRpdE1vZGU6ICc9ZWRpdE1vZGUnLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICAgIGNhbmNlbEVkaXQ6ICcmY2FuY2VsRWRpdCdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnYnVpbGRJdGVtQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLWl0ZW0uaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdCdWlsZExpc3RDdHJsJywgXHJcbiAgWyAnJHdpbmRvdycsJyRsb2NhdGlvbicsJyRyb3V0ZVBhcmFtcycsJyR0aW1lb3V0Jywnc2F2ZUhlbHBlcicsXHJcbiAgZnVuY3Rpb24oJHdpbmRvdywkbG9jYXRpb24sJHJvdXRlUGFyYW1zLCR0aW1lb3V0LHNhdmVIZWxwZXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIFxyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ3NhdmVkLWJhY2snO1xyXG4gICAgdGhpcy5zZXR1cEJ1aWxkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5zYXZlZEl0ZW1zID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICAgIHZtLmJ1aWxkTmFtZXMgPSBPYmplY3Qua2V5cyh2bS5zYXZlZEl0ZW1zKS5zb3J0KCk7XHJcbiAgICAgIHZtLmJ1aWxkcyA9IFtdO1xyXG4gICAgICBmb3IodmFyIGk9MDtpPHZtLmJ1aWxkTmFtZXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgIHZtLmJ1aWxkcy5wdXNoKHtcclxuICAgICAgICAgIG5hbWU6IHZtLmJ1aWxkTmFtZXNbaV0sXHJcbiAgICAgICAgICBidWlsZDogdm0uc2F2ZWRJdGVtc1t2bS5idWlsZE5hbWVzW2ldXSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXR1cEJ1aWxkcygpO1xyXG4gICAgXHJcbiAgICBpZignYnVpbGROYW1lJyBpbiAkcm91dGVQYXJhbXMpIHtcclxuICAgICAgaWYoJHJvdXRlUGFyYW1zLmJ1aWxkTmFtZSBpbiB2bS5zYXZlZEl0ZW1zKSB7XHJcbiAgICAgICAgaWYoJHJvdXRlUGFyYW1zLmJ1aWxkTmFtZSAhPSB0aGlzLmN1cnJlbnRHcm91cCkge1xyXG4gICAgICAgICAgdGhpcy5jdXJyZW50R3JvdXAgPSAkcm91dGVQYXJhbXMuYnVpbGROYW1lO1xyXG4gICAgICAgICAgc2F2ZUhlbHBlci5zYXZlQnVpbGRTZWxlY3Rpb24odGhpcy5jdXJyZW50R3JvdXAsIHRoaXMuc2F2ZWRJdGVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYnVpbGRzLycpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuY3VycmVudEdyb3VwICYmIHRoaXMuY3VycmVudEdyb3VwIGluIHRoaXMuc2F2ZWRJdGVtcykge1xyXG4gICAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkLycgKyB0aGlzLmN1cnJlbnRHcm91cCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5jdXJyZW50R3JvdXAgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZih0aGlzLmN1cnJlbnRHcm91cCkge1xyXG4gICAgICAkd2luZG93LmRvY3VtZW50LnRpdGxlID0gJ2RuZ2VhcnNpbSB8ICcgKyB0aGlzLmN1cnJlbnRHcm91cDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAkd2luZG93LmRvY3VtZW50LnRpdGxlID0gJ2RuZ2VhcnNpbSB8IEJVSUxEUyc7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5hbnlJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zYXZlZEl0ZW1zKS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY3JlYXRlR3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgJGxvY2F0aW9uLnBhdGgoJy9uZXctYnVpbGQnKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdm0uc2V0dXBCdWlsZHMoKTtcclxuICAgICAgJHRpbWVvdXQoKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ2NoYW5nZScpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgdGhpcy50b2dnbGVHcm91cCA9IGZ1bmN0aW9uKGJ1aWxkTmFtZSkge1xyXG4gICAgICBzYXZlSGVscGVyLnNhdmVCdWlsZFNlbGVjdGlvbihidWlsZE5hbWUsIHRoaXMuc2F2ZWRJdGVtcyk7XHJcbiAgICAgICRsb2NhdGlvbi51cmwoJy9idWlsZC8nICsgYnVpbGROYW1lKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdGhpcy5wdWJsaXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICRsb2NhdGlvbi51cmwoJy9wdWJsaXNoJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRoaXMuc2VhcmNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICRsb2NhdGlvbi51cmwoJy9idWlsZC1zZWFyY2gnKTtcclxuICAgIH1cclxuICB9XVxyXG4pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdidWlsZFN0YXRzQ3RybCcsXHJcblxyXG5bJyRyb3V0ZVBhcmFtcycsJyRsb2NhdGlvbicsJ2hDb2RlVmFsdWVzJywnc3RhdEhlbHBlcicsJ2l0ZW1DYXRlZ29yeScsXHJcbmZ1bmN0aW9uKCRyb3V0ZVBhcmFtcywkbG9jYXRpb24saENvZGVWYWx1ZXMsc3RhdEhlbHBlcixpdGVtQ2F0ZWdvcnkpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1CdWlsZFN0YXRzJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBzdGF0czogJz1zdGF0cycsXHJcbiAgICAgIGJ1aWxkOiAnPWJ1aWxkJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnYnVpbGRTdGF0c0N0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnc3RhdHNDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLXN0YXRzLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignYnVpbGRTdW1tYXJ5Q3RybCcsXHJcblxyXG5bJyRyb3V0ZVBhcmFtcycsJyRsb2NhdGlvbicsJ2hDb2RlVmFsdWVzJywnc3RhdEhlbHBlcicsJ2l0ZW1DYXRlZ29yeScsXHJcbmZ1bmN0aW9uKCRyb3V0ZVBhcmFtcywkbG9jYXRpb24saENvZGVWYWx1ZXMsc3RhdEhlbHBlcixpdGVtQ2F0ZWdvcnkpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB0aGlzLnN0YXRzID0gc3RhdEhlbHBlci5nZXRCdWlsZFN0YXRzKHRoaXMuYnVpbGQpO1xyXG4gIHRoaXMuaXRlbXNCeUNhdGVnb3J5ID0gaXRlbUNhdGVnb3J5LmdldEl0ZW1zQnlDYXRlZ29yeSh0aGlzLmJ1aWxkLml0ZW1zKTtcclxuICBcclxuICB0aGlzLmdldFNhdmVEYXRlID0gZnVuY3Rpb24oZ3JvdXApIHtcclxuICAgIGlmKHZtLmJ1aWxkLmxhc3RVcGRhdGUgPiAwKSB7XHJcbiAgICAgIHZhciBsYXN0VXBkYXRlID0gbmV3IERhdGUodm0uYnVpbGQubGFzdFVwZGF0ZSk7XHJcbiAgICAgIHJldHVybiBsYXN0VXBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmdldFNhdmVUaW1lID0gZnVuY3Rpb24oZ3JvdXApIHtcclxuICAgIGlmKHZtLmJ1aWxkLmxhc3RVcGRhdGUgPiAwKSB7XHJcbiAgICAgIHZhciBsYXN0VXBkYXRlID0gbmV3IERhdGUodm0uYnVpbGQubGFzdFVwZGF0ZSk7XHJcbiAgICAgIHJldHVybiBsYXN0VXBkYXRlLnRvTG9jYWxlVGltZVN0cmluZygpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEJ1aWxkU3VtbWFyeSA9IGZ1bmN0aW9uKGdyb3VwKSB7XHJcbiAgICB2YXIgc3VtbWFyeSA9ICcnO1xyXG4gICAgXHJcbiAgICB2YXIgdHlwZUNvdW50cyA9IHt9O1xyXG4gICAgdmFyIGNhc2hJdGVtcyA9IDA7XHJcbiAgICB2YXIgdGl0bGVzID0gMDtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5pdGVtc0J5Q2F0ZWdvcnksIGZ1bmN0aW9uKGl0ZW1zQnlUeXBlLCB0eXBlKSB7XHJcbiAgICAgIGlmKGl0ZW1zQnlUeXBlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBpZihzdW1tYXJ5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHN1bW1hcnkgKz0gJywgJztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VtbWFyeSArPSBpdGVtc0J5VHlwZS5sZW5ndGggKyAnICcgKyB0eXBlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHN1bW1hcnk7XHJcbiAgfVxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltQnVpbGRTdW1tYXJ5JywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBidWlsZE5hbWU6ICc9YnVpbGROYW1lJyxcclxuICAgICAgYnVpbGQ6ICc9YnVpbGQnXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2J1aWxkU3VtbWFyeUN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnYnVpbGRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLXN1bW1hcnkuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdCdWlsZFRhbGlzbWFuc0N0cmwnLFxyXG5cclxuWyckd2luZG93JywnJGxvY2F0aW9uJywnJHJvdXRlUGFyYW1zJywnJHRpbWVvdXQnLCdzYXZlSGVscGVyJywnc3RhdEhlbHBlcicsJ2pvYnMnLCdoQ29kZVZhbHVlcycsJ2l0ZW1Db2x1bW5zVG9Mb2FkJywnY2hhcmFjdGVyJyxcclxuZnVuY3Rpb24oJHdpbmRvdywkbG9jYXRpb24sJHJvdXRlUGFyYW1zLCR0aW1lb3V0LHNhdmVIZWxwZXIsc3RhdEhlbHBlcixqb2JzLGhDb2RlVmFsdWVzLGl0ZW1Db2x1bW5zVG9Mb2FkLGNoYXJhY3Rlcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gICR3aW5kb3cuZG9jdW1lbnQudGl0bGUgPSAnZG5nZWFyc2ltIHwgVEFMSVNNQU5TJztcclxuICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gIFxyXG4gIHRoaXMuc2F2ZWRJdGVtcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gIHRoaXMuZ3JvdXBOYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuc2F2ZWRJdGVtcyk7XHJcbiAgaWYoIXRoaXMuZ3JvdXBOYW1lcykge1xyXG4gICAgdGhpcy5ncm91cE5hbWVzID0gW107XHJcbiAgfVxyXG4gIGlmKHRoaXMuZ3JvdXBOYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICB0aGlzLmdyb3VwTmFtZSA9IHNhdmVIZWxwZXIuZ2V0Q3VycmVudEJ1aWxkKCk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdGhpcy5ncm91cE5hbWUgPSBudWxsO1xyXG4gIH1cclxuICBcclxuICBpZighdGhpcy5ncm91cE5hbWUgfHwgISh0aGlzLmdyb3VwTmFtZSBpbiB0aGlzLnNhdmVkSXRlbXMpKSB7XHJcbiAgICBpZih0aGlzLmdyb3VwTmFtZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICB0aGlzLmdyb3VwTmFtZSA9IHRoaXMuZ3JvdXBOYW1lc1swXTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgaWYoIXRoaXMuZ3JvdXBOYW1lKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2Fubm90IGZpbmQgYnVpbGQnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRHcm91cENhbGNTdGF0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodGhpcy5ncm91cENhbGNTdGF0cyA9PSBudWxsKSB7XHJcbiAgICAgIHZhciBncm91cCA9IHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXTtcclxuICAgICAgaWYoZ3JvdXApIHtcclxuICAgICAgICB0aGlzLmdyb3VwQ2FsY1N0YXRzID0gc3RhdEhlbHBlci5nZXRDYWxjdWxhdGVkU3RhdHNGcm9tSXRlbXMoZ3JvdXAsIGdyb3VwLml0ZW1zKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcy5ncm91cENhbGNTdGF0cztcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRCdWlsZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5waWNrdXAgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgdm0uc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xyXG4gICAgXHJcbiAgICB2bS5yZXBsYWNlSFBBZmZlY3RBbW91bnQgPSBbXTtcclxuICAgIHZtLnJlcGxhY2VNRG1nQWZmZWN0QW1vdW50ID0gW107XHJcbiAgICB2bS5yZXBsYWNlUERtZ0FmZmVjdEFtb3VudCA9IFtdO1xyXG4gICAgdm0ucmVwbGFjZUF2Z0RtZ0FmZmVjdEFtb3VudCA9IFtdO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBzYXZlR3JvdXAoKSB7XHJcbiAgICBzYXZlSGVscGVyLnNhdmVCdWlsZFNlbGVjdGlvbih2bS5ncm91cE5hbWUsIHZtLnNhdmVkSXRlbXMpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmhlYWRlcnMgPSBbXHJcbiAgICAnKzEwMCUnLFxyXG4gICAgJys3NSUnLFxyXG4gICAgJysyNSUnLFxyXG4gICAgJyswJScsXHJcbiAgICBdO1xyXG4gIFxyXG4gIHRoaXMuc3VtbWFyeVN0YXRJZHMgPSBbXTtcclxuICBmb3IodmFyIGlkIGluIGhDb2RlVmFsdWVzLnN0YXRzKSB7XHJcbiAgICBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uc3VtbWFyeURpc3BsYXkpIHtcclxuICAgICAgdGhpcy5zdW1tYXJ5U3RhdElkcy5wdXNoKGlkKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5wY0luZGV4ZXMgPSB7fTtcclxuICB0aGlzLnBjSW5kZXhlc1snMTAwJ10gPSAwO1xyXG4gIHRoaXMucGNJbmRleGVzWyc3NSddID0gMTtcclxuICB0aGlzLnBjSW5kZXhlc1snMjUnXSA9IDI7XHJcbiAgdGhpcy5wY0luZGV4ZXNbJzAnXSA9IDM7XHJcbiAgXHJcbiAgdGhpcy5zZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgXHJcbiAgdGhpcy5yb3dzID0gW107XHJcbiAgXHJcbiAgdGhpcy51cGRhdGVSb3dzID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5yb3dzID0gW107XHJcbiAgICAgICAgXHJcbiAgICBhbmd1bGFyLmZvckVhY2godm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLml0ZW1zLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICBpZihpdGVtLnR5cGVOYW1lID09ICd0YWxpc21hbicpIHtcclxuICAgICAgICB2YXIgcGNJbmRleCA9IHZtLnBjSW5kZXhlc1tpdGVtLmVuY2hhbnRtZW50TnVtXTtcclxuICAgICAgICBpZighcGNJbmRleCAmJiBwY0luZGV4ICE9IDApIHtcclxuICAgICAgICAgIHBjSW5kZXggPSAzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB2YXIgcm93SW5kZXggPSAwO1xyXG4gICAgICAgIGZvcig7Oykge1xyXG4gICAgICAgICAgaWYoIXZtLnJvd3Nbcm93SW5kZXhdKSB7XHJcbiAgICAgICAgICAgIHZtLnJvd3Nbcm93SW5kZXhdID0gdm0ubWFrZUZha2VDZWxscygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZih2bS5yb3dzW3Jvd0luZGV4XVtwY0luZGV4XS5pbmRleCA8IDApIHtcclxuICAgICAgICAgICAgaWYoIWl0ZW0uZW5jaGFudG1lbnROdW0pIHtcclxuICAgICAgICAgICAgICBpdGVtLmVuY2hhbnRtZW50TnVtID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB2bS5tYWtlQ2VsbChpdGVtLCBpbmRleCk7XHJcbiAgICAgICAgICAgIHZtLnJvd3Nbcm93SW5kZXhdW3BjSW5kZXhdID0gZGF0YTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcm93SW5kZXgrKztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYodm0ucm93cy5sZW5ndGggPCAzKSB7XHJcbiAgICAgIHZtLnJvd3Nbdm0ucm93cy5sZW5ndGgrMV0gPSB2bS5tYWtlRmFrZUNlbGxzKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICB0aGlzLm1ha2VGYWtlQ2VsbHMgPSBmdW5jdGlvbihudW0pIHtcclxuICAgIHJldHVybiBbdm0ubWFrZUNlbGwoe2VuY2hhbnRtZW50TnVtOjEwMH0sLTEpLHZtLm1ha2VDZWxsKHtlbmNoYW50bWVudE51bTo3NX0sLTIpLHZtLm1ha2VDZWxsKHtlbmNoYW50bWVudE51bToyNX0sLTMpLHZtLm1ha2VDZWxsKHtlbmNoYW50bWVudE51bTowfSwtNCldO1xyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5tYWtlQ2VsbCA9IGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICByZXR1cm4geyBpdGVtOiBpdGVtLCBpbmRleDogaW5kZXggfTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuY2xpY2sgPSBmdW5jdGlvbihjb2wpIHtcclxuICAgIGlmKHZtLnNlbGVjdGVkSW5kZXggPT0gLTEpIHtcclxuICAgICAgaWYoY29sLmluZGV4ID49IDApIHtcclxuICAgICAgICB2bS5waWNrdXAoY29sLmluZGV4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZtLm1vdmUoY29sKTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHRoaXMubW92ZSA9IGZ1bmN0aW9uKGNvbCkge1xyXG4gICAgXHJcbiAgICB2YXIgaXRlbXMgPSB2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uaXRlbXM7XHJcbiAgICBpZihjb2wuaW5kZXggPj0gMCkge1xyXG4gICAgICB2YXIgc3dhcEVuY2hhbnRtZW50TnVtYmVyID0gY29sLml0ZW0uZW5jaGFudG1lbnROdW07XHJcbiAgICAgIFxyXG4gICAgICB2bS5zZXRUYWxpc21hbihjb2wuaXRlbSwgaXRlbXNbdm0uc2VsZWN0ZWRJbmRleF0uZW5jaGFudG1lbnROdW0pO1xyXG4gICAgICB2bS5zZXRUYWxpc21hbihpdGVtc1t2bS5zZWxlY3RlZEluZGV4XSwgc3dhcEVuY2hhbnRtZW50TnVtYmVyKTtcclxuICAgICAgaXRlbXNbY29sLmluZGV4XSA9IGl0ZW1zW3ZtLnNlbGVjdGVkSW5kZXhdO1xyXG4gICAgICBpdGVtc1t2bS5zZWxlY3RlZEluZGV4XSA9IGNvbC5pdGVtO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZhciBpdGVtID0gaXRlbXNbdm0uc2VsZWN0ZWRJbmRleF07XHJcbiAgICAgIHZtLnNldFRhbGlzbWFuKGl0ZW0sIGNvbC5pdGVtLmVuY2hhbnRtZW50TnVtKTtcclxuICAgICAgaXRlbXMuc3BsaWNlKHZtLnNlbGVjdGVkSW5kZXgsIDEpO1xyXG4gICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZtLmdyb3VwQ2FsY1N0YXRzID0gbnVsbDtcclxuICAgIHZtLnNlbGVjdGVkSW5kZXggPSAtMTtcclxuICAgIHZtLnVwZGF0ZVJvd3MoKTtcclxuICAgIHZtLnJlcGxhY2VBZmZlY3RBbW91bnQgPSB7fTtcclxuICAgICR0aW1lb3V0KCk7XHJcbiAgfTtcclxuICBcclxuICB0aGlzLnNldFRhbGlzbWFuID0gZnVuY3Rpb24oaXRlbSwgbmV3RW5oYW5jZW1lbnROdW0pIHtcclxuICAgIHZhciBleHRyYVN0YXRzID0gW107XHJcbiAgICBhbmd1bGFyLmZvckVhY2goaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgaWYobmV3RW5oYW5jZW1lbnROdW0pIHtcclxuICAgICAgICBleHRyYVN0YXRzLnB1c2goe2lkOiBzdGF0LmlkLCBtYXg6IHN0YXQubWF4ICogKG5ld0VuaGFuY2VtZW50TnVtLzEwMCl9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGl0ZW0uZW5jaGFudG1lbnRTdGF0cyA9IGV4dHJhU3RhdHM7XHJcbiAgICBpdGVtLmVuY2hhbnRtZW50TnVtID0gbmV3RW5oYW5jZW1lbnROdW07XHJcbiAgICBcclxuICAgIGl0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhpdGVtLmVuY2hhbnRtZW50U3RhdHMsIGl0ZW0uc3RhdHMpO1xyXG4gIH07XHJcbiAgXHJcbiAgICBcclxuICB0aGlzLnJlcGxhY2VBZmZlY3RBbW91bnQgPSB7fTtcclxuICB0aGlzLmdldFJlcGxhY2VBZmZlY3RBbW91bnQgPSBmdW5jdGlvbihzdGF0SWQsIGl0ZW1JbmRleCwgaXRlbSkge1xyXG4gICAgdGhpcy5pbml0UmVwbGFjZUFmZmVjdHMoaXRlbUluZGV4LCBpdGVtKTtcclxuICAgIGlmKHRoaXMucmVwbGFjZUFmZmVjdEFtb3VudFtpdGVtSW5kZXhdKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlcGxhY2VBZmZlY3RBbW91bnRbaXRlbUluZGV4XVtzdGF0SWRdO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5pbml0UmVwbGFjZUFmZmVjdHMgPSBmdW5jdGlvbihpdGVtSW5kZXgsIGl0ZW0pIHtcclxuICAgIGlmKHZtLnJlcGxhY2VBZmZlY3RBbW91bnRbaXRlbUluZGV4XSB8fCB2bS5zZWxlY3RlZEluZGV4ID09IC0xKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMucmVwbGFjZUFmZmVjdEFtb3VudFtpdGVtSW5kZXhdID0ge307XHJcbiAgICBcclxuICAgIHZhciBncm91cCA9IHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXTtcclxuICAgIHZhciBpdGVtMiA9IGdyb3VwLml0ZW1zW3ZtLnNlbGVjdGVkSW5kZXhdO1xyXG4gICAgXHJcbiAgICB2YXIgZXh0cmFTdGF0cyA9IFtdO1xyXG4gICAgdmFyIGZ1bGxTdGF0czEgPSBbXTtcclxuICAgIGlmKGl0ZW0uc3RhdHMpIHtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW0uc3RhdHMsIGZ1bmN0aW9uKHN0YXQsIGluZGV4KSB7XHJcbiAgICAgICAgZXh0cmFTdGF0cy5wdXNoKHtpZDogc3RhdC5pZCwgbWF4OiBzdGF0Lm1heCAqIChpdGVtMi5lbmNoYW50bWVudE51bS8xMDApfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBmdWxsU3RhdHMxID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhleHRyYVN0YXRzLCBpdGVtLnN0YXRzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZXh0cmFTdGF0cyA9IFtdO1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKGl0ZW0yLnN0YXRzLCBmdW5jdGlvbihzdGF0LCBpbmRleCkge1xyXG4gICAgICBleHRyYVN0YXRzLnB1c2goe2lkOiBzdGF0LmlkLCBtYXg6IHN0YXQubWF4ICogKGl0ZW0uZW5jaGFudG1lbnROdW0vMTAwKX0pO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgZnVsbFN0YXRzMiA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoZXh0cmFTdGF0cywgaXRlbTIuc3RhdHMpO1xyXG5cclxuICAgIHZhciBuZXdJdGVtcyA9IFt7c3RhdHM6IGZ1bGxTdGF0czF9LCB7c3RhdHM6IGZ1bGxTdGF0czJ9XTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cC5pdGVtcywgZnVuY3Rpb24oZ0l0ZW0gLCBpbmRleCkge1xyXG4gICAgICBpZihpdGVtICE9PSBnSXRlbSAmJiBpdGVtMiAhPT0gZ0l0ZW0pIHtcclxuICAgICAgICBuZXdJdGVtcy5wdXNoKGdJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHZhciBuZXdTdGF0cyA9IHN0YXRIZWxwZXIuZ2V0Q2FsY3VsYXRlZFN0YXRzRnJvbUl0ZW1zKGdyb3VwLCBuZXdJdGVtcyk7XHJcbiAgICB2YXIgb3JpZ1N0YXRzID0gdm0uZ2V0R3JvdXBDYWxjU3RhdHMoKTtcclxuICAgIFxyXG4gICAgZm9yKHZhciBpZCBpbiBoQ29kZVZhbHVlcy5zdGF0cykge1xyXG4gICAgICBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uc3VtbWFyeURpc3BsYXkpIHtcclxuICAgICAgICB2bS5yZXBsYWNlQWZmZWN0QW1vdW50W2l0ZW1JbmRleF1baWRdID0gY2FsY1N0YXRQZXJjZW50KHZtLmdldFN0YXQoaWQsIG5ld1N0YXRzKS5tYXgsIHZtLmdldFN0YXQoaWQsIG9yaWdTdGF0cykubWF4KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5nZXRTdGF0TmFtZSA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICB2YXIgcmV0VmFsID0gJyc7XHJcbiAgICBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uZWxlbWVudCA9PSAncHJpbWFyeScpIHtcclxuICAgICAgdmFyIGVsZUlkID0gMDtcclxuICAgICAgaWYodm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLmVsZW1lbnQpIHtcclxuICAgICAgICBlbGVJZCA9IHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXS5lbGVtZW50LmlkO1xyXG4gICAgICB9XHJcbiAgICAgIHJldFZhbCArPSBoQ29kZVZhbHVlcy5lbGVtZW50c1tlbGVJZF0ubmFtZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoaENvZGVWYWx1ZXMuc3RhdHNbaWRdLmVsZW1lbnQgPT0gJ3NlY29uZGFyeScpIHtcclxuICAgICAgdmFyIGVsZUlkID0gMDtcclxuICAgICAgaWYodm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLnNlY29uZGFyeUVsZW1lbnQpIHtcclxuICAgICAgICBlbGVJZCA9IHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXS5zZWNvbmRhcnlFbGVtZW50LmlkO1xyXG4gICAgICB9XHJcbiAgICAgIHJldFZhbCArPSBoQ29kZVZhbHVlcy5lbGVtZW50c1tlbGVJZF0ubmFtZTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXRWYWwgKyAnICcgKyBoQ29kZVZhbHVlcy5zdGF0c1tpZF0ubmFtZTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuZ2V0U3RhdCA9IGZ1bmN0aW9uKGlkLCBzdGF0cykge1xyXG4gICAgdmFyIGxlbiA9IHN0YXRzLmxlbmd0aDtcclxuICAgIGZvcih2YXIgaT0wO2k8bGVuOysraSkge1xyXG4gICAgICBpZihzdGF0c1tpXS5pZCA9PSBpZCkge1xyXG4gICAgICAgIHJldHVybiBzdGF0c1tpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtpZDogaWQsIG1heDowfTtcclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGNhbGNTdGF0UGVyY2VudChuZXdWYWwsIG9yaWdWYWwpIHtcclxuICAgIGlmKG5ld1ZhbCAmJiBvcmlnVmFsKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKDEwMDAwICogKDEgLSAob3JpZ1ZhbCAvIG5ld1ZhbCkpKSAvIDEwMDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5zYXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBzYXZlSGVscGVyLnVwZGF0ZWRTYXZlZEl0ZW1zKHZtLmdyb3VwTmFtZSwgdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLml0ZW1zKTtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvYnVpbGQvJyArIHZtLmdyb3VwTmFtZSk7XHJcbiAgfTtcclxuICBcclxuICB0aGlzLnVwZGF0ZVJvd3MoKTtcclxuICBcclxufV0pOyAiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdidWlsZEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJyRsb2NhdGlvbicsJ2hDb2RlVmFsdWVzJywnc3RhdEhlbHBlcicsJ2l0ZW1DYXRlZ29yeScsJ3NhdmVIZWxwZXInLFxyXG5mdW5jdGlvbigkdGltZW91dCwkbG9jYXRpb24saENvZGVWYWx1ZXMsc3RhdEhlbHBlcixpdGVtQ2F0ZWdvcnksc2F2ZUhlbHBlcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHRoaXMuc3RhdHMgPSBzdGF0SGVscGVyLmdldEJ1aWxkU3RhdHModGhpcy5idWlsZCk7XHJcbiAgXHJcbiAgdmFyIHNlbGVjdGVkQ2F0ZWdvcnkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRJdGVtQ2F0ZWdvcnknKTtcclxuICB0aGlzLmNhdGVnb3J5ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZShzZWxlY3RlZENhdGVnb3J5KTtcclxuICBpZighdGhpcy5jYXRlZ29yeSB8fCB0aGlzLmNhdGVnb3J5LmhpZGVJbkJ1aWxkKSB7XHJcbiAgICBzZWxlY3RlZENhdGVnb3J5ID0gJ3RpdGxlcyc7XHJcbiAgICB0aGlzLmNhdGVnb3J5ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZSgndGl0bGVzJyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0Q2F0ZWdvcnlJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGl0ZW1zQnlDYXQgPSBpdGVtQ2F0ZWdvcnkuZ2V0SXRlbXNCeUNhdGVnb3J5KHRoaXMuYnVpbGQuaXRlbXMpO1xyXG4gICAgaWYodm0uY2F0ZWdvcnkubmFtZSBpbiBpdGVtc0J5Q2F0KSB7XHJcbiAgICAgIHJldHVybiBpdGVtc0J5Q2F0W3ZtLmNhdGVnb3J5Lm5hbWVdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICB2YXIgc3ViQ2F0cyA9IHt9O1xyXG4gIHZhciBzdWJDYXRDYXROYW1lID0gJyc7XHJcbiAgdGhpcy5nZXRTdWJDYXRlZ29yaWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZihzdWJDYXRDYXROYW1lICE9IHZtLmNhdGVnb3J5Lm5hbWUpIHtcclxuICAgICAgc3ViQ2F0cyA9IHt9O1xyXG4gICAgICBzdWJDYXRDYXROYW1lID0gdm0uY2F0ZWdvcnkubmFtZTtcclxuICAgICAgdmFyIHN1YkNhdExpc3QgPSBbXTtcclxuXHJcbiAgICAgIHZhciBpdGVtcyA9IHZtLmJ1aWxkLml0ZW1zLnNvcnQoZnVuY3Rpb24oaXRlbTEsIGl0ZW0yKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0xLmV4Y2hhbmdlVHlwZSAtIGl0ZW0yLmV4Y2hhbmdlVHlwZTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmKHZtLmNhdGVnb3J5Lm5hbWUgPT0gJ2luY3JlYXNpbmcgZ2VtcycpIHtcclxuICAgICAgICBzdWJDYXRMaXN0ID0gXy5maWx0ZXIoaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmluY3JlYXNpbmdHZW1TbG90cyA+IDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdvZmZlbnNpdmUgZ2VtcycpIHtcclxuICAgICAgICBzdWJDYXRMaXN0ID0gXy5maWx0ZXIoaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLm9mZmVuc2l2ZUdlbVNsb3RzID4gMDtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBfLmVhY2goc3ViQ2F0TGlzdCwgZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIGlmKCEoaXRlbS5leGNoYW5nZVR5cGUgaW4gc3ViQ2F0cykpIHtcclxuICAgICAgICAgIHN1YkNhdHNbaXRlbS5leGNoYW5nZVR5cGVdID0ge1xyXG4gICAgICAgICAgICBuYW1lczogW10sXHJcbiAgICAgICAgICAgIHNsb3RzOiAwLFxyXG4gICAgICAgICAgICBleGNoYW5nZVR5cGU6IGl0ZW0uZXhjaGFuZ2VUeXBlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3ViQ2F0c1tpdGVtLmV4Y2hhbmdlVHlwZV0ubmFtZXMucHVzaChpdGVtLm5hbWUpO1xyXG4gICAgICAgIGlmKHZtLmNhdGVnb3J5Lm5hbWUgPT0gJ2luY3JlYXNpbmcgZ2VtcycpIHtcclxuICAgICAgICAgIHN1YkNhdHNbaXRlbS5leGNoYW5nZVR5cGVdLnNsb3RzICs9IGl0ZW0uaW5jcmVhc2luZ0dlbVNsb3RzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdvZmZlbnNpdmUgZ2VtcycpIHtcclxuICAgICAgICAgIHN1YkNhdHNbaXRlbS5leGNoYW5nZVR5cGVdLnNsb3RzICs9IGl0ZW0ub2ZmZW5zaXZlR2VtU2xvdHM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgc3ViQ2F0c1swXSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBzdWJDYXRzO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5nZXROdW1UYWtlbiA9IGZ1bmN0aW9uKHN1YkNhdCkge1xyXG4gICAgdmFyIHJldFZhbCA9IDA7XHJcbiAgICB2YXIgZ2VtRXhjaGFuZ2UgPSBfLmZpbmQoaENvZGVWYWx1ZXMuZ2VtRXhjaGFuZ2VzLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgIHJldHVybiBlLmV4Y2hhbmdlID09IHN1YkNhdC5leGNoYW5nZVR5cGU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZihnZW1FeGNoYW5nZSkge1xyXG4gICAgICB2YXIgaXRlbXMgPSB0aGlzLmdldENhdGVnb3J5SXRlbXMoKTtcclxuICAgICAgXy5lYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgaWYoaXRlbS5nZW1TbG90ID09IGdlbUV4Y2hhbmdlLmlkKSB7XHJcbiAgICAgICAgICArK3JldFZhbDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldFZhbDtcclxuICB9XHJcblxyXG4gIHRoaXMuaXNJblN1YkNhdCA9IGZ1bmN0aW9uKGl0ZW0sIHN1YkNhdCkge1xyXG4gICAgaWYoIXN1YkNhdCAmJiAhaXRlbS5nZW1TbG90KSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZhciBnZW1FeGNoYW5nZSA9IF8uZmluZChoQ29kZVZhbHVlcy5nZW1FeGNoYW5nZXMsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gZS5pZCA9PSBpdGVtLmdlbVNsb3Q7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYoIXN1YkNhdCAmJiBnZW1FeGNoYW5nZSkge1xyXG4gICAgICAgIC8vIGNoZWNrIGZvciBpbnZhbGlkIHNsb3RcclxuICAgICAgICB2YXIgYWxsU3ViQ2F0SXRlbXMgPSB0aGlzLmdldFN1YkNhdGVnb3JpZXMoKTtcclxuICAgICAgICB2YXIgZm91bmRTdWJDYXRJdGVtID0gXy5maW5kKGFsbFN1YkNhdEl0ZW1zLCBmdW5jdGlvbihzdWJDYXRJdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gc3ViQ2F0SXRlbSAhPSBudWxsICYmIGdlbUV4Y2hhbmdlLmV4Y2hhbmdlID09IHN1YkNhdEl0ZW0uZXhjaGFuZ2VUeXBlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZighZm91bmRTdWJDYXRJdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihzdWJDYXQgJiYgZ2VtRXhjaGFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gZ2VtRXhjaGFuZ2UuZXhjaGFuZ2UgPT0gc3ViQ2F0LmV4Y2hhbmdlVHlwZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMuY2FuTW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHZtLmNhdGVnb3J5Lm5hbWUgPT0gJ2luY3JlYXNpbmcgZ2VtcycgfHwgdm0uY2F0ZWdvcnkubmFtZSA9PSAnb2ZmZW5zaXZlIGdlbXMnO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5nZXRHZW1TbG90ID0gZnVuY3Rpb24oc3ViQ2F0KSB7XHJcbiAgICBpZihzdWJDYXQpIHtcclxuICAgICAgdmFyIGdlbUV4Y2hhbmdlID0gXy5maW5kKGhDb2RlVmFsdWVzLmdlbUV4Y2hhbmdlcywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHJldHVybiBlLmV4Y2hhbmdlID09IHN1YkNhdC5leGNoYW5nZVR5cGU7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZ2VtRXhjaGFuZ2UuaWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aGlzLm1vdmUgPSBmdW5jdGlvbihtb3ZlSXRlbSwgZGVzdGluYXRpb24pIHtcclxuICAgIG1vdmVJdGVtLmdlbVNsb3QgPSB2bS5nZXRHZW1TbG90KGRlc3RpbmF0aW9uKTtcclxuICAgIHNhdmVIZWxwZXIudXBkYXRlZFNhdmVkSXRlbXModm0uYnVpbGROYW1lLCB2bS5idWlsZC5pdGVtcyk7XHJcbiAgICB2bS5oYW5kbGVDaGFuZ2UoKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRDYXRlZ29yaWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gaXRlbUNhdGVnb3J5LmNhdGVnb3JpZXM7XHJcbiAgfVxyXG4gICAgXHJcbiAgdGhpcy5zZXRTZWxlY3RlZENhdGVnb3J5ID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHRoaXMuY2F0ZWdvcnkgPSBpdGVtQ2F0ZWdvcnkuYnlOYW1lKHZhbHVlKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWxlY3RlZEl0ZW1DYXRlZ29yeScsIHZhbHVlKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRTYXZlRGF0ZSA9IGZ1bmN0aW9uKGdyb3VwKSB7XHJcbiAgICBpZih2bS5idWlsZC5sYXN0VXBkYXRlID4gMCkge1xyXG4gICAgICB2YXIgbGFzdFVwZGF0ZSA9IG5ldyBEYXRlKHZtLmJ1aWxkLmxhc3RVcGRhdGUpO1xyXG4gICAgICByZXR1cm4gbGFzdFVwZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRTYXZlVGltZSA9IGZ1bmN0aW9uKGdyb3VwKSB7XHJcbiAgICBpZih2bS5idWlsZC5sYXN0VXBkYXRlID4gMCkge1xyXG4gICAgICB2YXIgbGFzdFVwZGF0ZSA9IG5ldyBEYXRlKHZtLmJ1aWxkLmxhc3RVcGRhdGUpO1xyXG4gICAgICByZXR1cm4gbGFzdFVwZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5hbGxvd01vcmVJdGVtcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuICF2bS5jYXRlZ29yeS5tYXhDYXQgfHwgdGhpcy5nZXRDYXRlZ29yeUl0ZW1zKCkubGVuZ3RoIDwgdm0uY2F0ZWdvcnkubWF4Q2F0O1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEl0ZW1Db3VudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGl0ZW1Db3VudFRleHQgPSAnJztcclxuICAgIHZhciBhbGxJdGVtcyA9IHZtLmJ1aWxkLml0ZW1zO1xyXG4gICAgXHJcbiAgICBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdvZmZlbnNpdmUgZ2VtcycpIHtcclxuICAgICAgdmFyIG51bU9mZmVuc2l2ZVNsb3RzID0gMDtcclxuICAgICAgdmFyIG51bU9mZmVuc2l2ZUdlbXMgPSAwO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goYWxsSXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYoaXRlbS50eXBlTmFtZSA9PSB2bS5jYXRlZ29yeS5uYW1lKSB7XHJcbiAgICAgICAgICBudW1PZmZlbnNpdmVHZW1zKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXRlbS5vZmZlbnNpdmVHZW1TbG90cykge1xyXG4gICAgICAgICAgbnVtT2ZmZW5zaXZlU2xvdHMgKz0gaXRlbS5vZmZlbnNpdmVHZW1TbG90cztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgaXRlbUNvdW50VGV4dCA9IG51bU9mZmVuc2l2ZUdlbXMgKyAnIC8gJyArIG51bU9mZmVuc2l2ZVNsb3RzO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih2bS5jYXRlZ29yeS5uYW1lID09ICdpbmNyZWFzaW5nIGdlbXMnKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgdG90YWxJbmNyZWFzaW5nR2VtcyA9IDA7XHJcbiAgICAgIHZhciBudW1JbmNyZWFzaW5nU2xvdHMgPSAwO1xyXG4gICAgICB2YXIgbnVtSW5jcmVhc2luZ0dlbXMgPSB7fTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGFsbEl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmKGl0ZW0udHlwZU5hbWUgPT0gdm0uY2F0ZWdvcnkubmFtZSkge1xyXG4gICAgICAgICAgdmFyIGdlbVR5cGUgPSBpdGVtLnNwYXJrVHlwZUlkO1xyXG4gICAgICAgICAgaWYoIWdlbVR5cGUpIHtcclxuICAgICAgICAgICAgZ2VtVHlwZSA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKCEoZ2VtVHlwZSBpbiBudW1JbmNyZWFzaW5nR2VtcykpIHtcclxuICAgICAgICAgICAgbnVtSW5jcmVhc2luZ0dlbXNbZ2VtVHlwZV0gPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbnVtSW5jcmVhc2luZ0dlbXNbZ2VtVHlwZV0rKztcclxuICAgICAgICAgIHRvdGFsSW5jcmVhc2luZ0dlbXMrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpdGVtLmluY3JlYXNpbmdHZW1TbG90cykge1xyXG4gICAgICAgICAgbnVtSW5jcmVhc2luZ1Nsb3RzICs9IGl0ZW0uaW5jcmVhc2luZ0dlbVNsb3RzO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpdGVtQ291bnRUZXh0ID0gJydcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKG51bUluY3JlYXNpbmdHZW1zLCBmdW5jdGlvbihudW1iZXIsIGdlbVR5cGUpIHtcclxuICAgICAgICBpZihpdGVtQ291bnRUZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGl0ZW1Db3VudFRleHQgKz0gJysnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpdGVtQ291bnRUZXh0ICs9IG51bWJlcjtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpdGVtQ291bnRUZXh0ID0gdG90YWxJbmNyZWFzaW5nR2VtcyArICcgKCcgKyBpdGVtQ291bnRUZXh0ICsgJykgLyAnICsgbnVtSW5jcmVhc2luZ1Nsb3RzO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZhciBudW1JdGVtcyA9IDA7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChhbGxJdGVtcywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICBpZihpdGVtICYmIGl0ZW0udHlwZU5hbWUgPT0gdm0uY2F0ZWdvcnkubmFtZSkge1xyXG4gICAgICAgICAgbnVtSXRlbXMrKztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgaXRlbUNvdW50VGV4dCA9IG51bUl0ZW1zO1xyXG4gICAgICB2YXIgY2F0ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZSh2bS5jYXRlZ29yeS5uYW1lKTtcclxuICAgICAgaWYoY2F0ICYmICdudW1JdGVtVGV4dCcgaW4gY2F0KSB7XHJcbiAgICAgICAgaXRlbUNvdW50VGV4dCArPSAnIC8gJyArIGNhdC5udW1JdGVtVGV4dDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gaXRlbUNvdW50VGV4dDtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5uZXdDdXN0b20gPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBuZXdDdXN0b20gPSB7aWQ6IDAsIHR5cGVOYW1lOidjdXN0b20nLCBuYW1lOiAnbmV3IGN1c3RvbSBpdGVtJywgc3RhdHM6IFtdfTtcclxuICAgIHZtLmJ1aWxkLml0ZW1zID0gdm0uYnVpbGQuaXRlbXMuY29uY2F0KG5ld0N1c3RvbSk7XHJcbiAgICBzYXZlSGVscGVyLnVwZGF0ZWRTYXZlZEl0ZW1zKHZtLmJ1aWxkTmFtZSwgdm0uYnVpbGQuaXRlbXMpO1xyXG4gICAgdm0uaGFuZGxlQ2hhbmdlKCk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5zdGF0cyA9IHN0YXRIZWxwZXIuZ2V0QnVpbGRTdGF0cyh2bS5idWlsZCk7XHJcbiAgICBzdWJDYXRDYXROYW1lID0gJyc7XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmhhbmRsZUl0ZW1FZGl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBzYXZlSGVscGVyLnVwZGF0ZWRTYXZlZEl0ZW1zKHZtLmJ1aWxkTmFtZSwgdm0uYnVpbGQuaXRlbXMpO1xyXG4gICAgdm0uaGFuZGxlQ2hhbmdlKCk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuY2FuY2VsRWRpdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdm0ub25DaGFuZ2UoKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5jYW5FZGl0ID0gZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgcmV0dXJuIGl0ZW0udHlwZU5hbWUgPT0gJ2N1c3RvbScgfHwgaXRlbS50eXBlTmFtZSA9PSAnd2VhcG9ucycgfHwgaXRlbS50eXBlTmFtZSA9PSAnYXJtb3VyJyB8fCBpdGVtLnR5cGVOYW1lID09ICdvZmZlbnNpdmUgZ2VtcycgfHwgaXRlbS50eXBlTmFtZSA9PSAnaW5jcmVhc2luZyBnZW1zJztcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5yZW1vdmVJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgc3ViQ2F0Q2F0TmFtZSA9ICcnO1xyXG4gICAgaXRlbS5yZW1vdmVJdGVtID0gdHJ1ZTtcclxuICAgIHZhciBuZXdJdGVtTGlzdCA9IFtdO1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKHZtLmJ1aWxkLml0ZW1zLCBmdW5jdGlvbihnSXRlbSwgaW5kZXgpIHtcclxuICAgICAgaWYoZ0l0ZW0gJiYgIWdJdGVtLnJlbW92ZUl0ZW0pIHtcclxuICAgICAgICBuZXdJdGVtTGlzdC5wdXNoKGdJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdm0uYnVpbGQuaXRlbXMgPSBuZXdJdGVtTGlzdDtcclxuICAgIHNhdmVIZWxwZXIudXBkYXRlZFNhdmVkSXRlbXModm0uYnVpbGROYW1lLCBuZXdJdGVtTGlzdCk7XHJcbiAgICB2bS5oYW5kbGVDaGFuZ2UoKTtcclxuICB9XHJcbiAgXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1CdWlsZCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgYnVpbGROYW1lOiAnPWJ1aWxkTmFtZScsXHJcbiAgICAgIGJ1aWxkOiAnPWJ1aWxkJyxcclxuICAgICAgb25DaGFuZ2U6ICcmb25DaGFuZ2UnLFxyXG4gICAgICBzZXJ2ZXI6ICc9c2VydmVyJ1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdidWlsZEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnYnVpbGRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvYnVpbGRzL2J1aWxkLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignRGVsZXRlQnVpbGRDdHJsJyxcclxuXHJcblsnJGxvY2F0aW9uJywnJHJvdXRlUGFyYW1zJywnJHRpbWVvdXQnLCdzYXZlSGVscGVyJywnZG50RGF0YScsJ2pvYnMnLCdoQ29kZVZhbHVlcycsJ2l0ZW1Db2x1bW5zVG9Mb2FkJyxcclxuZnVuY3Rpb24oJGxvY2F0aW9uLCRyb3V0ZVBhcmFtcywkdGltZW91dCxzYXZlSGVscGVyLGRudERhdGEsam9icyxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHRoaXMubmV3R3JvdXAgPSB0cnVlO1xyXG4gIGlmKCduYW1lJyBpbiAkcm91dGVQYXJhbXMpIHtcclxuICAgICAgdGhpcy5uYW1lID0gJHJvdXRlUGFyYW1zLm5hbWU7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZGVsZXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBzYXZlSGVscGVyLmRlbGV0ZUJ1aWxkKHRoaXMubmFtZSk7XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkcy8nKTtcclxuICB9XHJcbiAgICBcclxufV0pOyAiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdFZGl0QnVpbGRDdHJsJywgZWRpdEJ1aWxkQ3RybCk7XHJcblxyXG5mdW5jdGlvbiBlZGl0QnVpbGRDdHJsKCR3aW5kb3csJGxvY2F0aW9uLCRyb3V0ZVBhcmFtcywkdGltZW91dCxzYXZlSGVscGVyLGRudERhdGEsam9icyxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCxjaGFyYWN0ZXIscmVnaW9uKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0uc2F2ZWRJdGVtcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gIHZtLmdyb3VwID0ge307XHJcbiAgdm0ubmV3R3JvdXAgPSB0cnVlO1xyXG4gIGlmKCdidWlsZE5hbWUnIGluICRyb3V0ZVBhcmFtcykge1xyXG4gICAgICB2bS5ncm91cE5hbWUgPSAkcm91dGVQYXJhbXMuYnVpbGROYW1lO1xyXG4gICAgICBpZih2bS5ncm91cE5hbWUgaW4gdm0uc2F2ZWRJdGVtcykge1xyXG4gICAgICAgIHZtLmdyb3VwID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdO1xyXG4gICAgICAgIHZtLm5ld0dyb3VwID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB2bS5ncm91cE5hbWUgPSAnJztcclxuICB9XHJcbiAgdm0ub2xkR3JvdXBOYW1lID0gdm0uZ3JvdXBOYW1lO1xyXG4gIHZtLmhlcm9TdGF0cyA9IFtdO1xyXG4gIHZtLmVsZW1lbnRzID0gaENvZGVWYWx1ZXMuZWxlbWVudHM7XHJcbiAgdm0uZGFtYWdlVHlwZXMgPSBoQ29kZVZhbHVlcy5kYW1hZ2VUeXBlcztcclxuICBcclxuICB2bS5pbml0RGFtYWdlVHlwZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodm0uam9iKSB7XHJcbiAgICAgIGlmKHZtLmdyb3VwLmRhbWFnZVR5cGUpIHtcclxuICAgICAgICB2bS5kYW1hZ2VUeXBlID0gdm0uZ3JvdXAuZGFtYWdlVHlwZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHZtLm5ld0dyb3VwICYmICdEYW1hZ2VUeXBlJyBpbiB2bS5qb2IuZCkge1xyXG4gICAgICAgIGlmKHZtLmpvYi5kLkRhbWFnZVR5cGUpIHtcclxuICAgICAgICAgIHZtLmRhbWFnZVR5cGUgPSBoQ29kZVZhbHVlcy5kYW1hZ2VUeXBlc1syXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB2bS5kYW1hZ2VUeXBlID0gaENvZGVWYWx1ZXMuZGFtYWdlVHlwZXNbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHZtLmRhbWFnZVR5cGUgPSBoQ29kZVZhbHVlcy5kYW1hZ2VUeXBlc1swXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdm0uaW5pdERlZmF1bHRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZGVmYXVsdEVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1swXTtcclxuICAgIHZhciBkZWZhdWx0U2Vjb25kYXJ5RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzBdO1xyXG5cclxuICAgIGlmKHZtLmpvYiAmJiB2bS5qb2IuZCkge1xyXG4gICAgICB2YXIgam9iTmFtZSA9IHZtLmpvYi5kLkVuZ2xpc2hOYW1lO1xyXG4gICAgICBpZihqb2JOYW1lID09ICdDUlVTQURFUycgfHwgam9iTmFtZSA9PSAnSU5RVUlTSVRPUicgfHwgam9iTmFtZSA9PSAnR1VBUkRJQU4nIHx8IGpvYk5hbWUgPT0gJ1NBSU5UJyB8fCBqb2JOYW1lID09ICdTSUxWRVJIVU5URVInIHx8IGpvYk5hbWUgPT0gJ1NUSU5HQlJFRVpFUicpIHtcclxuICAgICAgICBkZWZhdWx0RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzNdO1xyXG4gICAgICAgIGRlZmF1bHRTZWNvbmRhcnlFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbM107XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihqb2JOYW1lID09ICdSQVZFTicgfHwgam9iTmFtZSA9PSAnTUFKRVNUWScgfHwgam9iTmFtZSA9PSAnU09VTEVBVEVSJyB8fCBqb2JOYW1lID09ICdEQVJLU1VNTU9ORVInIHx8IGpvYk5hbWUgPT0gJ0FCWVNTV0FMS0VSJyB8fCBqb2JOYW1lID09ICdCTEFDS01BUkEnIHx8IGpvYk5hbWUgPT0gJ1BIWVNJQ0lBTicpIHtcclxuICAgICAgICBkZWZhdWx0RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzRdO1xyXG4gICAgICAgIGRlZmF1bHRTZWNvbmRhcnlFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbNF07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihqb2JOYW1lID09ICdTQUxFQU5BJyB8fCBqb2JOYW1lID09ICdSSVBQRVInIHx8IGpvYk5hbWUgPT0gJ0RBUktBVkVOR0VSJykge1xyXG4gICAgICAgIGRlZmF1bHRFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbMV07XHJcbiAgICAgICAgZGVmYXVsdFNlY29uZGFyeUVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1sxXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGpvYk5hbWUgPT0gJ0VMRVNUUkEnKSB7XHJcbiAgICAgICAgZGVmYXVsdEVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1syXTtcclxuICAgICAgICBkZWZhdWx0U2Vjb25kYXJ5RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzJdO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoam9iTmFtZSA9PSAnQURFUFQnKSB7XHJcbiAgICAgICAgZGVmYXVsdEVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1sxXTtcclxuICAgICAgICBkZWZhdWx0U2Vjb25kYXJ5RWxlbWVudCA9IGhDb2RlVmFsdWVzLmVsZW1lbnRzWzJdO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoam9iTmFtZSA9PSAnTElHSFRGVVJZJykge1xyXG4gICAgICAgIGRlZmF1bHRFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbM107XHJcbiAgICAgICAgZGVmYXVsdFNlY29uZGFyeUVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1s0XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKHZtLm5ld0dyb3VwKSB7XHJcbiAgICAgIHZtLmVsZW1lbnQgPSBkZWZhdWx0RWxlbWVudDtcclxuICAgICAgdm0uc2Vjb25kYXJ5RWxlbWVudCA9IGRlZmF1bHRTZWNvbmRhcnlFbGVtZW50O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZighdm0uZWxlbWVudCkge1xyXG4gICAgICB2bS5lbGVtZW50ID0gZGVmYXVsdEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoIXZtLnNlY29uZGFyeUVsZW1lbnQpIHtcclxuICAgICAgdm0uc2Vjb25kYXJ5RWxlbWVudCA9IGRlZmF1bHRFbGVtZW50O1xyXG4gICAgfVxyXG4gIH1cclxuICAgIFxyXG4gIGlmKHZtLmdyb3VwLmVsZW1lbnQpIHtcclxuICAgIHZtLmVsZW1lbnQgPSB2bS5ncm91cC5lbGVtZW50O1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHZtLmVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1swXTtcclxuICB9XHJcbiAgICBcclxuICBpZih2bS5ncm91cC5zZWNvbmRhcnlFbGVtZW50KSB7XHJcbiAgICB2bS5zZWNvbmRhcnlFbGVtZW50ID0gdm0uZ3JvdXAuc2Vjb25kYXJ5RWxlbWVudDtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB2bS5zZWNvbmRhcnlFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbMF07XHJcbiAgfVxyXG5cclxuICBpZih2bS5ncm91cC5lbmVteUxldmVsKSB7XHJcbiAgICB2bS5lbmVteUxldmVsID0gdm0uZ3JvdXAuZW5lbXlMZXZlbDtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB2bS5lbmVteUxldmVsID0gOTA7XHJcbiAgfVxyXG4gIFxyXG4gIGlmKHZtLmdyb3VwLnBsYXllckxldmVsKSB7XHJcbiAgICB2bS5wbGF5ZXJMZXZlbCA9IHZtLmdyb3VwLnBsYXllckxldmVsO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHZtLnBsYXllckxldmVsID0gOTM7XHJcbiAgfVxyXG4gIFxyXG4gIGlmKHZtLmdyb3VwLmhlcm9MZXZlbCAmJiB2bS5ncm91cC5oZXJvTGV2ZWwgPiAwKSB7XHJcbiAgICB2bS5oZXJvTGV2ZWwgPSB2bS5ncm91cC5oZXJvTGV2ZWw7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdm0uaGVyb0xldmVsID0gMTtcclxuICB9XHJcbiAgXHJcbiAgdm0uaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG5ld0pvYnMgPSBqb2JzLmdldEZpbmFsSm9icygpO1xyXG4gICAgaWYobmV3Sm9icy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICR0aW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZignam9iJyBpbiB2bS5ncm91cCkge1xyXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG5ld0pvYnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgaWYodmFsdWUuaWQgPT0gdm0uZ3JvdXAuam9iLmlkKSB7XHJcbiAgICAgICAgICAgICAgdm0uam9iID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uaW5pdERhbWFnZVR5cGUoKTtcclxuICAgICAgICB2bS5pbml0RGVmYXVsdEVsZW1lbnQoKTtcclxuICAgICAgICB2bS5zZXRIZXJvU3RhdHMoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHZtLnNldEpvYiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5pbml0RGFtYWdlVHlwZSgpO1xyXG4gICAgICB2bS5pbml0RGVmYXVsdEVsZW1lbnQoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICByZWdpb24uaW5pdCgpO1xyXG4gIGNoYXJhY3Rlci5pbml0KGZ1bmN0aW9uKCkge1xyXG4gICAgdm0uaW5pdCgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIHZtLmdldFN0YXRDYXAgPSBmdW5jdGlvbihjb2xOYW1lLCB1c2VMZXZlbCkge1xyXG4gICAgcmV0dXJuIGNoYXJhY3Rlci5nZXRTdGF0Q2Fwcyh1c2VMZXZlbClbY29sTmFtZV07XHJcbiAgfVxyXG4gIHZtLmdldEpvYkNvbnZlcnNpb24gPSBmdW5jdGlvbihjb2xOYW1lKSB7XHJcbiAgICByZXR1cm4gY2hhcmFjdGVyLmdldENvbnZlcnNpb25zKHZtLmpvYi5pZClbY29sTmFtZV07XHJcbiAgfVxyXG4gIHZtLmdldEpvYkJhc2VTdGF0ID0gZnVuY3Rpb24oY29sTmFtZSkge1xyXG4gICAgcmV0dXJuIGNoYXJhY3Rlci5nZXRCYXNlU3RhdHModm0ucGxheWVyTGV2ZWwsIHZtLmpvYi5pZClbY29sTmFtZV07XHJcbiAgfVxyXG4gIFxyXG4gIHZtLmludmFsaWRHcm91cE5hbWUgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKCF2bS5ncm91cE5hbWUpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHZtLmdyb3VwTmFtZSBpbiB2bS5zYXZlZEl0ZW1zKSB7XHJcbiAgICAgIGlmKHZtLm5ld0dyb3VwIHx8IHZtLmdyb3VwTmFtZSAhPSB2bS5vbGRHcm91cE5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLm9rID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZW5lbXlTdGF0Q2FwcyA9IGNoYXJhY3Rlci5nZXRTdGF0Q2Fwcyh2bS5lbmVteUxldmVsKTtcclxuICAgIHZhciBwbGF5ZXJTdGF0Q2FwcyA9IGNoYXJhY3Rlci5nZXRTdGF0Q2Fwcyh2bS5wbGF5ZXJMZXZlbCk7XHJcbiAgICB2YXIgY29udmVyc2lvbnMgPSBjaGFyYWN0ZXIuZ2V0Q29udmVyc2lvbnModm0uam9iLmlkKTtcclxuICAgIHZhciBiYXNlU3RhdHMgPSBjaGFyYWN0ZXIuZ2V0QmFzZVN0YXRzKHZtLnBsYXllckxldmVsLCB2bS5qb2IuaWQpO1xyXG4gICAgdmFyIGhlcm9TdGF0cyA9IGNoYXJhY3Rlci5nZXRIZXJvU3RhdHModm0uaGVyb0xldmVsKTtcclxuICAgIFxyXG4gICAgaWYodm0ubmV3R3JvdXApIHtcclxuICAgICAgdm0ub2xkR3JvdXBOYW1lID0gdm0uZ3JvdXBOYW1lO1xyXG4gICAgICBzYXZlSGVscGVyLmltcG9ydEdyb3VwKHZtLmdyb3VwTmFtZSwgW10pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBzYXZlSGVscGVyLnJlbmFtZVNhdmVkR3JvdXAoXHJcbiAgICAgIHZtLm9sZEdyb3VwTmFtZSwgXHJcbiAgICAgIHZtLmdyb3VwTmFtZSxcclxuICAgICAgdm0uZW5lbXlMZXZlbCxcclxuICAgICAgdm0ucGxheWVyTGV2ZWwsXHJcbiAgICAgIHZtLmhlcm9MZXZlbCxcclxuICAgICAgdm0uam9iLFxyXG4gICAgICB2bS5kYW1hZ2VUeXBlLFxyXG4gICAgICB2bS5lbGVtZW50LFxyXG4gICAgICB2bS5zZWNvbmRhcnlFbGVtZW50LFxyXG4gICAgICBlbmVteVN0YXRDYXBzLCBwbGF5ZXJTdGF0Q2FwcywgY29udmVyc2lvbnMsIGJhc2VTdGF0cywgaGVyb1N0YXRzKTtcclxuICAgIFxyXG4gICAgJGxvY2F0aW9uLnBhdGgoJy9idWlsZC8nICsgdm0uZ3JvdXBOYW1lKTtcclxuICB9XHJcbiAgXHJcbiAgdm0uc2V0SGVyb1N0YXRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5oZXJvU3RhdHMgPSBjaGFyYWN0ZXIuZ2V0SGVyb1N0YXRzKHZtLmhlcm9MZXZlbCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ290ICcgKyB2bS5oZXJvU3RhdHMubGVuZ3RoICsgJyBoZXJvIHN0YXRzJyk7XHJcbiAgfVxyXG4gIFxyXG4gICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dyb3VwTmFtZUlucHV0Jyk7XHJcbiAgICBpZihpbnB1dCkge1xyXG4gICAgICBpbnB1dC5mb2N1cygpO1xyXG4gICAgICBpbnB1dC5zZXRTZWxlY3Rpb25SYW5nZSgwLCA5OTk5KTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxufSkoKTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdxdWlja0FkZEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJ3N0YXRIZWxwZXInLCdzYXZlSGVscGVyJywncXVpY2tBZGQnLCdpdGVtQ2F0ZWdvcnknLCdqb2JzJywnZG50RGF0YScsJ2V4cG9ydExpbmtIZWxwZXInLFxyXG5mdW5jdGlvbigkdGltZW91dCxzdGF0SGVscGVyLHNhdmVIZWxwZXIscXVpY2tBZGQsaXRlbUNhdGVnb3J5LGpvYnMsZG50RGF0YSxleHBvcnRMaW5rSGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0uc3RhcnRlZEZvckNhdCA9ICcnO1xyXG4gIHZtLnN0ZXBOdW1iZXIgPSAwO1xyXG4gIHZtLmRhdGFzID0gW107XHJcbiAgdm0ub3B0aW9ucyA9IFtdO1xyXG4gIFxyXG4gIHRoaXMuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodm0uaGFzU3RhcnRlZCgpKSB7XHJcbiAgICAgIHZtLm9wdGlvbnMgPSBxdWlja0FkZC5nZXRPcHRpb25zKHZtLmNhdGVnb3J5LCB2bS5idWlsZCwgdm0uZGF0YXMpO1xyXG4gICAgICBpZih2bS5vcHRpb25zLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgdm0uc2VsZWN0T3B0aW9uKHZtLm9wdGlvbnNbMF0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2VsZWN0T3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHZhciBkYXRhID0gcXVpY2tBZGQuY3JlYXRlRGF0YSh2YWx1ZSwgdm0uY2F0ZWdvcnksIHZtLnN0ZXBOdW1iZXIpXHJcbiAgICB2bS5kYXRhcy5wdXNoKGRhdGEpO1xyXG4gICAgdm0uc3RlcE51bWJlcisrO1xyXG4gICAgaWYoIXF1aWNrQWRkLmlzVmFsaWRTdGVwTnVtYmVyKHZtLmNhdGVnb3J5LCB2bS5zdGVwTnVtYmVyKSkge1xyXG4gICAgICBcclxuICAgICAgdmFyIG5ld0l0ZW0gPSBxdWlja0FkZC5nZXRJdGVtKHZtLmRhdGFzKTtcclxuICAgICAgdmFyIGRudEZpbGVzID0gZXhwb3J0TGlua0hlbHBlci5nZXREbnRGaWxlcyhuZXdJdGVtKTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGRudEZpbGVzLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICAgIGRudERhdGEuaW5pdChmaWxlTmFtZSwgY29sdW1ucywgZnVuY3Rpb24oKSB7fSwgZnVuY3Rpb24oKSB7IHZtLnRyeVRvQWRkSXRlbShkbnRGaWxlcywgbmV3SXRlbSkgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB2bS50cnlUb0FkZEl0ZW0oZG50RmlsZXMsIG5ld0l0ZW0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZtLnNldE9wdGlvbnMoKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3NldHVwIG5leHQgc3RlcCcpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnRyeVRvQWRkSXRlbSA9IGZ1bmN0aW9uKGRudEZpbGVzLCBpdGVtKSB7XHJcbiAgICBpZighZG50RGF0YS5hbnlMb2FkaW5nKCkpIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBhbGxMb2FkZWQgPSB0cnVlO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goZG50RmlsZXMsIGZ1bmN0aW9uKGNvbHVtbnMsIGZpbGVOYW1lKSB7XHJcbiAgICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZU5hbWUpKSB7XHJcbiAgICAgICAgICBhbGxMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgaWYoYWxsTG9hZGVkKSB7XHJcbiAgICAgICAgaWYodm0uZGF0YXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdm0uY2FuY2VsKCk7XHJcbiAgICAgICAgICB2YXIgbmV3SXRlbSA9IGV4cG9ydExpbmtIZWxwZXIucmVsb2FkSXRlbShpdGVtKTtcclxuICAgICAgICAgIG5ld0l0ZW0uZ2VtU2xvdCA9IHZtLmdlbVNsb3Q7XHJcbiAgICAgICAgICBzYXZlSGVscGVyLnNhdmVJdGVtKHZtLmJ1aWxkTmFtZSwgbmV3SXRlbSk7XHJcbiAgICAgICAgICB2bS5idWlsZC5pdGVtcy5wdXNoKG5ld0l0ZW0pO1xyXG4gICAgICAgICAgdm0ub25DaGFuZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5yZXNldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdm0uc3RlcE51bWJlciA9IDA7XHJcbiAgICB2bS5kYXRhcyA9IFtdO1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZtLnNldE9wdGlvbnMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmhhc1N0YXJ0ZWQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB2bS5zdGFydGVkRm9yQ2F0ID09IHZtLmNhdGVnb3J5Lm5hbWU7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLnN0YXJ0ZWRGb3JDYXQgPSB2bS5jYXRlZ29yeS5uYW1lO1xyXG4gICAgXHJcbiAgICBqb2JzLmluaXQoZnVuY3Rpb24oKSB7fSwgdm0ucmVzZXQpO1xyXG4gICAgaXRlbUNhdGVnb3J5LmluaXQodm0uY2F0ZWdvcnkubmFtZSwgdm0ucmVzZXQpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmhhc09wdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBxdWlja0FkZC5oYXNPcHRpb25zKHZtLmNhdGVnb3J5LCB2bS5idWlsZCwgW10pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdm0uc3RhcnRlZEZvckNhdCA9ICcnO1xyXG4gICAgdm0ucmVzZXQoKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5iYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5zdGVwTnVtYmVyID09IDApIHtcclxuICAgICAgdm0uY2FuY2VsKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgZG8ge1xyXG4gICAgICAgIHZtLnN0ZXBOdW1iZXItLTtcclxuICAgICAgICB2bS5kYXRhcy5wb3AoKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgdGVzdE9wdGlvbnMgPSBxdWlja0FkZC5nZXRPcHRpb25zKHZtLmNhdGVnb3J5LCB2bS5idWlsZCwgdm0uZGF0YXMpO1xyXG4gICAgICB9IHdoaWxlKHRlc3RPcHRpb25zLmxlbmd0aCA8PSAxICYmIHZtLnN0ZXBOdW1iZXIgPiAwKTtcclxuICAgICAgXHJcbiAgICAgIHZtLnNldE9wdGlvbnMoKTtcclxuICAgIH1cclxuICB9XHJcbiAgZG50RGF0YS5pbml0KCdleGNoYW5nZS5sempzb24nLCBudWxsLCBmdW5jdGlvbigpIHt9LCB2bS5yZXNldCk7XHJcbiAgXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1RdWlja0FkZCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgY2F0ZWdvcnk6ICc9Y2F0ZWdvcnknLFxyXG4gICAgICBidWlsZDogJz1idWlsZCcsXHJcbiAgICAgIGJ1aWxkTmFtZTogJz1idWlsZE5hbWUnLFxyXG4gICAgICBnZW1TbG90OiAnPWdlbVNsb3QnLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ3F1aWNrQWRkQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdxdWlja0FkZCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2J1aWxkcy9xdWljay1hZGQuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdSZWxvYWRCdWlsZEN0cmwnLFxyXG5bJyRsb2NhdGlvbicsJyRyb3V0ZVBhcmFtcycsJyR0aW1lb3V0Jywnc2F2ZUhlbHBlcicsJ2RudERhdGEnLCdkbnRSZXNldCcsJ2dyb3VwSGVscGVyJywndHJhbnNsYXRpb25zJyxyZWxvYWRCdWlsZEN0cmxdKTtcclxuXHJcbmZ1bmN0aW9uIHJlbG9hZEJ1aWxkQ3RybCgkbG9jYXRpb24sJHJvdXRlUGFyYW1zLCR0aW1lb3V0LHNhdmVIZWxwZXIsZG50RGF0YSxkbnRSZXNldCxncm91cEhlbHBlcix0cmFuc2xhdGlvbnMpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBpZignbmFtZScgaW4gJHJvdXRlUGFyYW1zKSB7XHJcbiAgICAgIHZtLm5hbWUgPSAkcm91dGVQYXJhbXMubmFtZTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIHNhdmVkSXRlbXMgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICBpZih2bS5uYW1lIGluIHNhdmVkSXRlbXMpIHtcclxuICAgIHZtLmJ1aWxkID0gc2F2ZWRJdGVtc1t2bS5uYW1lXTtcclxuICB9XHJcbiAgXHJcbiAgdm0ucmVsb2FkZWQgPSBmYWxzZTtcclxuICB2bS5yZWxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgIGRudFJlc2V0KCk7XHJcbiAgICB2bS5yZWxvYWRlZCA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICB0cmFuc2xhdGlvbnMuaW5pdChwcm9ncmVzcywgdHJ5SW5pdCk7XHJcblxyXG4gICAgdmFyIGZpbGVzID0gZ3JvdXBIZWxwZXIuZ2V0RG50RmlsZXModm0uYnVpbGQpO1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKGZpbGVzLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICBkbnREYXRhLmluaXQoZmlsZU5hbWUsIGNvbHVtbnMsIHByb2dyZXNzLCB0cnlJbml0KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB2bS5nb1RvQnVpbGQgPSBmdW5jdGlvbigpIHtcclxuICAgICRsb2NhdGlvbi5wYXRoKCcvYnVpbGQvJyArIHZtLm5hbWUpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcm9ncmVzcygpIHtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyeUluaXQoKSB7XHJcbiAgICBpZih2bS5yZWxvYWRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBhbGxMb2FkZWQgPSB0cnVlO1xyXG4gICAgdmFyIGZpbGVzID0gZ3JvdXBIZWxwZXIuZ2V0RG50RmlsZXModm0uYnVpbGQpO1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKGZpbGVzLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICBpZighZG50RGF0YS5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICBhbGxMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpZihhbGxMb2FkZWQgJiYgdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpIHtcclxuICAgICAgdmFyIG5ld0l0ZW1zID0gZ3JvdXBIZWxwZXIucmVsb2FkR3JvdXAodm0ubmFtZSwgdm0uYnVpbGQpO1xyXG4gICAgICBzYXZlSGVscGVyLnVwZGF0ZWRTYXZlZEl0ZW1zKHZtLm5hbWUsIG5ld0l0ZW1zKTtcclxuICAgICAgdm0uYnVpbGQuaXRlbXMgPSBuZXdJdGVtcztcclxuICAgICAgXHJcbiAgICAgIHZtLnJlbG9hZGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgICBcclxufSIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ1ZpZXdHcm91cEN0cmwnLCBcclxuICBbJyRzY29wZScsJyR3aW5kb3cnLCdyZWdpb24nLCckbG9jYXRpb24nLCckcm91dGVQYXJhbXMnLCdzYXZlSGVscGVyJywnZG50RGF0YScsJyR0aW1lb3V0JywndHJhbnNsYXRpb25zJywnZG50UmVzZXQnLCdleHBvcnRMaW5rSGVscGVyJywnZ3JvdXBIZWxwZXInLCdqb2JzJywnY2hhcmFjdGVyJywnc3RhdEhlbHBlcicsJ2hDb2RlVmFsdWVzJyxcclxuICBmdW5jdGlvbigkc2NvcGUsJHdpbmRvdyxyZWdpb24sJGxvY2F0aW9uLCRyb3V0ZVBhcmFtcyxzYXZlSGVscGVyLGRudERhdGEsJHRpbWVvdXQsdHJhbnNsYXRpb25zLGRudFJlc2V0LGV4cG9ydExpbmtIZWxwZXIsZ3JvdXBIZWxwZXIsam9icyxjaGFyYWN0ZXIsc3RhdEhlbHBlcixoQ29kZVZhbHVlcykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSAnc2F2ZWQtYmFjayc7XHJcbiAgICBcclxuICAgIHJlZ2lvbi5zZXRMb2NhdGlvbkJ5TmFtZSgkcm91dGVQYXJhbXMucmVnaW9uKTtcclxuICAgIFxyXG4gICAgJHNjb3BlLmJ1aWxkTmFtZSA9ICcnO1xyXG4gICAgJHNjb3BlLmJ1aWxkID0ge307XHJcbiAgICBcclxuXHJcbiAgICBpZignZycgaW4gJHJvdXRlUGFyYW1zICYmICdpJyBpbiAkcm91dGVQYXJhbXMpIHtcclxuICAgICAgJHNjb3BlLmJ1aWxkTmFtZSA9ICRyb3V0ZVBhcmFtcy5nO1xyXG4gICAgICAkd2luZG93LmRvY3VtZW50LnRpdGxlID0gJ2RuZ2VhcnNpbSB8ICcgKyAkcm91dGVQYXJhbXMuZztcclxuICAgICAgXHJcbiAgICAgICRzY29wZS5lbmVteUxldmVsID0gJHJvdXRlUGFyYW1zLmU7XHJcbiAgICAgICRzY29wZS5wbGF5ZXJMZXZlbCA9ICRyb3V0ZVBhcmFtcy5wO1xyXG4gICAgICAkc2NvcGUuaGVyb0xldmVsID0gJHJvdXRlUGFyYW1zLmg7XHJcbiAgICAgICRzY29wZS5qb2IgPSB7IGlkOiAkcm91dGVQYXJhbXMuaiB9O1xyXG4gICAgICAkc2NvcGUuZGFtYWdlVHlwZSA9IGhDb2RlVmFsdWVzLmRhbWFnZVR5cGVzWyRyb3V0ZVBhcmFtcy5kXTtcclxuICAgICAgJHNjb3BlLmVsZW1lbnQgPSBoQ29kZVZhbHVlcy5lbGVtZW50c1skcm91dGVQYXJhbXMudF07XHJcbiAgICAgICRzY29wZS5zZWNvbmRhcnlFbGVtZW50ID0gaENvZGVWYWx1ZXMuZWxlbWVudHNbJHJvdXRlUGFyYW1zLnNdO1xyXG4gICAgICAgIFxyXG4gICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgXHJcbiAgICAgIHZhciBpdGVtU3RyaW5nID0gJHJvdXRlUGFyYW1zLmk7XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbVN0cmluZy5zcGxpdCgnLCcpLCBmdW5jdGlvbihpdGVtU3RyLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBpdGVtID0gZXhwb3J0TGlua0hlbHBlci5kZWNvZGVJdGVtKGl0ZW1TdHIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0uaWQgPiAwKSB7XHJcbiAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkc2NvcGUuYnVpbGQgPSB7fTtcclxuICAgICAgJHNjb3BlLnNhdmVkSXRlbXMgPSB7fTtcclxuICAgICAgJHNjb3BlLnNhdmVkSXRlbXNbJHNjb3BlLmJ1aWxkTmFtZV0gPSAkc2NvcGUuYnVpbGQ7XHJcbiAgICAgICRzY29wZS5idWlsZC5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAkc2NvcGUuaXNMb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgXHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cEhlbHBlci5nZXREbnRGaWxlcygkc2NvcGUuYnVpbGQpLCBmdW5jdGlvbihjb2x1bW5zLCBmaWxlTmFtZSkge1xyXG4gICAgICAgIGRudERhdGEuaW5pdChmaWxlTmFtZSwgY29sdW1ucywgcHJvZ3Jlc3MsIHRyeUluaXQpO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIHRyYW5zbGF0aW9ucy5pbml0KHByb2dyZXNzLCB0cnlJbml0KTtcclxuICAgICAgam9icy5pbml0KHByb2dyZXNzLCB0cnlJbml0KTtcclxuICAgICAgY2hhcmFjdGVyLmluaXQodHJ5SW5pdCk7XHJcbiAgICAgIFxyXG4gICAgICAkdGltZW91dCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAkc2NvcGUuYW55SXRlbXMgPSBPYmplY3Qua2V5cygkc2NvcGUuc2F2ZWRJdGVtcykubGVuZ3RoID4gMDtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gdHJ5SW5pdCgpIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBhbGxJbml0ID0gdHJ1ZTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwSGVscGVyLmdldERudEZpbGVzKCRzY29wZS5idWlsZCksIGZ1bmN0aW9uKGNvbHVtbnMsIGZpbGVOYW1lKSB7XHJcbiAgICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZU5hbWUpKSB7XHJcbiAgICAgICAgICBhbGxJbml0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlmKCFhbGxJbml0IHx8IGRudERhdGEuYW55TG9hZGluZygpIHx8ICF0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSB8fCAham9icy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZ3JvdXBOYW1lID0gJHNjb3BlLmJ1aWxkTmFtZTtcclxuICAgICAgICB2YXIgZ3JvdXAgPSAkc2NvcGUuYnVpbGQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJHNjb3BlLmpvYiA9IGpvYnMuZ2V0QnlJZCgkc2NvcGUuam9iLmlkKTtcclxuICAgICAgICBcclxuICAgICAgICAkc2NvcGUuZW5lbXlTdGF0Q2FwcyA9IGNoYXJhY3Rlci5nZXRTdGF0Q2Fwcygkc2NvcGUuZW5lbXlMZXZlbCk7XHJcbiAgICAgICAgJHNjb3BlLnBsYXllclN0YXRDYXBzID0gY2hhcmFjdGVyLmdldFN0YXRDYXBzKCRzY29wZS5wbGF5ZXJMZXZlbCk7XHJcbiAgICAgICAgaWYoJHNjb3BlLmpvYikge1xyXG4gICAgICAgICAgJHNjb3BlLmNvbnZlcnNpb25zID0gY2hhcmFjdGVyLmdldENvbnZlcnNpb25zKCRzY29wZS5qb2IuaWQpO1xyXG4gICAgICAgICAgJHNjb3BlLmJhc2VTdGF0cyA9IGNoYXJhY3Rlci5nZXRCYXNlU3RhdHMoJHNjb3BlLnBsYXllckxldmVsLCAkc2NvcGUuam9iLmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHNjb3BlLmhlcm9TdGF0cyA9IGNoYXJhY3Rlci5nZXRIZXJvU3RhdHMoJHNjb3BlLmhlcm9MZXZlbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG5ld0l0ZW1zID0gZ3JvdXBIZWxwZXIucmVsb2FkR3JvdXAoZ3JvdXBOYW1lLCBncm91cCk7XHJcbiAgICAgIFxyXG4gICAgICAgICRzY29wZS5zYXZlZEl0ZW1zID0ge307XHJcbiAgICAgICAgJHNjb3BlLmJ1aWxkID0ge1xyXG4gICAgICAgICAgaXRlbXM6IG5ld0l0ZW1zLFxyXG4gICAgICAgICAgbGFzdFVwZGF0ZTogZ3JvdXAubGFzdFVwZGF0ZSxcclxuXHJcbiAgICAgICAgICBlbmVteUxldmVsOiAkc2NvcGUuZW5lbXlMZXZlbCxcclxuICAgICAgICAgIHBsYXllckxldmVsOiAkc2NvcGUucGxheWVyTGV2ZWwsXHJcbiAgICAgICAgICBoZXJvTGV2ZWw6ICRzY29wZS5oZXJvTGV2ZWwsXHJcbiAgICAgICAgICBqb2I6ICRzY29wZS5qb2IsXHJcbiAgICAgICAgICBkYW1hZ2VUeXBlOiAkc2NvcGUuZGFtYWdlVHlwZSxcclxuICAgICAgICAgIGVsZW1lbnQ6ICRzY29wZS5lbGVtZW50LFxyXG4gICAgICAgICAgc2Vjb25kYXJ5RWxlbWVudDogJHNjb3BlLnNlY29uZGFyeUVsZW1lbnQsXHJcbiAgICAgICAgICBlbmVteVN0YXRDYXBzOiAkc2NvcGUuZW5lbXlTdGF0Q2FwcyxcclxuICAgICAgICAgIHBsYXllclN0YXRDYXBzOiAkc2NvcGUucGxheWVyU3RhdENhcHMsXHJcbiAgICAgICAgICBjb252ZXJzaW9uczogJHNjb3BlLmNvbnZlcnNpb25zLFxyXG4gICAgICAgICAgYmFzZVN0YXRzOiAkc2NvcGUuYmFzZVN0YXRzLFxyXG4gICAgICAgICAgaGVyb1N0YXRzOiAkc2NvcGUuaGVyb1N0YXRzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLnNhdmVkSXRlbXNbZ3JvdXBOYW1lXSA9ICRzY29wZS5idWlsZDtcclxuICAgICAgICAkc2NvcGUuc3RhdHMgPSBzdGF0SGVscGVyLmdldEJ1aWxkU3RhdHMoJHNjb3BlLmJ1aWxkKTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgbG9uZ1VybCA9IGV4cG9ydExpbmtIZWxwZXIuY3JlYXRlR3JvdXBMaW5rKCRzY29wZS5idWlsZE5hbWUsICRzY29wZS5idWlsZCk7XHJcbiAgICAgICAgJHNjb3BlLmJ1aWxkLnNob3J0VXJsID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShsb25nVXJsKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHByb2dyZXNzKCkge1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAkc2NvcGUuY29weUdyb3VwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBuZXdCdWlsZE5hbWUgPSBzYXZlSGVscGVyLmltcG9ydEdyb3VwKCRzY29wZS5idWlsZE5hbWUsICRzY29wZS5idWlsZC5pdGVtcyk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdjb3B5aW5nIGluIGFzICcgKyBuZXdCdWlsZE5hbWUpO1xyXG4gICAgICBcclxuICAgICAgc2F2ZUhlbHBlci5yZW5hbWVTYXZlZEdyb3VwKFxyXG4gICAgICAgIG5ld0J1aWxkTmFtZSwgXHJcbiAgICAgICAgbmV3QnVpbGROYW1lLFxyXG4gICAgICAgICRzY29wZS5lbmVteUxldmVsLFxyXG4gICAgICAgICRzY29wZS5wbGF5ZXJMZXZlbCxcclxuICAgICAgICAkc2NvcGUuaGVyb0xldmVsLFxyXG4gICAgICAgICRzY29wZS5qb2IsXHJcbiAgICAgICAgJHNjb3BlLmRhbWFnZVR5cGUsXHJcbiAgICAgICAgJHNjb3BlLmVsZW1lbnQsXHJcbiAgICAgICAgJHNjb3BlLnNlY29uZGFyeUVsZW1lbnQsXHJcbiAgICAgICAgJHNjb3BlLmVuZW15U3RhdENhcHMsICRzY29wZS5wbGF5ZXJTdGF0Q2FwcywgJHNjb3BlLmNvbnZlcnNpb25zLCAkc2NvcGUuYmFzZVN0YXRzLCAkc2NvcGUuaGVyb1N0YXRzKTtcclxuICAgICAgXHJcbiAgICAgICRsb2NhdGlvbi51cmwoJy9idWlsZC8nICsgbmV3QnVpbGROYW1lKTtcclxuICAgIH1cclxuICB9XVxyXG4pO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZpbHRlcignZXNjYXBlJywgW2Z1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgZnVuY3Rpb24gZXNjYXBlRmlsdGVyKGlucHV0KSB7XHJcbiAgICAgIGlmKGlucHV0KSB7XHJcbiAgICAgICAgICByZXR1cm4gd2luZG93LmVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuICcnO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVzY2FwZUZpbHRlcjtcclxufV0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZpbHRlcigncGVyY2VudGFnZScsIFtmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGZ1bmN0aW9uIHBlcmNlbnRhZ2VGaWx0ZXIoaW5wdXQpIHtcclxuICAgIGlmKHR5cGVvZiBpbnB1dCA9PSAnbnVtYmVyJykge1xyXG4gICAgICByZXR1cm4gKE1hdGgucm91bmQoaW5wdXQgKiAxMDAgKiAxMDApIC8gMTAwKSArICclJztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHBlcmNlbnRhZ2VGaWx0ZXIuJHN0YXRlZnVsID0gZmFsc2U7XHJcblxyXG4gIHJldHVybiBwZXJjZW50YWdlRmlsdGVyO1xyXG59XSk7XHJcblxyXG59KSgpOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2dyb3VwQXNzaWdubWVudEN0cmwnLFxyXG5cclxuWydoQ29kZVZhbHVlcycsJ3N0YXRIZWxwZXInLCdzYXZlSGVscGVyJywnaXRlbUNhdGVnb3J5JywnJHNjb3BlJyxcclxuZnVuY3Rpb24oaENvZGVWYWx1ZXMsc3RhdEhlbHBlcixzYXZlSGVscGVyLGl0ZW1DYXRlZ29yeSwkc2NvcGUpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB0aGlzLnNhdmVkSXRlbXMgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICB0aGlzLmdyb3VwTmFtZXMgPSBPYmplY3Qua2V5cyh0aGlzLnNhdmVkSXRlbXMpO1xyXG4gIGlmKCF0aGlzLmdyb3VwTmFtZSkge1xyXG4gICAgdGhpcy5ncm91cE5hbWUgPSBzYXZlSGVscGVyLmdldEN1cnJlbnRCdWlsZCgpO1xyXG4gIH1cclxuXHJcbiAgaWYoISh0aGlzLmdyb3VwTmFtZSBpbiB0aGlzLnNhdmVkSXRlbXMpKSB7XHJcbiAgICB0aGlzLmdyb3VwTmFtZSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBpZighdGhpcy5ncm91cE5hbWUgJiYgdGhpcy5zYXZlZEl0ZW1zKSB7XHJcbiAgICBmb3IodmFyIGdyb3VwTmFtZSBpbiB0aGlzLnNhdmVkSXRlbXMpIHtcclxuICAgICAgdGhpcy5ncm91cE5hbWUgPSBncm91cE5hbWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYoIXRoaXMuZ3JvdXBOYW1lKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc3VtbWFyeVN0YXRJZHMgPSBbXTtcclxuICBmb3IodmFyIGlkIGluIGhDb2RlVmFsdWVzLnN0YXRzKSB7XHJcbiAgICBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uc3VtbWFyeURpc3BsYXkpIHtcclxuICAgICAgdGhpcy5zdW1tYXJ5U3RhdElkcy5wdXNoKGlkKTtcclxuICAgIH1cclxuICB9XHJcbiAgICBcclxuICB0aGlzLmNsZWFyR3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLmFkZEFmZmVjdEFtb3VudCA9IG51bGw7XHJcbiAgICB2bS5yZXBsYWNlQWZmZWN0QW1vdW50ID0ge307XHJcblxyXG4gICAgdm0uZ3JvdXBJdGVtcyA9IG51bGw7XHJcbiAgICB2bS5ncm91cENhbGNTdGF0cyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAkc2NvcGUuJHdhdGNoKCdlZGl0Q3RybC5pdGVtJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5jbGVhckdyb3VwKCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgdGhpcy5nZXRBZGRBZmZlY3RBbW91bnQgPSBmdW5jdGlvbihzdGF0KSB7XHJcbiAgICB0aGlzLmluaXRBZGRBZmZlY3RzKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnYWRkIGFmZmVjdDogJywgdGhpcy5hZGRBZmZlY3RBbW91bnRbc3RhdF0sIHRoaXMuaXRlbSk7XHJcbiAgICByZXR1cm4gdGhpcy5hZGRBZmZlY3RBbW91bnRbc3RhdF07XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmdldFJlcGxhY2VBZmZlY3RBbW91bnQgPSBmdW5jdGlvbihzdGF0SWQsIGl0ZW1JbmRleCwgaXRlbSkge1xyXG4gICAgdGhpcy5pbml0UmVwbGFjZUFmZmVjdHMoaXRlbUluZGV4LCBpdGVtKTtcclxuICAgIHJldHVybiB0aGlzLnJlcGxhY2VBZmZlY3RBbW91bnRbaXRlbUluZGV4XVtzdGF0SWRdO1xyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5nZXRHcm91cENhbGNTdGF0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICBpZih0aGlzLmdyb3VwQ2FsY1N0YXRzID09IG51bGwpIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBncm91cCA9IHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXTtcclxuICAgICAgaWYoZ3JvdXApIHtcclxuICAgICAgICB0aGlzLmdyb3VwQ2FsY1N0YXRzID0gc3RhdEhlbHBlci5nZXRDYWxjdWxhdGVkU3RhdHNGcm9tSXRlbXMoZ3JvdXAsIGdyb3VwLml0ZW1zKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcy5ncm91cENhbGNTdGF0cztcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuZ2V0QnVpbGQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV07XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmluaXRBZGRBZmZlY3RzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuICAgIGlmKHZtLmFkZEFmZmVjdEFtb3VudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbml0aWFsaXNpbmcgYWRkIGFmZmVjdHMgJyk7XHJcbiAgICBcclxuICAgIHZhciBvcmlnU3RhdHMgPSB2bS5nZXRHcm91cENhbGNTdGF0cygpO1xyXG4gICAgdmFyIGdyb3VwID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdO1xyXG4gICAgdmFyIG5ld0l0ZW1zID0gW107XHJcbiAgICBpZihncm91cC5pdGVtcykge1xyXG4gICAgICBuZXdJdGVtcyA9IGdyb3VwLml0ZW1zLmNvbmNhdChbdm0uaXRlbV0pO1xyXG4gICAgfVxyXG4gICAgdmFyIG5ld1N0YXRzID0gc3RhdEhlbHBlci5nZXRDYWxjdWxhdGVkU3RhdHNGcm9tSXRlbXMoZ3JvdXAsIG5ld0l0ZW1zKTtcclxuICAgIFxyXG4gICAgdGhpcy5hZGRBZmZlY3RBbW91bnQgPSB7fTtcclxuICAgIGZvcih2YXIgaWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgICAgaWYoaENvZGVWYWx1ZXMuc3RhdHNbaWRdLnN1bW1hcnlEaXNwbGF5KSB7XHJcbiAgICAgICAgdm0uYWRkQWZmZWN0QW1vdW50W2lkXSA9IGNhbGNTdGF0UGVyY2VudCh2bS5nZXRTdGF0KGlkLCBuZXdTdGF0cykubWF4LCB2bS5nZXRTdGF0KGlkLCBvcmlnU3RhdHMpLm1heCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHRoaXMuaW5pdFJlcGxhY2VBZmZlY3RzID0gZnVuY3Rpb24oaXRlbUluZGV4LCBpdGVtKSB7XHJcbiAgICBpZih2bS5yZXBsYWNlQWZmZWN0QW1vdW50W2l0ZW1JbmRleF0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgZ3JvdXAgPSB2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV07XHJcbiAgICB2YXIgbmV3SXRlbXMgPSBbdm0uaXRlbV07XHJcbiAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXAuaXRlbXMsIGZ1bmN0aW9uKGdJdGVtICwgaW5kZXgpIHtcclxuICAgICAgaWYoaXRlbSAhPT0gZ0l0ZW0pIHtcclxuICAgICAgICBuZXdJdGVtcy5wdXNoKGdJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHZhciBuZXdTdGF0cyA9IHN0YXRIZWxwZXIuZ2V0Q2FsY3VsYXRlZFN0YXRzRnJvbUl0ZW1zKGdyb3VwLCBuZXdJdGVtcyk7XHJcbiAgICB2YXIgb3JpZ1N0YXRzID0gdm0uZ2V0R3JvdXBDYWxjU3RhdHMoKTtcclxuICAgIFxyXG4gICAgdGhpcy5yZXBsYWNlQWZmZWN0QW1vdW50W2l0ZW1JbmRleF0gPSB7fTtcclxuICAgIGZvcih2YXIgaWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgICAgaWYoaENvZGVWYWx1ZXMuc3RhdHNbaWRdLnN1bW1hcnlEaXNwbGF5KSB7XHJcbiAgICAgICAgdm0ucmVwbGFjZUFmZmVjdEFtb3VudFtpdGVtSW5kZXhdW2lkXSA9IGNhbGNTdGF0UGVyY2VudCh2bS5nZXRTdGF0KGlkLCBuZXdTdGF0cykubWF4LCB2bS5nZXRTdGF0KGlkLCBvcmlnU3RhdHMpLm1heCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGNhbGNTdGF0UGVyY2VudChuZXdWYWwsIG9yaWdWYWwpIHtcclxuICAgIGlmKG5ld1ZhbCAmJiBvcmlnVmFsKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdvcmlnOiAnICsgb3JpZ1ZhbCArICcsbmV3OiAnICsgbmV3VmFsKTtcclxuICAgICAgcmV0dXJuIE1hdGgucm91bmQoMTAwMDAgKiAoMSAtIChvcmlnVmFsIC8gbmV3VmFsKSkpIC8gMTAwO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmdldFN0YXQgPSBmdW5jdGlvbihpZCwgc3RhdHMpIHtcclxuICAgIHZhciBsZW4gPSBzdGF0cy5sZW5ndGg7XHJcbiAgICBmb3IodmFyIGk9MDtpPGxlbjsrK2kpIHtcclxuICAgICAgaWYoc3RhdHNbaV0uaWQgPT0gaWQpIHtcclxuICAgICAgICByZXR1cm4gc3RhdHNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7aWQ6IGlkLCBtYXg6MH07XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmdldFN0YXROYW1lID0gZnVuY3Rpb24oaWQpIHtcclxuICAgIHZhciByZXRWYWwgPSAnJztcclxuICAgIGlmKGhDb2RlVmFsdWVzLnN0YXRzW2lkXS5lbGVtZW50ID09ICdwcmltYXJ5Jykge1xyXG4gICAgICB2YXIgZWxlSWQgPSAwO1xyXG4gICAgICBpZih2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uZWxlbWVudCkge1xyXG4gICAgICAgIGVsZUlkID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLmVsZW1lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0VmFsICs9IGhDb2RlVmFsdWVzLmVsZW1lbnRzW2VsZUlkXS5uYW1lO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihoQ29kZVZhbHVlcy5zdGF0c1tpZF0uZWxlbWVudCA9PSAnc2Vjb25kYXJ5Jykge1xyXG4gICAgICB2YXIgZWxlSWQgPSAwO1xyXG4gICAgICBpZih2bS5zYXZlZEl0ZW1zW3ZtLmdyb3VwTmFtZV0uc2Vjb25kYXJ5RWxlbWVudCkge1xyXG4gICAgICAgIGVsZUlkID0gdm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLnNlY29uZGFyeUVsZW1lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0VmFsICs9IGhDb2RlVmFsdWVzLmVsZW1lbnRzW2VsZUlkXS5uYW1lO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldFZhbCArICcgJyArIGhDb2RlVmFsdWVzLnN0YXRzW2lkXS5uYW1lO1xyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy5nZXRHcm91cEl0ZW1zID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgdmFyIGl0ZW1TcGxpdDtcclxuICAgIGZ1bmN0aW9uIG51bU1hdGNoZXMoc3RyKSB7XHJcbiAgICAgIGlmKHN0cikge1xyXG4gICAgICAgIHZhciBudW1NYXRjaGVzID0gMDtcclxuICAgICAgICBmb3IodmFyIGk9MDtpPGl0ZW1TcGxpdC5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICBpZihzdHIuaW5kZXhPZihpdGVtU3BsaXRbaV0pID4gMCkge1xyXG4gICAgICAgICAgICBudW1NYXRjaGVzKys7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudW1NYXRjaGVzO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZih2bS5ncm91cEl0ZW1zID09IG51bGwgJiYgdm0uZ3JvdXBOYW1lICYmIHZtLmdyb3VwTmFtZSBpbiB2bS5zYXZlZEl0ZW1zICYmIHZtLml0ZW0gJiYgdm0uaXRlbS50eXBlTmFtZSkge1xyXG4gICAgICB2bS5ncm91cEl0ZW1zID0gW107XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLnNhdmVkSXRlbXNbdm0uZ3JvdXBOYW1lXS5pdGVtcywgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICBpZihpdGVtLmV4Y2hhbmdlVHlwZSAmJiBpdGVtLml0ZW1Tb3VyY2UgIT0gJ2dlbScgJiYgaXRlbS5pdGVtU291cmNlICE9ICdwbGF0ZScgJiYgaXRlbS5pdGVtU291cmNlICE9ICd0bWFuJykge1xyXG4gICAgICAgICAgaWYoaXRlbS5leGNoYW5nZVR5cGUgPT0gdm0uaXRlbS5leGNoYW5nZVR5cGUpIHtcclxuICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpdGVtLnR5cGVOYW1lID09IHZtLml0ZW0udHlwZU5hbWUpIHtcclxuICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlmKHZtLml0ZW0ubmFtZSkge1xyXG4gICAgICAgIGl0ZW1TcGxpdCA9IHZtLml0ZW0ubmFtZS5zcGxpdCgnICcpO1xyXG4gICAgICB9XHJcbiAgICAgIGl0ZW1zLnNvcnQoZnVuY3Rpb24oYSxiKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bU1hdGNoZXMoYi5uYW1lKS1udW1NYXRjaGVzKGEubmFtZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmKGl0ZW0ubmFtZSA9PSB2bS5pdGVtLm5hbWUpIHtcclxuICAgICAgICAgIHZtLmdyb3VwSXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmKGl0ZW0ubmFtZSAhPSB2bS5pdGVtLm5hbWUpIHtcclxuICAgICAgICAgIHZtLmdyb3VwSXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZtLmdyb3VwSXRlbXM7XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmhhc01heEV4Y2hhbmdhYmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgY2F0ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZSh0aGlzLml0ZW0udHlwZU5hbWUpO1xyXG4gICAgdmFyIGl0ZW1zID0gdGhpcy5nZXRHcm91cEl0ZW1zKCk7XHJcbiAgICBcclxuICAgIGlmKGNhdCAmJiBjYXQubWF4Q2F0KSB7XHJcbiAgICAgIGlmKGl0ZW1zLmxlbmd0aCA+PSBjYXQubWF4Q2F0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoY2F0ICYmIGNhdC5tYXhFeGNoYW5nZSkge1xyXG4gICAgICBpZihpdGVtcy5sZW5ndGggPj0gY2F0Lm1heEV4Y2hhbmdlKSB7XHJcbiAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICBpZighaXRlbXNbaV0uZXhjaGFuZ2VUeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ21heGV4Y2hhbmdlIHJlYWNoZWQgJyArIGl0ZW1zLmxlbmd0aCArICc+PScgKyBjYXQubWF4RXhjaGFuZ2UgKyAnIGZvciAnICsgY2F0Lm5hbWUpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuICBcclxuICB0aGlzLm5leHRHcm91cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICB2YXIgdXB0b0l0ZW0gPSBmYWxzZTtcclxuICAgIHZhciBuZXh0R3JvdXAgPSBudWxsO1xyXG4gICAgYW5ndWxhci5mb3JFYWNoKHZtLmdyb3VwTmFtZXMsIGZ1bmN0aW9uKGdyb3VwTmFtZSwgaW5kZXgpIHtcclxuICAgICAgaWYodXB0b0l0ZW0pIHtcclxuICAgICAgICBpZihuZXh0R3JvdXAgPT0gbnVsbCkge1xyXG4gICAgICAgICAgbmV4dEdyb3VwID0gZ3JvdXBOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZihncm91cE5hbWUgPT0gdm0uZ3JvdXBOYW1lKSB7XHJcbiAgICAgICAgdXB0b0l0ZW0gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYobmV4dEdyb3VwID09IG51bGwpIHtcclxuICAgICAgbmV4dEdyb3VwID0gdm0uZ3JvdXBOYW1lc1swXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uZ3JvdXBOYW1lID0gbmV4dEdyb3VwO1xyXG4gICAgc2F2ZUdyb3VwKCk7XHJcbiAgICB2bS5jbGVhckdyb3VwKCk7XHJcbiAgfTtcclxuICBcclxuICB0aGlzLnByZXZHcm91cCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICB2YXIgZm91bmRHcm91cCA9IGZhbHNlO1xyXG4gICAgdmFyIHByZXZHcm91cCA9IG51bGw7XHJcbiAgICBhbmd1bGFyLmZvckVhY2godm0uZ3JvdXBOYW1lcywgZnVuY3Rpb24oZ3JvdXBOYW1lLCBpbmRleCkge1xyXG4gICAgICBpZihncm91cE5hbWUgPT0gdm0uZ3JvdXBOYW1lKSB7XHJcbiAgICAgICAgZm91bmRHcm91cCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKCFmb3VuZEdyb3VwKSB7XHJcbiAgICAgICAgcHJldkdyb3VwID0gZ3JvdXBOYW1lO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYocHJldkdyb3VwID09IG51bGwpIHtcclxuICAgICAgcHJldkdyb3VwID0gdm0uZ3JvdXBOYW1lc1t2bS5ncm91cE5hbWVzLmxlbmd0aC0xXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uZ3JvdXBOYW1lID0gcHJldkdyb3VwO1xyXG4gICAgc2F2ZUdyb3VwKCk7XHJcbiAgICB2bS5jbGVhckdyb3VwKCk7XHJcbiAgfTtcclxuICBcclxuICB0aGlzLmFkZFRvR3JvdXAgPSBmdW5jdGlvbigpIHtcclxuICAgIHNhdmVIZWxwZXIuc2F2ZUl0ZW0odm0uZ3JvdXBOYW1lLCB2bS5pdGVtKTtcclxuICAgIHRoaXMuc2F2ZWRJdGVtcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgdm0uY2xlYXJHcm91cCgpO1xyXG4gICAgdm0ub25DaGFuZ2UoKTtcclxuICB9O1xyXG4gIFxyXG4gIHRoaXMucmVwbGFjZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGl0ZW0ucmVwbGFjZUl0ZW0gPSB0cnVlO1xyXG4gICAgdmFyIG5ld0l0ZW1MaXN0ID0gW107XHJcbiAgICBhbmd1bGFyLmZvckVhY2godm0uc2F2ZWRJdGVtc1t2bS5ncm91cE5hbWVdLml0ZW1zLCBmdW5jdGlvbihnSXRlbSwgaW5kZXgpIHtcclxuICAgICAgaWYoZ0l0ZW0ucmVwbGFjZUl0ZW0pIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZm91bmQgcmVwbGFjZSBpdGVtJyk7XHJcbiAgICAgICAgbmV3SXRlbUxpc3QucHVzaCh2bS5pdGVtKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBuZXdJdGVtTGlzdC5wdXNoKGdJdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHNhdmVIZWxwZXIudXBkYXRlZFNhdmVkSXRlbXModm0uZ3JvdXBOYW1lLCBuZXdJdGVtTGlzdCk7XHJcbiAgICB0aGlzLnNhdmVkSXRlbXMgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICAgIHZtLmNsZWFyR3JvdXAoKTtcclxuICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgfTtcclxuICBcclxuICBmdW5jdGlvbiBzYXZlR3JvdXAoKSB7XHJcbiAgICBzYXZlSGVscGVyLnNhdmVCdWlsZFNlbGVjdGlvbih2bS5ncm91cE5hbWUsIHZtLnNhdmVkSXRlbXMpO1xyXG4gIH1cclxuICBcclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUdyb3VwQXNzaWdubWVudCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgICAgY29tcGFjdDogJz1jb21wYWN0JyxcclxuICAgICAgb25DaGFuZ2U6ICcmb25DaGFuZ2UnXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2dyb3VwQXNzaWdubWVudEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnZWRpdEN0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2dyb3VwLWFzc2lnbm1lbnQuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdEN1c3RvbUN0cmwnLFxyXG5cclxuWydoQ29kZVZhbHVlcycsJyRzY29wZScsXHJcbmZ1bmN0aW9uKGhDb2RlVmFsdWVzLCRzY29wZSkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIGlmKHRoaXMuaXRlbS5pdGVtU291cmNlICE9ICdjdXN0b20nICYmIHRoaXMuaXRlbS50eXBlTmFtZSAhPSAnY3VzdG9tJykge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICB0aGlzLnN0YXRNYXAgPSB7fTtcclxuICBcclxuICAvLyBjb25zb2xlLmxvZyh2bS5pdGVtLnN0YXRzKTtcclxuICBfLmZvckVhY2godm0uaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dvdCBzdGF0Jywgc3RhdC5pZCk7XHJcbiAgICB2bS5zdGF0TWFwW3N0YXQuaWRdID0gc3RhdC5tYXg7XHJcbiAgfSk7XHJcbiAgXHJcbiAgZm9yKHZhciBzdGF0SWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgICRzY29wZS4kd2F0Y2goJ2VkaXRDdHJsLnN0YXRNYXBbJyArIHN0YXRJZCArICddJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7IFxyXG5cclxuICAgICAgaWYobmV3VmFsdWUgIT0gb2xkVmFsdWUpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzdGF0SWQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd3YXRjaCBnb3Qgc3RhdCB2YWx1ZScsIG5ld1ZhbHVlKTtcclxuXHJcbiAgICAgICAgdmFyIGFueUNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBuZXdTdGF0cyA9IFtdO1xyXG4gICAgICAgIGZvcih2YXIgc3RhdElkIGluIHZtLnN0YXRNYXApIHtcclxuXHJcbiAgICAgICAgICBpZighdm0uc3RhdE1hcFtzdGF0SWRdIHx8ICFOdW1iZXIodm0uc3RhdE1hcFtzdGF0SWRdKSkge1xyXG4gICAgICAgICAgICBfLmVhY2godm0uaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCkgeyBcclxuICAgICAgICAgICAgICBpZihzdGF0LmlkID09IHN0YXRJZCkge1xyXG4gICAgICAgICAgICAgICAgYW55Q2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld1N0YXRzLnB1c2goe1xyXG4gICAgICAgICAgICAgIGlkOiBOdW1iZXIoc3RhdElkKSxcclxuICAgICAgICAgICAgICBtYXg6IE51bWJlcih2bS5zdGF0TWFwW3N0YXRJZF0pXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIF8uZWFjaCh2bS5pdGVtLnN0YXRzLCBmdW5jdGlvbihzdGF0KSB7XHJcbiAgICAgICAgICAgICAgaWYoc3RhdC5pZCA9PSBzdGF0SWQpIHtcclxuICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjb21wYXJpbmcnLCBzdGF0Lm1heCwgdm0uc3RhdE1hcFtzdGF0SWRdKTtcclxuICAgICAgICAgICAgICAgIGlmKCEoc3RhdElkIGluIHZtLnN0YXRNYXApIHx8IHN0YXQubWF4ICE9IHZtLnN0YXRNYXBbc3RhdElkXSkge1xyXG4gICAgICAgICAgICAgICAgICBhbnlDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYoIWZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgYW55Q2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoYW55Q2hhbmdlKSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnR09UIENIQU5HRVMhJywgbmV3U3RhdHMpO1xyXG4gICAgICAgICAgdm0uaXRlbS5zdGF0cyA9IG5ld1N0YXRzO1xyXG4gICAgICAgICAgdm0ub25DaGFuZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1FZGl0Q3VzdG9tJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0Q3VzdG9tQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdlZGl0Q3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS1lZGl0LWN1c3RvbS5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2l0ZW1FZGl0RW5jaGFudG1lbnRDdHJsJyxcclxuXHJcbmZ1bmN0aW9uKGRudERhdGEsaENvZGVWYWx1ZXMsaXRlbXMsJHRpbWVvdXQsdHJhbnNsYXRpb25zLGl0ZW1Db2x1bW5zVG9Mb2FkLGl0ZW1GYWN0b3J5KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgaWYoIXZtLml0ZW0gfHwgIXZtLml0ZW0uZW5jaGFudG1lbnRJZCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBpZignaXRlbVNvdXJjZScgaW4gdGhpcy5pdGVtKSB7XHJcbiAgICB2bS5pdGVtVHlwZSA9IGl0ZW1zW3ZtLml0ZW0uaXRlbVNvdXJjZV07XHJcbiAgfVxyXG4gIFxyXG4gIGlmKCF2bS5pdGVtVHlwZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZighKCdlbmNoYW50RG50JyBpbiB2bS5pdGVtVHlwZSkgJiYgISgncGV0TGV2ZWxEbnQnIGluIHZtLml0ZW1UeXBlKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBpZih2bS5pdGVtVHlwZS5lbmNoYW50RG50KSB7XHJcbiAgICBkbnREYXRhLmluaXQodm0uaXRlbVR5cGUuZW5jaGFudERudCwgaXRlbUNvbHVtbnNUb0xvYWQuZW5jaGFudERudCwgbnVsbCwgdm0uZ2V0RW5jaGFudG1lbnRzKTtcclxuICB9XHJcbiAgXHJcbiAgaWYodm0uaXRlbVR5cGUucGV0TGV2ZWxEbnQpIHtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5wZXREbnQsIGl0ZW1Db2x1bW5zVG9Mb2FkLnBldERudCwgbnVsbCwgdm0uZ2V0RW5jaGFudG1lbnRzKTtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5wZXRMZXZlbERudCwgaXRlbUNvbHVtbnNUb0xvYWQucGV0TGV2ZWxEbnQsIG51bGwsIHZtLmdldEVuY2hhbnRtZW50cyk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLmVuY2hhbnRtZW50cyA9IG51bGw7XHJcbiAgdm0uZW5jaGFudG1lbnQgPSBudWxsO1xyXG4gIHZtLmVuY2hhbnRtZW50QWZ0ZXIgPSBudWxsO1xyXG4gIHZtLmVuY2hhbnRtZW50Q29zdCA9ICcnO1xyXG4gIHZtLmVuaGFuY2VtZW50T3B0aW9ucyA9IFtdO1xyXG4gIGlmKHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cyA9PSBudWxsKSB7XHJcbiAgICB2bS5pdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBbXTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5zZXRFbmNoYW50bWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdm0uaXRlbS5lbmNoYW50bWVudFN0YXRzID0gW107XHJcblxyXG4gICAgaWYodm0uZW5jaGFudG1lbnRzICYmIHZtLmVuY2hhbnRtZW50cy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICBpZih0eXBlb2Ygdm0uaXRlbS5lbmNoYW50bWVudE51bSAhPSAnbnVtYmVyJykge1xyXG4gICAgICAgIHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPSAwO1xyXG4gICAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGZvcih2YXIgaT0wO2k8dm0uZW5jaGFudG1lbnRzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBpZih2bS5pdGVtLmVuY2hhbnRtZW50TnVtID09IGdldEVuY2hhbnRMZXZlbChpKSkge1xyXG4gICAgICAgICAgdm0uZW5jaGFudG1lbnQgPSB2bS5lbmNoYW50bWVudHNbaV07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZtLml0ZW0uZW5jaGFudG1lbnRTdGF0cyA9IGhDb2RlVmFsdWVzLmdldFN0YXRzKHZtLmVuY2hhbnRtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZih2bS5pdGVtLmVuY2hhbnRtZW50TnVtICsgMSA9PSBnZXRFbmNoYW50TGV2ZWwoaSkpIHtcclxuICAgICAgICAgIHZtLmVuY2hhbnRtZW50QWZ0ZXIgPSB2bS5lbmNoYW50bWVudHNbaV07XHJcbiAgICAgICAgICBpZih2bS5lbmNoYW50bWVudEFmdGVyLk5lZWRDb2luIDwgMTAwMDApIHtcclxuICAgICAgICAgICAgdm0uZW5jaGFudG1lbnRDb3N0ID0gTWF0aC5yb3VuZCh2bS5lbmNoYW50bWVudEFmdGVyLk5lZWRDb2luIC8gMTAwMCkvMTAgKyAnZyc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdm0uZW5jaGFudG1lbnRDb3N0ID0gTWF0aC5yb3VuZCh2bS5lbmNoYW50bWVudEFmdGVyLk5lZWRDb2luIC8gMTAwMDApICsgJ2cnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRFbmNoYW50TGV2ZWwobnVtKSB7XHJcbiAgICBpZigncGV0TGV2ZWxEbnQnIGluIHZtLml0ZW1UeXBlKSB7XHJcbiAgICAgIHJldHVybiB2bS5lbmNoYW50bWVudHNbbnVtXS5QZXRMZXZlbDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdm0uZW5jaGFudG1lbnRzW251bV0uRW5jaGFudExldmVsO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnNldFBldExldmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5pdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBbXTtcclxuXHJcbiAgICBpZih2bS5lbmNoYW50bWVudHMgJiYgdm0uZW5jaGFudG1lbnRzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgIGlmKHR5cGVvZiB2bS5pdGVtLmVuY2hhbnRtZW50TnVtICE9ICdudW1iZXInKSB7XHJcbiAgICAgICAgdm0uaXRlbS5lbmNoYW50bWVudE51bSA9IDY7XHJcbiAgICAgICAgdm0ub25DaGFuZ2UoKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZm9yKHZhciBpPTA7aTx2bS5lbmNoYW50bWVudHMubGVuZ3RoOysraSkge1xyXG4gICAgICAgIGlmKHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPT0gdm0uZW5jaGFudG1lbnRzW2ldLlBldExldmVsKSB7XHJcbiAgICAgICAgICB2bS5lbmNoYW50bWVudCA9IHZtLmVuY2hhbnRtZW50c1tpXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdm0uaXRlbS5lbmNoYW50bWVudFN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHModm0uZW5jaGFudG1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmlzTWF4RW5jaGFudExldmVsID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgaWYodm0uZW5jaGFudG1lbnRzICE9IG51bGwgJiZcclxuICAgICAgdm0uZW5jaGFudG1lbnRzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgdHlwZW9mIHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPT0gJ251bWJlcicpIHtcclxuXHJcbiAgICAgIGZvcih2YXIgaT0wO2k8dm0uZW5jaGFudG1lbnRzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBpZih2bS5pdGVtLmVuY2hhbnRtZW50TnVtICsgMSA9PSBnZXRFbmNoYW50TGV2ZWwoaSkpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLnNldEVuY2hhbnRtZW50TnVtID0gZnVuY3Rpb24oZW5oYW5jZW1lbnRPcHRpb24pIHtcclxuICAgIHZtLml0ZW0uZW5jaGFudG1lbnROdW0gPSBlbmhhbmNlbWVudE9wdGlvbjtcclxuICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucyA9IFtdO1xyXG4gICAgaWYoJ3BldExldmVsRG50JyBpbiB2bS5pdGVtVHlwZSkge1xyXG4gICAgICB2bS5zZXRQZXRMZXZlbCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZtLnNldEVuY2hhbnRtZW50KCk7XHJcbiAgICB9XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLm5leHRFbmNoYW50bWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yKHZhciBpPXZtLml0ZW0uZW5jaGFudG1lbnROdW07aT09MHx8dm0uZW5jaGFudG1lbnRzW2ktMV07KytpKSB7XHJcbiAgICAgIGlmKGkgPT0gMCkge1xyXG4gICAgICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucy5wdXNoKHtudW1iZXI6IDB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5lbmhhbmNlbWVudE9wdGlvbnMucHVzaCh2bS5nZXRPcHRpb24oaS0xKSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5wcmV2RW5jaGFudG1lbnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucyA9IFtdO1xyXG4gICAgZm9yKHZhciBpPXZtLml0ZW0uZW5jaGFudG1lbnROdW07aT4wOy0taSkge1xyXG4gICAgICB2bS5lbmhhbmNlbWVudE9wdGlvbnMucHVzaCh2bS5nZXRPcHRpb24oaS0xKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLmVuaGFuY2VtZW50T3B0aW9ucy5wdXNoKHtudW1iZXI6IDB9KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRPcHRpb24gPSBmdW5jdGlvbihlbmNoYW50bWVudE51bSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbnVtYmVyOiBnZXRFbmNoYW50TGV2ZWwoZW5jaGFudG1lbnROdW0pLFxyXG4gICAgICBzdGF0czogaENvZGVWYWx1ZXMuZ2V0U3RhdHModm0uZW5jaGFudG1lbnRzW2VuY2hhbnRtZW50TnVtXSlcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0RW5jaGFudG1lbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZighdm0uZW5jaGFudG1lbnRzICYmIHZtLml0ZW0gJiYgdm0uaXRlbS5lbmNoYW50bWVudElkKSB7XHJcbiAgICAgIGlmKHZtLml0ZW1UeXBlLmVuY2hhbnREbnQgJiYgZG50RGF0YS5pc0xvYWRlZCh2bS5pdGVtVHlwZS5lbmNoYW50RG50KSkge1xyXG4gICAgICAgIHZtLmVuY2hhbnRtZW50cyA9IGRudERhdGEuZmluZCh2bS5pdGVtVHlwZS5lbmNoYW50RG50LCAnRW5jaGFudElEJywgdm0uaXRlbS5lbmNoYW50bWVudElkKTtcclxuICAgICAgICB2bS5zZXRFbmNoYW50bWVudCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHZtLml0ZW1UeXBlLnBldExldmVsRG50ICYmIGRudERhdGEuaXNMb2FkZWQodm0uaXRlbVR5cGUucGV0TGV2ZWxEbnQpKSB7XHJcbiAgICAgICAgdm0uZW5jaGFudG1lbnRzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBldExldmVsRG50LCAnUGV0TGV2ZWxUeXBlSUQnLCB2bS5pdGVtLmVuY2hhbnRtZW50SWQpO1xyXG4gICAgICAgIHZtLnNldFBldExldmVsKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHZtLmVuY2hhbnRtZW50cztcclxuICB9XHJcbiAgXHJcbiAgdmFyIGZpbGVOYW1lID0gJ2FsbC1pdGVtcy5sempzb24nO1xyXG4gIFxyXG4gIHRoaXMuc2hvd01hdGVyaWFscyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVOYW1lLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoIXZtLmVuY2hhbnRtZW50QWZ0ZXIpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdm0ubWF0ZXJpYWxzID0gW107XHJcbiAgICAgICAgZm9yKHZhciBpPTE7aTw9NTsrK2kpIHtcclxuICAgICAgICAgIHZhciBpdGVtSWQgPSB2bS5lbmNoYW50bWVudEFmdGVyWydOZWVkSXRlbUlEJyArIGldO1xyXG4gICAgICAgICAgdmFyIGl0ZW1Db3VudCA9IHZtLmVuY2hhbnRtZW50QWZ0ZXJbJ05lZWRJdGVtQ291bnQnICsgaV07XHJcbiAgICAgICAgICBpZihpdGVtSWQgPiAwICYmIGl0ZW1Db3VudCA+IDApIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ2lkJywgaXRlbUlkKTtcclxuICAgICAgICAgICAgaWYoaXRlbXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICB2bS5tYXRlcmlhbHMucHVzaCh7bnVtOiBpdGVtQ291bnQsIG5hbWU6ICd1bmtub3duICgnICsgaXRlbUlkICsgJyknfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBpdGVtc1swXTsgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGlmKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHtcclxuICAgICAgICAgICAgICAgICAgaXRlbTogaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW0pLFxyXG4gICAgICAgICAgICAgICAgICBudW06IGl0ZW1Db3VudCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2bS5tYXRlcmlhbHMucHVzaChtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBpZihkbnREYXRhLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgdGhpcy5zaG93TWF0ZXJpYWxzKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXBvcnRQcm9ncmVzcyhtc2cpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdwcm9ncmVzczogJyArIG1zZyk7XHJcbiAgfVxyXG59KVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdEVuY2hhbnRtZW50JywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0RW5jaGFudG1lbnRDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtZW5jaGFudG1lbnQuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdFBvdGVudGlhbEN0cmwnLFxyXG5cclxuWydkbnREYXRhJywnaXRlbXMnLCdoQ29kZVZhbHVlcycsJ2l0ZW1Db2x1bW5zVG9Mb2FkJyxcclxuZnVuY3Rpb24oZG50RGF0YSxpdGVtcyxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHRoaXMucG90ZW50aWFscyA9IG51bGw7XHJcbiAgdGhpcy5wb3RlbnRpYWwgPSBudWxsO1xyXG4gIHRoaXMuY2hhbmdpbmdQb3RlbnRpYWxzID0gZmFsc2U7XHJcbiAgdGhpcy5wb3RlbnRpYWxTdGF0cyA9IHt9O1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgXHJcbiAgaWYoJ2l0ZW1Tb3VyY2UnIGluIHRoaXMuaXRlbSkge1xyXG4gICAgdGhpcy5pdGVtVHlwZSA9IGl0ZW1zW3RoaXMuaXRlbS5pdGVtU291cmNlXTtcclxuICB9XHJcbiAgXHJcbiAgaWYoIXRoaXMuaXRlbVR5cGUgfHwgIXRoaXMuaXRlbS5waWQgfHwgISgncG90ZW50aWFsRG50JyBpbiB0aGlzLml0ZW1UeXBlKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBpZih2bS5pdGVtVHlwZS5wb3RlbnRpYWxEbnQpIHtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5wb3RlbnRpYWxEbnQsIGl0ZW1Db2x1bW5zVG9Mb2FkLnBvdGVudGlhbERudCwgbnVsbCwgdm0uZ2V0UG90ZW50aWFscyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0UG90ZW50aWFscyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYoIXZtLnBvdGVudGlhbHMpIHtcclxuICAgICAgaWYodm0uaXRlbSAmJiB2bS5pdGVtLnBpZCAmJiAncG90ZW50aWFsRG50JyBpbiB2bS5pdGVtVHlwZSkge1xyXG4gICAgICAgIHZhciBwb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBvdGVudGlhbERudCwgJ2lkJywgdm0uaXRlbS5waWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHBvdGVudGlhbHMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHZtLnBvdGVudGlhbCA9IHBvdGVudGlhbHNbMF07XHJcbiAgICAgICAgICB2bS5wb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBvdGVudGlhbERudCwgJ1BvdGVudGlhbElEJywgdm0ucG90ZW50aWFsLlBvdGVudGlhbElEKTtcclxuICAgICAgICAgIHZtLnBvdGVudGlhbFN0YXRzID0gZ2V0UG90ZW50aWFsU3RhdHModm0ucG90ZW50aWFscyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoJ3BvdGVudGlhbERudEV4JyBpbiB2bS5pdGVtVHlwZSkge1xyXG4gICAgICAgICAgcG90ZW50aWFscyA9IGRudERhdGEuZmluZCh2bS5pdGVtVHlwZS5wb3RlbnRpYWxEbnRFeCwgJ2lkJywgdm0uaXRlbS5waWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgaWYocG90ZW50aWFscy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICB2bS5wb3RlbnRpYWwgPSBwb3RlbnRpYWxzWzBdO1xyXG4gICAgICAgICAgICB2bS5wb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKHZtLml0ZW1UeXBlLnBvdGVudGlhbERudEV4LCAnUG90ZW50aWFsSUQnLCB2bS5wb3RlbnRpYWwuUG90ZW50aWFsSUQpO1xyXG4gICAgICAgICAgICB2bS5wb3RlbnRpYWxTdGF0cyA9IGdldFBvdGVudGlhbFN0YXRzKHZtLnBvdGVudGlhbHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdm0ucG90ZW50aWFscztcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5uZXh0UG90ZW50aWFsID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLnBvdGVudGlhbHMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZih2bS5wb3RlbnRpYWwuaWQgPT0gdm0ucG90ZW50aWFsc1tpXS5pZCkge1xyXG4gICAgICAgIHZtLnBvdGVudGlhbCA9IHZtLnBvdGVudGlhbHNbaSsxXTtcclxuICAgICAgICB2bS5pdGVtLnBpZCA9IHZtLnBvdGVudGlhbC5pZDtcclxuICAgICAgICB2bS5vbkNoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdpbmdQb3RlbnRpYWxzID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5wcmV2UG90ZW50aWFsID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLnBvdGVudGlhbHMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZih2bS5wb3RlbnRpYWwuaWQgPT0gdm0ucG90ZW50aWFsc1tpXS5pZCkge1xyXG4gICAgICAgIHZtLnBvdGVudGlhbCA9IHZtLnBvdGVudGlhbHNbaS0xXTtcclxuICAgICAgICB2bS5pdGVtLnBpZCA9IHZtLnBvdGVudGlhbC5pZDtcclxuICAgICAgICB2bS5vbkNoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdpbmdQb3RlbnRpYWxzID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgICBcclxuICB0aGlzLmNoYW5nZVBvdGVudGlhbCA9IGZ1bmN0aW9uKHBpZCkge1xyXG4gICAgZm9yKHZhciBpPTA7aTx2bS5wb3RlbnRpYWxzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYocGlkID09IHZtLnBvdGVudGlhbHNbaV0uaWQpIHtcclxuICAgICAgICB2bS5wb3RlbnRpYWwgPSB2bS5wb3RlbnRpYWxzW2ldO1xyXG4gICAgICAgIHZtLml0ZW0ucGlkID0gdm0ucG90ZW50aWFsLmlkO1xyXG4gICAgICAgIHZtLmNoYW5naW5nUG90ZW50aWFscyA9IGZhbHNlO1xyXG4gICAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaXNGaXJzdFBvdGVudGlhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRQb3RlbnRpYWxzKCk7XHJcbiAgICByZXR1cm4gIXZtLnBvdGVudGlhbHMgfHwgdm0ucG90ZW50aWFscy5sZW5ndGggPD0gMSB8fCAhdm0ucG90ZW50aWFsIHx8IHZtLnBvdGVudGlhbC5pZCA9PSB2bS5wb3RlbnRpYWxzWzBdLmlkO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmlzTGFzdFBvdGVudGlhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5nZXRQb3RlbnRpYWxzKCk7XHJcbiAgICByZXR1cm4gIXZtLnBvdGVudGlhbHMgfHwgdm0ucG90ZW50aWFscy5sZW5ndGggPD0gMSB8fCAhdm0ucG90ZW50aWFsIHx8IHZtLnBvdGVudGlhbC5pZCA9PSB2bS5wb3RlbnRpYWxzW3ZtLnBvdGVudGlhbHMubGVuZ3RoLTFdLmlkO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRQb3RlbnRpYWxTdGF0cygpIHtcclxuICAgIHZhciBwU3RhdHMgPSB7fTtcclxuICAgIHZhciBlbXB0eVN0YXRJZCA9IG51bGw7XHJcbiAgICBcclxuICAgIGlmKHZtLnBvdGVudGlhbHMgIT0gbnVsbCkge1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2godm0ucG90ZW50aWFscywgZnVuY3Rpb24ocCwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgc3RhdHMgPSBbXTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaENvZGVWYWx1ZXMuZ2V0U3RhdHMocCksIGZ1bmN0aW9uKHN0YXQsIHNJbmRleCkge1xyXG4gICAgICAgICAgaWYoIWhDb2RlVmFsdWVzLnN0YXRzW3N0YXQuaWRdLmhpZGUpIHtcclxuICAgICAgICAgICAgc3RhdHMucHVzaChzdGF0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBpZihzdGF0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBwU3RhdHNbcC5pZF0gPSBzdGF0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZighZW1wdHlTdGF0SWQpIHtcclxuICAgICAgICAgIHBTdGF0c1twLmlkXSA9IFtdO1xyXG4gICAgICAgICAgZW1wdHlTdGF0SWQgPSBwLmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBwU3RhdHM7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbUVkaXRQb3RlbnRpYWwnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICAgIG9uQ2hhbmdlOiAnJm9uQ2hhbmdlJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbUVkaXRQb3RlbnRpYWxDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtcG90ZW50aWFsLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbUVkaXRTa2lsbEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJ2RudERhdGEnLCdzdGF0SGVscGVyJyxcclxuZnVuY3Rpb24oJHRpbWVvdXQsZG50RGF0YSxzdGF0SGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgaWYodGhpcy5pdGVtLml0ZW1Tb3VyY2UgIT0gJ3NraWxscycpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgXHJcbiAgaWYoIXRoaXMuaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50TnVtID0gMTtcclxuICB9XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICBmdW5jdGlvbiBnZXREbnRGaWxlKCkge1xyXG4gICAgcmV0dXJuICdza2lsbGxldmVsdGFibGVfY2hhcmFjdGVyJyArIHZtLml0ZW0uYmFzZUpvYk5hbWUgKyB2bS5pdGVtLnB2ZSArICcubHpqc29uJztcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pbml0U2tpbGxzID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZG50RmlsZSA9IGdldERudEZpbGUoKTtcclxuICAgIGRudERhdGEuaW5pdChkbnRGaWxlLCBudWxsLCByZXBvcnRQcm9ncmVzcywgZnVuY3Rpb24oKSB7ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5za2lsbERhdGEgPSBkbnREYXRhLmZpbmQoZG50RmlsZSwgJ1NraWxsSW5kZXgnLCB2bS5pdGVtLmlkKTtcclxuICAgIH0pfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMubmV4dEVuY2hhbnRtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLnNraWxsRGF0YSAmJiB0aGlzLml0ZW0uZW5jaGFudG1lbnROdW0gPCB0aGlzLnNraWxsRGF0YS5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50TnVtKys7XHJcbiAgICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaXNNYXhTa2lsbExldmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5za2lsbERhdGEgJiYgdGhpcy5pdGVtICYmIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bSA+PSB0aGlzLnNraWxsRGF0YS5sZW5ndGg7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMucHJldkVuY2hhbnRtZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLml0ZW0uZW5jaGFudG1lbnROdW0gPiAwKSB7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bS0tO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgdm0ub25DaGFuZ2UoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gcmVwb3J0UHJvZ3Jlc3MobXNnKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncHJvZ3Jlc3M6ICcgKyBtc2cpO1xyXG4gIH1cclxuICBcclxuICBkbnREYXRhLmluaXQoZ2V0RG50RmlsZSgpLCBudWxsLCBudWxsLCB2bS5pbml0U2tpbGxzKTtcclxuXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdFNraWxsJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0U2tpbGxDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtc2tpbGwuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdFNwYXJrQ3RybCcsXHJcblxyXG5bJ2RudERhdGEnLCdoQ29kZVZhbHVlcycsJ2l0ZW1zJywnaXRlbUNvbHVtbnNUb0xvYWQnLFxyXG5mdW5jdGlvbihkbnREYXRhLGhDb2RlVmFsdWVzLGl0ZW1zLGl0ZW1Db2x1bW5zVG9Mb2FkKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBpZignaXRlbVNvdXJjZScgaW4gdGhpcy5pdGVtKSB7XHJcbiAgICB0aGlzLml0ZW1UeXBlID0gaXRlbXNbdGhpcy5pdGVtLml0ZW1Tb3VyY2VdO1xyXG4gIH1cclxuICBcclxuICBpZighdm0uaXRlbVR5cGUgfHwgIXZtLml0ZW1UeXBlLnNwYXJrRG50KSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgXHJcbiAgaWYodm0uaXRlbVR5cGUuc3BhcmtEbnQpIHtcclxuICAgIGRudERhdGEuaW5pdCh2bS5pdGVtVHlwZS5zcGFya0RudCwgaXRlbUNvbHVtbnNUb0xvYWQuc3BhcmtEbnQsIG51bGwsIHZtLmdldFNwYXJrcyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc3BhcmtzID0gbnVsbDtcclxuXHJcbiAgdGhpcy5uZXh0U3BhcmsgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpbmRleCA9IGdldFBvdGVudGlhbEluZGV4KCk7XHJcbiAgICBpbmRleCsrO1xyXG4gICAgaWYoaW5kZXggPj0gdm0uc3BhcmtzLmxlbmd0aCkge1xyXG4gICAgICBpbmRleCA9IDA7XHJcbiAgICB9XHJcbiAgICB2YXIgc3BhcmsgPSB2bS5zcGFya3NbaW5kZXhdOyBcclxuICAgIHZtLml0ZW0uc3BhcmtJZCA9IHNwYXJrLmlkO1xyXG4gICAgdm0uaXRlbS5zcGFya1N0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMoc3BhcmspO1xyXG4gICAgdm0ub25DaGFuZ2UoKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pc01vcmVTcGFya3MgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB2bS5zcGFya3MgIT0gbnVsbCAmJiBnZXRQb3RlbnRpYWxJbmRleCgpID49IHZtLnNwYXJrcy5sZW5ndGgtMTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pc0ZpcnN0U3BhcmsgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBnZXRQb3RlbnRpYWxJbmRleCgpID09IDA7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMucHJldlNwYXJrID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgaW5kZXggPSBnZXRQb3RlbnRpYWxJbmRleCgpO1xyXG4gICAgaW5kZXgtLTtcclxuICAgIGlmKGluZGV4IDwgMCkge1xyXG4gICAgICBpbmRleCA9IHZtLnNwYXJrcy5sZW5ndGgtMTtcclxuICAgIH1cclxuICAgIHZhciBzcGFyayA9IHZtLnNwYXJrc1tpbmRleF07IFxyXG4gICAgdm0uaXRlbS5zcGFya0lkID0gc3BhcmsuaWQ7XHJcbiAgICB2bS5pdGVtLnNwYXJrU3RhdHMgPSBoQ29kZVZhbHVlcy5nZXRTdGF0cyhzcGFyayk7XHJcbiAgICB2bS5vbkNoYW5nZSgpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnJlbW92ZVNwYXJrID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS5pdGVtLnNwYXJrSWQgPSBudWxsO1xyXG4gICAgdm0uaXRlbS5zcGFya1N0YXRzID0gbnVsbDtcclxuICAgIHZtLm9uQ2hhbmdlKCk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0U3BhcmtzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5pdGVtID09IG51bGwgfHwgdm0uaXRlbVR5cGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICBpZih2bS5zcGFya3MgPT0gbnVsbCkge1xyXG4gICAgICB2YXIgc2lkID0gdm0uaXRlbS5zcGFya1R5cGVJZDtcclxuICAgICAgaWYoc2lkKSB7XHJcbiAgICAgICAgaWYoZG50RGF0YS5pc0xvYWRlZCh2bS5pdGVtVHlwZS5zcGFya0RudCkpIHtcclxuICAgICAgICAgIHZtLnNwYXJrcyA9IGRudERhdGEuZmluZCh2bS5pdGVtVHlwZS5zcGFya0RudCwgJ1BvdGVudGlhbElEJywgc2lkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHZtLnNwYXJrcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFBvdGVudGlhbEluZGV4KCkge1xyXG4gICAgdmFyIHBvdGVudGlhbEluZGV4ID0gLTE7XHJcbiAgICBpZih2bS5pdGVtLnNwYXJrSWQgPiAwKSB7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5zcGFya3MsIGZ1bmN0aW9uKHNwYXJrLCBpbmRleCkge1xyXG4gICAgICAgIGlmKHNwYXJrLmlkID09IHZtLml0ZW0uc3BhcmtJZCkge1xyXG4gICAgICAgICAgcG90ZW50aWFsSW5kZXggPSBpbmRleDtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgICBcclxuICAgIHJldHVybiBwb3RlbnRpYWxJbmRleDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdFNwYXJrJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0U3BhcmtDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtc3BhcmsuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdFRhbGlzbWFuQ3RybCcsXHJcblxyXG5bZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgaWYodGhpcy5pdGVtLml0ZW1Tb3VyY2UgIT0gJ3RtYW4nKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2V0VGFsaXNtYW4gPSBmdW5jdGlvbihhbW91bnQpIHtcclxuICAgIGlmKGFtb3VudCA9PSAwKSB7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudE51bSA9IG51bGw7XHJcbiAgICAgIHRoaXMuaXRlbS5lbmNoYW50bWVudFN0YXRzID0gW107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50TnVtID0gYW1vdW50O1xyXG4gICAgICBcclxuICAgICAgdmFyIGV4dHJhU3RhdHMgPSBbXTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgICBleHRyYVN0YXRzLnB1c2goe2lkOiBzdGF0LmlkLCBtYXg6IHN0YXQubWF4ICogKGFtb3VudC8xMDApfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5pdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBleHRyYVN0YXRzO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vbkNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtRWRpdFRhbGlzbWFuJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBvbkNoYW5nZTogJyZvbkNoYW5nZScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1FZGl0VGFsaXNtYW5DdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2VkaXRDdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLWVkaXQtdGFsaXNtYW4uaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtRWRpdEN0cmwnLFxyXG5cclxuWydoQ29kZVZhbHVlcycsXHJcbmZ1bmN0aW9uKGhDb2RlVmFsdWVzKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgXHJcbiAgaWYoIXZtLml0ZW0pIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgXHJcbiAgdm0ub25VcGRhdGVJdGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2bS51cGRhdGVJdGVtKCk7XHJcbiAgfVxyXG4gIFxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbUVkaXQnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICAgIG9uQ2hhbmdlOiAnJm9uQ2hhbmdlJyxcclxuICAgICAgdXBkYXRlSXRlbTogJyZ1cGRhdGVJdGVtJ1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdpdGVtRWRpdEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS1lZGl0Lmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdCb3hDdHJsJyxcclxuXHJcblsnJHRpbWVvdXQnLCdkbnREYXRhJywnaXRlbUZhY3RvcnknLFxyXG4gIGZ1bmN0aW9uKCR0aW1lb3V0LCBkbnREYXRhLCBpdGVtRmFjdG9yeSkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIGlmKHRoaXMuaXRlbS50eXBlSWQgIT0gNDYgJiYgdGhpcy5pdGVtLnR5cGVJZCAhPSA4ICYmIHRoaXMuaXRlbS50eXBlSWQgIT0gMTEyICYmIHRoaXMuaXRlbS50eXBlSWQgIT0gMTIyICYmIHRoaXMuaXRlbS50eXBlSWQgIT0gMTQyKSB7XHJcbiAgICBjb25zb2xlLmxvZygnbm90IGJveCBpdGVtIHR5cGUgJyArIHRoaXMuaXRlbS50eXBlSWQpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZhciBwb3VjaEZpbGVOYW1lcyA9IFtcclxuICAgICdpdGVtZHJvcHRhYmxlLmx6anNvbicsXHJcbiAgICAnaXRlbWRyb3B0YWJsZV9hYnlzcy5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfYXBwcmVudGljZS5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfY29vay5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfZGFya2xhaXIubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2RpbWVuc2lvbi5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfZGlzam9pbnQubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2RuZXhwZWRpdGlvbi5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfZXZlbnQubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2Zhcm0ubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2Zpc2hpbmcubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX2d1aWxkd2FyLmx6anNvbicsXHJcbiAgICAnaXRlbWRyb3B0YWJsZV9pdGVtLmx6anNvbicsXHJcbiAgICAnaXRlbWRyb3B0YWJsZV9tb25zdGVyaXRlbS5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfcHJvcGRyb3AubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX3B2cC5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfcmFuZG9tY29tcG91bmQubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX3N0YWdlY2xlYXIubHpqc29uJyxcclxuICAgICdpdGVtZHJvcHRhYmxlX3RoZW1lcGFyay5sempzb24nLFxyXG4gICAgJ2l0ZW1kcm9wdGFibGVfdW5pb24ubHpqc29uJ11cclxuICBcclxuICB2YXIgYWxsSXRlbUZpbGVOYW1lID0gJ2FsbC1pdGVtcy5sempzb24nO1xyXG4gIHZhciBjaGFybUl0ZW10YWJsZSA9ICdjaGFybWl0ZW10YWJsZS5sempzb24nO1xyXG4gIHZhciBjb21tb25DaGFybUl0ZW10YWJsZSA9ICdjaGFybWl0ZW10YWJsZV9jb21tb24ubHpqc29uJztcclxuICBcclxuICB2YXIgZmlsZXM7XHJcbiAgaWYodGhpcy5pdGVtLnR5cGVJZCA9PSA0NiB8fCB0aGlzLml0ZW0udHlwZUlkID09IDExMiB8fCB0aGlzLml0ZW0udHlwZUlkID09IDEyMiB8fCB0aGlzLml0ZW0udHlwZUlkID09IDE0Mikge1xyXG4gICAgZmlsZXMgPSBbYWxsSXRlbUZpbGVOYW1lLCBjaGFybUl0ZW10YWJsZSwgY29tbW9uQ2hhcm1JdGVtdGFibGVdO1xyXG4gIH1cclxuICBlbHNlIGlmICh0aGlzLml0ZW0udHlwZUlkID09IDgpIHtcclxuICAgIGZpbGVzID0gW2FsbEl0ZW1GaWxlTmFtZV0uY29uY2F0KHBvdWNoRmlsZU5hbWVzKTtcclxuICB9XHJcblxyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdEJveENvbnRlbnRzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaW5pdEJveENvbnRlbnRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnaW5pdCBjb250ZW50cycsIHRoaXMuaXRlbS5maWxlTmFtZSk7XHJcblxyXG4gICAgZm9yKHZhciBpPTA7aTxmaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVzW2ldKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBkYXRhcyA9IGRudERhdGEuZmluZCh0aGlzLml0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsICdpZCcsIHRoaXMuaXRlbS5pZCk7XHJcbiAgICBpZihkYXRhcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHZhciBkID0gZGF0YXNbMF07XHJcbiAgICAgIHZtLml0ZW1zID0gW107XHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgICAgaWYodm0uaXRlbS50eXBlSWQgPT0gNDYgfHwgdm0uaXRlbS50eXBlSWQgPT0gMTEyIHx8IHZtLml0ZW0udHlwZUlkID09IDEyMiB8fCB2bS5pdGVtLnR5cGVJZCA9PSAxNDIpIHtcclxuICAgICAgICB2bS5nZXRDaGFybUl0ZW1zKGQuVHlwZVBhcmFtMSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAodm0uaXRlbS50eXBlSWQgPT0gOCkge1xyXG4gICAgICAgIHZtLmdldFBvdWNoSXRlbXMoZC5UeXBlUGFyYW0xKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRQb3VjaEl0ZW1zID0gZnVuY3Rpb24oYm94VHlwZSkge1xyXG4gICAgZm9yKHZhciBmPTA7Zjxwb3VjaEZpbGVOYW1lcy5sZW5ndGg7KytmKSB7XHJcbiAgICAgIHZtLmdldFBvdWNoSXRlbXNGcm9tRmlsZShib3hUeXBlLCBwb3VjaEZpbGVOYW1lc1tmXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0UG91Y2hJdGVtc0Zyb21GaWxlID0gZnVuY3Rpb24oYm94VHlwZSwgcG91Y2hGaWxlTmFtZSkge1xyXG4gICAgXHJcbiAgICB2YXIgcG91Y2hEYXRhID0gZG50RGF0YS5maW5kKHBvdWNoRmlsZU5hbWUsICdpZCcsIGJveFR5cGUpO1xyXG4gICAgaWYocG91Y2hEYXRhLmxlbmd0aCA9PSAwKSB7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdmFyIGdvbGQgPSBwb3VjaERhdGFbMF0uR29sZE1pbjtcclxuXHJcbiAgICAgIHZhciBpdGVtSW5kZXggPSAwO1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgaXRlbUluZGV4Kys7XHJcbiAgICAgICAgdmFyIGlzR3JvdXAgPSBwb3VjaERhdGFbMF1bJ0lzR3JvdXAnICsgaXRlbUluZGV4XTtcclxuICAgICAgICB2YXIgcG91Y2hJdGVtID0gcG91Y2hEYXRhWzBdWydJdGVtJyArIGl0ZW1JbmRleCArICdJbmRleCddO1xyXG4gICAgICAgIHZhciBwb3VjaEl0ZW1Db3VudCA9IHBvdWNoRGF0YVswXVsnSXRlbScgKyBpdGVtSW5kZXggKyAnSW5mbyddO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ3BvdWNoIGNvbnRhaW5zICcgKyBwb3VjaEl0ZW0pO1xyXG4gICAgICAgIGlmKHBvdWNoSXRlbSkge1xyXG4gICAgICAgICAgaWYoaXNHcm91cCkge1xyXG4gICAgICAgICAgICB2bS5nZXRQb3VjaEl0ZW1zKHBvdWNoSXRlbSwgcG91Y2hGaWxlTmFtZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2FkZGluZyBpdGVtICcgKyBwb3VjaEl0ZW0pO1xyXG4gICAgICAgICAgICB2YXIgaXRlbWRzID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgcG91Y2hJdGVtKTtcclxuICAgICAgICAgICAgaWYoaXRlbWRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICB2YXIgYmFzaWNJdGVtID0gaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW1kc1swXSk7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZvdW5kIGl0ZW0gJyArIGJhc2ljSXRlbS5uYW1lKTtcclxuICBcclxuICAgICAgICAgICAgICB2bS5pdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGNvdW50OiBwb3VjaEl0ZW1Db3VudCxcclxuICAgICAgICAgICAgICAgIGdvbGQ6IGdvbGQsXHJcbiAgICAgICAgICAgICAgICBpdGVtOiBiYXNpY0l0ZW1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSB3aGlsZShwb3VjaEl0ZW0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmdldENoYXJtSXRlbXMgPSBmdW5jdGlvbihib3hUeXBlKSB7XHJcbiAgICB2YXIgY2hhcm1GaWxlcyA9IFtjaGFybUl0ZW10YWJsZSwgY29tbW9uQ2hhcm1JdGVtdGFibGVdO1xyXG4gICAgZm9yKHZhciBpPTA7aTxjaGFybUZpbGVzLmxlbmd0aDsrK2kpIHtcclxuXHJcbiAgICAgIHZhciBjaGFybURhdGEgPSBkbnREYXRhLmdldERhdGEoY2hhcm1GaWxlc1tpXSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdib3g6ICcgKyBib3hUeXBlLCBjaGFybURhdGEpO1xyXG4gICAgICBcclxuICAgICAgZm9yKHZhciBjPTA7YzxjaGFybURhdGEubGVuZ3RoOysrYykge1xyXG4gICAgICAgIHZhciBjZCA9IGNoYXJtRGF0YVtjXTtcclxuICAgICAgICBpZihjZC5DaGFybU51bSA9PSBib3hUeXBlICYmIGNkLkxvb2spIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoY2QuQ2hhcm1UeXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2hhcm1JdGVtcyhjZC5JdGVtSUQpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW1kcyA9IGRudERhdGEuZmluZChhbGxJdGVtRmlsZU5hbWUsICdpZCcsIGNkLkl0ZW1JRCk7XHJcbiAgICAgICAgICAgIGlmKGl0ZW1kcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgdm0uaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBjb3VudDogY2QuQ291bnQsXHJcbiAgICAgICAgICAgICAgICBnb2xkOiBjZC5Hb2xkLFxyXG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW1kc1swXSlcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1dKVxyXG4uZGlyZWN0aXZlKCdkbmdlYXJzaW1JdGVtVmlld0JveCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdCb3hDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2l0ZW0tdmlldy1ib3guaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdpdGVtVmlld0NyYWZ0Q3RybCcsXHJcblxyXG5bJyR0aW1lb3V0JywnZG50RGF0YScsJ2l0ZW1GYWN0b3J5JywnaENvZGVWYWx1ZXMnLCd0cmFuc2xhdGlvbnMnLFxyXG4gIGZ1bmN0aW9uKCR0aW1lb3V0LCBkbnREYXRhLCBpdGVtRmFjdG9yeSwgaENvZGVWYWx1ZXMsIHRyYW5zbGF0aW9ucykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0uY3JhZnRzID0gW107XHJcblxyXG4gIHZhciBjRmlsZXMgPSBbXHJcbiAgICAnaXRlbWNvbXBvdW5kdGFibGUubHpqc29uJyxcclxuICAgICdpdGVtY29tcG91bmR0YWJsZV9jdXN0b20ubHpqc29uJyxcclxuICAgICdpdGVtY29tcG91bmR0YWJsZV9nbHlwaC5sempzb24nLFxyXG4gICAgJ2l0ZW1jb21wb3VuZHRhYmxlX2pld2VsLmx6anNvbicsXHJcbiAgICAnaXRlbWNvbXBvdW5kdGFibGVfcmVuZXdhbC5sempzb24nLFxyXG4gICAgJ2l0ZW1jb21wb3VuZHRhYmxlX3NldC5sempzb24nXTtcclxuICBcclxuICB2YXIgYWxsSXRlbUZpbGVOYW1lID0gJ2FsbC1pdGVtcy5sempzb24nO1xyXG4gIFxyXG4gIHZhciBmaWxlcyA9IGNGaWxlcy5jb25jYXQoW2FsbEl0ZW1GaWxlTmFtZV0pO1xyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdENyYWZ0cygpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmluaXRDcmFmdHMgPSBmdW5jdGlvbigpIHtcclxuICAgIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZighZG50RGF0YS5pc0xvYWRlZChmaWxlc1tpXSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uY3JhZnRzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPGNGaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZtLmluaXRDcmFmdChjRmlsZXNbaV0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgbmV3Q3JhZnRzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLmNyYWZ0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IodmFyIGo9MDtqPG5ld0NyYWZ0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgaWYodm0uY3JhZnRzW2ldLmdvbGQgPT0gbmV3Q3JhZnRzW2pdLmdvbGQgJiZcclxuICAgICAgICAgIHZtLmNyYWZ0c1tpXS5pdGVtcy5sZW5ndGggPT0gbmV3Q3JhZnRzW2pdLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IodmFyIGs9MDtrPHZtLmNyYWZ0c1tpXS5pdGVtcy5sZW5ndGg7KytrKSB7XHJcbiAgICAgICAgICAgICAgaWYodm0uY3JhZnRzW2ldLml0ZW1zW2tdLml0ZW0uaWQgIT0gbmV3Q3JhZnRzW2pdLml0ZW1zW2tdLml0ZW0uaWQgfHxcclxuICAgICAgICAgICAgICAgIHZtLmNyYWZ0c1tpXS5pdGVtc1trXS5udW0gIT0gbmV3Q3JhZnRzW2pdLml0ZW1zW2tdLm51bSkge1xyXG4gICAgICAgICAgICAgICAgICBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoIWZvdW5kKSB7XHJcbiAgICAgICAgbmV3Q3JhZnRzLnB1c2godm0uY3JhZnRzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5jcmFmdHMgPSBuZXdDcmFmdHM7XHJcbiAgfVxyXG5cclxuICB0aGlzLmluaXRDcmFmdCA9IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICB2YXIgZkNyYWZ0cyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ1N1Y2Nlc3NJdGVtSUQxJywgdm0uaXRlbS5pZCk7XHJcbiAgICBcclxuICAgIGZvcih2YXIgaT0wO2k8ZkNyYWZ0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBjID0gZkNyYWZ0c1tpXTtcclxuICAgICAgXHJcbiAgICAgIHZhciBjcmFmdCA9IHtcclxuICAgICAgICBpZDogYy5pZCxcclxuICAgICAgICBmaWxlTmFtZTogZmlsZU5hbWUucmVwbGFjZSgnLmx6anNvbicsICcnKSxcclxuICAgICAgICBnb2xkOiBjLkNvc3QvMTAwLzEwMCxcclxuICAgICAgICBpdGVtczogW10sXHJcbiAgICAgIH07XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaj0wO1xyXG4gICAgICBmb3IoOzspIHtcclxuICAgICAgICBqKys7XHJcbiAgICAgICAgdmFyIGl0ZW1Db2xOYW1lID0gJ1Nsb3QnICsgaiArJ0lkJztcclxuICAgICAgICB2YXIgcXR5Q29sTmFtZSA9ICdTbG90JyArIGogKydOdW0nO1xyXG4gICAgICAgIGlmKCEoaXRlbUNvbE5hbWUgaW4gYykpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgY1tpdGVtQ29sTmFtZV0pO1xyXG4gICAgICAgIGlmKGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGNyYWZ0Lml0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICBpdGVtOiBpdGVtRmFjdG9yeS5jcmVhdGVCYXNpY0l0ZW0oaXRlbXNbMF0pLFxyXG4gICAgICAgICAgICBudW06IGNbcXR5Q29sTmFtZV0sXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZtLmNyYWZ0cy5wdXNoKGNyYWZ0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbVZpZXdDcmFmdCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdDcmFmdEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS12aWV3LWNyYWZ0Lmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdFeHRyYWN0aW9uQ3RybCcsXHJcblxyXG5bJyR0aW1lb3V0JywnZG50RGF0YScsJ2l0ZW1GYWN0b3J5JywnaXRlbXMnLFxyXG4gIGZ1bmN0aW9uKCR0aW1lb3V0LCBkbnREYXRhLCBpdGVtRmFjdG9yeSwgaXRlbXMpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZhciBleHRyYWN0RmlsZU5hbWUgPSAnaXRlbWRyb3B0YWJsZV9kaXNqb2ludC5sempzb24nO1xyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgXHJcbiAgdmFyIGZpbGVzID0gW2V4dHJhY3RGaWxlTmFtZSxhbGxJdGVtRmlsZU5hbWVdO1xyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdEV4dHJhY3QoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pbml0RXh0cmFjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZm9yKHZhciBpPTA7aTxmaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIGlmKCFkbnREYXRhLmlzTG9hZGVkKGZpbGVzW2ldKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgZGlzam9pbnQ7XHJcbiAgICB2YXIgZCA9IGl0ZW1GYWN0b3J5LmdldEl0ZW1EYXRhKHZtLml0ZW0pO1xyXG4gICAgaWYoZCAmJiBkLkRpc2pvaW50RHJvcDEgPiAwKSB7XHJcbiAgICAgIGRpc2pvaW50ID0gZC5EaXNqb2ludERyb3AxO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgaXRlbVR5cGUgPSBpdGVtc1t2bS5pdGVtLml0ZW1Tb3VyY2VdO1xyXG4gICAgXHJcbiAgICBpZihpdGVtVHlwZSAmJiBkLkVuY2hhbnRJRCkge1xyXG4gICAgICB2YXIgZW5jaGFudG1lbnRzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLmVuY2hhbnREbnQsICdFbmNoYW50SUQnLCBkLkVuY2hhbnRJRCk7XHJcbiAgICAgIGZvcih2YXIgaT0wO2k8ZW5jaGFudG1lbnRzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBpZihlbmNoYW50bWVudHNbaV0uRW5jaGFudExldmVsID09IHZtLml0ZW0uZW5jaGFudG1lbnROdW0pIHtcclxuICAgICAgICAgIGRpc2pvaW50ID0gZW5jaGFudG1lbnRzW2ldLkRpc2pvaW50RHJvcDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5pdGVtcyA9IFtdO1xyXG4gICAgaWYoZGlzam9pbnQpIHtcclxuICAgICAgdm0uZ2V0SXRlbXMoZGlzam9pbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEdvbGQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBkID0gaXRlbUZhY3RvcnkuZ2V0SXRlbURhdGEodGhpcy5pdGVtKTtcclxuICAgIHJldHVybiBOdW1iZXIoZC5EaXNqb2ludGFtb3VudCkvMTAwLzEwMDtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRJdGVtcyA9IGZ1bmN0aW9uKGRpc2pvaW50KSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnY2hlY2tpbmcgJyArIHBvdWNoRmlsZU5hbWUgKyAnIGZvciAnICsgYm94VHlwZSk7XHJcbiAgICBcclxuICAgIHZhciBwb3VjaERhdGEgPSBkbnREYXRhLmZpbmQoZXh0cmFjdEZpbGVOYW1lLCAnaWQnLCBkaXNqb2ludCk7XHJcbiAgICBpZihwb3VjaERhdGEubGVuZ3RoID09IDApIHtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YXIgZ29sZCA9IHBvdWNoRGF0YVswXS5Hb2xkTWluO1xyXG5cclxuICAgICAgdmFyIGl0ZW1JbmRleCA9IDE7XHJcbiAgICAgIHdoaWxlKCdJdGVtJyArIGl0ZW1JbmRleCArICdJbmRleCcgaW4gcG91Y2hEYXRhWzBdKSB7XHJcbiAgICAgICAgdmFyIGlzR3JvdXAgPSBwb3VjaERhdGFbMF1bJ0lzR3JvdXAnICsgaXRlbUluZGV4XTtcclxuICAgICAgICB2YXIgcG91Y2hJdGVtID0gcG91Y2hEYXRhWzBdWydJdGVtJyArIGl0ZW1JbmRleCArICdJbmRleCddO1xyXG4gICAgICAgIHZhciBwb3VjaEl0ZW1Db3VudCA9IHBvdWNoRGF0YVswXVsnSXRlbScgKyBpdGVtSW5kZXggKyAnSW5mbyddO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ3BvdWNoIGNvbnRhaW5zICcgKyBwb3VjaEl0ZW0pO1xyXG4gICAgICAgIGlmKHBvdWNoSXRlbSkge1xyXG4gICAgICAgICAgaWYoaXNHcm91cCkge1xyXG4gICAgICAgICAgICB2bS5nZXRJdGVtcyhwb3VjaEl0ZW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtZHMgPSBkbnREYXRhLmZpbmQoYWxsSXRlbUZpbGVOYW1lLCAnaWQnLCBwb3VjaEl0ZW0pO1xyXG4gICAgICAgICAgICBpZihpdGVtZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2ZvdW5kIGl0ZW0gJyk7XHJcbiAgXHJcbiAgICAgICAgICAgICAgdm0uaXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBjb3VudDogcG91Y2hJdGVtQ291bnQsXHJcbiAgICAgICAgICAgICAgICBnb2xkOiBnb2xkLFxyXG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGl0ZW1kc1swXSksXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaXRlbUluZGV4Kys7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbVZpZXdFeHRyYWN0aW9uJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdpdGVtVmlld0V4dHJhY3Rpb25DdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2l0ZW0tdmlldy1leHRyYWN0aW9uLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdQbGF0ZUN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJ2RudERhdGEnLCdpdGVtRmFjdG9yeScsJ2hDb2RlVmFsdWVzJywndHJhbnNsYXRpb25zJyxcclxuICBmdW5jdGlvbigkdGltZW91dCwgZG50RGF0YSwgaXRlbUZhY3RvcnkpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHZtLml0ZW1zID0gW107XHJcbiAgXHJcbiAgdmFyIHBsYXRlRmlsZSA9ICdwbGF0ZXRhYmxlLmx6anNvbic7XHJcbiAgdmFyIGFsbEl0ZW1GaWxlTmFtZSA9ICdhbGwtaXRlbXMubHpqc29uJztcclxuICBcclxuICB2YXIgYWxsRmlsZXMgPSBbcGxhdGVGaWxlLGFsbEl0ZW1GaWxlTmFtZV07XHJcbiAgZm9yKHZhciBpPTA7aTxhbGxGaWxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICBkbnREYXRhLmluaXQoYWxsRmlsZXNbaV0sIG51bGwsIGZ1bmN0aW9uKCkge30sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICB2bS5pbml0U2V0cygpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmluaXRTZXRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPGFsbEZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoYWxsRmlsZXNbaV0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLml0ZW1zID0gW107XHJcbiAgICBnZXRQbGF0ZXMoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0UGxhdGVzKCkge1xyXG4gICAgdmFyIHJvd3MgPSBkbnREYXRhLmZpbmQocGxhdGVGaWxlLCAnSXRlbUlEJywgdm0uaXRlbS5pZCk7XHJcbiAgICBmb3IodmFyIHI9MDtyPHJvd3MubGVuZ3RoOysrcikge1xyXG4gICAgICB2YXIgcm93ID0gcm93c1tyXTtcclxuICAgICAgdmFyIGNvbD0wO1xyXG4gICAgICBmb3IoOzspIHtcclxuICAgICAgICBjb2wrKztcclxuICAgICAgICB2YXIgY29sTmFtZSA9ICdDb21wb3VuZFRhYmxlSW5kZXgnICsgY29sO1xyXG4gICAgICAgIGlmKCEoY29sTmFtZSBpbiByb3cpKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpdGVtRGF0YSA9IGRudERhdGEuZmluZChhbGxJdGVtRmlsZU5hbWUsICdpZCcsIHJvd1tjb2xOYW1lXSk7XHJcbiAgICAgICAgaWYoaXRlbURhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdm0uaXRlbXMucHVzaChpdGVtRmFjdG9yeS5jcmVhdGVCYXNpY0l0ZW0oaXRlbURhdGFbMF0pKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSXRlbVZpZXdQbGF0ZScsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdQbGF0ZUN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS12aWV3LXBsYXRlLmh0bWwnXHJcbiAgfTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignaXRlbVZpZXdTZXRDdHJsJyxcclxuXHJcblsnJHRpbWVvdXQnLCdkbnREYXRhJywnaXRlbUZhY3RvcnknLCdoQ29kZVZhbHVlcycsJ3RyYW5zbGF0aW9ucycsXHJcbiAgZnVuY3Rpb24oJHRpbWVvdXQsIGRudERhdGEsIGl0ZW1GYWN0b3J5KSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGlmKHRoaXMuaXRlbSA9PSBudWxsKSByZXR1cm47XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICB2bS5pdGVtcyA9IFtdO1xyXG4gIFxyXG4gIHZhciBmaWxlcyA9IFtcclxuICAncGFydHN0YWJsZS5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY29tbW9uMjAxNC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY29tbW9uMjAxNS5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfY29tbW9uMjAxNi5sempzb24nLFxyXG4gICdwYXJ0c3RhYmxlX2NvbW1vbmNhc2gubHpqc29uJyxcclxuICAncGFydHN0YWJsZV9lcXVpcG1lbnQub3B0aW1pc2VkLmpzb24nLFxyXG4gICdwYXJ0c3RhYmxlX2V2ZW50Lmx6anNvbicsXHJcbiAgJ3BhcnRzdGFibGVfZ3VpbGQubHpqc29uJyxcclxuICAncGFydHN0YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLFxyXG4gICdwYXJ0c3RhYmxlX3JlYm9vdC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3BhcnRzdGFibGVfc2tpbGxsZXZlbHVwLmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAnd2VhcG9udGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2NvbW1vbjIwMTQub3B0aW1pc2VkLmpzb24nLFxyXG4gICd3ZWFwb250YWJsZV9jb21tb24yMDE1Lm9wdGltaXNlZC5qc29uJyxcclxuICAnd2VhcG9udGFibGVfY29tbW9uMjAxNi5sempzb24nLFxyXG4gICd3ZWFwb250YWJsZV9jb21tb25jYXNoLmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2VxdWlwbWVudC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2V2ZW50Lmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX2d1aWxkLmx6anNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX3B2cC5vcHRpbWlzZWQuanNvbicsXHJcbiAgJ3dlYXBvbnRhYmxlX3JlYm9vdC5vcHRpbWlzZWQuanNvbicsXHJcbiAgLy8nd2VhcG9udGFibGVfc2tpbGxsZXZlbHVwLmx6anNvbidcclxuICBdO1xyXG4gIFxyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgXHJcbiAgdmFyIGFsbEZpbGVzID0gZmlsZXMuY29uY2F0KFthbGxJdGVtRmlsZU5hbWVdKTtcclxuICBmb3IodmFyIGk9MDtpPGFsbEZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgIGRudERhdGEuaW5pdChhbGxGaWxlc1tpXSwgbnVsbCwgZnVuY3Rpb24oKSB7fSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZtLmluaXRTZXRzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaW5pdFNldHMgPSBmdW5jdGlvbigpIHtcclxuICAgIGZvcih2YXIgaT0wO2k8YWxsRmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgICBpZighZG50RGF0YS5pc0xvYWRlZChhbGxGaWxlc1tpXSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uaXRlbXMgPSBbXTtcclxuICAgIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgICBnZXRTZXRJdGVtcyhmaWxlc1tpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFNldEl0ZW1zKGZpbGVOYW1lKSB7XHJcbiAgICB2YXIgcm93cyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ1NldEl0ZW1JRCcsIHZtLml0ZW0uc2V0SWQpO1xyXG4gICAgZm9yKHZhciByPTA7cjxyb3dzLmxlbmd0aDsrK3IpIHtcclxuICAgICAgdmFyIGl0ZW1EYXRhID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgcm93c1tyXS5pZCk7XHJcbiAgICAgIGlmKGl0ZW1EYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB2bS5pdGVtcy5wdXNoKGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtRGF0YVswXSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1WaWV3U2V0JywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6ICdpdGVtVmlld1NldEN0cmwnLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3RybCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL2l0ZW0vaXRlbS12aWV3LXNldC5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2l0ZW1WaWV3U2hvcEN0cmwnLFxyXG5cclxuWyckdGltZW91dCcsJ2RudERhdGEnLCdpdGVtRmFjdG9yeScsJ2hDb2RlVmFsdWVzJywndHJhbnNsYXRpb25zJyxcclxuICBmdW5jdGlvbigkdGltZW91dCwgZG50RGF0YSwgaXRlbUZhY3RvcnksIGhDb2RlVmFsdWVzLCB0cmFuc2xhdGlvbnMpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgaWYodGhpcy5pdGVtID09IG51bGwpIHJldHVybjtcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHZtLnNob3BDb3N0cyA9IFtdO1xyXG4gIFxyXG4gIHZhciBjU2hvcEZpbGVOYW1lID0gJ2NvbWJpbmVkc2hvcHRhYmxlLmx6anNvbic7XHJcbiAgdmFyIGNTeXNTaG9wRmlsZU5hbWUgPSAnY29tYmluZWRzaG9wdGFibGVfc3lzdGVtLmx6anNvbic7XHJcbiAgdmFyIGNDYXNoU2hvcEZpbGVOYW1lID0gJ2NvbWJpbmVkc2hvcHRhYmxlX2Nhc2gubHpqc29uJztcclxuICAvLyB2YXIgc2hvcEZpbGVOYW1lID0gJ3Nob3B0YWJsZS5sempzb24nO1xyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgXHJcbiAgdmFyIGZpbGVzID0gW2NDYXNoU2hvcEZpbGVOYW1lLGNTeXNTaG9wRmlsZU5hbWUsY1Nob3BGaWxlTmFtZSxhbGxJdGVtRmlsZU5hbWVdO1xyXG4gIGZvcih2YXIgaT0wO2k8ZmlsZXMubGVuZ3RoOysraSkge1xyXG4gICAgZG50RGF0YS5pbml0KGZpbGVzW2ldLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uaW5pdFNob3BzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuaW5pdFNob3BzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZXNbaV0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLnNob3BDb3N0cyA9IFtdO1xyXG4gICAgZ2V0Q29tYmluZWRDb3N0cyhjU2hvcEZpbGVOYW1lKTtcclxuICAgIGdldENvbWJpbmVkQ29zdHMoY1N5c1Nob3BGaWxlTmFtZSk7XHJcbiAgICBnZXRDb21iaW5lZENvc3RzKGNDYXNoU2hvcEZpbGVOYW1lKTtcclxuICAgIC8vIGdldFNob3BDb3N0cygpO1xyXG4gICAgXHJcbiAgICB2YXIgbmV3U2hvcENvc3RzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLnNob3BDb3N0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IodmFyIGo9MDtqPG5ld1Nob3BDb3N0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgaWYodm0uc2hvcENvc3RzW2ldLnRhYk5hbWUgPT0gbmV3U2hvcENvc3RzW2pdLnRhYk5hbWUgJiZcclxuICAgICAgICAgIHZtLnNob3BDb3N0c1tpXS5nb2xkID09IG5ld1Nob3BDb3N0c1tqXS5nb2xkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0uaXRlbTEuaWQgPT0gbmV3U2hvcENvc3RzW2pdLml0ZW0xLmlkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0ubnVtSXRlbTEuaWQgPT0gbmV3U2hvcENvc3RzW2pdLm51bUl0ZW0xLmlkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0uaXRlbTIuaWQgPT0gbmV3U2hvcENvc3RzW2pdLml0ZW0yLmlkICYmXHJcbiAgICAgICAgICB2bS5zaG9wQ29zdHNbaV0ubnVtSXRlbTIuaWQgPT0gbmV3U2hvcENvc3RzW2pdLm51bUl0ZW0yLmlkKSB7XHJcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZighZm91bmQpIHtcclxuICAgICAgICBuZXdTaG9wQ29zdHMucHVzaCh2bS5zaG9wQ29zdHNbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZtLnNob3BDb3N0cyA9IG5ld1Nob3BDb3N0cztcclxuICB9XHJcbiAgXHJcbiAgLypcclxuICBmdW5jdGlvbiBnZXRTaG9wQ29zdHMoKSB7XHJcbiAgICB2YXIgc2hvcHMgPSBkbnREYXRhLmdldERhdGEoc2hvcEZpbGVOYW1lKTtcclxuICAgIFxyXG4gICAgZm9yKHZhciBpPTA7aTxzaG9wcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHZhciBzID0gc2hvcHNbaV07XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYyA9IDA7XHJcbiAgICAgIGZvcig7Oykge1xyXG4gICAgICAgICsrYztcclxuICAgICAgICBcclxuICAgICAgICB2YXIgY29sTmFtZSA9ICdpdGVtSW5kZXgnICsgYztcclxuICAgICAgICBpZighKGNvbE5hbWUgaW4gcykpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB2YXIgaXRlbUlkID0gc1tjb2xOYW1lXTtcclxuICAgICAgICBpZighaXRlbUlkKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoaXRlbUlkID09IHZtLml0ZW0uaWQpIHtcclxuICAgICAgICAgIHMgPSB7XHJcbiAgICAgICAgICAgIHNob3BOYW1lOiBzLlNob3BJRCxcclxuICAgICAgICAgICAgdGFiTmFtZTogdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShzLlRhYk5hbWVJRCksXHJcbiAgICAgICAgICAgIGdvbGQ6IHNbJ1F1YW50aXR5JyArIGNdLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIFxyXG4gICAgICBcclxuICAgICAgICAgIGlmKHMuc2hvcE5hbWUgaW4gaENvZGVWYWx1ZXMuc2hvcE5hbWVzKSB7XHJcbiAgICAgICAgICAgIHMuc2hvcE5hbWUgPSBoQ29kZVZhbHVlcy5zaG9wTmFtZXNbcy5zaG9wTmFtZV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAgICAgaWYoIXMuc2hvcE5hbWUpIHtcclxuICAgICAgICAgICAgcy5zaG9wTmFtZSA9IHMuU2hvcElkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdm0uc2hvcENvc3RzLnB1c2gocyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSovXHJcblxyXG4gIGZ1bmN0aW9uIGdldENvbWJpbmVkQ29zdHMoZmlsZU5hbWUpIHtcclxuICAgIHZhciBzaG9wcyA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ2l0ZW1pbmRleCcsIHZtLml0ZW0uaWQpO1xyXG4gICAgXHJcbiAgICBmb3IodmFyIGk9MDtpPHNob3BzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgdmFyIHMgPSBzaG9wc1tpXTtcclxuICAgICAgICBcclxuICAgICAgdmFyIGl0ZW0xcyA9IGRudERhdGEuZmluZChhbGxJdGVtRmlsZU5hbWUsICdpZCcsIHMuUHVyY2hhc2VJdGVtMSk7XHJcbiAgICAgIHZhciBpdGVtMnMgPSBkbnREYXRhLmZpbmQoYWxsSXRlbUZpbGVOYW1lLCAnaWQnLCBzLlB1cmNoYXNlSXRlbTIpO1xyXG4gICAgICBcclxuICAgICAgdmFyIHNob3BDb3N0ID0ge1xyXG4gICAgICAgIHNob3BOYW1lOiBzLlNob3BJRCxcclxuICAgICAgICB0YWJOYW1lOiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKHMuVGFiTmFtZUlEKSxcclxuICAgICAgICBnb2xkOiAwLFxyXG4gICAgICAgIG5pZ2h0bWFyZVBvaW50czogMCxcclxuICAgICAgICBsYWRkZXJQb2ludHM6IDAsXHJcbiAgICAgICAgaXRlbTE6IGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtMXNbMF0pLFxyXG4gICAgICAgIGl0ZW0yOiBpdGVtRmFjdG9yeS5jcmVhdGVCYXNpY0l0ZW0oaXRlbTJzWzBdKSxcclxuICAgICAgICBudW1JdGVtMTogMCxcclxuICAgICAgICBudW1JdGVtMjogMCxcclxuICAgICAgfTtcclxuICAgICAgXHJcbiAgICAgIGlmKHNob3BDb3N0LnNob3BOYW1lIGluIGhDb2RlVmFsdWVzLnNob3BOYW1lcykge1xyXG4gICAgICAgIHNob3BDb3N0LnNob3BOYW1lID0gaENvZGVWYWx1ZXMuc2hvcE5hbWVzW3Nob3BDb3N0LnNob3BOYW1lXTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYocy5QdXJjaGFzZVR5cGUxID09IDEpIHtcclxuICAgICAgICBzaG9wQ29zdC5nb2xkICs9IHMuUHVyY2hhc2VJdGVtVmFsdWUxO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYocy5QdXJjaGFzZVR5cGUxID09IDMpIHtcclxuICAgICAgICBzaG9wQ29zdC5sYWRkZXJQb2ludHMgKz0gcy5QdXJjaGFzZUl0ZW1WYWx1ZTE7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihzLlB1cmNoYXNlVHlwZTEgPT0gOCkge1xyXG4gICAgICAgIHNob3BDb3N0Lm5pZ2h0bWFyZVBvaW50cyArPSBzLlB1cmNoYXNlSXRlbVZhbHVlMTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzaG9wQ29zdC5udW1JdGVtMSA9IHMuUHVyY2hhc2VJdGVtVmFsdWUxO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihzLlB1cmNoYXNlVHlwZTIgPT0gMSkge1xyXG4gICAgICAgIHNob3BDb3N0LmdvbGQgKz0gcy5QdXJjaGFzZUl0ZW1WYWx1ZTI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihzLlB1cmNoYXNlVHlwZTIgPT0gMykge1xyXG4gICAgICAgIHNob3BDb3N0LmxhZGRlclBvaW50cyArPSBzLlB1cmNoYXNlSXRlbVZhbHVlMjtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHMuUHVyY2hhc2VUeXBlMiA9PSA4KSB7XHJcbiAgICAgICAgc2hvcENvc3QubmlnaHRtYXJlUG9pbnRzICs9IHMuUHVyY2hhc2VJdGVtVmFsdWUyO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNob3BDb3N0Lm51bUl0ZW0yID0gcy5QdXJjaGFzZUl0ZW1WYWx1ZTI7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHNob3BDb3N0LmdvbGQgPSBzaG9wQ29zdC5nb2xkLzEwMC8xMDA7XHJcbiAgICAgIFxyXG4gICAgICB2bS5zaG9wQ29zdHMucHVzaChzaG9wQ29zdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1WaWV3U2hvcCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgaXRlbTogJz1pdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnaXRlbVZpZXdTaG9wQ3RybCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvaXRlbS9pdGVtLXZpZXctc2hvcC5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ2l0ZW1WaWV3VHJhbnNmZXJDdHJsJyxcclxuXHJcblsnJHRpbWVvdXQnLCdkbnREYXRhJywnaXRlbUZhY3RvcnknLCdoQ29kZVZhbHVlcycsXHJcbiAgZnVuY3Rpb24oJHRpbWVvdXQsIGRudERhdGEsIGl0ZW1GYWN0b3J5LCBoQ29kZVZhbHVlcykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBpZih0aGlzLml0ZW0gPT0gbnVsbCkgcmV0dXJuO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0ubWF0Y2hpbmdUcmFuc2ZlcnMgPSBbXTtcclxuICBcclxuICB2YXIgdHJhbnNmZXJGaWxlTmFtZSA9ICdlbmNoYW50dHJhbnNmZXJ0YWJsZS5sempzb24nO1xyXG4gIHZhciBhbGxJdGVtRmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgdmFyIHRyYW5zZmVySXRlbXNGaWxlTmFtZSA9ICdlbmNoYW50dHJhbnNmZXJpdGVtdGFibGUubHpqc29uJztcclxuICBcclxuICB2YXIgZmlsZXMgPSBbdHJhbnNmZXJGaWxlTmFtZSxhbGxJdGVtRmlsZU5hbWUsdHJhbnNmZXJJdGVtc0ZpbGVOYW1lXTtcclxuICBmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgIGRudERhdGEuaW5pdChmaWxlc1tpXSwgbnVsbCwgZnVuY3Rpb24oKSB7fSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZtLmluaXRUcmFuc2ZlcnMoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5pbml0VHJhbnNmZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBmb3IodmFyIGk9MDtpPGZpbGVzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZXNbaV0pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB2bS5tYXRjaGluZ1RyYW5zZmVycyA9IFtdO1xyXG4gICAgXHJcbiAgICB2YXIgdHJhbnNmZXJJdGVtID0gZG50RGF0YS5maW5kKHRyYW5zZmVySXRlbXNGaWxlTmFtZSwgJ0l0ZW1JRCcsIHZtLml0ZW0uaWQpO1xyXG4gICAgaWYodHJhbnNmZXJJdGVtICYmIHRyYW5zZmVySXRlbS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHZhciB0cmFuc2ZlcnMgPSBkbnREYXRhLmZpbmQodHJhbnNmZXJGaWxlTmFtZSwgJ0VuY2hhbnRMZXZlbCcsIHZtLml0ZW0uZW5jaGFudG1lbnROdW0pO1xyXG4gICAgICBcclxuICAgICAgZm9yKHZhciBpPTA7aTx0cmFuc2ZlcnMubGVuZ3RoOysraSkge1xyXG4gICAgICAgIHZhciB0ID0gdHJhbnNmZXJzW2ldO1xyXG4gICAgICAgIGlmKHQuUmFuayA9PSB2bS5pdGVtLnJhbmsuaWQgJiYgdC5MZXZlbExpbWl0ID09IHZtLml0ZW0ubGV2ZWxMaW1pdCkge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgaXRlbTFzID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgdC5OZWVkSXRlbUlEMSk7XHJcbiAgICAgICAgICB2YXIgaXRlbTJzID0gZG50RGF0YS5maW5kKGFsbEl0ZW1GaWxlTmFtZSwgJ2lkJywgdC5OZWVkSXRlbUlEMik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZtLm1hdGNoaW5nVHJhbnNmZXJzLnB1c2goe1xyXG4gICAgICAgICAgICBsZXZlbDogdC5SZXN1bHRMZXZlbCxcclxuICAgICAgICAgICAgZW5jaGFudG1lbnROdW06IHQuUmVzdWx0RW5jaGFudExldmVsLFxyXG4gICAgICAgICAgICBnb2xkOiB0Lk5lZWRDb2luLzEwMC8xMDAsXHJcbiAgICAgICAgICAgIHJhbms6IGhDb2RlVmFsdWVzLnJhbmtOYW1lc1t0LlJlc3VsdFJhbmtdLFxyXG4gICAgICAgICAgICBudW1JdGVtMTogdC5OZWVkSXRlbUNvdW50MSxcclxuICAgICAgICAgICAgaXRlbTE6IGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtMXNbMF0pLFxyXG4gICAgICAgICAgICBudW1JdGVtMjogdC5OZWVkSXRlbUNvdW50MixcclxuICAgICAgICAgICAgaXRlbTI6IGl0ZW1GYWN0b3J5LmNyZWF0ZUJhc2ljSXRlbShpdGVtMnNbMF0pLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufV0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbUl0ZW1WaWV3VHJhbnNmZXInLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHRydWUsXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ2l0ZW1WaWV3VHJhbnNmZXJDdHJsJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9pdGVtL2l0ZW0tdmlldy10cmFuc2Zlci5odG1sJ1xyXG4gIH07XHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0l0ZW1DdHJsJyxcclxuWyckc2NvcGUnLCckd2luZG93JywnZG50RGF0YScsJ2hDb2RlVmFsdWVzJywnaXRlbXMnLCdqb2JzJywnZXhwb3J0TGlua0hlbHBlcicsJyRyb3V0ZVBhcmFtcycsJ3RyYW5zbGF0aW9ucycsJyRsb2NhdGlvbicsJ3JlZ2lvbicsJ2l0ZW1GYWN0b3J5JywnJHRpbWVvdXQnLCdzdGF0SGVscGVyJywnc2F2ZUhlbHBlcicsXHJcbmZ1bmN0aW9uKCRzY29wZSwkd2luZG93LGRudERhdGEsaENvZGVWYWx1ZXMsaXRlbXMsam9icyxleHBvcnRMaW5rSGVscGVyLCRyb3V0ZVBhcmFtcyx0cmFuc2xhdGlvbnMsJGxvY2F0aW9uLHJlZ2lvbixpdGVtRmFjdG9yeSwkdGltZW91dCxzdGF0SGVscGVyLHNhdmVIZWxwZXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgcmVnaW9uLnNldExvY2F0aW9uQnlOYW1lKCRyb3V0ZVBhcmFtcy5yZWdpb24pO1xyXG4gIFxyXG4gICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcbiAgXHJcbiAgJHNjb3BlLmpvYk5hbWUgPSBudWxsO1xyXG4gIC8vIGNvbnNvbGUubG9nKCdzZWFyY2ggc3RyaW5nOiAnLCAkcm91dGVQYXJhbXMuaSk7XHJcbiAgJHNjb3BlLml0ZW0gPSBleHBvcnRMaW5rSGVscGVyLmRlY29kZUl0ZW0oJHJvdXRlUGFyYW1zLmkpO1xyXG4gIGlmKCdpdGVtU291cmNlJyBpbiAkc2NvcGUuaXRlbSkge1xyXG4gICAgJHNjb3BlLml0ZW1UeXBlID0gaXRlbXNbJHNjb3BlLml0ZW0uaXRlbVNvdXJjZV07XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5pdGVtLnNldFN0YXRzID0gbnVsbDtcclxuICAkc2NvcGUuaXRlbS5zZXRJZCA9IG51bGw7XHJcbiAgJHNjb3BlLmRldGFpbCA9IG51bGw7XHJcbiAgXHJcbiAgJHNjb3BlLmdldERlc2NyaXB0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZigkc2NvcGUuaXRlbS5kZXNjcmlwdGlvbikge1xyXG4gICAgICByZXR1cm4gJHNjb3BlLml0ZW0uZGVzY3JpcHRpb247XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKCRzY29wZS5pdGVtVHlwZSAmJlxyXG4gICAgICAkc2NvcGUuaXRlbVR5cGUubmFtZSA9PSAndGl0bGUnICYmXHJcbiAgICAgIHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpICYmXHJcbiAgICAgIGRudERhdGEuaXNMb2FkZWQoJHNjb3BlLml0ZW1UeXBlLm1haW5EbnQpKSB7XHJcblxyXG4gICAgICB2YXIgaXRlbURhdGEgPSBkbnREYXRhLmZpbmQoJHNjb3BlLml0ZW1UeXBlLm1haW5EbnQsICdpZCcsICRzY29wZS5pdGVtLmlkKTtcclxuICAgICAgaWYoaXRlbURhdGEgJiYgaXRlbURhdGEubGVuZ3RoID4gMCAmJiBpdGVtRGF0YVswXS5EZXNjcmlwdGlvbklEID4gMCkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGl0ZW1EYXRhWzBdLkRlc2NyaXB0aW9uSUQsIGl0ZW1EYXRhWzBdLkRlc2NyaXB0aW9uSURQYXJhbSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYoJHNjb3BlLml0ZW0uZmlsZU5hbWUgJiZcclxuICAgICAgZG50RGF0YS5pc0xvYWRlZCgkc2NvcGUuaXRlbS5maWxlTmFtZSArICcubHpqc29uJykpIHtcclxuICAgICAgICBcclxuICAgICAgdmFyIGl0ZW1EYXRhID0gZG50RGF0YS5maW5kKCRzY29wZS5pdGVtLmZpbGVOYW1lICsgJy5sempzb24nLCAnaWQnLCAkc2NvcGUuaXRlbS5pZCk7XHJcbiAgICAgIGlmKGl0ZW1EYXRhICYmIGl0ZW1EYXRhLmxlbmd0aCA+IDAgJiYgaXRlbURhdGFbMF0uRGVzY3JpcHRpb25JRCA+IDApIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShpdGVtRGF0YVswXS5EZXNjcmlwdGlvbklELCBpdGVtRGF0YVswXS5EZXNjcmlwdGlvbklEUGFyYW0pO1xyXG4gICAgICB9IFxyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUuZ2V0RXhjaGFuZ2VUeXBlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0dGluZyBleGNoYW5nZScpO1xyXG4gICAgdmFyIGV4Y2hhbmdlRG50ID0gJ2V4Y2hhbmdlLmx6anNvbic7XHJcbiAgICBpZih0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSAmJlxyXG4gICAgICBkbnREYXRhLmlzTG9hZGVkKGV4Y2hhbmdlRG50KSAmJlxyXG4gICAgICAkc2NvcGUuaXRlbS5leGNoYW5nZVR5cGUgPiAwKSB7XHJcbiAgICAgICAgXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdmaW5kaW5nIGV4Y2hhbmdlICcgKyAkc2NvcGUuaXRlbS5leGNoYW5nZVR5cGUpO1xyXG5cclxuICAgICAgdmFyIGV4Y2hhbmdlID0gZG50RGF0YS5maW5kKGV4Y2hhbmdlRG50LCAnRXhjaGFuZ2VUeXBlJywgJHNjb3BlLml0ZW0uZXhjaGFuZ2VUeXBlKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ2dvdCAnICsgZXhjaGFuZ2UubGVuZ3RoKTtcclxuICAgICAgaWYoZXhjaGFuZ2UgJiYgZXhjaGFuZ2UubGVuZ3RoID4gMCAmJiBleGNoYW5nZVswXS5OYW1lSUQgPiAwKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2V4Y2hhbmdlIG5hbWU6ICcgKyBleGNoYW5nZVswXS5OYW1lSUQpO1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGV4Y2hhbmdlWzBdLk5hbWVJRCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUuc2V0RGV0YWlsID0gZnVuY3Rpb24oZGV0YWlsKSB7XHJcbiAgICAkc2NvcGUuZGV0YWlsID0gZGV0YWlsO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUuZ2V0TnVtSW5TZXQgPSBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgdmFyIGJ1aWxkTmFtZSA9ICRzY29wZS5nZXRCdWlsZE5hbWUoKTtcclxuICAgIGlmKGJ1aWxkTmFtZSAmJiAkc2NvcGUuaXRlbSAmJiAkc2NvcGUuaXRlbS5zZXRJZCkge1xyXG4gICAgICByZXR1cm4gc3RhdEhlbHBlci5nZXROdW1JdGVtc0ZvclNldCgkc2NvcGUuYnVpbGRzW2J1aWxkTmFtZV0uaXRlbXMsICRzY29wZS5pdGVtLnNldElkKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5nZXRCdWlsZE5hbWUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBidWlsZE5hbWUgPSBzYXZlSGVscGVyLmdldEN1cnJlbnRCdWlsZCgpO1xyXG4gICAgaWYoJHNjb3BlLmJ1aWxkcykge1xyXG4gICAgICBpZighYnVpbGROYW1lIHx8ICEoYnVpbGROYW1lIGluICRzY29wZS5idWlsZHMpKSB7XHJcbiAgICAgICAgdmFyIGFsbEJ1aWxkTmFtZXMgPSBPYmplY3Qua2V5cygkc2NvcGUuYnVpbGRzKTtcclxuICAgICAgICBpZihhbGxCdWlsZE5hbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgYnVpbGROYW1lID0gYWxsQnVpbGROYW1lc1swXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGJ1aWxkTmFtZTtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmdldFNlcnZlclN0b3JhZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpdGVtRGF0YSA9IGl0ZW1GYWN0b3J5LmdldEl0ZW1EYXRhKCRzY29wZS5pdGVtKTtcclxuICAgIHZhciByZXRWYWwgPSAnJztcclxuICAgIFxyXG4gICAgaWYoaXRlbURhdGEgJiYgJ0lzQ2FzaCcgaW4gaXRlbURhdGEgJiYgaXRlbURhdGEuSXNDYXNoID09IDApIHtcclxuICAgICAgaWYoaXRlbURhdGEgJiYgJ0FibGVXU3RvcmFnZScgaW4gaXRlbURhdGEpIHtcclxuICAgICAgICBpZihpdGVtRGF0YS5BYmxlV1N0b3JhZ2UgPT0gMSkge1xyXG4gICAgICAgICAgcmV0VmFsID0gJ2NhbiBzZXJ2ZXIgc3RvcmFnZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXRlbURhdGEuQWJsZVdTdG9yYWdlID09IDApIHtcclxuICAgICAgICAgIHJldFZhbCA9ICdub3QgdHJhbnNmZXJhYmxlJztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoaXRlbURhdGEgJiYgJ1JldmVyc2lvbicgaW4gaXRlbURhdGEpIHtcclxuICAgICAgICBpZihyZXRWYWwubGVuZ3RoKSB7XHJcbiAgICAgICAgICByZXRWYWwgKz0gJywgJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoaXRlbURhdGEuUmV2ZXJzaW9uID09IDApIHtcclxuICAgICAgICAgIHJldFZhbCArPSAnY2FuIHNlbGwnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGl0ZW1EYXRhLlJldmVyc2lvbiA9PSAxKSB7XHJcbiAgICAgICAgICByZXRWYWwgKz0gJ25vdCBzZWxsYWJsZSAnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldFZhbDtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmdldE1vcmVJbmZvID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VhbFRpbWVzID0gMDtcclxuICAgIHZhciBudW1TdGFtcHMgPSAwO1xyXG4gICAgXHJcbiAgICBpZigkc2NvcGUubW9yZUluZm9Mb2FkZWQoKSkge1xyXG4gICAgICB2YXIgaXRlbURhdGEgPSBpdGVtRmFjdG9yeS5nZXRJdGVtRGF0YSgkc2NvcGUuaXRlbSk7XHJcbiAgICAgIFxyXG4gICAgICBpZihpdGVtRGF0YSAmJiAnSXNDYXNoJyBpbiBpdGVtRGF0YSAmJiBpdGVtRGF0YS5Jc0Nhc2ggPT0gMCkge1xyXG4gICAgICAgIGlmKGl0ZW1EYXRhICYmICdTZWFsSUQnIGluIGl0ZW1EYXRhICYmICdTZWFsQ291bnQnIGluIGl0ZW1EYXRhKSB7XHJcbiAgICAgICAgICBzZWFsVGltZXMgPSBpdGVtRGF0YS5TZWFsQ291bnQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHNlYWxEYXRhID0gZG50RGF0YS5maW5kKCdzZWFsY291bnR0YWJsZS5sempzb24nLCAnVHlwZTInLCBpdGVtRGF0YS5TZWFsSUQpO1xyXG4gICAgICAgICAgaWYoc2VhbERhdGEgJiYgc2VhbERhdGEubGVuZ3RoID4gMCAmJiBzZWFsRGF0YVswXS5UeXBlMSA9PSAwKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgY29sTmFtZSA9ICdDb3VudDAnO1xyXG4gICAgICAgICAgICBpZigkc2NvcGUuaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgICAgIGNvbE5hbWUgPSAnQ291bnQnICsgJHNjb3BlLml0ZW0uZW5jaGFudG1lbnROdW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGNvbE5hbWUgaW4gc2VhbERhdGFbMF0pIHtcclxuICAgICAgICAgICAgICBudW1TdGFtcHMgPSBzZWFsRGF0YVswXVtjb2xOYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGl0ZW1EYXRhICYmICdJc0Nhc2gnIGluIGl0ZW1EYXRhICYmICdDYXNoVHJhZGVDb3VudCcgaW4gaXRlbURhdGEgJiYgJ1JldmVyc2lvbicgaW4gaXRlbURhdGEgJiYgJ0FibGVXU3RvcmFnZScgaW4gaXRlbURhdGEpIHtcclxuICAgICAgICBpZihpdGVtRGF0YS5SZXZlcnNpb24gPT0gMikge1xyXG4gICAgICAgICAgaWYoaXRlbURhdGEuQ2FzaFRyYWRlQ291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdjYXNoIHRyYWRlIGNvdW50OiAnICsgaXRlbURhdGEuQ2FzaFRyYWRlQ291bnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdjYW4gdXNlIHdhcnJhbnR5JztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihpdGVtRGF0YS5BYmxlV1N0b3JhZ2UpIHtcclxuICAgICAgICAgIHJldHVybiAnY2FuIHNlcnZlciBzdG9yYWdlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gJ25vdCB0cmFkYWJsZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHNlYWxUaW1lcyAmJiBudW1TdGFtcHMpIHtcclxuICAgICAgcmV0dXJuICdjYW4gc3RhbXAgJyArIHNlYWxUaW1lcyArICcgdGltZXMgdXNpbmcgJyArIG51bVN0YW1wcyArICcgIHN0YW1wcyc7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAkc2NvcGUubW9yZUluZm9Mb2FkZWQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBkbnREYXRhLmlzTG9hZGVkKCRzY29wZS5pdGVtLmZpbGVOYW1lICsgJy5sempzb24nKSAmJlxyXG4gICAgICBkbnREYXRhLmlzTG9hZGVkKCdzZWFsY291bnR0YWJsZS5sempzb24nKTtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmxvYWRNb3JlSW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZG50RGF0YS5pbml0KCRzY29wZS5pdGVtLmZpbGVOYW1lICsgJy5sempzb24nLCBudWxsLCAkdGltZW91dCk7XHJcbiAgICBkbnREYXRhLmluaXQoJ3NlYWxjb3VudHRhYmxlLmx6anNvbicsIG51bGwsICR0aW1lb3V0KTtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2NoYW5nZXMnKTtcclxuICAgIGlmKCRzY29wZS5pdGVtLml0ZW1Tb3VyY2UgIT0gJ2N1c3RvbScpIHtcclxuICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnaScsIGV4cG9ydExpbmtIZWxwZXIuZW5jb2RlSXRlbSgkc2NvcGUuaXRlbSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNldEZ1bGxTdGF0cygpO1xyXG4gICAgICAkc2NvcGUuaXRlbSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuaXRlbSk7XHJcbiAgICB9XHJcbiAgICBnZXRCdWlsZHMoKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0Sm9iTmFtZSgpIHtcclxuICAgIHZhciByZXRWYWwgPSAnJztcclxuICAgIHZhciBhbGxKb2JzID0gam9icy5nZXRBbGxKb2JzKCk7XHJcbiAgICBhbmd1bGFyLmZvckVhY2goYWxsSm9icywgZnVuY3Rpb24oam9iLCBpbmRleCkge1xyXG4gICAgICBpZihqb2IuaWQgPT0gJHNjb3BlLml0ZW0ubmVlZEpvYkNsYXNzKSB7XHJcbiAgICAgICAgJHNjb3BlLmpvYk5hbWUgPSBqb2IubmFtZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgZ2V0QnVpbGRzKCk7XHJcbiAgICAkc2NvcGUucHJlSW5pdEl0ZW0gPSAkc2NvcGUuaXRlbTtcclxuICAgICRzY29wZS5pdGVtID0gbnVsbDtcclxuICBcclxuICAgIHZhciBhbnlUb0xvYWQgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgYW5ndWxhci5mb3JFYWNoKGV4cG9ydExpbmtIZWxwZXIuZ2V0RG50RmlsZXMoJHNjb3BlLnByZUluaXRJdGVtKSwgZnVuY3Rpb24oY29sdW1ucywgZmlsZU5hbWUpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZmlsZU5hbWUpKSB7XHJcbiAgICAgICAgZG50RGF0YS5pbml0KGZpbGVOYW1lLCBjb2x1bW5zLCByZXBvcnRQcm9ncmVzcywgZnVuY3Rpb24oKSB7IHRyeUluaXQoKSB9KTtcclxuICAgICAgICBhbnlUb0xvYWQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYoIXRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgIHRyYW5zbGF0aW9ucy5pbml0KHJlcG9ydFByb2dyZXNzLGZ1bmN0aW9uKCkgeyB0cnlJbml0KCkgfSk7XHJcbiAgICAgIGFueVRvTG9hZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKCFqb2JzLmlzTG9hZGVkKCkpIHtcclxuICAgICAgam9icy5pbml0KHJlcG9ydFByb2dyZXNzLCBmdW5jdGlvbigpIHsgdHJ5SW5pdCgpOyB9KTtcclxuICAgICAgYW55VG9Mb2FkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoIWFueVRvTG9hZCkge1xyXG4gICAgICB0cnlJbml0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGluaXQoKTtcclxuICBcclxuICBmdW5jdGlvbiB0cnlJbml0KCkge1xyXG4gICAgaWYoIWRudERhdGEuYW55TG9hZGluZygpICYmIHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpICYmIGpvYnMuaXNMb2FkZWQoKSkge1xyXG4gICAgICAkc2NvcGUuaXRlbSA9IGV4cG9ydExpbmtIZWxwZXIucmVsb2FkSXRlbSgkc2NvcGUucHJlSW5pdEl0ZW0pO1xyXG4gICAgICBpZigkc2NvcGUuaXRlbSA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBzZXRGdWxsU3RhdHMoKTtcclxuICAgICAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCAnICsgJHNjb3BlLml0ZW0ubmFtZTtcclxuICAgICAgaWYoJHNjb3BlLml0ZW0uaXRlbVNvdXJjZSAhPSAnY3VzdG9tJykge1xyXG4gICAgICBcclxuICAgICAgICBpZigkc2NvcGUuaXRlbS50eXBlTmFtZSA9PSAnc2tpbGxzJykge1xyXG4gICAgICAgICAgaWYoISRzY29wZS5pdGVtLnB2ZSB8fCAkc2NvcGUuaXRlbS5wdmUgIT0gJ3B2cCcpIHtcclxuICAgICAgICAgICAgJHNjb3BlLml0ZW0ucHZlID0gJ3B2ZSc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJHNjb3BlLml0ZW0ucHZlID0gJ3B2cCc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgaWYoJHNjb3BlLml0ZW0ubmVlZEpvYkNsYXNzID4gMCkge1xyXG4gICAgICAgICAgICBnZXRKb2JOYW1lKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHNldEZpbGVOYW1lKCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBpdGVtRGF0YSA9IGl0ZW1GYWN0b3J5LmdldEl0ZW1EYXRhKCRzY29wZS5pdGVtKTtcclxuICAgICAgaWYoaXRlbURhdGEuRGlzam9pbnREcm9wMSA+IDApIHtcclxuICAgICAgICAkc2NvcGUuY2FuRXh0cmFjdCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKChpdGVtRGF0YS5UeXBlID09IDAgfHwgaXRlbURhdGEuVHlwZSA9PSAxKSAmJiAkc2NvcGUuaXRlbS5lbmNoYW50bWVudE51bSA+IDApIHtcclxuICAgICAgICAkc2NvcGUuY2FuVHJhbnNmZXIgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZigkc2NvcGUuaXRlbS5zZXRJZCkge1xyXG4gICAgICAgICRzY29wZS5pc0luU2V0ID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoJHNjb3BlLml0ZW0udHlwZUlkID09IDUpIHtcclxuICAgICAgICAkc2NvcGUuaXNQbGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKCRzY29wZS5pdGVtLnR5cGVJZCA9PSA0NiB8fCAkc2NvcGUuaXRlbS50eXBlSWQgPT0gOCB8fCAkc2NvcGUuaXRlbS50eXBlSWQgPT0gMTEyIHx8ICRzY29wZS5pdGVtLnR5cGVJZCA9PSAxMjIgfHwgJHNjb3BlLml0ZW0udHlwZUlkID09IDE0Mikge1xyXG4gICAgICAgICRzY29wZS5oYXNDb250ZW50cyA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmRldGFpbCA9ICdjb250ZW50cyc7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZigkc2NvcGUuaXRlbS50eXBlTmFtZSAhPSBudWxsKSB7XHJcbiAgICAgICAgJHNjb3BlLmNhblVzZSA9IHRydWU7XHJcbiAgICAgICAgJHNjb3BlLmRldGFpbCA9ICd1c2UnO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoJHNjb3BlLmNhbkV4dHJhY3QpIHtcclxuICAgICAgICAkc2NvcGUuZGV0YWlsID0gJ2V4dHJhY3QnO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoJHNjb3BlLmNhblRyYW5zZmVyKSB7XHJcbiAgICAgICAgJHNjb3BlLmRldGFpbCA9ICd0cmFuc2Zlcic7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZigkc2NvcGUuaXNQbGF0ZSkge1xyXG4gICAgICAgICRzY29wZS5kZXRhaWwgPSAncGxhdGUnO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5kZXRhaWwgPSAnc2hvcHMnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNldEZpbGVOYW1lKCkge1xyXG4gICAgaWYoISRzY29wZS5pdGVtLmZpbGVOYW1lKSB7XHJcbiAgICAgIGlmKCRzY29wZS5pdGVtLml0ZW1Tb3VyY2UgaW4gaXRlbXMgJiYgaXRlbXNbJHNjb3BlLml0ZW0uaXRlbVNvdXJjZV0ubWFpbkRudCkge1xyXG4gICAgICAgICRzY29wZS5pdGVtLmZpbGVOYW1lID0gaXRlbXNbJHNjb3BlLml0ZW0uaXRlbVNvdXJjZV0ubWFpbkRudC5yZXBsYWNlKCcubHpqc29uJywgJycpLnJlcGxhY2UoJy5vcHRpbWlzZWQnLCAnJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2V0RnVsbFN0YXRzKCkge1xyXG4gICAgLy8gZnVsbCBzdGF0cyBhcmUgY2xlYXJlZCB3aGVuIHB1Ymxpc2hpbmcgYnVpbGRzXHJcbiAgICAkc2NvcGUuaXRlbS5mdWxsU3RhdHMgPSAkc2NvcGUuaXRlbS5zdGF0cztcclxuICAgIFxyXG4gICAgaWYoJHNjb3BlLml0ZW0uZW5jaGFudG1lbnRTdGF0cyAhPSBudWxsICYmICRzY29wZS5pdGVtLmVuY2hhbnRtZW50U3RhdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAkc2NvcGUuaXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKCRzY29wZS5pdGVtLmVuY2hhbnRtZW50U3RhdHMsICRzY29wZS5pdGVtLmZ1bGxTdGF0cyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKCRzY29wZS5pdGVtLnNwYXJrU3RhdHMgIT0gbnVsbCAmJiAkc2NvcGUuaXRlbS5zcGFya1N0YXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgJHNjb3BlLml0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cygkc2NvcGUuaXRlbS5zcGFya1N0YXRzLCAkc2NvcGUuaXRlbS5mdWxsU3RhdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiByZXBvcnRQcm9ncmVzcyhtc2cpIHtcclxuICAgIC8vICRzY29wZS5wcm9ncmVzcyArPSAnfCcgKyBtc2c7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncHJvZ3Jlc3M6ICcgKyBtc2cpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRCdWlsZHMoKSB7XHJcbiAgICB2YXIgYnVpbGRzID0gc2F2ZUhlbHBlci5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICAkc2NvcGUuYnVpbGRzID0gYnVpbGRzO1xyXG4gIH1cclxufV0pOyIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0V4cG9ydEN0cmwnLCBcclxuICBbJyRzY29wZScsJyR3aW5kb3cnLCdzYXZlSGVscGVyJyxcclxuICAgZnVuY3Rpb24oJHNjb3BlLCAkd2luZG93LCBzYXZlSGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgIFxyXG4gIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ2RlZmF1bHQtYmFjayc7XHJcbiAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCBFWFBPUlQnO1xyXG4gIFxyXG4gIHZhciByYXdTYXZlZERhdGEgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICAkc2NvcGUuZXhwb3J0RGF0YSA9IEpTT04uc3RyaW5naWZ5KHJhd1NhdmVkRGF0YSwgbnVsbCwgMSk7XHJcbiAgXHJcbiAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzYXZlZEl0ZW1zJywgTFpTdHJpbmcuY29tcHJlc3NUb1VURjE2KCRzY29wZS5leHBvcnREYXRhKSk7XHJcbiAgfVxyXG59XSk7XHJcbiIsImFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0hlYWRlckN0cmwnLCBcclxuW1xyXG4gIGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICB9XHJcbl0pLmRpcmVjdGl2ZSgnZG5nZWFyc2ltSGVhZGVyJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvbmF2L2hlYWRlci5odG1sJyxcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdOYXZDdHJsJywgXHJcbiAgWyckc2NvcGUnLCckbG9jYXRpb24nLCd0cmFuc2xhdGlvbnMnLCdyZWdpb24nLCdpdGVtQ2F0ZWdvcnknLCdzYXZlSGVscGVyJyxcclxuICBmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLHRyYW5zbGF0aW9ucyxyZWdpb24saXRlbUNhdGVnb3J5LHNhdmVIZWxwZXIpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgdmFyIG5vTG9jYXRpb25NZW51ID0gW107XHJcbiAgICAgIHZhciBub3JtYWxNZW51ID0gW1xyXG4gICAgICAgIHtwYXRoOiAnYnVpbGRzJywgbmFtZTonYnVpbGRzJywgaWNvbjogJ21lbnUtaGFtYnVyZ2VyJ30sXHJcbiAgICAgICAge3BhdGg6ICdzZWFyY2gnLCBuYW1lOidzZWFyY2gnLCBpY29uOiAnc2VhcmNoJ30sXHJcbiAgICAgICAgXTtcclxuICAgICAgXHJcbiAgICAgIHZhciBidWlsZEFjdGlvbiA9IHtwYXRoOiAnYnVpbGQnLCBuYW1lOididWlsZCd9O1xyXG4gICAgICBcclxuICAgICAgdmFyIHdpdGhCdWlsZE1lbnUgPSBbXHJcbiAgICAgICAge3BhdGg6ICdidWlsZHMnLCBuYW1lOididWlsZHMnLCBpY29uOiAnbWVudS1oYW1idXJnZXInfSxcclxuICAgICAgICB7cGF0aDogJ3NlYXJjaCcsIG5hbWU6J3NlYXJjaCcsIGljb246ICdzZWFyY2gnfSxcclxuICAgICAgICBidWlsZEFjdGlvbixcclxuICAgICAgICBdO1xyXG4gICAgICAgIFxyXG4gICAgICByZWdpb24uaW5pdCgpO1xyXG4gICAgXHJcbiAgICAgICRzY29wZS5pc1NlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkbG9jYXRpb24ucGF0aCgpLmluZGV4T2YoJy9zZWFyY2gnKSA9PSAwO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgICRzY29wZS5pc0xvYWRpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25zLnN0YXJ0ZWRMb2FkaW5nICYmIFxyXG4gICAgICAgICAgICAgICF0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSAmJlxyXG4gICAgICAgICAgICAgIHJlZ2lvbi50bG9jYXRpb24gIT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgIHJlZ2lvbi50bG9jYXRpb24udXJsICE9ICcnICYmXHJcbiAgICAgICAgICAgICAgISRzY29wZS5ub1JlZ2lvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUubm9SZWdpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gcmVnaW9uLmRudExvY2F0aW9uID09IG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICRzY29wZS5pc0h0dHBPbmx5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICE9ICdodHRwczonICYmIGxvY2F0aW9uLmhvc3RuYW1lICE9ICdsb2NhbGhvc3QnO1xyXG4gICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICRzY29wZS5nZXRBY3Rpb25zID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBtZW51ID0gbnVsbDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGN1cnJlbnRCdWlsZCA9IHNhdmVIZWxwZXIuZ2V0Q3VycmVudEJ1aWxkKCk7XHJcbiAgICAgICAgICBpZihjdXJyZW50QnVpbGQpIHtcclxuICAgICAgICAgICAgaWYoISRzY29wZS5zYXZlZEl0ZW1zIHx8ICEoY3VycmVudEJ1aWxkIGluICRzY29wZS5zYXZlZEl0ZW1zKSkge1xyXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2FkaW5nIHNhdmVkIGl0ZW1zJyk7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNhdmVkSXRlbXMgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoIShjdXJyZW50QnVpbGQgaW4gJHNjb3BlLnNhdmVkSXRlbXMpKSB7XHJcbiAgICAgICAgICAgICAgY3VycmVudEJ1aWxkID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICBpZihyZWdpb24uZG50TG9jYXRpb24gIT0gbnVsbCAmJiByZWdpb24uZG50TG9jYXRpb24udXJsID09ICcnKSB7XHJcbiAgICAgICAgICAgIG1lbnUgPSBub0xvY2F0aW9uTWVudTsgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKHJlZ2lvbi50bG9jYXRpb24gIT0gbnVsbCAmJiByZWdpb24udGxvY2F0aW9uLnVybCA9PSAnJykge1xyXG4gICAgICAgICAgICBtZW51ID0gbm9Mb2NhdGlvbk1lbnU7IFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihjdXJyZW50QnVpbGQgJiYgY3VycmVudEJ1aWxkICE9ICdudWxsJykge1xyXG4gICAgICAgICAgICBtZW51ID0gd2l0aEJ1aWxkTWVudTtcclxuICAgICAgICAgICAgYnVpbGRBY3Rpb24ucGF0aCA9ICdidWlsZC8nICsgY3VycmVudEJ1aWxkO1xyXG4gICAgICAgICAgICBidWlsZEFjdGlvbi5uYW1lID0gY3VycmVudEJ1aWxkO1xyXG4gICAgICAgICAgICBpZihjdXJyZW50QnVpbGQgaW4gJHNjb3BlLnNhdmVkSXRlbXMpIHtcclxuICAgICAgICAgICAgICBidWlsZEFjdGlvbi5idWlsZCA9ICRzY29wZS5zYXZlZEl0ZW1zW2N1cnJlbnRCdWlsZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoJGxvY2F0aW9uLnBhdGgoKSA9PSAnL3ZpZXctZ3JvdXAnIHx8IHJlZ2lvbi5kbnRMb2NhdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG1lbnUgPSBub3JtYWxNZW51O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG1lbnUgPSBub3JtYWxNZW51O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgcGF0aCA9ICRsb2NhdGlvbi5wYXRoO1xyXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1lbnUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHZhbHVlLmV4dHJhQ3NzO1xyXG4gICAgICAgICAgICBpZihwYXRoICYmIHBhdGgubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICBpZih2YWx1ZS5wYXRoLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5leHRyYUNzcyA9ICdhY3RpdmUnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHZhbHVlLnBhdGggJiYgdmFsdWUucGF0aC5sZW5ndGggPiAxICYmIHBhdGguaW5kZXhPZignLycgKyB2YWx1ZS5wYXRoKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgaWYodmFsdWUucGF0aCAhPSAnYnVpbGRzJyB8fCBwYXRoID09ICcvYnVpbGRzJykge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuZXh0cmFDc3MgPSAnYWN0aXZlJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gbWVudTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZXgpIHtcclxuICAgICAgICAgICRzY29wZS5zaW1FcnJvciA9IGV4Lm1lc3NhZ2U7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjYXRjaChleCkge1xyXG4gICAgICAkc2NvcGUuc2ltRXJyb3IgPSBleC5tZXNzYWdlO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGV4KTtcclxuICAgIH1cclxuICB9XHJcbl0pXHJcbi5kaXJlY3RpdmUoJ2RuZ2VhcnNpbU5hdicsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL25hdi9uYXYuaHRtbCdcclxuICB9O1xyXG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5jb250cm9sbGVyKCdTZXR1cEN0cmwnLCBcclxuICBbJyRzY29wZScsJyR3aW5kb3cnLCckcm91dGUnLCckdGltZW91dCcsJ3RyYW5zbGF0aW9ucycsJ2RudEluaXQnLCdkbnRSZXNldCcsJ3JlZ2lvbicsXHJcbiAgIGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdywgJHJvdXRlLCAkdGltZW91dCwgdHJhbnNsYXRpb25zLCBkbnRJbml0LCBkbnRSZXNldCwgcmVnaW9uKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgIFxyXG4gIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lID0gJ2RlZmF1bHQtYmFjayc7XHJcbiAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCBTRVRVUCc7XHJcbiAgXHJcbiAgJHNjb3BlLmFkdmFuY2VkU2V0dXAgPSBmYWxzZTtcclxuICAkc2NvcGUuaXNMb2FkaW5nID0gdHJhbnNsYXRpb25zLnN0YXJ0ZWRMb2FkaW5nICYmICF0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKTtcclxuICAkc2NvcGUudHJhbnNsYXRpb25SZXN1bHRzID0gW107XHJcbiAgJHNjb3BlLmhvc3RlZEZpbGVzID0gcmVnaW9uLmhvc3RlZEZpbGVzO1xyXG4gIFxyXG4gIHZhciBub0xvY2F0aW9uID0gJyc7XHJcbiAgdmFyIHNlc3Npb25Mb2NhdGlvbiA9IHJlZ2lvbi5hbHRlcm5hdGl2ZUZpbGVzLnVybDtcclxuICBpZihzZXNzaW9uTG9jYXRpb24gPT0gbnVsbCkge1xyXG4gICAgc2Vzc2lvbkxvY2F0aW9uID0gbm9Mb2NhdGlvbjtcclxuICB9XHJcbiAgXHJcbiAgJHNjb3BlLmxvY2F0aW9uID0gc2Vzc2lvbkxvY2F0aW9uO1xyXG4gIGlmKCRzY29wZS5sb2NhdGlvbiA9PSBub0xvY2F0aW9uKSB7XHJcbiAgICAkc2NvcGUudGVzdFJlc3VsdHMgPSBbJ05vIGxvY2F0aW9uIHNldCddO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgICRzY29wZS50ZXN0UmVzdWx0cyA9IFsnVXNpbmcgbG9jYXRpb24gJyArICRzY29wZS5sb2NhdGlvbl07XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgJHNjb3BlLmxvY2F0aW9uID0gdXJsO1xyXG4gICAgJHNjb3BlLmlzTG9hZGluZyA9IHRydWU7XHJcbiAgICAkc2NvcGUuc2F2ZUxvY2F0aW9uKCk7XHJcbiAgICBkbnRSZXNldCgpO1xyXG5cclxuICAgICRzY29wZS50cmFuc2xhdGlvblJlc3VsdHMgPSBbXTtcclxuICAgIHZhciBleGlzdGluZ0ZpbGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVUlTdHJpbmdzX2ZpbGUnKTtcclxuICAgIGlmKGV4aXN0aW5nRmlsZSA9PSBudWxsIHx8IGV4aXN0aW5nRmlsZS5pbmRleE9mKHVybCkgPT0gLTEpIHtcclxuICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgnVUlTdHJpbmdzJyk7XHJcbiAgICB9XHJcbiAgICB0cmFuc2xhdGlvbnMucmVzZXQoKTtcclxuICAgIHRyYW5zbGF0aW9ucy5sb2NhdGlvbiA9IHVybDtcclxuICAgIHRyYW5zbGF0aW9ucy5pbml0KHByb2dyZXNzVHJhbnNsYXRpb25zLCB0cmFuc2xhdGlvbnNTdGF0dXMpO1xyXG4gIH1cclxuICBcclxuICAkc2NvcGUucmVzZXRTZXNzaW9uRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnRlc3RSZXN1bHRzID0gWydzZXNzaW9uIGRhdGEgcmVzZXQuLiByZWxvYWRpbmcgcGFnZSddO1xyXG4gICAgcmVnaW9uLnRsb2NhdGlvbiA9IG51bGw7XHJcbiAgICByZWdpb24uZG50TG9jYXRpb24gPSBudWxsO1xyXG4gICAgdHJhbnNsYXRpb25zLnJlc2V0KCk7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgICB0aGlzLnNhdmVMb2NhdGlvbigpO1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7ICAgXHJcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcclxuICAgICAgbG9jYXRpb24ucmVsb2FkKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5sb2FkVWlTdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS50cmFuc2xhdGlvblJlc3VsdHMgPSBbXTtcclxuICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ1VJU3RyaW5ncycpO1xyXG4gICAgZG50UmVzZXQoKTtcclxuICAgIHRyYW5zbGF0aW9ucy5yZXNldCgpO1xyXG4gICAgdHJhbnNsYXRpb25zLmxvY2F0aW9uID0gcmVnaW9uLnRsb2NhdGlvbi51cmw7XHJcbiAgICB0cmFuc2xhdGlvbnMuaW5pdChwcm9ncmVzc1RyYW5zbGF0aW9ucywgdHJhbnNsYXRpb25zU3RhdHVzKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gdHJhbnNsYXRpb25zU3RhdHVzKCkge1xyXG4gICAgcHJvZ3Jlc3NUcmFuc2xhdGlvbnMoJ2N1cnJlbnQgdHJhbnNsYXRpb25zIGNvbnRhaW4gd29yZHMgbGlrZSAnICsgdHJhbnNsYXRpb25zLnRyYW5zbGF0ZSgzMjkpICsgJywgJyArIHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoMzIzKSArICcgYW5kICcgKyB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKDMzNSkpO1xyXG4gICAgJHNjb3BlLmlzTG9hZGluZyA9IGZhbHNlO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcm9ncmVzcyhtc2cpIHtcclxuICAgICR0aW1lb3V0KFxyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZigkc2NvcGUudGVzdFJlc3VsdHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgJHNjb3BlLnRlc3RSZXN1bHRzLnB1c2gobXNnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBwcm9ncmVzc1RyYW5zbGF0aW9ucyhtc2cpIHtcclxuICAgICR0aW1lb3V0KFxyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZigkc2NvcGUudHJhbnNsYXRpb25SZXN1bHRzICE9IG51bGwpIHtcclxuICAgICAgICAgICRzY29wZS50cmFuc2xhdGlvblJlc3VsdHMucHVzaChtc2cpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS5zYXZlTG9jYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgIGRudFJlc2V0KCk7XHJcbiAgICBpZigkc2NvcGUubG9jYXRpb24gIT0gbm9Mb2NhdGlvbikge1xyXG4gICAgICByZWdpb24uc2V0Q3VzdG9tVXJsKCRzY29wZS5sb2NhdGlvbik7XHJcbiAgICAgIFxyXG4gICAgICByZWdpb24uaW5pdCgpO1xyXG4gICAgICBpZihyZWdpb24uYWx0ZXJuYXRpdmVGaWxlcy5yZWdpb24gPT0gcmVnaW9uLnRsb2NhdGlvbi5yZWdpb24pIHtcclxuICAgICAgICB0cmFuc2xhdGlvbnMucmVzZXQoKTtcclxuICAgICAgICB0cmFuc2xhdGlvbnMuaW5pdChwcm9ncmVzc1RyYW5zbGF0aW9ucywgdHJhbnNsYXRpb25zU3RhdHVzKTtcclxuICAgICAgfVxyXG4gICAgICAkc2NvcGUudGVzdFJlc3VsdHMgPSBbXHJcbiAgICAgICAgJ0xvY2F0aW9uIHNhdmVkJyxcclxuICAgICAgICAnVXNpbmcgbG9jYXRpb24gJyArICRzY29wZS5sb2NhdGlvbl07XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gICRzY29wZS50ZXN0TG9jYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKCRzY29wZS5sb2NhdGlvbiAhPSBub0xvY2F0aW9uKSB7XHJcbiAgICAgICRzY29wZS50ZXN0UmVzdWx0cyA9IFtcclxuICAgICAgICAnVXNpbmcgbG9jYXRpb24gJyArICRzY29wZS5sb2NhdGlvbixcclxuICAgICAgICAnTG9hZGluZyBhbGwgZGF0YSB1c2VkIGJ5IHRoZSBhcHAnXTtcclxuXHJcbiAgICAgIHRyYW5zbGF0aW9ucy5pbml0KHByb2dyZXNzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZG50SW5pdChwcm9ncmVzcyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufV0pO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0J1aWxkU2VhcmNoQ3RybCcsIFsnJHJvdXRlUGFyYW1zJywnJGxvY2F0aW9uJywnJHRpbWVvdXQnLCdvbmxpbmVTZXJ2aWNlJywnam9icycsIGJ1aWxkU2VhcmNoXSk7XHJcblxyXG5mdW5jdGlvbiBidWlsZFNlYXJjaCgkcm91dGVQYXJhbXMsJGxvY2F0aW9uLCR0aW1lb3V0LG9ubGluZVNlcnZpY2Usam9icykge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZtLm1heERpc3BsYXkgPSAxNTtcclxuICB2bS50b3RhbE51bVJlc3VsdHMgPSAwO1xyXG4gIFxyXG4gIGpvYnMuaW5pdChudWxsLCBmdW5jdGlvbigpIHtcclxuICAgIGlmKCRyb3V0ZVBhcmFtcy5qb2JJZCkge1xyXG4gICAgICB2bS5qb2IgPSBqb2JzLmdldEJ5SWQoJHJvdXRlUGFyYW1zLmpvYklkKTtcclxuICAgICAgZ2V0Q2xhc3NCdWlsZHMoKTtcclxuICAgIH0gXHJcbiAgfSlcclxuICBcclxuICB0aGlzLnNldEpvYiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2pvYklkJywgdm0uam9iLmlkKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnNob3dNb3JlUmVzdWx0cyA9IGZ1bmN0aW9uKGV4dHJhKSB7XHJcbiAgICB2bS5tYXhEaXNwbGF5ID0gdm0udG90YWxOdW1SZXN1bHRzICsgZXh0cmE7XHJcbiAgICB2bS50b3RhbE51bVJlc3VsdHMgPSAwO1xyXG4gIH1cclxuICBcclxuICB2bS5hbGxSZXN1bHRzID0gbnVsbDtcclxuICB2bS5nZXRGaWx0ZXJlZEJ1aWxkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICAvLyBpbml0XHJcbiAgICBpZih2bS5hbGxSZXN1bHRzID09IG51bGwpIHtcclxuICAgICAgdm0uYWxsUmVzdWx0cyA9IFtdO1xyXG4gICAgICBmb3IodmFyIHVpZCBpbiB2bS5qb2JCdWlsZHMpIHtcclxuICAgICAgICBmb3IodmFyIGJ1aWxkTmFtZSBpbiB2bS5qb2JCdWlsZHNbdWlkXSkge1xyXG4gICAgICAgICAgdm0uYWxsUmVzdWx0cy5wdXNoKHtcclxuICAgICAgICAgICAgdWlkOiB1aWQsXHJcbiAgICAgICAgICAgIG5hbWU6IGJ1aWxkTmFtZSxcclxuICAgICAgICAgICAgZGF0YTogdm0uam9iQnVpbGRzW3VpZF1bYnVpbGROYW1lXVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICBmb3IodmFyIGk9MDtpPHZtLmFsbFJlc3VsdHMubGVuZ3RoOysraSkge1xyXG4gICAgICBcclxuICAgICAgdmFyIHJlc3VsdCA9IHZtLmFsbFJlc3VsdHNbaV07XHJcbiAgICAgIGlmKHZtLmZpbHRlciAmJiB2bS5maWx0ZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBmID0gdm0uZmlsdGVyLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgaWYocmVzdWx0Lm5hbWUudG9VcHBlckNhc2UoKS5pbmRleE9mKGYpID09IC0xKSB7XHJcbiAgICAgICAgICBpZighcmVzdWx0LmRhdGEuZ3VpbGQgfHxcclxuICAgICAgICAgICAgIHJlc3VsdC5kYXRhLmd1aWxkLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihmKSA9PSAtMSkge1xyXG5cclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcclxuXHJcbiAgICAgIGlmKHJlc3VsdHMubGVuZ3RoID49IHZtLm1heERpc3BsYXkpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS50b3RhbE51bVJlc3VsdHMgPSByZXN1bHRzLmxlbmd0aDtcclxuICAgIHJldHVybiByZXN1bHRzO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRDbGFzc0J1aWxkcygpIHtcclxuICAgIGlmKHZtLmpvYikge1xyXG4gICAgICBvbmxpbmVTZXJ2aWNlLmdldENsYXNzQnVpbGRzKHZtLmpvYikudGhlbihmdW5jdGlvbihidWlsZHMpIHtcclxuICAgICAgICBpZihidWlsZHMpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnb3QgYnVpbGRzJywgYnVpbGRzKTtcclxuICAgICAgICAgIHZtLmpvYkJ1aWxkcyA9IGJ1aWxkcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbm8gYnVpbGRzJyk7XHJcbiAgICAgICAgICB2bS5qb2JCdWlsZHMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDdHJsJywgWyckbG9jYXRpb24nLCAnJHJvdXRlUGFyYW1zJywgJ29ubGluZVNlcnZpY2UnLCBwcm9maWxlXSk7XHJcblxyXG5mdW5jdGlvbiBwcm9maWxlKCRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBvbmxpbmVTZXJ2aWNlLCBzYXZlSGVscGVyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIHZhciB2bSA9IHRoaXM7XHJcbiAgdm0udWlkID0gJHJvdXRlUGFyYW1zLnVpZDtcclxuICBcclxuICBnZXRTYXZlZEJ1aWxkcygpO1xyXG4gIGdldFByb2ZpbGUoKTtcclxuICBcclxuICBmdW5jdGlvbiBnZXRTYXZlZEJ1aWxkcygpIHtcclxuICAgIG9ubGluZVNlcnZpY2UuZ2V0VXNlckJ1aWxkcyh2bS51aWQpLnRoZW4oZnVuY3Rpb24oYnVpbGRzKSB7XHJcbiAgICAgIGlmKGJ1aWxkcykge1xyXG4gICAgICAgIHZtLnN0b3JlZEJ1aWxkcyA9IGJ1aWxkcztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5zdG9yZWRCdWlsZHMgPSB7fTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFByb2ZpbGUoKSB7XHJcbiAgICBvbmxpbmVTZXJ2aWNlLmdldFByb2ZpbGUodm0udWlkKS50aGVuKGZ1bmN0aW9uKHByb2ZpbGUpIHtcclxuICAgICAgaWYocHJvZmlsZSkge1xyXG4gICAgICAgIHZtLnByb2ZpbGUgPSBwcm9maWxlO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHZtLnByb2ZpbGUgPSB7fTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMubG9hZCA9IGZ1bmN0aW9uKGJ1aWxkTmFtZSwgYnVpbGQpIHtcclxuXHJcbiAgICB2YXIgbmV3R3JvdXBOYW1lID0gc2F2ZUhlbHBlci5pbXBvcnRHcm91cChidWlsZE5hbWUsIGJ1aWxkLml0ZW1zKTtcclxuICAgIFxyXG4gICAgc2F2ZUhlbHBlci5yZW5hbWVTYXZlZEdyb3VwKFxyXG4gICAgICBuZXdHcm91cE5hbWUsIFxyXG4gICAgICBuZXdHcm91cE5hbWUsXHJcbiAgICAgIGJ1aWxkLmVuZW15TGV2ZWwsXHJcbiAgICAgIGJ1aWxkLnBsYXllckxldmVsLFxyXG4gICAgICBidWlsZC5oZXJvTGV2ZWwsXHJcbiAgICAgIGJ1aWxkLmpvYixcclxuICAgICAgYnVpbGQuZGFtYWdlVHlwZSxcclxuICAgICAgYnVpbGQuZWxlbWVudCxcclxuICAgICAgYnVpbGQuc2Vjb25kYXJ5RWxlbWVudCxcclxuICAgICAgYnVpbGQuZW5lbXlTdGF0Q2FwcywgXHJcbiAgICAgIGJ1aWxkLnBsYXllclN0YXRDYXBzLCBcclxuICAgICAgYnVpbGQuY29udmVyc2lvbnMsIFxyXG4gICAgICBidWlsZC5iYXNlU3RhdHMsIFxyXG4gICAgICBidWlsZC5oZXJvU3RhdHMpO1xyXG4gICAgICBcclxuICAgIHZtLmJ1aWxkcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgXHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkLycgKyBuZXdHcm91cE5hbWUpO1xyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ1B1Ymxpc2hDdHJsJywgWyckbG9jYXRpb24nLCAnc2F2ZUhlbHBlcicsICdvbmxpbmVTZXJ2aWNlJywgJyRyb3V0ZVBhcmFtcycsICdyZWdpb24nLCBwdWJsaXNoXSk7XHJcblxyXG5mdW5jdGlvbiBwdWJsaXNoKCRsb2NhdGlvbiwgc2F2ZUhlbHBlciwgb25saW5lU2VydmljZSwgJHJvdXRlUGFyYW1zLCByZWdpb24pIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB2bS5zaG93ID0gJHJvdXRlUGFyYW1zLnNob3c7XHJcbiAgXHJcbiAgb25saW5lU2VydmljZS5sb2dpbigpLnRoZW4oZnVuY3Rpb24odXNlcikge1xyXG4gICAgZ2V0U2F2ZWRCdWlsZHMoKTtcclxuICAgIGdldFByb2ZpbGUoKTtcclxuICBcclxuICAgIHZtLmJ1aWxkcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFNhdmVkQnVpbGRzKCkge1xyXG4gICAgdmFyIHVzZXIgPSB2bS5nZXRVc2VyKCk7XHJcbiAgICBpZih1c2VyKSB7XHJcbiAgICAgIG9ubGluZVNlcnZpY2UuZ2V0VXNlckJ1aWxkcyh1c2VyLnVpZCkudGhlbihmdW5jdGlvbihidWlsZHMpIHtcclxuICAgICAgICBpZihidWlsZHMpIHtcclxuICAgICAgICAgIHZtLnN0b3JlZEJ1aWxkcyA9IGJ1aWxkcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB2bS5zdG9yZWRCdWlsZHMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRQcm9maWxlKCkge1xyXG4gICAgdmFyIHVzZXIgPSB2bS5nZXRVc2VyKCk7XHJcbiAgICBpZih1c2VyKSB7XHJcbiAgICAgIG9ubGluZVNlcnZpY2UuZ2V0UHJvZmlsZSh1c2VyLnVpZCkudGhlbihmdW5jdGlvbihwcm9maWxlKSB7XHJcbiAgICAgICAgaWYocHJvZmlsZSkge1xyXG4gICAgICAgICAgdm0ucHJvZmlsZSA9IHByb2ZpbGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgdm0ucHJvZmlsZSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc2F2ZVByb2ZpbGUgPSBmdW5jdGlvbigpIHtcclxuICAgIG9ubGluZVNlcnZpY2Uuc2F2ZVByb2ZpbGUodm0ucHJvZmlsZSkudGhlbihnZXRQcm9maWxlKS5jYXRjaChoYW5kbGVFcnJvcik7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG9ubGluZVNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnNhdmUgPSBmdW5jdGlvbihidWlsZE5hbWUsIGJ1aWxkKSB7XHJcbiAgICBidWlsZC5sYXN0VXBkYXRlID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcclxuICAgIG9ubGluZVNlcnZpY2Uuc2F2ZUJ1aWxkKGJ1aWxkTmFtZSwgYnVpbGQpLnRoZW4oZ2V0U2F2ZWRCdWlsZHMpLmNhdGNoKGhhbmRsZUVycm9yKTtcclxuICAgIHZtLnB1Ymxpc2hCdWlsZCA9IG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuc3RhcnRQdWJsaXNoID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICBpZihidWlsZE5hbWUgaW4gdm0uc3RvcmVkQnVpbGRzKSB7XHJcbiAgICAgIGlmKCF2bS5idWlsZHNbYnVpbGROYW1lXS5yZWdpb24pIHtcclxuICAgICAgICB2bS5idWlsZHNbYnVpbGROYW1lXS5yZWdpb24gPSB2bS5zdG9yZWRCdWlsZHNbYnVpbGROYW1lXS5yZWdpb247XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKCF2bS5idWlsZHNbYnVpbGROYW1lXS5hYm91dCkge1xyXG4gICAgICAgIHZtLmJ1aWxkc1tidWlsZE5hbWVdLmFib3V0ID0gdm0uc3RvcmVkQnVpbGRzW2J1aWxkTmFtZV0uYWJvdXQ7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKCF2bS5idWlsZHNbYnVpbGROYW1lXS5ndWlsZCkge1xyXG4gICAgICAgIHZtLmJ1aWxkc1tidWlsZE5hbWVdLmd1aWxkID0gdm0uc3RvcmVkQnVpbGRzW2J1aWxkTmFtZV0uZ3VpbGQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoIXZtLmJ1aWxkc1tidWlsZE5hbWVdLnJlZ2lvbikge1xyXG4gICAgICB2bS5idWlsZHNbYnVpbGROYW1lXS5yZWdpb24gPSByZWdpb24uZG50TG9jYXRpb24ucmVnaW9uO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5wdWJsaXNoQnVpbGQgPSBidWlsZE5hbWU7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycikge1xyXG4gICAgY29uc29sZS5sb2coZXJyKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5kZWxldGVBY2NvdW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBvbmxpbmVTZXJ2aWNlLmRlbGV0ZUFjY291bnQodm0uc3RvcmVkQnVpbGRzKTtcclxuICB9XHJcbiAgXHJcbiAgdGhpcy5nZXRCdWlsZExpbWl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5wcm9maWxlICYmIHZtLnByb2ZpbGUubWF4QnVpbGRzKSB7XHJcbiAgICAgIHJldHVybiB2bS5wcm9maWxlLm1heEJ1aWxkcztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gMTU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0TnVtU3RvcmVkQnVpbGRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gXy5zaXplKHZtLnN0b3JlZEJ1aWxkcyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0TnVtQnVpbGRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gXy5zaXplKHZtLmJ1aWxkcyk7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMubG9hZCA9IGZ1bmN0aW9uKGJ1aWxkTmFtZSwgYnVpbGQpIHtcclxuXHJcbiAgICB2YXIgbmV3R3JvdXBOYW1lID0gc2F2ZUhlbHBlci5pbXBvcnRHcm91cChidWlsZE5hbWUsIGJ1aWxkLml0ZW1zKTtcclxuICAgIFxyXG4gICAgc2F2ZUhlbHBlci5yZW5hbWVTYXZlZEdyb3VwKFxyXG4gICAgICBuZXdHcm91cE5hbWUsIFxyXG4gICAgICBuZXdHcm91cE5hbWUsXHJcbiAgICAgIGJ1aWxkLmVuZW15TGV2ZWwsXHJcbiAgICAgIGJ1aWxkLnBsYXllckxldmVsLFxyXG4gICAgICBidWlsZC5oZXJvTGV2ZWwsXHJcbiAgICAgIGJ1aWxkLmpvYixcclxuICAgICAgYnVpbGQuZGFtYWdlVHlwZSxcclxuICAgICAgYnVpbGQuZWxlbWVudCxcclxuICAgICAgYnVpbGQuc2Vjb25kYXJ5RWxlbWVudCxcclxuICAgICAgYnVpbGQuZW5lbXlTdGF0Q2FwcywgXHJcbiAgICAgIGJ1aWxkLnBsYXllclN0YXRDYXBzLCBcclxuICAgICAgYnVpbGQuY29udmVyc2lvbnMsIFxyXG4gICAgICBidWlsZC5iYXNlU3RhdHMsIFxyXG4gICAgICBidWlsZC5oZXJvU3RhdHMpO1xyXG4gICAgICBcclxuICAgIHZtLmJ1aWxkcyA9IHNhdmVIZWxwZXIuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLnNpZ25PdXQgPSBmdW5jdGlvbigpIHtcclxuICAgIG9ubGluZVNlcnZpY2Uuc2lnbk91dCgpO1xyXG4gIH1cclxuICBcclxuICB2bS5kZWxldGVMb2NhbCA9IGZ1bmN0aW9uKGJ1aWxkTmFtZSkge1xyXG4gICAgdm0ubG9jYWxUb0RlbGV0ZSA9IGJ1aWxkTmFtZTtcclxuICB9XHJcbiAgXHJcbiAgdm0uZ2V0QWxsQnVpbGROYW1lcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGFsbEtleXMgPSBfLmtleXModm0uYnVpbGRzKS5jb25jYXQoXy5rZXlzKHZtLnN0b3JlZEJ1aWxkcykpO1xyXG4gICAgcmV0dXJuIF8udW5pcShhbGxLZXlzLnNvcnQoKSwgdHJ1ZSk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLnJlYWxseURlbGV0ZUxvY2FsID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICBzYXZlSGVscGVyLnVwZGF0ZWRTYXZlZEl0ZW1zKGJ1aWxkTmFtZSwgW10pO1xyXG4gICAgdm0ubG9jYWxUb0RlbGV0ZSA9IG51bGw7XHJcbiAgICB2bS5idWlsZHMgPSBzYXZlSGVscGVyLmdldFNhdmVkSXRlbXMoKTtcclxuICB9XHJcbiAgXHJcbiAgdm0uZGVsZXRlU2VydmVyID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICB2bS5zZXJ2ZXJUb0RlbGV0ZSA9IGJ1aWxkTmFtZTtcclxuICB9XHJcbiAgXHJcbiAgdm0ucmVhbGx5RGVsZXRlU2VydmVyID0gZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICBvbmxpbmVTZXJ2aWNlLmRlbGV0ZUJ1aWxkKGJ1aWxkTmFtZSwgdm0uc3RvcmVkQnVpbGRzW2J1aWxkTmFtZV0pLnRoZW4oZ2V0U2F2ZWRCdWlsZHMpO1xyXG4gICAgdm0uc2VydmVyVG9EZWxldGUgPSBudWxsO1xyXG4gIH1cclxuICBcclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ1B1Ymxpc2hlZEN0cmwnLCBbJ29ubGluZVNlcnZpY2UnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICdzYXZlSGVscGVyJywgJ3N0YXRIZWxwZXInLCBwdWJsaXNoZWRdKTtcclxuXHJcbmZ1bmN0aW9uIHB1Ymxpc2hlZChvbmxpbmVTZXJ2aWNlLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgc2F2ZUhlbHBlciwgc3RhdEhlbHBlcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIHZtLnVpZCA9ICRyb3V0ZVBhcmFtcy51aWQ7XHJcbiAgdm0uYnVpbGROYW1lID0gJHJvdXRlUGFyYW1zLmJ1aWxkTmFtZTtcclxuICBcclxuICBnZXRCdWlsZCgpO1xyXG4gIGdldFByb2ZpbGUoKTtcclxuICBcclxuICB2bS5jb3B5TG9jYWxseSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG5ld0dyb3VwTmFtZSA9IHNhdmVIZWxwZXIuaW1wb3J0R3JvdXAodm0uYnVpbGROYW1lLCB2bS5idWlsZC5pdGVtcyk7XHJcbiAgICBcclxuICAgIHNhdmVIZWxwZXIucmVuYW1lU2F2ZWRHcm91cChcclxuICAgICAgbmV3R3JvdXBOYW1lLCBcclxuICAgICAgbmV3R3JvdXBOYW1lLFxyXG4gICAgICB2bS5idWlsZC5lbmVteUxldmVsLFxyXG4gICAgICB2bS5idWlsZC5wbGF5ZXJMZXZlbCxcclxuICAgICAgdm0uYnVpbGQuaGVyb0xldmVsLFxyXG4gICAgICB2bS5idWlsZC5qb2IsXHJcbiAgICAgIHZtLmJ1aWxkLmRhbWFnZVR5cGUsXHJcbiAgICAgIHZtLmJ1aWxkLmVsZW1lbnQsXHJcbiAgICAgIHZtLmJ1aWxkLnNlY29uZGFyeUVsZW1lbnQsXHJcbiAgICAgIHZtLmJ1aWxkLmVuZW15U3RhdENhcHMsIFxyXG4gICAgICB2bS5idWlsZC5wbGF5ZXJTdGF0Q2FwcywgXHJcbiAgICAgIHZtLmJ1aWxkLmNvbnZlcnNpb25zLCBcclxuICAgICAgdm0uYnVpbGQuYmFzZVN0YXRzLCBcclxuICAgICAgdm0uYnVpbGQuaGVyb1N0YXRzKTtcclxuICAgICAgXHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2J1aWxkLycgKyBuZXdHcm91cE5hbWUpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRQcm9maWxlKCkge1xyXG4gICAgb25saW5lU2VydmljZS5nZXRQcm9maWxlKHZtLnVpZCkudGhlbihmdW5jdGlvbihwcm9maWxlKSB7XHJcbiAgICAgIGlmKHByb2ZpbGUpIHtcclxuICAgICAgICB2bS5wcm9maWxlID0gcHJvZmlsZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5wcm9maWxlID0ge307XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRCdWlsZCgpIHtcclxuICAgIG9ubGluZVNlcnZpY2UuZ2V0QnVpbGQodm0udWlkLCB2bS5idWlsZE5hbWUpLnRoZW4oZnVuY3Rpb24oYnVpbGQpIHtcclxuICAgICAgaWYoYnVpbGQpIHtcclxuICAgICAgICB2bS5idWlsZCA9IGJ1aWxkO1xyXG4gICAgICAgIHZtLnN0YXRzID0gc3RhdEhlbHBlci5nZXRCdWlsZFN0YXRzKGJ1aWxkKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2bS5idWlsZCA9IHt9O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuY29udHJvbGxlcignUmVnaW9uQ3RybCcsIFxyXG4gIFsnJHRpbWVvdXQnLCckcm91dGUnLCckcm91dGVQYXJhbXMnLCckbG9jYXRpb24nLCd0cmFuc2xhdGlvbnMnLCdyZWdpb24nLCckaHR0cCcsXHJcbiAgZnVuY3Rpb24oJHRpbWVvdXQsJHJvdXRlLCRyb3V0ZVBhcmFtcywkbG9jYXRpb24sdHJhbnNsYXRpb25zLHJlZ2lvbiwkaHR0cCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgXHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLm92ZXJyaWRlID0gcmVnaW9uLmdldE92ZXJyaWRlKCk7XHJcbiAgICByZWdpb24uaW5pdCgpO1xyXG4gICAgdHJhbnNsYXRpb25zLmluaXQoXHJcbiAgICAgIGZ1bmN0aW9uKG1zZykgeyBcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtc2cpO1xyXG4gICAgICB9LCBcclxuICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgdm0ucmVnaW9uID0gcmVnaW9uO1xyXG4gICAgdm0udEhvdmVyTG9jYXRpb24gPSByZWdpb24udGxvY2F0aW9uO1xyXG4gICAgdm0uaG92ZXJMb2NhdGlvbiA9IHJlZ2lvbi5kbnRMb2NhdGlvbjtcclxuICAgIHZtLmVkaXQgPSAocmVnaW9uLmRudExvY2F0aW9uID09IG51bGwpO1xyXG4gICAgdm0uZG50VmVyc2lvbiA9ICcnO1xyXG4gICAgc2V0RG50VmVyc2lvbigpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzZXREbnRWZXJzaW9uKCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyB2ZXJzaW9uIGZvciAnLCB2bS5yZWdpb24uZG50TG9jYXRpb24pO1xyXG4gICAgICBpZih2bS5yZWdpb24uZG50TG9jYXRpb24gJiYgdm0ucmVnaW9uLmRudExvY2F0aW9uLnVybCkge1xyXG4gICAgICAgICRodHRwLmdldCh2bS5yZWdpb24uZG50TG9jYXRpb24udXJsICsgJy9WZXJzaW9uLmNmZycpLnRoZW4oZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgICBpZihyZXMgJiYgcmVzLmRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0xpbmVEZXRhaWxzID0gcmVzLmRhdGEuc3BsaXQoJ1xcclxcbicpO1xyXG4gICAgICAgICAgICBpZihuZXdMaW5lRGV0YWlscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICB2YXIgc3BhY2VEZXRhaWxzID0gbmV3TGluZURldGFpbHNbMF0uc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICBpZihzcGFjZURldGFpbHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgdm0uZG50VmVyc2lvbiA9ICd2JyArIHNwYWNlRGV0YWlsc1sxXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2bS5nZXREbnRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gcmVnaW9uLmRudExvY2F0aW9uO1xyXG4gICAgfTtcclxuICAgIHZtLmdldFRsb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gcmVnaW9uLnRsb2NhdGlvbjtcclxuICAgIH07XHJcbiAgICAgXHJcbiAgICB2bS5nZXRIb3N0ZWRGaWxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnZ2V0dGluZyBob3N0ZWQgZmlsZXMnKTtcclxuICAgICAgcmV0dXJuIHJlZ2lvbi5ob3N0ZWRGaWxlcztcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZtLmdldFdvcmxkTmFtZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZih0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKDEwMTY5KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIHZtLnNldFRMb2NhdGlvbiA9IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgIHJlZ2lvbi5zZXRUTG9jYXRpb24obG9jYXRpb24pO1xyXG4gICAgICB2bS5lZGl0ID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2bS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgIGlmKCF2bS5vdmVycmlkZSkge1xyXG4gICAgICAgIHZtLnNldFRMb2NhdGlvbihudWxsKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoJHJvdXRlUGFyYW1zLnJlZ2lvbikge1xyXG4gICAgICAgICRyb3V0ZVBhcmFtcy5yZWdpb24gPSBsb2NhdGlvbi5yZWdpb247XHJcbiAgICAgICAgJHJvdXRlLnVwZGF0ZVBhcmFtcygkcm91dGVQYXJhbXMpO1xyXG4gICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZWdpb24uc2V0TG9jYXRpb24obG9jYXRpb24pO1xyXG4gICAgICB9XHJcbiAgICAgIHZtLmVkaXQgPSBmYWxzZTtcclxuICAgICAgc2V0RG50VmVyc2lvbigpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdm0uc2V0T3ZlcnJpZGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICByZWdpb24uc2V0T3ZlcnJpZGUodmFsdWUpO1xyXG4gICAgICB2bS5vdmVycmlkZSA9IHZhbHVlO1xyXG4gICAgICB2bS5lZGl0ID0gdmFsdWU7XHJcbiAgICB9O1xyXG4gIH1cclxuXSlcclxuLmRpcmVjdGl2ZSgnZG5nZWFyc2ltUmVnaW9uJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvcmVnaW9uL3JlZ2lvbi5odG1sJyxcclxuICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxyXG4gIH07XHJcbn0pOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5nZWFyc2ltQ3VzdG9tSXRlbXMnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHt9LFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6IFsnJHdpbmRvdycsJ3NhdmVIZWxwZXInLCckbG9jYXRpb24nLCdoQ29kZVZhbHVlcycsJ2l0ZW1DYXRlZ29yeScsJyR0aW1lb3V0JywgY3VzdG9tSXRlbUN0cmxdLFxyXG4gICAgY29udHJvbGxlckFzOiAnY3VzdG9tSXRlbXMnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9zZWFyY2gvY3VzdG9tLWl0ZW1zLmh0bWwnXHJcbiAgfTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBjdXN0b21JdGVtQ3RybCgkd2luZG93LHNhdmVIZWxwZXIsJGxvY2F0aW9uLGhDb2RlVmFsdWVzLGl0ZW1DYXRlZ29yeSwkdGltZW91dCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB0aGlzLmN1c3RvbUl0ZW1zID0gaENvZGVWYWx1ZXMuY3VzdG9tSXRlbXM7XHJcbiAgXHJcbiAgdGhpcy5tYXhEaXNwbGF5ID0gMTA7XHJcbiAgdGhpcy5jdXJyZW50UmVzdWx0cyA9IDA7XHJcbiAgXHJcbiAgaWYodGhpcy5uYW1lU2VhcmNoID09IG51bGwpIHtcclxuICAgIHRoaXMubmFtZVNlYXJjaCA9ICcnO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldFJlc3VsdHMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmN1c3RvbUl0ZW1zO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldE5ld1N0YXROYW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLm5hbWVTZWFyY2ggPT0gJycgfHwgdGhpcy5uYW1lU2VhcmNoID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuICd1bm5hbWVkIGN1c3RvbSBpdGVtJztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5uYW1lU2VhcmNoO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB0aGlzLmNyZWF0ZUN1c3RvbUl0ZW0gPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKHRoaXMubmFtZVNlYXJjaCA9PSAnJyB8fCB0aGlzLm5hbWVTZWFyY2ggPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLm5hbWVTZWFyY2ggPSB0aGlzLmdldE5ld1N0YXROYW1lKCk7XHJcbiAgICB9XHJcbiAgICAkbG9jYXRpb24ucGF0aCgnL2l0ZW0vX2N1c3RvbTouJyArIHRoaXMubmFtZVNlYXJjaCk7XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBldmVyeXRoaW5nUGFyYW1zID0gWyckd2luZG93JywnJHRpbWVvdXQnLCckcm91dGVQYXJhbXMnLCckbG9jYXRpb24nLCdoQ29kZVZhbHVlcycsJ3JlZ2lvbicsJ3RyYW5zbGF0aW9ucycsJ2RudERhdGEnLGV2ZXJ5dGhpbmdTZWFyY2hDdHJsXTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0l0ZW1zQ3RybCcsZXZlcnl0aGluZ1BhcmFtcyk7XHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5nZWFyc2ltRXZlcnl0aGluZ1NlYXJjaCcsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge30sXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIG5hbWVTZWFyY2g6ICc9bmFtZVNlYXJjaCdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiBldmVyeXRoaW5nUGFyYW1zLFxyXG4gICAgY29udHJvbGxlckFzOiAnaXRlbXMnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS9zZWFyY2gvZXZlcnl0aGluZy1zZWFyY2guaHRtbCdcclxuICB9O1xyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBldmVyeXRoaW5nU2VhcmNoQ3RybCAoJHdpbmRvdywgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBoQ29kZVZhbHVlcywgcmVnaW9uLCB0cmFuc2xhdGlvbnMsIGRudERhdGEpIHtcclxuICBcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB2bS5ib3hlcyA9IG51bGw7XHJcbiAgdm0ubWF4RGlzcGxheSA9IDMyO1xyXG4gIHZtLmN1cnJlbnRSZXN1bHRzID0gMDtcclxuICB2bS5yZXN1bHRzID0gbnVsbDtcclxuICB2bS5taW5MZXZlbCA9IDE7XHJcbiAgdm0ubWF4TGV2ZWwgPSA5OTtcclxuXHJcbiAgXHJcbiAgdmFyIG1pbkxldmVsID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtaW5MZXZlbCcpKTtcclxuICBpZigkcm91dGVQYXJhbXMubWluTGV2ZWwpIHtcclxuICAgIG1pbkxldmVsID0gTnVtYmVyKCRyb3V0ZVBhcmFtcy5taW5MZXZlbCk7XHJcbiAgfVxyXG4gIGlmKG1pbkxldmVsID4gMCAmJiBtaW5MZXZlbCA8IDEwMCkge1xyXG4gICAgdm0ubWluTGV2ZWwgPSBtaW5MZXZlbDtcclxuICB9XHJcbiAgdm0ub3JpZ01pbkxldmVsID0gbWluTGV2ZWw7XHJcbiAgXHJcbiAgdmFyIG1heExldmVsID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtYXhMZXZlbCcpKTtcclxuICBpZigkcm91dGVQYXJhbXMubWF4TGV2ZWwpIHtcclxuICAgIG1heExldmVsID0gTnVtYmVyKCRyb3V0ZVBhcmFtcy5tYXhMZXZlbCk7XHJcbiAgfVxyXG4gIGlmKG1heExldmVsID4gMCAmJiBtYXhMZXZlbCA8IDEwMCkge1xyXG4gICAgdm0ubWF4TGV2ZWwgPSBtYXhMZXZlbDtcclxuICB9XHJcbiAgdm0ub3JpZ01heExldmVsID0gbWF4TGV2ZWw7XHJcblxyXG4gIGlmKCF2bS5uYW1lU2VhcmNoKSB7XHJcbiAgICB2bS5uYW1lU2VhcmNoID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25hbWVTZWFyY2gnKTtcclxuICAgIGlmKCRyb3V0ZVBhcmFtcy5uYW1lKSB7XHJcbiAgICAgIHZtLm5hbWVTZWFyY2ggPSAkcm91dGVQYXJhbXMubmFtZTtcclxuICAgIH1cclxuICAgIGlmKHZtLm5hbWVTZWFyY2ggPT0gbnVsbCkge1xyXG4gICAgICB2bS5uYW1lU2VhcmNoID0gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gICR3aW5kb3cuZG9jdW1lbnQudGl0bGUgPSAnZG5nZWFyc2ltIHwgQUxMIElURU0gU0VBUkNIJztcclxuICBcclxuICB2YXIgZmlsZU5hbWUgPSAnYWxsLWl0ZW1zLmx6anNvbic7XHJcbiAgXHJcbiAgZG50RGF0YS5pbml0KGZpbGVOYW1lLCBudWxsLCBmdW5jdGlvbigpIHt9LCBmdW5jdGlvbigpIHtcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5pbml0Qm94ZXMoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIFxyXG4gIHZtLmluaXRCb3hlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYoZG50RGF0YS5pc0xvYWRlZChmaWxlTmFtZSkgJiYgdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpIHtcclxuICAgICAgdm0uYm94ZXMgPSBbXTtcclxuICAgICAgXHJcbiAgICAgIHZhciBkYXRhcyA9IGRudERhdGEuZ2V0RGF0YShmaWxlTmFtZSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGFzLmxlbmd0aCArICcgYm94ZXMnKTtcclxuICAgICAgZm9yKHZhciBpPTA7aTxkYXRhcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBkYXRhc1tpXTtcclxuICAgICAgICBpZihkYXRhLk5hbWVJRCA+IDApIHtcclxuICAgICAgICAgIHZhciBib3ggPSB7XHJcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxyXG4gICAgICAgICAgICBuYW1lOiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGRhdGEuTmFtZUlELCBkYXRhLk5hbWVJRFBhcmFtKSxcclxuICAgICAgICAgICAgcmFuazogaENvZGVWYWx1ZXMucmFua05hbWVzW2RhdGEuUmFua10sXHJcbiAgICAgICAgICAgIGljb246IGRhdGEuSWNvbkltYWdlSW5kZXgsXHJcbiAgICAgICAgICAgIGxldmVsTGltaXQ6IGRhdGEuTGV2ZWxMaW1pdCxcclxuICAgICAgICAgICAgZmlsZU5hbWU6IGRhdGEuZmlsZU5hbWUsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2bS5ib3hlcy5wdXNoKGJveCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB2bS5ib3hlcyA9IF8uc29ydEJ5KHZtLmJveGVzLCAnbmFtZScpO1xyXG4gICAgICBcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uc2hvd01vcmVSZXN1bHRzKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB2bS5nZXRSZXN1bHRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5ib3hlcyA9PSBudWxsKSB7XHJcbiAgICAgIHZtLmluaXRCb3hlcygpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZih2bS5ib3hlcyA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbmV3UmVzdWx0cyA9IFtdO1xyXG4gICAgdmFyIG51bUJveGVzID0gdm0uYm94ZXMubGVuZ3RoO1xyXG4gICAgdmFyIGN1ckRpc3BsYXkgPSAwO1xyXG4gICAgZm9yKHZhciBpPTA7aTxudW1Cb3hlcyAmJiAoY3VyRGlzcGxheTx2bS5tYXhEaXNwbGF5KTsrK2kpIHtcclxuICAgICAgdmFyIGUgPSB2bS5ib3hlc1tpXTtcclxuXHJcbiAgICAgIGlmKGUubGV2ZWxMaW1pdCA8IHZtLm1pbkxldmVsIHx8IGUubGV2ZWxMaW1pdCA+IHZtLm1heExldmVsIHx8ICghZS5sZXZlbExpbWl0KSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZih2bS5uYW1lU2VhcmNoICE9ICcnKSB7XHJcbiAgICAgICAgdmFyIG5hbWVTZWFyY2hlcyA9IHZtLm5hbWVTZWFyY2guc3BsaXQoJyAnKTtcclxuICAgICAgICBpZihuYW1lU2VhcmNoZXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgIG5hbWVTZWFyY2hlcyA9IFt2bS5uYW1lU2VhcmNoXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGFsbE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICBmb3IodmFyIG5zPTA7bnM8bmFtZVNlYXJjaGVzLmxlbmd0aDsrK25zKSB7XHJcbiAgICAgICAgICBpZihlLm5hbWUgJiYgZS5uYW1lLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKS5pbmRleE9mKG5hbWVTZWFyY2hlc1tuc10udG9VcHBlckNhc2UoKSkgPT0gLTEpIHtcclxuICAgICAgICAgICAgYWxsTWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCFhbGxNYXRjaCkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBuZXdSZXN1bHRzLnB1c2goZSk7XHJcbiAgICAgIGN1ckRpc3BsYXkrKztcclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0udG90YWxOdW1SZXN1bHRzID0gbmV3UmVzdWx0cy5sZW5ndGg7XHJcbiAgICByZXR1cm4gbmV3UmVzdWx0cztcclxuICB9XHJcbiAgXHJcbiAgdm0uY2hhbmdlU2VhcmNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih2bS5taW5MZXZlbCAhPSB2bS5vcmlnTWluTGV2ZWwpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21pbkxldmVsJywgdm0ubWluTGV2ZWwpO1xyXG4gICAgICAkbG9jYXRpb24uc2VhcmNoKCdtaW5MZXZlbCcsIHZtLm1pbkxldmVsKTtcclxuICAgICAgdm0ub3JpZ01pbkxldmVsID0gdm0ubWluTGV2ZWw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHZtLm1heExldmVsICE9IHZtLm9yaWdNYXhMZXZlbCkge1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWF4TGV2ZWwnLCB2bS5tYXhMZXZlbCk7XHJcbiAgICAgICRsb2NhdGlvbi5zZWFyY2goJ21heExldmVsJywgdm0ubWF4TGV2ZWwpO1xyXG4gICAgICB2bS5vcmlnTWF4TGV2ZWwgPSB2bS5tYXhMZXZlbDtcclxuICAgIH1cclxuXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbmFtZVNlYXJjaCcsIHZtLm5hbWVTZWFyY2gpO1xyXG4gICAgJGxvY2F0aW9uLnNlYXJjaCgnbmFtZScsIHZtLm5hbWVTZWFyY2gpO1xyXG4gICAgXHJcbiAgICB2bS5tYXhEaXNwbGF5ID0gNjQ7XHJcbiAgICB2bS5yZXN1bHRzID0gdm0uZ2V0UmVzdWx0cygpO1xyXG4gIH1cclxuXHJcbiAgdm0uc2hvd01vcmVSZXN1bHRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3Nob3cgbW9yZScsIHZtLm1heERpc3BsYXkpO1xyXG4gICAgICB2bS5tYXhEaXNwbGF5ICs9IDE4O1xyXG4gICAgICB2bS5yZXN1bHRzID0gdm0uZ2V0UmVzdWx0cygpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgY29udHJvbGxlclBhcmFtcyA9IFsnJHNjb3BlJywnJHdpbmRvdycsJyRyb3V0ZVBhcmFtcycsJyR0aW1lb3V0JywnJGxvY2F0aW9uJywnJHJvdXRlJyxcclxuJ3RyYW5zbGF0aW9ucycsXHJcbidpdGVtQ2F0ZWdvcnknLFxyXG4nam9icycsXHJcbidoQ29kZVZhbHVlcycsXHJcbidpdGVtRmFjdG9yeScsXHJcbidyZWdpb24nLFxyXG4nc2F2ZUhlbHBlcicsIGl0ZW1TZWFyY2hDdHJsXTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmNvbnRyb2xsZXIoJ0l0ZW1TZWFyY2hDdHJsJywgY29udHJvbGxlclBhcmFtcyk7XHJcblxyXG5mdW5jdGlvbiBpdGVtU2VhcmNoQ3RybChcclxuICAkc2NvcGUsJHdpbmRvdywkcm91dGVQYXJhbXMsJHRpbWVvdXQsJGxvY2F0aW9uLCRyb3V0ZSxcclxuICB0cmFuc2xhdGlvbnMsXHJcbiAgaXRlbUNhdGVnb3J5LFxyXG4gIGpvYnMsXHJcbiAgaENvZGVWYWx1ZXMsXHJcbiAgaXRlbUZhY3RvcnksXHJcbiAgcmVnaW9uLFxyXG4gIHNhdmVIZWxwZXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgXHJcbiAgdmFyIHZtID0gdGhpcztcclxuICBcclxuICB2bS5pdGVtQ2F0ZWdvcnkgPSBpdGVtQ2F0ZWdvcnkuYnlQYXRoKCRyb3V0ZVBhcmFtcy5jYXQpO1xyXG4gIGlmKCF2bS5pdGVtQ2F0ZWdvcnkpIHtcclxuICAgICB2YXIgY2F0TmFtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZEl0ZW1DYXRlZ29yeScpO1xyXG4gICAgIGlmKCFjYXROYW1lKSB7XHJcbiAgICAgICBjYXROYW1lID0gJ3RpdGxlcyc7XHJcbiAgICAgfVxyXG4gICAgIFxyXG4gICAgIHZtLml0ZW1DYXRlZ29yeSA9IGl0ZW1DYXRlZ29yeS5ieU5hbWUoY2F0TmFtZSk7XHJcbiAgICAgaWYoIXZtLml0ZW1DYXRlZ29yeSB8fCB2bS5pdGVtQ2F0ZWdvcnkuaGlkZUluU2VhcmNoKSB7XHJcbiAgICAgICBjYXROYW1lID0gJ3RpdGxlcyc7XHJcbiAgICAgICB2bS5pdGVtQ2F0ZWdvcnkgPSBpdGVtQ2F0ZWdvcnkuYnlOYW1lKCd0aXRsZXMnKTtcclxuICAgICB9XHJcbiAgICAgaWYodm0uaXRlbUNhdGVnb3J5KSB7XHJcbiAgICAgICAvLyBjb25zb2xlLmxvZygnbW92aW5nJyk7XHJcbiAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdjYXQnLCB2bS5pdGVtQ2F0ZWdvcnkucGF0aCk7XHJcbiAgICAgICAkcm91dGUucmVsb2FkKCk7XHJcbiAgICAgfVxyXG4gICAgIHJldHVybjtcclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgJHdpbmRvdy5kb2N1bWVudC50aXRsZSA9ICdkbmdlYXJzaW0gfCBTRUFSQ0ggJyArIHZtLml0ZW1DYXRlZ29yeS5uYW1lLnRvVXBwZXJDYXNlKCk7XHJcbiAgXHJcbiAgdm0uam9iID0ge2lkOiAtMSwgbmFtZTogJyd9O1xyXG4gIHZtLmpvYnMgPSBbdm0uam9iXTtcclxuICB2bS5hbGxKb2JzID0gW107XHJcbiAgdm0ubWluTGV2ZWwgPSAxO1xyXG4gIHZtLm1heExldmVsID0gOTk7XHJcbiAgdm0ubWF4RGlzcGxheSA9IDEwO1xyXG4gIHZtLnRvdGFsTnVtUmVzdWx0cyA9IDA7XHJcbiAgdm0uZ3JhZGVzID0gaENvZGVWYWx1ZXMucmFua05hbWVzO1xyXG4gIHZtLnN0YXQgPSB7aWQ6LTEsIG5hbWU6Jyd9O1xyXG4gIHZtLnN0YXRzID0gW3ZtLnN0YXRdO1xyXG4gIHZtLnJlc3VsdHMgPSBudWxsO1xyXG4gIFxyXG4gIGFuZ3VsYXIuZm9yRWFjaChoQ29kZVZhbHVlcy5zdGF0cywgZnVuY3Rpb24oc3RhdCwgc3RhdElkKSB7XHJcbiAgICBpZihzdGF0LnNlYXJjaGFibGUpIHtcclxuICAgICAgdm0uc3RhdHMucHVzaChzdGF0KTtcclxuICAgIH1cclxuICB9KTtcclxuICBcclxuICB2YXIgbWluTGV2ZWwgPSBOdW1iZXIobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21pbkxldmVsJykpO1xyXG4gIGlmKCRyb3V0ZVBhcmFtcy5taW5MZXZlbCkge1xyXG4gICAgbWluTGV2ZWwgPSBOdW1iZXIoJHJvdXRlUGFyYW1zLm1pbkxldmVsKTtcclxuICB9XHJcbiAgaWYobWluTGV2ZWwgPiAwICYmIG1pbkxldmVsIDwgMTAwKSB7XHJcbiAgICB2bS5taW5MZXZlbCA9IG1pbkxldmVsO1xyXG4gIH1cclxuICB2bS5vcmlnTWluTGV2ZWwgPSBtaW5MZXZlbDtcclxuICBcclxuICB2YXIgbWF4TGV2ZWwgPSBOdW1iZXIobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ21heExldmVsJykpO1xyXG4gIGlmKCRyb3V0ZVBhcmFtcy5tYXhMZXZlbCkge1xyXG4gICAgbWF4TGV2ZWwgPSBOdW1iZXIoJHJvdXRlUGFyYW1zLm1heExldmVsKTtcclxuICB9XHJcbiAgaWYobWF4TGV2ZWwgPiAwICYmIG1heExldmVsIDwgMTAwKSB7XHJcbiAgICB2bS5tYXhMZXZlbCA9IG1heExldmVsO1xyXG4gIH1cclxuICB2bS5vcmlnTWF4TGV2ZWwgPSBtYXhMZXZlbDtcclxuICBcclxuICB2bS5uYW1lU2VhcmNoID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ25hbWVTZWFyY2gnKTtcclxuICBpZigkcm91dGVQYXJhbXMubmFtZSkge1xyXG4gICAgdm0ubmFtZVNlYXJjaCA9ICRyb3V0ZVBhcmFtcy5uYW1lO1xyXG4gIH1cclxuICBpZighdm0ubmFtZVNlYXJjaCkge1xyXG4gICAgdm0ubmFtZVNlYXJjaCA9ICcnO1xyXG4gIH1cclxuICBcclxuICB2bS5vcmlnU2F2ZWRTZWFyY2hTdGF0SWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VhcmNoU3RhdCcpO1xyXG4gIGlmKCRyb3V0ZVBhcmFtcy5zdGF0KSB7XHJcbiAgICB2bS5vcmlnU2F2ZWRTZWFyY2hTdGF0SWQgPSAkcm91dGVQYXJhbXMuc3RhdDtcclxuICB9XHJcbiAgaWYodm0ub3JpZ1NhdmVkU2VhcmNoU3RhdElkID4gLTEgJiYgdm0ub3JpZ1NhdmVkU2VhcmNoU3RhdElkIGluIGhDb2RlVmFsdWVzLnN0YXRzKSB7XHJcbiAgICB2bS5zdGF0ID0gaENvZGVWYWx1ZXMuc3RhdHNbdm0ub3JpZ1NhdmVkU2VhcmNoU3RhdElkXTtcclxuICB9XHJcblxyXG4gIHZtLm5hdmlnYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgY2F0TmFtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZEl0ZW1DYXRlZ29yeScpO1xyXG4gICAgaWYoY2F0TmFtZSkge1xyXG4gICAgICB2bS5pdGVtQ2F0ZWdvcnkgPSBpdGVtQ2F0ZWdvcnkuYnlOYW1lKGNhdE5hbWUpO1xyXG4gICAgICBpZih2bS5pdGVtQ2F0ZWdvcnkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbmF2aWdhdGluZyB0byAnLCB2bS5pdGVtQ2F0ZWdvcnkucGF0aCk7XHJcbiAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnY2F0Jywgdm0uaXRlbUNhdGVnb3J5LnBhdGgpO1xyXG4gICAgICAgIHZtLnNhdmUoKTtcclxuICAgICAgICAkcm91dGUucmVsb2FkKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZtLnNhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmKCF2bS5pdGVtQ2F0ZWdvcnkuaGlkZUxldmVsKSB7XHJcbiAgICAgIGlmKHZtLm1pbkxldmVsICE9IHZtLm9yaWdNaW5MZXZlbCkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtaW5MZXZlbCcsIHZtLm1pbkxldmVsKTtcclxuICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdtaW5MZXZlbCcsIHZtLm1pbkxldmVsKTtcclxuICAgICAgICB2bS5vcmlnTWluTGV2ZWwgPSB2bS5taW5MZXZlbDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYodm0ubWF4TGV2ZWwgIT0gdm0ub3JpZ01heExldmVsKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21heExldmVsJywgdm0ubWF4TGV2ZWwpO1xyXG4gICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ21heExldmVsJywgdm0ubWF4TGV2ZWwpO1xyXG4gICAgICAgIHZtLm9yaWdNYXhMZXZlbCA9IHZtLm1heExldmVsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnbWluTGV2ZWwnLCBudWxsKTtcclxuICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnbWF4TGV2ZWwnLCBudWxsKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoIXZtLml0ZW1DYXRlZ29yeS5oaWRlSm9iKSB7XHJcbiAgICAgIGlmKHZtLmpvYiAhPSBudWxsKSB7XHJcbiAgICAgICAgaWYodm0ub3JpZ0pvYk51bWJlciAhPSB2bS5qb2IuaWQpIHtcclxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdqb2JOdW1iZXInLCB2bS5qb2IuaWQpO1xyXG4gICAgICAgICAgaWYodm0uam9iLmlkID4gLTEpIHtcclxuICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnam9iJywgdm0uam9iLmlkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdqb2InLCBudWxsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZtLm9yaWdKb2JOdW1iZXIgPSB2bS5qb2IuaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnam9iJywgbnVsbCk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBpZih2bS5zdGF0KSB7XHJcbiAgICAgIGlmKHZtLm9yaWdTYXZlZFNlYXJjaFN0YXRJZCAhPSB2bS5zdGF0LmlkKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NlYXJjaFN0YXQnLCB2bS5zdGF0LmlkKTtcclxuICAgICAgICBpZih2bS5zdGF0LmlkID4gLTEpIHtcclxuICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3N0YXQnLCB2bS5zdGF0LmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdzdGF0JywgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZtLm9yaWdTYXZlZFNlYXJjaFN0YXRJZCA9IHZtLnN0YXQuaWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbmFtZVNlYXJjaCcsIHZtLm5hbWVTZWFyY2gpO1xyXG4gICAgJGxvY2F0aW9uLnNlYXJjaCgnbmFtZScsIHZtLm5hbWVTZWFyY2gpO1xyXG4gIH07XHJcbiAgXHJcbiAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCd0cmFuc2xhdGlvbnMgbG9hZGVkJyk7XHJcbiAgICBpZihqb2JzLmlzTG9hZGVkKCkpIHtcclxuICAgICAgam9iSW5pdCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGpvYnMuaW5pdChyZXBvcnRQcm9ncmVzcywgZnVuY3Rpb24oKSB7ICR0aW1lb3V0KGpvYkluaXQpOyB9ICk7XHJcbiAgICB9XHJcblxyXG4gICAgaXRlbUNhdGVnb3J5LmluaXQodm0uaXRlbUNhdGVnb3J5Lm5hbWUsIGxvYWRSZXN1bHRzKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gcmVwb3J0UHJvZ3Jlc3MobXNnKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncHJvZ3Jlc3M6ICcgKyBtc2cpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBqb2JJbml0KCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2NhbGxlZCB0aGUgam9iIGluaXQgZnVuYycpO1xyXG4gICAgaWYodHJhbnNsYXRpb25zLmlzTG9hZGVkKCkgJiYgam9icy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0cnlpbmcgdG8gaW5pdCBqb2JzJyk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdqb2IgZHJvcGRvd24gc2hvdWxkIGJlIHNldCcpO1xyXG4gICAgICB2YXIgbmV3Sm9icyA9IGpvYnMuZ2V0RmluYWxKb2JzKCk7XHJcblxyXG4gICAgICBuZXdKb2JzLnNwbGljZSgwLCAwLCB2bS5qb2JzWzBdKTtcclxuICAgICAgdm0uam9icyA9IG5ld0pvYnM7XHJcbiAgICAgIHZtLmFsbEpvYnMgPSBqb2JzLmdldEFsbEpvYnMoKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBsYXN0Sm9iTnVtYmVyID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdqb2JOdW1iZXInKSk7XHJcbiAgICAgIHZtLm9yaWdKb2JOdW1iZXIgIT0gbGFzdEpvYk51bWJlcjtcclxuICAgICAgaWYoJHJvdXRlUGFyYW1zLmpvYiAmJiAkcm91dGVQYXJhbXMuam9iKSB7XHJcbiAgICAgICAgbGFzdEpvYk51bWJlciA9IE51bWJlcigkcm91dGVQYXJhbXMuam9iKTtcclxuICAgICAgfVxyXG4gICAgICBpZihsYXN0Sm9iTnVtYmVyICE9IG51bGwpIHtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2gobmV3Sm9icywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgaWYodmFsdWUuaWQgPT0gbGFzdEpvYk51bWJlcikge1xyXG4gICAgICAgICAgICB2bS5qb2IgPSB2YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHZtLnJhbmtDaGVja2VkID0gaENvZGVWYWx1ZXMuY2hlY2tlZFJhbms7XHJcbiAgICBcclxuICB2bS5jaGFuZ2VTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIHZtLnNhdmUoKTtcclxuICAgIGxvYWRSZXN1bHRzKCk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGxvYWRSZXN1bHRzKCkge1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZtLm1heERpc3BsYXkgPSAyNDtcclxuICAgICAgdm0ucmVzdWx0cyA9IGdldFJlc3VsdHMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRSZXN1bHRzKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dldHRpbmcgaXRlbXMnKTtcclxuICAgIHZhciBhbGxJdGVtcyA9IGl0ZW1DYXRlZ29yeS5nZXRJdGVtcyh2bS5pdGVtQ2F0ZWdvcnkubmFtZSk7XHJcbiAgICBpZihhbGxJdGVtcyA9PSBudWxsKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdubyBpdGVtcycpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgYWxsSXRlbXMgPSBhbGxJdGVtcy5zb3J0KGZ1bmN0aW9uKGl0ZW0xLCBpdGVtMikge1xyXG4gICAgICAgIHJldHVybiAoaXRlbTIubGV2ZWxMaW1pdCAtIGl0ZW0xLmxldmVsTGltaXQpO1xyXG4gICAgICB9KTtcclxuICAgICAgICAgIFxyXG4gICAgdmFyIHBjU3RhdElkID0gLTE7XHJcbiAgICBpZigncGMnIGluIHZtLnN0YXQpIHtcclxuICAgICAgcGNTdGF0SWQgPSB2bS5zdGF0LnBjO1xyXG4gICAgfVxyXG4gICAgICAgICAgXHJcbiAgICB2YXIgYWx0U3RhdElkID0gLTE7XHJcbiAgICBpZignYWx0U3RhdCcgaW4gdm0uc3RhdCkge1xyXG4gICAgICBhbHRTdGF0SWQgPSB2bS5zdGF0LmFsdFN0YXQ7XHJcbiAgICB9XHJcbiAgXHJcbiAgICB2YXIgc3RhdFZhbHMgPSBbXTtcclxuICAgIHZhciBuZXdSZXN1bHRzID0gW107XHJcbiAgICB2YXIgbnVtRXF1aXAgPSBhbGxJdGVtcy5sZW5ndGg7XHJcbiAgICB2YXIgY3VyRGlzcGxheSA9IDA7XHJcbiAgICBmb3IodmFyIGk9MDtpPG51bUVxdWlwICYmIChjdXJEaXNwbGF5PHZtLm1heERpc3BsYXkgfHwgdm0uc3RhdC5pZCA+PSAwKTsrK2kpIHtcclxuICAgICAgdmFyIGUgPSBhbGxJdGVtc1tpXTtcclxuICAgICAgaWYoZSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKCF2bS5pdGVtQ2F0ZWdvcnkuaGlkZUxldmVsKSB7XHJcbiAgICAgICAgICBpZihlLmxldmVsTGltaXQgPCB2bS5taW5MZXZlbCB8fCBlLmxldmVsTGltaXQgPiB2bS5tYXhMZXZlbCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICBpZighdm0uaXRlbUNhdGVnb3J5LmhpZGVSYW5rKSB7XHJcbiAgICAgICAgICBpZihlLnJhbmsgJiYgIXZtLnJhbmtDaGVja2VkW2UucmFuay5pZF0pIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgaWYoIXZtLml0ZW1DYXRlZ29yeS5oaWRlSm9iKSB7XHJcbiAgICAgICAgICBpZih2bS5qb2IgJiYgdm0uam9iLmlkID4gLTEpIHtcclxuICAgICAgICAgICAgaWYoIXZtLmpvYi5pc0NsYXNzSm9iKGUubmVlZEpvYkNsYXNzKSkge1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGl0ZW1GYWN0b3J5LmluaXRJdGVtKGUpO1xyXG4gICAgICAgIGlmKGUudHlwZU5hbWUgIT0gdm0uaXRlbUNhdGVnb3J5Lm5hbWUpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbmFtZSBmaWx0ZXInLCB2bS5uYW1lU2VhcmNoKTsgXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYodm0ubmFtZVNlYXJjaCAhPSAnJykge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZpbHRlcmluZyBvbiBuYW1lJyk7XHJcbiAgICAgICAgICB2YXIgbmFtZVNlYXJjaGVzID0gdm0ubmFtZVNlYXJjaC5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgaWYoIW5hbWVTZWFyY2hlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbmFtZVNlYXJjaGVzID0gW3ZtLm5hbWVTZWFyY2hdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmFyIGFsbE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgIGZvcih2YXIgbnM9MDtuczxuYW1lU2VhcmNoZXMubGVuZ3RoOysrbnMpIHtcclxuICAgICAgICAgICAgaWYoZS5uYW1lLnRvVXBwZXJDYXNlKCkuaW5kZXhPZihuYW1lU2VhcmNoZXNbbnNdLnRvVXBwZXJDYXNlKCkpID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgYWxsTWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZighYWxsTWF0Y2gpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHZtLnN0YXQuaWQgPj0gMCkge1xyXG4gICAgICAgICAgdmFyIHN0YXRGb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgc3RhdFZhbCA9IHt9O1xyXG4gICAgICAgICAgZm9yKHZhciBzPTA7czxlLnN0YXRzLmxlbmd0aDsrK3MpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXQgPSBlLnN0YXRzW3NdO1xyXG4gICAgICAgICAgICBpZihzdGF0LmlkID09IHZtLnN0YXQuaWQpIHtcclxuICAgICAgICAgICAgICBzdGF0Rm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIHN0YXRWYWwuaSA9IGN1ckRpc3BsYXk7XHJcbiAgICAgICAgICAgICAgc3RhdFZhbC5zID0gTnVtYmVyKHN0YXQubWF4KTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHN0YXQuaWQgPT0gcGNTdGF0SWQpIHtcclxuICAgICAgICAgICAgICBzdGF0Rm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIHN0YXRWYWwuaSA9IGN1ckRpc3BsYXk7XHJcbiAgICAgICAgICAgICAgc3RhdFZhbC5zID0gTnVtYmVyKHN0YXQubWF4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHN0YXQuaWQgPT0gYWx0U3RhdElkKSB7XHJcbiAgICAgICAgICAgICAgc3RhdEZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBzdGF0VmFsLmkgPSBjdXJEaXNwbGF5O1xyXG4gICAgICAgICAgICAgIHN0YXRWYWwucyA9IE51bWJlcihzdGF0Lm1heCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoIXN0YXRGb3VuZCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdGF0VmFscy5wdXNoKHN0YXRWYWwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBuZXdSZXN1bHRzLnB1c2goZSk7XHJcbiAgICAgICAgY3VyRGlzcGxheSsrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKHZtLnN0YXQuaWQgPj0gMCkge1xyXG4gICAgICBcclxuICAgICAgdmFyIGN1cnJlbnRSZXN1bHRzID0gTWF0aC5taW4oY3VyRGlzcGxheSwgdm0ubWF4RGlzcGxheSk7XHJcbiAgICAgIFxyXG4gICAgICBzdGF0VmFscyA9IHN0YXRWYWxzLnNvcnQoZnVuY3Rpb24odmFsdWUxLCB2YWx1ZTIpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUyLnMgLSB2YWx1ZTEucztcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgc3RhdFJlc3VsdHMgPSBbXTtcclxuICAgICAgZm9yKHZhciBpPTA7aTxjdXJyZW50UmVzdWx0czsrK2kpIHtcclxuICAgICAgICBzdGF0UmVzdWx0cy5wdXNoKG5ld1Jlc3VsdHNbc3RhdFZhbHNbaV0uaV0pO1xyXG4gICAgICB9XHJcbiAgICAgIG5ld1Jlc3VsdHMgPSBzdGF0UmVzdWx0cztcclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0udG90YWxOdW1SZXN1bHRzID0gbmV3UmVzdWx0cy5sZW5ndGg7XHJcbiAgICBcclxuICAgIHJldHVybiBuZXdSZXN1bHRzO1xyXG4gIH1cclxuXHJcbiAgdm0uc2hvd01vcmVSZXN1bHRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgdm0ubWF4RGlzcGxheSArPSAxODtcclxuICAgICAgdm0ucmVzdWx0cyA9IGdldFJlc3VsdHMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICByZWdpb24uaW5pdCgpO1xyXG4gIGlmKHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpKSB7XHJcbiAgICBpbml0KCk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdHJhbnNsYXRpb25zLmluaXQocmVwb3J0UHJvZ3Jlc3MsIGZ1bmN0aW9uKCkgeyAkdGltZW91dChpbml0KTsgfSApO1xyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2RuZ2VhcnNpbVNraWxsU2VhcmNoJywgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgam9iOiAnPWpvYicsXHJcbiAgICAgIGpvYnM6ICc9am9icycsXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogWyckd2luZG93JywnJHRpbWVvdXQnLCdzYXZlSGVscGVyJywncmVnaW9uJywnam9icycsJ3RyYW5zbGF0aW9ucycsJ2RudERhdGEnLCdoQ29kZVZhbHVlcycsJ2l0ZW1DYXRlZ29yeScsJyRsb2NhdGlvbicsIHNraWxsU2VhcmNoQ3RybF0sXHJcbiAgICBjb250cm9sbGVyQXM6ICdza2lsbFNlYXJjaCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3VpL3NlYXJjaC9za2lsbC1zZWFyY2guaHRtbCdcclxuICB9O1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIHNraWxsU2VhcmNoQ3RybCgkd2luZG93LCR0aW1lb3V0LHNhdmVIZWxwZXIsIHJlZ2lvbiwgam9icywgdHJhbnNsYXRpb25zLGRudERhdGEsaENvZGVWYWx1ZXMsaXRlbUNhdGVnb3J5LCRsb2NhdGlvbikge1xyXG5cclxuICB2YXIgdm0gPSB0aGlzO1xyXG4gIFxyXG4gIHZtLmFsbEpvYnMgPSBbXTtcclxuICB2bS5kbnROYW1lID0gJyc7XHJcbiAgdm0uc2tpbGxzID0gW107XHJcbiAgdm0ubG9hZGVkSm9iSWQgPSAtMTtcclxuXHJcbiAgdm0uaXRlbUNhdGVnb3J5ID0gaXRlbUNhdGVnb3J5LmJ5TmFtZSgnc2tpbGxzJyk7XHJcblxyXG4gIHZtLm5hbWVTZWFyY2ggPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbmFtZVNlYXJjaCcpO1xyXG4gIGlmKCF2bS5uYW1lU2VhcmNoKSB7XHJcbiAgICB2bS5uYW1lU2VhcmNoID0gJyc7XHJcbiAgfVxyXG4gIFxyXG4gIHJlZ2lvbi5pbml0KCk7XHJcbiAgaWYodHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpIHtcclxuICAgIGluaXQoKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB0cmFuc2xhdGlvbnMuaW5pdChyZXBvcnRQcm9ncmVzcywgZnVuY3Rpb24oKSB7ICR0aW1lb3V0KGluaXQpOyB9ICk7XHJcbiAgfVxyXG5cclxuICB2bS5uYXZpZ2F0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmKHZtLml0ZW1DYXRlZ29yeSkge1xyXG4gICAgICAgICRsb2NhdGlvbi5wYXRoKHZtLml0ZW1DYXRlZ29yeS5wYXRoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHZtLmlzTG9hZGluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgXHJcbiAgICBpZighdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3RyYW5zYXRpb25zIG5vdCBsb2FkZWQnKTtcclxuICAgICAgaWYoIXRyYW5zbGF0aW9ucy5zdGFydGVkTG9hZGluZykge1xyXG4gICAgICAgIHRyYW5zbGF0aW9ucy5pbml0KHJlcG9ydFByb2dyZXNzLCBmdW5jdGlvbigpIHsgfSApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIGJhc2VOYW1lID0gam9icy5nZXRCYXNlSm9iTmFtZSh2bS5qb2IpO1xyXG4gICAgdmFyIGRudE5hbWUgPSBnZXREbnROYW1lKGJhc2VOYW1lKTtcclxuICAgIGlmKGRudE5hbWUpIHtcclxuICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZG50TmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldERudE5hbWUoYmFzZUNsYXNzTmFtZSkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dvdCBiYXNlIGNsYXNzIDonICsgYmFzZUNsYXNzTmFtZSk7XHJcbiAgICBpZihiYXNlQ2xhc3NOYW1lICE9IG51bGwpIHtcclxuICAgICAgcmV0dXJuICdza2lsbHRhYmxlX2NoYXJhY3RlcicgKyBiYXNlQ2xhc3NOYW1lLnRvTG93ZXJDYXNlKCkgKyAnLmx6anNvbic7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRTa2lsbHMoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0dGluZyBza2lsbHMgZm9yICcgKyB2bS5qb2IubmFtZSk7XHJcbiAgICBpZih2bS5sb2FkZWRKb2JJZCA9PSB2bS5qb2IuaWQpIHtcclxuICAgICAgcmV0dXJuIHZtLnNraWxscztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBcclxuICAgICAgdmFyIGJhc2VKb2JOYW1lcyA9IFtdO1xyXG4gICAgICBpZih2bS5qb2IuaWQgPj0gMCkge1xyXG4gICAgICAgIHZhciBiYXNlTmFtZSA9IGpvYnMuZ2V0QmFzZUpvYk5hbWUodm0uam9iKTtcclxuICAgICAgICBiYXNlSm9iTmFtZXMucHVzaChiYXNlTmFtZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChiYXNlSm9iTmFtZXMsIGZ1bmN0aW9uKGJhc2VOYW1lLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBkbnROYW1lID0gZ2V0RG50TmFtZShiYXNlTmFtZSk7XHJcbiAgICAgICAgaWYoZG50TmFtZSkge1xyXG4gICAgICAgICAgaWYoIWRudERhdGEuaXNMb2FkZWQoZG50TmFtZSkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2xvYWRpbmcgc2tpbGxzIGZvciAnICsgYmFzZU5hbWUpO1xyXG4gICAgICAgICAgICBkbnREYXRhLmluaXQoZG50TmFtZSwgbnVsbCwgcmVwb3J0UHJvZ3Jlc3MsIGZ1bmN0aW9uKCkgeyAkdGltZW91dChmdW5jdGlvbigpIHsgc2V0dXBTa2lsbHMoYmFzZUpvYk5hbWVzLCB2bS5qb2IpO30gKTsgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0dXBTa2lsbHMoYmFzZUpvYk5hbWVzLCB2bS5qb2IpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNldHVwU2tpbGxzKGJhc2VKb2JOYW1lcywgam9iKSB7XHJcbiAgICBcclxuICAgIHZtLnNraWxscyA9IFtdO1xyXG4gICAgdmFyIGFsbFJlYWR5ID0gdHJ1ZTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChiYXNlSm9iTmFtZXMsIGZ1bmN0aW9uKGJhc2VOYW1lLCBpbmRleCkge1xyXG4gICAgICB2YXIgZG50TmFtZSA9IGdldERudE5hbWUoYmFzZU5hbWUpO1xyXG4gICAgICBpZighZG50RGF0YS5pc0xvYWRlZChkbnROYW1lKSkge1xyXG4gICAgICAgIGFsbFJlYWR5ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpZihhbGxSZWFkeSkge1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goYmFzZUpvYk5hbWVzLCBmdW5jdGlvbihiYXNlTmFtZSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgZG50TmFtZSA9IGdldERudE5hbWUoYmFzZU5hbWUpO1xyXG4gICAgICBcclxuICAgICAgICB2YXIgc2tpbGxzID0gZG50RGF0YS5nZXREYXRhKGRudE5hbWUpO1xyXG4gICAgICAgIHZhciBudW1Ta2lsbHMgPSBza2lsbHMubGVuZ3RoO1xyXG4gICAgICAgIGZvcih2YXIgcz0wO3M8bnVtU2tpbGxzOysrcykge1xyXG4gICAgICAgICAgaWYoc2tpbGxzW3NdLk5hbWVJRCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZihza2lsbHNbc10uRWZmZWN0Q2xhc3MxID4gMCB8fCBcclxuICAgICAgICAgICAgIHNraWxsc1tzXS5FZmZlY3RDbGFzczIgPiAwIHx8IFxyXG4gICAgICAgICAgICAgc2tpbGxzW3NdLkVmZmVjdENsYXNzMyA+IDAgfHwgXHJcbiAgICAgICAgICAgICBza2lsbHNbc10uRWZmZWN0Q2xhc3M0ID4gMCB8fFxyXG4gICAgICAgICAgICAgc2tpbGxzW3NdLkVmZmVjdENsYXNzNSA+IDAgfHwgIFxyXG4gICAgICAgICAgICAgc2tpbGxzW3NdLkVmZmVjdENsYXNzNiA+IDApIHtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBuZXdJdGVtID0ge2Q6IHNraWxsc1tzXX07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBuZXdJdGVtLmlkID0gc2tpbGxzW3NdLmlkO1xyXG4gICAgICAgICAgICBuZXdJdGVtLnR5cGVOYW1lID0gJ3NraWxscyc7XHJcbiAgICAgICAgICAgIG5ld0l0ZW0uaXRlbVNvdXJjZSA9ICdza2lsbHMnO1xyXG4gICAgICAgICAgICBuZXdJdGVtLm5hbWUgPSB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKHNraWxsc1tzXS5OYW1lSUQsIHNraWxsc1tzXS5OYW1lSURQYXJhbSk7XHJcbiAgICAgICAgICAgIG5ld0l0ZW0ubmVlZEpvYkNsYXNzID0gc2tpbGxzW3NdLk5lZWRKb2I7XHJcbiAgICAgICAgICAgIG5ld0l0ZW0ucmFuayA9IGhDb2RlVmFsdWVzLnJhbmtOYW1lc1swXTtcclxuICAgICAgICAgICAgbmV3SXRlbS5iYXNlSm9iTmFtZSA9IGJhc2VOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIG5ld0l0ZW0uaWNvbiA9IHNraWxsc1tzXS5JY29uSW1hZ2VJbmRleDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZtLnNraWxscy5wdXNoKG5ld0l0ZW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgXHJcbiAgICAgIHZtLmxvYWRlZEpvYklkID0gam9iLmlkO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICB2bS5nZXRSZXN1bHRzID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuICAgIHZhciBza2lsbHMgPSBnZXRTa2lsbHMoKTtcclxuICAgIGlmKHNraWxscyA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYodm0uam9iICYmIHZtLmpvYi5pZCA+PSAwKSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdqb2JOdW1iZXInLCB2bS5qb2IuaWQpO1xyXG4gICAgfVxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ25hbWVTZWFyY2gnLCB2bS5uYW1lU2VhcmNoKTtcclxuXHJcbiAgICB2YXIgbmV3UmVzdWx0cyA9IFtdO1xyXG4gICAgdmFyIG51bVNraWxscyA9IHNraWxscy5sZW5ndGg7XHJcbiAgICB2YXIgY3VyRGlzcGxheSA9IDA7XHJcbiAgICBmb3IodmFyIGk9MDtpPG51bVNraWxsczsrK2kpIHtcclxuICAgICAgdmFyIGUgPSBza2lsbHNbaV07XHJcbiAgICAgIFxyXG4gICAgICBpZih2bS5uYW1lU2VhcmNoICE9ICcnKSB7XHJcbiAgICAgICAgdmFyIG5hbWVTZWFyY2hlcyA9IHZtLm5hbWVTZWFyY2guc3BsaXQoJyAnKTtcclxuICAgICAgICBpZighbmFtZVNlYXJjaGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgbmFtZVNlYXJjaGVzID0gW3ZtLm5hbWVTZWFyY2hdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYWxsTWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgIGZvcih2YXIgbnM9MDtuczxuYW1lU2VhcmNoZXMubGVuZ3RoOysrbnMpIHtcclxuICAgICAgICAgIGlmKGUubmFtZSAmJiBlLm5hbWUudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpLmluZGV4T2YobmFtZVNlYXJjaGVzW25zXS50b1VwcGVyQ2FzZSgpKSA9PSAtMSkge1xyXG4gICAgICAgICAgICBhbGxNYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoIWFsbE1hdGNoKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKHZtLmpvYi5pZCA+PSAwICYmICF2bS5qb2IuaXNDbGFzc0pvYihlLm5lZWRKb2JDbGFzcykpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgbmV3UmVzdWx0cy5wdXNoKGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld1Jlc3VsdHM7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gam9iSW5pdCgpIHtcclxuICAgIGlmKHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpICYmIGpvYnMuaXNMb2FkZWQoKSkge1xyXG4gICAgICB2YXIgbmV3Sm9icyA9IGpvYnMuZ2V0RmluYWxKb2JzKCk7XHJcblxyXG4gICAgICBpZih2bS5qb2JzICYmIHZtLmpvYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgbmV3Sm9icy5zcGxpY2UoMCwgMCwgdm0uam9ic1swXSk7XHJcbiAgICAgIH1cclxuICAgICAgdm0uam9icyA9IG5ld0pvYnM7XHJcbiAgICAgIHZtLmFsbEpvYnMgPSBqb2JzLmdldEFsbEpvYnMoKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBsYXN0Sm9iTnVtYmVyID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdqb2JOdW1iZXInKSk7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1c2luZyBqb2InLCBsYXN0Sm9iTnVtYmVyKTtcclxuICAgICAgaWYobGFzdEpvYk51bWJlciAhPSBudWxsKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKG5ld0pvYnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgIGlmKHZhbHVlLmlkID09IGxhc3RKb2JOdW1iZXIpIHtcclxuICAgICAgICAgICAgdm0uam9iID0gdmFsdWU7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd1c2luZyBqb2InLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdm0uZ2V0UmVzdWx0cygpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3NraWxsIGluaXQnKTtcclxuICAgIGlmKGpvYnMuaXNMb2FkZWQoKSkge1xyXG4gICAgICAkdGltZW91dChqb2JJbml0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBqb2JzLmluaXQocmVwb3J0UHJvZ3Jlc3MsIGZ1bmN0aW9uKCkgeyAkdGltZW91dChqb2JJbml0KTsgfSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2Ruc2ltQ2hvb3NlQ2xhc3MnLCBjaG9vc2VDbGFzcyk7XHJcblxyXG5mdW5jdGlvbiBjaG9vc2VDbGFzcygpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcclxuICAgICAgam9iOiAnPWpvYicsXHJcbiAgICAgIG9uU2V0Sm9iOiAnJm9uU2V0Sm9iJ1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvd2lkZ2V0cy9jaG9vc2UtY2xhc3MuaHRtbCcsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICAgIGNvbnRyb2xsZXI6IFtcclxuICAgICAgJyR3aW5kb3cnLCckbG9jYXRpb24nLCckcm91dGVQYXJhbXMnLCckdGltZW91dCcsJ3NhdmVIZWxwZXInLCdkbnREYXRhJywnam9icycsJ2hDb2RlVmFsdWVzJywnaXRlbUNvbHVtbnNUb0xvYWQnLCdjaGFyYWN0ZXInLCBcclxuICAgICAgY2hvb3NlQ2xhc3NDb250cm9sbGVyXSxcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaG9vc2VDbGFzc0NvbnRyb2xsZXIoJHdpbmRvdywkbG9jYXRpb24sJHJvdXRlUGFyYW1zLCR0aW1lb3V0LHNhdmVIZWxwZXIsZG50RGF0YSxqb2JzLGhDb2RlVmFsdWVzLGl0ZW1Db2x1bW5zVG9Mb2FkLGNoYXJhY3Rlcikge1xyXG4gIHRoaXMuZ2V0RmluYWxKb2JzID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgYWxsSm9icyA9IGpvYnMuZ2V0RmluYWxKb2JzKCk7XHJcbiAgICB2YXIgZmluYWxKb2JzID0gW107XHJcbiAgICBmb3IodmFyIGo9MDtqPGFsbEpvYnMubGVuZ3RoOysraikge1xyXG4gICAgICBpZihqb2JzLmdldEJhc2VKb2JOYW1lKGFsbEpvYnNbal0pID09IHRoaXMuYkpvYikge1xyXG4gICAgICAgIGZpbmFsSm9icy5wdXNoKGFsbEpvYnNbal0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmluYWxKb2JzO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEJhc2VKb2JzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gam9icy5nZXRCYXNlSm9icygpO1xyXG4gIH1cclxuICBcclxuICB0aGlzLmdldEpvYk5hbWUgPSBmdW5jdGlvbihlbmdsaXNoTmFtZSkge1xyXG4gICAgdmFyIGFsbEpvYnMgPSBqb2JzLmdldEFsbEpvYnMoKTtcclxuICAgIGZvcih2YXIgaj0wO2o8YWxsSm9icy5sZW5ndGg7KytqKSB7XHJcbiAgICAgIGlmKGFsbEpvYnNbal0uZC5FbmdsaXNoTmFtZSA9PSBlbmdsaXNoTmFtZSkge1xyXG4gICAgICAgIHJldHVybiBhbGxKb2JzW2pdLm5hbWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgdGhpcy5zZXRKb2IgPSBmdW5jdGlvbihqb2IpIHtcclxuICAgIHRoaXMuam9iID0gam9iO1xyXG4gICAgaWYoam9iKSB7XHJcbiAgICAgIHRoaXMub25TZXRKb2IoKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgXHJcbiAgam9icy5pbml0KHJlcG9ydFByb2dyZXNzLCAkdGltZW91dCk7XHJcbiAgZnVuY3Rpb24gcmVwb3J0UHJvZ3Jlc3MobXNnKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncHJvZ3Jlc3M6ICcgKyBtc2cpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuICBcclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbUNhdGVnb3J5TGlua3MnLCBkbnNpbUNhdGVnb3J5TGlua3MpO1xyXG5cclxuZnVuY3Rpb24gZG5zaW1DYXRlZ29yeUxpbmtzKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgc2NvcGU6IHt9LFxyXG4gICAgYmluZFRvQ29udHJvbGxlcjoge1xyXG4gICAgICBjb2xsYXBzZTogJz1jb2xsYXBzZScsXHJcbiAgICAgIGNhdDogJz1jYXQnLFxyXG4gICAgICBidWlsZFNjcmVlbjogJz1idWlsZFNjcmVlbicsXHJcbiAgICAgIG9uQ2hhbmdlOiAnJm9uQ2hhbmdlJ1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvd2lkZ2V0cy9kbnNpbS1jYXRlZ29yeS1saW5rcy5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6IGRuc2ltQ2F0ZWdvcnlMaW5rc0NvbnRyb2xsZXIsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJyxcclxuICB9O1xyXG59O1xyXG5cclxuZnVuY3Rpb24gZG5zaW1DYXRlZ29yeUxpbmtzQ29udHJvbGxlcihpdGVtQ2F0ZWdvcnksICR3aW5kb3csIHRyYW5zbGF0aW9ucykge1xyXG5cclxuICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICB2bS5jYXRlZ29yaWVzID0gaXRlbUNhdGVnb3J5LmNhdGVnb3JpZXM7XHJcbiAgdm0uY29sbGFwc2VkID0gdHJ1ZTtcclxuXHJcbiAgdm0uc2hvdWxkU2hvdyA9IGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgaWYodm0uYnVpbGRTY3JlZW4pIHtcclxuICAgICAgcmV0dXJuICFhY3Rpb24uaGlkZUluQnVpbGQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuICFhY3Rpb24uaGlkZUluU2VhcmNoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdm0uaXNMb2FkaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gIXRyYW5zbGF0aW9ucy5sb2FkZWQ7XHJcbiAgfVxyXG5cclxuICB2bS5zZXRDYXRlZ29yeSA9IGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgXHJcbiAgICBpZih2bS5jb2xsYXBzZSkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnY29sbGFwc2luZyBjYXQnLCBhY3Rpb24pO1xyXG4gICAgICB2bS5jb2xsYXBzZWQgPSAhdm0uY29sbGFwc2VkO1xyXG4gICAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyBjYXQnLCBhY3Rpb24pO1xyXG4gICAgaWYodm0uY2F0ICE9IGFjdGlvbikge1xyXG4gICAgICB2bS5jYXQgPSBhY3Rpb247XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWxlY3RlZEl0ZW1DYXRlZ29yeScsIGFjdGlvbi5uYW1lKTtcclxuXHJcbiAgICAgIGlmKHZtLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgdm0ub25DaGFuZ2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdm0uZ2V0TmFtZSA9IGZ1bmN0aW9uKGFjdGlvbikge1xyXG4gICAgaWYoYWN0aW9uLnRJZCkge1xyXG4gICAgICByZXR1cm4gdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShhY3Rpb24udElkKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBhY3Rpb24ubmFtZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuICBcclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbUl0ZW1JY29uJywgWydleHBvcnRMaW5rSGVscGVyJywnJGxvY2F0aW9uJywncmVnaW9uJywgZG5zaW1JdGVtSWNvbl0pO1xyXG5cclxuZnVuY3Rpb24gZG5zaW1JdGVtSWNvbihleHBvcnRMaW5rSGVscGVyLCRsb2NhdGlvbixyZWdpb24pIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS93aWRnZXRzL2Ruc2ltLWl0ZW0taWNvbi5odG1sJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS4kd2F0Y2goJ2l0ZW0nLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICRzY29wZS5pY29uSW1hZ2UgPSAkc2NvcGUuZ2V0SWNvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuZ2V0SWNvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmKCRzY29wZS5pdGVtICYmICRzY29wZS5pdGVtLmljb24gPiAwKSB7XHJcbiAgICAgICAgICB2YXIgZmlsZUluZGV4ID0gTWF0aC5mbG9vcigkc2NvcGUuaXRlbS5pY29uLzIwMCArIDEpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgcHJlZml4O1xyXG4gICAgICAgICAgaWYoJHNjb3BlLml0ZW0udHlwZU5hbWUgPT0gJ3NraWxscycpIHtcclxuICAgICAgICAgICAgcHJlZml4ID0gJ3NraWxsaWNvbic7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJlZml4ID0gJ2l0ZW1pY29uJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoZmlsZUluZGV4ID4gOSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgZmlsZUluZGV4ICsgJy5wbmcnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyAnMCcgKyBmaWxlSW5kZXggKyAnLnBuZyc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuaWNvbkltYWdlID0gJHNjb3BlLmdldEljb24oKTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS5nZXRJY29uWFBvc3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZigkc2NvcGUuaXRlbSAmJiAkc2NvcGUuaXRlbS5pY29uID4gMCkge1xyXG4gICAgICAgICAgcmV0dXJuICgoJHNjb3BlLml0ZW0uaWNvbiAlIDEwKSAqIDQwKSArIDU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAkc2NvcGUuZ2V0SWNvbllQb3N0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYoJHNjb3BlLml0ZW0gJiYgJHNjb3BlLml0ZW0uaWNvbiA+IDApIHtcclxuICAgICAgICAgIHJldHVybiAoTWF0aC5mbG9vcigoJHNjb3BlLml0ZW0uaWNvbiAlIDIwMCkgLyAxMCkgKiA0MCkgKyA0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcbiAgXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5zaW1JdGVtTGluaycsIFsnZXhwb3J0TGlua0hlbHBlcicsJyRsb2NhdGlvbicsJ3JlZ2lvbicsIGRuc2ltSXRlbUxpbmtdKTtcclxuXHJcbmZ1bmN0aW9uIGRuc2ltSXRlbUxpbmsoZXhwb3J0TGlua0hlbHBlciwkbG9jYXRpb24scmVnaW9uKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICBzY29wZToge1xyXG4gICAgICBpdGVtOiAnPWl0ZW0nLFxyXG4gICAgICBub0NsaWNrOiAnPW5vQ2xpY2snLFxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvd2lkZ2V0cy9kbnNpbS1pdGVtLWxpbmsuaHRtbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICRzY29wZS5pdGVtTGluayA9ICdpdGVtLz9yZWdpb249JyArIHJlZ2lvbi5kbnRMb2NhdGlvbi5yZWdpb24gKyAnJmk9JyArIGV4cG9ydExpbmtIZWxwZXIuZW5jb2RlSXRlbSgkc2NvcGUuaXRlbSk7XHJcbiAgICAgIC8vIHZhciBiYXNlUGF0aCA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJykpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS4kd2F0Y2goJ2l0ZW0nLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICBpZiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICRzY29wZS5pdGVtTGluayA9ICdpdGVtLz9yZWdpb249JyArIHJlZ2lvbi5kbnRMb2NhdGlvbi5yZWdpb24gKyAnJmk9JyArIGV4cG9ydExpbmtIZWxwZXIuZW5jb2RlSXRlbSgkc2NvcGUuaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbUpvYkljb24nLCBbZG5zaW1Kb2JJY29uXSk7XHJcblxyXG5mdW5jdGlvbiBkbnNpbUpvYkljb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICBzY29wZToge30sXHJcbiAgICBiaW5kVG9Db250cm9sbGVyOiB7XHJcbiAgICAgIGl0ZW06ICc9aXRlbScsXHJcbiAgICAgIHNtYWxsOiAnPXNtYWxsJ1xyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAndWkvd2lkZ2V0cy9kbnNpbS1qb2ItaWNvbi5odG1sJyxcclxuICAgIGNvbnRyb2xsZXI6IGRuc2ltSm9iSWNvbkNvbnRyb2xsZXIsXHJcbiAgICBjb250cm9sbGVyQXM6ICdjdHJsJ1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG5zaW1Kb2JJY29uQ29udHJvbGxlcigpIHtcclxuICBcclxuICBpZih0aGlzLnNtYWxsKSB7XHJcbiAgICB0aGlzLnNpemVWYWx1ZSA9ICcyMDVweCAyMDVweCc7XHJcbiAgICB0aGlzLmljb25TaXplID0gMjI7XHJcbiAgICB0aGlzLmljb25PZmZzZXQgPSAwO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHRoaXMuc2l6ZVZhbHVlID0gJzQxMHB4IDQxMHB4JztcclxuICAgIHRoaXMuaWNvblNpemUgPSA0NDtcclxuICAgIHRoaXMuaWNvbk9mZnNldCA9IDU7XHJcbiAgfVxyXG5cclxuICB0aGlzLmdldEljb25YUG9zdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYodGhpcy5pdGVtICYmIHRoaXMuaXRlbS5kICYmIHRoaXMuaXRlbS5kLkpvYkljb24gPiAwKSB7XHJcbiAgICAgIHJldHVybiAoKHRoaXMuaXRlbS5kLkpvYkljb24gJSA5KSAqIHRoaXMuaWNvblNpemUpICsgdGhpcy5pY29uT2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG4gIFxyXG4gIHRoaXMuZ2V0SWNvbllQb3N0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZih0aGlzLml0ZW0gJiYgdGhpcy5pdGVtLmQgJiYgdGhpcy5pdGVtLmQuSm9iSWNvbiA+IDApIHtcclxuICAgICAgcmV0dXJuIChNYXRoLmZsb29yKHRoaXMuaXRlbS5kLkpvYkljb24gLyA5KSAqIHRoaXMuaWNvblNpemUpICsgdGhpcy5pY29uT2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG59XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2Ruc2ltTG9hZGluZycsIFsnZG50RGF0YScsJ3RyYW5zbGF0aW9ucycsJyR0aW1lb3V0JywgJ3JlZ2lvbicsIGRuc2ltTG9hZGluZ10pO1xyXG5cclxuZnVuY3Rpb24gZG5zaW1Mb2FkaW5nKGRudERhdGEsIHRyYW5zbGF0aW9ucywgJHRpbWVvdXQsIHJlZ2lvbikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICBzY29wZToge1xyXG4gICAgICBhbHNvU2hvd0ZvcjogJz1hbHNvU2hvd0ZvcicsXHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGVVcmw6ICd1aS93aWRnZXRzL2Ruc2ltLWxvYWRpbmcuaHRtbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICRzY29wZS4kb24oJ1RSQU5TTEFUSU9OX0xPQURfRVZFTlQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuc2V0TG9hZENvdW50KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgJHNjb3BlLiRvbignRE5UREFUQV9MT0FEX0VWRU5UJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLnNldExvYWRDb3VudCgpO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS4kb24oJ0ROVERBVEFfTE9BRF9FUlJPUicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHNjb3BlLmxvYWRFcnJvciA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgJHNjb3BlLiRvbignVFJBTlNMQVRJT05fTE9BRF9FUlJPUicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHNjb3BlLmxvYWRFcnJvciA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJHNjb3BlLm51bUxvYWRpbmcgPSAwO1xyXG4gICAgICAkc2NvcGUuc2V0TG9hZENvdW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLm5vUmVnaW9uID0gIXJlZ2lvbi5kbnRMb2NhdGlvbjtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgbiA9IGRudERhdGEuYW55TG9hZGluZygpO1xyXG4gICAgICAgIGlmKCF0cmFuc2xhdGlvbnMuaXNMb2FkZWQoKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYoJHNjb3BlLm51bUxvYWRpbmcgPCBuIHx8ICEkc2NvcGUudG90YWxUb0xvYWQpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnRvdGFsVG9Mb2FkID0gbjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICRzY29wZS5udW1Mb2FkaW5nID0gbjtcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICAkdGltZW91dCgpO1xyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgJHNjb3BlLmxvYWRFcnJvciA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUuc2V0TG9hZENvdW50KCk7XHJcbiAgICB9LFxyXG4gIH07XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbVNlbGVjdEFsbE9uQ2xpY2snLCBbZG5zaW1TZWxlY3RBbGxPbkNsaWNrXSk7XHJcblxyXG5mdW5jdGlvbiBkbnNpbVNlbGVjdEFsbE9uQ2xpY2soKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciBoYXNTZWxlY3RlZEFsbCA9IGZhbHNlO1xyXG4gICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCRldmVudCkge1xyXG4gICAgICAgIGlmICghaGFzU2VsZWN0ZWRBbGwpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vSU9zLCBTYWZhcmksIHRob3dzIGV4Y2VwdGlvbiBvbiBDaHJvbWUgZXRjXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHRoaXMudmFsdWUubGVuZ3RoICsgMTtcclxuICAgICAgICAgICAgaGFzU2VsZWN0ZWRBbGwgPSB0cnVlO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIC8vTm9uIElPcyBvcHRpb24gaWYgbm90IHN1cHBvcnRlZCwgZS5nLiBDaHJvbWVcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3QoKTtcclxuICAgICAgICAgICAgaGFzU2VsZWN0ZWRBbGwgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIC8vT24gYmx1ciByZXNldCBoYXNTZWxlY3RlZEFsbCB0byBhbGxvdyBmdWxsIHNlbGVjdFxyXG4gICAgICBlbGVtZW50Lm9uKCdibHVyJywgZnVuY3Rpb24oJGV2ZW50KSB7XHJcbiAgICAgICAgaGFzU2VsZWN0ZWRBbGwgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2Ruc2ltU3RhdHMnLCBbJ2hDb2RlVmFsdWVzJyxkbnNpbVN0YXRzXSk7XHJcblxyXG5mdW5jdGlvbiBkbnNpbVN0YXRzKGhDb2RlVmFsdWVzKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICBzY29wZToge1xyXG4gICAgICBzdGF0czogJz1zdGF0cycsXHJcbiAgICAgIGJ1aWxkOiAnPWJ1aWxkJyxcclxuICAgICAgYWx0U3RhdHM6ICc9YWx0U3RhdHMnLFxyXG4gICAgICBzZXBhcmF0b3I6ICc9c2VwYXJhdG9yJyxcclxuICAgICAgZmlsdGVyOiAnPWZpbHRlcicsXHJcbiAgICAgIG51bUluU2V0OiAnPW51bUluU2V0J1xyXG4gICAgfSxcclxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBzZXA7XHJcbiAgICAgIGlmKCEkc2NvcGUuc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgc2VwID0gJyc7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2VwID0gJyZuYnNwOycgKyAkc2NvcGUuc2VwYXJhdG9yICsgJyAnO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYWRkZWRFbGVtZW50cyA9IFtdO1xyXG4gICAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWxlbWVudC5jc3MoJ2Rpc3BsYXknKTtcclxuICAgICAgXHJcbiAgICAgIGZ1bmN0aW9uIHNob3dTdGF0cygpIHtcclxuICAgICAgICBlbGVtZW50LmNzcygnZGlzcGxheScsICdub25lJyApO1xyXG4gICAgICAgIHZhciBzdGF0cyA9ICRzY29wZS5zdGF0cztcclxuICAgICAgICBpZighc3RhdHMpIHtcclxuICAgICAgICAgIHN0YXRzID0gJHNjb3BlLmFsdFN0YXRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goYWRkZWRFbGVtZW50cywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgdmFsdWUucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICB2YXIgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGFwcGVuZCh0ZXh0KSB7XHJcbiAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGVsZW1lbnQuY2xvbmUoKTtcclxuICAgICAgICAgIG5ld0VsZW1lbnQuY3NzKCdkaXNwbGF5Jywgb3JpZ2luYWxEaXNwbGF5KTtcclxuICAgICAgICAgIG5ld0VsZW1lbnQuaHRtbCh0ZXh0KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgbGFzdEVsZW1lbnQuYWZ0ZXIobmV3RWxlbWVudCk7XHJcbiAgICAgICAgICBsYXN0RWxlbWVudCA9IG5ld0VsZW1lbnQ7XHJcbiAgICAgICAgICBhZGRlZEVsZW1lbnRzLnB1c2gobmV3RWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBnZXQgc3RhdHMgdGhhdCBhcmUgdXNlZCB0byBzdW1tYXJpc2VcclxuICAgICAgICB2YXIgc3VtbWFyeUZvclN0YXRzID0ge307XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHN0YXRzLCBmdW5jdGlvbihzdGF0LCBrZXkpIHtcclxuICAgICAgICAgIHZhciBkZWYgPSBoQ29kZVZhbHVlcy5zdGF0c1tzdGF0LmlkXTtcclxuICAgICAgICAgIGlmKGRlZi5zdW1tYXJ5Rm9yKSB7XHJcbiAgICAgICAgICAgIHN1bW1hcnlGb3JTdGF0c1tkZWYuc3VtbWFyeUZvcl0gPSBzdGF0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzdGF0cywgZnVuY3Rpb24oc3RhdCwga2V5KSB7XHJcbiAgICAgICAgICB2YXIgb3V0cHV0ID0gJyc7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKHN0YXQuaWQgaW4gaENvZGVWYWx1ZXMuc3RhdHMpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBkZWYgPSBoQ29kZVZhbHVlcy5zdGF0c1tzdGF0LmlkXTtcclxuICAgICAgICAgICAgaWYoISRzY29wZS5maWx0ZXIgJiYgJ2hpZGUnIGluIGRlZiAmJiBkZWYuaGlkZSkge1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoJHNjb3BlLmZpbHRlciAmJiAhZGVmWyRzY29wZS5maWx0ZXJdKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihkZWYuc3VtbWFyeUZvcikge1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHNlcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCduZWVkU2V0TnVtJyBpbiBzdGF0KSB7XHJcbiAgICAgICAgICAgICAgaWYoc3RhdC5uZWVkU2V0TnVtIDw9ICRzY29wZS5udW1JblNldCkge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9ICcqJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHN0YXQubmVlZFNldE51bSArICcmbmJzcDsnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvdXRwdXQgKz0gJzxzdHJvbmc+JztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCRzY29wZS5idWlsZCkge1xyXG4gICAgICAgICAgICAgIGlmKGRlZi5lbGVtZW50ID09ICdwcmltYXJ5Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZUlkID0gMDtcclxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5idWlsZC5lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgIGVsZUlkID0gJHNjb3BlLmJ1aWxkLmVsZW1lbnQuaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaENvZGVWYWx1ZXMuZWxlbWVudHNbZWxlSWRdLm5hbWUgKyAnJm5ic3A7JztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSBpZihkZWYuZWxlbWVudCA9PSAnc2Vjb25kYXJ5Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZUlkID0gMDtcclxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5idWlsZC5zZWNvbmRhcnlFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgIGVsZUlkID0gJHNjb3BlLmJ1aWxkLnNlY29uZGFyeUVsZW1lbnQuaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaENvZGVWYWx1ZXMuZWxlbWVudHNbZWxlSWRdLm5hbWUgKyAnJm5ic3A7JztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG91dHB1dCArPSBkZWYubmFtZSsnOjwvc3Ryb25nPiZuYnNwOycrZGVmLmRpc3BsYXkoc3RhdCk7XHJcbiAgICAgICAgICAgIGlmKGRlZi5jb21iaW5lV2l0aCA+IDApIHtcclxuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc3RhdHMsIGZ1bmN0aW9uKHN0YXQyLCBrZXkyKSB7XHJcbiAgICAgICAgICAgICAgICBpZihzdGF0Mi5pZCA9PSBkZWYuY29tYmluZVdpdGgpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoc3RhdDIubWF4ICE9IHN0YXQubWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9ICctJyArIGRlZi5kaXNwbGF5KHN0YXQyKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihzdGF0LmlkIGluIHN1bW1hcnlGb3JTdGF0cykge1xyXG4gICAgICAgICAgICAgIHZhciBzU3RhdCA9IHN1bW1hcnlGb3JTdGF0c1tzdGF0LmlkXTtcclxuICAgICAgICAgICAgICB2YXIgc0RlZiA9IGhDb2RlVmFsdWVzLnN0YXRzW3NTdGF0LmlkXTtcclxuICAgICAgICAgICAgICBvdXRwdXQgKz0gJyZuYnNwO3wmbmJzcDs8ZW0+JyArIHNEZWYuZGlzcGxheShzU3RhdCk7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9ICc8L2VtPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHNlcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCduZWVkU2V0TnVtJyBpbiBzdGF0KSB7XHJcbiAgICAgICAgICAgICAgb3V0cHV0ICs9IHN0YXQubmVlZFNldE51bSArICctSW5jcmVhc2VzJm5ic3A7JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgb3V0cHV0ICs9IHN0YXQuaWQrJzombmJzcDsnK3N0YXQubWF4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBhcHBlbmQob3V0cHV0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAkc2NvcGUuJHdhdGNoKCdzdGF0cycsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICAgIGlmIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgc2hvd1N0YXRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgICRzY29wZS4kd2F0Y2goJ2FsdFN0YXRzJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICBzaG93U3RhdHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgJHNjb3BlLiR3YXRjaCgnbnVtSW5TZXQnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICBpZiAobmV3VmFsdWUgPj0gMCkge1xyXG4gICAgICAgICAgc2hvd1N0YXRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZGlyZWN0aXZlKCdkbnNpbVN0cmluZ1RvTnVtYmVyJywgZG5zaW1TdHJpbmdUb051bWJlcik7XHJcblxyXG5mdW5jdGlvbiBkbnNpbVN0cmluZ1RvTnVtYmVyKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuICAgICAgbmdNb2RlbC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuICcnICsgdmFsdWU7XHJcbiAgICAgIH0pO1xyXG4gICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmRpcmVjdGl2ZSgnZG5zaW1TdHJpbmdUb1BlcmNlbnQnLCBkbnNpbVN0cmluZ1RvTnVtYmVyKTtcclxuXHJcbmZ1bmN0aW9uIGRuc2ltU3RyaW5nVG9OdW1iZXIoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4gICAgICBuZ01vZGVsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gJycgKyAodmFsdWUvMTAwLjApO1xyXG4gICAgICB9KTtcclxuICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUsIDEwKSoxMDA7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5kaXJlY3RpdmUoJ2ZpbGVDaGFuZ2UnLCBbJyRwYXJzZScsIGZpbGVDaGFuZ2VGdW5jdGlvbl0pO1xyXG5cclxuZnVuY3Rpb24gZmlsZUNoYW5nZUZ1bmN0aW9uKCRwYXJzZSkge1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgaW4gdGhlIGZpbGUtY2hhbmdlIGF0dHJpYnV0ZS5cclxuICAgICAgICAvLyBOb3RlIHRoZSBhdHRyaWJ1dGUgaGFzIGJlY29tZSBhbiBhbmd1bGFyIGV4cHJlc3Npb24sXHJcbiAgICAgICAgLy8gd2hpY2ggaXMgd2hhdCB3ZSBhcmUgcGFyc2luZy4gVGhlIHByb3ZpZGVkIGhhbmRsZXIgaXMgXHJcbiAgICAgICAgLy8gd3JhcHBlZCB1cCBpbiBhbiBvdXRlciBmdW5jdGlvbiAoYXR0ckhhbmRsZXIpIC0gd2UnbGwgXHJcbiAgICAgICAgLy8gY2FsbCB0aGUgcHJvdmlkZWQgZXZlbnQgaGFuZGxlciBpbnNpZGUgdGhlIGhhbmRsZXIoKVxyXG4gICAgICAgIC8vIGZ1bmN0aW9uIGJlbG93LlxyXG4gICAgICAgIHZhciBhdHRySGFuZGxlciA9ICRwYXJzZShhdHRyc1snZmlsZUNoYW5nZSddKTtcclxuXHJcbiAgICAgICAgLy8gVGhpcyBpcyBhIHdyYXBwZXIgaGFuZGxlciB3aGljaCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZVxyXG4gICAgICAgIC8vIEhUTUwgY2hhbmdlIGV2ZW50LlxyXG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIHByb3ZpZGVkIGhhbmRsZXIgaW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlLlxyXG4gICAgICAgICAgICAvLyBUaGUgZmlsZXMgdmFyaWFibGUgd2lsbCBiZSBhdmFpbGFibGUgZm9yIGNvbnN1bXB0aW9uXHJcbiAgICAgICAgICAgIC8vIGJ5IHRoZSBldmVudCBoYW5kbGVyLlxyXG4gICAgICAgICAgICBhdHRySGFuZGxlcigkc2NvcGUsIHsgJGV2ZW50OiBlLCBmaWxlczogZS50YXJnZXQuZmlsZXMgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBBdHRhY2ggdGhlIGhhbmRsZXIgdG8gdGhlIEhUTUwgY2hhbmdlIGV2ZW50IFxyXG4gICAgICAgIGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2NoYXJhY3RlcicsIGNoYXJhY3Rlcik7XHJcbmZ1bmN0aW9uIGNoYXJhY3RlcihkbnREYXRhLGl0ZW1Db2x1bW5zVG9Mb2FkLGpvYnMsaENvZGVWYWx1ZXMpIHtcclxuXHJcbiAgdmFyIGpvYkNvbnZlcnNpb25zID0gJ3JlYm9vdHBsYXllcndlaWdodHRhYmxlLmx6anNvbic7XHJcbiAgdmFyIHN0YXRDYXBzID0gJ3BsYXllcmNvbW1vbmxldmVsdGFibGUubHpqc29uJztcclxuICB2YXIgam9iQmFzZVN0YXRzID0gJ3BsYXllcmxldmVsdGFibGUub3B0aW1pc2VkLmpzb24nO1xyXG5cclxuICB2YXIgaGVyb0xldmVscyA9ICdoZXJvbGV2ZWx0YWJsZS5sempzb24nO1xyXG4gIHZhciBoZXJvTGV2ZWxQb3RlbnRpYWxzID0gJ3BvdGVudGlhbHRhYmxlX2hlcm9sZXZlbC5sempzb24nO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIHJlcG9ydFByb2dyZXNzKG1zZykge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgbXNnKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpbml0OiBmdW5jdGlvbihjb21wbGV0ZSkge1xyXG4gICAgICBqb2JzLmluaXQocmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KGpvYkNvbnZlcnNpb25zLCBpdGVtQ29sdW1uc1RvTG9hZC5qb2JDb252ZXJzaW9uQ29sc1RvTG9hZCwgcmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KHN0YXRDYXBzLCBpdGVtQ29sdW1uc1RvTG9hZC5zdGF0Q2FwQ29sc1RvTG9hZCwgcmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KGpvYkJhc2VTdGF0cywgaXRlbUNvbHVtbnNUb0xvYWQuam9iQmFzZVN0YXRDb2xzVG9Mb2FkLCByZXBvcnRQcm9ncmVzcywgY29tcGxldGUpO1xyXG4gICAgICBkbnREYXRhLmluaXQoaGVyb0xldmVscywgbnVsbCwgcmVwb3J0UHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgZG50RGF0YS5pbml0KGhlcm9MZXZlbFBvdGVudGlhbHMsIG51bGwsIHJlcG9ydFByb2dyZXNzLCBjb21wbGV0ZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRIZXJvU3RhdHM6IGZ1bmN0aW9uKGhlcm9MZXZlbCkge1xyXG4gICAgICB2YXIgaGVyb1N0YXRzID0gW107XHJcbiAgICAgIGlmKGhlcm9MZXZlbCA+IDApIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBkbnREYXRhLmZpbmRGYXN0KGhlcm9MZXZlbHMsICdpZCcsIGhlcm9MZXZlbCk7XHJcbiAgICAgICAgaWYoaW5kZXgubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHZhciBoID0gZG50RGF0YS5nZXRSb3coaGVyb0xldmVscywgaW5kZXhbMF0pO1xyXG4gICAgICAgICAgaWYoaCkge1xyXG4gICAgICAgICAgICB2YXIgcEluZGV4ID0gZG50RGF0YS5maW5kRmFzdChoZXJvTGV2ZWxQb3RlbnRpYWxzLCAnUG90ZW50aWFsSUQnLCBoLkhlcm9MZXZlbEFiaWxpdHlJRCk7XHJcbiAgICAgICAgICAgIGlmKHBJbmRleC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgIHZhciBwID0gZG50RGF0YS5nZXRSb3coaGVyb0xldmVsUG90ZW50aWFscywgcEluZGV4WzBdKTtcclxuICAgICAgICAgICAgICBpZihwKSB7XHJcbiAgICAgICAgICAgICAgICBoZXJvU3RhdHMgPSBoQ29kZVZhbHVlcy5nZXRTdGF0cyhwKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGhlcm9TdGF0cztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldFN0YXRDYXBzOiBmdW5jdGlvbihsZXZlbCkge1xyXG4gICAgICBpZihsZXZlbCA+IDApIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBkbnREYXRhLmZpbmRGYXN0KHN0YXRDYXBzLCAnaWQnLCBsZXZlbCk7XHJcbiAgICAgICAgaWYoaW5kZXgubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgIHJldHVybiBkbnREYXRhLmdldFJvdyhzdGF0Q2FwcywgaW5kZXhbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0Q29udmVyc2lvbnM6IGZ1bmN0aW9uKGpvYklkKSB7XHJcbiAgICAgIGlmKGpvYklkID4gMCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGRudERhdGEuZmluZEZhc3Qoam9iQ29udmVyc2lvbnMsICdpZCcsIGpvYklkKTtcclxuICAgICAgICBpZihpbmRleC5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgcmV0dXJuIGRudERhdGEuZ2V0Um93KGpvYkNvbnZlcnNpb25zLCBpbmRleFswXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge307XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRCYXNlU3RhdHM6IGZ1bmN0aW9uKGxldmVsLCBqb2JJZCkge1xyXG4gICAgICBpZihsZXZlbCA+IDAgJiYgam9iSWQgPiAwKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gZG50RGF0YS5maW5kRmFzdChqb2JCYXNlU3RhdHMsICdpZCcsIChOdW1iZXIoam9iSWQpICogMTAwKSArIE51bWJlcihsZXZlbCkgLSAxMDApO1xyXG4gICAgICAgIGlmKGluZGV4Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gZG50RGF0YS5nZXRSb3coam9iQmFzZVN0YXRzLCBpbmRleFswXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2l0ZW1Db2x1bW5zVG9Mb2FkJyxbaXRlbUNvbHVtbnNUb0xvYWRdKTtcclxuZnVuY3Rpb24gaXRlbUNvbHVtbnNUb0xvYWQoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIG1haW5EbnQ6IHtcclxuICAgICAgTmFtZUlEOiB0cnVlLCBEZXNjcmlwdGlvbklEOiB0cnVlLCBOYW1lSURQYXJhbTogdHJ1ZSwgRGVzY3JpcHRpb25JRFBhcmFtOiB0cnVlLFxyXG4gICAgICBUeXBlOiB0cnVlLFR5cGVQYXJhbTE6IHRydWUsVHlwZVBhcmFtMjogdHJ1ZSwgVHlwZVBhcmFtMzogdHJ1ZSwgTGV2ZWxMaW1pdDogdHJ1ZSwgTmVlZEpvYkNsYXNzOiB0cnVlLCBSYW5rOiB0cnVlLFxyXG4gICAgICBTdGF0ZTE6IHRydWUsIFN0YXRlVmFsdWUxOiB0cnVlLCBTdGF0ZTFfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTI6IHRydWUsIFN0YXRlVmFsdWUyOiB0cnVlLCBTdGF0ZTJfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTM6IHRydWUsIFN0YXRlVmFsdWUzOiB0cnVlLCBTdGF0ZTNfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTQ6IHRydWUsIFN0YXRlVmFsdWU0OiB0cnVlLCBTdGF0ZTRfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTU6IHRydWUsIFN0YXRlVmFsdWU1OiB0cnVlLCBTdGF0ZTVfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTY6IHRydWUsIFN0YXRlVmFsdWU2OiB0cnVlLCBTdGF0ZTZfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTc6IHRydWUsIFN0YXRlVmFsdWU3OiB0cnVlLCBTdGF0ZTdfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTg6IHRydWUsIFN0YXRlVmFsdWU4OiB0cnVlLCBTdGF0ZThfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTk6IHRydWUsIFN0YXRlVmFsdWU5OiB0cnVlLCBTdGF0ZTlfTWF4OiB0cnVlLFxyXG4gICAgICBTdGF0ZTEwOiB0cnVlLFN0YXRlVmFsdWUxMDogdHJ1ZSxTdGF0ZTEwX01heDogdHJ1ZSxcclxuICAgICAgRW5jaGFudElEOiB0cnVlLFxyXG4gICAgICBTa2lsbElEOiB0cnVlLFxyXG4gICAgICBkcmFnb25qZXdlbHR5cGU6IHRydWUsIEFibGVXU3RvcmFnZTogdHJ1ZSwgRXhjaGFuZ2VUeXBlOnRydWUsIEljb25JbWFnZUluZGV4OiB0cnVlLCBJc0Nhc2g6IHRydWUsIERpc2pvaW50RHJvcDE6IHRydWUsIERpc2pvaW50YW1vdW50OiB0cnVlXHJcbiAgICB9LFxyXG4gICAgcGFydHNEbnQ6IHtcclxuICAgICAgU2V0SXRlbUlEOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZW5jaGFudERudDoge1xyXG4gICAgICBFbmNoYW50SUQ6IHRydWUsRW5jaGFudExldmVsOiB0cnVlLEVuY2hhbnRSYXRpbzogdHJ1ZSxCcmVha1JhdGlvOiB0cnVlLE1pbkRvd246IHRydWUsTWF4RG93bjogdHJ1ZSxOZWVkQ29pbjogdHJ1ZSxcclxuICAgICAgRGlzam9pbnREcm9wOiB0cnVlLFxyXG4gICAgICBOZWVkSXRlbUlEMTogdHJ1ZSxOZWVkSXRlbUNvdW50MTogdHJ1ZSxOZWVkSXRlbUlEMjogdHJ1ZSxOZWVkSXRlbUNvdW50MjogdHJ1ZSxOZWVkSXRlbUlEMzogdHJ1ZSxOZWVkSXRlbUNvdW50MzogdHJ1ZSxOZWVkSXRlbUlENDogdHJ1ZSxOZWVkSXRlbUNvdW50NDogdHJ1ZSxOZWVkSXRlbUlENTogdHJ1ZSxOZWVkSXRlbUNvdW50NTogdHJ1ZSxQcm90ZWN0SXRlbUNvdW50OiB0cnVlLFxyXG4gICAgICBTdGF0ZTE6IHRydWUsU3RhdGUxVmFsdWU6IHRydWUsU3RhdGUyOiB0cnVlLFN0YXRlMlZhbHVlOiB0cnVlLFN0YXRlMzogdHJ1ZSxTdGF0ZTNWYWx1ZTogdHJ1ZSxTdGF0ZTQ6IHRydWUsU3RhdGU0VmFsdWU6IHRydWUsU3RhdGU1OiB0cnVlLFN0YXRlNVZhbHVlOiB0cnVlLFN0YXRlNjogdHJ1ZSxTdGF0ZTZWYWx1ZTogdHJ1ZSxTdGF0ZTc6IHRydWUsU3RhdGU3VmFsdWU6IHRydWUsU3RhdGU4OiB0cnVlLFN0YXRlOFZhbHVlOiB0cnVlLFN0YXRlOTogdHJ1ZSxTdGF0ZTlWYWx1ZTogdHJ1ZSxTdGF0ZTEwOiB0cnVlLFN0YXRlMTBWYWx1ZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHBvdGVudGlhbERudCA6IHtcclxuICAgICAgUG90ZW50aWFsSUQ6IHRydWUsIFBvdGVudGlhbE5vOiB0cnVlLFBvdGVudGlhbFJhdGlvOiB0cnVlLFxyXG4gICAgICBTdGF0ZTE6IHRydWUsU3RhdGUxVmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlMjogdHJ1ZSxTdGF0ZTJWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGUzOiB0cnVlLFN0YXRlM1ZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTQ6IHRydWUsU3RhdGU0VmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlNTogdHJ1ZSxTdGF0ZTVWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGU2OiB0cnVlLFN0YXRlNlZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTc6IHRydWUsU3RhdGU3VmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlODogdHJ1ZSxTdGF0ZThWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGU5OiB0cnVlLFN0YXRlOVZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTEwOiB0cnVlLFN0YXRlMTBWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGUxMTogdHJ1ZSxTdGF0ZTExVmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlMTI6IHRydWUsU3RhdGUxMlZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTEzOiB0cnVlLFN0YXRlMTNWYWx1ZTogdHJ1ZSxcclxuICAgICAgU3RhdGUxNDogdHJ1ZSxTdGF0ZTE0VmFsdWU6IHRydWUsXHJcbiAgICAgIFN0YXRlMTU6IHRydWUsU3RhdGUxNVZhbHVlOiB0cnVlLFxyXG4gICAgICBTdGF0ZTE2OiB0cnVlLFN0YXRlMTZWYWx1ZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGdlbURudDoge1xyXG4gICAgICBUeXBlOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgc2V0RG50IDogbnVsbCxcclxuICAgIHNwYXJrRG50OiBudWxsLFxyXG4gICAgam9ic0RudDoge1xyXG4gICAgICBKb2JOYW1lOiB0cnVlLEpvYk51bWJlcjogdHJ1ZSxCYXNlQ2xhc3M6IHRydWUsUGFyZW50Sm9iOiB0cnVlLCBFbmdsaXNoTmFtZTogdHJ1ZSwgSm9iSWNvbjogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGpvYkJhc2VTdGF0Q29sc1RvTG9hZDoge1xyXG4gICAgICBTdHJlbmd0aDp0cnVlLEFnaWxpdHk6dHJ1ZSxJbnRlbGxpZ2VuY2U6dHJ1ZSxTdGFtaW5hOnRydWUsQWdncm9wZXJQdkU6dHJ1ZSxCYXNlTVA6dHJ1ZVxyXG4gICAgfSxcclxuICAgIHN0YXRDYXBDb2xzVG9Mb2FkOiB7XHJcbiAgICAgIENiYXNlOiB0cnVlLFxyXG4gICAgICBDZGVmZW5zZTogdHJ1ZSxcclxuICAgICAgQ2NyaXRpY2FsOiB0cnVlLFxyXG4gICAgICBDZmluYWxkYW1hZ2U6IHRydWUsXHJcbiAgICAgIENjcml0aWNhbERhbWFnZTogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBqb2JDb252ZXJzaW9uQ29sc1RvTG9hZDoge1xyXG4gICAgICBIUDogdHJ1ZSxTdHJlbmd0aEF0dGFjazogdHJ1ZSxBZ2lsaXR5QXR0YWNrOiB0cnVlLEludGVsbGlnZW5jZUF0dGFjazogdHJ1ZSxQaHlzaWNhbERlZmVuc2U6IHRydWUsTWFnaWNEZWZlbnNlOiB0cnVlLENyaXRpY2FsOiB0cnVlLENyaXRpY2FsUmVzaXN0YW5jZTogdHJ1ZSxTdGlmZjogdHJ1ZSxTdGlmZlJlc2lzdGFuY2U6IHRydWUsU3R1bjogdHJ1ZSxTdHVuUmVzaXN0YW5jZTogdHJ1ZSxNb3ZlU3BlZWQ6IHRydWUsTW92ZVNwZWVkUmV2aXNpb246IHRydWUsRG93bkRlbGF5OiB0cnVlLEVsZW1lbnRBdHRhY2s6IHRydWUsRWxlbWVudERlZmVuc2U6IHRydWUsRWxlbWVudERlZmVuc2VNaW46IHRydWUsRWxlbWVudERlZmVuc2VNYXg6IHRydWUsU3RyZW5ndGhJbnRlbGxpZ2VuY2VUb0NyaXRpY2FsRGFtYWdlOiB0cnVlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2RudERhdGEnLCBbJyRyb290U2NvcGUnLCckdGltZW91dCcsZG50RGF0YV0pO1xyXG5cclxuZnVuY3Rpb24gZG50RGF0YSgkcm9vdFNjb3BlLCR0aW1lb3V0KSB7XHJcbiAgXHJcbiAgZnVuY3Rpb24gY3JlYXRlTG9hZGVyKGRudExvY2F0aW9uLCBmaWxlLCBjb2xzVG9Mb2FkKSB7XHJcblxyXG4gICAgdmFyIGxvYWRlciA9IHtcclxuICAgICAgcmVhZGVyOiBuZXcgRG50UmVhZGVyKCksXHJcbiAgICAgIFxyXG4gICAgICBsb2FkZWQ6IGZhbHNlLFxyXG4gICAgICBzdGFydGVkTG9hZGluZzogZmFsc2UsXHJcbiAgICAgIFxyXG4gICAgICBmaWxlOiBmaWxlLFxyXG4gICAgICBcclxuICAgICAgZG50TG9jYXRpb246IGRudExvY2F0aW9uLFxyXG4gICAgICBwcm9ncmVzc0NhbGxiYWNrOiBudWxsLFxyXG4gICAgICBjb21wbGV0ZUNhbGxiYWNrcyA6IFtdLFxyXG4gICAgICBcclxuICAgICAgaW5pdDogZnVuY3Rpb24ocHJvZ3Jlc3MsIGNvbXBsZXRlLCBpZ25vcmVFcnJvcnMpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZih0aGlzLmxvYWRlZCkge1xyXG4gICAgICAgICAgaWYoY29tcGxldGUpIHtcclxuICAgICAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzQ2FsbGJhY2sgPSBwcm9ncmVzcztcclxuICAgICAgICAgIGlmKGNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVDYWxsYmFja3MucHVzaChjb21wbGV0ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKCF0aGlzLnN0YXJ0ZWRMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZExvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnJlYWRlci5jb2xzVG9Mb2FkID0gY29sc1RvTG9hZDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHRoaXMuZG50TG9jYXRpb24gJiYgXHJcbiAgICAgICAgICAgICAgdGhpcy5kbnRMb2NhdGlvbi51cmwgJiZcclxuICAgICAgICAgICAgICB0aGlzLmRudExvY2F0aW9uLnVybC5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdETlREQVRBX0xPQURfRVZFTlQnKTtcclxuXHJcbiAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0LnJlYWRlci5sb2FkRG50RnJvbVNlcnZlckZpbGUoXHJcbiAgICAgICAgICAgICAgICAgIHQuZG50TG9jYXRpb24udXJsICsgJy8nICsgZmlsZSxcclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodC5wcm9ncmVzc0NhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0LnByb2dyZXNzQ2FsbGJhY2sobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sIFxyXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZXN1bHQsIGZpbGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5pbmZvKCdkbnQgbG9hZGluZyBjb21wbGV0ZSA6ICcgKyBmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB0LmxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHQuY29tcGxldGVDYWxsYmFja3MsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jb21wbGV0ZUNhbGxiYWNrcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnRE5UREFUQV9MT0FEX0VWRU5UJyk7XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZmFpbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZihpZ25vcmVFcnJvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHQubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpZ25vcmluZyB0aGUgZXJyb3IgLSB0aGlzIGZpbGUgbWF5IG5vdCBleGlzdCB5ZXQgZm9yIHRoZSByZWdpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0LmNvbXBsZXRlQ2FsbGJhY2tzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0LmNvbXBsZXRlQ2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0ROVERBVEFfTE9BRF9FVkVOVCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHQuc3RhcnRlZExvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgIHQubG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0ROVERBVEFfTE9BRF9FUlJPUicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSAgKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRudCBsb2NhdGlvbiBub3Qgc2V0IVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgXHJcbiAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnJlYWRlciA9IG5ldyBEbnRSZWFkZXIoKTtcclxuICAgICAgICB0aGlzLmxvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnRlZExvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgcmV0dXJuIGxvYWRlcjtcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBsb2FkZXJzIDoge30sXHJcbiAgICBmaW5kSW5kZXhlcyA6IHt9LFxyXG4gICAgZG50TG9jYXRpb24gOiBudWxsLFxyXG4gICAgXHJcbiAgICBzZXRMb2NhdGlvbjogZnVuY3Rpb24obG9jYXRpb24pIHtcclxuICAgICAgdGhpcy5kbnRMb2NhdGlvbiA9IGxvY2F0aW9uO1xyXG4gICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmxvYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZih2YWx1ZS5kbnRMb2NhdGlvbiAhPSBsb2NhdGlvbikge1xyXG4gICAgICAgICAgdmFsdWUuZG50TG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICAgICAgICAgIHQucmVzZXQoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgaW5pdCA6IGZ1bmN0aW9uIChmaWxlTmFtZSwgY29sc1RvTG9hZCwgcHJvZ3Jlc3MsIGNvbXBsZXRlLCBpZ25vcmVFcnJvcnMpIHtcclxuICAgICAgaWYoIXByb2dyZXNzKSB7XHJcbiAgICAgICAgcHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgICB9XHJcbiAgICAgIGlmKCEoZmlsZU5hbWUgaW4gdGhpcy5sb2FkZXJzKSkge1xyXG4gICAgICAgIGlmKGZpbGVOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHRoaXMubG9hZGVyc1tmaWxlTmFtZV0gPSBjcmVhdGVMb2FkZXIodGhpcy5kbnRMb2NhdGlvbiwgZmlsZU5hbWUsIGNvbHNUb0xvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLmluaXQocHJvZ3Jlc3MsIGNvbXBsZXRlLCBpZ25vcmVFcnJvcnMpO1xyXG4gICAgfSxcclxuICAgIGdldERhdGEgOiBmdW5jdGlvbiAoZmlsZU5hbWUpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICB2YXIgcmVhZGVyID0gdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZWFkZXI7XHJcbiAgICAgICAgdmFyIHJldFZhbCA9IG5ldyBBcnJheShyZWFkZXIubnVtUm93cyk7XHJcbiAgICAgICAgZm9yKHZhciBpPTA7aTxyZWFkZXIubnVtUm93czsrK2kpIHtcclxuICAgICAgICAgIHJldFZhbFtpXSA9IHJlYWRlci5nZXRSb3coaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmluZCA6IGZ1bmN0aW9uKGZpbGVOYW1lLCBjb2x1bW4sIHZhbHVlKSB7XHJcbiAgICAgIHZhciByZXN1bHRzID0gdGhpcy5maW5kRmFzdChmaWxlTmFtZSwgY29sdW1uLCB2YWx1ZSk7XHJcbiAgICAgIHZhciByZXRWYWwgPSBbXTtcclxuICAgICAgdmFyIG51bVJlc3VsdHMgPSByZXN1bHRzLmxlbmd0aDtcclxuICAgICAgZm9yKHZhciBpPTA7aTxudW1SZXN1bHRzOysraSkge1xyXG4gICAgICAgIHJldFZhbC5wdXNoKHRoaXMuZ2V0Um93KGZpbGVOYW1lLCByZXN1bHRzW2ldKSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICB9LFxyXG4gICAgZmluZEZhc3QgOiBmdW5jdGlvbihmaWxlTmFtZSwgY29sdW1uLCB2YWx1ZSkge1xyXG4gICAgICBcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICBpZighKGZpbGVOYW1lIGluIHRoaXMuZmluZEluZGV4ZXMpKXtcclxuICAgICAgICAgIHRoaXMuZmluZEluZGV4ZXNbZmlsZU5hbWVdID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciByZWFkZXIgPSB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLnJlYWRlcjtcclxuICAgICAgICB2YXIgY29sSW5kZXggPSByZWFkZXIuY29sdW1uSW5kZXhlc1tjb2x1bW5dO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBmaW5kSW5kZXggPSB0aGlzLmZpbmRJbmRleGVzW2ZpbGVOYW1lXTtcclxuICAgICAgICBcclxuICAgICAgICBpZighKGNvbHVtbiBpbiBmaW5kSW5kZXgpKSB7XHJcbiAgICAgICAgICB2YXIgaW5kZXggPSB7fVxyXG4gICAgICAgICAgZmluZEluZGV4W2NvbHVtbl0gPSBpbmRleDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGRhdGEgPSByZWFkZXIuZGF0YTtcclxuICAgICAgICAgIHZhciBsZW4gPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICAgIGZvcih2YXIgcj0wO3I8bGVuOysrcikge1xyXG4gICAgICAgICAgICB2YXIgZCA9IGRhdGFbcl07XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSBkW2NvbEluZGV4XTtcclxuXHJcbiAgICAgICAgICAgIGlmKCEodmFsIGluIGluZGV4KSkge1xyXG4gICAgICAgICAgICAgIGluZGV4W3ZhbF0gPSBbcl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgaW5kZXhbdmFsXS5wdXNoKHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHZhbHVlIGluIGZpbmRJbmRleFtjb2x1bW5dKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmluZEluZGV4W2NvbHVtbl1bdmFsdWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH0sXHJcbiAgICBpc0xvYWRlZCA6IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICAgIHJldHVybiBmaWxlTmFtZSBpbiB0aGlzLmxvYWRlcnMgJiYgdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5sb2FkZWQ7XHJcbiAgICB9LFxyXG4gICAgaGFzRmFpbGVkIDogZnVuY3Rpb24oZmlsZU5hbWUpIHtcclxuICAgICAgcmV0dXJuIGZpbGVOYW1lIGluIHRoaXMubG9hZGVycyAmJiB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLmZhaWxlZDtcclxuICAgIH0sXHJcbiAgICBoYXNTdGFydGVkTG9hZGluZyA6IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmlzTG9hZGVkKGZpbGVOYW1lKSB8fCAoZmlsZU5hbWUgaW4gdGhpcy5sb2FkZXJzICYmIHRoaXMubG9hZGVyc1tmaWxlTmFtZV0uc3RhcnRlZExvYWRpbmcpO1xyXG4gICAgfSxcclxuICAgIHJlc2V0IDogZnVuY3Rpb24oZmlsZU5hbWUpIHtcclxuICAgICAgaWYoZmlsZU5hbWUgaW4gdGhpcy5sb2FkZXJzKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZXNldCgpO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmZpbmRJbmRleGVzW2ZpbGVOYW1lXTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlc2V0QWxsIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMubG9hZGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgIHQucmVzZXQoa2V5KTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYW55TG9hZGluZyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgIHZhciBmb3VuZCA9IDA7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmxvYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZighdmFsdWUubG9hZGVkICYmIHZhbHVlLnN0YXJ0ZWRMb2FkaW5nKSB7XHJcbiAgICAgICAgICBmb3VuZCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gZm91bmQ7XHJcbiAgICB9LFxyXG4gICAgZ2V0TnVtUm93cyA6IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XHJcbiAgICAgIGlmKHRoaXMuaXNMb2FkZWQoZmlsZU5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZGVyc1tmaWxlTmFtZV0ucmVhZGVyLm51bVJvd3M7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRSb3cgOiBmdW5jdGlvbihmaWxlTmFtZSwgaW5kZXgpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZWFkZXIuZ2V0Um93KGluZGV4KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsb29rdXBWYWx1ZTogZnVuY3Rpb24oZmlsZU5hbWUsIGRhdGEsIGNvbHVtbk5hbWUpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gZGF0YVt0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLnJlYWRlci5jb2x1bW5OYW1lc1tjb2x1bW5OYW1lXV07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb252ZXJ0RGF0YTogZnVuY3Rpb24oZmlsZU5hbWUsIGRhdGEpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZChmaWxlTmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZXJzW2ZpbGVOYW1lXS5yZWFkZXIuY29udmVydERhdGEoZGF0YSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRWYWx1ZSA6IGZ1bmN0aW9uKGZpbGVOYW1lLCBpbmRleCwgY29sdW1uTmFtZSkge1xyXG4gICAgICBpZih0aGlzLmlzTG9hZGVkKGZpbGVOYW1lKSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRlcnNbZmlsZU5hbWVdLnJlYWRlci5nZXRWYWx1ZShpbmRleCwgY29sdW1uTmFtZSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2RudEluaXQnLCBbJ2l0ZW1zJywnam9icycsJ2RudERhdGEnLCdpdGVtRmFjdG9yeScsZG50SW5pdF0pO1xyXG5mdW5jdGlvbiBkbnRJbml0KGl0ZW1zLGpvYnMsZG50RGF0YSxpdGVtRmFjdG9yeSkge1xyXG4gIHJldHVybiBmdW5jdGlvbihwcm9ncmVzcykge1xyXG4gICAgXHJcbiAgICBwcm9ncmVzcygnc3RhcnRpbmcgaW5pdCcpO1xyXG4gICAgXHJcbiAgICB2YXIgYWxsRmFjdG9yaWVzID0gW2pvYnNdO1xyXG4gICAgXHJcbiAgICB2YXIgZG50RmlsZXMgPSB7fTtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSwga2V5KSB7XHJcbiAgICAgIGlmKGtleSAhPSAnYWxsJykge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtLCBmdW5jdGlvbih2YWx1ZSwgcHJvcCkge1xyXG4gICAgICAgICAgaWYocHJvcC5pbmRleE9mKCdEbnQnKSA9PSBwcm9wLmxlbmd0aC0zKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXdGYWN0b3J5ID0geyBcclxuICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbihwcm9ncmVzcywgY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIGRudERhdGEuaW5pdCh2YWx1ZSwgbnVsbCwgcHJvZ3Jlc3MsIGNvbXBsZXRlKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGlzTG9hZGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkbnREYXRhLmlzTG9hZGVkKHZhbHVlKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGZpbGVOYW1lOiB2YWx1ZSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGFsbEZhY3Rvcmllcy5wdXNoKG5ld0ZhY3RvcnkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gaW5pdEZhY3RvcnkoaW5kZXgpIHtcclxuICAgIFxyXG4gICAgICBpZihpbmRleCA8IGFsbEZhY3Rvcmllcy5sZW5ndGgpIHtcclxuICAgICAgICBhbGxGYWN0b3JpZXNbaW5kZXhdLmluaXQocHJvZ3Jlc3MsIGZ1bmN0aW9uKCkgeyBcclxuICAgICAgICAgIGlmKGFsbEZhY3Rvcmllc1tpbmRleF0uaXNMb2FkZWQoKSkge1xyXG4gICAgICAgICAgICBpZignZmlsZU5hbWUnIGluIGFsbEZhY3Rvcmllc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICBwcm9ncmVzcygnZG50IGxvYWRlZDogJyArIGFsbEZhY3Rvcmllc1tpbmRleF0uZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluaXRGYWN0b3J5KGluZGV4KzEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHByb2dyZXNzKCdGdWxsIGluaXRpYWxpc2UgY29tcGxldGUnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpbml0RmFjdG9yeSgwKTtcclxuICB9XHJcbn1cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdkbnRSZXNldCcsWydpdGVtcycsJ2pvYnMnLCdkbnREYXRhJyxkbnRSZXNldF0pO1xyXG5mdW5jdGlvbiBkbnRSZXNldChpdGVtcywgam9icywgZG50RGF0YSkge1xyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4gICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihzb3VyY2UsIG5hbWUpIHtcclxuICAgICAgc291cmNlLnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgam9icy5yZXNldCgpO1xyXG4gICAgZG50RGF0YS5yZXNldEFsbCgpO1xyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdleHBvcnRMaW5rSGVscGVyJywgZXhwb3J0TGlua0hlbHBlcik7XHJcbmZ1bmN0aW9uIGV4cG9ydExpbmtIZWxwZXIoJGh0dHAsaXRlbXMsZG50RGF0YSxpdGVtRmFjdG9yeSxoQ29kZVZhbHVlcyxpdGVtQ29sdW1uc1RvTG9hZCxzdGF0SGVscGVyLHRyYW5zbGF0aW9ucyxpdGVtQ2F0ZWdvcnkscmVnaW9uKSB7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBcclxuICAgIGVuY29kZUl0ZW06IGZ1bmN0aW9uKGl0ZW0sIHNtYWxsKSB7XHJcbiAgICAgIGlmKGl0ZW0pIHtcclxuICAgICAgICB2YXIgaXRlbVN0cmluZztcclxuXHJcbiAgICAgICAgaWYoaXRlbS50eXBlTmFtZSA9PSAnY3VzdG9tJykgIHtcclxuICAgICAgICAgIGl0ZW1TdHJpbmcgPSAnX2N1c3RvbSc7XHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgaXRlbVN0cmluZyArPSAnfCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgaXRlbVN0cmluZyArPSAnOkMnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gc3RhdC5pZC50b1N0cmluZygzNikgKyAnPScgKyBzdGF0Lm1heDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGl0ZW0uaWQpIHtcclxuICAgICAgICAgIGl0ZW1TdHJpbmcgPSAnSScgKyBpdGVtLmlkLnRvU3RyaW5nKDM2KSArICc6Xyc7XHJcbiAgICAgICAgICBpZignaXRlbVNvdXJjZScgaW4gaXRlbSkge1xyXG4gICAgICAgICAgICBpdGVtU3RyaW5nICs9IGl0ZW0uaXRlbVNvdXJjZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoJ2l0ZW1UeXBlTmFtZScgaW4gaXRlbSkge1xyXG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRvIHN1cHBvcnQgZ3JvdXBzIHNhdmVkIHdpdGggdGhlIG9sZCBwcm9wZXJ0eSBuYW1lXHJcbiAgICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gaXRlbS5pdGVtVHlwZU5hbWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGl0ZW0uZmlsZU5hbWUpIHtcclxuICAgICAgICAgICAgaXRlbVN0cmluZyArPSAnOkYnICsgaXRlbS5maWxlTmFtZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgIGlmKGl0ZW0uZW5jaGFudG1lbnROdW0gfHwgaXRlbS5lbmNoYW50bWVudE51bSA9PSAwKSB7XHJcbiAgICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gJzpFJyArIGl0ZW0uZW5jaGFudG1lbnROdW0udG9TdHJpbmcoMzYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoaXRlbS5waWQgPiAwKSB7XHJcbiAgICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gJzpQJyArIGl0ZW0ucGlkLnRvU3RyaW5nKDM2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIGlmKGl0ZW0uc2V0SWQgPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIGl0ZW1TdHJpbmcgKz0gJzpTJyArIGl0ZW0uc2V0SWQudG9TdHJpbmcoMzYpO1xyXG4gICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgaWYoaXRlbS5zcGFya0lkID4gMCkge1xyXG4gICAgICAgICAgICBpdGVtU3RyaW5nICs9ICc6SCcgKyBpdGVtLnNwYXJrSWQudG9TdHJpbmcoMzYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoaXRlbS50eXBlTmFtZSA9PSAnc2tpbGxzJykge1xyXG4gICAgICAgICAgICBpdGVtU3RyaW5nICs9ICc6SicgKyBpdGVtLmJhc2VKb2JOYW1lO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoaXRlbS5wdmUpIHtcclxuICAgICAgICAgICAgaXRlbVN0cmluZyArPSAnOlYnICsgaXRlbS5wdmU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0ubmFtZSAmJiAhc21hbGwpIHtcclxuICAgICAgICAgIGl0ZW1TdHJpbmcgKz0gJzouJyArIGl0ZW0ubmFtZS5yZXBsYWNlKC8gL2csICctJykucmVwbGFjZSgvXFwvL2csICcgJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXRlbVN0cmluZztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZGVjb2RlSXRlbTogZnVuY3Rpb24oaXRlbVN0cikge1xyXG4gICAgICB2YXIgaXRlbSA9IHt9O1xyXG4gICAgICBcclxuICAgICAgaWYoaXRlbVN0cikge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtU3RyLnNwbGl0KCc6JyksIGZ1bmN0aW9uKGl0ZW1CaXQsIGJpdEluZGV4KSB7XHJcbiAgICAgICAgICBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnSScpIHtcclxuICAgICAgICAgICAgaXRlbS5pZCA9IHBhcnNlSW50KGl0ZW1CaXQuc3Vic3RyKDEpLCAzNik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGl0ZW1CaXQuY2hhckF0KDApID09ICdFJykge1xyXG4gICAgICAgICAgICBpdGVtLmVuY2hhbnRtZW50TnVtID0gcGFyc2VJbnQoaXRlbUJpdC5zdWJzdHIoMSksIDM2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbUJpdC5jaGFyQXQoMCkgPT0gJ1AnKSB7XHJcbiAgICAgICAgICAgIGl0ZW0ucGlkID0gcGFyc2VJbnQoaXRlbUJpdC5zdWJzdHIoMSksIDM2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbUJpdC5jaGFyQXQoMCkgPT0gJ1MnKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uc2V0SWQgPSBwYXJzZUludChpdGVtQml0LnN1YnN0cigxKSwgMzYpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnSCcpIHtcclxuICAgICAgICAgICAgaXRlbS5zcGFya0lkID0gcGFyc2VJbnQoaXRlbUJpdC5zdWJzdHIoMSksIDM2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbUJpdC5jaGFyQXQoMCkgPT0gJ0onKSB7XHJcbiAgICAgICAgICAgIGl0ZW0uYmFzZUpvYk5hbWUgPSBpdGVtQml0LnN1YnN0cigxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbUJpdC5jaGFyQXQoMCkgPT0gJ1YnKSB7XHJcbiAgICAgICAgICAgIGl0ZW0ucHZlID0gaXRlbUJpdC5zdWJzdHIoMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGl0ZW1CaXQuY2hhckF0KDApID09ICdfJykge1xyXG4gICAgICAgICAgICBpdGVtLml0ZW1Tb3VyY2UgPSBpdGVtQml0LnN1YnN0cigxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXRlbUJpdC5jaGFyQXQoMCkgPT0gJy4nKSB7XHJcbiAgICAgICAgICAgIGl0ZW0ubmFtZSA9IGl0ZW1CaXQuc3Vic3RyKDEpLnJlcGxhY2UoJy0nLCAnICcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnQycpIHtcclxuICAgICAgICAgICAgaXRlbS5zdGF0cyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgc3RhdFN0cmluZyA9IGl0ZW1CaXQuc3Vic3RyKDEpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc3RhdFN0cmluZy5zcGxpdCgnfCcpLCBmdW5jdGlvbihzdGF0Qml0LCBzdGF0Qml0SW5kZXgpIHtcclxuICAgICAgICAgICAgICB2YXIgc3BsaXRTdGF0ID0gc3RhdEJpdC5zcGxpdCgnPScpO1xyXG4gICAgICAgICAgICAgIGl0ZW0uc3RhdHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogcGFyc2VJbnQoc3BsaXRTdGF0WzBdLCAzNiksXHJcbiAgICAgICAgICAgICAgICBtYXg6IE51bWJlcihzcGxpdFN0YXRbMV0pXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihpdGVtQml0LmNoYXJBdCgwKSA9PSAnRicpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGl0ZW0uZmlsZU5hbWUgPSBpdGVtQml0LnN1YnN0cigxKTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtU291cmNlLCBrZXkpIHtcclxuICAgICAgICAgICAgICBpZihpdGVtU291cmNlLm1haW5EbnQgJiYgaXRlbVNvdXJjZS5tYWluRG50LmluZGV4T2YoaXRlbS5maWxlTmFtZSArICcuJykgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5pdGVtU291cmNlID0ga2V5O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgY3JlYXRlR3JvdXBMaW5rOiBmdW5jdGlvbihncm91cE5hbWUsIGdyb3VwKSB7XHJcbiAgICAgIHZhciBpdGVtU3RyaW5ncyA9IFtdO1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgIFxyXG4gICAgICBpZihncm91cCA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXAuaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGtleSkge1xyXG4gICAgICAgIHZhciBpdGVtU3RyaW5nID0gc2VsZi5lbmNvZGVJdGVtKGl0ZW0sIHRydWUpOyAgXHJcbiAgICAgICAgaWYoaXRlbVN0cmluZyAmJiBpdGVtU3RyaW5nLmxlbmd0aCkge1xyXG4gICAgICAgICAgaXRlbVN0cmluZ3MucHVzaChpdGVtU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIFxyXG4gICAgICB2YXIgcmV0VmFsID0gJ3ZpZXctZ3JvdXA/cmVnaW9uPSc7XHJcbiAgICAgIGlmKHJlZ2lvbi5kbnRMb2NhdGlvbiAmJiByZWdpb24uZG50TG9jYXRpb24ucmVnaW9uKSB7XHJcbiAgICAgICAgcmV0VmFsICs9IHJlZ2lvbi5kbnRMb2NhdGlvbi5yZWdpb247XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKGdyb3VwLmVuZW15TGV2ZWwpIHtcclxuICAgICAgICByZXRWYWwgKz0gJyZlPScgKyBncm91cC5lbmVteUxldmVsO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGdyb3VwLnBsYXllckxldmVsKSB7XHJcbiAgICAgICAgcmV0VmFsICs9ICcmcD0nICsgZ3JvdXAucGxheWVyTGV2ZWw7XHJcbiAgICAgIH1cclxuICAgICAgaWYoZ3JvdXAuaGVyb0xldmVsKSB7XHJcbiAgICAgICAgcmV0VmFsICs9ICcmaD0nICsgZ3JvdXAuaGVyb0xldmVsO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGdyb3VwLmpvYiAmJiBncm91cC5qb2IuaWQpIHtcclxuICAgICAgICByZXRWYWwgKz0gJyZqPScgKyBncm91cC5qb2IuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYoZ3JvdXAuZGFtYWdlVHlwZSAmJiBncm91cC5kYW1hZ2VUeXBlLmlkKSB7XHJcbiAgICAgICAgcmV0VmFsICs9ICcmZD0nICsgZ3JvdXAuZGFtYWdlVHlwZS5pZDtcclxuICAgICAgfVxyXG4gICAgICBpZihncm91cC5lbGVtZW50ICYmIGdyb3VwLmVsZW1lbnQuaWQpIHtcclxuICAgICAgICByZXRWYWwgKz0gJyZ0PScgKyBncm91cC5lbGVtZW50LmlkO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGdyb3VwLnNlY29uZGFyeUVsZW1lbnQgJiYgZ3JvdXAuc2Vjb25kYXJ5RWxlbWVudC5pZCkge1xyXG4gICAgICAgIHJldFZhbCArPSAnJnM9JyArIGdyb3VwLnNlY29uZGFyeUVsZW1lbnQuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0VmFsICs9ICcmZz0nICsgZW5jb2RlVVJJKGdyb3VwTmFtZSkgKyAnJmk9JyArIGl0ZW1TdHJpbmdzLmpvaW4oJywnKTtcclxuICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlU2hvcnRVcmw6IGZ1bmN0aW9uKGdyb3VwTmFtZSwgZ3JvdXApIHtcclxuICAgICAgXHJcbiAgICAgIHZhciBwYXRoID0gdGhpcy5jcmVhdGVHcm91cExpbmsoZ3JvdXBOYW1lLCBncm91cCk7XHJcbiAgICAgIHZhciBiYXNlUGF0aCA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJykpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgdmFyIGxvbmdVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChiYXNlUGF0aClbMF0gKyBiYXNlUGF0aCArIHBhdGg7XHJcbiAgICAgIHZhciBkYXRhID0geyBsb25nVXJsOiBsb25nVXJsIH07XHJcbiAgICAgIGNvbnNvbGUubG9nKCdnZXR0aW5nIHNob3J0IHVybCBmb3IgJywgbG9uZ1VybCk7XHJcbiAgICAgIFxyXG4gICAgXHQkaHR0cC5wb3N0KFxyXG4gICAgXHQgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS91cmxzaG9ydGVuZXIvdjEvdXJsP2tleT1BSXphU3lENXQ1bzdaY1NBdk0teE13YzE0ZnQyQkEtTUtRQTdMTW8nLCBkYXRhKS5zdWNjZXNzKFxyXG4gICAgXHQgICAgZnVuY3Rpb24oZGF0YSxzdGF0dXMsaGVhZGVycyxjb25maWcpe1xyXG4gICAgICAgIFx0XHRncm91cC5zaG9ydFVybCA9IGRhdGEuaWQ7XHJcbiAgICBcdCAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0ocGF0aCwgZGF0YS5pZCk7XHJcbiAgICAgICAgXHR9KS5cclxuICAgICAgICBcdGVycm9yKGZ1bmN0aW9uKGRhdGEsc3RhdHVzLGhlYWRlcnMsY29uZmlnKXtcclxuICAgICAgICBcdFx0Ly8gY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgXHRcdC8vIGNvbnNvbGUubG9nKHN0YXR1cyk7XHJcbiAgICAgICAgXHRcdC8vIGNvbnNvbGUubG9nKGhlYWRlcnMpO1xyXG4gICAgICAgIFx0XHQvLyBjb25zb2xlLmxvZyhjb25maWcpO1xyXG4gICAgICAgIFx0fSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICByZWxvYWRJdGVtOiBmdW5jdGlvbihpdGVtKSB7XHJcblxyXG4gICAgICBpZihpdGVtID09IG51bGwpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2Fubm90IHJlbG9hZCBudWxsIGl0ZW0nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIHN1cHBvcnQgZm9yIG9sZCBwcm9wZXJ0eSBuYW1lXHJcbiAgICAgIGlmKCdpdGVtVHlwZU5hbWUnIGluIGl0ZW0gJiYgIWl0ZW0uaXRlbVNvdXJjZSkge1xyXG4gICAgICAgIGl0ZW0uaXRlbVNvdXJjZSA9IGl0ZW0uaXRlbVR5cGVOYW1lO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBjb25zb2xlLmxvZygnY2hlY2tpbmcgJyArIGl0ZW0uaXRlbVNvdXJjZSlcclxuICAgICAgaWYoaXRlbS5pdGVtU291cmNlID09ICdyYlRlY2gnKSB7XHJcbiAgICAgICAgaXRlbS5pdGVtU291cmNlID0gJ3RlY2gnO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjaGFuZ2VkIHRvICcgKyBpdGVtLml0ZW1Tb3VyY2UpXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKGl0ZW0uaXRlbVNvdXJjZSA9PSAnY3VzdG9tJyB8fCBpdGVtLnR5cGVOYW1lID09ICdjdXN0b20nKSB7XHJcbiAgICAgICAgaXRlbS50eXBlTmFtZSA9ICdjdXN0b20nO1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoaXRlbS5pdGVtU291cmNlID09ICdza2lsbHMnIHx8IGl0ZW0udHlwZU5hbWUgPT0gJ3NraWxscycpIHtcclxuICAgICAgICBcclxuICAgICAgICBpZighaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgaXRlbS5lbmNoYW50bWVudE51bSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBza2lsbERudCA9ICdza2lsbHRhYmxlX2NoYXJhY3RlcicgKyBpdGVtLmJhc2VKb2JOYW1lICsgJy5sempzb24nO1xyXG4gICAgICAgIHZhciBwdiA9ICdwdmUnO1xyXG4gICAgICAgIGlmKGl0ZW0ucHZlID09ICdwdnAnKSB7XHJcbiAgICAgICAgICBwdiA9ICdwdnAnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2tpbGxMZXZlbERudCA9ICdza2lsbGxldmVsdGFibGVfY2hhcmFjdGVyJyArIGl0ZW0uYmFzZUpvYk5hbWUgKyBwdiArICcubHpqc29uJztcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc2tpbGxEYXRhID0gZG50RGF0YS5maW5kKHNraWxsRG50LCAnaWQnLCBpdGVtLmlkKVswXTtcclxuICAgICAgICBpZighc2tpbGxEYXRhKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnY2Fubm90IGdldCBza2lsbCBkYXRhIGZyb20gJywgc2tpbGxEbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2tpbGxMZXZlbERhdGFzID0gZG50RGF0YS5nZXREYXRhKHNraWxsTGV2ZWxEbnQpO1xyXG5cclxuICAgICAgICB2YXIgc2tpbGxMZXZlbFZhbHMgPSB7fTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goc2tpbGxMZXZlbERhdGFzLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcclxuICAgICAgICAgIGlmKHZhbHVlLlNraWxsSW5kZXggPT0gaXRlbS5pZCAmJiB2YWx1ZS5Ta2lsbExldmVsID09IGl0ZW0uZW5jaGFudG1lbnROdW0pIHtcclxuICAgICAgICAgICAgc2tpbGxMZXZlbFZhbHMgPSB2YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBuZXdJdGVtID0ge1xyXG4gICAgICAgICAgaWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgICBpdGVtU291cmNlOiBpdGVtLml0ZW1Tb3VyY2UsXHJcbiAgICAgICAgICB0eXBlTmFtZTogaXRlbS5pdGVtU291cmNlLFxyXG4gICAgICAgICAgbmVlZEpvYkNsYXNzOiBza2lsbERhdGEuTmVlZEpvYixcclxuICAgICAgICAgIGJhc2VKb2JOYW1lOiBpdGVtLmJhc2VKb2JOYW1lLFxyXG4gICAgICAgICAgcmFuazogaENvZGVWYWx1ZXMucmFua05hbWVzWzBdLFxyXG4gICAgICAgICAgZW5jaGFudG1lbnROdW06IGl0ZW0uZW5jaGFudG1lbnROdW0sXHJcbiAgICAgICAgICBuYW1lOiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKHNraWxsRGF0YS5OYW1lSUQsIHNraWxsRGF0YS5OYW1lSURQYXJhbSksXHJcbiAgICAgICAgICBkZXNjcmlwdGlvbjogdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShza2lsbExldmVsVmFscy5Ta2lsbEV4cGxhbmF0aW9uSUQsIHNraWxsTGV2ZWxWYWxzLlNraWxsRXhwbGFuYXRpb25JRFBhcmFtKSxcclxuICAgICAgICAgIGljb246IHNraWxsRGF0YS5JY29uSW1hZ2VJbmRleCxcclxuICAgICAgICAgIHB2ZTogaXRlbS5wdmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5ld0l0ZW0uc3RhdHMgPSBzdGF0SGVscGVyLmdldFNraWxsU3RhdHMobmV3SXRlbSwgc2tpbGxEYXRhLCBza2lsbExldmVsRGF0YXMpO1xyXG4gICAgICAgIHJldHVybiBuZXdJdGVtO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoaXRlbS5pdGVtU291cmNlIGluIGl0ZW1zKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGl0ZW1UeXBlID0gaXRlbXNbaXRlbS5pdGVtU291cmNlXTtcclxuICAgICAgICB2YXIgZHMgPSBkbnREYXRhLmZpbmRGYXN0KGl0ZW1UeXBlLm1haW5EbnQsICdpZCcsIGl0ZW0uaWQpO1xyXG4gICAgICAgIGlmKCFkcy5sZW5ndGgpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdpdGVtICcgKyBpdGVtLmlkICsgJyBub3QgZm91bmQgaW4gJyArIGl0ZW1UeXBlLm1haW5EbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHZhciByb3dOdW0gPSBkc1swXTtcclxuICAgICAgICAgIHZhciB0eXBlUGFyYW0xID0gZG50RGF0YS5nZXRWYWx1ZShpdGVtVHlwZS5tYWluRG50LCByb3dOdW0sICdUeXBlUGFyYW0xJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICB2YXIgcCA9IG51bGw7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZhciBwcyA9IGRudERhdGEuZmluZChpdGVtVHlwZS5wb3RlbnRpYWxEbnQsICdpZCcsIGl0ZW0ucGlkKTtcclxuICAgICAgICAgIGlmKCFwcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcHMgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUucG90ZW50aWFsRG50LCAnUG90ZW50aWFsSUQnLCB0eXBlUGFyYW0xKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoIXBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBwcyA9IGRudERhdGEuZmluZChpdGVtVHlwZS5wb3RlbnRpYWxEbnRFeCwgJ2lkJywgaXRlbS5waWQpO1xyXG4gICAgICAgICAgICBpZighcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgcHMgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUucG90ZW50aWFsRG50RXgsICdQb3RlbnRpYWxJRCcsIHR5cGVQYXJhbTEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKHBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcCA9IHBzWzBdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYocC5Qb3RlbnRpYWxJRCAhPSB0eXBlUGFyYW0xKSB7XHJcbiAgICAgICAgICAgICAgLy8gdGhpcyBoYXBwZW5lZCBvbmUgdGltZVxyXG4gICAgICAgICAgICAgIC8vIG5vdCBzdXJlIGhvdyBidXQgaXQgY29ycnVwdGVkIHRoZSBzdGF0c1xyXG4gICAgICAgICAgICAgIHAgPSBudWxsO1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdiYWQgcG90ZW50aWFsJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIG5ld0l0ZW0gPSBpdGVtRmFjdG9yeS5jcmVhdGVJdGVtKGl0ZW1UeXBlLCByb3dOdW0sIHApO1xyXG4gICAgICAgICAgaXRlbUZhY3RvcnkuaW5pdEl0ZW0obmV3SXRlbSk7XHJcbiAgICAgICAgICBpdGVtQ2F0ZWdvcnkuc2V0SXRlbUNhdGVnb3J5KG5ld0l0ZW0sIGQpO1xyXG4gICAgICAgICAgbmV3SXRlbS5nZW1TbG90ID0gaXRlbS5nZW1TbG90O1xyXG5cclxuICAgICAgICAgIHZhciB1c2VQYXJ0RG50ID0gbnVsbDtcclxuICAgICAgICAgIGlmKG5ld0l0ZW0udHlwZU5hbWUgIT0gJ3dlYXBvbnMnICYmIG5ld0l0ZW0udHlwZUlkICE9IDApIHtcclxuICAgICAgICAgICAgdXNlUGFydERudCA9ICdwYXJ0c0RudCc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdXNlUGFydERudCA9ICd3ZWFwb25EbnQnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgICAgIGlmKHVzZVBhcnREbnQpIHtcclxuICAgICAgICAgICAgaWYoZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZVt1c2VQYXJ0RG50XSkgJiYgZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZS5zZXREbnQpKSB7XHJcbiAgICAgICAgICAgICAgbmV3SXRlbS5zZXRTdGF0cyA9IFtdO1xyXG4gICAgICAgICAgICAgIHZhciBwYXJ0cyA9IGRudERhdGEuZmluZChpdGVtVHlwZVt1c2VQYXJ0RG50XSwgJ2lkJywgaXRlbS5pZCk7XHJcbiAgICAgICAgICAgICAgaWYocGFydHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbmV3SXRlbS5zZXRJZCA9IHBhcnRzWzBdLlNldEl0ZW1JRDtcclxuICAgICAgICAgICAgICAgIHZhciBzZXRzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnNldERudCwgJ2lkJywgcGFydHNbMF0uU2V0SXRlbUlEKTtcclxuICAgICAgICAgICAgICAgIGlmKHNldHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICBuZXdJdGVtLnNldFN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMoc2V0c1swXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbmV3SXRlbS5mdWxsU3RhdHMgPSBuZXdJdGVtLnN0YXRzO1xyXG4gICAgICAgICAgaWYoaXRlbS5lbmNoYW50bWVudE51bSA+PSAwKSB7XHJcbiAgICAgICAgICAgIG5ld0l0ZW0uZW5jaGFudG1lbnROdW0gPSBpdGVtLmVuY2hhbnRtZW50TnVtO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYobmV3SXRlbS50eXBlTmFtZSA9PSAnc2tpbGxzJykge1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYobmV3SXRlbS50eXBlTmFtZSA9PSAndGFsaXNtYW4nKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGV4dHJhU3RhdHMgPSBbXTtcclxuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobmV3SXRlbS5zdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGV4dHJhU3RhdHMucHVzaCh7aWQ6IHN0YXQuaWQsIG1heDogc3RhdC5tYXggKiAobmV3SXRlbS5lbmNoYW50bWVudE51bS8xMDApfSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgbmV3SXRlbS5lbmNoYW50bWVudFN0YXRzID0gZXh0cmFTdGF0cztcclxuICAgICAgICAgICAgICBuZXdJdGVtLmZ1bGxTdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMobmV3SXRlbS5lbmNoYW50bWVudFN0YXRzLCBuZXdJdGVtLnN0YXRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGl0ZW1UeXBlLmVuY2hhbnREbnQpIHtcclxuICAgICAgICAgICAgICB2YXIgZW5jaGFudG1lbnRzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLmVuY2hhbnREbnQsICdFbmNoYW50SUQnLCBuZXdJdGVtLmVuY2hhbnRtZW50SWQpO1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChlbmNoYW50bWVudHMsIGZ1bmN0aW9uKGVuY2hhbnRtZW50LCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaWYoZW5jaGFudG1lbnQuRW5jaGFudExldmVsID09IG5ld0l0ZW0uZW5jaGFudG1lbnROdW0pIHtcclxuICAgICAgICAgICAgICAgICAgbmV3SXRlbS5lbmNoYW50bWVudFN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMoZW5jaGFudG1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICBuZXdJdGVtLmZ1bGxTdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMobmV3SXRlbS5lbmNoYW50bWVudFN0YXRzLCBuZXdJdGVtLnN0YXRzKTtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYoaXRlbVR5cGUucGV0TGV2ZWxEbnQpIHtcclxuICAgICAgICAgICAgICB2YXIgZW5jaGFudG1lbnRzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnBldExldmVsRG50LCAnUGV0TGV2ZWxUeXBlSUQnLCBuZXdJdGVtLmVuY2hhbnRtZW50SWQpO1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChlbmNoYW50bWVudHMsIGZ1bmN0aW9uKGVuY2hhbnRtZW50LCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgaWYoZW5jaGFudG1lbnQuUGV0TGV2ZWwgPT0gbmV3SXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgICAgICAgICBuZXdJdGVtLmVuY2hhbnRtZW50U3RhdHMgPSBoQ29kZVZhbHVlcy5nZXRTdGF0cyhlbmNoYW50bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgIG5ld0l0ZW0uZnVsbFN0YXRzID0gaENvZGVWYWx1ZXMubWVyZ2VTdGF0cyhuZXdJdGVtLmVuY2hhbnRtZW50U3RhdHMsIG5ld0l0ZW0uc3RhdHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKGl0ZW0uc3BhcmtJZCA+IDApIHtcclxuICAgICAgICAgICAgbmV3SXRlbS5zcGFya0lkID0gaXRlbS5zcGFya0lkO1xyXG4gICAgICAgICAgICB2YXIgc3BhcmtzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnNwYXJrRG50LCAnaWQnLCBpdGVtLnNwYXJrSWQpO1xyXG4gICAgICAgICAgICBpZihzcGFya3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIG5ld0l0ZW0uc3BhcmtTdGF0cyA9IGhDb2RlVmFsdWVzLmdldFN0YXRzKHNwYXJrc1swXSk7XHJcbiAgICAgICAgICAgICAgbmV3SXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKG5ld0l0ZW0uZnVsbFN0YXRzLCBuZXdJdGVtLnNwYXJrU3RhdHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKG5ld0l0ZW0uZHJhZ29uamV3ZWx0eXBlKSB7XHJcbiAgICAgICAgICAgIG5ld0l0ZW0ub2ZmZW5zaXZlR2VtU2xvdHMgPSAwO1xyXG4gICAgICAgICAgICBuZXdJdGVtLmluY3JlYXNpbmdHZW1TbG90cyA9IDA7XHJcbiAgICAgICAgICAgIHZhciBpdGVtRGF0YSA9IGRudERhdGEuZmluZCgnZHJhZ29uamV3ZWxzbG90dGFibGUubHpqc29uJywgJ0RyYWdvbkpld2VsSUQnLCBuZXdJdGVtLmRyYWdvbmpld2VsdHlwZSk7XHJcbiAgICAgICAgICAgIGlmKGl0ZW1EYXRhICYmIGl0ZW1EYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICBpZihpdGVtRGF0YVswXS5EcmFnb25KZXdlbFNsb3QxID09IDEpIG5ld0l0ZW0ub2ZmZW5zaXZlR2VtU2xvdHMrKztcclxuICAgICAgICAgICAgICBpZihpdGVtRGF0YVswXS5EcmFnb25KZXdlbFNsb3QyID09IDEpIG5ld0l0ZW0ub2ZmZW5zaXZlR2VtU2xvdHMrKztcclxuICAgICAgICAgICAgICBpZihpdGVtRGF0YVswXS5EcmFnb25KZXdlbFNsb3QzID09IDEpIG5ld0l0ZW0ub2ZmZW5zaXZlR2VtU2xvdHMrKztcclxuICAgICAgICAgICAgICBpZihpdGVtRGF0YVswXS5EcmFnb25KZXdlbFNsb3Q0ID09IDEpIG5ld0l0ZW0ub2ZmZW5zaXZlR2VtU2xvdHMrKztcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBpZihpdGVtRGF0YVswXS5EcmFnb25KZXdlbFNsb3QxID09IDIpIG5ld0l0ZW0uaW5jcmVhc2luZ0dlbVNsb3RzKys7XHJcbiAgICAgICAgICAgICAgaWYoaXRlbURhdGFbMF0uRHJhZ29uSmV3ZWxTbG90MiA9PSAyKSBuZXdJdGVtLmluY3JlYXNpbmdHZW1TbG90cysrO1xyXG4gICAgICAgICAgICAgIGlmKGl0ZW1EYXRhWzBdLkRyYWdvbkpld2VsU2xvdDMgPT0gMikgbmV3SXRlbS5pbmNyZWFzaW5nR2VtU2xvdHMrKztcclxuICAgICAgICAgICAgICBpZihpdGVtRGF0YVswXS5EcmFnb25KZXdlbFNsb3Q0ID09IDIpIG5ld0l0ZW0uaW5jcmVhc2luZ0dlbVNsb3RzKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihpdGVtLmZpbGVOYW1lKSB7XHJcbiAgICAgICAgdmFyIGRhdGFzID0gZG50RGF0YS5maW5kRmFzdChpdGVtLmZpbGVOYW1lICsgJy5sempzb24nLCAnaWQnLCBpdGVtLmlkKTtcclxuICAgICAgICBpZihkYXRhcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICB2YXIgcm93ID0gZGF0YXNbMF07XHJcbiAgICAgICAgICB2YXIgZCA9IGRudERhdGEuZ2V0Um93KGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsIHJvdyk7XHJcbiAgICAgICAgICBuZXdJdGVtID0gaXRlbUZhY3RvcnkuY3JlYXRlQmFzaWNJdGVtKGQpO1xyXG4gICAgICAgICAgbmV3SXRlbS5yb3cgPSByb3c7XHJcbiAgICAgICAgICBuZXdJdGVtLm5lZWRKb2JDbGFzcyA9IGQuTmVlZEpvYkNsYXNzO1xyXG4gICAgICAgICAgbmV3SXRlbS5leGNoYW5nZVR5cGUgPSBkLkV4Y2hhbmdlVHlwZTtcclxuICAgICAgICAgIG5ld0l0ZW0uZmlsZU5hbWUgPSBpdGVtLmZpbGVOYW1lO1xyXG4gICAgICAgICAgbmV3SXRlbS5nZW1TbG90ID0gaXRlbS5nZW1TbG90O1xyXG4gICAgICAgICAgbmV3SXRlbS5kZXNjcmlwdGlvbiA9IHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoZC5EZXNjcmlwdGlvbklELCBkLkRlc2NyaXB0aW9uSURQYXJhbSk7XHJcbiAgICAgICAgICBpdGVtRmFjdG9yeS5pbml0SXRlbShuZXdJdGVtKTtcclxuICAgICAgICAgIHJldHVybiBuZXdJdGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiB7bmFtZTogJ3Vua25vd24gaXRlbSd9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ge25hbWU6ICd1bmtub3duIGl0ZW0gc291cmNlOiAnICsgaXRlbS5pdGVtU291cmNlfTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0RG50RmlsZXM6IGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHJcbiAgICAgIHZhciBkbnRGaWxlcyA9IHt9O1xyXG5cclxuICAgICAgaWYoaXRlbSA9PSBudWxsKSB7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgaWYoIWl0ZW0uaXRlbVNvdXJjZSAmJiBpdGVtLml0ZW1UeXBlTmFtZSBpbiBpdGVtcykge1xyXG4gICAgICAgICAgaXRlbS5pdGVtU291cmNlID0gaXRlbS5pdGVtVHlwZU5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKGl0ZW0uaXRlbVNvdXJjZSA9PSAncmJUZWNoJykge1xyXG4gICAgICAgICAgaXRlbS5pdGVtU291cmNlID0gJ3RlY2gnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihpdGVtLml0ZW1Tb3VyY2UgaW4gaXRlbXMpIHtcclxuICAgICAgICAgIHZhciBpdGVtVHlwZSA9IGl0ZW1zW2l0ZW0uaXRlbVNvdXJjZV07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGRudEZpbGVzWydleGNoYW5nZS5sempzb24nXSA9IG51bGw7XHJcbiAgICAgICAgICBkbnRGaWxlc1tpdGVtVHlwZS5tYWluRG50XSA9IGl0ZW1Db2x1bW5zVG9Mb2FkLm1haW5EbnQ7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGZvcih2YXIgZmlsZVR5cGUgaW4gaXRlbVR5cGUpIHtcclxuICAgICAgICAgICAgaWYoZmlsZVR5cGUuaW5kZXhPZignRG50JykgPiAwKSB7XHJcbiAgICAgICAgICAgICAgaWYoZmlsZVR5cGUgPT0gJ2VuY2hhbnREbnQnICYmICFpdGVtLmVuY2hhbnRtZW50TnVtKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgZG50RmlsZXNbaXRlbVR5cGVbZmlsZVR5cGVdXSA9IGl0ZW1Db2x1bW5zVG9Mb2FkW2ZpbGVUeXBlXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihpdGVtLml0ZW1Tb3VyY2UgPT0gJ3NraWxscycgfHwgaXRlbS50eXBlTmFtZSA9PSAnc2tpbGxzJykge1xyXG4gICAgICAgICAgICB2YXIgc2tpbGxEbnQgPSAnc2tpbGx0YWJsZV9jaGFyYWN0ZXInICsgaXRlbS5iYXNlSm9iTmFtZSArICcubHpqc29uJztcclxuICAgICAgICAgICAgZG50RmlsZXNbc2tpbGxEbnRdID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIHNraWxsTGV2ZWxEbnQgPSAnc2tpbGxsZXZlbHRhYmxlX2NoYXJhY3RlcicgKyBpdGVtLmJhc2VKb2JOYW1lICsgJ3B2ZScgKyAnLmx6anNvbic7XHJcbiAgICAgICAgICAgIGRudEZpbGVzW3NraWxsTGV2ZWxEbnRdID0gbnVsbDtcclxuICAgICAgICAgICAgc2tpbGxMZXZlbERudCA9ICdza2lsbGxldmVsdGFibGVfY2hhcmFjdGVyJyArIGl0ZW0uYmFzZUpvYk5hbWUgKyAncHZwJyArICcubHpqc29uJztcclxuICAgICAgICAgICAgZG50RmlsZXNbc2tpbGxMZXZlbERudF0gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBpZihpdGVtLmZpbGVOYW1lKSB7XHJcbiAgICAgICAgICBkbnRGaWxlc1tpdGVtLmZpbGVOYW1lICsgJy5sempzb24nXSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gZG50RmlsZXM7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdncm91cEhlbHBlcicsIFsnZXhwb3J0TGlua0hlbHBlcicsZ3JvdXBIZWxwZXJdKTtcclxuZnVuY3Rpb24gZ3JvdXBIZWxwZXIoZXhwb3J0TGlua0hlbHBlcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgcmVsb2FkR3JvdXA6IGZ1bmN0aW9uKGdyb3VwTmFtZSwgZ3JvdXApIHtcclxuICAgICAgdmFyIG5ld0l0ZW1zID0gW107XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cC5pdGVtcywgZnVuY3Rpb24oaXRlbSwga2V5KSB7XHJcbiAgICAgICAgdmFyIG5ld0l0ZW0gPSBleHBvcnRMaW5rSGVscGVyLnJlbG9hZEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgaWYobmV3SXRlbSkge1xyXG4gICAgICAgICAgbmV3SXRlbXMucHVzaChuZXdJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIG5ld0l0ZW1zO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0RG50RmlsZXM6IGZ1bmN0aW9uKGdyb3VwKSB7XHJcblxyXG4gICAgICB2YXIgYWxsRG50RmlsZXMgPSB7fTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLml0ZW1zLCBmdW5jdGlvbihpdGVtLCBrZXkxKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGRudEZpbGVzID0gZXhwb3J0TGlua0hlbHBlci5nZXREbnRGaWxlcyhpdGVtKTtcclxuXHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRudEZpbGVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICBhbGxEbnRGaWxlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGFsbERudEZpbGVzO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdpdGVtQ2F0ZWdvcnknLFxyXG5bJ2l0ZW1GYWN0b3J5JywnaXRlbXMnLCdkbnREYXRhJyxpdGVtQ2F0ZWdvcnldKTtcclxuZnVuY3Rpb24gaXRlbUNhdGVnb3J5KGl0ZW1GYWN0b3J5LGl0ZW1zLGRudERhdGEpIHtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNhdGVnb3JpZXM6IFtcclxuICAgICAge3BhdGg6ICdldmVyeXRoaW5nJywgbmFtZTonZXZlcnl0aGluZycsIHNlYXJjaFR5cGU6ICdldmVyeXRoaW5nJywgaGlkZUluQnVpbGQ6IHRydWV9LFxyXG4gICAgICB7cGF0aDogJ3RpdGxlcycsIG5hbWU6J3RpdGxlcycsIHNvdXJjZVR5cGU6ICd0aXRsZXMnLCBoaWRlUmFuazogdHJ1ZSwgaGlkZUpvYjogdHJ1ZSwgaGlkZUxldmVsOiB0cnVlLCBudW1JdGVtVGV4dDogJzEnLCBtYXhDYXQ6IDF9LFxyXG4gICAgICB7cGF0aDogJ3dlYXBvbnMnLCBuYW1lOid3ZWFwb25zJywgc291cmNlVHlwZTogJ2VxdWlwbWVudCcsIG51bUl0ZW1UZXh0OiAnMicsIG1heEV4Y2hhbmdlOiAxLCBtYXhDYXQ6IDIsIGxpbWl0RXhjaGFuZ2U6IFsxLDJdfSxcclxuICAgICAge3BhdGg6ICdhcm1vdXInLCBuYW1lOidhcm1vdXInLCBzb3VyY2VUeXBlOiAnZXF1aXBtZW50JywgbnVtSXRlbVRleHQ6ICc1JywgbWF4RXhjaGFuZ2U6IDEsIG1heENhdDogNSwgbGltaXRFeGNoYW5nZTogWzMsNCw1LDYsN119LFxyXG4gICAgICB7cGF0aDogJ2FjY2Vzc29yaWVzJywgbmFtZTonYWNjZXNzb3JpZXMnLCBzb3VyY2VUeXBlOiAnZXF1aXBtZW50JywgaGlkZUpvYjogdHJ1ZSwgbWF4Q2F0OiA0LCBtYXhFeGNoYW5nZTogMiwgbGltaXRFeGNoYW5nZTogWzgsOSwxMF0sIHRJZDogNzYwNH0sXHJcbiAgICAgIHtwYXRoOiAndGVjaHMnLCBuYW1lOid0ZWNocycsIHNvdXJjZVR5cGU6ICd0ZWNocycsIG1heENhdDogNCwgbWF4RXhjaGFuZ2U6IDIsIGxpbWl0RXhjaGFuZ2U6IFs4LDksMTBdLCBoaWRlSm9iOiB0cnVlfSxcclxuICAgICAge3BhdGg6ICdvZmZlbnNpdmUtZ2VtcycsIG5hbWU6J29mZmVuc2l2ZSBnZW1zJywgc291cmNlVHlwZTogJ2dlbXMnLCBoaWRlSm9iOiB0cnVlLCBtYXhDYXQ6IDQsIG1heEV4Y2hhbmdlOiA0LCBsaW1pdEV4Y2hhbmdlOiBbNTRdfSxcclxuICAgICAge3BhdGg6ICdpbmNyZWFzaW5nLWdlbXMnLCBuYW1lOidpbmNyZWFzaW5nIGdlbXMnLCBzb3VyY2VUeXBlOiAnZ2VtcycsIGhpZGVKb2I6IHRydWUsIG1heENhdDogMTQsIG1heEV4Y2hhbmdlOiAxNCwgbGltaXRFeGNoYW5nZTogWzU0XX0sXHJcbiAgICAgIHtwYXRoOiAnZW5oYW5jZW1lbnQtcGxhdGVzJywgbmFtZTonZW5oYW5jZW1lbnQgcGxhdGVzJywgc291cmNlVHlwZTogJ3BsYXRlcycsIGhpZGVKb2I6IHRydWUsIG51bUl0ZW1UZXh0OiAnOCszJywgbWF4Q2F0OiAxMSwgbWF4RXhjaGFuZ2U6IDE1LCBsaW1pdEV4Y2hhbmdlOiBbMzNdfSxcclxuICAgICAge3BhdGg6ICdleHBlZGl0aW9uLXBsYXRlcycsIG5hbWU6J2V4cGVkaXRpb24gcGxhdGVzJywgc291cmNlVHlwZTogJ3BsYXRlcycsIGhpZGVSYW5rOiB0cnVlLCBoaWRlSm9iOiB0cnVlLCBudW1JdGVtVGV4dDogJzQnLCBtYXhDYXQ6IDQsIG1heEV4Y2hhbmdlOiAxNSwgbGltaXRFeGNoYW5nZTogWzMzXX0sXHJcbiAgICAgIHtwYXRoOiAndGFsaXNtYW4nLCBuYW1lOid0YWxpc21hbicsIHNvdXJjZVR5cGU6ICd0YWxpc21hbicsIGhpZGVKb2I6IHRydWUsIG51bUl0ZW1UZXh0OiAnOCs0JywgbWF4Q2F0OiAxMiwgbWF4RXhjaGFuZ2U6IDEyLCBsaW1pdEV4Y2hhbmdlOiBbNTIsNTNdLCB0SWQ6IDEwMDAwNTQxNDl9LFxyXG4gICAgICB7cGF0aDogJ2Nvc3R1bWUnLCBuYW1lOidjb3N0dW1lJywgc291cmNlVHlwZTogJ2Nhc2gnLCBudW1JdGVtVGV4dDogJzcnLCBtYXhDYXQ6IDcsIG1heEV4Y2hhbmdlOiAxLCBoaWRlTGV2ZWw6IHRydWUsIGxpbWl0RXhjaGFuZ2U6IFsxNiwxNywxOCwxOSwyMCwyMSwyMl0sIHRJZDogNzYwN30sXHJcbiAgICAgIHtwYXRoOiAnaW1wcmludCcsIG5hbWU6J2ltcHJpbnQnLCBzb3VyY2VUeXBlOiAnaW1wcmludCcsIG51bUl0ZW1UZXh0OiAnNycsIG1heENhdDogNywgaGlkZUxldmVsOiB0cnVlLCBoaWRlSm9iOiB0cnVlLCB0SWQ6IDEwMDAxMDgzMTR9LFxyXG4gICAgICB7cGF0aDogJ2Nhc2gnLCBuYW1lOidjYXNoJywgc291cmNlVHlwZTogJ2Nhc2gnLCBudW1JdGVtVGV4dDogJzgnLCBtYXhDYXQ6IDgsIG1heEV4Y2hhbmdlOiAyLCBoaWRlSm9iOiB0cnVlLCBoaWRlTGV2ZWw6IHRydWUsIGxpbWl0RXhjaGFuZ2U6IFsyMywyNCwyNSwyNiwyNywyOCwyOV0sIHRJZDogNzYwOH0sXHJcbiAgICAgIHtwYXRoOiAnZXh0cmFzJywgbmFtZTonZXh0cmFzJywgc291cmNlVHlwZTogJ3h0cmFzJywgbGltaXRFeGNoYW5nZTogWzQ3XSwgaGlkZUpvYjogdHJ1ZSwgaGlkZUxldmVsOiB0cnVlLH0sXHJcbiAgICAgIHtwYXRoOiAnc2tpbGxzJywgbmFtZTonc2tpbGxzJywgc2VhcmNoVHlwZTogJ3NraWxscyd9LFxyXG4gICAgICB7cGF0aDogJ2N1c3RvbScsIG5hbWU6J2N1c3RvbScsIHNlYXJjaFR5cGU6ICdjdXN0b20nLCBoaWRlSW5TZWFyY2g6IHRydWV9LFxyXG4gICAgICBdLFxyXG4gICAgICBcclxuICAgIGJ5TmFtZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICB2YXIgcmV0VmFsID0gbnVsbDtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuY2F0ZWdvcmllcywgZnVuY3Rpb24oY2F0ZWdvcnksIGluZGV4KSB7XHJcbiAgICAgICAgaWYoY2F0ZWdvcnkubmFtZSA9PSBuYW1lKSB7XHJcbiAgICAgICAgICByZXRWYWwgPSBjYXRlZ29yeTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgIH0sXHJcbiAgICAgIFxyXG4gICAgYnlQYXRoOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHZhciByZXRWYWwgPSBudWxsO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5jYXRlZ29yaWVzLCBmdW5jdGlvbihjYXRlZ29yeSwgaW5kZXgpIHtcclxuICAgICAgICBpZihjYXRlZ29yeS5wYXRoID09IG5hbWUpIHtcclxuICAgICAgICAgIHJldFZhbCA9IGNhdGVnb3J5O1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0SXRlbXM6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgdmFyIGNhdCA9IHRoaXMuYnlOYW1lKG5hbWUpO1xyXG4gICAgICBpZihjYXQgJiYgJ3NvdXJjZVR5cGUnIGluIGNhdCkge1xyXG4gICAgICAgIHZhciByZXRWYWwgPSBbXTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKHNvdXJjZSwgc291cmNlTmFtZSkge1xyXG4gICAgICAgICAgaWYoc291cmNlLnR5cGUgPT0gY2F0LnNvdXJjZVR5cGUgJiYgcmV0VmFsKSB7XHJcbiAgICAgICAgICAgIGlmKCFzb3VyY2UuaXRlbXMgJiYgIXNvdXJjZS5sb2FkaW5nKSB7XHJcbiAgICAgICAgICAgICAgaXRlbUZhY3RvcnkubG9hZEl0ZW1zKHNvdXJjZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHNvdXJjZS5pdGVtcykge1xyXG4gICAgICAgICAgICAgIHJldFZhbCA9IHJldFZhbC5jb25jYXQoc291cmNlLml0ZW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICByZXRWYWwgPSBudWxsOyAvLyBpZiBhbnkgYXJlIG51bGwganVzdCByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNhdEl0ZW1zID0gW107XHJcbiAgICAgICAgaWYocmV0VmFsKSB7XHJcbiAgICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJldFZhbCwgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYoaXRlbS50eXBlTmFtZSA9PSBjYXQubmFtZSB8fFxyXG4gICAgICAgICAgICAgIHZtLmlzSXRlbUZvckNhdChjYXQsIGl0ZW0sIGl0ZW0uZGF0YSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgaXRlbS50eXBlTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgY2F0SXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBjYXRJdGVtcztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgaXNJdGVtRm9yQ2F0OiBmdW5jdGlvbihjYXQsIGl0ZW0sIHJhd0RhdGEpIHtcclxuICAgICAgXHJcbiAgICAgIGlmKGl0ZW0uaXRlbVNvdXJjZSBpbiBpdGVtcyAmJiBpdGVtc1tpdGVtLml0ZW1Tb3VyY2VdLnR5cGUgIT0gY2F0LnNvdXJjZVR5cGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKGl0ZW0uaXRlbVR5cGUgPT0gY2F0Lm5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoY2F0LmxpbWl0RXhjaGFuZ2UpIHtcclxuICAgICAgICBcclxuICAgICAgICBmb3IodmFyIGk9MDtpPGNhdC5saW1pdEV4Y2hhbmdlLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgIGlmKGNhdC5saW1pdEV4Y2hhbmdlW2ldID09IGl0ZW0uZXhjaGFuZ2VUeXBlIHx8IChyYXdEYXRhICYmIGNhdC5saW1pdEV4Y2hhbmdlW2ldID09IHJhd0RhdGEuRXhjaGFuZ2VUeXBlKSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoaXRlbS5pdGVtU291cmNlID09ICdwbGF0ZScpIHtcclxuICAgICAgICAgICAgICBpZigoaXRlbS5yYXdEYXRhICYmIHJhd0RhdGEuUmFuayA9PSA0KSB8fCAoaXRlbS5yYW5rICYmIGl0ZW0ucmFuay5pZCA9PSA0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhdC5uYW1lID09ICdleHBlZGl0aW9uIHBsYXRlcyc7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhdC5uYW1lID09ICdlbmhhbmNlbWVudCBwbGF0ZXMnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGl0ZW0uaXRlbVNvdXJjZSA9PSAnZ2VtJykge1xyXG4gICAgICAgICAgICAgIHZhciBnZW1UeXBlcyA9IGRudERhdGEuZmluZChpdGVtcy5nZW0uZ2VtRG50LCAnaWQnLCBpdGVtLmlkKTtcclxuICAgICAgICAgICAgICBpZihnZW1UeXBlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKGdlbVR5cGVzWzBdLlR5cGUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2F0Lm5hbWUgPT0gJ29mZmVuc2l2ZSBnZW1zJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYoZ2VtVHlwZXNbMF0uVHlwZSA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjYXQubmFtZSA9PSAnaW5jcmVhc2luZyBnZW1zJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihpdGVtLml0ZW1Tb3VyY2UgaW4gaXRlbXMpIHtcclxuICAgICAgICByZXR1cm4gaXRlbXNbaXRlbS5pdGVtU291cmNlXS50eXBlID09IGNhdC5zb3VyY2VUeXBlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBpbml0OiBmdW5jdGlvbihuYW1lLCBjb21wbGV0ZSkge1xyXG4gICAgICB2YXIgY2F0ID0gdGhpcy5ieU5hbWUobmFtZSk7XHJcbiAgICAgIGlmKGNhdCAmJiAnc291cmNlVHlwZScgaW4gY2F0KSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihzb3VyY2UsIHNvdXJjZU5hbWUpIHtcclxuICAgICAgICAgIGlmKHNvdXJjZS50eXBlID09IGNhdC5zb3VyY2VUeXBlKSB7XHJcbiAgICAgICAgICAgIHNvdXJjZS5pbml0KGZ1bmN0aW9uKCkge30sIGNvbXBsZXRlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2V0SXRlbUNhdGVnb3J5OiBmdW5jdGlvbiAoaXRlbSwgcmF3RGF0YSkge1xyXG4gICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICBcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuY2F0ZWdvcmllcywgZnVuY3Rpb24oY2F0LCBpbmRleCkge1xyXG4gICAgICAgIGlmKHZtLmlzSXRlbUZvckNhdChjYXQsIGl0ZW0sIHJhd0RhdGEpKSB7XHJcbiAgICAgICAgICBpdGVtLnR5cGVOYW1lID0gY2F0Lm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldEl0ZW1zQnlDYXRlZ29yeTogZnVuY3Rpb24oaXRlbXMpIHtcclxuICAgICAgdmFyIGl0ZW1NYXAgPSB7fTtcclxuICAgICAgaWYoaXRlbXMpIHtcclxuICAgICAgICB2YXIgdHlwZXMgPSB7fTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICBpZihpdGVtKSB7XHJcbiAgICAgICAgICAgIGlmKCEoaXRlbS50eXBlTmFtZSBpbiB0eXBlcykpIHtcclxuICAgICAgICAgICAgICB0eXBlc1tpdGVtLnR5cGVOYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHR5cGVzW2l0ZW0udHlwZU5hbWVdLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuY2F0ZWdvcmllcywgZnVuY3Rpb24oY2F0ZWdvcnksIGluZGV4KSB7XHJcblxyXG4gICAgICAgICAgaWYoY2F0ZWdvcnkubmFtZSBpbiB0eXBlcykge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHNvcnRlZCA9IHR5cGVzW2NhdGVnb3J5Lm5hbWVdLnNvcnQoZnVuY3Rpb24oaXRlbTEsIGl0ZW0yKSB7XHJcbiAgICAgICAgICAgICAgaWYoY2F0ZWdvcnkubmFtZSA9PSAndGFsaXNtYW4nKSB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhciBlbmgxID0gaXRlbTEuZW5jaGFudG1lbnROdW07XHJcbiAgICAgICAgICAgICAgICBpZighZW5oMSkgZW5oMSA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5oMiA9IGl0ZW0yLmVuY2hhbnRtZW50TnVtO1xyXG4gICAgICAgICAgICAgICAgaWYoIWVuaDIpIGVuaDEgPSAwO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZihlbmgxICE9IGVuaDIpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuaDIgLSBlbmgxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBlbHNlIGlmKGl0ZW0xLml0ZW1Tb3VyY2UgPT0gJ2dlbScgfHwgaXRlbTEuaXRlbVNvdXJjZSA9PSAncGxhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICBpZihpdGVtMS5nZW1TbG90IHx8IGl0ZW0yLmdlbVNsb3QpIHtcclxuICAgICAgICAgICAgICAgICAgaWYoIWl0ZW0xLmdlbVNsb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBlbHNlIGlmKCFpdGVtMi5nZW1TbG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtMS5nZW1TbG90IC0gaXRlbTIuZ2VtU2xvdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTIubGV2ZWxMaW1pdCAtIGl0ZW0xLmxldmVsTGltaXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2UgaWYoJ2V4Y2hhbmdlVHlwZScgaW4gaXRlbTEgJiYgJ2V4Y2hhbmdlVHlwZScgaW4gaXRlbTIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtMS5leGNoYW5nZVR5cGUgLSBpdGVtMi5leGNoYW5nZVR5cGU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIHJldHVybiBpdGVtMS5uYW1lLmxvY2FsZUNvbXBhcmUoaXRlbTIubmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpdGVtTWFwW2NhdGVnb3J5Lm5hbWVdID0gc29ydGVkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGl0ZW1NYXBbY2F0ZWdvcnkubmFtZV0gPSBbXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICBpZihpdGVtICYmICEoaXRlbS50eXBlTmFtZSBpbiBpdGVtTWFwKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnd2UgZG9udCBrbm93ICcgKyBpdGVtLnR5cGVOYW1lICsgJyBhbnltb3JlJylcclxuICAgICAgICAgICAgaXRlbU1hcC50eXBlRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBpdGVtTWFwO1xyXG4gICAgfSxcclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgnZXhjbHVkZVNlcnZpY2UnLCBleGNsdWRlU2VydmljZSk7XHJcblxyXG5mdW5jdGlvbiBleGNsdWRlU2VydmljZSgpIHtcclxuIHJldHVybiB7XHJcbiAgICAgaWRzOiBbe1xyXG4gICAgICAgICAgICBuYW1lOiAndW5ib3VuZCBwbGF0ZXMnLFxyXG4gICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgIG1heDogMFxyXG4gICAgICAgIH1cclxuICAgICBdLFxyXG4gfTtcclxufVxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2l0ZW1GYWN0b3J5JyxpdGVtRmFjdG9yeSk7XHJcblxyXG5mdW5jdGlvbiBpdGVtRmFjdG9yeSh0cmFuc2xhdGlvbnMsZG50RGF0YSxoQ29kZVZhbHVlcyxpdGVtcykge1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBsb2FkSXRlbXM6IGxvYWRJdGVtcyxcclxuICAgIGluaXRJdGVtOiBpbml0SXRlbSxcclxuICAgIGNyZWF0ZUl0ZW06IGNyZWF0ZUl0ZW0sXHJcbiAgICBnZXRJdGVtRGF0YTogZ2V0SXRlbURhdGEsXHJcbiAgICBjcmVhdGVCYXNpY0l0ZW06IGNyZWF0ZUJhc2ljSXRlbSxcclxuICB9O1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUl0ZW0oaXRlbVR5cGUsIHJvdywgcCkge1xyXG4gICAgXHJcbiAgICAvLyBkYXRhIGFuZCBwb3RlbnRpYWwgYXJlIHVzZWQgdG8gaW5pdGlhbGlzZSBuYW1lIGFuZCBzdGF0c1xyXG4gICAgLy8gdGhpcyBpcyBvbmx5IGRvbmUgd2hlbiBuZWVkZWRcclxuICAgIC8vIHRoZXkgYXJlIHRoZW4gcmVtb3ZlZCBmcm9tIHRoZSBvYmplY3RcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJvdzogcm93LFxyXG4gICAgICBwb3RlbnRpYWwgOiBwLFxyXG4gICAgICBpZDogZG50RGF0YS5nZXRWYWx1ZShpdGVtVHlwZS5tYWluRG50LCByb3csICdpZCcpLFxyXG4gICAgICBpdGVtU291cmNlIDogaXRlbVR5cGUubmFtZSxcclxuICAgICAgbGV2ZWxMaW1pdCA6IGRudERhdGEuZ2V0VmFsdWUoaXRlbVR5cGUubWFpbkRudCwgcm93LCAnTGV2ZWxMaW1pdCcpLFxyXG4gICAgICBuZWVkSm9iQ2xhc3MgOiBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHJvdywgJ05lZWRKb2JDbGFzcycpLFxyXG4gICAgICB0eXBlSWQgOiBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHJvdywgJ1R5cGUnKSxcclxuICAgICAgZXhjaGFuZ2VUeXBlOiBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHJvdywgJ0V4Y2hhbmdlVHlwZScpLFxyXG4gICAgICByYW5rIDogaENvZGVWYWx1ZXMucmFua05hbWVzW2RudERhdGEuZ2V0VmFsdWUoaXRlbVR5cGUubWFpbkRudCwgcm93LCAnUmFuaycpXSxcclxuICAgICAgcGlkOiBudWxsLFxyXG4gICAgICBuYW1lIDogbnVsbCxcclxuICAgICAgc3RhdHMgOiBudWxsLFxyXG4gICAgICBwb3RlbnRpYWxSYXRpbyA6IG51bGwsXHJcbiAgICAgIHR5cGVOYW1lIDogbnVsbCxcclxuICAgICAgc3BhcmtJZDogbnVsbCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpc0RhdGFMb2FkZWQoaXRlbVR5cGUpIHtcclxuICAgIFxyXG4gICAgaWYoIWRudERhdGEuaXNMb2FkZWQoaXRlbVR5cGUubWFpbkRudCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZighdHJhbnNsYXRpb25zLmlzTG9hZGVkKCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZigncG90ZW50aWFsRG50JyBpbiBpdGVtVHlwZSAmJiAhZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZS5wb3RlbnRpYWxEbnQpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoJ3BvdGVudGlhbERudEV4JyBpbiBpdGVtVHlwZSAmJiAhZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZS5wb3RlbnRpYWxEbnRFeCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG5cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gbG9hZEl0ZW1zKGl0ZW1UeXBlKSB7XHJcblxyXG4gICAgaWYoIWlzRGF0YUxvYWRlZChpdGVtVHlwZSkpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgXHJcbiAgICBpdGVtVHlwZS5pdGVtcyA9IFtdO1xyXG4gICAgdmFyIG51bVJvd3MgPSBkbnREYXRhLmdldE51bVJvd3MoaXRlbVR5cGUubWFpbkRudCk7XHJcbiAgICBmb3IodmFyIHI9MDtyPG51bVJvd3M7KytyKSB7XHJcbiAgICAgIHZhciBkVHlwZSA9IGRudERhdGEuZ2V0VmFsdWUoaXRlbVR5cGUubWFpbkRudCwgciwgJ1R5cGUnKTtcclxuXHJcbiAgICAgIHZhciBzdGF0ZTFNYXggPSBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHIsICdTdGF0ZTFfTWF4Jyk7XHJcbiAgICAgIHZhciBkU3RhdGVWYWx1ZTEgPSBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHIsICdTdGF0ZVZhbHVlMScpO1xyXG4gICAgICB2YXIgZFR5cGVQYXJhbTEgPSBkbnREYXRhLmdldFZhbHVlKGl0ZW1UeXBlLm1haW5EbnQsIHIsICdUeXBlUGFyYW0xJyk7XHJcbiAgICAgICAgXHJcbiAgICAgIC8vIHNraXAgaXRlbXMgd2l0aCBubyBkYXRhXHJcbiAgICAgIGlmKHN0YXRlMU1heCA+IDAgfHwgZFN0YXRlVmFsdWUxID4gMCB8fCBkVHlwZVBhcmFtMSA+IDAgfHwgZFR5cGUgPT0gMzUpIHsgICAgICAgIFxyXG4gICAgICAgIHZhciBwb3RlbnRpYWxzID0gW107XHJcbiAgICAgICAgaWYoZFR5cGVQYXJhbTEgPiAwICYmICdwb3RlbnRpYWxEbnQnIGluIGl0ZW1UeXBlKSB7XHJcbiAgICAgICAgICBwb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnBvdGVudGlhbERudCwgJ1BvdGVudGlhbElEJywgZFR5cGVQYXJhbTEpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZighcG90ZW50aWFscy5sZW5ndGggJiYgJ3BvdGVudGlhbERudEV4JyBpbiBpdGVtVHlwZSkge1xyXG4gICAgICAgICAgICBwb3RlbnRpYWxzID0gZG50RGF0YS5maW5kKGl0ZW1UeXBlLnBvdGVudGlhbERudEV4LCAnUG90ZW50aWFsSUQnLCBkVHlwZVBhcmFtMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBudW1Qb3RlbnRpYWxzID0gcG90ZW50aWFscy5sZW5ndGg7XHJcbiAgICAgICAgaWYoIW51bVBvdGVudGlhbHMpIHtcclxuICAgICAgICAgIHBvdGVudGlhbHMgPSBbbnVsbF07XHJcbiAgICAgICAgICBudW1Qb3RlbnRpYWxzID0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcih2YXIgcD0wO3A8bnVtUG90ZW50aWFsczsrK3ApIHtcclxuICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOyAgICAgICAgICBcclxuICAgICAgICAgIGlmKCFmb3VuZCkge1xyXG4gICAgICAgICAgICBpdGVtVHlwZS5pdGVtcy5wdXNoKGNyZWF0ZUl0ZW0oaXRlbVR5cGUsIHIsIHBvdGVudGlhbHNbcF0sIDApKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICB2YXIgZW5kID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICB2YXIgdGltZSA9IGVuZCAtIHN0YXJ0O1xyXG4gICAgY29uc29sZS5sb2coJ2l0ZW0gaW5pdCB0aW1lOiAnICsgKHRpbWUvMTAwMCkgKyAncyBmb3IgJyArIGl0ZW1UeXBlLm5hbWUpO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBpbml0SXRlbShpdGVtKSB7XHJcbiAgICBcclxuICAgIGlmKGl0ZW0ucm93ID49IDApIHtcclxuICAgICAgdmFyIGQ7XHJcbiAgICAgIGlmKGl0ZW0uaXRlbVNvdXJjZSAmJiBpdGVtLml0ZW1Tb3VyY2UgaW4gaXRlbXMpIHtcclxuICAgICAgICBkID0gZG50RGF0YS5nZXRSb3coaXRlbXNbaXRlbS5pdGVtU291cmNlXS5tYWluRG50LCBpdGVtLnJvdyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihpdGVtLmZpbGVOYW1lKSB7XHJcbiAgICAgICAgZCA9IGRudERhdGEuZ2V0Um93KGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsIGl0ZW0ucm93KTtcclxuICAgICAgfVxyXG4gICAgICBkZWxldGUgaXRlbS5yb3c7XHJcblxyXG4gICAgICB2YXIgcCA9IGl0ZW0ucG90ZW50aWFsO1xyXG4gIFxyXG4gICAgICBpZihpdGVtLm5hbWUgPT0gbnVsbCkge1xyXG4gICAgICAgIGl0ZW0ubmFtZSA9IHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoZC5OYW1lSUQsIGQuTmFtZUlEUGFyYW0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZighaXRlbS5zcGFya1R5cGVJZCAmJiBkLlR5cGVQYXJhbTIgPiAwKSB7XHJcbiAgICAgICAgaXRlbS5zcGFya1R5cGVJZCA9IGQuVHlwZVBhcmFtMjtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoaXRlbS5zdGF0cyA9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMoZCk7XHJcbiAgICAgICAgaWYocCkge1xyXG4gICAgICAgICAgdmFyIHBvdGVudGlhbFN0YXRzID0gaENvZGVWYWx1ZXMuZ2V0U3RhdHMocCk7XHJcbiAgICAgICAgICBzdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoc3RhdHMsIHBvdGVudGlhbFN0YXRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaXRlbS5zdGF0cyA9IHN0YXRzO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihkLlNraWxsSUQgJiYgIWl0ZW0uc2tpbGxJZCkge1xyXG4gICAgICAgIGl0ZW0uc2tpbGxJZCA9IGQuU2tpbGxJRDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoaXRlbS5pY29uSW5kZXggPT0gbnVsbCkge1xyXG4gICAgICAgIGl0ZW0uaWNvbiA9IGQuSWNvbkltYWdlSW5kZXg7XHJcbiAgICAgICAgaWYoIWl0ZW0uaWNvbiAmJiBpdGVtLml0ZW1Tb3VyY2UgPT0gJ3RpdGxlJykge1xyXG4gICAgICAgICAgaXRlbS5pY29uID0gMTI0MTc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihkLmRyYWdvbmpld2VsdHlwZSA+PSAwKSB7XHJcbiAgICAgICAgaXRlbS5kcmFnb25qZXdlbHR5cGUgPSBkLmRyYWdvbmpld2VsdHlwZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoZC5FbmNoYW50SUQgJiYgIWl0ZW0uZW5jaGFudG1lbnRJZCkge1xyXG4gICAgICAgIGl0ZW0uZW5jaGFudG1lbnRJZCA9IGQuRW5jaGFudElEO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihkLkVuY2hhbnRJRCAmJiAhaXRlbS5lbmNoYW50bWVudElkKSB7XHJcbiAgICAgICAgaXRlbS5lbmNoYW50bWVudElkID0gZC5FbmNoYW50SUQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihkLlR5cGUgPT0gMzUpIHtcclxuICAgICAgICBpdGVtLml0ZW1Tb3VyY2UgPSAneHRyYXMnO1xyXG4gICAgICAgIHZhciBpdGVtVHlwZSA9IGl0ZW1zW2l0ZW0uaXRlbVNvdXJjZV07XHJcbiAgICAgICAgaWYoaXRlbVR5cGUpIHtcclxuICAgICAgICAgIC8vIGl0ZW0uZmlsZU5hbWUgPSBpdGVtVHlwZS5tYWluRG50O1xyXG4gICAgICAgICAgdmFyIHBldERhdGEgPSBkbnREYXRhLmZpbmQoaXRlbVR5cGUucGV0RG50LCAnaWQnLCBkLmlkKTtcclxuICAgICAgICAgIGlmKHBldERhdGEgJiYgcGV0RGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaXRlbS5lbmNoYW50bWVudElkID0gcGV0RGF0YVswXS5QZXRMZXZlbFR5cGVJRDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKHApIHtcclxuICAgICAgICBpdGVtLnBpZCA9IHAuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGRlbGV0ZSBpdGVtLnBvdGVudGlhbDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0SXRlbURhdGEoaXRlbSkge1xyXG4gICAgdmFyIGl0ZW1UeXBlID0gaXRlbXNbaXRlbS5pdGVtU291cmNlXTtcclxuICAgIFxyXG4gICAgaWYoaXRlbS5maWxlTmFtZSAmJiBkbnREYXRhLmlzTG9hZGVkKGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicpKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBnZXRJdGVtRGF0YUZyb21GaWxlKGl0ZW0uZmlsZU5hbWUgKyAnLmx6anNvbicsIGl0ZW0pO1xyXG4gICAgICBpZihyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmKGl0ZW0uZmlsZU5hbWUgJiYgZG50RGF0YS5pc0xvYWRlZChpdGVtLmZpbGVOYW1lICsgJy5vcHRpbWlzZWQuanNvbicpKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBnZXRJdGVtRGF0YUZyb21GaWxlKGl0ZW0uZmlsZU5hbWUgKyAnLm9wdGltaXNlZC5qc29uJywgaXRlbSk7XHJcbiAgICAgIGlmKHJlc3VsdCkge1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYoaXRlbVR5cGUgJiYgZG50RGF0YS5pc0xvYWRlZChpdGVtVHlwZS5tYWluRG50KSkge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0SXRlbURhdGFGcm9tRmlsZShpdGVtVHlwZS5tYWluRG50LCBpdGVtKTtcclxuICAgICAgaWYocmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldEl0ZW1EYXRhRnJvbUZpbGUoZmlsZU5hbWUsIGl0ZW0pIHtcclxuICAgIGlmKGZpbGVOYW1lKSB7XHJcbiAgICAgIHZhciBpdGVtRGF0YSA9IGRudERhdGEuZmluZChmaWxlTmFtZSwgJ2lkJywgaXRlbS5pZCk7XHJcbiAgICAgIGlmKGl0ZW1EYXRhICYmIGl0ZW1EYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICByZXR1cm4gaXRlbURhdGFbMF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUJhc2ljSXRlbShkKSB7XHJcbiAgICBpZighZCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpZDogZC5pZCxcclxuICAgICAgbmFtZTogdHJhbnNsYXRpb25zLnRyYW5zbGF0ZShkLk5hbWVJRCwgZC5OYW1lSURQYXJhbSksXHJcbiAgICAgIHJhbms6IGhDb2RlVmFsdWVzLnJhbmtOYW1lc1tkLlJhbmtdLFxyXG4gICAgICBpY29uOiBkLkljb25JbWFnZUluZGV4LFxyXG4gICAgICBsZXZlbExpbWl0IDogZC5MZXZlbExpbWl0LFxyXG4gICAgICBmaWxlTmFtZTogZC5maWxlTmFtZSxcclxuICAgICAgdHlwZUlkOiBkLlR5cGVcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgnaXRlbXMnLFxyXG5bJ3RyYW5zbGF0aW9ucycsJ2RudERhdGEnLCdpdGVtQ29sdW1uc1RvTG9hZCcsaXRlbXNdKTtcclxuZnVuY3Rpb24gaXRlbXModHJhbnNsYXRpb25zLGRudERhdGEsaXRlbUNvbHVtbnNUb0xvYWQpIHtcclxuICBcclxuICB2YXIgaXRlbVNvdXJjZXMgPSB7XHJcbiAgICBcclxuICAgICAgdGl0bGUgOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2FwcGVsbGF0aW9udGFibGUub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB0eXBlOiAndGl0bGVzJywgXHJcbiAgICAgICAgbWluTGV2ZWw6IDAsIFxyXG4gICAgICAgIG1pblJhbms6IDAgfSxcclxuICAgICAgLy8gd3NwcjogeyBtYWluRG50OiAnaXRlbXRhYmxlX3NvdXJjZS5kbnQnLCB0eXBlOiAnd2VsbHNwcmluZycsIG1pbkxldmVsOiAyNCB9LFxyXG4gICAgICBcclxuICAgICAgdGVjaDogeyBcclxuICAgICAgICBtYWluRG50OiAnaXRlbXRhYmxlX3NraWxsbGV2ZWx1cC5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBvdGVudGlhbERudDogJ3BvdGVudGlhbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBwb3RlbnRpYWxEbnRFeDogJ3BvdGVudGlhbHRhYmxlX3JlYm9vdC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgc3BhcmtEbnQ6ICdwb3RlbnRpYWx0YWJsZV9wb3RlbnRpYWxqZXdlbC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgZ2VtU2xvdERudDogJ2RyYWdvbmpld2Vsc2xvdHRhYmxlLmx6anNvbicsXHJcbiAgICAgICAgdHlwZTogJ3RlY2hzJywgXHJcbiAgICAgICAgbWluTGV2ZWw6IDYwLFxyXG4gICAgICAgIG1pblJhbms6IDB9LFxyXG4gICAgICBcclxuICAgICAgdG1hbjogeyBcclxuICAgICAgICBtYWluRG50OiAnaXRlbXRhYmxlX3RhbGlzbWFuLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgdHlwZTogJ3RhbGlzbWFuJywgXHJcbiAgICAgICAgcG90ZW50aWFsRG50OiAncG90ZW50aWFsdGFibGVfdGFsaXNtYW5pdGVtLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBtaW5MZXZlbDogMjQsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgICBcclxuICAgICAgZ2VtOiB7IFxyXG4gICAgICAgIG1haW5EbnQ6ICdpdGVtdGFibGVfZHJhZ29uamV3ZWwub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwb3RlbnRpYWxEbnQ6ICdwb3RlbnRpYWx0YWJsZV9kcmFnb25qZXdlbC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgcG90ZW50aWFsRG50RXg6ICdwb3RlbnRpYWx0YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIGVuY2hhbnREbnQ6ICdlbmNoYW50dGFibGVfZHJhZ29uamV3ZWwub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBnZW1EbnQ6ICdkcmFnb25qZXdlbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnZ2VtcycsXHJcbiAgICAgICAgbWluTGV2ZWw6IDI0LFxyXG4gICAgICAgIG1pblJhbms6IDN9LFxyXG4gICAgICBcclxuICAgICAgcGxhdGU6IHsgXHJcbiAgICAgICAgbWFpbkRudCA6ICdpdGVtdGFibGVfZ2x5cGgub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwb3RlbnRpYWxEbnQ6ICdwb3RlbnRpYWx0YWJsZV9nbHlwaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgdHlwZTogJ3BsYXRlcycsXHJcbiAgICAgICAgbWluTGV2ZWw6IDE2LFxyXG4gICAgICAgIG1pblJhbms6IDIgfSxcclxuXHJcbiAgICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHdlYXBvbkRudDogJ3dlYXBvbnRhYmxlLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgZW5jaGFudERudDogJ2VuY2hhbnR0YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBvdGVudGlhbERudDogJ3BvdGVudGlhbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIGdlbVNsb3REbnQ6ICdkcmFnb25qZXdlbHNsb3R0YWJsZS5sempzb24nLFxyXG4gICAgICAgIHR5cGU6ICdlcXVpcG1lbnQnLFxyXG4gICAgICAgIG1pbkxldmVsOiA4MCxcclxuICAgICAgICBtaW5SYW5rOiAzIH0sXHJcbiAgICAgIGVxOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9lcXVpcG1lbnQub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwYXJ0c0RudDogJ3BhcnRzdGFibGVfZXF1aXBtZW50Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgd2VhcG9uRG50OiAnd2VhcG9udGFibGVfZXF1aXBtZW50Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgZW5jaGFudERudDogJ2VuY2hhbnR0YWJsZS5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBvdGVudGlhbERudDogJ3BvdGVudGlhbHRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBzcGFya0RudDogJ3BvdGVudGlhbHRhYmxlX3BvdGVudGlhbGpld2VsLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIGdlbVNsb3REbnQ6ICdkcmFnb25qZXdlbHNsb3R0YWJsZS5sempzb24nLFxyXG4gICAgICAgIHR5cGU6ICdlcXVpcG1lbnQnLFxyXG4gICAgICAgIG1pbkxldmVsOiAyMSxcclxuICAgICAgICBtaW5SYW5rOiAzIH0sXHJcbiAgICAgIHJiZXE6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwYXJ0c0RudDogJ3BhcnRzdGFibGVfcmVib290Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgd2VhcG9uRG50OiAnd2VhcG9udGFibGVfcmVib290Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgZW5jaGFudERudDogJ2VuY2hhbnR0YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwb3RlbnRpYWxEbnQ6ICdwb3RlbnRpYWx0YWJsZV9yZWJvb3Qub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHNldERudDogJ3NldGl0ZW10YWJsZS5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgZ2VtU2xvdERudDogJ2RyYWdvbmpld2Vsc2xvdHRhYmxlLmx6anNvbicsXHJcbiAgICAgICAgdHlwZTogJ2VxdWlwbWVudCcsXHJcbiAgICAgICAgbWluTGV2ZWw6IDI0LFxyXG4gICAgICAgIG1pblJhbms6IDMgfSxcclxuICAgICAgcHZwZXE6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB3ZWFwb25EbnQ6ICd3ZWFwb250YWJsZV9wdnAub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBlbmNoYW50RG50OiAnZW5jaGFudHRhYmxlLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnZXF1aXBtZW50JyxcclxuICAgICAgICBnZW1TbG90RG50OiAnZHJhZ29uamV3ZWxzbG90dGFibGUubHpqc29uJyxcclxuICAgICAgICBtaW5MZXZlbDogMjQsXHJcbiAgICAgICAgbWluUmFuazogMyB9LFxyXG5cclxuICAgICAgY0Nsb25lOiB7XHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9jYXNoY2xvbmUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZV9jYXNoY2xvbmUub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHR5cGU6ICdjYXNoJyxcclxuICAgICAgICBtaW5MZXZlbDogMCxcclxuICAgICAgICBpZ25vcmVFcnJvcnM6IHRydWUsXHJcbiAgICAgICAgbWluUmFuazogNCB9LFxyXG4gICAgICBjMjAxNjogeyBcclxuICAgICAgICBtYWluRG50OiAnaXRlbXRhYmxlX2NvbW1vbjIwMTYub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBwYXJ0c0RudDogJ3BhcnRzdGFibGVfY29tbW9uMjAxNi5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHdlYXBvbkRudDogJ3dlYXBvbnRhYmxlX2NvbW1vbjIwMTYub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICBzZXREbnQ6ICdzZXRpdGVtdGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgdHlwZTogJ2Nhc2gnLFxyXG4gICAgICAgIG1pbkxldmVsOiAwLFxyXG4gICAgICAgIG1pblJhbms6IDAgfSxcclxuICAgICAgYzIwMTU6IHsgXHJcbiAgICAgICAgbWFpbkRudDogJ2l0ZW10YWJsZV9jb21tb24yMDE1Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgcGFydHNEbnQ6ICdwYXJ0c3RhYmxlX2NvbW1vbjIwMTUub3B0aW1pc2VkLmpzb24nLCBcclxuICAgICAgICB3ZWFwb25EbnQ6ICd3ZWFwb250YWJsZV9jb21tb24yMDE1Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlX2Nhc2gub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHR5cGU6ICdjYXNoJyxcclxuICAgICAgICBtaW5MZXZlbDogMCxcclxuICAgICAgICBtaW5SYW5rOiAwIH0sXHJcbiAgICAgIGMyMDE0OiB7IFxyXG4gICAgICAgIG1haW5EbnQ6ICdpdGVtdGFibGVfY29tbW9uMjAxNC5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZV9jb21tb24yMDE0Lm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgd2VhcG9uRG50OiAnd2VhcG9udGFibGVfY29tbW9uMjAxNC5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHNldERudDogJ3NldGl0ZW10YWJsZV9jYXNoLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnY2FzaCcsXHJcbiAgICAgICAgbWluTGV2ZWw6IDAsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgICBjYXNoOiB7IFxyXG4gICAgICAgIG1haW5EbnQ6ICdpdGVtdGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZV9jYXNoLm9wdGltaXNlZC5qc29uJywgXHJcbiAgICAgICAgd2VhcG9uRG50OiAnd2VhcG9udGFibGVfY2FzaC5vcHRpbWlzZWQuanNvbicsIFxyXG4gICAgICAgIHNldERudDogJ3NldGl0ZW10YWJsZV9jYXNoLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnY2FzaCcsXHJcbiAgICAgICAgbWluTGV2ZWw6IDAsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgICBldmVudDoge1xyXG4gICAgICAgIG1haW5EbnQ6ICdpdGVtdGFibGVfZXZlbnQub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHBhcnRzRG50OiAncGFydHN0YWJsZV9ldmVudC5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgd2VhcG9uRG50OiAnd2VhcG9udGFibGVfZXZlbnQub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHNldERudDogJ3NldGl0ZW10YWJsZV9jYXNoLm9wdGltaXNlZC5qc29uJyxcclxuICAgICAgICB0eXBlOiAnY2FzaCcsXHJcbiAgICAgICAgbWluTGV2ZWw6IDAsXHJcbiAgICAgICAgbWluUmFuazogMCB9LFxyXG4gICAgICB4dHJhczoge1xyXG4gICAgICAgIG1haW5EbnQ6ICdpdGVtdGFibGVfdmVoaWNsZS5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgcGFydHNEbnQ6ICd2ZWhpY2xlcGFydHN0YWJsZS5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgc2V0RG50OiAnc2V0aXRlbXRhYmxlX2Nhc2gub3B0aW1pc2VkLmpzb24nLFxyXG4gICAgICAgIHBldERudDogJ3ZlaGljbGV0YWJsZS5sempzb24nLFxyXG4gICAgICAgIHBldExldmVsRG50OiAncGV0bGV2ZWx0YWJsZS5sempzb24nLCBcclxuICAgICAgICB0eXBlOiAneHRyYXMnLFxyXG4gICAgICAgIG1pbkxldmVsOiAwLFxyXG4gICAgICAgIG1pblJhbms6IDAgfSxcclxuICAgICAgaW1wcmludDoge1xyXG4gICAgICAgIG1haW5EbnQ6ICdpdGVtdGFibGVfaW1wcmludGluZy5vcHRpbWlzZWQuanNvbicsXHJcbiAgICAgICAgdHlwZTogJ2ltcHJpbnQnLFxyXG4gICAgICAgIG1pbkxldmVsOiAwLFxyXG4gICAgICAgIG1pblJhbms6IDAgfSxcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIG5vdyB0aGF0IHRoZSBzb3VyY2VzIGFyZSBzZXQgdXAgYWRkIHNvbWUgbWV0aG9kcyBvbiB0aGVtIGZvciBpbml0aWFsaXNhdGlvblxyXG4gICAgLy8gZWFjaCBzb3VyY2Ugd2lsbCBzdG9yZSB0aGUgaXRlbXMgZnJvbSB0aGF0IHNvdXJjZSBmb3IgcmV1c2UgYnkgc2VhcmNoZXNcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChpdGVtU291cmNlcywgZnVuY3Rpb24oaXRlbVNvdXJjZSwga2V5KSB7XHJcbiAgICAgIGl0ZW1Tb3VyY2UubmFtZSA9IGtleTtcclxuICAgICAgaXRlbVNvdXJjZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIGl0ZW1Tb3VyY2UuaXRlbXMgPSBudWxsO1xyXG4gICAgICBpdGVtU291cmNlLmluaXQgPSBpbml0OyAvLyBkZWNhbGFyZWQgYmVsb3dcclxuICAgICAgaXRlbVNvdXJjZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGl0ZW1Tb3VyY2UuaXRlbXMgPSBudWxsO1xyXG4gICAgICAgIGl0ZW1Tb3VyY2UubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGl0ZW1Tb3VyY2VzO1xyXG4gIFxyXG4gIFxyXG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmVzcywgY29tcGxldGUpIHtcclxuICAgICAgdmFyIGl0ZW1Tb3VyY2UgPSB0aGlzO1xyXG4gICAgICBpdGVtU291cmNlLmxvYWRpbmcgPSB0cnVlO1xyXG4gIFxyXG4gICAgICBpZihpdGVtU291cmNlLml0ZW1zKSB7XHJcbiAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBcclxuICAgICAgICB0cmFuc2xhdGlvbnMuaW5pdChwcm9ncmVzcywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBkb0NvbXBsZXRlKGl0ZW1Tb3VyY2UsIGNvbXBsZXRlKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRudERhdGEuaW5pdChpdGVtU291cmNlLm1haW5EbnQsIGl0ZW1Db2x1bW5zVG9Mb2FkLm1haW5EbnQsIHByb2dyZXNzLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGRvQ29tcGxldGUoaXRlbVNvdXJjZSwgY29tcGxldGUpXHJcbiAgICAgICAgfSwgaXRlbVNvdXJjZS5pZ25vcmVFcnJvcnMpO1xyXG4gICAgICAgIGlmKCdwb3RlbnRpYWxEbnQnIGluIGl0ZW1Tb3VyY2UpIHtcclxuICAgICAgICAgIGRudERhdGEuaW5pdChpdGVtU291cmNlLnBvdGVudGlhbERudCwgaXRlbUNvbHVtbnNUb0xvYWQucG90ZW50aWFsRG50LCBwcm9ncmVzcywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGRvQ29tcGxldGUoaXRlbVNvdXJjZSwgY29tcGxldGUpXHJcbiAgICAgICAgICB9LCBpdGVtU291cmNlLmlnbm9yZUVycm9ycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKCdwb3RlbnRpYWxEbnRFeCcgaW4gaXRlbVNvdXJjZSkge1xyXG4gICAgICAgICAgZG50RGF0YS5pbml0KGl0ZW1Tb3VyY2UucG90ZW50aWFsRG50RXgsIGl0ZW1Db2x1bW5zVG9Mb2FkLnBvdGVudGlhbERudCwgcHJvZ3Jlc3MsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBkb0NvbXBsZXRlKGl0ZW1Tb3VyY2UsIGNvbXBsZXRlKVxyXG4gICAgICAgICAgfSwgaXRlbVNvdXJjZS5pZ25vcmVFcnJvcnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZignZ2VtRG50JyBpbiBpdGVtU291cmNlKSB7XHJcbiAgICAgICAgICBkbnREYXRhLmluaXQoaXRlbVNvdXJjZS5nZW1EbnQsIGl0ZW1Db2x1bW5zVG9Mb2FkLmdlbURudCwgcHJvZ3Jlc3MsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBkb0NvbXBsZXRlKGl0ZW1Tb3VyY2UsIGNvbXBsZXRlKVxyXG4gICAgICAgICAgfSwgaXRlbVNvdXJjZS5pZ25vcmVFcnJvcnMpO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICBkb0NvbXBsZXRlKGl0ZW1Tb3VyY2UsIGNvbXBsZXRlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBkb0NvbXBsZXRlKGl0ZW1Tb3VyY2UsIGNvbXBsZXRlKSB7XHJcbiAgICAgIGlmKHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpICYmIFxyXG4gICAgICBkbnREYXRhLmlzTG9hZGVkKGl0ZW1Tb3VyY2UubWFpbkRudCkgJiYgXHJcbiAgICAgICghKCdwb3RlbnRpYWxEbnQnIGluIGl0ZW1Tb3VyY2UpIHx8IGRudERhdGEuaXNMb2FkZWQoaXRlbVNvdXJjZS5wb3RlbnRpYWxEbnQpIHx8IGRudERhdGEuaGFzRmFpbGVkKGl0ZW1Tb3VyY2UucG90ZW50aWFsRG50KSkgJiZcclxuICAgICAgKCEoJ3BvdGVudGlhbERudEV4JyBpbiBpdGVtU291cmNlKSB8fCBkbnREYXRhLmlzTG9hZGVkKGl0ZW1Tb3VyY2UucG90ZW50aWFsRG50RXgpIHx8IGRudERhdGEuaGFzRmFpbGVkKGl0ZW1Tb3VyY2UucG90ZW50aWFsRG50RXgpKSAmJlxyXG4gICAgICAoISgnZ2VtRG50JyBpbiBpdGVtU291cmNlKSB8fCBkbnREYXRhLmlzTG9hZGVkKGl0ZW1Tb3VyY2UuZ2VtRG50KSB8fCBkbnREYXRhLmhhc0ZhaWxlZChpdGVtU291cmNlLmdlbURudCkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgaXRlbVNvdXJjZS5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ2pvYnMnLCBbJ2RudERhdGEnLCAndHJhbnNsYXRpb25zJywgJ2l0ZW1Db2x1bW5zVG9Mb2FkJywgam9ic10pO1xyXG5mdW5jdGlvbiBqb2JzKGRudERhdGEsIHRyYW5zbGF0aW9ucywgaXRlbUNvbHVtbnNUb0xvYWQpIHtcclxuICBcclxuICB2YXIgZmlsZU5hbWUgPSdqb2J0YWJsZS5sempzb24nO1xyXG4gIHZhciBjb2xzVG9Mb2FkID0gaXRlbUNvbHVtbnNUb0xvYWQuam9ic0RudDtcclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgZmlsZU5hbWUgOiBmaWxlTmFtZSxcclxuICAgIGFsbEpvYnMgOiBudWxsLFxyXG4gICAgXHJcbiAgICBpc0xvYWRlZCA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gZG50RGF0YS5pc0xvYWRlZChmaWxlTmFtZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBoYXNTdGFydGVkTG9hZGluZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBkbnREYXRhLmhhc1N0YXJ0ZWRMb2FkaW5nKGZpbGVOYW1lKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGluaXQgOiBmdW5jdGlvbihwcm9ncmVzcywgY29tcGxldGUpIHtcclxuICAgICAgZG50RGF0YS5pbml0KGZpbGVOYW1lLCBjb2xzVG9Mb2FkLCBwcm9ncmVzcywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgcmVzZXQgOiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5hbGxKb2JzID0gbnVsbDtcclxuICAgICAgZG50RGF0YS5yZXNldChmaWxlTmFtZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRGaW5hbEpvYnMgOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBqb2JzID0gW107XHJcbiAgICAgIHZhciBhbGxqb2JzID0gdGhpcy5nZXRBbGxKb2JzKCk7XHJcbiAgICAgIGlmKGFsbGpvYnMpIHtcclxuICAgICAgICB2YXIgbnVtUm93cyA9IGFsbGpvYnMubGVuZ3RoO1xyXG4gICAgICAgIGZvcih2YXIgcj0wO3I8bnVtUm93czsrK3IpIHtcclxuICAgICAgICAgIGlmKGFsbGpvYnNbcl0uZC5Kb2JOdW1iZXIgPT0gMiAmJiBhbGxqb2JzW3JdLmQuSm9iSWNvbiA+IDApIHtcclxuICAgICAgICAgICAgam9icy5wdXNoKGFsbGpvYnNbcl0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGpvYnM7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRCYXNlSm9icyA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHJldFZhbD1bXTtcclxuICAgICAgdmFyIGJhc2VKb2JzID0ge307XHJcblxyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmdldEZpbmFsSm9icygpLCBmdW5jdGlvbihqb2IsIGtleSkge1xyXG4gICAgICAgIGJhc2VKb2JzW3NlbGYuZ2V0QmFzZUpvYk5hbWUoam9iKV0gPSBqb2I7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGJhc2VKb2JzLCBmdW5jdGlvbihqb2IsIGpvYk5hbWUpIHtcclxuICAgICAgICByZXRWYWwucHVzaChqb2JOYW1lKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0QWxsSm9icyA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYodGhpcy5hbGxKb2JzID09IG51bGwgJiYgdGhpcy5pc0xvYWRlZCgpICYmIHRyYW5zbGF0aW9ucy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgICAgdmFyIGpvYnMgPSBbXTtcclxuICAgICAgICB2YXIgZGF0YSA9IGRudERhdGEuZ2V0RGF0YShmaWxlTmFtZSk7XHJcbiAgICAgICAgdmFyIG51bVJvd3MgPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICBmb3IodmFyIHI9MDtyPG51bVJvd3M7KytyKSB7XHJcbiAgICAgICAgICBqb2JzW2pvYnMubGVuZ3RoXSA9IHRoaXMuY3JlYXRlSm9iKGRhdGFbcl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmFsbEpvYnMgPSBqb2JzO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLmFsbEpvYnM7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRCeUlkOiBmdW5jdGlvbihpZCkge1xyXG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0QWxsSm9icygpO1xyXG4gICAgICBpZihkYXRhKSB7XHJcbiAgICAgICAgdmFyIG51bVJvd3MgPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICBmb3IodmFyIHI9MDtyPG51bVJvd3M7KytyKSB7XHJcbiAgICAgICAgICBpZihkYXRhW3JdLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhW3JdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgY3JlYXRlSm9iIDogZnVuY3Rpb24oZCkge1xyXG4gICAgICB2YXIgdCA9IHRoaXM7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBkIDogZCxcclxuICAgICAgICAgIGlkIDogZC5pZCxcclxuICAgICAgICAgIG5hbWUgOiB0cmFuc2xhdGlvbnMudHJhbnNsYXRlKGQuSm9iTmFtZSksXHJcbiAgICAgICAgICBpc0NsYXNzSm9iIDogZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5pc0NsYXNzSm9iKGQsIGMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBpc0NsYXNzSm9iIDogZnVuY3Rpb24gKGQsIGMpIHtcclxuICAgICAgaWYoYyA9PSAwKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgaWYoZC5pZCA9PSBjKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBwYXJlbnRKb2IgPSBkLlBhcmVudEpvYjtcclxuICAgICAgXHJcbiAgICAgIGlmKCFwYXJlbnRKb2IpIHJldHVybiBmYWxzZTtcclxuICAgICAgaWYocGFyZW50Sm9iID09IGMpIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgdmFyIHBhcmVudEpvYkRhdGEgPSB0aGlzLmdldEJ5SWQocGFyZW50Sm9iKTtcclxuICAgICAgaWYocGFyZW50Sm9iRGF0YSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQ2xhc3NKb2IocGFyZW50Sm9iRGF0YS5kLCBjKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0QmFzZUpvYk5hbWUgOiBmdW5jdGlvbihqb2IpIHtcclxuICAgICAgaWYodGhpcy5pc0xvYWRlZCgpKSB7XHJcbiAgICAgICAgdmFyIGFsbGpvYnMgPSB0aGlzLmdldEFsbEpvYnMoKTtcclxuICAgICAgICBpZihhbGxqb2JzKSB7XHJcbiAgICAgICAgICB2YXIgbnVtUm93cyA9IGFsbGpvYnMubGVuZ3RoO1xyXG4gICAgICAgICAgZm9yKHZhciByPTA7cjxudW1Sb3dzOysrcikge1xyXG4gICAgICAgICAgICBpZihhbGxqb2JzW3JdLmlkID09IChqb2IuZC5CYXNlQ2xhc3MrMSkgJiYgYWxsam9ic1tyXS5kLkVuZ2xpc2hOYW1lKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFsbGpvYnNbcl0uZC5FbmdsaXNoTmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgnZG5zaW0nKS5mYWN0b3J5KCdvbmxpbmVTZXJ2aWNlJywgWyckd2luZG93JywnJHEnLCdoQ29kZVZhbHVlcycsb25saW5lU2VydmljZV0pO1xyXG5cclxuZnVuY3Rpb24gb25saW5lU2VydmljZSgkd2luZG93LCAkcSwgaENvZGVWYWx1ZXMpIHtcclxuICAvLyBjb25zb2xlLmxvZygnc2V0dXAgb25saW5lIHNlcnZpY2UnKTtcclxuICBcclxuICB2YXIgc2VydmljZSA9IHtcclxuICAgIGxvZ2luOiBsb2dpbixcclxuICAgIGdldFVzZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyO1xyXG4gICAgfSxcclxuICAgIHNpZ25PdXQ6IHNpZ25PdXQsXHJcbiAgICBkZWxldGVBY2NvdW50OiBkZWxldGVBY2NvdW50LFxyXG4gICAgXHJcbiAgICBnZXRVc2VyQnVpbGRzOiBnZXRVc2VyQnVpbGRzLFxyXG4gICAgZGVsZXRlQnVpbGQ6IGRlbGV0ZUJ1aWxkLFxyXG4gICAgc2F2ZUJ1aWxkOiBzYXZlQnVpbGQsXHJcbiAgICBnZXRCdWlsZDogZ2V0QnVpbGQsXHJcbiAgICBnZXRDbGFzc0J1aWxkczogZ2V0Q2xhc3NCdWlsZHMsXHJcbiAgICBcclxuICAgIGdldFByb2ZpbGU6IGdldFByb2ZpbGUsXHJcbiAgICBzYXZlUHJvZmlsZTogc2F2ZVByb2ZpbGUsXHJcbiAgICBcclxuICAgIHN0cmlwQnVpbGROYW1lOiBzdHJpcEJ1aWxkTmFtZVxyXG4gIH07XHJcbiAgXHJcbiAgaW5pdCgpO1xyXG4gIFxyXG4gIHJldHVybiBzZXJ2aWNlO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnaW5pdCcpO1xyXG4gICAgZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCh7XHJcbiAgICAgIGFwaUtleTogJ0FJemFTeUMtTWNrZ2hvMXhBSTJTUXpzS25wc3IyT2JES09oZFNyRScsXHJcbiAgICAgIGF1dGhEb21haW46ICdkbmdlYXJzaW0uZmlyZWJhc2VhcHAuY29tJyxcclxuICAgICAgZGF0YWJhc2VVUkw6ICdodHRwczovL2RuZ2VhcnNpbS5maXJlYmFzZWlvLmNvbScsXHJcbiAgICAgIHN0b3JhZ2VCdWNrZXQ6ICdkbmdlYXJzaW0uYXBwc3BvdC5jb20nLFxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGxvZ2luKCkge1xyXG4gICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICB2YXIgYXV0aCA9IGZpcmViYXNlLmF1dGgoKTtcclxuICAgICAgICBcclxuICAgICAgYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZWQoZnVuY3Rpb24odXNlcikge1xyXG4gICAgICAgIGlmKHVzZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JlZGlyZWN0aW5nJyk7XHJcbiAgICAgICAgICAkd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnbG9naW4uaHRtbCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ2xvZ2dlZCBpbicpO1xyXG4gICAgICAgICAgcmVzb2x2ZSh1c2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFByb2ZpbGUodWlkKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0IHByb2ZpbGUnKTtcclxuICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ3Byb2ZpbGUvJyArIHVpZCkub25jZSgndmFsdWUnLCBmdW5jdGlvbihzdG9yZWRQcm9maWxlKSB7XHJcbiAgICAgICAgaWYoc3RvcmVkUHJvZmlsZSkge1xyXG4gICAgICAgICAgcmVzb2x2ZShzdG9yZWRQcm9maWxlLnZhbCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldEJ1aWxkKHVpZCwgYnVpbGROYW1lKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0IGJ1aWxkJyk7XHJcbiAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdidWlsZHMvJyArIHVpZCArICcvJyArIHN0cmlwQnVpbGROYW1lKGJ1aWxkTmFtZSkpLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oc3RvcmVkUHJvZmlsZSkge1xyXG4gICAgICAgIGlmKHN0b3JlZFByb2ZpbGUpIHtcclxuICAgICAgICAgIHJlc29sdmUoZGVjb21wcmVzc0J1aWxkKHN0b3JlZFByb2ZpbGUudmFsKCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNhdmVQcm9maWxlKHByb2ZpbGUpIHtcclxuICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgdmFyIHVzZXIgPSBzZXJ2aWNlLmdldFVzZXIoKTtcclxuICAgICAgaWYodXNlcikge1xyXG4gICAgICAgIHByb2ZpbGUgPSBhbmd1bGFyLmNvcHkocHJvZmlsZSk7XHJcbiAgICAgICAgZGVsZXRlTnVsbFByb3BlcnRpZXMocHJvZmlsZSwgdHJ1ZSk7XHJcbiAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ3Byb2ZpbGUvJyArIHVzZXIudWlkKS5zZXQocHJvZmlsZSkudGhlbihyZXNvbHZlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldFVzZXJCdWlsZHModWlkKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZ2V0IGJ1aWxkcycpO1xyXG4gICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygnZ2V0dGluZyBidWlsZHMnKTtcclxuICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2J1aWxkcy8nICsgdWlkKS5vbmNlKCd2YWx1ZScsIGZ1bmN0aW9uKHN0b3JlZEJ1aWxkcykge1xyXG4gICAgICAgIGlmKHN0b3JlZEJ1aWxkcykge1xyXG4gICAgICAgICAgdmFyIHJldFZhbCA9IHt9O1xyXG4gICAgICAgICAgdmFyIHZhbCA9IHN0b3JlZEJ1aWxkcy52YWwoKTtcclxuICAgICAgICAgIGZvcih2YXIgYnVpbGROYW1lIGluIHZhbCkge1xyXG4gICAgICAgICAgICByZXRWYWxbYnVpbGROYW1lXSA9IGRlY29tcHJlc3NCdWlsZCh2YWxbYnVpbGROYW1lXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlKHJldFZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZSh7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBnZXRDbGFzc0J1aWxkcyhqb2IpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdnZXQgY2xhc3MgYnVpbGRzJyk7XHJcbiAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdnZXR0aW5nIGJ1aWxkcycsIGpvYi5pZCk7XHJcbiAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdqb2ItYnVpbGRzLycgKyBqb2IuaWQpLm9uY2UoJ3ZhbHVlJywgZnVuY3Rpb24oam9iQnVpbGRzKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29rJyk7XHJcbiAgICAgICAgaWYoam9iQnVpbGRzKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGpvYkJ1aWxkcy52YWwoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZSh7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICBmdW5jdGlvbiBjb21wcmVzc0J1aWxkKGJ1aWxkKSB7XHJcbiAgICBcclxuICAgIGlmKGJ1aWxkLml0ZW1zKSB7XHJcbiAgICAgIF8uZWFjaChidWlsZC5pdGVtcywgZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIGRlbGV0ZSBpdGVtLmZ1bGxTdGF0cztcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBzdHJpbmdpZmllZERhdGEgPSBKU09OLnN0cmluZ2lmeShidWlsZCk7XHJcbiAgICByZXR1cm4gTFpTdHJpbmcuY29tcHJlc3NUb1VURjE2KHN0cmluZ2lmaWVkRGF0YSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGRlY29tcHJlc3NCdWlsZChjb21wcmVzc2VkQnVpbGQpIHtcclxuICAgIHZhciBzdHJpbmdpZmllZERhdGEgPSBMWlN0cmluZy5kZWNvbXByZXNzRnJvbVVURjE2KGNvbXByZXNzZWRCdWlsZCk7XHJcbiAgICB2YXIgYnVpbGQgPSBKU09OLnBhcnNlKHN0cmluZ2lmaWVkRGF0YSk7XHJcbiAgICBcclxuICAgIGlmKGJ1aWxkLml0ZW1zKSB7XHJcbiAgICAgIF8uZWFjaChidWlsZC5pdGVtcywgZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIGl0ZW0uZnVsbFN0YXRzID0gaXRlbS5zdGF0cztcclxuICAgICAgICBcclxuICAgICAgICBpZihpdGVtLmVuY2hhbnRtZW50U3RhdHMgJiYgaXRlbS5lbmNoYW50bWVudFN0YXRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgaXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKGl0ZW0uZW5jaGFudG1lbnRTdGF0cywgaXRlbS5mdWxsU3RhdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihpdGVtLnNwYXJrU3RhdHMgJiYgaXRlbS5zcGFya1N0YXRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgaXRlbS5mdWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKGl0ZW0uc3BhcmtTdGF0cywgaXRlbS5mdWxsU3RhdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBidWlsZDtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2F2ZUJ1aWxkKGJ1aWxkTmFtZSwgYnVpbGQpIHtcclxuICAgIHZhciB1c2VyID0gc2VydmljZS5nZXRVc2VyKCk7XHJcbiAgICB2YXIgYWN0aW9ucyA9IFtdO1xyXG4gICAgaWYodXNlcikge1xyXG4gICAgICBidWlsZCA9IGFuZ3VsYXIuY29weShidWlsZCk7XHJcbiAgICAgIGRlbGV0ZU51bGxQcm9wZXJ0aWVzKGJ1aWxkLCB0cnVlKTtcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3NhdmluZycsIGJ1aWxkKTtcclxuICAgICAgYWN0aW9ucy5wdXNoKFxyXG4gICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdidWlsZHMvJyArIHVzZXIudWlkICsgJy8nICsgc3RyaXBCdWlsZE5hbWUoYnVpbGROYW1lKSkuc2V0KGNvbXByZXNzQnVpbGQoYnVpbGQpKVxyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgaWYoYnVpbGQuam9iICYmIGJ1aWxkLmpvYi5pZCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzYXZpbmcgYnVpbGQnKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgaWYoYnVpbGQucGxheWVyTGV2ZWwpIHtcclxuICAgICAgICAgIGRhdGEubGV2ID0gYnVpbGQucGxheWVyTGV2ZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGJ1aWxkLnJlZ2lvbikge1xyXG4gICAgICAgICAgZGF0YS5yZWdpb24gPSBidWlsZC5yZWdpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGJ1aWxkLmd1aWxkKSB7XHJcbiAgICAgICAgICBkYXRhLmd1aWxkID0gYnVpbGQuZ3VpbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGJ1aWxkLmFib3V0KSB7XHJcbiAgICAgICAgICBkYXRhLmFib3V0ID0gYnVpbGQuYWJvdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGRlbGV0ZU51bGxQcm9wZXJ0aWVzKGRhdGEsIHRydWUpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgYWN0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoJ2pvYi1idWlsZHMvJyArIGJ1aWxkLmpvYi5pZCArICcvJyArIHVzZXIudWlkICsgJy8nICsgc3RyaXBCdWlsZE5hbWUoYnVpbGROYW1lKSkuc2V0KGRhdGEpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICRxLmFsbChhY3Rpb25zKTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZGVsZXRlTnVsbFByb3BlcnRpZXModGVzdCwgcmVjdXJzZSkge1xyXG4gICAgZm9yICh2YXIgaSBpbiB0ZXN0KSB7XHJcbiAgICAgICAgaWYgKHRlc3RbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBkZWxldGUgdGVzdFtpXTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlY3Vyc2UgJiYgdHlwZW9mIHRlc3RbaV0gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZU51bGxQcm9wZXJ0aWVzKHRlc3RbaV0sIHJlY3Vyc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2lnbk91dCgpIHtcclxuICAgIHZhciBhdXRoID0gZmlyZWJhc2UuYXV0aCgpO1xyXG4gICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBhdXRoLnNpZ25PdXQoKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZGVsZXRlQWNjb3VudChidWlsZHMpIHtcclxuICAgIHZhciBhdXRoID0gZmlyZWJhc2UuYXV0aCgpO1xyXG4gICAgdmFyIHVzZXIgPSBzZXJ2aWNlLmdldFVzZXIoKTtcclxuICAgIFxyXG4gICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBcclxuICAgICAgdmFyIHBMaXN0ID0gW1xyXG4gICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdidWlsZHMvJyArIHVzZXIudWlkKS5yZW1vdmUoKSxcclxuICAgICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigncHJvZmlsZS8nICsgdXNlci51aWQpLnJlbW92ZSgpLFxyXG4gICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdwcml2YXRlLycgKyB1c2VyLnVpZCkucmVtb3ZlKCldO1xyXG4gICAgICAgIFxyXG4gICAgICB2YXIgam9iSWRzID0gW107XHJcbiAgICAgIGZvcih2YXIgYnVpbGROYW1lIGluIGJ1aWxkcykge1xyXG4gICAgICAgIGlmKGJ1aWxkc1tidWlsZE5hbWVdLmpvYikge1xyXG4gICAgICAgICAgam9iSWRzLnB1c2goYnVpbGRzW2J1aWxkTmFtZV0uam9iLmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGpvYklkcyA9IF8udW5pcShqb2JJZHMpO1xyXG4gICAgICBfLmVhY2goam9iSWRzLCBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgIHBMaXN0LnB1c2goXHJcbiAgICAgICAgICBmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZignam9iLWJ1aWxkcy8nICsgaWQgKyAnLycgKyB1c2VyLnVpZCkucmVtb3ZlKClcclxuICAgICAgICApXHJcbiAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAkcS5hbGwocExpc3QpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2RlbGV0ZWQgZGF0YScpO1xyXG4gICAgICAgIHVzZXIuZGVsZXRlKCkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdkZWxldGVkIHVzZXInKTtcclxuICAgICAgICAgIGF1dGguc2lnbk91dCgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzaWduZWQgb3V0Jyk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGRlbGV0ZUJ1aWxkKGJ1aWxkTmFtZSwgYnVpbGQpIHtcclxuICAgIFxyXG4gICAgdmFyIHBMaXN0ID0gW107XHJcbiAgICB2YXIgdXNlciA9IHNlcnZpY2UuZ2V0VXNlcigpO1xyXG4gICAgaWYodXNlcikge1xyXG4gICAgICBwTGlzdC5wdXNoKFxyXG4gICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdidWlsZHMvJyArIHVzZXIudWlkICsgJy8nICsgc3RyaXBCdWlsZE5hbWUoYnVpbGROYW1lKSkucmVtb3ZlKCkpO1xyXG4gICAgICBcclxuICAgICAgaWYoYnVpbGQuam9iKSB7XHJcbiAgICAgICAgcExpc3QucHVzaChcclxuICAgICAgICAgIGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCdqb2ItYnVpbGRzLycgKyBidWlsZC5qb2IuaWQgKyAnLycgKyB1c2VyLnVpZCArICcvJyArIHN0cmlwQnVpbGROYW1lKGJ1aWxkTmFtZSkpLnJlbW92ZSgpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gJHEuYWxsKHBMaXN0KTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc3RyaXBCdWlsZE5hbWUoYnVpbGROYW1lKSB7XHJcbiAgICByZXR1cm4gYnVpbGROYW1lLnJlcGxhY2UoL1suJFxcW1xcXSNcXC9dL2csICcnKTtcclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgncXVpY2tBZGRIZWxwZXInLCBxdWlja0FkZEhlbHBlcik7XHJcbmZ1bmN0aW9uIHF1aWNrQWRkSGVscGVyKGRudERhdGEsIHRyYW5zbGF0aW9ucywgaXRlbUNvbHVtbnNUb0xvYWQsIGl0ZW1DYXRlZ29yeSxpdGVtRmFjdG9yeSxqb2JzLGhDb2RlVmFsdWVzKSB7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBnZXRJdGVtOiBnZXRJdGVtLFxyXG4gICAgZmluZERhdGE6IGZpbmREYXRhXHJcbiAgfTtcclxuICBcclxuICBmdW5jdGlvbiBnZXRJdGVtKGRhdGFzKSB7XHJcbiAgICB2YXIgaXRlbSA9IG51bGw7XHJcbiAgICBmb3IodmFyIGQ9MDtkPGRhdGFzLmxlbmd0aDsrK2QpIHtcclxuICAgICAgaWYoZGF0YXNbZF0uZGVmLmlzSXRlbVN0ZXApIHtcclxuICAgICAgICBpdGVtID0gZGF0YXNbZF0udmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgZm9yKHZhciBkPTA7ZDxkYXRhcy5sZW5ndGg7KytkKSB7XHJcbiAgICAgIGlmKGRhdGFzW2RdLmRlZi5hbHRlckl0ZW0pIHtcclxuICAgICAgICBkYXRhc1tkXS5kZWYuYWx0ZXJJdGVtKGRhdGFzW2RdLnZhbHVlLmlkLCBpdGVtKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcywgbWF4SXRlbXMpIHtcclxuICAgIGlmKCFtYXhJdGVtcykge1xyXG4gICAgICBtYXhJdGVtcyA9IDk5OTk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBhbGxJdGVtcyA9IGl0ZW1DYXRlZ29yeS5nZXRJdGVtcyhjYXRlZ29yeS5uYW1lKTtcclxuICAgIHZhciByZXRWYWwgPSBbXTtcclxuICAgIHZhciBudW1JdGVtcyA9IGFsbEl0ZW1zLmxlbmd0aDtcclxuXHJcbiAgICB2YXIgc29ydEZ1bmMgPSBudWxsO1xyXG4gICAgdmFyIHNvcnRJZCA9IG51bGw7XHJcbiAgICBcclxuICAgIGZvcih2YXIgaT0wO2k8bnVtSXRlbXM7KytpKSB7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgaXRlbSA9IGFsbEl0ZW1zW2ldO1xyXG4gICAgICBcclxuICAgICAgaWYoIWNhdGVnb3J5LmhpZGVKb2IgJiYgYnVpbGQuam9iLmlkID4gMCAmJiBpdGVtLm5lZWRKb2JDbGFzcyA+IDAgJiYgIWpvYnMuaXNDbGFzc0pvYihidWlsZC5qb2IuZCwgaXRlbS5uZWVkSm9iQ2xhc3MpKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgaXRlbUZhY3RvcnkuaW5pdEl0ZW0oaXRlbSk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYWRkSXRlbSA9IHRydWU7XHJcbiAgICAgIGZvcih2YXIgZD0wO2Q8ZGF0YXMubGVuZ3RoOysrZCkge1xyXG4gICAgICAgIGlmKCFkYXRhc1tkXS5kZWYubWF0Y2hlc0l0ZW0gfHwgZGF0YXNbZF0uZGVmLm1hdGNoZXNJdGVtKGRhdGFzW2RdLnZhbHVlLmlkLCBpdGVtKSkge1xyXG4gICAgICAgICAgaWYoJ3NvcnRGdW5jJyBpbiBkYXRhc1tkXS5kZWYpIHtcclxuICAgICAgICAgICAgc29ydEZ1bmMgPSBkYXRhc1tkXS5kZWYuc29ydEZ1bmM7XHJcbiAgICAgICAgICAgIHNvcnRJZCA9IGRhdGFzW2RdLnZhbHVlLmlkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGFkZEl0ZW0gPSBmYWxzZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYoYWRkSXRlbSkge1xyXG4gICAgICAgIHJldFZhbC5wdXNoKGl0ZW0pO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihyZXRWYWwubGVuZ3RoID49IG1heEl0ZW1zKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXRWYWwgPSBmaWx0ZXJEdXBsaWNhdGVzKHJldFZhbCk7XHJcblxyXG4gICAgcmV0VmFsID0gcmV0VmFsLnNvcnQoZnVuY3Rpb24oaXRlbTEsIGl0ZW0yKSB7XHJcbiAgICAgIGlmKHNvcnRGdW5jKSB7XHJcbiAgICAgICAgcmV0dXJuIHNvcnRGdW5jKHNvcnRJZCwgaXRlbTEsIGl0ZW0yKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gaXRlbTEubmFtZS5sb2NhbGVDb21wYXJlKGl0ZW0yLm5hbWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHJldFZhbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZpbHRlckR1cGxpY2F0ZXMoaXRlbXMpIHtcclxuICAgIHZhciByZXRWYWwgPSBbXTtcclxuICAgIGZvcih2YXIgaT0wO2k8aXRlbXMubGVuZ3RoOysraSkge1xyXG4gICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgIGZvcih2YXIgaj0wO2o8aTsrK2opIHtcclxuICAgICAgICAgICAgaWYoYXJlU2FtZUl0ZW0oaXRlbXNbaV0sIGl0ZW1zW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKCFmb3VuZCkge1xyXG4gICAgICAgICAgICByZXRWYWwucHVzaChpdGVtc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXRWYWw7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcmVTYW1lSXRlbShpdGVtMSwgaXRlbTIpIHtcclxuICAgICAgaWYoaXRlbTEubmFtZSAhPSBpdGVtMi5uYW1lIHx8IGl0ZW0xLnN0YXRzLmxlbmd0aCAhPSBpdGVtMi5zdGF0cy5sZW5ndGggfHwgaXRlbTEucmFuayAhPSBpdGVtMi5yYW5rIHx8IGl0ZW0xLmxldmVsTGltaXQgIT0gaXRlbTEubGV2ZWxMaW1pdCkge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gXy5pc0VxdWFsKGl0ZW0xLnN0YXRzLCBpdGVtMi5zdGF0cyk7XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ3F1aWNrQWRkJywgcXVpY2tBZGQpO1xyXG5mdW5jdGlvbiBxdWlja0FkZChkbnREYXRhLCB0cmFuc2xhdGlvbnMsIGl0ZW1Db2x1bW5zVG9Mb2FkLCBpdGVtQ2F0ZWdvcnksaXRlbUZhY3Rvcnksam9icyxoQ29kZVZhbHVlcywgcXVpY2tBZGRTdGVwcywgcXVpY2tBZGRIZWxwZXIpIHtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNhdGVnb3J5U3RlcHM6IHtcclxuICAgICAgdGl0bGVzOiBbJ3RpdGxlU3RlcCddLFxyXG4gICAgICB3ZWFwb25zOiBbJ2V4Y2hhbmdlU3RlcCcsJ3NpeHR5TGV2ZWxTdGVwJywnZXF1aXBSYW5rU3RlcCcsJ2l0ZW1OYW1lU3RlcCcsJ2hhc1N0YXRTdGVwJywnaXRlbVN0ZXAnLCdlbmhhbmNlU3RlcCddLFxyXG4gICAgICBhcm1vdXI6IFsnZXhjaGFuZ2VTdGVwJywnc2l4dHlMZXZlbFN0ZXAnLCdlcXVpcFJhbmtTdGVwJywnaXRlbU5hbWVTdGVwJywnaGFzU3RhdFN0ZXAnLCdpdGVtU3RlcCcsJ2VuaGFuY2VTdGVwJ10sXHJcbiAgICAgIGFjY2Vzc29yaWVzOiBbJ2FjY0V4Y2hhbmdlU3RlcCcsJ2FsbExldmVsU3RlcCcsJ2VxdWlwUmFua1N0ZXAnLCdpdGVtTmFtZVN0ZXAnLCdoYXNTdGF0U3RlcCcsJ2l0ZW1TdGVwJ10sXHJcbiAgICAgIHRlY2hzOiBbJ2V4Y2hhbmdlU3RlcCcsJ2FsbExldmVsU3RlcCcsJ3RlY2hSYW5rU3RlcCcsJ3RlY2hTa2lsbFN0ZXAnLCdpdGVtTmFtZVN0ZXAnLCdoYXNTdGF0U3RlcCcsJ2l0ZW1TdGVwJ10sXHJcbiAgICAgICdvZmZlbnNpdmUgZ2Vtcyc6IFsnc2l4dHlMZXZlbFN0ZXAnLCdnZW1SYW5rU3RlcCcsJ2l0ZW1OYW1lU3RlcCcsJ251bVN0YXRzU3RlcCcsJ2hhc1N0YXRTdGVwJywnaXRlbVN0ZXAnLCdlbmhhbmNlU3RlcCddLFxyXG4gICAgICAnaW5jcmVhc2luZyBnZW1zJzogWydzaXh0eUxldmVsU3RlcCcsJ2dlbVJhbmtTdGVwJywnaXRlbU5hbWVTdGVwJywnbnVtU3RhdHNTdGVwJywnaGFzU3RhdFN0ZXAnLCdpdGVtU3RlcCcsJ2VuaGFuY2VTdGVwJ10sXHJcbiAgICAgICdlbmhhbmNlbWVudCBwbGF0ZXMnOiBbJ2FsbExldmVsU3RlcCcsJ290aGVyUmFua1N0ZXAnLCdkaXN0aW5jdEl0ZW1OYW1lU3RlcCcsJ251bVN0YXRzU3RlcCcsJ2hhc1N0YXRTdGVwJywnaXRlbVN0ZXAnXSxcclxuICAgICAgJ2V4cGVkaXRpb24gcGxhdGVzJzogWydzaXh0eUxldmVsU3RlcCcsJ2Rpc3RpbmN0SXRlbU5hbWVTdGVwJywnbnVtU3RhdHNTdGVwJywnaGlnaFN0YXRTdGVwJywnaGFzU3RhdFN0ZXAnLCdpdGVtU3RlcCddLFxyXG4gICAgICB0YWxpc21hbjogWydzaXh0eUxldmVsU3RlcCcsJ3RhbGlzbWFuUmFua1N0ZXAnLCdkaXN0aW5jdEl0ZW1OYW1lU3RlcCcsJ251bVN0YXRzU3RlcCcsJ2hhc1N0YXRTdGVwJywnaXRlbVN0ZXAnLCdlbmhhbmNlVGFsaXNtYW5TdGVwJ10sXHJcbiAgICAgIGNvc3R1bWU6IFsnZXhjaGFuZ2VTdGVwJywnb3RoZXJSYW5rU3RlcCcsJ2l0ZW1OYW1lU3RlcCcsJ2l0ZW1TdGVwJ10sXHJcbiAgICAgIGltcHJpbnQ6IFsnaW1wcmludFJhbmtTdGVwJywnaXRlbU5hbWVTdGVwJywnaGlnaFN0YXRTdGVwJywnaXRlbVN0ZXAnXSxcclxuICAgICAgY2FzaDogWydhY2NFeGNoYW5nZVN0ZXAnLCdjYXNoUmFua1N0ZXAnLCdpdGVtTmFtZVN0ZXAnLCdpdGVtU3RlcCddLFxyXG4gICAgICBjdXN0b206IFsnY3VzdG9tU3RlcCddLFxyXG4gICAgfSxcclxuICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICBpZihjYXRlZ29yeS5uYW1lIGluIHRoaXMuY2F0ZWdvcnlTdGVwcykge1xyXG4gICAgICAgIHZhciBzdGVwTmFtZSA9IHRoaXMuZ2V0U3RlcE5hbWUoY2F0ZWdvcnksIGRhdGFzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFyIHN0ZXBEZWYgPSBxdWlja0FkZFN0ZXBzW3N0ZXBOYW1lXTtcclxuICAgICAgICB2YXIgYWxsT3B0aW9ucyA9IHN0ZXBEZWYuZ2V0T3B0aW9ucyhjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKTtcclxuICAgICAgICBpZihzdGVwRGVmLmlzSXRlbVN0ZXApIHtcclxuICAgICAgICAgIHJldHVybiBhbGxPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGlmKHN0ZXBEZWYubWluT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgIHZhciB1bmZpbHRlcmVkSXRlbXMgPSBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzLCA1MCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIG5ld09wdGlvbnMgPSBfLmZpbHRlcihhbGxPcHRpb25zLCBmdW5jdGlvbihvcHRpb24pIHtcclxuICAgICAgICAgICAgdmFyIHRlbXBEYXRhcyA9IGRhdGFzLmNvbmNhdChbXHJcbiAgICAgICAgICAgICAgdC5jcmVhdGVEYXRhKG9wdGlvbiwgY2F0ZWdvcnksIGRhdGFzLmxlbmd0aClcclxuICAgICAgICAgICAgXSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaXRlbXM7XHJcbiAgICAgICAgICAgIGlmKHN0ZXBEZWYubWluT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgIGlmKGFsbE9wdGlvbnNbMF0gPT0gb3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCB0ZW1wRGF0YXMsIDUwKTtcclxuICAgICAgICAgICAgICBpZihpdGVtcy5sZW5ndGggPiAwICYmIGl0ZW1zLmxlbmd0aCA8IDUwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbXMubGVuZ3RoIDwgdW5maWx0ZXJlZEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgaXRlbXMgPSBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIHRlbXBEYXRhcywgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmKHN0ZXBEZWYubWluT3B0aW9ucyAmJiBuZXdPcHRpb25zLmxlbmd0aCA8IHN0ZXBEZWYubWluT3B0aW9ucykge1xyXG4gICAgICAgICAgICByZXR1cm4gW2FsbE9wdGlvbnNbMF1dO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBuZXdPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYXNPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgIGlmKGNhdGVnb3J5Lm5hbWUgaW4gdGhpcy5jYXRlZ29yeVN0ZXBzKSB7XHJcbiAgICAgICAgdmFyIHN0ZXBOYW1lID0gdGhpcy5nZXRTdGVwTmFtZShjYXRlZ29yeSwgZGF0YXMubGVuZ3RoKTtcclxuICAgICAgICBpZihxdWlja0FkZFN0ZXBzW3N0ZXBOYW1lXS5oYXNPcHRpb25zKSB7XHJcbiAgICAgICAgICByZXR1cm4gcXVpY2tBZGRTdGVwc1tzdGVwTmFtZV0uaGFzT3B0aW9ucyhjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gcXVpY2tBZGRTdGVwc1tzdGVwTmFtZV0uZ2V0T3B0aW9ucyhjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKS5sZW5ndGggPiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpc1ZhbGlkU3RlcE51bWJlcjogZnVuY3Rpb24oY2F0ZWdvcnksIHN0ZXBOdW1iZXIpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY2F0ZWdvcnlTdGVwc1tjYXRlZ29yeS5uYW1lXS5sZW5ndGggPiBzdGVwTnVtYmVyO1xyXG4gICAgfSxcclxuICAgIGNyZWF0ZURhdGE6IGZ1bmN0aW9uKHZhbHVlLCBjYXRlZ29yeSwgc3RlcE51bWJlcikge1xyXG4gICAgICB2YXIgc3RlcE5hbWUgPSB0aGlzLmdldFN0ZXBOYW1lKGNhdGVnb3J5LCBzdGVwTnVtYmVyKTtcclxuICAgICAgdmFyIGRlZiA9IHF1aWNrQWRkU3RlcHNbc3RlcE5hbWVdO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGVwOiBzdGVwTmFtZSxcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgZGVmOiBkZWYsXHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZ2V0SXRlbTogcXVpY2tBZGRIZWxwZXIuZ2V0SXRlbSxcclxuICAgIGdldFN0ZXBOYW1lOiBmdW5jdGlvbihjYXRlZ29yeSwgc3RlcE51bWJlcikge1xyXG4gICAgICByZXR1cm4gdGhpcy5jYXRlZ29yeVN0ZXBzW2NhdGVnb3J5Lm5hbWVdW3N0ZXBOdW1iZXJdO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgncXVpY2tBZGRTdGVwcycsIHF1aWNrQWRkU3RlcHMpO1xyXG5mdW5jdGlvbiBxdWlja0FkZFN0ZXBzKGRudERhdGEsIHRyYW5zbGF0aW9ucywgaXRlbUNvbHVtbnNUb0xvYWQsIGl0ZW1DYXRlZ29yeSxpdGVtRmFjdG9yeSxqb2JzLGhDb2RlVmFsdWVzLCBxdWlja0FkZEhlbHBlcikge1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgICBleGNoYW5nZVN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAndHlwZScsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgZXhjaGFuZ2VzID0gW107XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGZvcih2YXIgZT0wO2U8Y2F0ZWdvcnkubGltaXRFeGNoYW5nZS5sZW5ndGg7KytlKSB7XHJcbiAgICAgICAgICAgIHZhciBleElkID0gY2F0ZWdvcnkubGltaXRFeGNoYW5nZVtlXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBudW1FeGNoYW5nZSA9IDA7XHJcbiAgICAgICAgICAgIGlmKGJ1aWxkLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxidWlsZC5pdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZihidWlsZC5pdGVtc1tpXS5leGNoYW5nZVR5cGUgPT0gZXhJZCkge1xyXG4gICAgICAgICAgICAgICAgICBudW1FeGNoYW5nZSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYobnVtRXhjaGFuZ2UgPj0gY2F0ZWdvcnkubWF4RXhjaGFuZ2UpIHtcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGV4Y2hhbmdlID0gZG50RGF0YS5maW5kKCdleGNoYW5nZS5sempzb24nLCdFeGNoYW5nZVR5cGUnLGV4SWQpO1xyXG4gICAgICAgICAgICB2YXIgZXhOYW1lID0gJyc7XHJcbiAgICAgICAgICAgIGlmKGV4Y2hhbmdlICYmIGV4Y2hhbmdlLmxlbmd0aCA+IDAgJiYgZXhjaGFuZ2VbMF0uTmFtZUlEID4gMCkge1xyXG4gICAgICAgICAgICAgIGV4TmFtZSA9IHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoZXhjaGFuZ2VbMF0uTmFtZUlEKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGV4Y2hhbmdlcy5wdXNoKHtpZDogZXhJZCwgbmFtZTogZXhOYW1lLnRvTG93ZXJDYXNlKCl9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIGV4Y2hhbmdlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0uZXhjaGFuZ2VUeXBlID09IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgYWNjRXhjaGFuZ2VTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3R5cGUnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGV4Y2hhbmdlcyA9IFtdO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBmb3IodmFyIGU9MDtlPGNhdGVnb3J5LmxpbWl0RXhjaGFuZ2UubGVuZ3RoOysrZSkge1xyXG4gICAgICAgICAgICB2YXIgZXhJZCA9IGNhdGVnb3J5LmxpbWl0RXhjaGFuZ2VbZV07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbnVtRXhjaGFuZ2UgPSAwO1xyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDtpPGJ1aWxkLml0ZW1zLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgICAgICBpZihidWlsZC5pdGVtc1tpXSAmJiBidWlsZC5pdGVtc1tpXS5leGNoYW5nZVR5cGUgPT0gZXhJZCkge1xyXG4gICAgICAgICAgICAgICAgbnVtRXhjaGFuZ2UrKztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGV4SWQgPT0gMTAgfHwgZXhJZCA9PSAyNSkge1xyXG4gICAgICAgICAgICAgIGlmKG51bUV4Y2hhbmdlID49IDIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBpZihudW1FeGNoYW5nZSA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBleGNoYW5nZSA9IGRudERhdGEuZmluZCgnZXhjaGFuZ2UubHpqc29uJywnRXhjaGFuZ2VUeXBlJyxleElkKTtcclxuICAgICAgICAgICAgaWYoZXhjaGFuZ2UgJiYgZXhjaGFuZ2UubGVuZ3RoID4gMCAmJiBleGNoYW5nZVswXS5OYW1lSUQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGV4TmFtZSA9IHRyYW5zbGF0aW9ucy50cmFuc2xhdGUoZXhjaGFuZ2VbMF0uTmFtZUlEKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGV4Y2hhbmdlcy5wdXNoKHtpZDogZXhJZCwgbmFtZTogZXhOYW1lLnRvTG93ZXJDYXNlKCl9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gZXhjaGFuZ2VzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5leGNoYW5nZVR5cGUgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBzaXh0eUxldmVsU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdsZXZlbCcsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogOTMsIG5hbWU6ICdsZXZlbCA5MycgfSxcclxuICAgICAgICAgIHsgaWQ6IDkwLCBuYW1lOiAnbGV2ZWwgOTAnIH0sXHJcbiAgICAgICAgICB7IGlkOiA4MCwgbmFtZTogJ2xldmVsIDgwJyB9LFxyXG4gICAgICAgICAgeyBpZDogNzAsIG5hbWU6ICdsZXZlbCA3MCcgfSwgXHJcbiAgICAgICAgICB7IGlkOiA2MCwgbmFtZTogJ2xldmVsIDYwJyB9LCBcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmxldmVsTGltaXQgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBhbGxMZXZlbFN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnbGV2ZWwnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHsgaWQ6IDkzLCBuYW1lOiAnbGV2ZWwgOTMnIH0sXHJcbiAgICAgICAgICB7IGlkOiA5MCwgbmFtZTogJ2xldmVsIDkwJyB9LFxyXG4gICAgICAgICAgeyBpZDogODAsIG5hbWU6ICdsZXZlbCA4MCcgfSxcclxuICAgICAgICAgIHsgaWQ6IDcwLCBuYW1lOiAnbGV2ZWwgNzAnIH0sIFxyXG4gICAgICAgICAgeyBpZDogNjAsIG5hbWU6ICdsZXZlbCA2MCcgfSwgXHJcbiAgICAgICAgICB7IGlkOiA1MCwgbmFtZTogJ2xldmVsIDUwJyB9LCBcclxuICAgICAgICAgIHsgaWQ6IDQwLCBuYW1lOiAnbGV2ZWwgNDAnIH0sIFxyXG4gICAgICAgICAgeyBpZDogMzIsIG5hbWU6ICdsZXZlbCAzMicgfSwgXHJcbiAgICAgICAgICB7IGlkOiAyNCwgbmFtZTogJ2xldmVsIDI0JyB9LCBcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmxldmVsTGltaXQgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBjYXNoUmFua1N0ZXA6IHtcclxuICAgICAgICBuYW1lOiAncmFuaycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogNCwgbmFtZTogJ3VuaXF1ZScgfSxcclxuICAgICAgICAgIHsgaWQ6IDMsIG5hbWU6ICdlcGljJyB9LFxyXG4gICAgICAgICAgeyBpZDogMiwgbmFtZTogJ3JhcmUnIH0sXHJcbiAgICAgICAgICB7IGlkOiAxLCBuYW1lOiAnbWFnaWMnIH0sXHJcbiAgICAgICAgICB7IGlkOiAwLCBuYW1lOiAnbm9ybWFsJyB9LFxyXG4gICAgICAgICAgXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0ucmFuay5pZCA9PSBpZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGltcHJpbnRSYW5rU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdyYW5rJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7IGlkOiA0LCBuYW1lOiAndW5pcXVlJyB9LFxyXG4gICAgICAgICAgeyBpZDogMywgbmFtZTogJ2VwaWMnIH0sXHJcbiAgICAgICAgICB7IGlkOiAyLCBuYW1lOiAncmFyZScgfSxcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLnJhbmsuaWQgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0ZWNoUmFua1N0ZXA6IHtcclxuICAgICAgICBuYW1lOiAncmFuaycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogNCwgbmFtZTogJ3VuaXF1ZScgfSxcclxuICAgICAgICAgIHsgaWQ6IDMsIG5hbWU6ICdlcGljJyB9LFxyXG4gICAgICAgICAgXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0ucmFuay5pZCA9PSBpZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHRhbGlzbWFuUmFua1N0ZXA6IHtcclxuICAgICAgICBuYW1lOiAncmFuaycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogMywgbmFtZTogJ2VwaWMnIH0sXHJcbiAgICAgICAgICB7IGlkOiAyLCBuYW1lOiAncmFyZScgfSxcclxuICAgICAgICAgIHsgaWQ6IDk5OSwgbmFtZTogJ3F1YWxpdHkgaGlnaCBncmFkZScgfSxcclxuICAgICAgICAgIHsgaWQ6IDEsIG5hbWU6ICdtYWdpYycgfSxcclxuICAgICAgICAgIHsgaWQ6IDAsIG5hbWU6ICdub3JtYWwnIH0sXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICBpdGVtRmFjdG9yeS5pbml0SXRlbShpdGVtKTtcclxuICAgICAgICAgIGlmKGl0ZW0ubmFtZSkge1xyXG4gICAgICAgICAgICAvLyB0b2RvOiBjaGFuZ2UgdGhpcyB0byB1c2UgdGhlIG5hbWUgaWRcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gTWF0aC5tYXgoXHJcbiAgICAgICAgICAgICAgaXRlbS5uYW1lLmluZGV4T2YoJ1F1YWxpdHknKSxcclxuICAgICAgICAgICAgICBpdGVtLm5hbWUuaW5kZXhPZignSGlnaCBHcmFkZScpKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYoaWQgPT0gOTk5KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpdGVtLnJhbmsuaWQgPT0gaWQgJiYgaW5kZXggIT0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZ2VtUmFua1N0ZXA6IHtcclxuICAgICAgICBuYW1lOiAncmFuaycsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgeyBpZDogNSwgbmFtZTogJ2xlZ2VuZGFyeScgfSxcclxuICAgICAgICAgIHsgaWQ6IDk5OSwgbmFtZTogJ3F1YWxpdHkgaGlnaCBncmFkZSBlcGljJyB9LFxyXG4gICAgICAgICAgeyBpZDogMywgbmFtZTogJ2VwaWMnIH0sXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICBpdGVtRmFjdG9yeS5pbml0SXRlbShpdGVtKTtcclxuICAgICAgICAgIGlmKGl0ZW0ubmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLm1heChcclxuICAgICAgICAgICAgICBpdGVtLm5hbWUuaW5kZXhPZignUXVhbGl0eScpLFxyXG4gICAgICAgICAgICAgIGl0ZW0ubmFtZS5pbmRleE9mKCdIaWdoIEdyYWRlJykpO1xyXG4gICAgICAgICAgICBpZihpZCA9PSA5OTkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gaXRlbS5yYW5rLmlkID09IDMgJiYgaW5kZXggPj0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gaXRlbS5yYW5rLmlkID09IGlkICYmIGluZGV4IDwgMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgb3RoZXJSYW5rU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdyYW5rJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7IGlkOiAzLCBuYW1lOiAnZXBpYycgfSxcclxuICAgICAgICAgIHsgaWQ6IDIsIG5hbWU6ICdyYXJlJyB9LFxyXG4gICAgICAgICAgeyBpZDogMSwgbmFtZTogJ25vcm1hbCcgfSxcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLnJhbmsuaWQgPT0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBlcXVpcFJhbmtTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3JhbmsnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHsgaWQ6IDUsIG5hbWU6ICdsZWdlbmRhcnknIH0sXHJcbiAgICAgICAgICB7IGlkOiA0LCBuYW1lOiAndW5pcXVlJyB9LFxyXG4gICAgICAgICAgeyBpZDogMywgbmFtZTogJ2VwaWMnIH0sXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5yYW5rLmlkID09IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZW5oYW5jZVRhbGlzbWFuU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdzbG90JyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7IGlkOiAxMDAsIG5hbWU6ICcrMTAwJSBzbG90JyB9LFxyXG4gICAgICAgICAgeyBpZDogNzUsIG5hbWU6ICcrNzUlIHNsb3QnIH0sXHJcbiAgICAgICAgICB7IGlkOiAyNSwgbmFtZTogJysyNSUgc2xvdCcgfSxcclxuICAgICAgICAgIHsgaWQ6IDAsIG5hbWU6ICcrMCUgc2xvdCcgfSxcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhbHRlckl0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICBpdGVtLmVuY2hhbnRtZW50TnVtID0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0aXRsZVN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnc2VsZWN0JyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICB2YXIgYWxsVGl0bGVzID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcywgOTk5OSk7XHJcbiAgICAgICAgICB2YXIgdXNlZnVsVGl0bGVzID0gW107XHJcbiAgICAgICAgICBmb3IodmFyIGk9MDtpPGFsbFRpdGxlcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaChhbGxUaXRsZXNbaV0uaWQpIHtcclxuICAgICAgICAgICAgICBjYXNlIDE5NzU6IC8vIE1hbnRpY29yZSBFeHBlcnRcclxuICAgICAgICAgICAgICBjYXNlIDE5NzM6IC8vIFJldHVybmVkXHJcbiAgICAgICAgICAgICAgY2FzZSAxMDA4OiAvLyBEYXJrIEtuaWdodFxyXG4gICAgICAgICAgICAgIGNhc2UgMjMwOiAvLyBNaXJhY3Vsb3VzXHJcbiAgICAgICAgICAgICAgY2FzZSAyNzk6IC8vIFByb3Zva2luZ1xyXG4gICAgICAgICAgICAgIGNhc2UgMjAzMjogLy8gU2hhcmluZyBHb2RkZXNzJ3MgR3JpZWZcclxuICAgICAgICAgICAgICBjYXNlIDIwMzM6IC8vIEdyaWVmLXN0cmlja2VuXHJcbiAgICAgICAgICAgICAgY2FzZSAxMzEzOiAvLyBKYWthcmQncyBEZW1pc2VcclxuICAgICAgICAgICAgICBjYXNlIDIxODg6IC8vIFRlYXJ5IGV5ZWRcclxuICAgICAgICAgICAgICAvLyBjYXNlIDEyODA6IC8vIERyYWdvbiBUYW1lclxyXG4gICAgICAgICAgICAgIC8vIGNhc2UgMzM5OiAvLyBDb3cgV3JhbmdsZXJcclxuICAgICAgICAgICAgICAgIHVzZWZ1bFRpdGxlcy5wdXNoKGFsbFRpdGxlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gdXNlZnVsVGl0bGVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzT3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBlbmhhbmNlU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdlbmhhbmNlJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZhciBpdGVtID0gcXVpY2tBZGRIZWxwZXIuZ2V0SXRlbShkYXRhcyk7XHJcbiAgICAgICAgICBpZihpdGVtICYmIGl0ZW0uZW5jaGFudG1lbnRJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IGlkOiAxNSwgbmFtZTogJ2VuaGFuY2UgdG8gKzE1JyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAxNCwgbmFtZTogJ2VuaGFuY2UgdG8gKzE0JyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAxMywgbmFtZTogJ2VuaGFuY2UgdG8gKzEzJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAxMiwgbmFtZTogJ2VuaGFuY2UgdG8gKzEyJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAxMSwgbmFtZTogJ2VuaGFuY2UgdG8gKzExJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAxMCwgbmFtZTogJ2VuaGFuY2UgdG8gKzEwJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiA5LCBuYW1lOiAnZW5oYW5jZSB0byArOScgfSxcclxuICAgICAgICAgICAgeyBpZDogOCwgbmFtZTogJ2VuaGFuY2UgdG8gKzgnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6IDcsIG5hbWU6ICdlbmhhbmNlIHRvICs3JyB9LFxyXG4gICAgICAgICAgICB7IGlkOiA2LCBuYW1lOiAnZW5oYW5jZSB0byArNicgfSxcclxuICAgICAgICAgICAgeyBpZDogNSwgbmFtZTogJ2VuaGFuY2UgdG8gKzUnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6IDQsIG5hbWU6ICdlbmhhbmNlIHRvICs0JyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAzLCBuYW1lOiAnZW5oYW5jZSB0byArMycgfSxcclxuICAgICAgICAgICAgeyBpZDogMiwgbmFtZTogJ2VuaGFuY2UgdG8gKzInIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6IDEsIG5hbWU6ICdlbmhhbmNlIHRvICsxJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAwLCBuYW1lOiAnbm90IGVuaGFuY2VkJyB9LFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbeyBpZDogMCwgbmFtZTogJ25vdCBlbmhhbmNlZCcgfV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhbHRlckl0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICBpdGVtLmVuY2hhbnRtZW50TnVtID0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBpdGVtU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdzZWxlY3QnLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIHJldHVybiBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzSXRlbVN0ZXA6IHRydWUsXHJcbiAgICAgICAgaGlkZU5hbWU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIG5hbWVkSXRlbVN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnc2VsZWN0JyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICByZXR1cm4gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICB0ZWNoU2tpbGxTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ3NraWxsJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICB2YXIgaXRlbXMgPSBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzLCAxKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gZXZlbnR1YWxseSBzaG93IGFsbCB0aGUgc2tpbGxzXHJcbiAgICAgICAgICAvLyBidXQgZm9yIG5vd1xyXG4gICAgICAgICAgaWYoaXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3tpZDogaXRlbXNbMF0uc2tpbGxJZCwgbmFtZTogaXRlbXNbMF0uc2tpbGxJZH1dO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0uc2tpbGxJZCA9PSBpZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGl0ZW1OYW1lU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdpdGVtJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICB2YXIgaXRlbXMgPSBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKTtcclxuICAgICAgICAgIHZhciBpdGVtTmFtZXMgPSB7fTtcclxuICAgICAgICAgIHZhciBpdGVtTmFtZXNMaXN0ID0gW107XHJcbiAgICAgICAgICBmb3IodmFyIGk9MDtpPGl0ZW1zLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBpdGVtc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICBpZighKG5hbWUgaW4gaXRlbU5hbWVzKSkge1xyXG4gICAgICAgICAgICAgIGl0ZW1OYW1lc1tuYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgaXRlbU5hbWVzTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gaXRlbU5hbWVzTGlzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZSA9PSBpZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzSXRlbVN0ZXA6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRpc3RpbmN0SXRlbU5hbWVTdGVwOiB7XHJcbiAgICAgICAgbmFtZTogJ2l0ZW0nLFxyXG4gICAgICAgIGdldE9wdGlvbnM6IGZ1bmN0aW9uKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpIHtcclxuICAgICAgICAgIHZhciBpdGVtcyA9IHF1aWNrQWRkSGVscGVyLmZpbmREYXRhKGNhdGVnb3J5LCBidWlsZCwgZGF0YXMpO1xyXG4gICAgICAgICAgdmFyIGl0ZW1OYW1lcyA9IHt9O1xyXG4gICAgICAgICAgdmFyIGl0ZW1OYW1lc0xpc3QgPSBbXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTxidWlsZC5pdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gYnVpbGQuaXRlbXNbaV07XHJcbiAgICAgICAgICAgIGl0ZW1OYW1lc1tpdGVtLm5hbWVdID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbXNbaV0ubmFtZTtcclxuICAgICAgICAgICAgaWYoIShuYW1lIGluIGl0ZW1OYW1lcykpIHtcclxuICAgICAgICAgICAgICBpdGVtTmFtZXNbbmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgIGl0ZW1OYW1lc0xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogbmFtZSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIGl0ZW1OYW1lc0xpc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT0gaWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBudW1TdGF0c1N0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnTnVtIFN0YXRzJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICB2YXIgaXRlbXMgPSBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKTtcclxuICAgICAgICAgIHZhciBudW1TdGF0cyA9IHt9O1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBmb3IodmFyIGk9MDtpPGl0ZW1zLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IDA7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaj0wO2o8aXRlbXNbaV0uc3RhdHMubGVuZ3RoOysraikge1xyXG4gICAgICAgICAgICAgIHZhciBzdGF0ID0gaENvZGVWYWx1ZXMuc3RhdHNbaXRlbXNbaV0uc3RhdHNbal0uaWRdO1xyXG4gICAgICAgICAgICAgIGlmKHN0YXQgJiYgIXN0YXQuaGlkZSkge1xyXG4gICAgICAgICAgICAgICAgbGVuKys7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG51bVN0YXRzW2xlbiArICd4IHN0YXRzJ10gPSBsZW47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZhciByZXRWYWwgPSBbXTtcclxuICAgICAgICAgIGZvcih2YXIgdmFsIGluIG51bVN0YXRzKSB7XHJcbiAgICAgICAgICAgIHJldFZhbC5wdXNoKHtcclxuICAgICAgICAgICAgICBpZDogbnVtU3RhdHNbdmFsXSxcclxuICAgICAgICAgICAgICBuYW1lOiB2YWwsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXRWYWwgPSByZXRWYWwuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGEuaWQgLSBiLmlkO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1hdGNoZXNJdGVtOiBmdW5jdGlvbihpZCwgaXRlbSkge1xyXG4gICAgICAgICAgdmFyIGxlbiA9IDA7XHJcbiAgICAgICAgICBmb3IodmFyIGo9MDtqPGl0ZW0uc3RhdHMubGVuZ3RoOysraikge1xyXG4gICAgICAgICAgICB2YXIgc3RhdCA9IGhDb2RlVmFsdWVzLnN0YXRzW2l0ZW0uc3RhdHNbal0uaWRdO1xyXG4gICAgICAgICAgICBpZihzdGF0ICYmICFzdGF0LmhpZGUpIHtcclxuICAgICAgICAgICAgICBsZW4rKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBsZW4gPT0gaWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgICBoaWdoU3RhdFN0ZXA6IHtcclxuICAgICAgICBuYW1lOiAnSGlnaCBTdGF0JyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICB2YXIgaXRlbXMgPSBxdWlja0FkZEhlbHBlci5maW5kRGF0YShjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgYWxsSXRlbSA9IHsgaWQ6IC0xLCBuYW1lOiAnYWxsJyB9O1xyXG4gICAgICAgICAgdmFyIHJldFZhbCA9IFthbGxJdGVtXTtcclxuICAgICAgICAgIGlmKGl0ZW1zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgdmFyIGFsbFN0YXRzID0ge307XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IodmFyIGk9MDtpPGl0ZW1zLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgICAgICBmb3IodmFyIGo9MDtqPGl0ZW1zW2ldLnN0YXRzLmxlbmd0aDsrK2opIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ID0gaENvZGVWYWx1ZXMuc3RhdHNbaXRlbXNbaV0uc3RhdHNbal0uaWRdO1xyXG4gICAgICAgICAgICAgICAgaWYoc3RhdCAmJiBzdGF0LnF1aWNrSGlnaCAmJiAhKCdoaWdoICcgKyBzdGF0Lm5hbWUgaW4gYWxsU3RhdHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGFsbFN0YXRzWydoaWdoICcgKyBzdGF0Lm5hbWVdID0gc3RhdC5pZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvcih2YXIgdmFsIGluIGFsbFN0YXRzKSB7XHJcbiAgICAgICAgICAgICAgcmV0VmFsLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IGFsbFN0YXRzW3ZhbF0sXHJcbiAgICAgICAgICAgICAgICBuYW1lOiB2YWwsXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHJldFZhbC5sZW5ndGggPD0gMikge1xyXG4gICAgICAgICAgICAgIHJldFZhbCA9IFthbGxJdGVtXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICByZXRWYWwgPSByZXRWYWwuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXRjaGVzSXRlbTogZnVuY3Rpb24oaWQsIGl0ZW0pIHtcclxuICAgICAgICAgIGlmKGlkID09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgbGFyZ2VzdFZhbCA9IDA7XHJcbiAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWwgPSAwO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBmb3IodmFyIGo9MDtqPGl0ZW0uc3RhdHMubGVuZ3RoOysraikge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gaXRlbS5zdGF0c1tqXTtcclxuICAgICAgICAgICAgdmFyIHN0YXQgPSBoQ29kZVZhbHVlcy5zdGF0c1t2YWwuaWRdO1xyXG4gICAgICAgICAgICBpZihzdGF0LnF1aWNrSGlnaCkge1xyXG4gICAgICAgICAgICAgIGlmKHZhbC5pZCA9PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRWYWwgKz0gdmFsLm1heDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSBpZih2YWwubWF4ID4gbGFyZ2VzdFZhbCkge1xyXG4gICAgICAgICAgICAgICAgbGFyZ2VzdFZhbCA9IHZhbC5tYXg7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBzZWxlY3RlZFZhbCA+IGxhcmdlc3RWYWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzb3J0RnVuYzogZnVuY3Rpb24oaWQsIGl0ZW0xLCBpdGVtMikge1xyXG4gICAgICAgICAgdmFyIHZhbDEgPSAwO1xyXG4gICAgICAgICAgdmFyIHZhbDIgPSAwO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBmb3IodmFyIGk9MDtpPGl0ZW0xLnN0YXRzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgICAgaWYoaXRlbTEuc3RhdHNbaV0uaWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgICB2YWwxID0gaXRlbTEuc3RhdHNbaV0ubWF4O1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBmb3IodmFyIGo9MDtqPGl0ZW0yLnN0YXRzLmxlbmd0aDsrK2opIHtcclxuICAgICAgICAgICAgaWYoaXRlbTIuc3RhdHNbal0uaWQgPT0gaWQpIHtcclxuICAgICAgICAgICAgICB2YWwyID0gaXRlbTIuc3RhdHNbal0ubWF4O1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdmFsMiAtIHZhbDE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiBmYWxzZSxcclxuICAgICAgICBtaW5PcHRpb25zOiAzLFxyXG4gICAgICB9LFxyXG4gICAgICBoYXNTdGF0U3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdIYXMgU3RhdCcsXHJcbiAgICAgICAgZ2V0T3B0aW9uczogZnVuY3Rpb24oY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcykge1xyXG4gICAgICAgICAgdmFyIGl0ZW1zID0gcXVpY2tBZGRIZWxwZXIuZmluZERhdGEoY2F0ZWdvcnksIGJ1aWxkLCBkYXRhcyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIGFsbEl0ZW0gPSB7IGlkOiAtMSwgbmFtZTogJ2FsbCcgfTtcclxuICAgICAgICAgIHZhciByZXRWYWwgPSBbYWxsSXRlbV07XHJcbiAgICAgICAgICBpZihpdGVtcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHZhciBhbGxTdGF0cyA9IHt9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtcy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgICAgZm9yKHZhciBqPTA7ajxpdGVtc1tpXS5zdGF0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdCA9IGhDb2RlVmFsdWVzLnN0YXRzW2l0ZW1zW2ldLnN0YXRzW2pdLmlkXTtcclxuICAgICAgICAgICAgICAgIGlmKHN0YXQgJiYgc3RhdC5zZWFyY2hhYmxlICYmICEoJ2hpZ2ggJyArIHN0YXQubmFtZSBpbiBhbGxTdGF0cykpIHtcclxuICAgICAgICAgICAgICAgICAgYWxsU3RhdHNbJ2hhcyAnICsgc3RhdC5uYW1lXSA9IHN0YXQuaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IodmFyIHZhbCBpbiBhbGxTdGF0cykge1xyXG4gICAgICAgICAgICAgIHJldFZhbC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkOiBhbGxTdGF0c1t2YWxdLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogdmFsLFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZihyZXRWYWwubGVuZ3RoIDw9IDIpIHtcclxuICAgICAgICAgICAgICByZXRWYWwgPSBbYWxsSXRlbV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0VmFsID0gcmV0VmFsLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICByZXR1cm4gcmV0VmFsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF0Y2hlc0l0ZW06IGZ1bmN0aW9uKGlkLCBpdGVtKSB7XHJcbiAgICAgICAgICBpZihpZCA9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBqPTA7ajxpdGVtLnN0YXRzLmxlbmd0aDsrK2opIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IGl0ZW0uc3RhdHNbal07XHJcbiAgICAgICAgICAgIHZhciBzdGF0ID0gaENvZGVWYWx1ZXMuc3RhdHNbdmFsLmlkXTtcclxuICAgICAgICAgICAgaWYoc3RhdC5zZWFyY2hhYmxlKSB7XHJcbiAgICAgICAgICAgICAgaWYodmFsLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc29ydEZ1bmM6IGZ1bmN0aW9uKGlkLCBpdGVtMSwgaXRlbTIpIHtcclxuICAgICAgICAgIHZhciB2YWwxID0gMDtcclxuICAgICAgICAgIHZhciB2YWwyID0gMDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTxpdGVtMS5zdGF0cy5sZW5ndGg7KytpKSB7XHJcbiAgICAgICAgICAgIGlmKGl0ZW0xLnN0YXRzW2ldLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgdmFsMSA9IGl0ZW0xLnN0YXRzW2ldLm1heDtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yKHZhciBqPTA7ajxpdGVtMi5zdGF0cy5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgICAgIGlmKGl0ZW0yLnN0YXRzW2pdLmlkID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgdmFsMiA9IGl0ZW0yLnN0YXRzW2pdLm1heDtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHZhbDIgLSB2YWwxO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNJdGVtU3RlcDogZmFsc2UsXHJcbiAgICAgICAgbWluT3B0aW9uczogMyxcclxuICAgICAgfSxcclxuICAgICAgY3VzdG9tU3RlcDoge1xyXG4gICAgICAgIG5hbWU6ICdtaXNjJyxcclxuICAgICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihjYXRlZ29yeSwgYnVpbGQsIGRhdGFzKSB7XHJcbiAgICAgICAgICByZXR1cm4gaENvZGVWYWx1ZXMuY3VzdG9tSXRlbXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0l0ZW1TdGVwOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ3JlZ2lvbicsIFsndHJhbnNsYXRpb25zJywnZG50UmVzZXQnLCdkbnREYXRhJywnJHJvdXRlJyxyZWdpb25dKTtcclxuZnVuY3Rpb24gcmVnaW9uKHRyYW5zbGF0aW9ucyxkbnRSZXNldCxkbnREYXRhLCRyb3V0ZSkge1xyXG4gIFxyXG4gIHZhciBhbHRlcm5hdGl2ZUZpbGVzID0ge3JlZ2lvbjogJ0FMVCcsIG5hbWU6ICdBbHRlcm5hdGl2ZSB1c2VyIHNwZWNpZmllZCBmaWxlcycsIHVybCA6ICcnfTtcclxuICB2YXIgaG9zdGVkRmlsZXMgPVtcclxuICAgICAge3JlZ2lvbjogJ3NlYScsIG5hbWU6ICdzb3V0aCBlYXN0IGFzaWEnLCB1cmwgOiAnaHR0cHM6Ly9zZWFkbmZpbGVzLmZpcmViYXNlYXBwLmNvbSd9LFxyXG4gICAgICB7cmVnaW9uOiAnbmEnLCBuYW1lOiAnbm9ydGggYW1lcmljYScsIHVybCA6ICdodHRwczovL2RubmEuZmlyZWJhc2VhcHAuY29tJ30sXHJcbiAgICAgIHtyZWdpb246ICdldScsIG5hbWU6ICdldXJvcGUnLCB1cmwgOiAnaHR0cHM6Ly9ldWZpbGVzLmZpcmViYXNlYXBwLmNvbSd9LFxyXG4gICAgICB7cmVnaW9uOiAnaW5hJywgbmFtZTogJ2luZG9uZXNpYSAnLCB1cmwgOiAnaHR0cHM6Ly9pbmFmaWxlcy1kYTQ5MS5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgICAge3JlZ2lvbjogJ3RoJywgbmFtZTogJ3RoYWlsYW5kJywgdXJsIDogJ2h0dHBzOi8vdGhkbmZpbGVzLmZpcmViYXNlYXBwLmNvbSd9LFxyXG4gICAgICB7cmVnaW9uOiAndHcnLCBuYW1lOiAndGFpd2FuIOiHuueBoycsIHVybCA6ICdodHRwczovL3R3ZG5maWxlcy5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgICAgLy8ge3JlZ2lvbjogJ2pkbicsIG5hbWU6ICdqYXBhbiDml6XmnKwnLCB1cmwgOiAnaHR0cHM6Ly9qZG5maWxlcy01OWQ1Ny5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgICAge3JlZ2lvbjogJ2NkbicsIG5hbWU6ICdjaGluYSDkuK3lnIsnLCB1cmwgOiAnaHR0cHM6Ly9jZG5maWxlcy5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgICAge3JlZ2lvbjogJ2tkbicsIG5hbWU6ICdrb3JlYSDrjIDtlZzrr7zqta0nLCB1cmwgOiAnaHR0cHM6Ly9rZG5maWxlcy5maXJlYmFzZWFwcC5jb20nfSxcclxuICAgIF07XHJcbiAgXHJcbiAgdmFyIGRudExvY2F0aW9uUmVnaW9uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhc3RETlRSZWdpb24nKTtcclxuICB2YXIgZG50TG9jYXRpb24gPSBudWxsO1xyXG4gIGlmKGRudExvY2F0aW9uUmVnaW9uKSB7XHJcbiAgICBhbmd1bGFyLmZvckVhY2goaG9zdGVkRmlsZXMsIGZ1bmN0aW9uKGhvc3RlZEZpbGUsIGluZGV4KSB7XHJcbiAgICAgIGlmKGhvc3RlZEZpbGUucmVnaW9uID09IGRudExvY2F0aW9uUmVnaW9uKSB7XHJcbiAgICAgICAgZG50TG9jYXRpb24gPSBob3N0ZWRGaWxlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhciBsYXN0VEZpbGUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnVUlTdHJpbmdzX2ZpbGUnKTtcclxuICB2YXIgdGxvY2F0aW9uID0gbnVsbDtcclxuICBpZihsYXN0VEZpbGUpIHtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaChob3N0ZWRGaWxlcywgZnVuY3Rpb24oaG9zdGVkRmlsZSwgaW5kZXgpIHtcclxuICAgICAgaWYoaG9zdGVkRmlsZS5yZWdpb24gIT0gYWx0ZXJuYXRpdmVGaWxlcy5yZWdpb24gJiYgbGFzdFRGaWxlLmluZGV4T2YoaG9zdGVkRmlsZS51cmwpID4gLTEpIHtcclxuICAgICAgICB0bG9jYXRpb24gPSBob3N0ZWRGaWxlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgaWYodGxvY2F0aW9uID09IG51bGwpIHtcclxuICAgIHRsb2NhdGlvbiA9IGRudExvY2F0aW9uO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGhvc3RlZEZpbGVzIDogaG9zdGVkRmlsZXMsXHJcbiAgICBhbHRlcm5hdGl2ZUZpbGVzIDogYWx0ZXJuYXRpdmVGaWxlcyxcclxuICAgIGRudExvY2F0aW9uIDogZG50TG9jYXRpb24sXHJcbiAgICB0bG9jYXRpb24gOiB0bG9jYXRpb24sXHJcbiAgICBcclxuICAgIHNldEN1c3RvbVVybDogZnVuY3Rpb24odXJsKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdzZXR0aW5nIGN1c3RvbSBsb2NhdGlvbicpO1xyXG4gICAgICB0aGlzLmFsdGVybmF0aXZlRmlsZXMudXJsID0gdXJsO1xyXG5cclxuICAgICAgdmFyIG5ld0ZpbGVzID0gW107XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChob3N0ZWRGaWxlcywgZnVuY3Rpb24oaG9zdGVkRmlsZSwgaW5kZXgpIHtcclxuICAgICAgICBpZihob3N0ZWRGaWxlLnJlZ2lvbiAhPSBhbHRlcm5hdGl2ZUZpbGVzLnJlZ2lvbikge1xyXG4gICAgICAgICAgbmV3RmlsZXMucHVzaChob3N0ZWRGaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIFxyXG4gICAgICBuZXdGaWxlcy5wdXNoKGFsdGVybmF0aXZlRmlsZXMpO1xyXG4gICAgICBob3N0ZWRGaWxlcyA9IG5ld0ZpbGVzO1xyXG4gICAgICB0aGlzLmhvc3RlZEZpbGVzID0gbmV3RmlsZXM7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRMb2NhdGlvbkJ5TmFtZTogZnVuY3Rpb24obG9jYXRpb25OYW1lKSB7XHJcbiAgICAgIHZhciBuZXdMb2NhdGlvbiA9IG51bGw7XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaG9zdGVkRmlsZXMsIGZ1bmN0aW9uKGhvc3RlZEZpbGUsIGluZGV4KSB7XHJcbiAgICAgICAgaWYoaG9zdGVkRmlsZS5yZWdpb24gPT0gbG9jYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICBuZXdMb2NhdGlvbiA9IGhvc3RlZEZpbGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgdGhpcy5zZXRMb2NhdGlvbihuZXdMb2NhdGlvbik7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRMb2NhdGlvbjogZnVuY3Rpb24obG9jYXRpb24pIHtcclxuICAgICAgaWYobG9jYXRpb24gJiYgbG9jYXRpb24gIT0gdGhpcy5kbnRMb2NhdGlvbikge1xyXG4gICAgICAgIHRoaXMuZG50TG9jYXRpb24gPSBsb2NhdGlvbjtcclxuICAgICAgICBkbnRSZXNldCgpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYXN0RE5UUmVnaW9uJywgbG9jYXRpb24ucmVnaW9uKTtcclxuICAgICAgICBkbnRSZXNldCgpO1xyXG4gICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYodGhpcy50bG9jYXRpb24gPT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuc2V0VExvY2F0aW9uKGxvY2F0aW9uKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyAkcm91dGUucmVsb2FkKCk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXRUTG9jYXRpb246IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgIFxyXG4gICAgICBpZihsb2NhdGlvbiAhPSB0aGlzLnRsb2NhdGlvbikge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMudGxvY2F0aW9uID0gbG9jYXRpb247XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgnVUlTdHJpbmdzJyk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ1VJU3RyaW5nc19maWxlJyk7XHJcbiAgICAgICAgZG50UmVzZXQoKTtcclxuICAgICAgICB0cmFuc2xhdGlvbnMucmVzZXQoKTtcclxuICAgICAgICBpZihsb2NhdGlvbikge1xyXG4gICAgICAgICAgdmFyIG92ZXJyaWRlID0gdGhpcy5nZXRPdmVycmlkZSgpO1xyXG4gICAgICAgICAgdHJhbnNsYXRpb25zLnNtYWxsID0gIW92ZXJyaWRlO1xyXG4gICAgICAgICAgdHJhbnNsYXRpb25zLmxvY2F0aW9uID0gdGhpcy50bG9jYXRpb24udXJsO1xyXG4gICAgICAgICAgdHJhbnNsYXRpb25zLmluaXQoZnVuY3Rpb24oKSB7fSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRyb3V0ZS5yZWxvYWQoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0T3ZlcnJpZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndE92ZXJyaWRlJykpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNldE92ZXJyaWRlOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBpZighdmFsdWUpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndE92ZXJyaWRlJyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RPdmVycmlkZScsICcxJyk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zZXRUTG9jYXRpb24odGhpcy5kbnRMb2NhdGlvbik7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYodGhpcy5nZXRPdmVycmlkZSgpKSB7XHJcbiAgICAgICAgdHJhbnNsYXRpb25zLnNtYWxsID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy50TG9jYXRpb24gPSB0aGlzLmRudExvY2F0aW9uO1xyXG4gICAgICAgIHRyYW5zbGF0aW9ucy5zbWFsbCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKHRoaXMudGxvY2F0aW9uKSB7XHJcbiAgICAgICAgdHJhbnNsYXRpb25zLmxvY2F0aW9uID0gdGhpcy50bG9jYXRpb24udXJsO1xyXG4gICAgICB9XHJcbiAgICAgIGRudERhdGEuc2V0TG9jYXRpb24odGhpcy5kbnRMb2NhdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ3NhdmVIZWxwZXInLCBbJ2l0ZW1DYXRlZ29yeScsc2F2ZUhlbHBlcl0pO1xyXG5mdW5jdGlvbiBzYXZlSGVscGVyKGl0ZW1DYXRlZ29yeSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzYXZlSXRlbTogZnVuY3Rpb24oZ3JvdXBOYW1lLCBpdGVtKSB7XHJcbiAgICAgIHZhciBncm91cHMgPSB0aGlzLmdldFNhdmVkSXRlbXMoKTtcclxuICAgICAgaWYoZ3JvdXBOYW1lIGluIGdyb3VwcyAmJiBBcnJheS5pc0FycmF5KGdyb3Vwc1tncm91cE5hbWVdLml0ZW1zKSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGdyb3Vwc1tncm91cE5hbWVdLml0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgZ3JvdXBzW2dyb3VwTmFtZV0ubGFzdFVwZGF0ZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVkU2F2ZWRJdGVtcyhncm91cE5hbWUsIGdyb3Vwc1tncm91cE5hbWVdLml0ZW1zKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZWRTYXZlZEl0ZW1zKGdyb3VwTmFtZSwgW2l0ZW1dKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2F2ZUJ1aWxkU2VsZWN0aW9uIDogZnVuY3Rpb24oYnVpbGROYW1lLCBidWlsZHMpIHtcclxuICAgICAgdGhpcy5zZXRDdXJyZW50QnVpbGQoYnVpbGROYW1lKTtcclxuICAgICAgaWYoYnVpbGRzICYmIGJ1aWxkTmFtZSBpbiBidWlsZHMgJiYgYnVpbGRzW2J1aWxkTmFtZV0uam9iICYmIGJ1aWxkc1tidWlsZE5hbWVdLmpvYi5pZCkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdqb2JOdW1iZXInLCBidWlsZHNbYnVpbGROYW1lXS5qb2IuaWQpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBpbXBvcnRHcm91cDogZnVuY3Rpb24oZ3JvdXBOYW1lLCB1cGRhdGVkSXRlbXMpIHtcclxuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICAgIGdyb3VwTmFtZSA9IHRoaXMuZ2V0VW5pcXVlR3JvdXBOYW1lKGdyb3VwTmFtZSwgaXRlbXMpO1xyXG4gICAgICB0aGlzLnVwZGF0ZWRTYXZlZEl0ZW1zKGdyb3VwTmFtZSwgdXBkYXRlZEl0ZW1zKTtcclxuICAgICAgcmV0dXJuIGdyb3VwTmFtZTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldFVuaXF1ZUdyb3VwTmFtZTogZnVuY3Rpb24oZ3JvdXBOYW1lLCBleGlzdGluZ0dyb3Vwcykge1xyXG4gICAgICB2YXIgZ3JvdXBOYW1lSW5kZXggPSAwO1xyXG4gICAgICBpZihncm91cE5hbWUubGFzdEluZGV4T2YoJyknKSA9PSBncm91cE5hbWUubGVuZ3RoLTEpIHtcclxuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IGdyb3VwTmFtZS5sYXN0SW5kZXhPZignKCcpO1xyXG4gICAgICAgIGlmKHN0YXJ0SW5kZXggPiAwKSB7XHJcbiAgICAgICAgICB2YXIgZm91bmRJbmRleCA9IE51bWJlcihncm91cE5hbWUuc3Vic3RyKHN0YXJ0SW5kZXgrMSwgZ3JvdXBOYW1lLmxlbmd0aC1zdGFydEluZGV4LTIpKTtcclxuICAgICAgICAgIGlmKGZvdW5kSW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgIGdyb3VwTmFtZUluZGV4ID0gZm91bmRJbmRleCArIDE7XHJcbiAgICAgICAgICAgIGdyb3VwTmFtZSA9IGdyb3VwTmFtZS5zdWJzdHIoMCwgc3RhcnRJbmRleCAtIDEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdmFyIG9yaWdpbmFsTmFtZSA9IGdyb3VwTmFtZTtcclxuICAgICAgZm9yKDs7KSB7XHJcbiAgICAgICAgdmFyIGdyb3VwTmFtZSA9IG9yaWdpbmFsTmFtZTtcclxuICAgICAgICBpZihncm91cE5hbWVJbmRleCA+IDApIHtcclxuICAgICAgICAgIGdyb3VwTmFtZSA9IG9yaWdpbmFsTmFtZSArICcgKCcgKyBncm91cE5hbWVJbmRleCArICcpJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoZ3JvdXBOYW1lIGluIGV4aXN0aW5nR3JvdXBzKSB7XHJcbiAgICAgICAgICBncm91cE5hbWVJbmRleCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGdyb3VwTmFtZTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGRlbGV0ZUJ1aWxkOiBmdW5jdGlvbihidWlsZE5hbWUpIHtcclxuICAgICAgdmFyIGJ1aWxkcyA9IHRoaXMuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgICBpZihidWlsZE5hbWUgaW4gYnVpbGRzKSB7XHJcbiAgICAgICAgICBkZWxldGUgYnVpbGRzW2J1aWxkTmFtZV07XHJcbiAgICAgICAgICB0aGlzLnNldEN1cnJlbnRCdWlsZChudWxsKTtcclxuICAgICAgICAgIHRoaXMuc2F2ZUJ1aWxkcyhidWlsZHMpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICB1cGRhdGVkU2F2ZWRJdGVtczogZnVuY3Rpb24oZ3JvdXBOYW1lLCB1cGRhdGVkSXRlbXMpIHtcclxuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5nZXRTYXZlZEl0ZW1zKCk7XHJcbiAgICAgIGlmKGdyb3VwTmFtZSBpbiBpdGVtcykge1xyXG4gICAgICAgIGl0ZW1zW2dyb3VwTmFtZV0uaXRlbXMgPSB1cGRhdGVkSXRlbXM7XHJcbiAgICAgICAgaXRlbXNbZ3JvdXBOYW1lXS5sYXN0VXBkYXRlID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpdGVtc1tncm91cE5hbWVdID0ge2l0ZW1zIDogdXBkYXRlZEl0ZW1zLCBsYXN0VXBkYXRlOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpfTtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjcmVhdGVkIGdyb3VwJyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHRoaXMuc2F2ZUJ1aWxkcyhpdGVtcyk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzYXZlQnVpbGRzOiBmdW5jdGlvbihidWlsZHMpIHtcclxuICAgICAgdmFyIHN0cmluZ2lmaWVkRGF0YSA9IEpTT04uc3RyaW5naWZ5KGJ1aWxkcyk7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzYXZlZEl0ZW1zJywgTFpTdHJpbmcuY29tcHJlc3NUb1VURjE2KHN0cmluZ2lmaWVkRGF0YSkpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgcmVuYW1lU2F2ZWRHcm91cDogZnVuY3Rpb24oXHJcbiAgICAgIG9sZEdyb3VwTmFtZSwgbmV3R3JvdXBOYW1lLCBlbmVteUxldmVsLCBwbGF5ZXJMZXZlbCwgaGVyb0xldmVsLCBqb2IsIGRhbWFnZVR5cGUsIGVsZW1lbnQsIHNlY29uZGFyeUVsZW1lbnQsXHJcbiAgICAgIGVuZW15U3RhdENhcHMsIHBsYXllclN0YXRDYXBzLCBjb252ZXJzaW9ucywgYmFzZVN0YXRzLCBoZXJvU3RhdHMpIHtcclxuICAgICAgICBcclxuICAgICAgdmFyIHNhdmVkSXRlbXMgPSB0aGlzLmdldFNhdmVkSXRlbXMoKTtcclxuICAgICAgXHJcbiAgICAgIGlmKG5ld0dyb3VwTmFtZSBpbiBzYXZlZEl0ZW1zIHx8IG9sZEdyb3VwTmFtZSA9PSBuZXdHcm91cE5hbWUpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbm90IGNoYW5naW5nIG5hbWUnKTtcclxuICAgICAgICBuZXdHcm91cE5hbWUgPSBvbGRHcm91cE5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihvbGRHcm91cE5hbWUgaW4gc2F2ZWRJdGVtcykge1xyXG4gICAgICAgIHZhciBncm91cCA9IHNhdmVkSXRlbXNbb2xkR3JvdXBOYW1lXTtcclxuICAgICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0gPSBncm91cDtcclxuICAgICAgICBkZWxldGUgc2F2ZWRJdGVtc1tvbGRHcm91cE5hbWVdO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0uZW5lbXlMZXZlbCA9IGVuZW15TGV2ZWw7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5wbGF5ZXJMZXZlbCA9IHBsYXllckxldmVsO1xyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0uaGVyb0xldmVsID0gaGVyb0xldmVsO1xyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0uam9iID0gam9iO1xyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0uZGFtYWdlVHlwZSA9IGRhbWFnZVR5cGU7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLnNlY29uZGFyeUVsZW1lbnQgPSBzZWNvbmRhcnlFbGVtZW50O1xyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0uZW5lbXlTdGF0Q2FwcyA9IGVuZW15U3RhdENhcHM7XHJcbiAgICAgIHNhdmVkSXRlbXNbbmV3R3JvdXBOYW1lXS5wbGF5ZXJTdGF0Q2FwcyA9IHBsYXllclN0YXRDYXBzO1xyXG4gICAgICBzYXZlZEl0ZW1zW25ld0dyb3VwTmFtZV0uY29udmVyc2lvbnMgPSBjb252ZXJzaW9ucztcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLmJhc2VTdGF0cyA9IGJhc2VTdGF0cztcclxuICAgICAgc2F2ZWRJdGVtc1tuZXdHcm91cE5hbWVdLmhlcm9TdGF0cyA9IGhlcm9TdGF0cztcclxuICAgICAgXHJcbiAgICAgIHRoaXMuc2F2ZUJ1aWxkcyhzYXZlZEl0ZW1zKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldFNhdmVkSXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHZhciBzdHJpbmdpZmllZERhdGEgPSBMWlN0cmluZy5kZWNvbXByZXNzRnJvbVVURjE2KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzYXZlZEl0ZW1zJykpO1xyXG4gICAgICAgIHZhciBzYXZlZEl0ZW1zID0gSlNPTi5wYXJzZShzdHJpbmdpZmllZERhdGEpO1xyXG4gICAgICAgIHJldHVybiBzYXZlZEl0ZW1zO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGV4KSB7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiB7fTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGN1cnJlbnRCdWlsZDogbnVsbCxcclxuICAgIGdldEN1cnJlbnRCdWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmKCF0aGlzLmN1cnJlbnRCdWlsZCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudEJ1aWxkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2N1cnJlbnRHcm91cCcpO1xyXG4gICAgICAgIGlmKHRoaXMuY3VycmVudEJ1aWxkKSB7XHJcbiAgICAgICAgICB2YXIgc2F2ZWRJdGVtcyA9IHRoaXMuZ2V0U2F2ZWRJdGVtcygpO1xyXG4gICAgICAgICAgaWYoISh0aGlzLmN1cnJlbnRCdWlsZCBpbiBzYXZlZEl0ZW1zKSkge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnY3VycmVudEdyb3VwJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJ1aWxkID0gbnVsbDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRCdWlsZDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNldEN1cnJlbnRCdWlsZDogZnVuY3Rpb24oYnVpbGROYW1lKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudEJ1aWxkID0gYnVpbGROYW1lO1xyXG4gICAgICBpZighYnVpbGROYW1lKSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2N1cnJlbnRHcm91cCcsIGJ1aWxkTmFtZSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2N1cnJlbnRHcm91cCcsIGJ1aWxkTmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdkbnNpbScpLmZhY3RvcnkoJ3N0YXRIZWxwZXInLCBbJ2hDb2RlVmFsdWVzJyxzdGF0SGVscGVyXSk7XHJcbmZ1bmN0aW9uIHN0YXRIZWxwZXIoaENvZGVWYWx1ZXMpIHtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIFxyXG4gICAgZ2V0U2V0U3RhdHM6IGZ1bmN0aW9uKGdyb3VwSXRlbXMpIHtcclxuICAgICAgdmFyIHN0YXRzID0gW107XHJcbiAgICAgIHZhciBzZXRzID0ge307XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXBJdGVtcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgIGlmKHZhbHVlICE9PSBudWxsICYmIHZhbHVlLnNldFN0YXRzICE9IG51bGwpIHtcclxuICAgICAgICAgIGlmKHZhbHVlLnNldElkIGluIHNldHMpIHtcclxuICAgICAgICAgICAgc2V0c1t2YWx1ZS5zZXRJZF0ubnVtSXRlbXMrKztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRzW3ZhbHVlLnNldElkXSA9IHsgbnVtSXRlbXMgOiAxLCBzdGF0cyA6IHZhbHVlLnNldFN0YXRzIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZXRzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHZhbHVlLnN0YXRzLCBmdW5jdGlvbihzdGF0LCBpbmRleCkge1xyXG4gICAgICAgICAgaWYoc3RhdC5uZWVkU2V0TnVtIDw9IHZhbHVlLm51bUl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHN0YXRzLnB1c2goc3RhdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoc3RhdHMpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0TnVtSXRlbXNGb3JTZXQ6IGZ1bmN0aW9uKGl0ZW1zLCBzZXRJZCkge1xyXG4gICAgICB2YXIgbnVtSXRlbXMgPSAwO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goaXRlbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZih2YWx1ZSAmJiB2YWx1ZS5zZXRJZCAmJiB2YWx1ZS5zZXRJZCA9PSBzZXRJZCkge1xyXG4gICAgICAgICAgbnVtSXRlbXMrKztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIG51bUl0ZW1zO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0Q29tYmluZWRTdGF0czogZnVuY3Rpb24oZ3JvdXBJdGVtcykge1xyXG4gICAgICB2YXIgc3RhdHMgPSBbXTtcclxuICAgICAgXHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cEl0ZW1zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgaWYodmFsdWUpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYodmFsdWUuZnVsbFN0YXRzKSB7XHJcbiAgICAgICAgICAgIHN0YXRzID0gc3RhdHMuY29uY2F0KHZhbHVlLmZ1bGxTdGF0cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKHZhbHVlLnN0YXRzKSB7XHJcbiAgICAgICAgICAgIHN0YXRzID0gc3RhdHMuY29uY2F0KHZhbHVlLnN0YXRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoc3RhdHMpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0Q2FsY3VsYXRlZFN0YXRzRnJvbUl0ZW1zOiBmdW5jdGlvbihncm91cCwgaXRlbXMpIHtcclxuICAgICAgdmFyIG5ha2VkU3RhdHMgPSB0aGlzLmdldE5ha2VkU3RhdHMoZ3JvdXApO1xyXG4gICAgICB2YXIgY29tYmluZWRTdGF0cyA9IHRoaXMuZ2V0Q29tYmluZWRTdGF0cyhpdGVtcyk7XHJcbiAgICAgIHZhciBzZXRTdGF0cyA9IHRoaXMuZ2V0U2V0U3RhdHMoaXRlbXMpO1xyXG4gICAgICB2YXIgYWxsU3RhdHMgPSBuYWtlZFN0YXRzLmNvbmNhdChjb21iaW5lZFN0YXRzKS5jb25jYXQoc2V0U3RhdHMpO1xyXG4gICAgICBpZihncm91cC5oZXJvU3RhdHMgIT0gbnVsbCAmJiBncm91cC5oZXJvU3RhdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGFsbFN0YXRzID0gYWxsU3RhdHMuY29uY2F0KGdyb3VwLmhlcm9TdGF0cyk7XHJcbiAgICAgIH1cclxuICAgICAgYWxsU3RhdHMgPSBoQ29kZVZhbHVlcy5tZXJnZVN0YXRzKGFsbFN0YXRzKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB0aGlzLmdldENhbGN1bGF0ZWRTdGF0cyhncm91cCwgYWxsU3RhdHMpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0Q2FsY3VsYXRlZFN0YXRzOiBmdW5jdGlvbihncm91cCwgY29tYmluZWRTdGF0cykge1xyXG4gICAgICBcclxuICAgICAgdmFyIHJldFZhbCA9IFtdO1xyXG4gICAgICB2YXIgc3RhdExvb2t1cCA9IHt9O1xyXG4gICAgICBpZighZ3JvdXAuY29udmVyc2lvbnMgfHwgIWdyb3VwLmVuZW15U3RhdENhcHMgfHwgIWdyb3VwLnBsYXllclN0YXRDYXBzKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goY29tYmluZWRTdGF0cywgZnVuY3Rpb24oc3RhdCwgaW5kZXgpIHtcclxuICAgICAgICBzdGF0TG9va3VwW3N0YXQuaWRdID0gc3RhdDtcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBmdW5jdGlvbiBnZXRQYyhzdGF0KSB7XHJcbiAgICAgICAgdmFyIHN0YXREZWYgPSBoQ29kZVZhbHVlcy5zdGF0c1tzdGF0LmlkXTtcclxuICAgICAgICBpZihzdGF0TG9va3VwW3N0YXREZWYucGNdKSB7XHJcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKHN0YXRMb29rdXBbc3RhdERlZi5wY10ubWF4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGZ1bmN0aW9uIGdldFNraWxsUGMoc3RhdCkge1xyXG4gICAgICAgIHZhciBzdGF0RGVmID0gaENvZGVWYWx1ZXMuc3RhdHNbc3RhdC5pZF07XHJcbiAgICAgICAgaWYoc3RhdExvb2t1cFtzdGF0RGVmLnNrUGNdKSB7XHJcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKHN0YXRMb29rdXBbc3RhdERlZi5za1BjXS5tYXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gYXBwbHlQYyhzdGF0KSB7XHJcbiAgICAgICAgc3RhdC5tYXggPSBNYXRoLmZsb29yKFxyXG4gICAgICAgICAgc3RhdC5tYXggKiAoMStnZXRQYyhzdGF0KSkgKiAoMStnZXRTa2lsbFBjKHN0YXQpKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gZHVwZVN0YXQoaWQpIHtcclxuICAgICAgICB2YXIgc3RhdCA9IHN0YXRMb29rdXBbaWRdO1xyXG4gICAgICAgIGlmKHN0YXQpIHtcclxuICAgICAgICAgIHJldHVybiB7aWQ6IGlkLCBtYXg6IE51bWJlcihzdGF0Lm1heCksIHBjOiBzdGF0LnBjfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4ge2lkOiBpZCwgbWF4OiAwLCBwYzogMH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBmdW5jdGlvbiBhZGRTdGF0KHN0YXQpIHtcclxuICAgICAgICBpZihzdGF0Lm1heCA+IDApIHtcclxuICAgICAgICAgIHJldFZhbC5wdXNoKHN0YXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gYmFzZSBzdGF0c1xyXG4gICAgICB2YXIgc3RyID0gZHVwZVN0YXQoMCk7XHJcbiAgICAgIGFwcGx5UGMoc3RyKTtcclxuICAgICAgYWRkU3RhdChzdHIpO1xyXG4gICAgICBcclxuICAgICAgdmFyIGFnaSA9IGR1cGVTdGF0KDEpO1xyXG4gICAgICBhcHBseVBjKGFnaSk7XHJcbiAgICAgIGFkZFN0YXQoYWdpKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBpbnQgPSBkdXBlU3RhdCgyKTtcclxuICAgICAgYXBwbHlQYyhpbnQpO1xyXG4gICAgICBhZGRTdGF0KGludCk7XHJcblxyXG4gICAgICB2YXIgdml0ID0gZHVwZVN0YXQoMyk7XHJcbiAgICAgIGFwcGx5UGModml0KTtcclxuICAgICAgYWRkU3RhdCh2aXQpO1xyXG5cclxuICAgICAgLy8gYWRkIHZpdCB0byBocFxyXG4gICAgICB2YXIgaHAgPSBkdXBlU3RhdCgyNSk7XHJcbiAgICAgIGhwLm1heCArPSAodml0Lm1heCAqIE51bWJlcihncm91cC5jb252ZXJzaW9ucy5IUCkpO1xyXG4gICAgICBhcHBseVBjKGhwKTtcclxuICAgICAgYWRkU3RhdChocCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBkZWZzXHJcbiAgICAgIHZhciBkZWYgPSBkdXBlU3RhdCg4KTtcclxuICAgICAgZGVmLm1heCArPSAodml0Lm1heCAqIE51bWJlcihncm91cC5jb252ZXJzaW9ucy5QaHlzaWNhbERlZmVuc2UpKTtcclxuICAgICAgYXBwbHlQYyhkZWYpO1xyXG4gICAgICBhZGRTdGF0KGRlZik7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgZGVmcGMgPSBkdXBlU3RhdCgxMDA4KTtcclxuICAgICAgLy8gZGVmcGMubWF4ID0gTWF0aC5tYXgoMC44NSwgTnVtYmVyKGRlZi5tYXgpL051bWJlcihncm91cC5lbmVteVN0YXRDYXBzLkNkZWZlbnNlKSk7XHJcbiAgICAgIGRlZnBjLm1heCA9IE1hdGgubWluKDAuODUsZGVmLm1heC9OdW1iZXIoZ3JvdXAuZW5lbXlTdGF0Q2Fwcy5DZGVmZW5zZSkpO1xyXG4gICAgICBhZGRTdGF0KGRlZnBjKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBtZGVmID0gZHVwZVN0YXQoOSk7XHJcbiAgICAgIG1kZWYubWF4ICs9IChpbnQubWF4ICogTnVtYmVyKGdyb3VwLmNvbnZlcnNpb25zLk1hZ2ljRGVmZW5zZSkpO1xyXG4gICAgICBhcHBseVBjKG1kZWYpO1xyXG4gICAgICBhZGRTdGF0KG1kZWYpO1xyXG4gICAgICBcclxuICAgICAgdmFyIG1kZWZwYyA9IGR1cGVTdGF0KDEwMDkpO1xyXG4gICAgICAvLyBtZGVmcGMubWF4ID0gTWF0aC5tYXgoMC44NSwgTnVtYmVyKG1kZWYubWF4KS9OdW1iZXIoZ3JvdXAuZW5lbXlTdGF0Q2Fwcy5DZGVmZW5zZSkpO1xyXG4gICAgICBtZGVmcGMubWF4ID0gTWF0aC5taW4oMC44NSxtZGVmLm1heC9OdW1iZXIoZ3JvdXAuZW5lbXlTdGF0Q2Fwcy5DZGVmZW5zZSkpO1xyXG4gICAgICBhZGRTdGF0KG1kZWZwYyk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBhdHRhY2sgcG93ZXIgLSBsaWtlIGZkIGJ1dCBmb3IgYnVmc1xyXG4gICAgICAvLyB0aGlzIHNob3dzIGFzIGJsdWUgZGFtYWdlXHJcbiAgICAgIC8vIGkgdGhpbmsgdGhlcmUgYXJlIG1hZ2ljIGFuZCBwaGlzIHZhcmlhbnRzIG9mIHRoaXMgYnV0IGRvZXNudCBtYXR0ZXJcclxuICAgICAgdmFyIGFQd3IgPSBkdXBlU3RhdCgzMDAwKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBtaW5QZG1nID0gZHVwZVN0YXQoNCk7XHJcbiAgICAgIHZhciBtYXhQZG1nID0gZHVwZVN0YXQoNSk7XHJcblxyXG4gICAgICAvLyBwaHlzaWNhbCBkYW1hZ2VcclxuICAgICAgaWYoIWdyb3VwLmRhbWFnZVR5cGUgfHwgZ3JvdXAuZGFtYWdlVHlwZS5pZCAhPSAyKSB7XHJcbiAgICAgICAgdmFyIGV4dHJhUGRtZyA9IGR1cGVTdGF0KDMyKTtcclxuICAgICAgICB2YXIgZXh0cmFQZG1nTW9kPSBkdXBlU3RhdCgxMDEpO1xyXG4gICAgICAgIHZhciBwYVB3ciA9IGR1cGVTdGF0KDMwMDEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHNwZWNpYWwgc3RhdHMgZm9yIHplYWxcclxuICAgICAgICB2YXIgaW50VG9QZG1nID0gZHVwZVN0YXQoMTAxNjQpO1xyXG4gICAgICAgIHZhciBkZWZUb1BkbWcgPSBkdXBlU3RhdCgxMTAzNzMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1pblBkbWcubWF4ICs9IGV4dHJhUGRtZy5tYXg7XHJcbiAgICAgICAgbWluUGRtZy5tYXggKz0gTWF0aC5mbG9vcihzdHIubWF4Kk51bWJlcihncm91cC5jb252ZXJzaW9ucy5TdHJlbmd0aEF0dGFjaykpO1xyXG4gICAgICAgIG1pblBkbWcubWF4ICs9IE1hdGguZmxvb3IoYWdpLm1heCpOdW1iZXIoZ3JvdXAuY29udmVyc2lvbnMuQWdpbGl0eUF0dGFjaykpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1pblBkbWcubWF4ID0gTWF0aC5mbG9vcihtaW5QZG1nLm1heCooMSsoZ2V0UGMobWluUGRtZykgKyBleHRyYVBkbWdNb2QubWF4KSkpO1xyXG4gICAgICAgIG1pblBkbWcubWF4ID0gTWF0aC5mbG9vcihtaW5QZG1nLm1heCAqICgxK2FQd3IubWF4K3BhUHdyLm1heCkpO1xyXG4gICAgICAgIG1pblBkbWcubWF4ICs9IE1hdGguZmxvb3IoaW50VG9QZG1nLm1heCAqIGludC5tYXgpO1xyXG4gICAgICAgIG1pblBkbWcubWF4ICs9IE1hdGguZmxvb3IoZGVmVG9QZG1nLm1heCAqIGRlZi5tYXgpO1xyXG4gICAgICAgIGFkZFN0YXQobWluUGRtZyk7XHJcbiAgXHJcbiAgICAgICAgbWF4UGRtZy5tYXggKz0gZXh0cmFQZG1nLm1heDtcclxuICAgICAgICBtYXhQZG1nLm1heCArPSBNYXRoLmZsb29yKHN0ci5tYXgqTnVtYmVyKGdyb3VwLmNvbnZlcnNpb25zLlN0cmVuZ3RoQXR0YWNrKSk7XHJcbiAgICAgICAgbWF4UGRtZy5tYXggKz0gTWF0aC5mbG9vcihhZ2kubWF4Kk51bWJlcihncm91cC5jb252ZXJzaW9ucy5BZ2lsaXR5QXR0YWNrKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbWF4UGRtZy5tYXggPSBNYXRoLmZsb29yKG1heFBkbWcubWF4KigxKyhnZXRQYyhtYXhQZG1nKSArIGV4dHJhUGRtZ01vZC5tYXgpKSk7XHJcbiAgICAgICAgbWF4UGRtZy5tYXggPSBNYXRoLmZsb29yKG1heFBkbWcubWF4ICogKDErYVB3ci5tYXgrcGFQd3IubWF4KSk7XHJcbiAgICAgICAgbWF4UGRtZy5tYXggKz0gTWF0aC5mbG9vcihpbnRUb1BkbWcubWF4ICogaW50Lm1heCk7XHJcbiAgICAgICAgbWF4UGRtZy5tYXggKz0gTWF0aC5mbG9vcihkZWZUb1BkbWcubWF4ICogZGVmLm1heCk7XHJcbiAgICAgICAgYWRkU3RhdChtYXhQZG1nKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgdmFyIG1pbk1kbWcgPSBkdXBlU3RhdCg2KTtcclxuICAgICAgdmFyIG1heE1kbWcgPSBkdXBlU3RhdCg3KTtcclxuICAgICAgXHJcbiAgICAgIC8vIG1hZ2ljIGRhbWFnZVxyXG4gICAgICBpZighZ3JvdXAuZGFtYWdlVHlwZSB8fCBncm91cC5kYW1hZ2VUeXBlLmlkICE9IDEpIHtcclxuICAgICAgICB2YXIgZXh0cmFNZG1nID0gZHVwZVN0YXQoMzMpO1xyXG4gICAgICAgIHZhciBleHRyYU1kbWdNb2QgPSBkdXBlU3RhdCgxMDIpO1xyXG4gICAgICAgIHZhciBtYVB3ciA9IGR1cGVTdGF0KDMwMDIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHNwZWNpYWwgc3RhdHMgZm9yIHplYWxcclxuICAgICAgICB2YXIgc3RyVG9NZG1nID0gZHVwZVN0YXQoMTAxNjUpO1xyXG4gICAgICAgIHZhciBpbnRUb01kbWcgPSBkdXBlU3RhdCgxMDM3Mik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbWluTWRtZy5tYXggKz0gZXh0cmFNZG1nLm1heDtcclxuICAgICAgICBtaW5NZG1nLm1heCArPSBNYXRoLmZsb29yKGludC5tYXgqTnVtYmVyKGdyb3VwLmNvbnZlcnNpb25zLkludGVsbGlnZW5jZUF0dGFjaykpO1xyXG5cclxuICAgICAgICBtaW5NZG1nLm1heCA9IE1hdGguZmxvb3IobWluTWRtZy5tYXgqKDErKGdldFBjKG1pbk1kbWcpICsgZXh0cmFNZG1nTW9kLm1heCkpKTtcclxuICAgICAgICBtaW5NZG1nLm1heCA9IG1pbk1kbWcubWF4ICogKDErYVB3ci5tYXgrbWFQd3IubWF4KTtcclxuICAgICAgICBtaW5NZG1nLm1heCArPSBNYXRoLmZsb29yKHN0clRvTWRtZy5tYXggKiBzdHIubWF4KTtcclxuICAgICAgICBtaW5NZG1nLm1heCArPSBNYXRoLmZsb29yKGludFRvTWRtZy5tYXggKiBpbnQubWF4KTtcclxuICAgICAgICBhZGRTdGF0KG1pbk1kbWcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1heE1kbWcubWF4ICs9IGV4dHJhTWRtZy5tYXg7XHJcbiAgICAgICAgbWF4TWRtZy5tYXggKz0gKGludC5tYXgqTnVtYmVyKGdyb3VwLmNvbnZlcnNpb25zLkludGVsbGlnZW5jZUF0dGFjaykpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1heE1kbWcubWF4ID0gTWF0aC5mbG9vcihtYXhNZG1nLm1heCooMSsoZ2V0UGMobWF4TWRtZykgKyBleHRyYU1kbWdNb2QubWF4KSkpO1xyXG4gICAgICAgIG1heE1kbWcubWF4ID0gbWF4TWRtZy5tYXggKiAoMSthUHdyLm1heCttYVB3ci5tYXgpO1xyXG4gICAgICAgIG1heE1kbWcubWF4ICs9IE1hdGguZmxvb3Ioc3RyVG9NZG1nLm1heCAqIHN0ci5tYXgpO1xyXG4gICAgICAgIG1heE1kbWcubWF4ICs9IE1hdGguZmxvb3IoaW50VG9NZG1nLm1heCAqIGludC5tYXgpO1xyXG4gICAgICAgIGFkZFN0YXQobWF4TWRtZyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIFxyXG4gICAgICAvLyBjcml0IGNoYW5jZSAlXHJcbiAgICAgIHZhciBjcml0ID0gZHVwZVN0YXQoMTIpO1xyXG4gICAgICBjcml0Lm1heCArPSAoYWdpLm1heCpOdW1iZXIoZ3JvdXAuY29udmVyc2lvbnMuQ3JpdGljYWwpKTtcclxuICAgICAgYXBwbHlQYyhjcml0KTtcclxuICAgICAgXHJcbiAgICAgIHZhciBza0NyaXQgPSBkdXBlU3RhdCg0MDEyKTtcclxuICAgICAgY3JpdC5tYXggKz0gc2tDcml0Lm1heDtcclxuICAgICAgYWRkU3RhdChjcml0KTtcclxuICAgICAgdmFyIGl0ZW1Dcml0ID0gZHVwZVN0YXQoMTAxMik7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgY3JpdENoYW5jZSA9IE1hdGgubWluKDAuODksIChjcml0Lm1heCAvIE51bWJlcihncm91cC5lbmVteVN0YXRDYXBzLkNjcml0aWNhbCkpICsgaXRlbUNyaXQubWF4KTtcclxuICAgICAgcmV0VmFsLnB1c2goe2lkOiAxMDEyLCBtYXg6IGNyaXRDaGFuY2V9KTtcclxuXHJcbiAgICAgIC8vIGNyaXQgZGFtYWdlICVcclxuICAgICAgdmFyIGNEbWcgPSBkdXBlU3RhdCgxMDMpO1xyXG4gICAgICBjRG1nLm1heCArPSAoKHN0ci5tYXgraW50Lm1heCkgKiBOdW1iZXIoZ3JvdXAuY29udmVyc2lvbnMuU3RyZW5ndGhJbnRlbGxpZ2VuY2VUb0NyaXRpY2FsRGFtYWdlKSk7XHJcbiAgICAgIGFwcGx5UGMoY0RtZyk7XHJcbiAgICAgIGFkZFN0YXQoY0RtZyk7XHJcblxyXG4gICAgICB2YXIgaXRlbUN0cmlEbWcgPSBkdXBlU3RhdCgxMTAzKTtcclxuICAgICAgdmFyIGNyaXREYW1hZ2VQYyA9IE1hdGgubWluKDEsIChjRG1nLm1heCAvIGdyb3VwLnBsYXllclN0YXRDYXBzLkNjcml0aWNhbERhbWFnZSkgKyBpdGVtQ3RyaURtZy5tYXgpO1xyXG4gICAgICBhZGRTdGF0KHtpZDogMTEwMywgbWF4OiBjcml0RGFtYWdlUGMgKyAyfSk7XHJcblxyXG4gICAgICAvLyBmZFxyXG4gICAgICB2YXIgZmQgPSBkdXBlU3RhdCgyOSk7XHJcbiAgICAgIGFkZFN0YXQoZmQpO1xyXG4gICAgICB2YXIgbWF4RmQgPSBOdW1iZXIoZ3JvdXAuZW5lbXlTdGF0Q2Fwcy5DZmluYWxkYW1hZ2UpO1xyXG4gICAgICBcclxuICAgICAgdmFyIGZkUGMgPSBkdXBlU3RhdCgxMDI5KTtcclxuICAgICAgZmRQYy5tYXggKz0gTWF0aC5taW4oTWF0aC5tYXgoMC4zNSpOdW1iZXIoZmQubWF4KS9tYXhGZCxNYXRoLnBvdyhOdW1iZXIoZmQubWF4KS9tYXhGZCwyLjIpKSwxKTtcclxuICAgICAgYWRkU3RhdChmZFBjKTtcclxuICAgICAgXHJcbiAgICAgIC8vIGVsZW1lbnRzXHJcbiAgICAgIHZhciBmaXJlUGMgPSBkdXBlU3RhdCgxNik7XHJcbiAgICAgIGFkZFN0YXQoZmlyZVBjKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBpY2VQYyA9IGR1cGVTdGF0KDE3KTtcclxuICAgICAgYWRkU3RhdChpY2VQYyk7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgbGlnaHRQYyA9IGR1cGVTdGF0KDE4KTtcclxuICAgICAgYWRkU3RhdChsaWdodFBjKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBkYXJrUGMgPSBkdXBlU3RhdCgxOSk7XHJcbiAgICAgIGFkZFN0YXQoZGFya1BjKTtcclxuICAgICAgXHJcbiAgICAgIC8vIGF2ZXJhZ2UgZGFtYWdlXHJcbiAgICAgIGZ1bmN0aW9uIGFkZEF2Z0RhbWFnZVN0YXQoaWQsIG1pbiwgbWF4KSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIG5vbkVsZURhbWFnZSA9IChtaW4rbWF4KS8yO1xyXG4gICAgICAgIC8vIGFkZCBjcml0IChhc3N1bWUgMjUlIGNyaXQgcmVzaXN0IC0gaWUuIHgwLjc1KVxyXG4gICAgICAgIG5vbkVsZURhbWFnZSArPSAoY3JpdENoYW5jZSAqIChjcml0RGFtYWdlUGMrMSkgKiBub25FbGVEYW1hZ2UgKiAwLjc1KTtcclxuICAgICAgICAvLyBhcHBseSBmZFxyXG4gICAgICAgIG5vbkVsZURhbWFnZSA9IG5vbkVsZURhbWFnZSAqICgxICsgZmRQYy5tYXgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGFwcGx5IGVsZW1lbnQocylcclxuICAgICAgICAvLyBhc3N1bWUgbm8gZWxlbWVudGFsIHJlc2lzdCAoc2luY2UgcHJvYmFibHkgaGF2ZSByZXNpc3QgcmVkdWN0aW9uIGFueXdheXMpXHJcbiAgICAgICAgdmFyIGF2Z0RtZyA9IG5vbkVsZURhbWFnZTtcclxuICAgICAgICBpZihncm91cC5lbGVtZW50ICYmIGdyb3VwLmVsZW1lbnQuaWQgPiAwKSB7XHJcbiAgICAgICAgICB2YXIgZWxlbWVudFN0YXQgPSBzdGF0TG9va3VwW2hDb2RlVmFsdWVzLmVsZW1lbnRzW2dyb3VwLmVsZW1lbnQuaWRdLmRtZ1N0YXRdO1xyXG4gICAgICAgICAgaWYoZWxlbWVudFN0YXQpIHtcclxuICAgICAgICAgICAgYXZnRG1nID0gYXZnRG1nICogKDErTnVtYmVyKGVsZW1lbnRTdGF0Lm1heCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhZGRTdGF0KHtpZDogaWQsIG1heDogYXZnRG1nfSk7XHJcbiAgICAgICAgdmFyIHNlY0VsZW1lbnRJZCA9IDA7XHJcbiAgICAgICAgdmFyIHByaUVsZW1lbnRJZCA9IDA7XHJcbiAgICAgICAgaWYoZ3JvdXAuZWxlbWVudCkge1xyXG4gICAgICAgICAgcHJpRWxlbWVudElkID0gZ3JvdXAuZWxlbWVudC5pZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBwcmlFbGVtZW50SWQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihncm91cC5zZWNvbmRhcnlFbGVtZW50KSB7XHJcbiAgICAgICAgICBzZWNFbGVtZW50SWQgPSBncm91cC5zZWNvbmRhcnlFbGVtZW50LmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHNlY0VsZW1lbnRJZCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHNlY0VsZW1lbnRJZCAhPSBwcmlFbGVtZW50SWQpIHtcclxuICAgICAgICAgIGlmKHNlY0VsZW1lbnRJZCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHNlY29uZGFyeUVsZW1lbnRTdGF0ID0gc3RhdExvb2t1cFtoQ29kZVZhbHVlcy5lbGVtZW50c1tncm91cC5zZWNvbmRhcnlFbGVtZW50LmlkXS5kbWdTdGF0XTtcclxuICAgICAgICAgICAgaWYoc2Vjb25kYXJ5RWxlbWVudFN0YXQpIHtcclxuICAgICAgICAgICAgICB2YXIgc2VjQXZnRG1nID0gbm9uRWxlRGFtYWdlICogKDErTnVtYmVyKHNlY29uZGFyeUVsZW1lbnRTdGF0Lm1heCkpO1xyXG4gICAgICAgICAgICAgIGFkZFN0YXQoe2lkOiBpZCArIDEwMDAsIG1heDogc2VjQXZnRG1nfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhZGRTdGF0KHtpZDogaWQgKyAxMDAwLCBtYXg6IG5vbkVsZURhbWFnZX0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gYXZlcmFnZSBkYW1hZ2VzXHJcbiAgICAgIGlmKCFncm91cC5kYW1hZ2VUeXBlIHx8IGdyb3VwLmRhbWFnZVR5cGUuaWQgPT0gMSB8fCBncm91cC5kYW1hZ2VUeXBlLmlkID09IDApIHtcclxuICAgICAgICBhZGRBdmdEYW1hZ2VTdGF0KDEwMDQsIG1pblBkbWcubWF4LCBtYXhQZG1nLm1heCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmKCFncm91cC5kYW1hZ2VUeXBlIHx8IGdyb3VwLmRhbWFnZVR5cGUuaWQgPT0gMiB8fCBncm91cC5kYW1hZ2VUeXBlLmlkID09IDApIHtcclxuICAgICAgICBhZGRBdmdEYW1hZ2VTdGF0KDEwMDYsIG1pbk1kbWcubWF4LCBtYXhNZG1nLm1heCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmKCFncm91cC5kYW1hZ2VUeXBlIHx8IGdyb3VwLmRhbWFnZVR5cGUuaWQgPT0gMykge1xyXG4gICAgICAgIGFkZEF2Z0RhbWFnZVN0YXQoMTAwMSwgbWluTWRtZy5tYXgrbWluUGRtZy5tYXgsIG1heE1kbWcubWF4K21heFBkbWcubWF4KTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gRXF1aXZhbGVudCBIUFxyXG4gICAgICB2YXIgcGRlZkVxSHAgPSBkdXBlU3RhdCgyMDA4KTtcclxuICAgICAgcGRlZkVxSHAubWF4ID0gaHAubWF4IC8gKDEtZGVmcGMubWF4KTtcclxuICAgICAgXHJcbiAgICAgIHZhciBtZGVmRXFIcCA9IGR1cGVTdGF0KDIwMDkpO1xyXG4gICAgICBtZGVmRXFIcC5tYXggPSBocC5tYXggLyAoMS1tZGVmcGMubWF4KTtcclxuICAgICAgXHJcbiAgICAgIHZhciBlcUhwID0gZHVwZVN0YXQoMzAwOCk7XHJcbiAgICAgIGVxSHAubWF4ID0gKHBkZWZFcUhwLm1heCArIG1kZWZFcUhwLm1heCkgLyAyO1xyXG4gICAgICBhZGRTdGF0KGVxSHApO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHJldFZhbDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldE5ha2VkU3RhdHM6IGZ1bmN0aW9uKGdyb3VwKSB7XHJcbiAgICAgIFxyXG4gICAgICBpZihcclxuICAgICAgICBncm91cC5iYXNlU3RhdHMgJiYgXHJcbiAgICAgICAgZ3JvdXAuYmFzZVN0YXRzLlN0cmVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAge2lkOjAsIG1heDpncm91cC5iYXNlU3RhdHMuU3RyZW5ndGh9LFxyXG4gICAgICAgICAge2lkOjEsIG1heDpncm91cC5iYXNlU3RhdHMuQWdpbGl0eX0sXHJcbiAgICAgICAgICB7aWQ6MiwgbWF4Omdyb3VwLmJhc2VTdGF0cy5JbnRlbGxpZ2VuY2V9LFxyXG4gICAgICAgICAge2lkOjMsIG1heDpncm91cC5iYXNlU3RhdHMuU3RhbWluYX1cclxuICAgICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRTa2lsbFN0YXRzIDogZnVuY3Rpb24gKGl0ZW0sIGRhdGEsIHNraWxsRGF0YSkge1xyXG5cclxuICAgICAgdmFyIHNraWxsTGV2ZWxWYWxzID0gbnVsbDtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHNraWxsRGF0YSwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XHJcbiAgICAgICAgaWYodmFsdWUuU2tpbGxJbmRleCA9PSBpdGVtLmlkICYmIHZhbHVlLlNraWxsTGV2ZWwgPT0gaXRlbS5lbmNoYW50bWVudE51bSkge1xyXG4gICAgICAgICAgc2tpbGxMZXZlbFZhbHMgPSB2YWx1ZTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgaWYoIXNraWxsTGV2ZWxWYWxzKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBpbmRleCA9IDE7XHJcbiAgICAgIHZhciBlZmZlY3RzID0gW107XHJcbiAgICAgIHZhciBzdGlsbENvbHMgPSB0cnVlO1xyXG4gICAgICBcclxuICAgICAgd2hpbGUoc3RpbGxDb2xzKSB7XHJcbiAgICAgICAgdmFyIGNvbE5hbWUgPSAnRWZmZWN0Q2xhc3MnICsgaW5kZXg7XHJcbiAgICAgICAgdmFyIHZhbENvbE5hbWUgPSAnRWZmZWN0Q2xhc3NWYWx1ZScgKyBpbmRleDtcclxuICAgICAgICBpZihkYXRhICYmIGNvbE5hbWUgaW4gZGF0YSAmJiB2YWxDb2xOYW1lIGluIHNraWxsTGV2ZWxWYWxzKSB7XHJcbiAgICAgICAgICBpZihkYXRhW2NvbE5hbWVdID4gMCkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHNraWxsTGV2ZWxWYWxzW3ZhbENvbE5hbWVdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gZm9yIG5vdyBhZGQgMTBrXHJcbiAgICAgICAgICAgIHZhciBlZmZlY3RJZCA9IGRhdGFbY29sTmFtZV07XHJcbiAgICAgICAgICAgIHZhciBtYXAgPSBoQ29kZVZhbHVlcy5za2lsbEVmZmVjdE1hcHBpbmdbZWZmZWN0SWRdO1xyXG4gICAgICAgICAgICBpZihtYXAgJiYgbWFwLmdldFZhbHMpIHtcclxuICAgICAgICAgICAgICB2YXIgdmFscyA9IG1hcC5nZXRWYWxzKHZhbCk7XHJcbiAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTx2YWxzLmxlbmd0aDsrK2kpIHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdHMucHVzaCh2YWxzW2ldKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIHN0YXRJZDtcclxuICAgICAgICAgICAgICBpZihtYXAgJiYgbWFwLm1hcFRvKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0SWQgPSBtYXAubWFwVG87XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3RhdElkID0gMTAwMDAgKyBlZmZlY3RJZDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgaWYodmFsID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0cy5wdXNoKHsgaWQ6IHN0YXRJZCwgZWZmZWN0OiBlZmZlY3RJZCwgbWF4OiB2YWwgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYodmFsLnRvU3RyaW5nKCkuaW5kZXhPZignOycpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdmFscyA9IHZhbC5zcGxpdCgnOycpO1xyXG4gICAgICAgICAgICAgICAgICBpZih2YWxzLmxlbmd0aCA+IDAgJiYgdmFsc1swXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzLnB1c2goeyBpZDogc3RhdElkLCBlZmZlY3Q6IGVmZmVjdElkLCBtYXg6IHZhbHNbMF0gfSk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBzdGlsbENvbHMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaW5kZXgrKztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIGVmZmVjdHM7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldEJ1aWxkU3RhdHM6IGZ1bmN0aW9uKGJ1aWxkKSB7XHJcbiAgICAgIHZhciBzdGF0cyA9IHt9O1xyXG4gICAgICBzdGF0cy5uYWtlZFN0YXRzID0gdGhpcy5nZXROYWtlZFN0YXRzKGJ1aWxkKTtcclxuICAgICAgc3RhdHMuY29tYmluZWRTdGF0cyA9IHRoaXMuZ2V0Q29tYmluZWRTdGF0cyhidWlsZC5pdGVtcyk7XHJcbiAgICAgIHN0YXRzLnNldFN0YXRzID0gdGhpcy5nZXRTZXRTdGF0cyhidWlsZC5pdGVtcyk7XHJcbiAgICAgIHN0YXRzLmFsbFN0YXRzID0gc3RhdHMubmFrZWRTdGF0cy5jb25jYXQoc3RhdHMuY29tYmluZWRTdGF0cykuY29uY2F0KHN0YXRzLnNldFN0YXRzKTtcclxuICAgICAgaWYoYnVpbGQuaGVyb1N0YXRzICYmIGJ1aWxkLmhlcm9TdGF0cy5sZW5ndGgpIHtcclxuICAgICAgICBzdGF0cy5oZXJvU3RhdHMgPSBidWlsZC5oZXJvU3RhdHM7XHJcbiAgICAgICAgc3RhdHMuYWxsU3RhdHMgPSBzdGF0cy5hbGxTdGF0cy5jb25jYXQoYnVpbGQuaGVyb1N0YXRzKTtcclxuICAgICAgfVxyXG4gICAgICBzdGF0cy5hbGxTdGF0cyA9IGhDb2RlVmFsdWVzLm1lcmdlU3RhdHMoc3RhdHMuYWxsU3RhdHMpO1xyXG4gICAgICBcclxuICAgICAgc3RhdHMuY2FsY3VsYXRlZFN0YXRzID0gdGhpcy5nZXRDYWxjdWxhdGVkU3RhdHMoYnVpbGQsIHN0YXRzLmFsbFN0YXRzKTtcclxuICAgICAgcmV0dXJuIHN0YXRzO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgndHJhbnNsYXRpb25zJywgWyckcm91dGVQYXJhbXMnLCAnJHJvb3RTY29wZScsIHRyYW5zbGF0aW9uc10pO1xyXG5mdW5jdGlvbiB0cmFuc2xhdGlvbnMoJHJvdXRlUGFyYW1zLCAkcm9vdFNjb3BlKSB7XHJcblxyXG4gIHZhciBkblRyYW5zbGF0aW9ucyA9IG5ldyBEblRyYW5zbGF0aW9ucygpO1xyXG4gIHZhciBzbWFsbEZpbGUgPSAndWlzdHJpbmcub3B0aW1pc2VkLmx6anNvbic7XHJcbiAgdmFyIGJpZ0ZpbGUgPSAndWlzdHJpbmcubHpqc29uJztcclxuXHJcbiAgdmFyIGNvbXBsZXRlQ2FsbGJhY2sgPSBbXTtcclxuICB2YXIgcHJvZ3Jlc3NDYWxsYmFjayA9IFtdO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgXHJcbiAgICByZXNldCA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBkblRyYW5zbGF0aW9ucyA9IG5ldyBEblRyYW5zbGF0aW9ucygpO1xyXG4gICAgICBkblRyYW5zbGF0aW9ucy5zaXplTGltaXQgPSAxMDA7XHJcbiAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuc3RhcnRlZExvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgY29tcGxldGVDYWxsYmFjayA9IFtdO1xyXG4gICAgICBwcm9ncmVzc0NhbGxiYWNrID0gW107XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBnZXRGaWxlTmFtZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmKHRoaXMuc21hbGwpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9hZGluZyBvcHRpbWlzZWQgdHJhbnNsYXRpb25zJyk7XHJcbiAgICAgICAgcmV0dXJuIHNtYWxsRmlsZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9hZGluZyBmdWxsIHRyYW5zbGF0aW9ucycpO1xyXG4gICAgICAgIHJldHVybiBiaWdGaWxlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBsb2FkZWQgOiBmYWxzZSxcclxuICAgIHN0YXJ0ZWRMb2FkaW5nIDogZmFsc2UsXHJcbiAgICBzbWFsbDogZmFsc2UsXHJcbiAgICBcclxuICAgIGxvY2F0aW9uIDogbnVsbCxcclxuICBcclxuICAgIGluaXQgOiBmdW5jdGlvbihwcm9ncmVzcywgY29tcGxldGUpIHtcclxuXHJcbiAgICAgIGlmKHRoaXMuaXNMb2FkZWQoKSkge1xyXG4gICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayA9IFtdO1xyXG4gICAgICAgIGlmKHByb2dyZXNzKSB7XHJcbiAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrLnB1c2gocHJvZ3Jlc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjb21wbGV0ZSkge1xyXG4gICAgICAgICAgY29tcGxldGVDYWxsYmFjay5wdXNoKGNvbXBsZXRlKTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgaWYoIXRoaXMuc3RhcnRlZExvYWRpbmcpIHtcclxuICAgICAgICAgIHRoaXMuc3RhcnRlZExvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBudWxsO1xyXG4gICAgICAgICAgaWYodGhpcy5sb2NhdGlvbiAmJiB0aGlzLmxvY2F0aW9uICE9ICcnKSB7XHJcbiAgICAgICAgICAgIGZpbGVOYW1lID0gdGhpcy5sb2NhdGlvbiArICcvJyArIHRoaXMuZ2V0RmlsZU5hbWUoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKGZpbGVOYW1lICE9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiVUlTdHJpbmdzX2ZpbGVcIikpIHtcclxuICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCdVSVN0cmluZ3MnKTtcclxuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnVUlTdHJpbmdzX2ZpbGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ1RSQU5TTEFUSU9OX0xPQURfRVZFTlQnKTtcclxuICAgICAgICAgIGRuVHJhbnNsYXRpb25zLmxvYWREZWZhdWx0RmlsZShcclxuICAgICAgICAgICAgZmlsZU5hbWUsIFxyXG4gICAgICAgICAgICBmdW5jdGlvbihtc2cpIHtcclxuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocHJvZ3Jlc3NDYWxsYmFjaywgZnVuY3Rpb24odmFsdWUsIGtleSkgeyB2YWx1ZShtc2cpOyB9KTtcclxuICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHQubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29tcGxldGVDYWxsYmFjaywgZnVuY3Rpb24odmFsdWUsIGtleSkgeyB2YWx1ZSgpOyB9KTtcclxuICAgICAgICAgICAgICBjb21wbGV0ZUNhbGxiYWNrID0gW107XHJcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdUUkFOU0xBVElPTl9MT0FEX0VWRU5UJyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uKG1zZykge1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcm9ncmVzc0NhbGxiYWNrLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7IHZhbHVlKG1zZyk7IH0pO1xyXG4gICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnVFJBTlNMQVRJT05fTE9BRF9FUlJPUicpO1xyXG4gICAgICAgICAgICAgIHQuc3RhcnRlZExvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICB0LmxvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgaXNMb2FkZWQgOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYoIXRoaXMubG9hZGVkKSB7XHJcbiAgICAgICAgdmFyIGZpbGVOYW1lID0gdGhpcy5sb2NhdGlvbiArICcvJyArIHRoaXMuZ2V0RmlsZU5hbWUoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZihmaWxlTmFtZSAhPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcIlVJU3RyaW5nc19maWxlXCIpKSB7XHJcbiAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCdVSVN0cmluZ3MnKTtcclxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdVSVN0cmluZ3NfZmlsZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBkblRyYW5zbGF0aW9ucy5sb2FkRnJvbVNlc3Npb24oKTtcclxuICAgICAgICBpZih0aGlzLmxvYWRlZCkge1xyXG4gICAgICAgICAgdGhpcy5zdGFydGVkTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLmxvYWRlZDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHRyYW5zbGF0ZSA6IGZ1bmN0aW9uKGlkLGlkUGFyYW0pIHtcclxuICAgICAgaWYodGhpcy5sb2FkZWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIG5hbWU7XHJcbiAgICAgICAgICBpZighaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBkblRyYW5zbGF0aW9ucy50cmFuc2xhdGUoaWQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodHlwZW9mIG5hbWUgIT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJ20nICsgbmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZihpZFBhcmFtICYmIG5hbWUpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiBpZFBhcmFtID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBpZFBhcmFtLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgZm9yKHZhciBwPTA7cDxwYXJhbXMubGVuZ3RoOysrcCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBpZCA9IHBhcmFtc1twXTtcclxuICAgICAgICAgICAgICAgIGlmKHBpZC5pbmRleE9mKCd7JykgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICBwaWQgPSBwYXJhbXNbcF0ucmVwbGFjZSgvXFx7fFxcfS9nLCcnKTtcclxuICAgICAgICAgICAgICAgICAgcGlkID0gZG5UcmFuc2xhdGlvbnMudHJhbnNsYXRlKHBpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoJ3snICsgcCArICd9JywgcGlkKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgnezB9JywgaWRQYXJhbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZXgpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCd1bmFibGUgdG8gdHJhbnNsYXRlJywgaWQsIGlkUGFyYW0sIGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiAnbScgKyBpZDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ2Ruc2ltJykuZmFjdG9yeSgnaENvZGVWYWx1ZXMnLCBbaENvZGVWYWx1ZXNdKTtcclxuZnVuY3Rpb24gaENvZGVWYWx1ZXMoKSB7XHJcblxyXG4gIGZ1bmN0aW9uIHRvT25lRGVjKHN0YXQpIHtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKHN0YXQubWF4KjEwKS8xMDtcclxuICB9XHJcbiAgZnVuY3Rpb24gdG9Ob0RlYyhzdGF0KSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihzdGF0Lm1heCk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGluVGhvdXNhbmRzKHN0YXQpIHtcclxuICAgIHZhciB2YWwgPSBOdW1iZXIoc3RhdC5tYXgpO1xyXG4gICAgaWYodmFsIDwgMTAwKSB7XHJcbiAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHZhbCA8IDEwMDAwMCkge1xyXG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWwvMTAwKS8xMCArICdrJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYodmFsIDwgMTAwMDAwMCkge1xyXG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWwvMTAwMCkgKyAnayc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHZhbCA8IDEwMDAwMDAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbC8xMDAwMCkvMTAwICsgJ20nO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbC8xMDAwMDAwKSArICdtJztcclxuICAgIH1cclxuICB9XHJcbiAgZnVuY3Rpb24gdG9QZXJjZW50KHN0YXQpIHtcclxuICAgIHJldHVybiAoTWF0aC5yb3VuZChzdGF0Lm1heCoxMDAwMCkvMTAwKSArICclJztcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHtcclxuICAgIHN0YXRzIDoge1xyXG4gICAgICAwICA6IHtpZDogMCwgbmFtZTogJ3N0cicsIGRpc3BsYXk6IHRvTm9EZWMsIGRwczogdHJ1ZSwgcGM6IDUwLCBza1BjOiA0MDUwLCBzZWFyY2hhYmxlOiB0cnVlLCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgMSAgOiB7aWQ6IDEsIG5hbWU6ICdhZ2knLCBkaXNwbGF5OiB0b05vRGVjLCBkcHM6IHRydWUsIHBjOiA1MSwgc2tQYzogNDA1MSwgc2VhcmNoYWJsZTogdHJ1ZSwgcXVpY2tIaWdoOiB0cnVlIH0sXHJcbiAgICAgIDIgIDoge2lkOiAyLCBuYW1lOiAnaW50JywgZGlzcGxheTogdG9Ob0RlYywgZHBzOiB0cnVlLCBwYzogNTIsIHNrUGM6IDQwNTIsIHNlYXJjaGFibGU6IHRydWUsIHF1aWNrSGlnaDogdHJ1ZSB9LFxyXG4gICAgICAzICA6IHtpZDogMywgbmFtZTogJ3ZpdCcsIGRpc3BsYXk6IHRvTm9EZWMsIGRlZjogdHJ1ZSwgcGM6IDUzLCBza1BjOiA0MDUzLCBzZWFyY2hhYmxlOiB0cnVlLCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgNCAgOiB7aWQ6IDQsIG5hbWU6ICdwZG1nJywgZGlzcGxheTogdG9Ob0RlYywgY29tYmluZVdpdGg6IDUsIGRwczogdHJ1ZSwgcGM6IDU0LCBzZWFyY2hhYmxlOiB0cnVlLCBhbHRTdGF0OiAzMiwgcXVpY2tIaWdoOiB0cnVlIH0sXHJcbiAgICAgIDUgIDoge2lkOiA1LCBuYW1lOiAnbWF4UGRtZycsIGRpc3BsYXk6IHRvTm9EZWMsIGhpZGU6IHRydWUsIHBjOiA1NSB9LFxyXG4gICAgICA2ICA6IHtpZDogNiwgbmFtZTogJ21kbWcnLCBkaXNwbGF5OiB0b05vRGVjLCBjb21iaW5lV2l0aDogNywgZHBzOiB0cnVlLCBwYzogNTYsIHNlYXJjaGFibGU6IHRydWUsIGFsdFN0YXQ6IDMzLCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgNyAgOiB7aWQ6IDcsIG5hbWU6ICdtYXhNZG1nJywgZGlzcGxheTogdG9Ob0RlYywgaGlkZTogdHJ1ZSwgcGM6IDU3IH0sXHJcbiAgICAgIDggIDoge2lkOiA4LCBuYW1lOiAncGRlZicsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBkZWY6IHRydWUsIHBjOiA1OCwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICA5ICA6IHtpZDogOSwgbmFtZTogJ21kZWYnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgZGVmOiB0cnVlLCBwYzogNTksIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMTAgOiB7aWQ6IDEwLCBuYW1lOiAncGFyYScsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBwYzogNjAsIG5vQ3VzdG9tOiB0cnVlIH0sXHJcbiAgICAgIDExIDoge2lkOiAxMSwgbmFtZTogJ3BhcmEgcmVzaXN0JywgZGlzcGxheTogaW5UaG91c2FuZHMsIHBjOiA2MSwgbm9DdXN0b206IHRydWUgfSxcclxuICAgICAgMTIgOiB7aWQ6IDEyLCBuYW1lOiAnY3JpdCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBkcHM6IHRydWUsIHBjOiA2Miwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAxMyA6IHtpZDogMTMsIG5hbWU6ICdjcml0IHJlc2lzdCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBwYzogNjMsIG5vQ3VzdG9tOiB0cnVlIH0sXHJcbiAgICAgIDE0IDoge2lkOiAxNCwgbmFtZTogJ3N0dW4nLCBkaXNwbGF5OiBpblRob3VzYW5kcywgcGM6IDY0LCBub0N1c3RvbTogdHJ1ZSB9LFxyXG4gICAgICAxNSA6IHtpZDogMTUsIG5hbWU6ICdzdHVuIHJlc2lzdCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBwYzogNjUsIG5vQ3VzdG9tOiB0cnVlIH0sXHJcbiAgICAgIDE2IDoge2lkOiAxNiwgbmFtZTogJ2ZpcmUlJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUsIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMTcgOiB7aWQ6IDE3LCBuYW1lOiAnaWNlJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlLCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIDE4IDoge2lkOiAxOCwgbmFtZTogJ2xpZ2h0JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlLCBzZWFyY2hhYmxlOiB0cnVlIH0sXHJcbiAgICAgIDE5IDoge2lkOiAxOSwgbmFtZTogJ2RhcmslJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUsIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMjAgOiB7aWQ6IDIwLCBuYW1lOiAnZmlyZSBkZWYnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAyMSA6IHtpZDogMjEsIG5hbWU6ICdpY2UgZGVmJywgZGlzcGxheTogdG9QZXJjZW50LCBkZWY6IHRydWUsIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMjIgOiB7aWQ6IDIyLCBuYW1lOiAnbGlnaHQgZGVmJywgZGlzcGxheTogdG9QZXJjZW50LCBkZWY6IHRydWUsIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMjMgOiB7aWQ6IDIzLCBuYW1lOiAnZGFyayBkZWYnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAyNSA6IHtpZDogMjUsIG5hbWU6ICdocCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBkZWY6IHRydWUsIHBjOiA3NSwgc2tQYzogNDA3NSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICAyNiA6IHtpZDogMjYsIG5hbWU6ICdtcCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBkZWY6IHRydWUsIHBjOiA3Niwgc2tQYzogNDA3NiB9LFxyXG4gICAgICAyOSA6IHtpZDogMjksIG5hbWU6ICdmZCcsIGRpc3BsYXk6IHRvTm9EZWMsIGRwczogdHJ1ZSwgc2VhcmNoYWJsZTogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgLy8gdGhlc2UgYXJlIGJvdGggbWluIGFuZCBtYXhcclxuICAgICAgLy8gc2hvd3Mgd2l0aCB0aGUgc2FtZSBuYW1lIGJ1dCB0aGVzZSBhcmUgdXNlZCByZWFsbHkganVzdCBmb3Igc2V0IGJvbnVzIEkgdGhpbmtcclxuICAgICAgMzIgOiB7aWQ6IDMyLCBuYW1lOiAncGRtZycsIGRpc3BsYXk6IHRvTm9EZWMsIGRwczogdHJ1ZSwgcGM6IDU0LCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgMzMgOiB7aWQ6IDMzLCBuYW1lOiAnbWRtZycsIGRpc3BsYXk6IHRvTm9EZWMsIGRwczogdHJ1ZSwgcGM6IDU2LCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgXHJcbiAgICAgIDUwIDoge2lkOiA1MCwgbmFtZTogJ3N0ciUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRwczogdHJ1ZSB9LFxyXG4gICAgICA1MSA6IHtpZDogNTEsIG5hbWU6ICdhZ2klJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUgfSxcclxuICAgICAgNTIgOiB7aWQ6IDUyLCBuYW1lOiAnaW50JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDUzIDoge2lkOiA1MywgbmFtZTogJ3ZpdCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA1NCA6IHtpZDogNTQsIG5hbWU6ICdwZG1nJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgY29tYmluZVdpdGg6IDU1LCBkcHM6IHRydWUgfSxcclxuICAgICAgNTUgOiB7aWQ6IDU1LCBuYW1lOiAnbWF4UGRtZyUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGhpZGU6IHRydWUgfSxcclxuICAgICAgNTYgOiB7aWQ6IDU2LCBuYW1lOiAnbWRtZyUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGNvbWJpbmVXaXRoOiA1NywgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDU3IDoge2lkOiA1NywgbmFtZTogJ21heE1kbWclJywgZGlzcGxheTogdG9QZXJjZW50LCBoaWRlOiB0cnVlIH0sXHJcbiAgICAgIDU4IDoge2lkOiA1OCwgbmFtZTogJ3BkZWYlJywgZGlzcGxheTogdG9QZXJjZW50LCBkZWY6IHRydWUgfSxcclxuICAgICAgNTkgOiB7aWQ6IDU5LCBuYW1lOiAnbWRlZiUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA2MCA6IHtpZDogNjAsIG5hbWU6ICdwYXJhJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA2MSA6IHtpZDogNjEsIG5hbWU6ICdwYXJhIHJlc2lzdCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkZWY6IHRydWUgfSxcclxuICAgICAgNjIgOiB7aWQ6IDYyLCBuYW1lOiAnY3JpdCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRwczogdHJ1ZSB9LFxyXG4gICAgICA2MyA6IHtpZDogNjMsIG5hbWU6ICdjcml0IHJlc2lzdCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA2NCA6IHtpZDogNjQsIG5hbWU6ICdzdHVuJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA2NSA6IHtpZDogNjUsIG5hbWU6ICdzdHVuIHJlc2lzdCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkZWY6IHRydWUgfSxcclxuICAgICAgNzQgOiB7aWQ6IDc0LCBuYW1lOiAnbW92ZSUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkZWY6IHRydWUgfSxcclxuICAgICAgNzUgOiB7aWQ6IDc1LCBuYW1lOiAnaHAlJywgZGlzcGxheTogdG9QZXJjZW50LCBkZWY6IHRydWUgfSxcclxuICAgICAgNzYgOiB7aWQ6IDc2LCBuYW1lOiAnbXAlJywgZGlzcGxheTogdG9QZXJjZW50LCBkZWY6IHRydWUgfSxcclxuICAgICAgNzcgOiB7aWQ6IDc3LCBuYW1lOiAnbXAgcmVjb3ZlciUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICA4MSA6IHtpZDogODEsIG5hbWU6ICdzYWZlIG1vdmUlJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZGVmOiB0cnVlIH0sXHJcblxyXG4gICAgICAvLyB0aGVzZSBhcmUgYm90aCBtaW4gYW5kIG1heFxyXG4gICAgICAvLyBzaG93cyB3aXRoIHRoZSBzYW1lIG5hbWUgYnV0IHRoZXNlIGFyZSB1c2VkIHJlYWxseSBqdXN0IGZvciBzZXQgYm9udXMgSSB0aGlua1xyXG4gICAgICAxMDEgOiB7aWQ6IDEwMSwgbmFtZTogJ3BkbWclJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlLCBxdWlja0hpZ2g6IHRydWUgfSxcclxuICAgICAgMTAyIDoge2lkOiAxMDIsIG5hbWU6ICdtZG1nJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRwczogdHJ1ZSwgcXVpY2tIaWdoOiB0cnVlIH0sXHJcblxyXG4gICAgICAxMDM6IHtpZDogMTAzLCBuYW1lOiAnY2RtZycsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBkcHM6IHRydWUsIHBjOiAxMDQsIHNlYXJjaGFibGU6IHRydWUgfSxcclxuICAgICAgMTA0OiB7aWQ6IDEwNCwgbmFtZTogJ2NyaXQgZG1nJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRwczogdHJ1ZSB9LFxyXG4gICAgICAxMDU6IHtpZDogMTA0LCBuYW1lOiAncHZwIGRtZycsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDEwNjoge2lkOiAxMDYsIG5hbWU6ICdwdnAgZGVmJywgZGlzcGxheTogaW5UaG91c2FuZHMsIG5vQ3VzdG9tOiB0cnVlLCBkZWY6IHRydWUgfSxcclxuICAgICAgMTA3OiB7aWQ6IDEwNywgbmFtZTogJ21wPycsIGRpc3BsYXk6IHRvTm9EZWMsIG5vQ3VzdG9tOiB0cnVlLCBoaWRlOiB0cnVlLCBkZWY6IHRydWUgfSxcclxuICAgICAgXHJcbiAgICAgIC8vIHN0YXRzIGJlbG93IGhlcmUgYXJlIG9uZXMgSSBtYWRlIHVwXHJcbiAgICAgIDEwMDE6IHtpZDogMTAwMSwgbmFtZTogJ2RtZycsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBzdW1tYXJ5RGlzcGxheTogdHJ1ZSwgZWxlbWVudDogJ3ByaW1hcnknLCBub0N1c3RvbTogdHJ1ZSwgaGlkZTogdHJ1ZSB9LFxyXG4gICAgICAxMDA0OiB7aWQ6IDEwMDQsIG5hbWU6ICdwZG1nJywgZGlzcGxheTogaW5UaG91c2FuZHMsIHN1bW1hcnlEaXNwbGF5OiB0cnVlLCBlbGVtZW50OiAncHJpbWFyeScsIG5vQ3VzdG9tOiB0cnVlLCBoaWRlOiB0cnVlIH0sXHJcbiAgICAgIDEwMDY6IHtpZDogMTAwNiwgbmFtZTogJ21kbWcnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgc3VtbWFyeURpc3BsYXk6IHRydWUsIGVsZW1lbnQ6ICdwcmltYXJ5Jywgbm9DdXN0b206IHRydWUsIGhpZGU6IHRydWUgfSxcclxuICAgICAgXHJcbiAgICAgIDEwMDg6IHtpZDogMTAwOCwgbmFtZTogJ3BkZWYnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBzdW1tYXJ5Rm9yOiA4IH0sXHJcbiAgICAgIDEwMDk6IHtpZDogMTAwOSwgbmFtZTogJ21kZWYnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBzdW1tYXJ5Rm9yOiA5IH0sXHJcbiAgICAgIFxyXG4gICAgICAxMDEyOiB7aWQ6IDEwMTIsIG5hbWU6ICdjcml0IGNoYW5jZScsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRwczogdHJ1ZSwgc3VtbWFyeUZvcjogMTIgfSxcclxuICAgICAgMTAyOToge2lkOiAxMDI5LCBuYW1lOiAnZmQnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIG5vQ3VzdG9tOiB0cnVlLCBkcHM6IHRydWUsIHN1bW1hcnlGb3I6IDI5IH0sXHJcbiAgICAgIDExMDM6IHtpZDogMTEwMywgbmFtZTogJ2NyaXQgZG1nJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlLCBzdW1tYXJ5Rm9yOiAxMDMgfSxcclxuICAgICAgXHJcbiAgICAgIDIwMDE6IHtpZDogMjAwMSwgbmFtZTogJ2RtZycsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBzdW1tYXJ5RGlzcGxheTogdHJ1ZSwgZWxlbWVudDogJ3NlY29uZGFyeScsIG5vQ3VzdG9tOiB0cnVlLCBoaWRlOiB0cnVlIH0sXHJcbiAgICAgIDIwMDQ6IHtpZDogMjAwNCwgbmFtZTogJ3BkbWcnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgc3VtbWFyeURpc3BsYXk6IHRydWUsIGVsZW1lbnQ6ICdzZWNvbmRhcnknLCBub0N1c3RvbTogdHJ1ZSwgaGlkZTogdHJ1ZSB9LFxyXG4gICAgICAyMDA2OiB7aWQ6IDIwMDYsIG5hbWU6ICdtZG1nJywgZGlzcGxheTogaW5UaG91c2FuZHMsIHN1bW1hcnlEaXNwbGF5OiB0cnVlLCBlbGVtZW50OiAnc2Vjb25kYXJ5Jywgbm9DdXN0b206IHRydWUsIGhpZGU6IHRydWUgfSxcclxuICAgICAgXHJcbiAgICAgIDIwMDg6IHtpZDogMjAwOCwgbmFtZTogJ3BkZWYgZXFocCcsIGRpc3BsYXk6IGluVGhvdXNhbmRzLCBub0N1c3RvbTogdHJ1ZSB9LFxyXG4gICAgICAyMDA5OiB7aWQ6IDIwMDksIG5hbWU6ICdtZGVmIGVxaHAnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgbm9DdXN0b206IHRydWUgfSxcclxuICAgICAgXHJcbiAgICAgIDMwMDA6IHtpZDogMzAwMCwgbmFtZTogJ3NrRG1nJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDMwMDE6IHtpZDogMzAwMSwgbmFtZTogJ3NrUERtZyUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRwczogdHJ1ZSB9LFxyXG4gICAgICAzMDAyOiB7aWQ6IDMwMDIsIG5hbWU6ICdza01EbWclJywgZGlzcGxheTogdG9QZXJjZW50LCBkcHM6IHRydWUgfSxcclxuICAgICAgXHJcbiAgICAgIDMwMDg6IHtpZDogMzAwOCwgbmFtZTogJ2VxaHAnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgc3VtbWFyeURpc3BsYXk6IHRydWUsIG5vQ3VzdG9tOiB0cnVlLCBoaWRlOiB0cnVlIH0sXHJcbiAgICAgIFxyXG4gICAgICA0MDEyOiB7aWQ6IDQwMTIsIG5hbWU6ICdza0NyaXQnLCBkaXNwbGF5OiBpblRob3VzYW5kcywgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDQwNTA6IHtpZDogNDA1MCwgbmFtZTogJ3NrU3RyJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDQwNTE6IHtpZDogNDA1MSwgbmFtZTogJ3NrQWdpJScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDQwNTI6IHtpZDogNDA1MiwgbmFtZTogJ3NrSW50JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDQwNTM6IHtpZDogNDA1MywgbmFtZTogJ3NrVml0JScsIGRpc3BsYXk6IHRvUGVyY2VudCwgZGVmOiB0cnVlIH0sXHJcbiAgICAgIDQwNzU6IHtpZDogNDA3NSwgbmFtZTogJ3NrSHAlJywgZGlzcGxheTogdG9QZXJjZW50LCBkZWY6IHRydWUgfSxcclxuICAgICAgNDA3Njoge2lkOiA0MDc2LCBuYW1lOiAnc2tNcCUnLCBkaXNwbGF5OiB0b1BlcmNlbnQsIGRlZjogdHJ1ZSB9LFxyXG4gICAgICBcclxuICAgICAgLy8gc3BlY2lhbCBjYXNlcyBmb3Igc2tpbGxzXHJcbiAgICAgIDEwMTY0OiB7aWQ6IDEwMTY0LCBuYW1lOiAnaW50VG9QZG1nJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDEwMTY1OiB7aWQ6IDEwMTY1LCBuYW1lOiAnc3RyVG9NZG1nJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlIH0sXHJcbiAgICAgIDEwMzcyOiB7aWQ6IDEwMzcyLCBuYW1lOiAnaW50VG9NZG1nJywgZGlzcGxheTogdG9QZXJjZW50LCBub0N1c3RvbTogdHJ1ZSwgZHBzOiB0cnVlIH0sXHJcbiAgICAgMTEwMzczOiB7aWQ6IDExMDM3MywgbmFtZTogJ2RlZlRvUGRtZycsIGRpc3BsYXk6IHRvUGVyY2VudCwgbm9DdXN0b206IHRydWUsIGRwczogdHJ1ZSB9LFxyXG4gICAgICAvLyBpdGVtcyBvdmVyIDEwMDAwIGFyZSB1bmtub3duIHNraWxsIGVmZmVjdHNcclxuICAgIH0sXHJcbiAgXHJcbiAgICByYW5rTmFtZXMgOiB7XHJcbiAgICAgIDAgOiB7IGlkOiAwLCBuYW1lIDogJ25vcm1hbCcgfSxcclxuICAgICAgMSA6IHsgaWQ6IDEsIG5hbWUgOiAnbWFnaWMnIH0sXHJcbiAgICAgIDIgOiB7IGlkOiAyLCBuYW1lIDogJ3JhcmUnIH0sXHJcbiAgICAgIDMgOiB7IGlkOiAzLCBuYW1lIDogJ2VwaWMnIH0sXHJcbiAgICAgIDQgOiB7IGlkOiA0LCBuYW1lIDogJ3VuaXF1ZScgfSxcclxuICAgICAgNSA6IHsgaWQ6IDUsIG5hbWUgOiAnbGVnZW5kYXJ5JyB9LFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2hvcE5hbWVzIDoge1xyXG4gICAgICAyODAwMTogJ2xhbWVudCcsMjgwMDI6ICdsYW1lbnQnLDI4MDAzOiAnbGFtZW50JywyODAwNDogJ2xhbWVudCcsMjgwMDU6ICdsYW1lbnQnLDI4MDA2OiAnbGFtZW50JywyODAwNzogJ2xhbWVudCcsMjgwMDg6ICdsYW1lbnQnLDI4MDA5OiAnbGFtZW50JywyODEwMTogJ2xhbWVudCcsXHJcbiAgICAgIDI5MDAxOiAnYXVyYScsMjkwMDI6ICdhdXJhJywyOTAwMzogJ2F1cmEnLDI5MDA0OiAnYXVyYScsMjkwMDU6ICdhdXJhJywyOTAwNjogJ2F1cmEnLDI5MDA3OiAnYXVyYScsMjkwMDg6ICdhdXJhJywyOTAwOTogJ2F1cmEnLFxyXG4gICAgICA1MDAxOiAnbWVkYWwnLDUwMDI6ICdtZWRhbCcsNTAwMzogJ21lZGFsJyw1MDA0OiAnbWVkYWwnLDUwMDU6ICdtZWRhbCcsNTAwNjogJ21lZGFsJyw1MDA3OiAnbWVkYWwnLDUwMDg6ICdtZWRhbCcsNTAwOTogJ21lZGFsJyxcclxuICAgICAgNTEwMTogJ2xhZGRlcicsNTEwMjogJ2xhZGRlcicsNTEwMzogJ2xhZGRlcicsNTEwNDogJ2xhZGRlcicsNTEwNTogJ2xhZGRlcicsNTEwNjogJ2xhZGRlcicsNTEwNzogJ2xhZGRlcicsNTEwODogJ2xhZGRlcicsNTEwOTogJ2xhZGRlcicsXHJcbiAgICAgIDU5MDAxOiAnZ2FyZGVuIGJ1bm55JyxcclxuICAgICAgNTIwMDEgOiAnbmlnaHRtYXJlJywgNTIwMDIgOiAnbmlnaHRtYXJlJywgNTIwMDMgOiAnbmlnaHRtYXJlJywgNTIwMDQgOiAnbmlnaHRtYXJlJywgNTIwMDUgOiAnbmlnaHRtYXJlJywgNTIwMDYgOiAnbmlnaHRtYXJlJywgNTIwMDcgOiAnbmlnaHRtYXJlJywgNTIwMDggOiAnbmlnaHRtYXJlJywgNTIwMDkgOiAnbmlnaHRtYXJlJyxcclxuICAgICAgMjE6ICdibGFja3NtaXRoJywgMjI6ICdibGFja3NtaXRoJywgMjM6ICdibGFja3NtaXRoJywgMjQ6ICdibGFja3NtaXRoJywgMjU6ICdibGFja3NtaXRoJywgMjY6ICdibGFja3NtaXRoJywgMjc6ICdibGFja3NtaXRoJywgMjg6ICdibGFja3NtaXRoJywgMjk6ICdibGFja3NtaXRoJywgXHJcbiAgICAgIDg5MDAxOiAnZ3VpbGQgbWFzdGVyJyxcclxuICAgICAgODgwMDE6ICdiYXR0bGVmaWVsZCcsIDg4MDAyOiAnYmF0dGxlZmllbGQnLCA4ODAwMzogJ2JhdHRsZWZpZWxkJywgODgwMDQ6ICdiYXR0bGVmaWVsZCcsIDg4MDA1OiAnYmF0dGxlZmllbGQnLCA4ODAwNjogJ2JhdHRsZWZpZWxkJywgODgwMDc6ICdiYXR0bGVmaWVsZCcsIDg4MDA4OiAnYmF0dGxlZmllbGQnLCA4ODAwOTogJ2JhdHRsZWZpZWxkJywgXHJcbiAgICAgIDY2MDAxOiAnZXJvc2lvbicsXHJcbiAgICAgIDM1MDA2OiAncGxhdGUnLFxyXG4gICAgICAxNDA1MTogJ2FieXNzJywgMTQwNTI6ICdhYnlzcycsIDE0MDUzOiAnYWJ5c3MnLCAxNDA1NDogJ2FieXNzJywgMTQwNTU6ICdhYnlzcycsIDE0MDU2OiAnYWJ5c3MnLCAxNDA1NzogJ2FieXNzJywgMTQwNTg6ICdhYnlzcycsIDE0MDU5OiAnYWJ5c3MnLCBcclxuICAgICAgNDAwMTE6ICdkYXJlZGV2aWwgZmFpcmUnLCA0MDAxMjogJ2RhcmVkZXZpbCBmYWlyZScsIDQwMDEzOiAnZGFyZWRldmlsIGZhaXJlJywgNDAwMTQ6ICdkYXJlZGV2aWwgZmFpcmUnLCA0MDAxNTogJ2RhcmVkZXZpbCBmYWlyZScsIDQwMDE2OiAnZGFyZWRldmlsIGZhaXJlJywgNDAwMTc6ICdkYXJlZGV2aWwgZmFpcmUnLCA0MDAxODogJ2RhcmVkZXZpbCBmYWlyZScsXHJcbiAgICAgIDQwMDAxOiAnZGFyZWRldmlsIGZhaXJlJywgNDAwMDI6ICdkYXJlZGV2aWwgZmFpcmUnLCA0MDExMTogJ2RhcmVkZXZpbCBmYWlyZScsXHJcbiAgICAgIDkxMDAxOiAnd3JhdGgnLFxyXG4gICAgICA0NTAwMTogJ2Zhcm0nLFxyXG4gICAgICAxMDAwMDQ6ICdldmVudCdcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGNoZWNrZWRSYW5rIDoge1xyXG4gICAgICAwIDogdHJ1ZSxcclxuICAgICAgMSA6IHRydWUsXHJcbiAgICAgIDIgOiB0cnVlLFxyXG4gICAgICAzIDogdHJ1ZSxcclxuICAgICAgNCA6IHRydWUsXHJcbiAgICAgIDUgOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgdHlwZU5hbWVzIDoge1xyXG4gICAgICAwIDogJ3dlYXBvbnMnLFxyXG4gICAgICAxIDogJ2VxdWlwbWVudCcsXHJcbiAgICAgIDUgOiAncGxhdGVzJyxcclxuICAgICAgOCA6ICdwb3VjaCcsXHJcbiAgICAgIDM4IDogJ3BsYXRlcycsXHJcbiAgICAgIDkwIDogJ3dlbHNwcmluZycsXHJcbiAgICAgIDEzMiA6ICd0YWxpc21hbicsXHJcbiAgICAgIDEzOSA6ICdnZW1zJyxcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGVsZW1lbnRzIDoge1xyXG4gICAgICAwIDogeyBpZDogMCwgbmFtZTogJ25vbi1lbGUnIH0sXHJcbiAgICAgIDEgOiB7IGlkOiAxLCBuYW1lOiAnZmlyZScsIGRtZ1N0YXQ6IDE2IH0sXHJcbiAgICAgIDIgOiB7IGlkOiAyLCBuYW1lOiAnaWNlJywgZG1nU3RhdDogMTcgfSxcclxuICAgICAgMyA6IHsgaWQ6IDMsIG5hbWU6ICdsaWdodCcsIGRtZ1N0YXQ6IDE4IH0sXHJcbiAgICAgIDQgOiB7IGlkOiA0LCBuYW1lOiAnZGFyaycsIGRtZ1N0YXQ6IDE5IH0sXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBkYW1hZ2VUeXBlcyA6IHtcclxuICAgICAgMCA6IHsgaWQ6IDAsIG5hbWU6ICdib3RoIHNlcGFyYXRlJyB9LFxyXG4gICAgICAxIDogeyBpZDogMSwgbmFtZTogJ3BoeXNpY2FsJyB9LFxyXG4gICAgICAyIDogeyBpZDogMiwgbmFtZTogJ21hZ2ljYWwnIH0sXHJcbiAgICAgIDMgOiB7IGlkOiAzLCBuYW1lOiAnYm90aCBjb21iaW5lZCcgfSxcclxuICAgIH0sXHJcbiAgICBcclxuICAgIC8vIG5vdGU6IHNraWxscyBzaG93biBvbi1zY3JlZW4gaGF2ZSAxayBhZGRlZCB0byB0aGVpciBpZFxyXG4gICAgc2tpbGxFZmZlY3RNYXBwaW5nIDoge1xyXG4gICAgICAyIDogeyBpZDogMiwgbmFtZTogJ3BoeWlzaWNhbCBhdHRhY2sgcG93ZXInLCBtYXBUbzogMzAwMSB9LFxyXG4gICAgICAxMyA6IHsgaWQ6IDEzLCBuYW1lOiAnbXAnLCBtYXBUbzogMjYgfSxcclxuICAgICAgMjUgOiB7IGlkOiAyNSwgbmFtZTogJ2FjdGlvbiBzcGVlZCcgfSxcclxuICAgICAgMjkgOiB7IGlkOiAyOSwgbmFtZTogJ21hZ2ljIGF0dGFjayBwb3dlcicsIG1hcFRvOiAzMDAyIH0sXHJcbiAgICAgIDMyIDogeyBpZDogMzIsIG5hbWU6ICdmaXJlICUnLCBtYXBUbzogMTYgfSxcclxuICAgICAgMzMgOiB7IGlkOiAzMywgbmFtZTogJ2ljZSAlJywgbWFwVG86IDE3IH0sXHJcbiAgICAgIDM0IDogeyBpZDogMzQsIG5hbWU6ICdsaWdodCAlJywgbWFwVG86IDE4IH0sXHJcbiAgICAgIDM1IDogeyBpZDogMzUsIG5hbWU6ICdkYXJrICUnLCBtYXBUbzogMTkgfSxcclxuICAgICAgMzYgOiB7IGlkOiAzNiwgbmFtZTogJ2ZpcmUgZGVmJywgbWFwVG86IDIwIH0sXHJcbiAgICAgIDM3IDogeyBpZDogMzcsIG5hbWU6ICdpY2UgZGVmJywgbWFwVG86IDIxIH0sXHJcbiAgICAgIDM4IDogeyBpZDogMzgsIG5hbWU6ICdsaWdodCBkZWYnLCBtYXBUbzogMjIgfSxcclxuICAgICAgMzkgOiB7IGlkOiAzOSwgbmFtZTogJ2RhcmsgZGVmJywgbWFwVG86IDIzIH0sXHJcbiAgICAgIDU4IDogeyBpZDogNTgsIG5hbWU6ICdocCUnLCBtYXBUbzogNDA3NSB9LFxyXG4gICAgICA1OSA6IHsgaWQ6IDU5LCBuYW1lOiAnbXAlJywgbWFwVG86IDQwNzYgfSxcclxuICAgICAgNjUgOiB7IGlkOiA2NSwgbmFtZTogJ3JhbmdlJyB9LFxyXG4gICAgICA3NiA6IHsgaWQ6IDc2LCBuYW1lOiAnbW92ZW1lbnQgc3BlZWQnLCBtYXBUbzogNzQgfSxcclxuICAgICAgODcgOiB7IGlkOiA4NywgbmFtZTogJ3N0ciUnLCBtYXBUbzogNDA1MCB9LFxyXG4gICAgICA4OCA6IHsgaWQ6IDg4LCBuYW1lOiAnYWdpJScsIG1hcFRvOiA0MDUxIH0sXHJcbiAgICAgIDg5IDogeyBpZDogODksIG5hbWU6ICdpbnQlJywgbWFwVG86IDQwNTIgfSxcclxuICAgICAgOTAgOiB7IGlkOiA5MCwgbmFtZTogJ3ZpdCUnLCBtYXBUbzogNDA1MyB9LFxyXG4gICAgICAvLyAxMzQgOiB7IGlkOiAxMzQsIG5hbWU6ICdwIGRtZyByZWR1Y3Rpb24lJyB9LFxyXG4gICAgICAvLyAxMzUgOiB7IGlkOiAxMzUsIG5hbWU6ICdtIGRtZyByZWR1Y3Rpb24lJyB9LFxyXG4gICAgICAxODUgOiB7IGlkOiAxODUsIG5hbWU6ICd3b3RzIGF0dGFjayBwb3dlcicsIG1hcFRvOiAzMDAwIH0sXHJcbiAgICAgIDI1MSA6IHsgaWQ6IDI1MSwgbmFtZTogJ2NyaXRpY2FsIGNoYW5jZSUnLCBtYXBUbzogMTAxMiB9LFxyXG4gICAgICAxNjQgOiB7IGlkOiAxNjQsIG5hbWU6ICdpbnRUb1BkbWcnLCBtYXBUbzogMTAxNjQgfSxcclxuICAgICAgMTY1IDogeyBpZDogMTY1LCBuYW1lOiAnc3RyVG9NZG1nJywgbWFwVG86IDEwMTY1IH0sXHJcbiAgICAgIDIyMjoge1xyXG4gICAgICAgIGlkOiAyMjIsIFxyXG4gICAgICAgIG5hbWU6ICdoZWxsZmlyZScsIFxyXG4gICAgICAgIGdldFZhbHM6IGZ1bmN0aW9uKHZhbCkge1xyXG4gICAgICAgICAgaWYodmFsLmluZGV4T2YoJzsnKSA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHZhbHMgPSB2YWwuc3BsaXQoJzsnKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICB7aWQ6IDYyLCBlZmZlY3Q6IDIyMiwgbWF4OiBOdW1iZXIodmFsc1swXSkvMTAwLjB9LFxyXG4gICAgICAgICAgICAgIHtpZDogNDAxMiwgZWZmZWN0OiAyMjIsIG1heDogTnVtYmVyKHZhbHNbMV0pfSxcclxuICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbe2lkOiA2MiwgZWZmZWN0OiAyMjIsIG1heDogTnVtYmVyKHZhbCkvMTAwLjB9XTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIDM3Mjoge1xyXG4gICAgICAgIGlkOiAzNzIsXHJcbiAgICAgICAgbmFtZTogJ3N0YXRDb252ZXJzaW9uJyxcclxuICAgICAgICBnZXRWYWxzOiBmdW5jdGlvbih2YWwpIHtcclxuICAgICAgICAgIGlmKHZhbC5pbmRleE9mKCc7JykgPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWxzID0gdmFsLnNwbGl0KCc7Jyk7XHJcbiAgICAgICAgICAgIGlmKHZhbHMubGVuZ3RoID09IDMgJiYgdmFsc1swXSA9PSAyICYmIHZhbHNbMl0gPT0gNikge1xyXG4gICAgICAgICAgICAgIHJldHVybiBbeyBpZDogMTAzNzIsIG5hbWU6ICdpbnRUb01kbWcnLCBtYXg6IE51bWJlcih2YWxzWzFdKSB9XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKHZhbHMubGVuZ3RoID09IDMgJiYgdmFsc1swXSA9PSA1ICYmIHZhbHNbMl0gPT0gNykge1xyXG4gICAgICAgICAgICAgIHJldHVybiBbeyBpZDogMTEwMzczLCBuYW1lOiAnZGVmVG9QZG1nJywgbWF4OiBOdW1iZXIodmFsc1sxXSkgfV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFxyXG4gICAgICBcclxuICAgICAgMzg5OiB7IGlkOiAzODksIG5hbWU6ICdmZCBidWYnLCBtYXBUbzogMTAyOSB9LFxyXG4gICAgICA0MDQ6IHsgaWQ6IDQwNCwgbmFtZTogJ2NyaXRpY2FsIGRhbWFnZSUnLCBtYXBUbzogMTEwMyB9LFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2VtRXhjaGFuZ2VzOiBbXHJcbiAgICAgIHtpZDogMiwgZXhjaGFuZ2U6IDEsIG5hbWU6ICdXZWFwb24nfSxcclxuICAgICAge2lkOiAzLCBleGNoYW5nZTogMiwgbmFtZTogJ09mZi1IYW5kIFdlYXBvbid9LFxyXG4gICAgICB7aWQ6IDQsIGV4Y2hhbmdlOiAzLCBuYW1lOiAnSGVhZGdlYXInfSxcclxuICAgICAge2lkOiA1LCBleGNoYW5nZTogNCwgbmFtZTogJ0JvZHkgQXJtb3InfSxcclxuICAgICAge2lkOiA2LCBleGNoYW5nZTogNSwgbmFtZTogJ0xlZyBBcm1vcid9LFxyXG4gICAgICB7aWQ6IDcsIGV4Y2hhbmdlOiA2LCBuYW1lOiAnR2xvdmVzJ30sXHJcbiAgICAgIHtpZDogOCwgZXhjaGFuZ2U6IDcsIG5hbWU6ICdTaG9lcyd9LFxyXG4gICAgICB7aWQ6IDEwMSwgZXhjaGFuZ2U6IDgsIG5hbWU6ICdOZWNrbGFjZSd9LFxyXG4gICAgICB7aWQ6IDEwMiwgZXhjaGFuZ2U6IDksIG5hbWU6ICdFYXJyaW5ncyd9LFxyXG4gICAgICB7aWQ6IDEwMywgZXhjaGFuZ2U6IDEwLCBuYW1lOiAnUmluZyd9LFxyXG4gICAgXSxcclxuICAgIFxyXG4gICAgY3VzdG9tSXRlbXM6IFxyXG4gICAgW1xyXG4gICAge2lkOiAwLCB0eXBlTmFtZTonY3VzdG9tJywgbmFtZTogJ2hwIHVuaWZpZWQnLCBzdGF0czogW3tpZDogNDA3NSwgbWF4OjAuMDV9XX0sXHJcbiAgICBdLFxyXG4gIFxyXG4gICAgZ2V0U3RhdHMgOiBmdW5jdGlvbihkYXRhKSB7XHJcblxyXG4gICAgICB2YXIgdXNlTWF4PWZhbHNlO1xyXG4gICAgICB2YXIgdXNlU3RhdGVYVmFsPWZhbHNlO1xyXG4gICAgICB2YXIgbWlnaHRIYXZlU2V0cz10cnVlO1xyXG4gICAgICB2YXIgcHJvcCA9ICdTdGF0ZTFfTWF4JztcclxuICAgICAgaWYocHJvcCBpbiBkYXRhKSB7XHJcbiAgICAgICAgdXNlTWF4ID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBwcm9wID0gJ1N0YXRlMVZhbHVlJztcclxuICAgICAgICBpZihwcm9wIGluIGRhdGEpIHtcclxuICAgICAgICAgIHVzZVN0YXRlWFZhbCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB2YXIgY3VycmVudFN0YXRlID0gMDtcclxuICAgICAgdmFyIHN0YXRWYWxzID0gW107XHJcbiAgICAgIGZvcig7Oykge1xyXG4gICAgICAgIGN1cnJlbnRTdGF0ZSsrO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBzdGF0ZVByb3AgPSAnU3RhdGUnICsgY3VycmVudFN0YXRlO1xyXG4gICAgICAgIGlmKCEoc3RhdGVQcm9wIGluIGRhdGEpKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdGF0ZUlkID0gZGF0YVtzdGF0ZVByb3BdO1xyXG4gICAgICAgIGlmKHN0YXRlSWQgPT0gLTEpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZihzdGF0ZUlkID09IDEwNykge1xyXG4gICAgICAgICAgLy8gaXMgdGhpcyBtcD9cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHZhciBjdXJyZW50RGF0YSA9IHsgaWQ6IHN0YXRlSWQgfTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdmFyIHByb3A7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICBpZih1c2VNYXgpIHtcclxuICAgICAgICAgICAgcHJvcCA9ICdTdGF0ZScgKyBjdXJyZW50U3RhdGUgKyAnX01heCc7XHJcbiAgICAgICAgICAgIGN1cnJlbnREYXRhLm1heCA9IGRhdGFbcHJvcF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKHVzZVN0YXRlWFZhbCkge1xyXG4gICAgICAgICAgICBwcm9wID0gJ1N0YXRlJyArIGN1cnJlbnRTdGF0ZSArICdWYWx1ZSc7XHJcbiAgICAgICAgICAgIGN1cnJlbnREYXRhLm1heCA9IGRhdGFbcHJvcF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcHJvcCA9ICdTdGF0ZVZhbHVlJyArIGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICAgICAgY3VycmVudERhdGEubWF4ID0gTnVtYmVyKGRhdGFbcHJvcF0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZihjdXJyZW50RGF0YS5tYXggPiAwIHx8IGN1cnJlbnREYXRhLm1heCA8IDApIHtcclxuICAgICAgICAgICAgaWYobWlnaHRIYXZlU2V0cykge1xyXG4gICAgICAgICAgICAgIHByb3AgPSAnTmVlZFNldE51bScgKyBjdXJyZW50U3RhdGU7XHJcbiAgICAgICAgICAgICAgaWYocHJvcCBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZihkYXRhW3Byb3BdID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0YS5uZWVkU2V0TnVtID0gZGF0YVtwcm9wXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtaWdodEhhdmVTZXRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhdFZhbHMucHVzaChjdXJyZW50RGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gc3RhdFZhbHM7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBzZXR1cFN0YXQgOiBmdW5jdGlvbihzdGF0LCBpZCkge1xyXG4gICAgICBzdGF0LmlkID0gTnVtYmVyKGlkKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIG1lcmdlU3RhdHMgOiBmdW5jdGlvbihzdGF0czEsIHN0YXRzMikge1xyXG4gICAgICB2YXIgc3RhdE1hcCA9IHt9O1xyXG4gICAgICBcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICBmdW5jdGlvbiBhZGQodmFsdWUpIHtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgYW1vdW50ID0gTnVtYmVyKHZhbHVlLm1heCk7XHJcbiAgICAgICAgaWYoc2VsZi5zdGF0c1t2YWx1ZS5pZF0gJiYgJ3BjJyBpbiBzZWxmLnN0YXRzW3ZhbHVlLmlkXSkge1xyXG4gICAgICAgICAgYW1vdW50ID0gTWF0aC5mbG9vcihhbW91bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZih2YWx1ZS5pZCBpbiBzdGF0TWFwKSB7XHJcbiAgICAgICAgICBzdGF0TWFwW3ZhbHVlLmlkXSArPSBhbW91bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgc3RhdE1hcFt2YWx1ZS5pZF0gPSBhbW91bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBhbmd1bGFyLmZvckVhY2goc3RhdHMxLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgaWYodmFsdWUpIHtcclxuICAgICAgICAgIGFkZCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGlmKHN0YXRzMikge1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzdGF0czIsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGFkZCh2YWx1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHZhciBuZXdTdGF0cyA9IFtdO1xyXG4gICAgICBcclxuICAgICAgZm9yKHZhciBrZXkgaW4gc3RhdE1hcCkge1xyXG4gICAgICAgIHZhciBzdGF0ID0geyBtYXggOiBzdGF0TWFwW2tleV0sIGlkOiBOdW1iZXIoa2V5KSB9O1xyXG4gICAgICAgIG5ld1N0YXRzLnB1c2goc3RhdCk7XHJcbiAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgcmV0dXJuIG5ld1N0YXRzO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxufSkoKTsiXX0=
