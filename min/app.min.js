"use strict";!function(){function l(l){l.when("/about",{templateUrl:"ui/about/about.html",controller:"AboutCtrl as about"}).when("/setup",{templateUrl:"ui/nav/setup.html",controller:"SetupCtrl"}).when("/test",{templateUrl:"ui/nav/test.html",controller:"TestCtrl"}).when("/items",{templateUrl:"ui/search/everything-search.html",controller:"ItemsCtrl as items",reloadOnSearch:!1}).when("/",{templateUrl:"ui/welcome.html"}).when("/builds",{templateUrl:"ui/builds/build-list.html",controller:"BuildListCtrl as buildList"}).when("/build/:buildName*",{templateUrl:"ui/builds/build-list.html",controller:"BuildListCtrl as buildList"}).when("/view-group/:region?",{templateUrl:"ui/builds/view-group.html",controller:"ViewGroupCtrl"}).when("/edit-build/:buildName*",{templateUrl:"ui/builds/edit-build.html",controller:"EditBuildCtrl as editGroup"}).when("/new-build",{templateUrl:"ui/builds/edit-build.html",controller:"EditBuildCtrl as editGroup"}).when("/delete-build/:name*",{templateUrl:"ui/builds/delete-build.html",controller:"DeleteBuildCtrl as deleteBuild"}).when("/reload-build/:name*",{templateUrl:"ui/builds/reload-build.html",controller:"ReloadBuildCtrl as ctrl"}).when("/search/:cat?",{templateUrl:"ui/search/search.html",controller:"ItemSearchCtrl as ctrl",reloadOnSearch:!1}).when("/item",{templateUrl:"ui/item/item.html",controller:"ItemCtrl"}).when("/item/:region?/:i*",{templateUrl:"ui/item/item.html",controller:"ItemCtrl"}).when("/export",{templateUrl:"ui/nav/export.html",controller:"ExportCtrl"}).when("/talismans",{templateUrl:"ui/builds/build-talismans.html",controller:"BuildTalismansCtrl as ctrl"}).when("/publish",{templateUrl:"ui/online/publish.html",controller:"PublishCtrl as ctrl"}).when("/profile/:uid?",{templateUrl:"ui/online/profile.html",controller:"ProfileCtrl as ctrl"}).when("/published",{templateUrl:"ui/online/published.html",controller:"PublishedCtrl as ctrl"}).when("/import",{templateUrl:"ui/builds/build-import.html",controller:"BuildImportCtrl as ctrl"}).when("/published/:uid/:buildName*",{templateUrl:"ui/online/published.html",controller:"PublishedCtrl as ctrl"}).when("/build-search/:jobId?",{templateUrl:"ui/online/build-search.html",controller:"BuildSearchCtrl as ctrl"}).otherwise({redirectTo:"/"})}angular.module("dnsim").config(["$routeProvider",l])}();
"use strict";!function(){angular.module("dnsim").controller("AboutCtrl",["$window",function(t){document.body.className="default-back",t.document.title="dngearsim | ABOUT/FAQ"}])}();
"use strict";angular.module("dnsim").controller("buildActionsCtrl",["$location","saveHelper","exportLinkHelper",function(e,i,l){var t=this;this.deleteGroup=function(){e.path("/delete-build/"+t.buildName)},this.editGroup=function(){e.path("/edit-build/"+t.buildName)},this.copyGroup=function(){var l=i.importGroup(t.buildName,t.build.items);i.renameSavedGroup(l,l,t.build.enemyLevel,t.build.playerLevel,t.build.heroLevel,t.build.job,t.build.damageType,t.build.element,t.build.secondaryElement,t.build.enemyStatCaps,t.build.playerStatCaps,t.build.conversions,t.build.baseStats,t.build.heroStats),e.path("/build/"+l)},this.reloaded=!1,this.reloadGroup=function(){e.path("/reload-build/"+t.buildName)},this.createShortUrl=function(){l.createShortUrl(t.buildName,t.build)},this.setShortUrl=function(){if(t.build){var e=l.createGroupLink(t.buildName,t.build);t.build.shortUrl=sessionStorage.getItem(e)}},this.setShortUrl()}]).directive("dngearsimBuildActions",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build",onChange:"&onChange"},controller:"buildActionsCtrl",controllerAs:"buildActions",templateUrl:"ui/builds/build-actions.html"}});
"use strict";angular.module("dnsim").controller("buildExportActionCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset",function(t,e,l,r,i,o,n,u,a,d,s){function c(){var t=new Blob([JSON.stringify(p.build,null,1)],{type:"text/plain;charset=utf-8"});saveAs(t,"dngearsim-"+p.buildName+".json")}var p=this;p.export=c}]).directive("dngearsimBuildExportAction",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build"},controller:"buildExportActionCtrl",controllerAs:"ctrl",templateUrl:"ui/builds/build-export-action.html"}});
"use strict";angular.module("dnsim").controller("BuildImportCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset",function(e,l,t,i,a,r,n,u,d,o,s){function b(l){var t=l.target.files;if(console.log("importing files",t),t&&t.length){var i=t[0].name,a=new FileReader;a.readAsText(t[0]),a.onload=function(){p.build=JSON.parse(a.result),i&&i.length>5?(p.buildName=i.substr(0,i.length-5),p.buildName=p.buildName.replace("dngearsim-","")):p.buildName="imported build",e()}}}function m(){var e=r.importGroup(p.buildName,p.build.items);r.renameSavedGroup(e,e,p.build.enemyLevel,p.build.playerLevel,p.build.heroLevel,p.build.job,p.build.damageType,p.build.element,p.build.secondaryElement,p.build.enemyStatCaps,p.build.playerStatCaps,p.build.conversions,p.build.baseStats,p.build.heroStats),l.path("/build/"+e)}var p=this;p.onFileChange=b,p.copyLocally=m}]);
"use strict";angular.module("dnsim").controller("buildItemCtrl",["$timeout","statHelper","saveHelper","hCodeValues",function(t,e,l,i){function m(t){if(t.gemSlot)for(var e=0;e<a.gemSlots.length;++e)if(a.gemSlots[e].id==t.gemSlot)return a.gemSlots[e].name}function n(){a.item.fullStats=a.item.stats,null!=a.item.enchantmentStats&&a.item.enchantmentStats.length>0&&(a.item.fullStats=i.mergeStats(a.item.enchantmentStats,a.item.fullStats)),null!=a.item.sparkStats&&a.item.sparkStats.length>0&&(a.item.fullStats=i.mergeStats(a.item.sparkStats,a.item.fullStats))}var a=this;a.updateItem=n,a.gemSlots=i.gemExchanges,a.getGemSlotName=m}]).directive("dngearsimBuildItem",function(){return{scope:!0,bindToController:{item:"=item",editMode:"=editMode",onChange:"&onChange",cancelEdit:"&cancelEdit"},controller:"buildItemCtrl",controllerAs:"ctrl",templateUrl:"ui/builds/build-item.html"}});
"use strict";angular.module("dnsim").controller("BuildListCtrl",["$window","$location","$routeParams","$timeout","saveHelper",function(t,e,s,i,u){var r=this;document.body.className="saved-back",this.setupBuilds=function(){r.savedItems=u.getSavedItems(),r.buildNames=Object.keys(r.savedItems).sort(),r.builds=[];for(var t=0;t<r.buildNames.length;++t)r.builds.push({name:r.buildNames[t],build:r.savedItems[r.buildNames[t]]})},this.setupBuilds(),"buildName"in s?s.buildName in r.savedItems?s.buildName!=this.currentGroup&&(this.currentGroup=s.buildName,u.saveBuildSelection(this.currentGroup,this.savedItems)):e.path("/builds/"):this.currentGroup&&this.currentGroup in this.savedItems?e.path("/build/"+this.currentGroup):this.currentGroup=null,this.currentGroup?t.document.title="dngearsim | "+this.currentGroup:t.document.title="dngearsim | BUILDS",this.anyItems=function(){return Object.keys(this.savedItems).length>0},this.createGroup=function(){e.path("/new-build")},this.handleChange=function(){r.setupBuilds(),i()},this.toggleGroup=function(t){u.saveBuildSelection(t,this.savedItems),e.url("/build/"+t)},this.publish=function(){e.url("/publish")},this.search=function(){e.url("/build-search")}}]);
"use strict";angular.module("dnsim").controller("buildStatsCtrl",["$routeParams","$location","hCodeValues","statHelper","itemCategory",function(t,l,r,s,e){}]).directive("dngearsimBuildStats",function(){return{scope:!0,bindToController:{stats:"=stats",build:"=build"},controller:"buildStatsCtrl",controllerAs:"statsCtrl",templateUrl:"ui/builds/build-stats.html"}});
"use strict";angular.module("dnsim").controller("buildSummaryCtrl",["$routeParams","$location","hCodeValues","statHelper","itemCategory",function(t,e,i,l,a){var r=this;this.stats=l.getBuildStats(this.build),this.itemsByCategory=a.getItemsByCategory(this.build.items),this.getSaveDate=function(t){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleDateString()}},this.getSaveTime=function(t){if(r.build.lastUpdate>0){return new Date(r.build.lastUpdate).toLocaleTimeString()}},this.getBuildSummary=function(t){var e="";return angular.forEach(r.itemsByCategory,function(t,i){t.length>0&&(e.length>0&&(e+=", "),e+=t.length+" "+i)}),e}}]).directive("dngearsimBuildSummary",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build"},controller:"buildSummaryCtrl",controllerAs:"buildCtrl",templateUrl:"ui/builds/build-summary.html"}});
"use strict";angular.module("dnsim").controller("BuildTalismansCtrl",["$window","$location","$routeParams","$timeout","saveHelper","statHelper","jobs","hCodeValues","itemColumnsToLoad","character",function(e,t,s,a,n,m,i,r,u,c){function l(e,t){return e&&t?Math.round(1e4*(1-t/e))/100:0}var o=this;if(e.document.title="dngearsim | TALISMANS",e.scrollTo(0,0),this.savedItems=n.getSavedItems(),this.groupNames=Object.keys(this.savedItems),this.groupNames||(this.groupNames=[]),this.groupNames.length>0?this.groupName=n.getCurrentBuild():this.groupName=null,this.groupName&&this.groupName in this.savedItems||this.groupNames.length>0&&(this.groupName=this.groupNames[0]),this.groupName){this.getGroupCalcStats=function(){if(null==this.groupCalcStats){var e=o.savedItems[o.groupName];e&&(this.groupCalcStats=m.getCalculatedStatsFromItems(e,e.items))}return this.groupCalcStats},this.getBuild=function(){return o.savedItems[o.groupName]},this.pickup=function(e){o.selectedIndex=e,o.replaceHPAffectAmount=[],o.replaceMDmgAffectAmount=[],o.replacePDmgAffectAmount=[],o.replaceAvgDmgAffectAmount=[]},this.headers=["+100%","+75%","+25%","+0%"],this.summaryStatIds=[];for(var d in r.stats)r.stats[d].summaryDisplay&&this.summaryStatIds.push(d);this.pcIndexes={},this.pcIndexes[100]=0,this.pcIndexes[75]=1,this.pcIndexes[25]=2,this.pcIndexes[0]=3,this.selectedIndex=-1,this.rows=[],this.updateRows=function(){o.rows=[],angular.forEach(o.savedItems[o.groupName].items,function(e,t){if("talisman"==e.typeName){var s=o.pcIndexes[e.enchantmentNum];s||0==s||(s=3);for(var a=0;;){if(o.rows[a]||(o.rows[a]=o.makeFakeCells()),o.rows[a][s].index<0){e.enchantmentNum||(e.enchantmentNum=0);var n=o.makeCell(e,t);o.rows[a][s]=n;break}a++}}}),o.rows.length<3&&(o.rows[o.rows.length+1]=o.makeFakeCells())},this.makeFakeCells=function(e){return[o.makeCell({enchantmentNum:100},-1),o.makeCell({enchantmentNum:75},-2),o.makeCell({enchantmentNum:25},-3),o.makeCell({enchantmentNum:0},-4)]},this.makeCell=function(e,t){return{item:e,index:t}},this.click=function(e){o.selectedIndex==-1?e.index>=0&&o.pickup(e.index):o.move(e)},this.move=function(e){var t=o.savedItems[o.groupName].items;if(e.index>=0){var s=e.item.enchantmentNum;o.setTalisman(e.item,t[o.selectedIndex].enchantmentNum),o.setTalisman(t[o.selectedIndex],s),t[e.index]=t[o.selectedIndex],t[o.selectedIndex]=e.item}else{var n=t[o.selectedIndex];o.setTalisman(n,e.item.enchantmentNum),t.splice(o.selectedIndex,1),t.push(n)}o.groupCalcStats=null,o.selectedIndex=-1,o.updateRows(),o.replaceAffectAmount={},a()},this.setTalisman=function(e,t){var s=[];angular.forEach(e.stats,function(e,a){t&&s.push({id:e.id,max:e.max*(t/100)})}),e.enchantmentStats=s,e.enchantmentNum=t,e.fullStats=r.mergeStats(e.enchantmentStats,e.stats)},this.replaceAffectAmount={},this.getReplaceAffectAmount=function(e,t,s){if(this.initReplaceAffects(t,s),this.replaceAffectAmount[t])return this.replaceAffectAmount[t][e]},this.initReplaceAffects=function(e,t){if(!o.replaceAffectAmount[e]&&o.selectedIndex!=-1){this.replaceAffectAmount[e]={};var s=o.savedItems[o.groupName],a=s.items[o.selectedIndex],n=[],i=[];t.stats&&(angular.forEach(t.stats,function(e,t){n.push({id:e.id,max:e.max*(a.enchantmentNum/100)})}),i=r.mergeStats(n,t.stats)),n=[],angular.forEach(a.stats,function(e,s){n.push({id:e.id,max:e.max*(t.enchantmentNum/100)})});var u=r.mergeStats(n,a.stats),c=[{stats:i},{stats:u}];angular.forEach(s.items,function(e,s){t!==e&&a!==e&&c.push(e)});var d=m.getCalculatedStatsFromItems(s,c),h=o.getGroupCalcStats();for(var p in r.stats)r.stats[p].summaryDisplay&&(o.replaceAffectAmount[e][p]=l(o.getStat(p,d).max,o.getStat(p,h).max))}},this.getStatName=function(e){var t="";if("primary"==r.stats[e].element){var s=0;o.savedItems[o.groupName].element&&(s=o.savedItems[o.groupName].element.id),t+=r.elements[s].name}else if("secondary"==r.stats[e].element){var s=0;o.savedItems[o.groupName].secondaryElement&&(s=o.savedItems[o.groupName].secondaryElement.id),t+=r.elements[s].name}return t+" "+r.stats[e].name},this.getStat=function(e,t){for(var s=t.length,a=0;a<s;++a)if(t[a].id==e)return t[a];return{id:e,max:0}},this.save=function(){n.updatedSavedItems(o.groupName,o.savedItems[o.groupName].items),t.path("/build/"+o.groupName)},this.updateRows()}}]);
"use strict";angular.module("dnsim").controller("buildCtrl",["$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper",function(e,t,n,a,i,r){var s=this;this.stats=a.getBuildStats(this.build);var o=localStorage.getItem("selectedItemCategory");this.category=i.byName(o),this.category&&!this.category.hideInBuild||(o="titles",this.category=i.byName("titles")),this.getCategoryItems=function(){var e=i.getItemsByCategory(this.build.items);return s.category.name in e?e[s.category.name]:[]};var u={},m="";this.getSubCategories=function(){if(m!=s.category.name){u={},m=s.category.name;var e=[],t=s.build.items.sort(function(e,t){return e.exchangeType-t.exchangeType});"increasing gems"==s.category.name?e=_.filter(t,function(e){return e.increasingGemSlots>0}):"offensive gems"==s.category.name&&(e=_.filter(t,function(e){return e.offensiveGemSlots>0})),_.each(e,function(e){e.exchangeType in u||(u[e.exchangeType]={names:[],slots:0,exchangeType:e.exchangeType}),u[e.exchangeType].names.push(e.name),"increasing gems"==s.category.name&&(u[e.exchangeType].slots+=e.increasingGemSlots),"offensive gems"==s.category.name&&(u[e.exchangeType].slots+=e.offensiveGemSlots)}),u[0]=null}return u},this.getNumTaken=function(e){var t=0,a=_.find(n.gemExchanges,function(t){return t.exchange==e.exchangeType});if(a){var i=this.getCategoryItems();_.each(i,function(e){e.gemSlot==a.id&&++t})}return t},this.isInSubCat=function(e,t){if(!t&&!e.gemSlot)return!0;var a=_.find(n.gemExchanges,function(t){return t.id==e.gemSlot});if(t||!a)return!(!t||!a)&&a.exchange==t.exchangeType;var i=this.getSubCategories();return!_.find(i,function(e){return null!=e&&a.exchange==e.exchangeType})||void 0},this.canMove=function(){return"increasing gems"==s.category.name||"offensive gems"==s.category.name},this.move=function(e,t){m="";var a=_.find(n.gemExchanges,function(e){return e.exchange==t.exchangeType});e.gemSlot=a.id,r.updatedSavedItems(s.buildName,s.build.items),s.handleChange()},this.getCategories=function(){return i.categories},this.setSelectedCategory=function(e){this.category=i.byName(e),localStorage.setItem("selectedItemCategory",e)},this.getSaveDate=function(e){if(s.build.lastUpdate>0){return new Date(s.build.lastUpdate).toLocaleDateString()}},this.getSaveTime=function(e){if(s.build.lastUpdate>0){return new Date(s.build.lastUpdate).toLocaleTimeString()}},this.allowMoreItems=function(){return!s.category.maxCat||this.getCategoryItems().length<s.category.maxCat},this.getItemCount=function(){var e="",t=s.build.items;if("offensive gems"==s.category.name){var n=0,a=0;angular.forEach(t,function(e,t){e.typeName==s.category.name?a++:e.offensiveGemSlots&&(n+=e.offensiveGemSlots)}),e=a+" / "+n}else if("increasing gems"==s.category.name){var r=0,o=0,u={};angular.forEach(t,function(e,t){if(e.typeName==s.category.name){var n=e.sparkTypeId;n||(n=0),n in u||(u[n]=0),u[n]++,r++}else e.increasingGemSlots&&(o+=e.increasingGemSlots)}),e="",angular.forEach(u,function(t,n){e.length>0&&(e+="+"),e+=t}),e=r+" ("+e+") / "+o}else{var m=0;angular.forEach(t,function(e,t){e&&e.typeName==s.category.name&&m++}),e=m;var c=i.byName(s.category.name);c&&"numItemText"in c&&(e+=" / "+c.numItemText)}return e},this.newCustom=function(){var e={id:0,typeName:"custom",name:"new custom item",stats:[]};s.build.items=s.build.items.concat(e),r.updatedSavedItems(s.buildName,s.build.items),s.handleChange()},this.handleChange=function(){s.stats=a.getBuildStats(s.build),s.onChange()},this.handleItemEdit=function(){r.updatedSavedItems(s.buildName,s.build.items),s.handleChange()},this.cancelEdit=function(){s.onChange()},this.canEdit=function(e){return"custom"==e.typeName||"weapons"==e.typeName||"armour"==e.typeName||"offensive gems"==e.typeName||"increasing gems"==e.typeName},this.removeItem=function(e){m="",e.removeItem=!0;var t=[];angular.forEach(s.build.items,function(e,n){e&&!e.removeItem&&t.push(e)}),s.build.items=t,r.updatedSavedItems(s.buildName,t),s.handleChange()}}]).directive("dngearsimBuild",function(){return{scope:!0,bindToController:{buildName:"=buildName",build:"=build",onChange:"&onChange",server:"=server"},controller:"buildCtrl",controllerAs:"buildCtrl",templateUrl:"ui/builds/build.html"}});
"use strict";angular.module("dnsim").controller("DeleteBuildCtrl",["$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad",function(e,t,n,a,i,l,o,s){this.newGroup=!0,"name"in t&&(this.name=t.name),this.delete=function(){a.deleteBuild(this.name),e.path("/builds/")}}]);
"use strict";!function(){function e(e,t,n,o,a,r,l,m,u,p,s){var i=this;i.savedItems=a.getSavedItems(),i.group={},i.newGroup=!0,"buildName"in n?(i.groupName=n.buildName,i.groupName in i.savedItems&&(i.group=i.savedItems[i.groupName],i.newGroup=!1)):i.groupName="",i.oldGroupName=i.groupName,i.heroStats=[],i.elements=m.elements,i.damageTypes=m.damageTypes,i.initDamageType=function(){i.job&&(i.group.damageType?i.damageType=i.group.damageType:i.newGroup&&"DamageType"in i.job.d?i.job.d.DamageType?i.damageType=m.damageTypes[2]:i.damageType=m.damageTypes[1]:i.damageType=m.damageTypes[0])},i.initDefaultElement=function(){var e=m.elements[0],t=m.elements[0];if(i.job&&i.job.d){var n=i.job.d.EnglishName;"CRUSADES"==n||"INQUISITOR"==n||"GUARDIAN"==n||"SAINT"==n||"SILVERHUNTER"==n||"STINGBREEZER"==n?(e=m.elements[3],t=m.elements[3]):"RAVEN"==n||"MAJESTY"==n||"SOULEATER"==n||"DARKSUMMONER"==n||"ABYSSWALKER"==n||"BLACKMARA"==n||"PHYSICIAN"==n?(e=m.elements[4],t=m.elements[4]):"SALEANA"==n||"RIPPER"==n||"DARKAVENGER"==n?(e=m.elements[1],t=m.elements[1]):"ELESTRA"==n?(e=m.elements[2],t=m.elements[2]):"ADEPT"==n?(e=m.elements[1],t=m.elements[2]):"LIGHTFURY"==n&&(e=m.elements[3],t=m.elements[4])}i.newGroup&&(i.element=e,i.secondaryElement=t),i.element||(i.element=e),i.secondaryElement||(i.secondaryElement=e)},i.group.element?i.element=i.group.element:i.element=m.elements[0],i.group.secondaryElement?i.secondaryElement=i.group.secondaryElement:i.secondaryElement=m.elements[0],i.group.enemyLevel?i.enemyLevel=i.group.enemyLevel:i.enemyLevel=90,i.group.playerLevel?i.playerLevel=i.group.playerLevel:i.playerLevel=93,i.group.heroLevel&&i.group.heroLevel>0?i.heroLevel=i.group.heroLevel:i.heroLevel=1,i.init=function(){var e=l.getFinalJobs();e.length>0&&o(function(){"job"in i.group&&angular.forEach(e,function(e,t){e.id==i.group.job.id&&(i.job=e)}),i.initDamageType(),i.initDefaultElement(),i.setHeroStats()})},i.setJob=function(){e.scrollTo(0,0),o(function(){i.initDamageType(),i.initDefaultElement()})},s.init(),p.init(function(){i.init()}),i.getStatCap=function(e,t){return p.getStatCaps(t)[e]},i.getJobConversion=function(e){return p.getConversions(i.job.id)[e]},i.getJobBaseStat=function(e){return p.getBaseStats(i.playerLevel,i.job.id)[e]},i.invalidGroupName=function(){return!i.groupName||!(!(i.groupName in i.savedItems)||!i.newGroup&&i.groupName==i.oldGroupName)},i.ok=function(){var e=p.getStatCaps(i.enemyLevel),n=p.getStatCaps(i.playerLevel),o=p.getConversions(i.job.id),r=p.getBaseStats(i.playerLevel,i.job.id),l=p.getHeroStats(i.heroLevel);i.newGroup&&(i.oldGroupName=i.groupName,a.importGroup(i.groupName,[])),a.renameSavedGroup(i.oldGroupName,i.groupName,i.enemyLevel,i.playerLevel,i.heroLevel,i.job,i.damageType,i.element,i.secondaryElement,e,n,o,r,l),t.path("/build/"+i.groupName)},i.setHeroStats=function(){i.heroStats=p.getHeroStats(i.heroLevel)},o(function(){var e=document.getElementById("groupNameInput");e&&(e.focus(),e.setSelectionRange(0,9999))})}e.$inject=["$window","$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad","character","region"],angular.module("dnsim").controller("EditBuildCtrl",e)}();
"use strict";angular.module("dnsim").controller("quickAddCtrl",["$timeout","statHelper","saveHelper","quickAdd","itemCategory","jobs","dntData","exportLinkHelper",function(t,e,n,i,a,o,s,r){var u=this;u.startedForCat="",u.stepNumber=0,u.datas=[],u.options=[],this.setOptions=function(){u.hasStarted()&&(u.options=i.getOptions(u.category,u.build,u.datas),1==u.options.length&&u.selectOption(u.options[0]))},this.selectOption=function(t){var e=i.createData(t,u.category,u.stepNumber);if(u.datas.push(e),u.stepNumber++,i.isValidStepNumber(u.category,u.stepNumber))u.setOptions();else{var n=i.getItem(u.datas),a=r.getDntFiles(n);angular.forEach(a,function(t,e){s.init(e,t,function(){},function(){u.tryToAddItem(a,n)})}),u.tryToAddItem(a,n)}},this.tryToAddItem=function(t,e){if(!s.anyLoading()){var i=!0;if(angular.forEach(t,function(t,e){s.isLoaded(e)||(i=!1)}),i&&u.datas.length>0){u.cancel();var a=r.reloadItem(e);n.saveItem(u.buildName,a),u.build.items.push(a),u.onChange()}}},this.reset=function(){u.stepNumber=0,u.datas=[],t(function(){u.setOptions()})},this.hasStarted=function(){return u.startedForCat==u.category.name},this.start=function(){u.startedForCat=u.category.name,o.init(function(){},u.reset),a.init(u.category.name,u.reset)},this.hasOptions=function(){return i.hasOptions(u.category,u.build,[])},this.cancel=function(){u.startedForCat="",u.reset()},this.back=function(){if(0==u.stepNumber)u.cancel();else{do{u.stepNumber--,u.datas.pop();var t=i.getOptions(u.category,u.build,u.datas)}while(t.length<=1&&u.stepNumber>0);u.setOptions()}},s.init("exchange.lzjson",null,function(){},u.reset)}]).directive("dngearsimQuickAdd",function(){return{scope:!0,bindToController:{category:"=category",build:"=build",buildName:"=buildName",onChange:"&onChange"},controller:"quickAddCtrl",controllerAs:"quickAdd",templateUrl:"ui/builds/quick-add.html"}});
"use strict";function reloadBuildCtrl(e,a,n,i,t,d,l,o){function r(){}function u(){if(!s.reloaded){var e=!0,a=l.getDntFiles(s.build);if(angular.forEach(a,function(a,n){if(!t.isLoaded(n))return void(e=!1)}),e&&o.isLoaded()){var n=l.reloadGroup(s.name,s.build);i.updatedSavedItems(s.name,n),s.build.items=n,s.reloaded=!0}}}var s=this;"name"in a&&(s.name=a.name);var m=i.getSavedItems();s.name in m&&(s.build=m[s.name]),s.reloaded=!1,s.reload=function(){d(),s.reloaded=!1,o.init(r,u);var e=l.getDntFiles(s.build);angular.forEach(e,function(e,a){t.init(a,e,r,u)})},s.goToBuild=function(){e.path("/build/"+s.name)}}angular.module("dnsim").controller("ReloadBuildCtrl",["$location","$routeParams","$timeout","saveHelper","dntData","dntReset","groupHelper","translations",reloadBuildCtrl]);
"use strict";angular.module("dnsim").controller("ViewGroupCtrl",["$scope","$window","region","$location","$routeParams","saveHelper","dntData","$timeout","translations","dntReset","exportLinkHelper","groupHelper","jobs","character","statHelper","hCodeValues",function(e,a,t,s,n,l,o,i,r,d,m,u,p,b,v,y){function c(){var a=!0;angular.forEach(u.getDntFiles(e.build),function(e,t){o.isLoaded(t)||(a=!1)}),a&&!o.anyLoading()&&r.isLoaded()&&p.isLoaded()&&i(function(){var a=e.buildName,t=e.build;e.job=p.getById(e.job.id),e.enemyStatCaps=b.getStatCaps(e.enemyLevel),e.playerStatCaps=b.getStatCaps(e.playerLevel),e.job&&(e.conversions=b.getConversions(e.job.id),e.baseStats=b.getBaseStats(e.playerLevel,e.job.id)),e.heroStats=b.getHeroStats(e.heroLevel);var s=u.reloadGroup(a,t);e.savedItems={},e.build={items:s,lastUpdate:t.lastUpdate,enemyLevel:e.enemyLevel,playerLevel:e.playerLevel,heroLevel:e.heroLevel,job:e.job,damageType:e.damageType,element:e.element,secondaryElement:e.secondaryElement,enemyStatCaps:e.enemyStatCaps,playerStatCaps:e.playerStatCaps,conversions:e.conversions,baseStats:e.baseStats,heroStats:e.heroStats},e.savedItems[a]=e.build,e.stats=v.getBuildStats(e.build);var n=m.createGroupLink(e.buildName,e.build);e.build.shortUrl=sessionStorage.getItem(n)})}function g(){}if(document.body.className="saved-back",t.setLocationByName(n.region),e.buildName="",e.build={},"g"in n&&"i"in n){e.buildName=n.g,a.document.title="dngearsim | "+n.g,e.enemyLevel=n.e,e.playerLevel=n.p,e.heroLevel=n.h,e.job={id:n.j},e.damageType=y.damageTypes[n.d],e.element=y.elements[n.t],e.secondaryElement=y.elements[n.s];var L=[],S=n.i;angular.forEach(S.split(","),function(e,a){var t=m.decodeItem(e);t.id>0&&L.push(t)}),e.build={},e.savedItems={},e.savedItems[e.buildName]=e.build,e.build.items=L,e.isLoading=!0,angular.forEach(u.getDntFiles(e.build),function(e,a){o.init(a,e,g,c)}),r.init(g,c),p.init(g,c),b.init(c),i()}e.anyItems=Object.keys(e.savedItems).length>0,e.copyGroup=function(){var a=l.importGroup(e.buildName,e.build.items);l.renameSavedGroup(a,a,e.enemyLevel,e.playerLevel,e.heroLevel,e.job,e.damageType,e.element,e.secondaryElement,e.enemyStatCaps,e.playerStatCaps,e.conversions,e.baseStats,e.heroStats),s.url("/build/"+a)}}]);
"use strict";!function(){angular.module("dnsim").filter("escape",[function(){function n(n){return n?window.encodeURIComponent(n):""}return n}])}();
"use strict";!function(){angular.module("dnsim").filter("percentage",[function(){function n(n){return"number"==typeof n?Math.round(100*n*100)/100+"%":n}return n.$stateful=!1,n}])}();
"use strict";angular.module("dnsim").controller("groupAssignmentCtrl",["hCodeValues","statHelper","saveHelper","itemCategory","$scope",function(e,t,a,r,n){function s(e,t){return e&&t?Math.round(1e4*(1-t/e))/100:0}function m(){a.saveBuildSelection(u.groupName,u.savedItems)}var u=this;if(this.savedItems=a.getSavedItems(),this.groupNames=Object.keys(this.savedItems),this.groupName){this.summaryStatIds=[];for(var o in e.stats)e.stats[o].summaryDisplay&&this.summaryStatIds.push(o);this.clearGroup=function(){u.addAffectAmount=null,u.replaceAffectAmount={},u.groupItems=null,u.groupCalcStats=null},n.$watch("editCtrl.item",function(){u.clearGroup()}),this.getAddAffectAmount=function(e){return this.initAddAffects(),this.addAffectAmount[e]},this.getReplaceAffectAmount=function(e,t,a){return this.initReplaceAffects(t,a),this.replaceAffectAmount[t][e]},this.getGroupCalcStats=function(){if(null==this.groupCalcStats){var e=u.savedItems[u.groupName];e&&(this.groupCalcStats=t.getCalculatedStatsFromItems(e,e.items))}return this.groupCalcStats},this.getBuild=function(){return u.savedItems[u.groupName]},this.initAddAffects=function(){if(!u.addAffectAmount){var a=u.getGroupCalcStats(),r=u.savedItems[u.groupName],n=[];r.items&&(n=r.items.concat([u.item]));var m=t.getCalculatedStatsFromItems(r,n);this.addAffectAmount={};for(var o in e.stats)e.stats[o].summaryDisplay&&(u.addAffectAmount[o]=s(u.getStat(o,m).max,u.getStat(o,a).max))}},this.initReplaceAffects=function(a,r){if(!u.replaceAffectAmount[a]){var n=u.savedItems[u.groupName],m=[u.item];angular.forEach(n.items,function(e,t){r!==e&&m.push(e)});var o=t.getCalculatedStatsFromItems(n,m),i=u.getGroupCalcStats();this.replaceAffectAmount[a]={};for(var c in e.stats)e.stats[c].summaryDisplay&&(u.replaceAffectAmount[a][c]=s(u.getStat(c,o).max,u.getStat(c,i).max))}},this.getStat=function(e,t){for(var a=t.length,r=0;r<a;++r)if(t[r].id==e)return t[r];return{id:e,max:0}},this.getStatName=function(t){var a="";if("primary"==e.stats[t].element){var r=0;u.savedItems[u.groupName].element&&(r=u.savedItems[u.groupName].element.id),a+=e.elements[r].name}else if("secondary"==e.stats[t].element){var r=0;u.savedItems[u.groupName].secondaryElement&&(r=u.savedItems[u.groupName].secondaryElement.id),a+=e.elements[r].name}return a+" "+e.stats[t].name},this.getGroupItems=function(){function e(e){if(e){for(var a=0,r=0;r<t.length;++r)e.indexOf(t[r])>0&&a++;return a}return-1}var t;if(null==u.groupItems&&u.groupName&&u.groupName in u.savedItems&&u.item&&u.item.typeName){u.groupItems=[];var a=[];angular.forEach(u.savedItems[u.groupName].items,function(e,t){e.exchangeType&&"gem"!=e.itemSource&&"plate"!=e.itemSource&&"tman"!=e.itemSource?e.exchangeType==u.item.exchangeType&&a.push(e):e.typeName==u.item.typeName&&a.push(e)}),u.item.name&&(t=u.item.name.split(" ")),a.sort(function(t,a){return e(a.name)-e(t.name)}),angular.forEach(a,function(e,t){e.name==u.item.name&&u.groupItems.push(e)}),angular.forEach(a,function(e,t){e.name!=u.item.name&&u.groupItems.push(e)})}return u.groupItems},this.hasMaxExchangable=function(){var e=r.byName(this.item.typeName),t=this.getGroupItems();if(e&&e.maxCat&&t.length>=e.maxCat)return!0;if(e&&e.maxExchange&&t.length>=e.maxExchange){for(var a=0;a<t.length;++a)if(!t[a].exchangeType)return!1;return!0}return!1},this.nextGroup=function(){var e=!1,t=null;angular.forEach(u.groupNames,function(a,r){e&&null==t&&(t=a),a==u.groupName&&(e=!0)}),null==t&&(t=u.groupNames[0]),u.groupName=t,m(),u.clearGroup()},this.prevGroup=function(){var e=!1,t=null;angular.forEach(u.groupNames,function(a,r){a==u.groupName&&(e=!0),e||(t=a)}),null==t&&(t=u.groupNames[u.groupNames.length-1]),u.groupName=t,m(),u.clearGroup()},this.addToGroup=function(){a.saveItem(u.groupName,u.item),this.savedItems=a.getSavedItems(),u.clearGroup(),u.onChange()},this.replace=function(e){e.replaceItem=!0;var t=[];angular.forEach(u.savedItems[u.groupName].items,function(e,a){e.replaceItem?t.push(u.item):t.push(e)}),a.updatedSavedItems(u.groupName,t),this.savedItems=a.getSavedItems(),u.clearGroup(),u.onChange()}}}]).directive("dngearsimGroupAssignment",function(){return{scope:!0,bindToController:{item:"=item",groupName:"=groupName",onChange:"&onChange"},controller:"groupAssignmentCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/group-assignment.html"}});
"use strict";angular.module("dnsim").controller("itemEditCustomCtrl",["hCodeValues","$scope",function(t,i){if(null!=this.item&&("custom"==this.item.itemSource||"custom"==this.item.typeName)){var e=this;this.statMap={},_.forEach(e.item.stats,function(t){e.statMap[t.id]=t.max});for(var a in t.stats)i.$watch("editCtrl.statMap["+a+"]",function(t,i){if(t!=i){var a=!1,s=[];for(var m in e.statMap)if(e.statMap[m]&&Number(e.statMap[m])){s.push({id:Number(m),max:Number(e.statMap[m])});var o=!1;_.each(e.item.stats,function(t){t.id==m&&(o=!0,m in e.statMap&&t.max==e.statMap[m]||(a=!0))}),o||(a=!0)}else _.each(e.item.stats,function(t){t.id==m&&(a=!0)});a&&(e.item.stats=s,e.onChange())}})}}]).directive("dngearsimItemEditCustom",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditCustomCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-custom.html"}});
"use strict";angular.module("dnsim").controller("itemEditEnchantmentCtrl",["dntData","hCodeValues","items","$timeout","translations","itemColumnsToLoad","itemFactory",function(t,n,e,m,a,i,h){function c(t){return"petLevelDnt"in s.itemType?s.enchantments[t].PetLevel:s.enchantments[t].EnchantLevel}var s=this;if(s.item&&s.item.enchantmentId&&("itemSource"in this.item&&(s.itemType=e[s.item.itemSource]),s.itemType&&("enchantDnt"in s.itemType||"petLevelDnt"in s.itemType))){s.itemType.enchantDnt&&t.init(s.itemType.enchantDnt,i.enchantDnt,null,s.getEnchantments),s.itemType.petLevelDnt&&(t.init(s.itemType.petDnt,i.petDnt,null,s.getEnchantments),t.init(s.itemType.petLevelDnt,i.petLevelDnt,null,s.getEnchantments)),s.enchantments=null,s.enchantment=null,s.enchantmentAfter=null,s.enchantmentCost="",s.enhancementOptions=[],null==s.item.enchantmentStats&&(s.item.enchantmentStats=[]),this.setEnchantment=function(){if(s.item.enchantmentStats=[],s.enchantments&&s.enchantments.length>0){"number"!=typeof s.item.enchantmentNum&&(s.item.enchantmentNum=0,s.onChange());for(var t=0;t<s.enchantments.length;++t)s.item.enchantmentNum==c(t)?(s.enchantment=s.enchantments[t],s.item.enchantmentStats=n.getStats(s.enchantment)):s.item.enchantmentNum+1==c(t)&&(s.enchantmentAfter=s.enchantments[t],s.enchantmentAfter.NeedCoin<1e4?s.enchantmentCost=Math.round(s.enchantmentAfter.NeedCoin/1e3)/10+"g":s.enchantmentCost=Math.round(s.enchantmentAfter.NeedCoin/1e4)+"g")}},this.setPetLevel=function(){if(s.item.enchantmentStats=[],s.enchantments&&s.enchantments.length>0){"number"!=typeof s.item.enchantmentNum&&(s.item.enchantmentNum=6,s.onChange());for(var t=0;t<s.enchantments.length;++t)s.item.enchantmentNum==s.enchantments[t].PetLevel&&(s.enchantment=s.enchantments[t],s.item.enchantmentStats=n.getStats(s.enchantment))}},this.isMaxEnchantLevel=function(){if(null!=s.enchantments&&s.enchantments.length>0&&"number"==typeof s.item.enchantmentNum){for(var t=0;t<s.enchantments.length;++t)if(s.item.enchantmentNum+1==c(t))return!1;return!0}return!1},this.setEnchantmentNum=function(t){s.item.enchantmentNum=t,s.enhancementOptions=[],"petLevelDnt"in s.itemType?s.setPetLevel():s.setEnchantment(),s.onChange()},this.nextEnchantment=function(){for(var t=s.item.enchantmentNum;0==t||s.enchantments[t-1];++t)0==t?s.enhancementOptions.push({number:0}):s.enhancementOptions.push(s.getOption(t-1))},this.prevEnchantment=function(){s.enhancementOptions=[];for(var t=s.item.enchantmentNum;t>0;--t)s.enhancementOptions.push(s.getOption(t-1));s.enhancementOptions.push({number:0})},this.getOption=function(t){return{number:c(t),stats:n.getStats(s.enchantments[t])}},this.getEnchantments=function(){return!s.enchantments&&s.item&&s.item.enchantmentId&&(s.itemType.enchantDnt&&t.isLoaded(s.itemType.enchantDnt)&&(s.enchantments=t.find(s.itemType.enchantDnt,"EnchantID",s.item.enchantmentId),s.setEnchantment()),s.itemType.petLevelDnt&&t.isLoaded(s.itemType.petLevelDnt)&&(s.enchantments=t.find(s.itemType.petLevelDnt,"PetLevelTypeID",s.item.enchantmentId),s.setPetLevel())),s.enchantments};var o="all-items.lzjson";this.showMaterials=function(){t.init(o,null,function(){},function(){m(function(){if(s.enchantmentAfter){s.materials=[];for(var n=1;n<=5;++n){var e=s.enchantmentAfter["NeedItemID"+n],m=s.enchantmentAfter["NeedItemCount"+n];if(e>0&&m>0){var a=t.find(o,"id",e);if(0==a.length)s.materials.push({num:m,name:"unknown ("+e+")"});else{var i=a[0];if(i){var c={item:h.createBasicItem(i),num:m};s.materials.push(c)}}}}}})})},t.isLoaded(o)&&this.showMaterials()}}]).directive("dngearsimItemEditEnchantment",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditEnchantmentCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-enchantment.html"}});
"use strict";angular.module("dnsim").controller("itemEditPotentialCtrl",["dntData","items","hCodeValues","itemColumnsToLoad",function(t,i,n,e){function l(){var t={},i=null;return null!=o.potentials&&angular.forEach(o.potentials,function(e,l){var o=[];angular.forEach(n.getStats(e),function(t,i){n.stats[t.id].hide||o.push(t)}),o.length>0?t[e.id]=o:i||(t[e.id]=[],i=e.id)}),t}var o=this;this.potentials=null,this.potential=null,this.changingPotentials=!1,this.potentialStats={},null!=this.item&&("itemSource"in this.item&&(this.itemType=i[this.item.itemSource]),this.itemType&&this.item.pid&&"potentialDnt"in this.itemType&&(o.itemType.potentialDnt&&t.init(o.itemType.potentialDnt,e.potentialDnt,null,o.getPotentials),this.getPotentials=function(){if(!o.potentials&&o.item&&o.item.pid&&"potentialDnt"in o.itemType){var i=t.find(o.itemType.potentialDnt,"id",o.item.pid);1==i.length?(o.potential=i[0],o.potentials=t.find(o.itemType.potentialDnt,"PotentialID",o.potential.PotentialID),o.potentialStats=l(o.potentials)):"potentialDntEx"in o.itemType&&(i=t.find(o.itemType.potentialDntEx,"id",o.item.pid),1==i.length&&(o.potential=i[0],o.potentials=t.find(o.itemType.potentialDntEx,"PotentialID",o.potential.PotentialID),o.potentialStats=l(o.potentials)))}return o.potentials},this.nextPotential=function(){for(var t=0;t<o.potentials.length;++t)if(o.potential.id==o.potentials[t].id)return o.potential=o.potentials[t+1],o.item.pid=o.potential.id,o.onChange(),void(this.changingPotentials=!0)},this.prevPotential=function(){for(var t=0;t<o.potentials.length;++t)if(o.potential.id==o.potentials[t].id)return o.potential=o.potentials[t-1],o.item.pid=o.potential.id,o.onChange(),void(this.changingPotentials=!0)},this.changePotential=function(t){for(var i=0;i<o.potentials.length;++i)if(t==o.potentials[i].id)return o.potential=o.potentials[i],o.item.pid=o.potential.id,o.changingPotentials=!1,void o.onChange()},this.isFirstPotential=function(){return this.getPotentials(),!o.potentials||o.potentials.length<=1||!o.potential||o.potential.id==o.potentials[0].id},this.isLastPotential=function(){return this.getPotentials(),!o.potentials||o.potentials.length<=1||!o.potential||o.potential.id==o.potentials[o.potentials.length-1].id}))}]).directive("dngearsimItemEditPotential",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditPotentialCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-potential.html"}});
"use strict";angular.module("dnsim").controller("itemEditSkillCtrl",["$timeout","dntData","statHelper",function(t,i,n){function e(){return"skillleveltable_character"+m.item.baseJobName+m.item.pve+".lzjson"}function l(t){}if(null!=this.item&&"skills"==this.item.itemSource){this.item.enchantmentNum||(this.item.enchantmentNum=1);var m=this;this.initSkills=function(){var n=e();i.init(n,null,l,function(){t(function(){m.skillData=i.find(n,"SkillIndex",m.item.id)})})},this.nextEnchantment=function(){this.skillData&&this.item.enchantmentNum<this.skillData.length&&(this.item.enchantmentNum++,m.onChange())},this.isMaxSkillLevel=function(){return this.skillData&&this.item&&this.item.enchantmentNum>=this.skillData.length},this.prevEnchantment=function(){this.item.enchantmentNum>0?this.item.enchantmentNum--:this.item.enchantmentNum=0,m.onChange()},i.init(e(),null,null,m.initSkills)}}]).directive("dngearsimItemEditSkill",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditSkillCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-skill.html"}});
"use strict";angular.module("dnsim").controller("itemEditSparkCtrl",["dntData","hCodeValues","items","itemColumnsToLoad",function(t,e,r,i){function n(){var t=-1;return s.item.sparkId>0&&angular.forEach(s.sparks,function(e,r){if(e.id==s.item.sparkId)return void(t=r)}),t}var s=this;null!=this.item&&("itemSource"in this.item&&(this.itemType=r[this.item.itemSource]),s.itemType&&s.itemType.sparkDnt&&(s.itemType.sparkDnt&&t.init(s.itemType.sparkDnt,i.sparkDnt,null,s.getSparks),this.sparks=null,this.nextSpark=function(){var t=n();++t>=s.sparks.length&&(t=0);var r=s.sparks[t];s.item.sparkId=r.id,s.item.sparkStats=e.getStats(r),s.onChange()},this.isMoreSparks=function(){return null!=s.sparks&&n()>=s.sparks.length-1},this.isFirstSpark=function(){return 0==n()},this.prevSpark=function(){var t=n();--t<0&&(t=s.sparks.length-1);var r=s.sparks[t];s.item.sparkId=r.id,s.item.sparkStats=e.getStats(r),s.onChange()},this.removeSpark=function(){s.item.sparkId=null,s.item.sparkStats=null,s.onChange()},this.getSparks=function(){if(null==s.item||null==s.itemType)return null;if(null==s.sparks){var e=s.item.sparkTypeId;e&&t.isLoaded(s.itemType.sparkDnt)&&(s.sparks=t.find(s.itemType.sparkDnt,"PotentialID",e))}return s.sparks}))}]).directive("dngearsimItemEditSpark",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditSparkCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-spark.html"}});
"use strict";angular.module("dnsim").controller("itemEditTalismanCtrl",[function(){null!=this.item&&"tman"==this.item.itemSource&&(this.setTalisman=function(t){if(0==t)this.item.enchantmentNum=null,this.item.enchantmentStats=[];else{this.item.enchantmentNum=t;var i=[];angular.forEach(this.item.stats,function(e,n){i.push({id:e.id,max:e.max*(t/100)})}),this.item.enchantmentStats=i}this.onChange()})}]).directive("dngearsimItemEditTalisman",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange"},controller:"itemEditTalismanCtrl",controllerAs:"editCtrl",templateUrl:"ui/item/item-edit-talisman.html"}});
"use strict";angular.module("dnsim").controller("itemEditCtrl",["hCodeValues",function(t){var e=this;e.item&&(e.onUpdateItem=function(){e.updateItem()})}]).directive("dngearsimItemEdit",function(){return{scope:!0,bindToController:{item:"=item",onChange:"&onChange",updateItem:"&updateItem"},controller:"itemEditCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-edit.html"}});
"use strict";angular.module("dnsim").controller("itemViewBoxCtrl",["$timeout","dntData","itemFactory",function(t,e,i){if(null!=this.item){if(46!=this.item.typeId&&8!=this.item.typeId&&112!=this.item.typeId&&122!=this.item.typeId&&142!=this.item.typeId)return void console.log("not box item type "+this.item.typeId);var o,m=this,l=["itemdroptable.lzjson","itemdroptable_abyss.lzjson","itemdroptable_apprentice.lzjson","itemdroptable_cook.lzjson","itemdroptable_darklair.lzjson","itemdroptable_dimension.lzjson","itemdroptable_disjoint.lzjson","itemdroptable_dnexpedition.lzjson","itemdroptable_event.lzjson","itemdroptable_farm.lzjson","itemdroptable_fishing.lzjson","itemdroptable_guildwar.lzjson","itemdroptable_item.lzjson","itemdroptable_monsteritem.lzjson","itemdroptable_propdrop.lzjson","itemdroptable_pvp.lzjson","itemdroptable_randomcompound.lzjson","itemdroptable_stageclear.lzjson","itemdroptable_themepark.lzjson","itemdroptable_union.lzjson"];46==this.item.typeId||112==this.item.typeId||122==this.item.typeId||142==this.item.typeId?o=["all-items.lzjson","charmitemtable.lzjson","charmitemtable_common.lzjson"]:8==this.item.typeId&&(o=["all-items.lzjson"].concat(l));for(var n=0;n<o.length;++n)e.init(o[n],null,function(){},function(){t(function(){m.initBoxContents()})});this.initBoxContents=function(){for(var t=0;t<o.length;++t)if(!e.isLoaded(o[t]))return;var i=e.find(this.item.fileName+".lzjson","id",this.item.id);if(i.length>0){var l=i[0];m.items=[],46==m.item.typeId||112==m.item.typeId||122==m.item.typeId||142==m.item.typeId?m.getCharmItems(l.TypeParam1):8==m.item.typeId&&m.getPouchItems(l.TypeParam1)}},this.getPouchItems=function(t){for(var e=0;e<l.length;++e)m.getPouchItemsFromFile(t,l[e])},this.getPouchItemsFromFile=function(t,o){var l=e.find(o,"id",t);if(0==l.length);else{var n=l[0].GoldMin,r=0;do{r++;var s=l[0]["IsGroup"+r],a=l[0]["Item"+r+"Index"],d=l[0]["Item"+r+"Info"];if(a)if(s)m.getPouchItems(a,o);else{var p=e.find("all-items.lzjson","id",a);if(p.length>0){var h=i.createBasicItem(p[0]);m.items.push({count:d,gold:n,item:h})}}}while(a)}},this.getCharmItems=function(t){for(var o=["charmitemtable.lzjson","charmitemtable_common.lzjson"],l=0;l<o.length;++l)for(var n=e.getData(o[l]),r=0;r<n.length;++r){var s=n[r];if(s.CharmNum==t&&s.Look)if(s.CharmType)this.getCharmItems(s.ItemID);else{var a=e.find("all-items.lzjson","id",s.ItemID);a.length>0&&m.items.push({count:s.Count,gold:s.Gold,item:i.createBasicItem(a[0])})}}}}}]).directive("dngearsimItemViewBox",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewBoxCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-box.html"}});
"use strict";angular.module("dnsim").controller("itemViewCraftCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,i,n,r){if(null!=this.item){var l=this;l.crafts=[];for(var o=["itemcompoundtable.lzjson","itemcompoundtable_custom.lzjson","itemcompoundtable_glyph.lzjson","itemcompoundtable_jewel.lzjson","itemcompoundtable_renewal.lzjson","itemcompoundtable_set.lzjson"],a=o.concat(["all-items.lzjson"]),s=0;s<a.length;++s)e.init(a[s],null,function(){},function(){t(function(){l.initCrafts()})});this.initCrafts=function(){for(var t=0;t<a.length;++t)if(!e.isLoaded(a[t]))return;l.crafts=[];for(var t=0;t<o.length;++t)l.initCraft(o[t]);for(var i=[],t=0;t<l.crafts.length;++t){for(var n=!1,r=0;r<i.length;++r)if(l.crafts[t].gold==i[r].gold&&l.crafts[t].items.length==i[r].items.length){n=!0;for(var s=0;s<l.crafts[t].items.length;++s)l.crafts[t].items[s].item.id==i[r].items[s].item.id&&l.crafts[t].items[s].num==i[r].items[s].num||(n=!1)}n||i.push(l.crafts[t])}l.crafts=i},this.initCraft=function(t){for(var n=e.find(t,"SuccessItemID1",l.item.id),r=0;r<n.length;++r){for(var o=n[r],a={id:o.id,fileName:t.replace(".lzjson",""),gold:o.Cost/100/100,items:[]},s=0;;){s++;var m="Slot"+s+"Id",c="Slot"+s+"Num";if(!(m in o))break;var f=e.find("all-items.lzjson","id",o[m]);f.length>0&&a.items.push({item:i.createBasicItem(f[0]),num:o[c]})}l.crafts.push(a)}}}}]).directive("dngearsimItemViewCraft",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewCraftCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-craft.html"}});
"use strict";angular.module("dnsim").controller("itemViewExtractionCtrl",["$timeout","dntData","itemFactory","items",function(t,i,e,n){if(null!=this.item){for(var o=this,r=["itemdroptable_disjoint.lzjson","all-items.lzjson"],a=0;a<r.length;++a)i.init(r[a],null,function(){},function(){t(function(){o.initExtract()})});this.initExtract=function(){for(var t=0;t<r.length;++t)if(!i.isLoaded(r[t]))return;var a,l=e.getItemData(o.item);l&&l.DisjointDrop1>0&&(a=l.DisjointDrop1);var m=n[o.item.itemSource];if(m&&l.EnchantID)for(var s=i.find(m.enchantDnt,"EnchantID",l.EnchantID),t=0;t<s.length;++t)if(s[t].EnchantLevel==o.item.enchantmentNum){a=s[t].DisjointDrop;break}o.items=[],a&&o.getItems(a)},this.getGold=function(){var t=e.getItemData(this.item);return Number(t.Disjointamount)/100/100},this.getItems=function(t){var n=i.find("itemdroptable_disjoint.lzjson","id",t);if(0==n.length);else for(var r=n[0].GoldMin,a=1;"Item"+a+"Index"in n[0];){var l=n[0]["IsGroup"+a],m=n[0]["Item"+a+"Index"],s=n[0]["Item"+a+"Info"];if(m)if(l)o.getItems(m);else{var c=i.find("all-items.lzjson","id",m);c.length>0&&o.items.push({count:s,gold:r,item:e.createBasicItem(c[0])})}a++}}}}]).directive("dngearsimItemViewExtraction",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewExtractionCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-extraction.html"}});
"use strict";angular.module("dnsim").controller("itemViewPlateCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,i){function n(){for(var t=e.find(r,"ItemID",l.item.id),n=0;n<t.length;++n)for(var a=t[n],m=0;;){m++;var s="CompoundTableIndex"+m;if(!(s in a))break;var u=e.find(o,"id",a[s]);u.length>0&&l.items.push(i.createBasicItem(u[0]))}}if(null!=this.item){var l=this;l.items=[];for(var r="platetable.lzjson",o="all-items.lzjson",a=[r,o],m=0;m<a.length;++m)e.init(a[m],null,function(){},function(){t(function(){l.initSets()})});this.initSets=function(){for(var t=0;t<a.length;++t)if(!e.isLoaded(a[t]))return;l.items=[],n()}}}]).directive("dngearsimItemViewPlate",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewPlateCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-plate.html"}});
"use strict";angular.module("dnsim").controller("itemViewSetCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(t,e,o){function n(t){for(var n=e.find(t,"SetItemID",i.item.setId),l=0;l<n.length;++l){var a=e.find(s,"id",n[l].id);a.length>0&&i.items.push(o.createBasicItem(a[0]))}}if(null!=this.item){var i=this;i.items=[];for(var l=["partstable.optimised.lzjson","partstable_cash.optimised.lzjson","partstable_common2014.optimised.lzjson","partstable_common2015.optimised.lzjson","partstable_common2016.lzjson","partstable_commoncash.lzjson","partstable_equipment.optimised.lzjson","partstable_event.lzjson","partstable_guild.lzjson","partstable_pvp.optimised.lzjson","partstable_reboot.optimised.lzjson","partstable_skilllevelup.lzjson","weapontable.optimised.lzjson","weapontable_cash.optimised.lzjson","weapontable_common2014.optimised.lzjson","weapontable_common2015.optimised.lzjson","weapontable_common2016.lzjson","weapontable_commoncash.lzjson","weapontable_equipment.optimised.lzjson","weapontable_event.lzjson","weapontable_guild.lzjson","weapontable_pvp.optimised.lzjson","weapontable_reboot.optimised.lzjson"],s="all-items.lzjson",a=l.concat([s]),m=0;m<a.length;++m)e.init(a[m],null,function(){},function(){t(function(){i.initSets()})});this.initSets=function(){for(var t=0;t<a.length;++t)if(!e.isLoaded(a[t]))return;i.items=[];for(var t=0;t<l.length;++t)n(l[t])}}}]).directive("dngearsimItemViewSet",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewSetCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-set.html"}});
"use strict";angular.module("dnsim").controller("itemViewShopCtrl",["$timeout","dntData","itemFactory","hCodeValues","translations",function(e,t,s,o,i){function a(e){for(var a=t.find(e,"itemindex",m.item.id),h=0;h<a.length;++h){var l=a[h],r=t.find(n,"id",l.PurchaseItem1),u=t.find(n,"id",l.PurchaseItem2),c={shopName:l.ShopID,tabName:i.translate(l.TabNameID),gold:0,nightmarePoints:0,ladderPoints:0,item1:s.createBasicItem(r[0]),item2:s.createBasicItem(u[0]),numItem1:0,numItem2:0};c.shopName in o.shopNames&&(c.shopName=o.shopNames[c.shopName]),1==l.PurchaseType1?c.gold+=l.PurchaseItemValue1:3==l.PurchaseType1?c.ladderPoints+=l.PurchaseItemValue1:8==l.PurchaseType1?c.nightmarePoints+=l.PurchaseItemValue1:c.numItem1=l.PurchaseItemValue1,1==l.PurchaseType2?c.gold+=l.PurchaseItemValue2:3==l.PurchaseType2?c.ladderPoints+=l.PurchaseItemValue2:8==l.PurchaseType2?c.nightmarePoints+=l.PurchaseItemValue2:c.numItem2=l.PurchaseItemValue2,c.gold=c.gold/100/100,m.shopCosts.push(c)}}if(null!=this.item){var m=this;m.shopCosts=[];for(var n="all-items.lzjson",h=["combinedshoptable_cash.lzjson","combinedshoptable_system.lzjson","combinedshoptable.lzjson",n],l=0;l<h.length;++l)t.init(h[l],null,function(){},function(){e(function(){m.initShops()})});this.initShops=function(){for(var e=0;e<h.length;++e)if(!t.isLoaded(h[e]))return;m.shopCosts=[],a("combinedshoptable.lzjson"),a("combinedshoptable_system.lzjson"),a("combinedshoptable_cash.lzjson");for(var s=[],e=0;e<m.shopCosts.length;++e){for(var o=!1,i=0;i<s.length;++i)if(m.shopCosts[e].tabName==s[i].tabName&&m.shopCosts[e].gold==s[i].gold&&m.shopCosts[e].item1.id==s[i].item1.id&&m.shopCosts[e].numItem1.id==s[i].numItem1.id&&m.shopCosts[e].item2.id==s[i].item2.id&&m.shopCosts[e].numItem2.id==s[i].numItem2.id){o=!0;break}o||s.push(m.shopCosts[e])}m.shopCosts=s}}}]).directive("dngearsimItemViewShop",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewShopCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-shop.html"}});
"use strict";angular.module("dnsim").controller("itemViewTransferCtrl",["$timeout","dntData","itemFactory","hCodeValues",function(e,t,n,i){if(null!=this.item){var r=this;r.matchingTransfers=[];for(var a=["enchanttransfertable.lzjson","all-items.lzjson","enchanttransferitemtable.lzjson"],l=0;l<a.length;++l)t.init(a[l],null,function(){},function(){e(function(){r.initTransfers()})});this.initTransfers=function(){for(var e=0;e<a.length;++e)if(!t.isLoaded(a[e]))return;r.matchingTransfers=[];var l=t.find("enchanttransferitemtable.lzjson","ItemID",r.item.id);if(l&&l.length>0)for(var m=t.find("enchanttransfertable.lzjson","EnchantLevel",r.item.enchantmentNum),e=0;e<m.length;++e){var s=m[e];if(s.Rank==r.item.rank.id&&s.LevelLimit==r.item.levelLimit){var o=t.find("all-items.lzjson","id",s.NeedItemID1),f=t.find("all-items.lzjson","id",s.NeedItemID2);r.matchingTransfers.push({level:s.ResultLevel,enchantmentNum:s.ResultEnchantLevel,gold:s.NeedCoin/100/100,rank:i.rankNames[s.ResultRank],numItem1:s.NeedItemCount1,item1:n.createBasicItem(o[0]),numItem2:s.NeedItemCount2,item2:n.createBasicItem(f[0])})}}}}}]).directive("dngearsimItemViewTransfer",function(){return{scope:!0,bindToController:{item:"=item"},controller:"itemViewTransferCtrl",controllerAs:"ctrl",templateUrl:"ui/item/item-view-transfer.html"}});
"use strict";angular.module("dnsim").controller("ItemCtrl",["$scope","$window","dntData","hCodeValues","items","jobs","exportLinkHelper","$routeParams","translations","$location","region","itemFactory","$timeout","statHelper","saveHelper",function(e,t,i,n,a,s,m,o,r,l,u,c,d,f,p){function g(){var t=s.getAllJobs();angular.forEach(t,function(t,i){if(t.id==e.item.needJobClass)return void(e.jobName=t.name)})}function I(){if(!i.anyLoading()&&r.isLoaded()&&s.isLoaded()){if(e.item=m.reloadItem(e.preInitItem),null==e.item)return;S(),t.document.title="dngearsim | "+e.item.name,"custom"!=e.item.itemSource&&("skills"==e.item.typeName?e.item.pve&&"pvp"==e.item.pve?e.item.pve="pvp":e.item.pve="pve":e.item.needJobClass>0&&g(),h());var n=c.getItemData(e.item);n.DisjointDrop1>0&&(e.canExtract=!0),(0==n.Type||1==n.Type)&&e.item.enchantmentNum>0&&(e.canTransfer=!0),e.item.setId&&(e.isInSet=!0),5==e.item.typeId&&(e.isPlate=!0),46==e.item.typeId||8==e.item.typeId||112==e.item.typeId||122==e.item.typeId||142==e.item.typeId?(e.hasContents=!0,e.detail="contents"):null!=e.item.typeName?(e.canUse=!0,e.detail="use"):e.canExtract?e.detail="extract":e.canTransfer?e.detail="transfer":e.isPlate?e.detail="plate":e.detail="shops"}}function h(){e.item.fileName||e.item.itemSource in a&&a[e.item.itemSource].mainDnt&&(e.item.fileName=a[e.item.itemSource].mainDnt.replace(".lzjson","").replace(".optimised",""))}function S(){e.item.fullStats=e.item.stats,null!=e.item.enchantmentStats&&e.item.enchantmentStats.length>0&&(e.item.fullStats=n.mergeStats(e.item.enchantmentStats,e.item.fullStats)),null!=e.item.sparkStats&&e.item.sparkStats.length>0&&(e.item.fullStats=n.mergeStats(e.item.sparkStats,e.item.fullStats))}function v(e){}function D(){var t=p.getSavedItems();e.builds=t}u.setLocationByName(o.region),t.scrollTo(0,0),e.jobName=null,e.item=m.decodeItem(o.i),"itemSource"in e.item&&(e.itemType=a[e.item.itemSource]),e.item.setStats=null,e.item.setId=null,e.detail=null,e.getDescription=function(){if(e.item.description)return e.item.description;if(e.itemType&&"title"==e.itemType.name&&r.isLoaded()&&i.isLoaded(e.itemType.mainDnt)){var t=i.find(e.itemType.mainDnt,"id",e.item.id);if(t&&t.length>0&&t[0].DescriptionID>0)return r.translate(t[0].DescriptionID,t[0].DescriptionIDParam)}else if(e.item.fileName&&i.isLoaded(e.item.fileName+".lzjson")){var t=i.find(e.item.fileName+".lzjson","id",e.item.id);if(t&&t.length>0&&t[0].DescriptionID>0)return r.translate(t[0].DescriptionID,t[0].DescriptionIDParam)}return""},e.getExchangeType=function(){if(r.isLoaded()&&i.isLoaded("exchange.lzjson")&&e.item.exchangeType>0){var t=i.find("exchange.lzjson","ExchangeType",e.item.exchangeType);if(t&&t.length>0&&t[0].NameID>0)return r.translate(t[0].NameID).toLowerCase()}return""},e.setDetail=function(t){e.detail=t},e.getNumInSet=function(){var t=e.getBuildName();return t&&e.item&&e.item.setId?f.getNumItemsForSet(e.builds[t].items,e.item.setId):0},e.getBuildName=function(){var t=p.getCurrentBuild();if(e.builds&&!(t&&t in e.builds)){var i=Object.keys(e.builds);i.length&&(t=i[0])}return t},e.getServerStorage=function(){var t=c.getItemData(e.item),i="";return t&&"IsCash"in t&&0==t.IsCash&&(t&&"AbleWStorage"in t&&(1==t.AbleWStorage?i="can server storage":0==t.AbleWStorage&&(i="not transferable")),t&&"Reversion"in t&&(i.length&&(i+=", "),0==t.Reversion?i+="can sell":1==t.Reversion&&(i+="not sellable "))),i},e.getMoreInfo=function(){var t=0,n=0;if(e.moreInfoLoaded()){var a=c.getItemData(e.item);if(a&&"IsCash"in a&&0==a.IsCash){if(a&&"SealID"in a&&"SealCount"in a){t=a.SealCount;var s=i.find("sealcounttable.lzjson","Type2",a.SealID);if(s&&s.length>0&&0==s[0].Type1){var m="Count0";e.item.enchantmentNum&&(m="Count"+e.item.enchantmentNum),m in s[0]&&(n=s[0][m])}}}else if(a&&"IsCash"in a&&"CashTradeCount"in a&&"Reversion"in a&&"AbleWStorage"in a)return 2==a.Reversion?a.CashTradeCount?"cash trade count: "+a.CashTradeCount:"can use warranty":a.AbleWStorage?"can server storage":"not tradable"}return t&&n?"can stamp "+t+" times using "+n+"  stamps":""},e.moreInfoLoaded=function(){return i.isLoaded(e.item.fileName+".lzjson")&&i.isLoaded("sealcounttable.lzjson")},e.loadMoreInfo=function(){i.init(e.item.fileName+".lzjson",null,d),i.init("sealcounttable.lzjson",null,d)},e.handleChange=function(){"custom"!=e.item.itemSource?l.search("i",m.encodeItem(e.item)):(S(),e.item=angular.copy(e.item)),D()},function(){D(),e.preInitItem=e.item,e.item=null;var t=!1;angular.forEach(m.getDntFiles(e.preInitItem),function(e,n){i.isLoaded(n)||(i.init(n,e,v,function(){I()}),t=!0)}),r.isLoaded()||(r.init(v,function(){I()}),t=!0),s.isLoaded()||(s.init(v,function(){I()}),t=!0),t||I()}()}]);
"use strict";angular.module("dnsim").controller("ExportCtrl",["$scope","$window","saveHelper",function(e,t,a){document.body.className="default-back",t.document.title="dngearsim | EXPORT";var o=a.getSavedItems();e.exportData=JSON.stringify(o,null,1),e.save=function(){localStorage.setItem("savedItems",LZString.compressToUTF16(e.exportData))}}]);
"use strict";angular.module("dnsim").controller("HeaderCtrl",[function(){}]).directive("dngearsimHeader",function(){return{templateUrl:"ui/nav/header.html"}});
"use strict";angular.module("dnsim").controller("NavCtrl",["$scope","$location","translations","region","itemCategory","saveHelper",function(t,n,e,a,r,o){try{var i=[],s=[{path:"builds",name:"builds",icon:"menu-hamburger"},{path:"search",name:"search",icon:"search"}],l={path:"build",name:"build"},c=[{path:"builds",name:"builds",icon:"menu-hamburger"},{path:"search",name:"search",icon:"search"},l];a.init(),t.isSearch=function(){return 0==n.path().indexOf("/search")},t.isLoading=function(){return e.startedLoading&&!e.isLoaded()&&null!=a.tlocation&&""!=a.tlocation.url&&!t.noRegion()},t.noRegion=function(){return null==a.dntLocation},t.isHttpOnly=function(){return"https:"!=location.protocol&&"localhost"!=location.hostname},t.getActions=function(){try{var e=null,r=o.getCurrentBuild();r&&(t.savedItems&&r in t.savedItems||(t.savedItems=o.getSavedItems()),r in t.savedItems||(r=null)),null!=a.dntLocation&&""==a.dntLocation.url?e=i:null!=a.tlocation&&""==a.tlocation.url?e=i:r&&"null"!=r?(e=c,l.path="build/"+r,l.name=r,r in t.savedItems&&(l.build=t.savedItems[r])):e=("/view-group"==n.path()||a.dntLocation,s);var u=n.path;return angular.forEach(e,function(t,n){delete t.extraCss,u&&1==u.length?1==t.path.length&&(t.extraCss="active"):t.path&&t.path.length>1&&0==u.indexOf("/"+t.path)&&("builds"==t.path&&"/builds"!=u||(t.extraCss="active"))}),e}catch(n){t.simError=n.message,console.error(n)}}}catch(n){t.simError=n.message,console.error(n)}}]).directive("dngearsimNav",function(){return{templateUrl:"ui/nav/nav.html"}});
"use strict";angular.module("dnsim").controller("SetupCtrl",["$scope","$window","$route","$timeout","translations","dntInit","dntReset","region",function(t,n,o,e,s,i,a,l){function c(){u("current translations contain words like "+s.translate(329)+", "+s.translate(323)+" and "+s.translate(335)),t.isLoading=!1}function r(n){e(function(){null!=t.testResults&&t.testResults.push(n)})}function u(n){e(function(){null!=t.translationResults&&t.translationResults.push(n)})}document.body.className="default-back",n.document.title="dngearsim | SETUP",t.advancedSetup=!1,t.isLoading=s.startedLoading&&!s.isLoaded(),t.translationResults=[],t.hostedFiles=l.hostedFiles;var d=l.alternativeFiles.url;null==d&&(d=""),t.location=d,""==t.location?t.testResults=["No location set"]:t.testResults=["Using location "+t.location],t.setLocation=function(n){t.location=n,t.isLoading=!0,t.saveLocation(),a(),t.translationResults=[];var o=localStorage.getItem("UIStrings_file");null!=o&&o.indexOf(n)!=-1||sessionStorage.removeItem("UIStrings"),s.reset(),s.location=n,s.init(u,c)},t.resetSessionData=function(){t.testResults=["session data reset.. reloading page"],l.tlocation=null,l.dntLocation=null,s.reset(),sessionStorage.clear(),localStorage.clear(),this.saveLocation(),e(function(){location.hash="",location.reload(!0)})},t.loadUiString=function(){t.translationResults=[],sessionStorage.removeItem("UIStrings"),a(),s.reset(),s.location=l.tlocation.url,s.init(u,c)},t.saveLocation=function(){a(),""!=t.location&&(l.setCustomUrl(t.location),l.init(),l.alternativeFiles.region==l.tlocation.region&&(s.reset(),s.init(u,c)),t.testResults=["Location saved","Using location "+t.location])},t.testLocation=function(){""!=t.location&&(t.testResults=["Using location "+t.location,"Loading all data used by the app"],s.init(r,function(){i(r)}))}}]);
"use strict";!function(){function l(l,t,e,s,i){function u(){o.job&&s.getClassBuilds(o.job).then(function(l){o.jobBuilds=l?l:{}})}var o=this;o.maxDisplay=15,o.totalNumResults=0,i.init(null,function(){l.jobId&&(o.job=i.getById(l.jobId),u())}),this.setJob=function(){e(function(){t.search("jobId",o.job.id)})},this.showMoreResults=function(l){o.maxDisplay=o.totalNumResults+l,o.totalNumResults=0},o.allResults=null,o.getFilteredBuilds=function(){if(null==o.allResults){o.allResults=[];for(var l in o.jobBuilds)for(var t in o.jobBuilds[l])o.allResults.push({uid:l,name:t,data:o.jobBuilds[l][t]})}for(var e=[],s=0;s<o.allResults.length;++s){var i=o.allResults[s];if(o.filter&&o.filter.length>0){var u=o.filter.toUpperCase();if(i.name.toUpperCase().indexOf(u)==-1&&(!i.data.guild||i.data.guild.toUpperCase().indexOf(u)==-1))continue}if(e.push(i),e.length>=o.maxDisplay)break}return o.totalNumResults=e.length,e}}angular.module("dnsim").controller("BuildSearchCtrl",["$routeParams","$location","$timeout","onlineService","jobs",l])}();
"use strict";!function(){function e(e,t,n,i){var o=this;o.uid=t.uid,function(){n.getUserBuilds(o.uid).then(function(e){o.storedBuilds=e?e:{}})}(),function(){n.getProfile(o.uid).then(function(e){o.profile=e?e:{}})}(),this.load=function(t,n){var r=i.importGroup(t,n.items);i.renameSavedGroup(r,r,n.enemyLevel,n.playerLevel,n.heroLevel,n.job,n.damageType,n.element,n.secondaryElement,n.enemyStatCaps,n.playerStatCaps,n.conversions,n.baseStats,n.heroStats),o.builds=i.getSavedItems(),e.path("/build/"+r)}}angular.module("dnsim").controller("ProfileCtrl",["$location","$routeParams","onlineService",e])}();
"use strict";!function(){function e(e,t,i,l,n){function s(){var e=r.getUser();e&&i.getUserBuilds(e.uid).then(function(e){r.storedBuilds=e?e:{}})}function u(){var e=r.getUser();e&&i.getProfile(e.uid).then(function(e){r.profile=e?e:{}})}function o(e){console.log(e)}var r=this;r.show=l.show,i.login().then(function(e){s(),u(),r.builds=t.getSavedItems()}),this.saveProfile=function(){i.saveProfile(r.profile).then(u).catch(o)},this.getUser=function(){return i.getUser()},this.save=function(e,t){t.lastUpdate=(new Date).getTime(),i.saveBuild(e,t).then(s).catch(o),r.publishBuild=null},this.startPublish=function(e){e in r.storedBuilds&&(r.builds[e].region||(r.builds[e].region=r.storedBuilds[e].region),r.builds[e].about||(r.builds[e].about=r.storedBuilds[e].about),r.builds[e].guild||(r.builds[e].guild=r.storedBuilds[e].guild)),r.builds[e].region||(r.builds[e].region=n.dntLocation.region),r.publishBuild=e},this.deleteAccount=function(){i.deleteAccount(r.storedBuilds)},this.getBuildLimit=function(){return r.profile&&r.profile.maxBuilds?r.profile.maxBuilds:15},this.getNumStoredBuilds=function(){return _.size(r.storedBuilds)},this.getNumBuilds=function(){return _.size(r.builds)},this.load=function(e,i){var l=t.importGroup(e,i.items);t.renameSavedGroup(l,l,i.enemyLevel,i.playerLevel,i.heroLevel,i.job,i.damageType,i.element,i.secondaryElement,i.enemyStatCaps,i.playerStatCaps,i.conversions,i.baseStats,i.heroStats),r.builds=t.getSavedItems()},this.signOut=function(){i.signOut()},r.deleteLocal=function(e){r.localToDelete=e},r.getAllBuildNames=function(){var e=_.keys(r.builds).concat(_.keys(r.storedBuilds));return _.uniq(e.sort(),!0)},r.reallyDeleteLocal=function(e){t.updatedSavedItems(e,[]),r.localToDelete=null,r.builds=t.getSavedItems()},r.deleteServer=function(e){r.serverToDelete=e},r.reallyDeleteServer=function(e){i.deleteBuild(e,r.storedBuilds[e]).then(s),r.serverToDelete=null}}angular.module("dnsim").controller("PublishCtrl",["$location","saveHelper","onlineService","$routeParams","region",e])}();
"use strict";!function(){function e(e,i,l,u,t){var d=this;d.uid=l.uid,d.buildName=l.buildName,function(){e.getBuild(d.uid,d.buildName).then(function(e){e?(d.build=e,d.stats=t.getBuildStats(e)):d.build={}})}(),function(){e.getProfile(d.uid).then(function(e){d.profile=e?e:{}})}(),d.copyLocally=function(){var e=u.importGroup(d.buildName,d.build.items);u.renameSavedGroup(e,e,d.build.enemyLevel,d.build.playerLevel,d.build.heroLevel,d.build.job,d.build.damageType,d.build.element,d.build.secondaryElement,d.build.enemyStatCaps,d.build.playerStatCaps,d.build.conversions,d.build.baseStats,d.build.heroStats),i.path("/build/"+e)}}angular.module("dnsim").controller("PublishedCtrl",["onlineService","$location","$routeParams","saveHelper","statHelper",e])}();
"use strict";angular.module("dnsim").controller("RegionCtrl",["$timeout","$route","$routeParams","$location","translations","region","$http",function(t,n,o,i,e,r,a){function c(){d.region.dntLocation&&d.region.dntLocation.url&&a.get(d.region.dntLocation.url+"/Version.cfg").then(function(t){if(t&&t.data){var n=t.data.split("\r\n");if(n.length){var o=n[0].split(" ");o.length>1&&(d.dntVersion="v"+o[1])}}})}var d=this;d.override=r.getOverride(),r.init(),e.init(function(t){},function(){t()}),d.region=r,d.tHoverLocation=r.tlocation,d.hoverLocation=r.dntLocation,d.edit=null==r.dntLocation,d.dntVersion="",c(),d.getDntLocation=function(){return r.dntLocation},d.getTlocation=function(){return r.tlocation},d.getHostedFiles=function(){return r.hostedFiles},d.getWorldName=function(){return e.isLoaded()?e.translate(10169):""},d.setTLocation=function(t){r.setTLocation(t),d.edit=!1},d.setLocation=function(t){d.override||d.setTLocation(null),o.region?(o.region=t.region,n.updateParams(o),n.reload()):r.setLocation(t),d.edit=!1,c()},d.setOverride=function(t){r.setOverride(t),d.override=t,d.edit=t}}]).directive("dngearsimRegion",function(){return{templateUrl:"ui/region/region.html",controllerAs:"ctrl"}});
"use strict";!function(){function t(t,e,s,n,i,m){this.customItems=n.customItems,this.maxDisplay=10,this.currentResults=0,null==this.nameSearch&&(this.nameSearch=""),this.getResults=function(){return this.customItems},this.getNewStatName=function(){return""==this.nameSearch||null==this.nameSearch?"unnamed custom item":this.nameSearch},this.createCustomItem=function(){""!=this.nameSearch&&null!=this.nameSearch||(this.nameSearch=this.getNewStatName()),s.path("/item/_custom:."+this.nameSearch)}}angular.module("dnsim").directive("dngearsimCustomItems",function(){return{scope:{},bindToController:{},controller:["$window","saveHelper","$location","hCodeValues","itemCategory","$timeout",t],controllerAs:"customItems",templateUrl:"ui/search/custom-items.html"}})}();
"use strict";!function(){function e(e,a,n,t,r,s,o,l){var i=this;i.boxes=null,i.maxDisplay=32,i.currentResults=0,i.results=null,i.nameSearch||(i.nameSearch=localStorage.getItem("nameSearch"),n.name&&(i.nameSearch=n.name),null==i.nameSearch&&(i.nameSearch="")),e.document.title="dngearsim | ALL ITEM SEARCH";var m="all-items.lzjson";l.init(m,null,function(){},function(){a(function(){i.initBoxes()})}),i.initBoxes=function(){if(l.isLoaded(m)&&o.isLoaded()){i.boxes=[];for(var e=l.getData(m),n=0;n<e.length;++n){var t=e[n];if(t.NameID>0){var s={id:t.id,name:o.translate(t.NameID,t.NameIDParam),rank:r.rankNames[t.Rank],icon:t.IconImageIndex,levelLimit:t.LevelLimit,fileName:t.fileName};i.boxes.push(s)}}i.boxes=_.sortBy(i.boxes,"name"),a(function(){i.showMoreResults()})}},i.getResults=function(){if(null==i.boxes&&i.initBoxes(),null==i.boxes)return[];for(var e=[],a=i.boxes.length,n=0,t=0;t<a&&n<i.maxDisplay;++t){var r=i.boxes[t];if(""!=i.nameSearch){var s=i.nameSearch.split(" ");0==s.length&&(s=[i.nameSearch]);for(var o=!0,l=0;l<s.length;++l)if(r.name&&r.name.toString().toUpperCase().indexOf(s[l].toUpperCase())==-1){o=!1;break}if(!o)continue}e.push(r),n++}return i.totalNumResults=e.length,e},i.changeSearch=function(){console.log("saving search name"),localStorage.setItem("nameSearch",i.nameSearch),t.search("name",i.nameSearch),i.maxDisplay=64,i.results=i.getResults()},i.showMoreResults=function(){a(function(){i.maxDisplay+=18,i.results=i.getResults()})}}var a=["$window","$timeout","$routeParams","$location","hCodeValues","region","translations","dntData",e];angular.module("dnsim").controller("ItemsCtrl",a),angular.module("dnsim").directive("dngearsimEverythingSearch",function(){return{scope:{},bindToController:{nameSearch:"=nameSearch"},controller:a,controllerAs:"items",templateUrl:"ui/search/everything-search.html"}})}();
"use strict";!function(){function e(e,t,a,i,r,o,n,l,s,m,c,u,g){function v(){s.isLoaded()?h():s.init(d,function(){i(h)}),l.init(f.itemCategory.name,b)}function d(e){}function h(){if(n.isLoaded()&&s.isLoaded()){var e=s.getFinalJobs();e.splice(0,0,f.jobs[0]),f.jobs=e,f.allJobs=s.getAllJobs();var t=Number(localStorage.getItem("jobNumber"));f.origJobNumber,a.job&&a.job&&(t=Number(a.job)),null!=t&&angular.forEach(e,function(e,a){if(e.id==t)return void(f.job=e)})}}function b(){i(function(){f.maxDisplay=24,f.results=S()})}function S(){var e=l.getItems(f.itemCategory.name);if(null==e)return null;e=e.sort(function(e,t){return t.levelLimit-e.levelLimit});var t=-1;"pc"in f.stat&&(t=f.stat.pc);var a=-1;"altStat"in f.stat&&(a=f.stat.altStat);for(var i=[],r=[],o=e.length,n=0,s=0;s<o&&(n<f.maxDisplay||f.stat.id>=0);++s){var m=e[s];if(m){if(!f.itemCategory.hideLevel&&(m.levelLimit<f.minLevel||m.levelLimit>f.maxLevel))continue;if(!f.itemCategory.hideRank&&m.rank&&!f.rankChecked[m.rank.id])continue;if(!f.itemCategory.hideJob&&f.job&&f.job.id>-1&&!f.job.isClassJob(m.needJobClass))continue;if(c.initItem(m),m.typeName!=f.itemCategory.name)continue;if(""!=f.nameSearch){var u=f.nameSearch.split(" ");u.length||(u=[f.nameSearch]);for(var g=!0,v=0;v<u.length;++v)if(m.name.toUpperCase().indexOf(u[v].toUpperCase())==-1){g=!1;break}if(!g)continue}if(f.stat.id>=0){for(var d=!1,h={},b=0;b<m.stats.length;++b){var S=m.stats[b];if(S.id==f.stat.id){d=!0,h.i=n,h.s=Number(S.max);break}S.id==t?(d=!0,h.i=n,h.s=Number(S.max)):S.id==a&&(d=!0,h.i=n,h.s=Number(S.max))}if(!d)continue;i.push(h)}r.push(m),n++}}if(f.stat.id>=0){var L=Math.min(n,f.maxDisplay);i=i.sort(function(e,t){return t.s-e.s});for(var y=[],s=0;s<L;++s)y.push(r[i[s].i]);r=y}return f.totalNumResults=r.length,r}var f=this;if(f.itemCategory=l.byPath(a.cat),!f.itemCategory){var L=localStorage.getItem("selectedItemCategory");return L||(L="titles"),f.itemCategory=l.byName(L),f.itemCategory&&!f.itemCategory.hideInSearch||(L="titles",f.itemCategory=l.byName("titles")),void(f.itemCategory&&(r.search("cat",f.itemCategory.path),o.reload()))}t.document.title="dngearsim | SEARCH "+f.itemCategory.name.toUpperCase(),f.job={id:-1,name:""},f.jobs=[f.job],f.allJobs=[],f.minLevel=1,f.maxLevel=99,f.maxDisplay=10,f.totalNumResults=0,f.grades=m.rankNames,f.stat={id:-1,name:""},f.stats=[f.stat],f.results=null,angular.forEach(m.stats,function(e,t){e.searchable&&f.stats.push(e)});var y=Number(localStorage.getItem("minLevel"));a.minLevel&&(y=Number(a.minLevel)),y>0&&y<100&&(f.minLevel=y),f.origMinLevel=y;var C=Number(localStorage.getItem("maxLevel"));a.maxLevel&&(C=Number(a.maxLevel)),C>0&&C<100&&(f.maxLevel=C),f.origMaxLevel=C,f.nameSearch=localStorage.getItem("nameSearch"),a.name&&(f.nameSearch=a.name),f.nameSearch||(f.nameSearch=""),f.origSavedSearchStatId=localStorage.getItem("searchStat"),a.stat&&(f.origSavedSearchStatId=a.stat),f.origSavedSearchStatId>-1&&f.origSavedSearchStatId in m.stats&&(f.stat=m.stats[f.origSavedSearchStatId]),f.navigate=function(){var e=localStorage.getItem("selectedItemCategory");e&&(f.itemCategory=l.byName(e),f.itemCategory&&(r.search("cat",f.itemCategory.path),f.save(),o.reload()))},f.save=function(){f.itemCategory.hideLevel?(r.search("minLevel",null),r.search("maxLevel",null)):(f.minLevel!=f.origMinLevel&&(localStorage.setItem("minLevel",f.minLevel),r.search("minLevel",f.minLevel),f.origMinLevel=f.minLevel),f.maxLevel!=f.origMaxLevel&&(localStorage.setItem("maxLevel",f.maxLevel),r.search("maxLevel",f.maxLevel),f.origMaxLevel=f.maxLevel)),f.itemCategory.hideJob?r.search("job",null):null!=f.job&&f.origJobNumber!=f.job.id&&(localStorage.setItem("jobNumber",f.job.id),f.job.id>-1?r.search("job",f.job.id):r.search("job",null),f.origJobNumber=f.job.id),f.stat&&f.origSavedSearchStatId!=f.stat.id&&(localStorage.setItem("searchStat",f.stat.id),f.stat.id>-1?r.search("stat",f.stat.id):r.search("stat",null),f.origSavedSearchStatId=f.stat.id),localStorage.setItem("nameSearch",f.nameSearch),r.search("name",f.nameSearch)},f.rankChecked=m.checkedRank,f.changeSearch=function(){f.save(),b()},f.showMoreResults=function(){i(function(){f.maxDisplay+=18,f.results=S()})},u.init(),n.isLoaded()?v():n.init(d,function(){i(v)})}var t=["$scope","$window","$routeParams","$timeout","$location","$route","translations","itemCategory","jobs","hCodeValues","itemFactory","region","saveHelper",e];angular.module("dnsim").controller("ItemSearchCtrl",t)}();
"use strict";!function(){function e(e,a,o,n,t,i,r,s,l,c){function u(e){return null!=e?"skilltable_character"+e.toLowerCase()+".lzjson":null}function d(){if(h.loadedJobId==h.job.id)return h.skills;var e=[];if(h.job.id>=0){var o=t.getBaseJobName(h.job);e.push(o)}angular.forEach(e,function(o,n){var t=u(o);t&&(r.isLoaded(t)?f(e,h.job):r.init(t,null,b,function(){a(function(){f(e,h.job)})}))})}function f(e,a){h.skills=[];var o=!0;angular.forEach(e,function(e,a){var n=u(e);r.isLoaded(n)||(o=!1)}),o&&(angular.forEach(e,function(e,a){for(var o=u(e),n=r.getData(o),t=n.length,l=0;l<t;++l)if(0!=n[l].NameID&&(n[l].EffectClass1>0||n[l].EffectClass2>0||n[l].EffectClass3>0||n[l].EffectClass4>0||n[l].EffectClass5>0||n[l].EffectClass6>0)){var c={d:n[l]};c.id=n[l].id,c.typeName="skills",c.itemSource="skills",c.name=i.translate(n[l].NameID,n[l].NameIDParam),c.needJobClass=n[l].NeedJob,c.rank=s.rankNames[0],c.baseJobName=e.toLowerCase(),c.icon=n[l].IconImageIndex,h.skills.push(c)}}),h.loadedJobId=a.id)}function b(e){}function m(){if(i.isLoaded()&&t.isLoaded()){var e=t.getFinalJobs();h.jobs&&h.jobs.length&&e.splice(0,0,h.jobs[0]),h.jobs=e,h.allJobs=t.getAllJobs();var a=Number(localStorage.getItem("jobNumber"));null!=a&&angular.forEach(e,function(e,o){if(e.id==a)return void(h.job=e)}),h.getResults()}}function g(){t.isLoaded()?a(m):t.init(b,function(){a(m)})}var h=this;h.allJobs=[],h.dntName="",h.skills=[],h.loadedJobId=-1,h.itemCategory=l.byName("skills"),h.nameSearch=localStorage.getItem("nameSearch"),h.nameSearch||(h.nameSearch=""),n.init(),i.isLoaded()?g():i.init(b,function(){a(g)}),h.navigate=function(){a(function(){h.itemCategory&&c.path(h.itemCategory.path)})},h.isLoading=function(){if(!i.isLoaded())return i.startedLoading||i.init(b,function(){}),!0;var e=t.getBaseJobName(h.job),a=u(e);return!(!a||r.isLoaded(a))},h.getResults=function(){var e=d();if(null==e)return[];h.job&&h.job.id>=0&&localStorage.setItem("jobNumber",h.job.id),localStorage.setItem("nameSearch",h.nameSearch);for(var a=[],o=e.length,n=0;n<o;++n){var t=e[n];if(""!=h.nameSearch){var i=h.nameSearch.split(" ");i.length||(i=[h.nameSearch]);for(var r=!0,s=0;s<i.length;++s)if(t.name&&t.name.toString().toUpperCase().indexOf(i[s].toUpperCase())==-1){r=!1;break}if(!r)continue}h.job.id>=0&&!h.job.isClassJob(t.needJobClass)||a.push(t)}return a}}angular.module("dnsim").directive("dngearsimSkillSearch",function(){return{scope:{},bindToController:{job:"=job",jobs:"=jobs"},controller:["$window","$timeout","saveHelper","region","jobs","translations","dntData","hCodeValues","itemCategory","$location",e],controllerAs:"skillSearch",templateUrl:"ui/search/skill-search.html"}})}();
"use strict";!function(){function t(){return{restrict:"E",scope:{},bindToController:{job:"=job",onSetJob:"&onSetJob"},templateUrl:"ui/widgets/choose-class.html",controllerAs:"ctrl",controller:["$window","$location","$routeParams","$timeout","saveHelper","dntData","jobs","hCodeValues","itemColumnsToLoad","character",o]}}function o(t,o,e,n,s,i,r,a,l,u){function c(t){}this.getFinalJobs=function(){for(var t=r.getFinalJobs(),o=[],e=0;e<t.length;++e)r.getBaseJobName(t[e])==this.bJob&&o.push(t[e]);return o},this.getBaseJobs=function(){return r.getBaseJobs()},this.getJobName=function(t){for(var o=r.getAllJobs(),e=0;e<o.length;++e)if(o[e].d.EnglishName==t)return o[e].name},this.setJob=function(t){this.job=t,t&&this.onSetJob()},r.init(c,n)}angular.module("dnsim").directive("dnsimChooseClass",t)}();
"use strict";!function(){function e(e,o){return{restrict:"E",scope:{},bindToController:{collapse:"=collapse",cat:"=cat",buildScreen:"=buildScreen",onChange:"&onChange"},templateUrl:"ui/widgets/dnsim-category-links.html",controller:["itemCategory","$window",t],controllerAs:"ctrl"}}function t(e,t){var o=this;o.categories=e.categories,o.collapsed=!0,o.shouldShow=function(e){return o.buildScreen?!e.hideInBuild:!e.hideInSearch},o.setCategory=function(e){o.collapse&&(o.collapsed=!o.collapsed,t.scrollTo(0,0)),o.cat!=e&&(o.cat=e,localStorage.setItem("selectedItemCategory",e.name),o.onChange&&o.onChange())}}angular.module("dnsim").directive("dnsimCategoryLinks",["itemCategory","$location",e])}();
"use strict";!function(){function i(i,t,n){return{restrict:"E",scope:{item:"=item"},templateUrl:"ui/widgets/dnsim-item-icon.html",link:function(i,t,n){i.$watch("item",function(t,n){t&&(i.iconImage=i.getIcon())}),i.getIcon=function(){if(i.item&&i.item.icon>0){var t,n=Math.floor(i.item.icon/200+1);return t="skills"==i.item.typeName?"skillicon":"itemicon",n>9?t+n+".png":t+"0"+n+".png"}return null},i.iconImage=i.getIcon(),i.getIconXPostion=function(){return i.item&&i.item.icon>0?i.item.icon%10*40+5:0},i.getIconYPostion=function(){return i.item&&i.item.icon>0?40*Math.floor(i.item.icon%200/10)+4:0}}}}angular.module("dnsim").directive("dnsimItemIcon",["exportLinkHelper","$location","region",i])}();
"use strict";!function(){function i(i,e,t){return{restrict:"E",scope:{item:"=item",noClick:"=noClick"},templateUrl:"ui/widgets/dnsim-item-link.html",link:function(e,n,o){e.itemLink="item/?region="+t.dntLocation.region+"&i="+i.encodeItem(e.item),e.$watch("item",function(n,o){n&&(e.itemLink="item/?region="+t.dntLocation.region+"&i="+i.encodeItem(e.item))})}}}angular.module("dnsim").directive("dnsimItemLink",["exportLinkHelper","$location","region",i])}();
"use strict";!function(){function i(){return{restrict:"E",scope:{},bindToController:{item:"=item",small:"=small"},templateUrl:"ui/widgets/dnsim-job-icon.html",controller:t,controllerAs:"ctrl"}}function t(){this.small?(this.sizeValue="205px 205px",this.iconSize=22,this.iconOffset=0):(this.sizeValue="410px 410px",this.iconSize=44,this.iconOffset=5),this.getIconXPostion=function(){return this.item&&this.item.d&&this.item.d.JobIcon>0?this.item.d.JobIcon%9*this.iconSize+this.iconOffset:0},this.getIconYPostion=function(){return this.item&&this.item.d&&this.item.d.JobIcon>0?Math.floor(this.item.d.JobIcon/9)*this.iconSize+this.iconOffset:0}}angular.module("dnsim").directive("dnsimJobIcon",[i])}();
"use strict";!function(){function o(o,n,t,i){return{restrict:"E",transclude:!0,scope:{alsoShowFor:"=alsoShowFor"},templateUrl:"ui/widgets/dnsim-loading.html",link:function(a,d,u){a.$on("TRANSLATION_LOAD_EVENT",function(){a.setLoadCount()}),a.$on("DNTDATA_LOAD_EVENT",function(){a.setLoadCount()}),a.$on("DNTDATA_LOAD_ERROR",function(){t(function(){a.loadError=!0})}),a.$on("TRANSLATION_LOAD_ERROR",function(){t(function(){a.loadError=!0})}),a.numLoading=0,a.setLoadCount=function(){a.noRegion=!i.dntLocation;var d=o.anyLoading();n.isLoaded()||d++,(a.numLoading<d||!a.totalToLoad)&&(a.totalToLoad=d),a.numLoading=d,t()},a.loadError=!1,a.setLoadCount()}}}angular.module("dnsim").directive("dnsimLoading",["dntData","translations","$timeout","region",o])}();
"use strict";!function(){function t(){return{restrict:"A",link:function(t,n,i){var c=!1;n.on("click",function(t){if(!c)try{this.selectionStart=0,this.selectionEnd=this.value.length+1,c=!0}catch(t){this.select(),c=!0}}),n.on("blur",function(t){c=!1})}}}angular.module("dnsim").directive("dnsimSelectAllOnClick",[t])}();
"use strict";!function(){function t(t){return{restrict:"A",scope:{stats:"=stats",build:"=build",altStats:"=altStats",separator:"=separator",filter:"=filter",numInSet:"=numInSet"},link:function(e,n,a){function s(){function a(t){var e=n.clone();e.css("display",u),e.html(t),m.after(e),m=e,r.push(e)}n.css("display","none");var s=e.stats;s||(s=e.altStats),angular.forEach(r,function(t,e){t.remove()});var l=!0,m=n,d={};angular.forEach(s,function(e,n){var a=t.stats[e.id];a.summaryFor&&(d[a.summaryFor]=e)}),angular.forEach(s,function(n,r){var u="";if(n.id in t.stats){var m=t.stats[n.id];if(!e.filter&&"hide"in m&&m.hide)return;if(e.filter&&!m[e.filter])return;if(m.summaryFor)return;if(l||(u+=i),l=!1,"needSetNum"in n&&(n.needSetNum<=e.numInSet&&(u+="*"),u+=n.needSetNum+"&nbsp;"),u+="<strong>",e.build)if("primary"==m.element){var o=0;e.build.element&&(o=e.build.element.id),u+=t.elements[o].name+"&nbsp;"}else if("secondary"==m.element){var o=0;e.build.secondaryElement&&(o=e.build.secondaryElement.id),u+=t.elements[o].name+"&nbsp;"}if(u+=m.name+":</strong>&nbsp;"+m.display(n),m.combineWith>0&&angular.forEach(s,function(t,e){t.id==m.combineWith&&t.max!=n.max&&(u+="-"+m.display(t))}),n.id in d){var c=d[n.id];u+="&nbsp;|&nbsp;<em>"+t.stats[c.id].display(c),u+="</em>"}}else l||(u+=i),l=!1,"needSetNum"in n&&(u+=n.needSetNum+"-Increases&nbsp;"),u+=n.id+":&nbsp;"+n.max;a(u)})}var i;i=e.separator?"&nbsp;"+e.separator+" ":"";var r=[],u=n.css("display");e.$watch("stats",function(t,e){t&&s()}),e.$watch("altStats",function(t,e){t&&s()}),e.$watch("numInSet",function(t,e){t>=0&&s()})}}}angular.module("dnsim").directive("dnsimStats",["hCodeValues",t])}();
"use strict";!function(){function n(){return{require:"ngModel",link:function(n,r,t,u){u.$parsers.push(function(n){return""+n}),u.$formatters.push(function(n){return parseFloat(n,10)})}}}angular.module("dnsim").directive("dnsimStringToNumber",n)}();
"use strict";!function(){function n(){return{require:"ngModel",link:function(n,r,t,e){e.$parsers.push(function(n){return""+n/100}),e.$formatters.push(function(n){return 100*parseFloat(n,10)})}}}angular.module("dnsim").directive("dnsimStringToPercent",n)}();
"use strict";!function(){function e(e){return{restrict:"A",link:function(n,i,t){var r=e(t.fileChange),a=function(e){n.$apply(function(){r(n,{$event:e,files:e.target.files})})};i[0].addEventListener("change",a,!1)}}}angular.module("dnsim").directive("fileChange",["$parse",e])}();
"use strict";!function(){function t(t,e,n,o){function i(t){}var l="rebootplayerweighttable.lzjson",a="playercommonleveltable.lzjson",r="playerleveltable.optimised.lzjson",s="heroleveltable.lzjson";return{init:function(o){n.init(i,o),t.init(l,e.jobConversionColsToLoad,i,o),t.init(a,e.statCapColsToLoad,i,o),t.init(r,e.jobBaseStatColsToLoad,i,o),t.init(s,null,i,o),t.init("potentialtable_herolevel.lzjson",null,i,o)},getHeroStats:function(e){var n=[];if(e>0){var i=t.findFast(s,"id",e);if(1==i.length){var l=t.getRow(s,i[0]);if(l){var a=t.findFast("potentialtable_herolevel.lzjson","PotentialID",l.HeroLevelAbilityID);if(1==a.length){var r=t.getRow("potentialtable_herolevel.lzjson",a[0]);r&&(n=o.getStats(r))}}}}return n},getStatCaps:function(e){if(e>0){var n=t.findFast(a,"id",e);if(1==n.length)return t.getRow(a,n[0])}return{}},getConversions:function(e){if(e>0){var n=t.findFast(l,"id",e);if(1==n.length)return t.getRow(l,n[0])}return{}},getBaseStats:function(e,n){if(e>0&&n>0){var o=t.findFast(r,"id",100*Number(n)+Number(e)-100);if(1==o.length)return t.getRow(r,o[0])}return{}}}}t.$inject=["dntData","itemColumnsToLoad","jobs","hCodeValues"],angular.module("dnsim").factory("character",t)}();
"use strict";!function(){function t(){return{mainDnt:{NameID:!0,DescriptionID:!0,NameIDParam:!0,DescriptionIDParam:!0,Type:!0,TypeParam1:!0,TypeParam2:!0,TypeParam3:!0,LevelLimit:!0,NeedJobClass:!0,Rank:!0,State1:!0,StateValue1:!0,State1_Max:!0,State1_GenProb:!0,State2:!0,StateValue2:!0,State2_Max:!0,State3:!0,StateValue3:!0,State3_Max:!0,State4:!0,StateValue4:!0,State4_Max:!0,State5:!0,StateValue5:!0,State5_Max:!0,State6:!0,StateValue6:!0,State6_Max:!0,State7:!0,StateValue7:!0,State7_Max:!0,State8:!0,StateValue8:!0,State8_Max:!0,State9:!0,StateValue9:!0,State9_Max:!0,State10:!0,StateValue10:!0,State10_Max:!0,EnchantID:!0,SkillID:!0,dragonjeweltype:!0,AbleWStorage:!0,ExchangeType:!0,IconImageIndex:!0,IsCash:!0,DisjointDrop1:!0,Disjointamount:!0},partsDnt:{SetItemID:!0},enchantDnt:{EnchantID:!0,EnchantLevel:!0,EnchantRatio:!0,BreakRatio:!0,MinDown:!0,MaxDown:!0,NeedCoin:!0,DisjointDrop:!0,NeedItemID1:!0,NeedItemCount1:!0,NeedItemID2:!0,NeedItemCount2:!0,NeedItemID3:!0,NeedItemCount3:!0,NeedItemID4:!0,NeedItemCount4:!0,NeedItemID5:!0,NeedItemCount5:!0,ProtectItemCount:!0,State1:!0,State1Value:!0,State2:!0,State2Value:!0,State3:!0,State3Value:!0,State4:!0,State4Value:!0,State5:!0,State5Value:!0,State6:!0,State6Value:!0,State7:!0,State7Value:!0,State8:!0,State8Value:!0,State9:!0,State9Value:!0,State10:!0,State10Value:!0},potentialDnt:{PotentialID:!0,PotentialNo:!0,PotentialRatio:!0,State1:!0,State1Value:!0,State2:!0,State2Value:!0,State3:!0,State3Value:!0,State4:!0,State4Value:!0,State5:!0,State5Value:!0,State6:!0,State6Value:!0,State7:!0,State7Value:!0,State8:!0,State8Value:!0,State9:!0,State9Value:!0,State10:!0,State10Value:!0,State11:!0,State11Value:!0,State12:!0,State12Value:!0,State13:!0,State13Value:!0,State14:!0,State14Value:!0,State15:!0,State15Value:!0,State16:!0,State16Value:!0},gemDnt:{Type:!0},setDnt:null,sparkDnt:null,jobsDnt:{JobName:!0,JobNumber:!0,BaseClass:!0,ParentJob:!0,EnglishName:!0,JobIcon:!0},jobBaseStatColsToLoad:{Strength:!0,Agility:!0,Intelligence:!0,Stamina:!0,AggroperPvE:!0,BaseMP:!0},statCapColsToLoad:{Cbase:!0,Cdefense:!0,Ccritical:!0,Cfinaldamage:!0,CcriticalDamage:!0},jobConversionColsToLoad:{HP:!0,StrengthAttack:!0,AgilityAttack:!0,IntelligenceAttack:!0,PhysicalDefense:!0,MagicDefense:!0,Critical:!0,CriticalResistance:!0,Stiff:!0,StiffResistance:!0,Stun:!0,StunResistance:!0,MoveSpeed:!0,MoveSpeedRevision:!0,DownDelay:!0,ElementAttack:!0,ElementDefense:!0,ElementDefenseMin:!0,ElementDefenseMax:!0,StrengthIntelligenceToCriticalDamage:!0}}}angular.module("dnsim").factory("itemColumnsToLoad",[t])}();
"use strict";!function(){function t(t,e){function n(n,a,o){return{reader:new DntReader,loaded:!1,startedLoading:!1,file:a,dntLocation:n,progressCallback:null,completeCallbacks:[],init:function(n,i,r){if(this.loaded)i&&i();else if(this.progressCallback=n,i&&this.completeCallbacks.push(i),!this.startedLoading){this.startedLoading=!0;var s=this;this.reader.colsToLoad=o,this.dntLocation&&this.dntLocation.url&&this.dntLocation.url.length&&(t.$broadcast("DNTDATA_LOAD_EVENT"),e(function(){s.reader.loadDntFromServerFile(s.dntLocation.url+"/"+a,function(t){s.progressCallback&&s.progressCallback(t)},function(e,n){s.loaded=!0,angular.forEach(s.completeCallbacks,function(t,e){t&&t()}),s.completeCallbacks=[],t.$broadcast("DNTDATA_LOAD_EVENT")},function(e){s.failed=!0,r?(s.loaded=!0,console.log("ignoring the error - this file may not exist yet for the region"),angular.forEach(s.completeCallbacks,function(t,e){t&&t()}),s.completeCallbacks=[],t.$broadcast("DNTDATA_LOAD_EVENT")):(s.startedLoading=!1,s.loaded=!1,t.$broadcast("DNTDATA_LOAD_ERROR"))})}))}},reset:function(){this.reader=new DntReader,this.loaded=!1,this.startedLoading=!1}}}return{loaders:{},findIndexes:{},dntLocation:null,setLocation:function(t){this.dntLocation=t;var e=this;angular.forEach(this.loaders,function(n,a){n.dntLocation!=t&&(n.dntLocation=t,e.reset(a))})},init:function(t,e,a,o,i){a||(a=function(){}),t in this.loaders||t.length>0&&(this.loaders[t]=n(this.dntLocation,t,e)),this.loaders[t].init(a,o,i)},getData:function(t){if(this.isLoaded(t)){for(var e=this.loaders[t].reader,n=new Array(e.numRows),a=0;a<e.numRows;++a)n[a]=e.getRow(a);return n}return[]},find:function(t,e,n){for(var a=this.findFast(t,e,n),o=[],i=a.length,r=0;r<i;++r)o.push(this.getRow(t,a[r]));return o},findFast:function(t,e,n){if(this.isLoaded(t)){t in this.findIndexes||(this.findIndexes[t]={});var a=this.loaders[t].reader,o=a.columnIndexes[e],i=this.findIndexes[t];if(!(e in i)){var r={};i[e]=r;for(var s=a.data,d=s.length,l=0;l<d;++l){var u=s[l],c=u[o];c in r?r[c].push(l):r[c]=[l]}}return n in i[e]?i[e][n]:[]}return[]},isLoaded:function(t){return t in this.loaders&&this.loaders[t].loaded},hasFailed:function(t){return t in this.loaders&&this.loaders[t].failed},hasStartedLoading:function(t){return this.isLoaded(t)||t in this.loaders&&this.loaders[t].startedLoading},reset:function(t){t in this.loaders&&(this.loaders[t].reset(),delete this.loaders[t],delete this.findIndexes[t])},resetAll:function(){var t=this;angular.forEach(this.loaders,function(e,n){t.reset(n)})},anyLoading:function(){var t=0;return angular.forEach(this.loaders,function(e,n){!e.loaded&&e.startedLoading&&t++}),t},getNumRows:function(t){return this.isLoaded(t)?this.loaders[t].reader.numRows:0},getRow:function(t,e){return this.isLoaded(t)?this.loaders[t].reader.getRow(e):{}},lookupValue:function(t,e,n){return this.isLoaded(t)?e[this.loaders[t].reader.columnNames[n]]:null},convertData:function(t,e){return this.isLoaded(t)?this.loaders[t].reader.convertData(e):null},getValue:function(t,e,n){return this.isLoaded(t)?this.loaders[t].reader.getValue(e,n):null}}}angular.module("dnsim").factory("dntData",["$rootScope","$timeout",t])}();
"use strict";!function(){function n(n,i,t,a){return function(a){function e(n){n<o.length?o[n].init(a,function(){o[n].isLoaded()&&("fileName"in o[n]&&a("dnt loaded: "+o[n].fileName),e(n+1))}):a("Full initialise complete")}a("starting init");var o=[i];angular.forEach(n,function(n,i){"all"!=i&&angular.forEach(n,function(n,i){if(i.indexOf("Dnt")==i.length-3){var a={init:function(i,a){t.init(n,null,i,a)},isLoaded:function(){return t.isLoaded(n)},fileName:n};o.push(a)}})}),e(0)}}angular.module("dnsim").factory("dntInit",["items","jobs","dntData","itemFactory",n])}();
"use strict";!function(){function t(t,n,e){return function(){angular.forEach(t,function(t,n){t.reset()}),n.reset(),e.resetAll()}}angular.module("dnsim").factory("dntReset",["items","jobs","dntData",t])}();
"use strict";!function(){function e(e,t,n,a,i,r,l,s,o,m){return{encodeItem:function(e,t){if(e){var n;return"custom"==e.typeName?(n="_custom",angular.forEach(e.stats,function(e,t){n+=t>0?"|":":C",n+=e.id.toString(36)+"="+e.max})):e.id&&(n="I"+e.id.toString(36)+":_","itemSource"in e?n+=e.itemSource:"itemTypeName"in e?n+=e.itemTypeName:e.fileName&&(n+=":F"+e.fileName),(e.enchantmentNum||0==e.enchantmentNum)&&(n+=":E"+e.enchantmentNum.toString(36)),e.pid>0&&(n+=":P"+e.pid.toString(36)),e.sparkId>0&&(n+=":H"+e.sparkId.toString(36)),"skills"==e.typeName&&(n+=":J"+e.baseJobName),e.pve&&(n+=":V"+e.pve)),e.name&&!t&&(n+=":."+e.name.replace(/ /g,"-").replace(/\//g," ")),n}return""},decodeItem:function(e){var n={};return e&&angular.forEach(e.split(":"),function(e,a){if("I"==e.charAt(0))n.id=parseInt(e.substr(1),36);else if("E"==e.charAt(0))n.enchantmentNum=parseInt(e.substr(1),36);else if("P"==e.charAt(0))n.pid=parseInt(e.substr(1),36);else if("S"==e.charAt(0))n.setId=parseInt(e.substr(1),36);else if("H"==e.charAt(0))n.sparkId=parseInt(e.substr(1),36);else if("J"==e.charAt(0))n.baseJobName=e.substr(1);else if("V"==e.charAt(0))n.pve=e.substr(1);else if("_"==e.charAt(0))n.itemSource=e.substr(1);else if("."==e.charAt(0))n.name=e.substr(1).replace("-"," ");else if("C"==e.charAt(0)){n.stats=[];var i=e.substr(1);angular.forEach(i.split("|"),function(e,t){var a=e.split("=");n.stats.push({id:parseInt(a[0],36),max:Number(a[1])})})}else"F"==e.charAt(0)&&(n.fileName=e.substr(1),angular.forEach(t,function(e,t){e.mainDnt&&0==e.mainDnt.indexOf(n.fileName+".")&&(n.itemSource=t)}))}),n},createGroupLink:function(e,t){var n=[],a=this;if(null==t)return"";angular.forEach(t.items,function(e,t){var i=a.encodeItem(e,!0);i&&i.length&&n.push(i)});var i="view-group?region=";return m.dntLocation&&m.dntLocation.region&&(i+=m.dntLocation.region),t.enemyLevel&&(i+="&e="+t.enemyLevel),t.playerLevel&&(i+="&p="+t.playerLevel),t.heroLevel&&(i+="&h="+t.heroLevel),t.job&&t.job.id&&(i+="&j="+t.job.id),t.damageType&&t.damageType.id&&(i+="&d="+t.damageType.id),t.element&&t.element.id&&(i+="&t="+t.element.id),t.secondaryElement&&t.secondaryElement.id&&(i+="&s="+t.secondaryElement.id),i+="&g="+encodeURI(e)+"&i="+n.join(",")},createShortUrl:function(t,n){var a=this.createGroupLink(t,n),i=angular.element(document.querySelector("base")).attr("href"),r=window.location.href.split(i)[0]+i+a,l={longUrl:r};console.log("getting short url for ",r),e.post("https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo",l).success(function(e,t,i,r){n.shortUrl=e.id,sessionStorage.setItem(a,e.id)}).error(function(e,t,n,a){})},reloadItem:function(e){if(null!=e){if("itemTypeName"in e&&!e.itemSource&&(e.itemSource=e.itemTypeName),"rbTech"==e.itemSource&&(e.itemSource="tech"),"custom"==e.itemSource||"custom"==e.typeName)return e.typeName="custom",e;if("skills"==e.itemSource||"skills"==e.typeName){e.enchantmentNum||(e.enchantmentNum=1);var r="skilltable_character"+e.baseJobName+".lzjson",m="pve";"pvp"==e.pve&&(m="pvp");var c="skillleveltable_character"+e.baseJobName+m+".lzjson",u=n.find(r,"id",e.id)[0];u||console.log("cannot get skill data from ",r);var f=n.getData(c),d={};angular.forEach(f,function(t,n){if(t.SkillIndex==e.id&&t.SkillLevel==e.enchantmentNum)return void(d=t)});var p={id:e.id,itemSource:e.itemSource,typeName:e.itemSource,needJobClass:u.NeedJob,baseJobName:e.baseJobName,rank:i.rankNames[0],enchantmentNum:e.enchantmentNum,name:s.translate(u.NameID,u.NameIDParam),description:s.translate(d.SkillExplanationID,d.SkillExplanationIDParam),icon:u.IconImageIndex,pve:e.pve};return p.stats=l.getSkillStats(p,u,f),p}if(e.itemSource in t){var h=t[e.itemSource],g=n.findFast(h.mainDnt,"id",e.id);if(g.length){var S=g[0],v=n.getValue(h.mainDnt,S,"TypeParam1"),N=0,D=null,I=n.find(h.potentialDnt,"id",e.pid);if(I.length||(I=n.find(h.potentialDnt,"PotentialID",v)),I.length||(I=n.find(h.potentialDntEx,"id",e.pid),I.length||(I=n.find(h.potentialDntEx,"PotentialID",v))),I.length>0)if(D=I[0],D.PotentialID!=v)D=null,console.log("bad potential");else{var b=n.find(h.potentialDnt,"PotentialID",D.PotentialID);angular.forEach(b,function(e,t){N+=e.PotentialRatio})}var p=a.createItem(h,S,D,N);a.initItem(p),o.setItemCategory(p,A);var y=null;if((y="weapons"!=p.typeName&&0!=p.typeId?"partsDnt":"weaponDnt")&&n.isLoaded(h[y])&&n.isLoaded(h.setDnt)){p.setStats=[];var k=n.find(h[y],"id",e.id);if(k.length>0){p.setId=k[0].SetItemID;var w=n.find(h.setDnt,"id",k[0].SetItemID);w.length>0&&(p.setStats=i.getStats(w[0]))}}if(p.fullStats=p.stats,e.enchantmentNum>=0)if(p.enchantmentNum=e.enchantmentNum,"skills"==p.typeName);else if("talisman"==p.typeName){var J=[];angular.forEach(p.stats,function(e,t){J.push({id:e.id,max:e.max*(p.enchantmentNum/100)})}),p.enchantmentStats=J,p.fullStats=i.mergeStats(p.enchantmentStats,p.stats)}else if(h.enchantDnt){var E=n.find(h.enchantDnt,"EnchantID",p.enchantmentId);angular.forEach(E,function(e,t){if(e.EnchantLevel==p.enchantmentNum)return p.enchantmentStats=i.getStats(e),void(p.fullStats=i.mergeStats(p.enchantmentStats,p.stats))})}else if(h.petLevelDnt){var E=n.find(h.petLevelDnt,"PetLevelTypeID",p.enchantmentId);angular.forEach(E,function(e,t){if(e.PetLevel==p.enchantmentNum)return p.enchantmentStats=i.getStats(e),void(p.fullStats=i.mergeStats(p.enchantmentStats,p.stats))})}if(e.sparkId>0){p.sparkId=e.sparkId;var L=n.find(h.sparkDnt,"id",e.sparkId);L.length>0&&(p.sparkStats=i.getStats(L[0]),p.fullStats=i.mergeStats(p.fullStats,p.sparkStats))}else if(p.dragonjeweltype){p.offensiveGemSlots=0,p.increasingGemSlots=0;var j=n.find("dragonjewelslottable.lzjson","DragonJewelID",p.dragonjeweltype);j&&j.length>0&&(1==j[0].DragonJewelSlot1&&p.offensiveGemSlots++,1==j[0].DragonJewelSlot2&&p.offensiveGemSlots++,1==j[0].DragonJewelSlot3&&p.offensiveGemSlots++,1==j[0].DragonJewelSlot4&&p.offensiveGemSlots++,2==j[0].DragonJewelSlot1&&p.increasingGemSlots++,2==j[0].DragonJewelSlot2&&p.increasingGemSlots++,2==j[0].DragonJewelSlot3&&p.increasingGemSlots++,2==j[0].DragonJewelSlot4&&p.increasingGemSlots++)}return p}console.log("item "+e.id+" not found in "+h.mainDnt)}if(e.fileName){var x=n.findFast(e.fileName+".lzjson","id",e.id);if(x.length>0){var T=x[0],A=n.getRow(e.fileName+".lzjson",T);return p=a.createBasicItem(A),p.row=T,p.needJobClass=A.NeedJobClass,p.exchangeType=A.ExchangeType,p.fileName=e.fileName,p.description=s.translate(A.DescriptionID,A.DescriptionIDParam),a.initItem(p),p}return{name:"unknown item"}}return{name:"unknown item source: "+e.itemSource}}},getDntFiles:function(e){var n={};if(null==e);else{if(!e.itemSource&&e.itemTypeName in t&&(e.itemSource=e.itemTypeName),"rbTech"==e.itemSource&&(e.itemSource="tech"),e.itemSource in t){var a=t[e.itemSource];n["exchange.lzjson"]=null,n[a.mainDnt]=r.mainDnt;for(var i in a)if(i.indexOf("Dnt")>0){if("enchantDnt"==i&&!e.enchantmentNum)continue;n[a[i]]=r[i]}}if("skills"==e.itemSource||"skills"==e.typeName){n["skilltable_character"+e.baseJobName+".lzjson"]=null;var l="skillleveltable_character"+e.baseJobName+"pve.lzjson";n[l]=null,l="skillleveltable_character"+e.baseJobName+"pvp.lzjson",n[l]=null}e.fileName&&(n[e.fileName+".lzjson"]=null)}return n}}}e.$inject=["$http","items","dntData","itemFactory","hCodeValues","itemColumnsToLoad","statHelper","translations","itemCategory","region"],angular.module("dnsim").factory("exportLinkHelper",e)}();
"use strict";!function(){function r(r){return{reloadGroup:function(n,t){var e=[];return angular.forEach(t.items,function(n,t){var u=r.reloadItem(n);u&&e.push(u)}),e},getDntFiles:function(n){var t={};return angular.forEach(n.items,function(n,e){var u=r.getDntFiles(n);angular.forEach(u,function(r,n){t[n]=r})}),t}}}angular.module("dnsim").factory("groupHelper",["exportLinkHelper",r])}();
"use strict";!function(){function e(e,a,t){return{categories:[{path:"everything",name:"everything",searchType:"everything",hideInBuild:!0},{path:"titles",name:"titles",sourceType:"titles",hideRank:!0,hideJob:!0,hideLevel:!0,numItemText:"1",maxCat:1},{path:"weapons",name:"weapons",sourceType:"equipment",numItemText:"2",maxExchange:1,maxCat:2,limitExchange:[1,2]},{path:"armour",name:"armour",sourceType:"equipment",numItemText:"5",maxExchange:1,maxCat:5,limitExchange:[3,4,5,6,7]},{path:"accessories",name:"accessories",sourceType:"equipment",hideJob:!0,maxCat:4,maxExchange:2,limitExchange:[8,9,10]},{path:"techs",name:"techs",sourceType:"techs",maxCat:4,maxExchange:2,limitExchange:[8,9,10]},{path:"offensive-gems",name:"offensive gems",sourceType:"gems",hideJob:!0,maxCat:4,maxExchange:4,limitExchange:[54]},{path:"increasing-gems",name:"increasing gems",sourceType:"gems",hideJob:!0,maxCat:14,maxExchange:14,limitExchange:[54]},{path:"enhancement-plates",name:"enhancement plates",sourceType:"plates",hideJob:!0,numItemText:"8+3",maxCat:11,maxExchange:15,limitExchange:[33]},{path:"expedition-plates",name:"expedition plates",sourceType:"plates",hideRank:!0,hideJob:!0,numItemText:"4",maxCat:4,maxExchange:15,limitExchange:[33]},{path:"talisman",name:"talisman",sourceType:"talisman",hideJob:!0,numItemText:"8+4",maxCat:12,maxExchange:12,limitExchange:[52,53]},{path:"costume",name:"costume",sourceType:"cash",numItemText:"7",maxCat:7,maxExchange:1,hideLevel:!0,limitExchange:[16,17,18,19,20,21,22]},{path:"imprint",name:"imprint",sourceType:"imprint",numItemText:"7",maxCat:7,hideLevel:!0,hideJob:!0},{path:"cash",name:"cash",sourceType:"cash",numItemText:"8",maxCat:8,maxExchange:2,hideJob:!0,hideLevel:!0,limitExchange:[23,24,25,26,27,28,29]},{path:"extras",name:"extras",sourceType:"xtras",limitExchange:[47],hideJob:!0,hideLevel:!0},{path:"skills",name:"skills",searchType:"skills"},{path:"custom",name:"custom",searchType:"custom",hideInSearch:!0}],byName:function(e){var a=null;return angular.forEach(this.categories,function(t,n){t.name==e&&(a=t)}),a},byPath:function(e){var a=null;return angular.forEach(this.categories,function(t,n){t.path==e&&(a=t)}),a},getItems:function(t){var n=this.byName(t);if(n&&"sourceType"in n){var i=[];angular.forEach(a,function(a,t){a.type==n.sourceType&&i&&(a.items||a.loading||e.loadItems(a),i=a.items?i.concat(a.items):null)});var m=[];if(i){var r=this;angular.forEach(i,function(e,a){(e.typeName==n.name||r.isItemForCat(n,e,e.data))&&(e.typeName=t,m.push(e))})}return m}return null},isItemForCat:function(e,n,i){if(n.itemSource in a&&a[n.itemSource].type!=e.sourceType)return!1;if(n.itemType==e.name)return!0;if(e.limitExchange){for(var m=0;m<e.limitExchange.length;++m)if(e.limitExchange[m]==n.exchangeType||i&&e.limitExchange[m]==i.ExchangeType){if("plate"==n.itemSource)return n.rawData&&4==i.Rank||n.rank&&4==n.rank.id?"expedition plates"==e.name:"enhancement plates"==e.name;if("gem"==n.itemSource){var r=t.find(a.gem.gemDnt,"id",n.id);if(r.length>0)return 1==r[0].Type?"offensive gems"==e.name:2==r[0].Type&&"increasing gems"==e.name}return!0}}else if(n.itemSource in a)return a[n.itemSource].type==e.sourceType;return!1},init:function(e,t){var n=this.byName(e);n&&"sourceType"in n&&angular.forEach(a,function(e,a){e.type==n.sourceType&&e.init(function(){},t)})},setItemCategory:function(e,a){var t=this;angular.forEach(this.categories,function(n,i){t.isItemForCat(n,e,a)&&(e.typeName=n.name)})},getItemsByCategory:function(e){var a={};if(e){var t={};angular.forEach(e,function(e,a){e&&(e.typeName in t||(t[e.typeName]=[]),t[e.typeName].push(e))}),angular.forEach(this.categories,function(e,n){if(e.name in t){var i=t[e.name].sort(function(a,t){if("talisman"==e.name){var n=a.enchantmentNum;n||(n=0);var i=t.enchantmentNum;if(i||(n=0),n!=i)return i-n}else{if("gem"==a.itemSource||"plate"==a.itemSource)return a.gemSlot||t.gemSlot?a.gemSlot?t.gemSlot?a.gemSlot-t.gemSlot:-1:1:t.levelLimit-a.levelLimit;if("exchangeType"in a&&"exchangeType"in t)return a.exchangeType-t.exchangeType}return a.name.localeCompare(t.name)});a[e.name]=i}else a[e.name]=[]}),angular.forEach(e,function(e,t){!e||e.typeName in a||(a.typeError=!0)})}return a}}}angular.module("dnsim").factory("itemCategory",["itemFactory","items","dntData",e])}();
"use strict";!function(){function e(e,t,n,a){function i(e,a,i,l){return{row:a,potential:i,id:t.getValue(e.mainDnt,a,"id"),totalRatio:l,itemSource:e.name,levelLimit:t.getValue(e.mainDnt,a,"LevelLimit"),needJobClass:t.getValue(e.mainDnt,a,"NeedJobClass"),typeId:t.getValue(e.mainDnt,a,"Type"),exchangeType:t.getValue(e.mainDnt,a,"ExchangeType"),rank:n.rankNames[t.getValue(e.mainDnt,a,"Rank")],pid:null,name:null,stats:null,potentialRatio:null,typeName:null,sparkId:null}}function l(n){if(!t.isLoaded(n.mainDnt))return null;if(!e.isLoaded())return null;if("potentialDnt"in n&&!t.isLoaded(n.potentialDnt))return null;if("potentialDntEx"in n&&!t.isLoaded(n.potentialDntEx))return null;var a=(new Date).getTime();n.items=[];for(var l=t.getNumRows(n.mainDnt),o=0;o<l;++o){var m=t.getValue(n.mainDnt,o,"Type"),u=t.getValue(n.mainDnt,o,"LevelLimit"),f=t.getValue(n.mainDnt,o,"Rank");if(8!=m&&9!=m&&11!=m&&12!=m&&13!=m&&18!=m&&19!=m&&20!=m&&21!=m&&24!=m&&29!=m&&46!=m&&51!=m&&74!=m&&75!=m&&76!=m&&78!=m&&79!=m&&84!=m&&100!=m&&112!=m&&114!=m&&115!=m&&116!=m&&122!=m&&142!=m&&174!=m&&130!=m&&182!=m&&(!n.minLevel||u>=n.minLevel)&&(!n.maxLevel||u<=n.maxLevel)&&(!n.minRank||f>=n.minRank)){var s=t.getValue(n.mainDnt,o,"State1_GenProb"),d=t.getValue(n.mainDnt,o,"StateValue1"),D=t.getValue(n.mainDnt,o,"TypeParam1");if(s>0||d>0||D>0||35==m){if("techs"==n.type){for(var c=t.getValue(n.mainDnt,o,"NeedJobClass"),p=t.getValue(n.mainDnt,o,"LevelLimit"),v=!1,I=0;I<n.items.length;++I)if(n.items[I].needJobClass==c&&n.items[I].levelLimit==p&&n.items[I].potential&&n.items[I].potential.PotentialID==D){v=!0;break}if(v)continue}var g=[];D>0&&"potentialDnt"in n&&(g=t.find(n.potentialDnt,"PotentialID",D),!g.length&&"potentialDntEx"in n&&(g=t.find(n.potentialDntEx,"PotentialID",D)));var L=g.length;if(L){for(var h=0,y=0;y<L;++y)h+=g[y].PotentialRatio;for(var y=0;y<L;++y){for(var S=!1,N=0;N<y;++N)if(r(g[y],g[N])){S=!0;break}if(!S){for(var N=y+1;N<L;++N)r(g[y],g[N])&&(g[y].PotentialRatio+=g[N].PotentialRatio);n.items.push(i(n,o,g[y],h))}}}else n.items.push(i(n,o,null,0))}}}var k=(new Date).getTime(),R=k-a;console.log("item init time: "+R/1e3+"s for "+n.name)}function r(e,t){for(var n=1,a=1;;){var i="State"+n,l="State"+a;if(107==e[i]&&(n++,i="State"+n),107==t[l]&&(a++,l="State"+a),!(i in e||l in t))return!0;if(!(i in e))return!1;if(!(l in t))return!1;if(e[i]==-1&&t[l]==-1)return!0;if(!(e[i]>=0||t[l]>=0))return!0;if(e[i]!=t[l])return!1;var r="State"+n+"Value",o="State"+a+"Value";if(e[r]!=t[o])return!1;++n}}function o(i){if(i.row>=0){var l;i.itemSource&&i.itemSource in a?l=t.getRow(a[i.itemSource].mainDnt,i.row):i.fileName&&(l=t.getRow(i.fileName+".lzjson",i.row)),delete i.row;var r=i.potential;if(null==i.name&&(i.name=e.translate(l.NameID,l.NameIDParam)),!i.sparkTypeId&&l.TypeParam2>0&&(i.sparkTypeId=l.TypeParam2),null==i.stats){var o=n.getStats(l);if(r){var u=n.getStats(r);o=n.mergeStats(o,u)}i.stats=o}if(l.SkillID&&!i.skillId&&(i.skillId=l.SkillID),null==i.iconIndex&&(i.icon=l.IconImageIndex,i.icon||"title"!=i.itemSource||(i.icon=12417)),l.dragonjeweltype>=0&&(i.dragonjeweltype=l.dragonjeweltype),l.EnchantID&&!i.enchantmentId&&(i.enchantmentId=l.EnchantID),l.EnchantID&&!i.enchantmentId)i.enchantmentId=l.EnchantID;else if(35==l.Type){i.itemSource="xtras";var f=a[i.itemSource];if(f){var s=t.find(f.petDnt,"id",l.id);s&&s.length&&(i.enchantmentId=s[0].PetLevelTypeID)}}r&&(i.pid=r.id,null===i.potentialRatio&&(i.potentialRatio=m(r,i.totalRatio))),delete i.potential}}function m(e,t){if(e&&e.PotentialRatio>0&&0!=t){var n=Math.round(e.PotentialRatio/t*100*100)/100;if(100!=n)return n+"%"}return null}function u(e){var n=a[e.itemSource];if(e.fileName&&t.isLoaded(e.fileName+".lzjson")){var i=f(e.fileName+".lzjson",e);if(i)return i}if(e.fileName&&t.isLoaded(e.fileName+".optimised.lzjson")){var i=f(e.fileName+".optimised.lzjson",e);if(i)return i}if(n&&t.isLoaded(n.mainDnt)){var i=f(n.mainDnt,e);if(i)return i}return[]}function f(e,n){if(e){var a=t.find(e,"id",n.id);if(a&&a.length>0)return a[0]}return null}function s(t){return t?{id:t.id,name:e.translate(t.NameID,t.NameIDParam),rank:n.rankNames[t.Rank],icon:t.IconImageIndex,levelLimit:t.LevelLimit,fileName:t.fileName,typeId:t.Type}:[]}return{loadItems:l,initItem:o,createItem:i,getItemData:u,createBasicItem:s}}angular.module("dnsim").factory("itemFactory",["translations","dntData","hCodeValues","items",e])}();
"use strict";!function(){function t(t,e,n){function i(i,a){var l=this;l.loading=!0,l.items?a():(t.init(i,function(){o(l,a)}),e.init(l.mainDnt,n.mainDnt,i,function(){o(l,a)},l.ignoreErrors),"potentialDnt"in l&&e.init(l.potentialDnt,n.potentialDnt,i,function(){o(l,a)},l.ignoreErrors),"potentialDntEx"in l&&e.init(l.potentialDntEx,n.potentialDnt,i,function(){o(l,a)},l.ignoreErrors),"gemDnt"in l&&e.init(l.gemDnt,n.gemDnt,i,function(){o(l,a)},l.ignoreErrors),o(l,a))}function o(n,i){!t.isLoaded()||!e.isLoaded(n.mainDnt)||"potentialDnt"in n&&!e.isLoaded(n.potentialDnt)&&!e.hasFailed(n.potentialDnt)||"potentialDntEx"in n&&!e.isLoaded(n.potentialDntEx)&&!e.hasFailed(n.potentialDntEx)||"gemDnt"in n&&!e.isLoaded(n.gemDnt)&&!e.hasFailed(n.gemDnt)||(i(),n.loading=!1)}var a={title:{mainDnt:"appellationtable.optimised.lzjson",type:"titles",minLevel:0,minRank:0},tech:{mainDnt:"itemtable_skilllevelup.optimised.lzjson",potentialDnt:"potentialtable.optimised.lzjson",potentialDntEx:"potentialtable_reboot.optimised.lzjson",sparkDnt:"potentialtable_potentialjewel.optimised.lzjson",gemSlotDnt:"dragonjewelslottable.lzjson",type:"techs",minLevel:24,minRank:0},tman:{mainDnt:"itemtable_talisman.optimised.lzjson",type:"talisman",potentialDnt:"potentialtable_talismanitem.optimised.lzjson",minLevel:24,minRank:0},gem:{mainDnt:"itemtable_dragonjewel.optimised.lzjson",potentialDnt:"potentialtable_dragonjewel.optimised.lzjson",potentialDntEx:"potentialtable_reboot.optimised.lzjson",enchantDnt:"enchanttable_dragonjewel.optimised.lzjson",gemDnt:"dragonjeweltable.optimised.lzjson",type:"gems",minLevel:24,minRank:3},plate:{mainDnt:"itemtable_glyph.optimised.lzjson",potentialDnt:"potentialtable_glyph.optimised.lzjson",type:"plates",minLevel:16,minRank:2},items:{mainDnt:"itemtable.optimised.lzjson",partsDnt:"partstable.optimised.lzjson",weaponDnt:"weapontable.optimised.lzjson",enchantDnt:"enchanttable.optimised.lzjson",potentialDnt:"potentialtable.optimised.lzjson",setDnt:"setitemtable.optimised.lzjson",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:80,minRank:3},eq:{mainDnt:"itemtable_equipment.optimised.lzjson",partsDnt:"partstable_equipment.optimised.lzjson",weaponDnt:"weapontable_equipment.optimised.lzjson",enchantDnt:"enchanttable.optimised.lzjson",potentialDnt:"potentialtable.optimised.lzjson",sparkDnt:"potentialtable_potentialjewel.optimised.lzjson",setDnt:"setitemtable.optimised.lzjson",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:24,minRank:3},rbeq:{mainDnt:"itemtable_reboot.optimised.lzjson",partsDnt:"partstable_reboot.optimised.lzjson",weaponDnt:"weapontable_reboot.optimised.lzjson",enchantDnt:"enchanttable_reboot.optimised.lzjson",potentialDnt:"potentialtable_reboot.optimised.lzjson",setDnt:"setitemtable.optimised.lzjson",gemSlotDnt:"dragonjewelslottable.lzjson",type:"equipment",minLevel:24,minRank:3},pvpeq:{mainDnt:"itemtable_pvp.optimised.lzjson",partsDnt:"partstable_pvp.optimised.lzjson",weaponDnt:"weapontable_pvp.optimised.lzjson",enchantDnt:"enchanttable.optimised.lzjson",setDnt:"setitemtable.optimised.lzjson",type:"equipment",gemSlotDnt:"dragonjewelslottable.lzjson",minLevel:24,minRank:3},cClone:{mainDnt:"itemtable_cashclone.optimised.lzjson",partsDnt:"partstable_cashclone.optimised.lzjson",type:"cash",minLevel:0,ignoreErrors:!0,minRank:4},c2016:{mainDnt:"itemtable_common2016.optimised.lzjson",partsDnt:"partstable_common2016.optimised.lzjson",weaponDnt:"weapontable_common2016.optimised.lzjson",setDnt:"setitemtable_cash.optimised.lzjson",type:"cash",minLevel:0,minRank:0},c2015:{mainDnt:"itemtable_common2015.optimised.lzjson",partsDnt:"partstable_common2015.optimised.lzjson",weaponDnt:"weapontable_common2015.optimised.lzjson",setDnt:"setitemtable_cash.optimised.lzjson",type:"cash",minLevel:0,minRank:0},c2014:{mainDnt:"itemtable_common2014.optimised.lzjson",partsDnt:"partstable_common2014.optimised.lzjson",weaponDnt:"weapontable_common2014.optimised.lzjson",setDnt:"setitemtable_cash.optimised.lzjson",type:"cash",minLevel:0,minRank:0},cash:{mainDnt:"itemtable_cash.optimised.lzjson",partsDnt:"partstable_cash.optimised.lzjson",weaponDnt:"weapontable_cash.optimised.lzjson",setDnt:"setitemtable_cash.optimised.lzjson",type:"cash",minLevel:0,minRank:0},event:{mainDnt:"itemtable_event.optimised.lzjson",partsDnt:"partstable_event.optimised.lzjson",weaponDnt:"weapontable_event.optimised.lzjson",setDnt:"setitemtable_cash.optimised.lzjson",type:"cash",minLevel:0,minRank:0},xtras:{mainDnt:"itemtable_vehicle.optimised.lzjson",partsDnt:"vehiclepartstable.optimised.lzjson",setDnt:"setitemtable_cash.optimised.lzjson",petDnt:"vehicletable.lzjson",petLevelDnt:"petleveltable.lzjson",type:"xtras",minLevel:0,minRank:0},imprint:{mainDnt:"itemtable_imprinting.optimised.lzjson",type:"imprint",minLevel:0,minRank:0}};return angular.forEach(a,function(t,e){t.name=e,t.loading=!1,t.items=null,t.init=i,t.reset=function(){t.items=null,t.loading=!1}}),a}angular.module("dnsim").factory("items",["translations","dntData","itemColumnsToLoad",t])}();
"use strict";!function(){function t(t,n,i){var a="jobtable.lzjson",s=i.jobsDnt;return{fileName:a,allJobs:null,isLoaded:function(){return t.isLoaded(a)},hasStartedLoading:function(){return t.hasStartedLoading(a)},init:function(n,i){t.init(a,s,n,function(){i()})},reset:function(){this.allJobs=null,t.reset(a)},getFinalJobs:function(){var t=[],n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)2==n[a].d.JobNumber&&n[a].d.JobIcon>0&&t.push(n[a]);return t},getBaseJobs:function(){var t=[],n={},i=this;return angular.forEach(this.getFinalJobs(),function(t,a){n[i.getBaseJobName(t)]=t}),angular.forEach(n,function(n,i){t.push(i)}),t},getAllJobs:function(){if(null==this.allJobs&&this.isLoaded()&&n.isLoaded()){for(var i=[],s=t.getData(a),e=s.length,o=0;o<e;++o)i[i.length]=this.createJob(s[o]);this.allJobs=i}return this.allJobs},getById:function(t){var n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)if(n[a].id==t)return n[a]},createJob:function(t){var i=this;return{d:t,id:t.id,name:n.translate(t.JobName),isClassJob:function(n){return i.isClassJob(t,n)}}},isClassJob:function(t,n){if(0==n)return!0;if(t.id==n)return!0;var i=t.ParentJob;if(!i)return!1;if(i==n)return!0;var a=this.getById(i);return!!a&&this.isClassJob(a.d,n)},getBaseJobName:function(t){if(this.isLoaded()){var n=this.getAllJobs();if(n)for(var i=n.length,a=0;a<i;++a)if(n[a].id==t.d.BaseClass+1&&n[a].d.EnglishName)return n[a].d.EnglishName}return null}}}angular.module("dnsim").factory("jobs",["dntData","translations","itemColumnsToLoad",t])}();
"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){function e(e,t,n){function a(){return t(function(t,n){firebase.auth().onAuthStateChanged(function(n){null==n?e.location.href="login.html":t(n)})})}function i(e){return t(function(t,n){firebase.database().ref("profile/"+e).once("value",function(e){t(e?e.val():{})})})}function r(e,n){return t(function(t,a){firebase.database().ref("builds/"+e+"/"+v(n)).once("value",function(e){t(e?l(e.val()):{})})})}function u(e){return t(function(t,n){var a=m.getUser();a&&(e=angular.copy(e),b(e,!0),firebase.database().ref("profile/"+a.uid).set(e).then(t))})}function o(e){return t(function(t,n){firebase.database().ref("builds/"+e).once("value",function(e){if(e){var n={},a=e.val();for(var i in a)n[i]=l(a[i]);t(n)}else t({})})})}function s(e){return t(function(t,n){firebase.database().ref("job-builds/"+e.id).once("value",function(e){t(e?e.val():{})})})}function f(e){e.items&&_.each(e.items,function(e){delete e.fullStats});var t=JSON.stringify(e);return LZString.compressToUTF16(t)}function l(e){var t=LZString.decompressFromUTF16(e),a=JSON.parse(t);return a.items&&_.each(a.items,function(e){e.fullStats=e.stats,e.enchantmentStats&&e.enchantmentStats.length&&(e.fullStats=n.mergeStats(e.enchantmentStats,e.fullStats)),e.sparkStats&&e.sparkStats.length&&(e.fullStats=n.mergeStats(e.sparkStats,e.fullStats))}),a}function c(e,n){var a=m.getUser(),i=[];if(a&&(n=angular.copy(n),b(n,!0),i.push(firebase.database().ref("builds/"+a.uid+"/"+v(e)).set(f(n))),n.job&&n.job.id)){var r={};n.playerLevel&&(r.lev=n.playerLevel),n.region&&(r.region=n.region),n.guild&&(r.guild=n.guild),n.about&&(r.about=n.about),b(r,!0),i.push(firebase.database().ref("job-builds/"+n.job.id+"/"+a.uid+"/"+v(e)).set(r))}return t.all(i)}function b(e,t){for(var n in e)void 0===e[n]?delete e[n]:t&&"object"===_typeof(e[n])&&b(e[n],t)}function d(){var e=firebase.auth();return t(function(t,n){e.signOut().then(function(){t()},function(e){n()})})}function p(e){var n=firebase.auth(),a=m.getUser();return t(function(i,r){var u=[firebase.database().ref("builds/"+a.uid).remove(),firebase.database().ref("profile/"+a.uid).remove(),firebase.database().ref("private/"+a.uid).remove()],o=[];for(var s in e)e[s].job&&o.push(e[s].job.id);o=_.uniq(o),_.each(o,function(e){u.push(firebase.database().ref("job-builds/"+e+"/"+a.uid).remove())}),t.all(u).then(function(){a.delete().then(function(){n.signOut().then(function(){i()},function(e){r()})})})})}function g(e,n){var a=[],i=m.getUser();return i&&(a.push(firebase.database().ref("builds/"+i.uid+"/"+v(e)).remove()),n.job&&a.push(firebase.database().ref("job-builds/"+n.job.id+"/"+i.uid+"/"+v(e)).remove())),t.all(a)}function v(e){return e.replace(/[.$\[\]#\/]/g,"")}var m={login:a,getUser:function(){return firebase.auth().currentUser},signOut:d,deleteAccount:p,getUserBuilds:o,deleteBuild:g,saveBuild:c,getBuild:r,getClassBuilds:s,getProfile:i,saveProfile:u,stripBuildName:v};return function(){firebase.initializeApp({apiKey:"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE",authDomain:"dngearsim.firebaseapp.com",databaseURL:"https://dngearsim.firebaseio.com",storageBucket:"dngearsim.appspot.com"})}(),m}angular.module("dnsim").factory("onlineService",["$window","$q","hCodeValues",e])}();
"use strict";!function(){function e(e,t,n,a,i,m,r){function s(e){for(var t=null,n=0;n<e.length;++n)e[n].def.isItemStep&&(t=e[n].value);for(var n=0;n<e.length;++n)e[n].def.alterItem&&e[n].def.alterItem(e[n].value.id,t);return t}function o(e,t,n,r){r||(r=9999);for(var s=a.getItems(e.name),o=[],c=s.length,p=null,h=null,u=0;u<c;++u){var l=s[u];if(!(t.job.id>0&&l.needJobClass>0)||m.isClassJob(t.job.d,l.needJobClass)){i.initItem(l);for(var d=!0,S=0;S<n.length;++S){if(n[S].def.matchesItem&&!n[S].def.matchesItem(n[S].value.id,l)){d=!1;break}"sortFunc"in n[S].def&&(p=n[S].def.sortFunc,h=n[S].value.id)}if(d&&o.push(l),o.length>=r)break}}return o=o.sort(function(e,t){return p?p(h,e,t):e.name.localeCompare(t.name)})}return{stepDefs:{exchangeStep:{name:"type",getOptions:function(n,a,i){for(var m=[],r=0;r<n.limitExchange.length;++r){var s=n.limitExchange[r],o=0;if(a.items)for(var c=0;c<a.items.length;++c)a.items[c].exchangeType==s&&o++;if(!(o>=n.maxExchange)){var p=e.find("exchange.lzjson","ExchangeType",s),h="";p&&p.length>0&&p[0].NameID>0&&(h=t.translate(p[0].NameID).toLowerCase()),m.push({id:s,name:h.toLowerCase()})}}return m},matchesItem:function(e,t){return t.exchangeType==e}},accExchangeStep:{name:"type",getOptions:function(n,a,i){for(var m=[],r=0;r<n.limitExchange.length;++r){for(var s=n.limitExchange[r],o=0,c=0;c<a.items.length;++c)a.items[c]&&a.items[c].exchangeType==s&&o++;if(10==s||25==s){if(o>=2)continue}else if(o>=1)continue;var p=e.find("exchange.lzjson","ExchangeType",s);if(p&&p.length>0&&p[0].NameID>0){var h=t.translate(p[0].NameID).toLowerCase();m.push({id:s,name:h.toLowerCase()})}}return m},matchesItem:function(e,t){return t.exchangeType==e}},sixtyLevelStep:{name:"level",getOptions:function(e,t,n){return[{id:93,name:"level 93"},{id:90,name:"level 90"},{id:80,name:"level 80"},{id:70,name:"level 70"},{id:60,name:"level 60"}]},matchesItem:function(e,t){return t.levelLimit==e}},allLevelStep:{name:"level",getOptions:function(e,t,n){return[{id:93,name:"level 93"},{id:90,name:"level 90"},{id:80,name:"level 80"},{id:70,name:"level 70"},{id:60,name:"level 60"},{id:50,name:"level 50"},{id:40,name:"level 40"},{id:32,name:"level 32"},{id:24,name:"level 24"}]},matchesItem:function(e,t){return t.levelLimit==e}},cashRankStep:{name:"rank",getOptions:function(e,t,n){return[{id:4,name:"unique"},{id:3,name:"epic"},{id:2,name:"rare"},{id:1,name:"magic"},{id:0,name:"normal"}]},matchesItem:function(e,t){return t.rank.id==e}},imprintRankStep:{name:"rank",getOptions:function(e,t,n){return[{id:4,name:"unique"},{id:3,name:"epic"},{id:2,name:"rare"}]},matchesItem:function(e,t){return t.rank.id==e}},techRankStep:{name:"rank",getOptions:function(e,t,n){return[{id:4,name:"unique"},{id:3,name:"epic"}]},matchesItem:function(e,t){return t.rank.id==e}},talismanRankStep:{name:"rank",getOptions:function(e,t,n){return[{id:3,name:"epic"},{id:2,name:"rare"},{id:999,name:"quality high grade"},{id:1,name:"magic"},{id:0,name:"normal"}]},matchesItem:function(e,t){if(i.initItem(t),t.name){var n=Math.max(t.name.indexOf("Quality"),t.name.indexOf("High Grade"));return 999==e?0===n:t.rank.id==e&&0!=n}return!1}},gemRankStep:{name:"rank",getOptions:function(e,t,n){return[{id:5,name:"legendary"},{id:999,name:"quality high grade epic"},{id:3,name:"epic"}]},matchesItem:function(e,t){if(i.initItem(t),t.name){var n=Math.max(t.name.indexOf("Quality"),t.name.indexOf("High Grade"));return 999==e?3==t.rank.id&&n>=0:t.rank.id==e&&n<0}return!1}},otherRankStep:{name:"rank",getOptions:function(e,t,n){return[{id:3,name:"epic"},{id:2,name:"rare"},{id:1,name:"normal"}]},matchesItem:function(e,t){return t.rank.id==e}},equipRankStep:{name:"rank",getOptions:function(e,t,n){return[{id:5,name:"legendary"},{id:4,name:"unique"},{id:3,name:"epic"}]},matchesItem:function(e,t){return t.rank.id==e}},enhanceTalismanStep:{name:"slot",getOptions:function(e,t,n){return[{id:100,name:"+100% slot"},{id:75,name:"+75% slot"},{id:25,name:"+25% slot"},{id:0,name:"+0% slot"}]},alterItem:function(e,t){t.enchantmentNum=e}},titleStep:{name:"select",getOptions:function(e,t,n){for(var a=o(e,t,n,9999),i=[],m=0;m<a.length;++m)switch(a[m].id){case 1975:case 1973:case 1008:case 230:case 279:case 1313:case 2032:case 2033:i.push(a[m])}return i},hasOptions:function(e,t,n){return!0},isItemStep:!0},enhanceStep:{name:"enhance",getOptions:function(e,t,n){var a=s(n);return a&&a.enchantmentId?[{id:15,name:"enhance to +15"},{id:14,name:"enhance to +14"},{id:13,name:"enhance to +13"},{id:12,name:"enhance to +12"},{id:11,name:"enhance to +11"},{id:10,name:"enhance to +10"},{id:9,name:"enhance to +9"},{id:8,name:"enhance to +8"},{id:7,name:"enhance to +7"},{id:6,name:"enhance to +6"},{id:5,name:"enhance to +5"},{id:4,name:"enhance to +4"},{id:3,name:"enhance to +3"},{id:2,name:"enhance to +2"},{id:1,name:"enhance to +1"},{id:0,name:"not enhanced"}]:[{id:0,name:"not enhanced"}]},alterItem:function(e,t){t.enchantmentNum=e}},itemStep:{name:"select",getOptions:function(e,t,n){return o(e,t,n)},isItemStep:!0,hideName:!0},namedItemStep:{name:"select",getOptions:function(e,t,n){return o(e,t,n)},isItemStep:!0},techSkillStep:{name:"skill",getOptions:function(e,t,n){var a=o(e,t,n,1);return a.length>0?[{id:a[0].skillId,name:a[0].skillId}]:[]},matchesItem:function(e,t){return t.skillId==e}},itemNameStep:{name:"item",getOptions:function(e,t,n){for(var a=o(e,t,n),i={},m=[],r=0;r<a.length;++r){var s=a[r].name;s in i||(i[s]=!0,m.push({id:s,name:s}))}return m},matchesItem:function(e,t){return t.name==e},isItemStep:!0},distinctItemNameStep:{name:"item",getOptions:function(e,t,n){for(var a=o(e,t,n),i={},m=[],r=0;r<t.items.length;++r){i[t.items[r].name]=!0}for(var r=0;r<a.length;++r){var s=a[r].name;s in i||(i[s]=!0,m.push({id:s,name:s}))}return m},matchesItem:function(e,t){return t.name==e},isItemStep:!0},numStatsStep:{name:"Num Stats",getOptions:function(e,t,n){for(var a=o(e,t,n),i={},m=0;m<a.length;++m){for(var s=0,c=0;c<a[m].stats.length;++c){var p=r.stats[a[m].stats[c].id];p&&!p.hide&&s++}i[s+"x stats"]=s}var h=[];for(var u in i)h.push({id:i[u],name:u});return h=h.sort(function(e,t){return e.id-t.id})},matchesItem:function(e,t){for(var n=0,a=0;a<t.stats.length;++a){var i=r.stats[t.stats[a].id];i&&!i.hide&&n++}return n==e},isItemStep:!0},highStatStep:{name:"High Stat",getOptions:function(e,t,n){var a=o(e,t,n),i={id:-1,name:"all"},m=[i];if(a.length>1){for(var s={},c=0;c<a.length;++c)for(var p=0;p<a[c].stats.length;++p){var h=r.stats[a[c].stats[p].id];!h||!h.quickHigh||"high "+h.name in s||(s["high "+h.name]=h.id)}for(var u in s)m.push({id:s[u],name:u});m=m.length<=2?[i]:m.sort(function(e,t){return e.id-t.id})}return m},matchesItem:function(e,t){if(e==-1)return!0;for(var n=0,a=0,i=0;i<t.stats.length;++i){var m=t.stats[i];r.stats[m.id].quickHigh&&(m.id==e?a+=m.max:m.max>n&&(n=m.max))}return a>n},sortFunc:function(e,t,n){for(var a=0,i=0,m=0;m<t.stats.length;++m)if(t.stats[m].id==e){a=t.stats[m].max;break}for(var r=0;r<n.stats.length;++r)if(n.stats[r].id==e){i=n.stats[r].max;break}return i-a},isItemStep:!1,minOptions:3},hasStatStep:{name:"Has Stat",getOptions:function(e,t,n){var a=o(e,t,n),i={id:-1,name:"all"},m=[i];if(a.length>1){for(var s={},c=0;c<a.length;++c)for(var p=0;p<a[c].stats.length;++p){var h=r.stats[a[c].stats[p].id];!h||!h.searchable||"high "+h.name in s||(s["has "+h.name]=h.id)}for(var u in s)m.push({id:s[u],name:u});m=m.length<=2?[i]:m.sort(function(e,t){return e.id-t.id})}return m},matchesItem:function(e,t){if(e==-1)return!0;for(var n=0;n<t.stats.length;++n){var a=t.stats[n];if(r.stats[a.id].searchable&&a.id==e)return!0}return!1},sortFunc:function(e,t,n){for(var a=0,i=0,m=0;m<t.stats.length;++m)if(t.stats[m].id==e){a=t.stats[m].max;break}for(var r=0;r<n.stats.length;++r)if(n.stats[r].id==e){i=n.stats[r].max;break}return i-a},isItemStep:!1,minOptions:3},customStep:{name:"misc",getOptions:function(e,t,n){return r.customItems},isItemStep:!0}},categorySteps:{titles:["titleStep"],weapons:["exchangeStep","sixtyLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep","enhanceStep"],armour:["exchangeStep","sixtyLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep","enhanceStep"],accessories:["accExchangeStep","allLevelStep","equipRankStep","itemNameStep","hasStatStep","itemStep"],techs:["exchangeStep","allLevelStep","techRankStep","techSkillStep","itemNameStep","highStatStep","itemStep"],"offensive gems":["sixtyLevelStep","gemRankStep","itemNameStep","hasStatStep","numStatsStep","itemStep","enhanceStep"],"increasing gems":["sixtyLevelStep","gemRankStep","itemNameStep","hasStatStep","numStatsStep","itemStep","enhanceStep"],"enhancement plates":["allLevelStep","otherRankStep","distinctItemNameStep","numStatsStep","hasStatStep","itemStep"],"expedition plates":["sixtyLevelStep","distinctItemNameStep","numStatsStep","highStatStep","hasStatStep","itemStep"],talisman:["sixtyLevelStep","talismanRankStep","distinctItemNameStep","numStatsStep","hasStatStep","itemStep","enhanceTalismanStep"],costume:["exchangeStep","otherRankStep","itemNameStep","itemStep"],imprint:["imprintRankStep","itemNameStep","highStatStep","itemStep"],cash:["accExchangeStep","cashRankStep","itemNameStep","itemStep"],custom:["customStep"]},getOptions:function(e,t,n){var a=this;if(e.name in this.categorySteps){var i=this.getStepName(e,n.length),m=this.stepDefs[i],r=m.getOptions(e,t,n);if(m.isItemStep)return r;if(m.minOptions)var s=o(e,t,n,50);var c=_.filter(r,function(i){var c,p=n.concat([a.createData(i,e,n.length)]);if(m.minOptions){if(r[0]==i)return!0;if(c=o(e,t,p,50),c.length>0&&c.length<50)return c.length<s.length}else c=o(e,t,p,1);return c.length});return m.minOptions&&c.length<m.minOptions?[r[0]]:c}return[]},hasOptions:function(e,t,n){if(e.name in this.categorySteps){var a=this.getStepName(e,n.length);return this.stepDefs[a].hasOptions?this.stepDefs[a].hasOptions(e,t,n):this.stepDefs[a].getOptions(e,t,n).length>0}return!1},isValidStepNumber:function(e,t){return this.categorySteps[e.name].length>t},createData:function(e,t,n){var a=this.getStepName(t,n);return{step:a,value:e,def:this.stepDefs[a]}},getItem:s,getStepName:function(e,t){return this.categorySteps[e.name][t]}}}angular.module("dnsim").factory("quickAdd",["dntData","translations","itemColumnsToLoad","itemCategory","itemFactory","jobs","hCodeValues",e])}();
"use strict";!function(){function t(t,e,i,n){var o={region:"ALT",name:"Alternative user specified files",url:""},a=[{region:"sea",name:"south east asia",url:"https://seadnfiles.firebaseapp.com"},{region:"na",name:"north america",url:"https://dnna.firebaseapp.com"},{region:"eu",name:"europe",url:"https://eufiles.firebaseapp.com"},{region:"ina",name:"indonesia ",url:"https://inafiles-da491.firebaseapp.com"},{region:"th",name:"thailand",url:"https://thdnfiles.firebaseapp.com"},{region:"tw",name:"taiwan 臺灣",url:"https://twdnfiles.firebaseapp.com"},{region:"cdn",name:"china 中國",url:"https://cdnfiles.firebaseapp.com"},{region:"kdn",name:"korea 대한민국",url:"https://kdnfiles.firebaseapp.com"}],r=localStorage.getItem("lastDNTRegion"),s=null;r&&angular.forEach(a,function(t,e){t.region==r&&(s=t)});var l=localStorage.getItem("UIStrings_file"),c=null;return l&&angular.forEach(a,function(t,e){t.region!=o.region&&l.indexOf(t.url)>-1&&(c=t)}),null==c&&(c=s),{hostedFiles:a,alternativeFiles:o,dntLocation:s,tlocation:c,setCustomUrl:function(t){this.alternativeFiles.url=t;var e=[];angular.forEach(a,function(t,i){t.region!=o.region&&e.push(t)}),e.push(o),a=e,this.hostedFiles=e},setLocationByName:function(t){var e=null;angular.forEach(a,function(i,n){i.region==t&&(e=i)}),this.setLocation(e)},setLocation:function(t){t&&t!=this.dntLocation&&(this.dntLocation=t,e(),localStorage.setItem("lastDNTRegion",t.region),e(),n.reload()),null==this.tlocation&&this.setTLocation(t),this.init()},setTLocation:function(i){if(i!=this.tlocation&&(this.tlocation=i,sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file"),e(),t.reset(),i)){var o=this.getOverride();t.small=!o,t.location=this.tlocation.url,t.init(function(){},function(){n.reload()})}},getOverride:function(){return!!localStorage.getItem("tOverride")},setOverride:function(t){t?localStorage.setItem("tOverride","1"):localStorage.removeItem("tOverride"),this.setTLocation(this.dntLocation)},init:function(){this.getOverride()?t.small=!1:(this.tLocation=this.dntLocation,t.small=!0),this.tlocation&&(t.location=this.tlocation.url),i.setLocation(this.dntLocation)}}}angular.module("dnsim").factory("region",["translations","dntReset","dntData","$route",t])}();
"use strict";!function(){function e(e){return{saveItem:function(e,t){var r=this.getSavedItems();e in r&&Array.isArray(r[e].items)?(r[e].items.push(t),r[e].lastUpdate=(new Date).getTime(),this.updatedSavedItems(e,r[e].items)):this.updatedSavedItems(e,[t])},saveBuildSelection:function(e,t){this.setCurrentBuild(e),t&&e in t&&t[e].job&&t[e].job.id&&localStorage.setItem("jobNumber",t[e].job.id)},importGroup:function(e,t){var r=this.getSavedItems();return e=this.getUniqueGroupName(e,r),this.updatedSavedItems(e,t),e},getUniqueGroupName:function(e,t){var r=0;if(e.lastIndexOf(")")==e.length-1){var i=e.lastIndexOf("(");if(i>0){var a=Number(e.substr(i+1,e.length-i-2));a>0&&(r=a+1,e=e.substr(0,i-1))}}for(var s=e;;){var e=s;if(r>0&&(e=s+" ("+r+")"),!(e in t))break;r++}return e},deleteBuild:function(e){var t=this.getSavedItems();e in t&&(delete t[e],this.setCurrentBuild(null),this.saveBuilds(t))},updatedSavedItems:function(e,t){var r=this.getSavedItems();e in r?(r[e].items=t,r[e].lastUpdate=(new Date).getTime()):r[e]={items:t,lastUpdate:(new Date).getTime()},this.saveBuilds(r)},saveBuilds:function(e){var t=JSON.stringify(e);localStorage.setItem("savedItems",LZString.compressToUTF16(t))},renameSavedGroup:function(e,t,r,i,a,s,n,u,l,o,d,m,c,v){var g=this.getSavedItems();if(t in g||e==t)t=e;else if(e in g){var h=g[e];g[t]=h,delete g[e]}g[t].enemyLevel=r,g[t].playerLevel=i,g[t].heroLevel=a,g[t].job=s,g[t].damageType=n,g[t].element=u,g[t].secondaryElement=l,g[t].enemyStatCaps=o,g[t].playerStatCaps=d,g[t].conversions=m,g[t].baseStats=c,g[t].heroStats=v,this.saveBuilds(g)},getSavedItems:function(){try{var e=LZString.decompressFromUTF16(localStorage.getItem("savedItems"));return JSON.parse(e)}catch(e){}return{}},currentBuild:null,getCurrentBuild:function(){if(!this.currentBuild&&(this.currentBuild=localStorage.getItem("currentGroup"),this.currentBuild)){var e=this.getSavedItems();this.currentBuild in e||(localStorage.removeItem("currentGroup"),this.currentBuild=null)}return this.currentBuild},setCurrentBuild:function(e){this.currentBuild=e,e?localStorage.setItem("currentGroup",e):localStorage.removeItem("currentGroup",e)}}}angular.module("dnsim").factory("saveHelper",["itemCategory",e])}();
"use strict";!function(){function a(a){return{getSetStats:function(t){var e=[],m={};return angular.forEach(t,function(a,t){null!==a&&null!=a.setStats&&(a.setId in m?m[a.setId].numItems++:m[a.setId]={numItems:1,stats:a.setStats})}),angular.forEach(m,function(a,t){angular.forEach(a.stats,function(t,m){t.needSetNum<=a.numItems&&e.push(t)})}),a.mergeStats(e)},getNumItemsForSet:function(a,t){var e=0;return angular.forEach(a,function(a,m){a&&a.setId&&a.setId==t&&e++}),e},getCombinedStats:function(t){var e=[];return angular.forEach(t,function(a,t){a&&(a.fullStats?e=e.concat(a.fullStats):a.stats&&(e=e.concat(a.stats)))}),a.mergeStats(e)},getCalculatedStatsFromItems:function(t,e){var m=this.getNakedStats(t),r=this.getCombinedStats(e),n=this.getSetStats(e),s=m.concat(r).concat(n);return null!=t.heroStats&&t.heroStats.length>0&&(s=s.concat(t.heroStats)),s=a.mergeStats(s),this.getCalculatedStats(t,s)},getCalculatedStats:function(t,e){function m(t){var e=a.stats[t.id];return l[e.pc]?Number(l[e.pc].max):0}function r(t){var e=a.stats[t.id];return l[e.skPc]?Number(l[e.skPc].max):0}function n(a){a.max=Math.floor(a.max*(1+m(a))*(1+r(a)))}function s(a){var t=l[a];return t?{id:a,max:Number(t.max),pc:t.pc}:{id:a,max:0,pc:0}}function x(a){a.max>0&&o.push(a)}function i(e,m,r){var n=(m+r)/2;n+=O*(z+1)*n*.75,n*=1+K.max;var s=n;if(t.element&&t.element.id>0){var i=l[a.elements[t.element.id].dmgStat];i&&(s*=1+Number(i.max))}x({id:e,max:s});var o=0,c=0;if(c=t.element?t.element.id:0,(o=t.secondaryElement?t.secondaryElement.id:0)!=c)if(o>0){var u=l[a.elements[t.secondaryElement.id].dmgStat];if(u){var f=n*(1+Number(u.max));x({id:e+1e3,max:f})}}else x({id:e+1e3,max:n})}var o=[],l={};if(!t.conversions||!t.enemyStatCaps||!t.playerStatCaps)return[];angular.forEach(e,function(a,t){l[a.id]=a});var c=s(0);n(c),x(c);var u=s(1);n(u),x(u);var f=s(2);n(f),x(f);var d=s(3);n(d),x(d);var S=s(25);S.max+=d.max*Number(t.conversions.HP),n(S),x(S);var h=s(8);h.max+=d.max*Number(t.conversions.PhysicalDefense),n(h),x(h);var g=s(1008);g.max=Math.min(.85,h.max/Number(t.enemyStatCaps.Cdefense)),x(g);var v=s(9);v.max+=f.max*Number(t.conversions.MagicDefense),n(v),x(v);var p=s(1009);p.max=Math.min(.85,v.max/Number(t.enemyStatCaps.Cdefense)),x(p);var b=s(3e3),M=s(4),N=s(5);if(!t.damageType||2!=t.damageType.id){var y=s(32),C=s(101),k=s(3001),I=s(10164),T=s(110373);M.max+=y.max,M.max+=Math.floor(c.max*Number(t.conversions.StrengthAttack)),M.max+=Math.floor(u.max*Number(t.conversions.AgilityAttack)),M.max=Math.floor(M.max*(1+(m(M)+C.max))),M.max=Math.floor(M.max*(1+b.max+k.max)),M.max+=Math.floor(I.max*f.max),M.max+=Math.floor(T.max*h.max),x(M),N.max+=y.max,N.max+=Math.floor(c.max*Number(t.conversions.StrengthAttack)),N.max+=Math.floor(u.max*Number(t.conversions.AgilityAttack)),N.max=Math.floor(N.max*(1+(m(N)+C.max))),N.max=Math.floor(N.max*(1+b.max+k.max)),N.max+=Math.floor(I.max*f.max),N.max+=Math.floor(T.max*h.max),x(N)}var E=s(6),A=s(7);if(!t.damageType||1!=t.damageType.id){var D=s(33),P=s(102),V=s(3002),F=s(10165),H=s(10372);E.max+=D.max,E.max+=Math.floor(f.max*Number(t.conversions.IntelligenceAttack)),E.max=Math.floor(E.max*(1+(m(E)+P.max))),E.max=E.max*(1+b.max+V.max),E.max+=Math.floor(F.max*c.max),E.max+=Math.floor(H.max*f.max),x(E),A.max+=D.max,A.max+=f.max*Number(t.conversions.IntelligenceAttack),A.max=Math.floor(A.max*(1+(m(A)+P.max))),A.max=A.max*(1+b.max+V.max),A.max+=Math.floor(F.max*c.max),A.max+=Math.floor(H.max*f.max),x(A)}var w=s(12);w.max+=u.max*Number(t.conversions.Critical),n(w);var B=s(4012);w.max+=B.max,x(w);var L=s(1012),O=Math.min(.89,w.max/Number(t.enemyStatCaps.Ccritical)+L.max);o.push({id:1012,max:O});var j=s(103);j.max+=(c.max+f.max)*Number(t.conversions.StrengthIntelligenceToCriticalDamage),n(j),x(j);var q=s(1103),z=Math.min(1,j.max/t.playerStatCaps.CcriticalDamage+q.max);x({id:1103,max:z+2});var G=s(29);x(G);var J=Number(t.enemyStatCaps.Cfinaldamage),K=s(1029);K.max+=Math.min(Math.max(.35*Number(G.max)/J,Math.pow(Number(G.max)/J,2.2)),1),x(K),x(s(16)),x(s(17)),x(s(18)),x(s(19)),t.damageType&&1!=t.damageType.id&&0!=t.damageType.id||i(1004,M.max,N.max),t.damageType&&2!=t.damageType.id&&0!=t.damageType.id||i(1006,E.max,A.max),t.damageType&&3!=t.damageType.id||i(1001,E.max+M.max,A.max+N.max);var Q=s(2008);Q.max=S.max/(1-g.max);var R=s(2009);R.max=S.max/(1-p.max);var U=s(3008);return U.max=(Q.max+R.max)/2,x(U),o},getNakedStats:function(a){return a.baseStats&&a.baseStats.Strength>0?[{id:0,max:a.baseStats.Strength},{id:1,max:a.baseStats.Agility},{id:2,max:a.baseStats.Intelligence},{id:3,max:a.baseStats.Stamina}]:[]},getSkillStats:function(t,e,m){var r=null;if(angular.forEach(m,function(a,e){if(a.SkillIndex==t.id&&a.SkillLevel==t.enchantmentNum)return void(r=a)}),!r)return null;for(var n=1,s=[],x=!0;x;){var i="EffectClass"+n,o="EffectClassValue"+n;if(e&&i in e&&o in r){if(e[i]>0){var l=r[o],c=e[i],u=a.skillEffectMapping[c];if(u&&u.getVals)for(var f=u.getVals(l),d=0;d<f.length;++d)s.push(f[d]);else{var S;if(S=u&&u.mapTo?u.mapTo:1e4+c,l>0)s.push({id:S,effect:c,max:l});else if(l.toString().indexOf(";")>0){var f=l.split(";");f.length>0&&f[0]>0&&s.push({id:S,effect:c,max:f[0]})}}}}else x=!1;n++}return s},getBuildStats:function(t){var e={};return e.nakedStats=this.getNakedStats(t),e.combinedStats=this.getCombinedStats(t.items),e.setStats=this.getSetStats(t.items),e.allStats=e.nakedStats.concat(e.combinedStats).concat(e.setStats),t.heroStats&&t.heroStats.length&&(e.heroStats=t.heroStats,e.allStats=e.allStats.concat(t.heroStats)),e.allStats=a.mergeStats(e.allStats),e.calculatedStats=this.getCalculatedStats(t,e.allStats),e}}}angular.module("dnsim").factory("statHelper",["hCodeValues",a])}();
"use strict";!function(){function t(t,e){var a=new DnTranslations,i=[],n=[];return{reset:function(){a=new DnTranslations,a.sizeLimit=100,this.loaded=!1,this.startedLoading=!1,i=[],n=[]},getFileName:function(){return this.small?"uistring.optimised.lzjson":"uistring.lzjson"},loaded:!1,startedLoading:!1,small:!1,location:null,init:function(t,o){if(this.isLoaded())o();else if(n=[],t&&n.push(t),o&&i.push(o),!this.startedLoading){this.startedLoading=!0;var s=this,r=null;this.location&&""!=this.location&&(r=this.location+"/"+this.getFileName())!=localStorage.getItem("UIStrings_file")&&(sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file")),e.$broadcast("TRANSLATION_LOAD_EVENT"),a.loadDefaultFile(r,function(t){angular.forEach(n,function(e,a){e(t)})},function(){s.loaded=!0,angular.forEach(i,function(t,e){t()}),i=[],e.$broadcast("TRANSLATION_LOAD_EVENT")},function(t){angular.forEach(n,function(e,a){e(t)}),e.$broadcast("TRANSLATION_LOAD_ERROR"),s.startedLoading=!1,s.loaded=!1})}},isLoaded:function(){if(!this.loaded){this.location+"/"+this.getFileName()!=localStorage.getItem("UIStrings_file")&&(sessionStorage.removeItem("UIStrings"),localStorage.removeItem("UIStrings_file")),this.loaded=a.loadFromSession(),this.loaded&&(this.startedLoading=!0)}return this.loaded},translate:function(t,e){if(this.loaded)try{var i;if(!t)return"";if("string"!=typeof(i=a.translate(t)))return"m"+i;if(e&&i)if("string"==typeof e)for(var n=e.split(","),o=0;o<n.length;++o){var s=n[o];0==s.indexOf("{")&&(s=n[o].replace(/\{|\}/g,""),s=a.translate(s)),i=i.replace("{"+o+"}",s)}else i=i.replace("{0}",e);return i}catch(a){console.log("unable to translate",t,e,a)}return"m"+t}}}angular.module("dnsim").factory("translations",["$routeParams","$rootScope",t])}();
"use strict";!function(){function a(){function a(a){return Math.floor(a.max)}function e(a){var e=Number(a.max);return e<100?e:e<1e5?Math.round(e/100)/10+"k":e<1e6?Math.round(e/1e3)+"k":e<1e7?Math.round(e/1e4)/100+"m":Math.round(e/1e6)+"m"}function d(a){return Math.round(1e4*a.max)/100+"%"}return{stats:{0:{id:0,name:"str",display:a,dps:!0,pc:50,skPc:4050,searchable:!0,quickHigh:!0},1:{id:1,name:"agi",display:a,dps:!0,pc:51,skPc:4051,searchable:!0,quickHigh:!0},2:{id:2,name:"int",display:a,dps:!0,pc:52,skPc:4052,searchable:!0,quickHigh:!0},3:{id:3,name:"vit",display:a,def:!0,pc:53,skPc:4053,searchable:!0,quickHigh:!0},4:{id:4,name:"pdmg",display:a,combineWith:5,dps:!0,pc:54,searchable:!0,altStat:32,quickHigh:!0},5:{id:5,name:"maxPdmg",display:a,hide:!0,pc:55},6:{id:6,name:"mdmg",display:a,combineWith:7,dps:!0,pc:56,searchable:!0,altStat:33,quickHigh:!0},7:{id:7,name:"maxMdmg",display:a,hide:!0,pc:57},8:{id:8,name:"pdef",display:e,def:!0,pc:58,searchable:!0},9:{id:9,name:"mdef",display:e,def:!0,pc:59,searchable:!0},10:{id:10,name:"para",display:e,pc:60,noCustom:!0},11:{id:11,name:"para resist",display:e,pc:61,noCustom:!0},12:{id:12,name:"crit",display:e,dps:!0,pc:62,searchable:!0},13:{id:13,name:"crit resist",display:e,pc:63,noCustom:!0},14:{id:14,name:"stun",display:e,pc:64,noCustom:!0},15:{id:15,name:"stun resist",display:e,pc:65,noCustom:!0},16:{id:16,name:"fire%",display:d,dps:!0,searchable:!0},17:{id:17,name:"ice%",display:d,dps:!0,searchable:!0},18:{id:18,name:"light%",display:d,dps:!0,searchable:!0},19:{id:19,name:"dark%",display:d,dps:!0,searchable:!0},20:{id:20,name:"fire def",display:d,def:!0,searchable:!0},21:{id:21,name:"ice def",display:d,def:!0,searchable:!0},22:{id:22,name:"light def",display:d,def:!0,searchable:!0},23:{id:23,name:"dark def",display:d,def:!0,searchable:!0},25:{id:25,name:"hp",display:e,def:!0,pc:75,skPc:4075,searchable:!0},26:{id:26,name:"mp",display:e,def:!0,pc:76,skPc:4076},29:{id:29,name:"fd",display:a,dps:!0,searchable:!0},32:{id:32,name:"pdmg",display:a,dps:!0,pc:54,quickHigh:!0},33:{id:33,name:"mdmg",display:a,dps:!0,pc:56,quickHigh:!0},50:{id:50,name:"str%",display:d,dps:!0},51:{id:51,name:"agi%",display:d,dps:!0},52:{id:52,name:"int%",display:d,dps:!0},53:{id:53,name:"vit%",display:d,def:!0},54:{id:54,name:"pdmg%",display:d,combineWith:55,dps:!0},55:{id:55,name:"maxPdmg%",display:d,hide:!0},56:{id:56,name:"mdmg%",display:d,combineWith:57,dps:!0},57:{id:57,name:"maxMdmg%",display:d,hide:!0},58:{id:58,name:"pdef%",display:d,def:!0},59:{id:59,name:"mdef%",display:d,def:!0},60:{id:60,name:"para%",display:d,noCustom:!0,def:!0},61:{id:61,name:"para resist%",display:d,noCustom:!0,def:!0},62:{id:62,name:"crit%",display:d,dps:!0},63:{id:63,name:"crit resist%",display:d,def:!0},64:{id:64,name:"stun%",display:d,noCustom:!0,def:!0},65:{id:65,name:"stun resist%",display:d,noCustom:!0,def:!0},74:{id:74,name:"move%",display:d,noCustom:!0,def:!0},75:{id:75,name:"hp%",display:d,def:!0},76:{id:76,name:"mp%",display:d,def:!0},77:{id:77,name:"mp recover%",display:d,def:!0},81:{id:81,name:"safe move%",display:d,noCustom:!0,def:!0},101:{id:101,name:"pdmg%",display:d,noCustom:!0,dps:!0,quickHigh:!0},102:{id:102,name:"mdmg%",display:d,noCustom:!0,dps:!0,quickHigh:!0},103:{id:103,name:"cdmg",display:e,dps:!0,pc:104,searchable:!0},104:{id:104,name:"crit dmg%",display:d,noCustom:!0,dps:!0},105:{id:104,name:"pvp dmg",display:e,noCustom:!0,dps:!0},106:{id:106,name:"pvp def",display:e,noCustom:!0,def:!0},107:{id:107,name:"mp?",display:a,noCustom:!0,hide:!0,def:!0},1001:{id:1001,name:"dmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1004:{id:1004,name:"pdmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1006:{id:1006,name:"mdmg",display:e,summaryDisplay:!0,element:"primary",noCustom:!0,hide:!0},1008:{id:1008,name:"pdef",display:d,noCustom:!0,summaryFor:8},1009:{id:1009,name:"mdef",display:d,noCustom:!0,summaryFor:9},1012:{id:1012,name:"crit chance",display:d,noCustom:!0,dps:!0,summaryFor:12},1029:{id:1029,name:"fd",display:d,noCustom:!0,dps:!0,summaryFor:29},1103:{id:1103,name:"crit dmg",display:d,noCustom:!0,dps:!0,summaryFor:103},2001:{id:2001,name:"dmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2004:{id:2004,name:"pdmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2006:{id:2006,name:"mdmg",display:e,summaryDisplay:!0,element:"secondary",noCustom:!0,hide:!0},2008:{id:2008,name:"pdef eqhp",display:e,noCustom:!0},2009:{id:2009,name:"mdef eqhp",display:e,noCustom:!0},3e3:{id:3e3,name:"skDmg%",display:d,dps:!0},3001:{id:3001,name:"skPDmg%",display:d,dps:!0},3002:{id:3002,name:"skMDmg%",display:d,dps:!0},3008:{id:3008,name:"eqhp",display:e,summaryDisplay:!0,noCustom:!0,hide:!0},4012:{id:4012,name:"skCrit",display:e,dps:!0},4050:{id:4050,name:"skStr%",display:d,dps:!0},4051:{id:4051,name:"skAgi%",display:d,dps:!0},4052:{id:4052,name:"skInt%",display:d,dps:!0},4053:{id:4053,name:"skVit%",display:d,def:!0},4075:{id:4075,name:"skHp%",display:d,def:!0},4076:{id:4076,name:"skMp%",display:d,def:!0},10164:{id:10164,name:"intToPdmg",display:d,noCustom:!0,dps:!0},10165:{id:10165,name:"strToMdmg",display:d,noCustom:!0,dps:!0},10372:{id:10372,name:"intToMdmg",display:d,noCustom:!0,dps:!0},110373:{id:110373,name:"defToPdmg",display:d,noCustom:!0,dps:!0}},rankNames:{0:{id:0,name:"normal"},1:{id:1,name:"magic"},2:{id:2,name:"rare"},3:{id:3,name:"epic"},4:{id:4,name:"unique"},5:{id:5,name:"legendary"}},shopNames:{28001:"lament",28002:"lament",28003:"lament",28004:"lament",28005:"lament",28006:"lament",28007:"lament",28008:"lament",28009:"lament",28101:"lament",29001:"aura",29002:"aura",29003:"aura",29004:"aura",29005:"aura",29006:"aura",29007:"aura",29008:"aura",29009:"aura",5001:"medal",5002:"medal",5003:"medal",5004:"medal",5005:"medal",5006:"medal",5007:"medal",5008:"medal",5009:"medal",5101:"ladder",5102:"ladder",5103:"ladder",5104:"ladder",5105:"ladder",5106:"ladder",5107:"ladder",5108:"ladder",5109:"ladder",59001:"garden bunny",52001:"nightmare",52002:"nightmare",52003:"nightmare",52004:"nightmare",52005:"nightmare",52006:"nightmare",52007:"nightmare",52008:"nightmare",52009:"nightmare",21:"blacksmith",22:"blacksmith",23:"blacksmith",24:"blacksmith",25:"blacksmith",26:"blacksmith",27:"blacksmith",28:"blacksmith",29:"blacksmith",89001:"guild master",88001:"battlefield",88002:"battlefield",88003:"battlefield",88004:"battlefield",88005:"battlefield",88006:"battlefield",88007:"battlefield",88008:"battlefield",88009:"battlefield",66001:"erosion",35006:"plate",14051:"abyss",14052:"abyss",14053:"abyss",14054:"abyss",14055:"abyss",14056:"abyss",14057:"abyss",14058:"abyss",14059:"abyss",40011:"daredevil faire",40012:"daredevil faire",40013:"daredevil faire",40014:"daredevil faire",40015:"daredevil faire",40016:"daredevil faire",40017:"daredevil faire",40018:"daredevil faire",40001:"daredevil faire",40002:"daredevil faire",40111:"daredevil faire",91001:"wrath",45001:"farm",100004:"event"},checkedRank:{0:!0,1:!0,2:!0,3:!0,4:!0,5:!0},typeNames:{0:"weapons",1:"equipment",5:"plates",8:"pouch",38:"plates",90:"welspring",132:"talisman",139:"gems"},elements:{0:{id:0,name:"non-ele"},1:{id:1,name:"fire",dmgStat:16},2:{id:2,name:"ice",dmgStat:17},3:{id:3,name:"light",dmgStat:18},4:{id:4,name:"dark",dmgStat:19}},damageTypes:{0:{id:0,name:"both separate"},1:{id:1,name:"physical"},2:{id:2,name:"magical"},3:{id:3,name:"both combined"}},skillEffectMapping:{2:{id:2,name:"phyisical attack power",mapTo:3001},13:{id:13,name:"mp",mapTo:26},25:{id:25,name:"action speed"},29:{id:29,name:"magic attack power",mapTo:3002},32:{id:32,name:"fire %",mapTo:16},33:{id:33,name:"ice %",mapTo:17},34:{id:34,name:"light %",mapTo:18},35:{id:35,name:"dark %",mapTo:19},36:{id:36,name:"fire def",mapTo:20},37:{id:37,name:"ice def",mapTo:21},38:{id:38,name:"light def",mapTo:22},39:{id:39,name:"dark def",mapTo:23},58:{id:58,name:"hp%",mapTo:4075},59:{id:59,name:"mp%",mapTo:4076},65:{id:65,name:"range"},76:{id:76,name:"movement speed",mapTo:74},87:{id:87,name:"str%",mapTo:4050},88:{id:88,name:"agi%",mapTo:4051},89:{id:89,name:"int%",mapTo:4052},90:{id:90,name:"vit%",mapTo:4053},185:{id:185,name:"wots attack power",mapTo:3e3},251:{id:251,name:"critical chance%",mapTo:1012},164:{id:164,name:"intToPdmg",mapTo:10164},165:{id:165,name:"strToMdmg",mapTo:10165},222:{id:222,name:"hellfire",getVals:function(a){if(a.indexOf(";")>0){var e=a.split(";");return[{id:62,effect:222,max:Number(e[0])/100},{id:4012,effect:222,max:Number(e[1])}]}return[{id:62,effect:222,max:Number(a)/100}]}},372:{id:372,name:"statConversion",getVals:function(a){if(a.indexOf(";")>0){var e=a.split(";");if(3==e.length&&2==e[0]&&6==e[2])return[{id:10372,name:"intToMdmg",max:Number(e[1])}];if(3==e.length&&5==e[0]&&7==e[2])return[{id:110373,name:"defToPdmg",max:Number(e[1])}]}return[]}},389:{id:389,name:"fd buf",mapTo:1029},404:{id:404,name:"critical damage%",mapTo:1103}},gemExchanges:[{id:2,exchange:1,name:"Weapon"},{id:3,exchange:2,name:"Off-Hand Weapon"},{id:4,exchange:3,name:"Headgear"},{id:5,exchange:4,name:"Body Armor"},{id:6,exchange:5,name:"Leg Armor"},{id:7,exchange:6,name:"Gloves"},{id:8,exchange:7,name:"Shoes"},{id:101,exchange:8,name:"Necklace"},{id:102,exchange:9,name:"Earrings"},{id:103,exchange:10,name:"Ring"}],customItems:[{id:0,typeName:"custom",name:"hp unified",stats:[{id:4075,max:.05}]}],getStats:function(a){var e=!1,d=!1,i=!0,m="State1_Max";m in a?e=!0:(m="State1Value")in a&&(d=!0);for(var n=0,s=[];;){n++;var t="State"+n;if(!(t in a))break;var p=a[t];if(p==-1)break;if(107==p);else{var m,l={id:p};if(e?(m="State"+n+"_Max",l.max=a[m]):d?(m="State"+n+"Value",l.max=a[m]):(m="StateValue"+n,l.max=Number(a[m])),l.max>0||l.max<0){if(i)if((m="NeedSetNum"+n)in a){if(0==a[m])break;l.needSetNum=a[m]}else i=!1;s.push(l)}}}return s},setupStat:function(a,e){a.id=Number(e)},mergeStats:function(a,e){function d(a){var e=Number(a.max);m.stats[a.id]&&"pc"in m.stats[a.id]&&(e=Math.floor(e)),a.id in i?i[a.id]+=e:i[a.id]=e}var i={},m=this;angular.forEach(a,function(a,e){a&&d(a)}),e&&angular.forEach(e,function(a,e){a&&d(a)});var n=[];for(var s in i){var t={max:i[s],id:Number(s)};n.push(t)}return n}}}angular.module("dnsim").factory("hCodeValues",[a])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
