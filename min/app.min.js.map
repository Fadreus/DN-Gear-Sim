{"version":3,"sources":["routes.js","about/about.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","filters/filters.js","nav/export.js","nav/nav.js","nav/setup.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","region/region.js","search/custom-items.js","search/item-search.js","search/skill-search.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset","tryInit","vm","reloaded","allLoaded","files","getDntFiles","build","forEach","columns","fileName","isLoaded","newItems","reloadGroup","buildName","updatedSavedItems","items","onChange","progress","this","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","job","damageType","element","secondaryElement","enemyStatCaps","playerStatCaps","conversions","baseStats","heroStats","init","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","directive","scope","bindToController","controllerAs","item","$routeParams","setupBuilds","savedItems","getSavedItems","buildNames","Object","keys","sort","builds","i","length","push","name","groupName","currentGroup","saveBuildSelection","anyItems","createGroup","handleChange","console","log","toggleGroup","url","publish","search","stats","getBuildStats","itemsByCategory","getItemsByCategory","getSaveDate","group","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","jobs","itemColumnsToLoad","character","saveGroup","calcStatPercent","newVal","origVal","Math","round","scrollTo","groupNames","localStorage","getGroupCalcStats","groupCalcStats","getCalculatedStats","getBuild","pickup","index","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","mergeStats","nextGroup","uptoItem","updateRows","prevGroup","foundGroup","headers","summaryStatIds","id","summaryDisplay","pcIndexes","rows","typeName","pcIndex","enchantmentNum","rowIndex","makeFakeCells","data","makeCell","num","click","col","move","swapEnchantmentNumber","setTalisman","splice","replaceAffectAmount","newEnhancementNum","extraStats","stat","max","enchantmentStats","fullStats","getReplaceAffectAmount","statId","itemIndex","initReplaceAffects","item2","fullStats1","fullStats2","gItem","newStats","origStats","getStat","getStatName","retVal","eleId","elements","len","save","selectedCategory","category","byName","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","value","setItem","allowMoreItems","maxCat","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","sparkTypeId","increasingGemSlots","number","numItems","cat","numItemText","removeItem","newItemList","server","newGroup","oldGroupName","damageTypes","getFinalJobs","allJobs","finalJobs","j","getBaseJobName","bJob","newJobs","key","setHeroStats","setJob","getStatCap","colName","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","input","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","datas","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","anyLoading","cancel","reloadItem","saveItem","reset","start","hasOptions","back","pop","testOptions","$scope","region","getById","setLocationByName","g","e","p","h","d","t","s","itemString","split","itemStr","decodeItem","isLoading","newBuildName","filter","$stateful","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","icon","noLocationMenu","normalMenu","buildAction","withBuildMenu","isSearch","indexOf","startedLoading","tlocation","noRegion","dntLocation","fireAction","action","getActions","menu","currentBuild","extraCss","$route","dntInit","translationsStatus","progressTranslations","translate","msg","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","buildSearch","onlineService","getClassBuilds","then","jobBuilds","maxDisplay","totalNumResults","jobId","showMoreResults","extra","allResults","getFilteredBuilds","uid","results","result","f","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","openServer","load","user","getUser","handleError","err","show","login","saveProfile","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","openLocal","getBuildLimit","maxBuilds","getNumStoredBuilds","_","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","copyLocally","clearGroup","addAffectAmount","groupItems","getAddAffectAmount","initAddAffects","getGroupItems","numMatches","str","itemSplit","exchangeType","itemSource","a","b","hasMaxExchangable","maxExchange","addToGroup","replace","replaceItem","newStatVal","dropdownStats","noCustom","getStats","newStat","addStat","removeStat","getNewStatName","getNewStatDisplayValue","getStatDisplayValue","display","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","setEnchantment","EnchantLevel","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","find","showMaterials","materials","itemId","itemCount","NameID","NameIDParam","material","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkDnt","amount","itemFactory","typeId","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","getCharmItems","TypeParam1","getPouchItems","boxType","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","found","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Number","Disjointamount","getPlates","plateFile","r","row","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","initTransfers","transfers","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","getJobName","getAllJobs","needJobClass","jobName","anyToLoad","setFullStats","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","getDescription","description","mainDnt","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","encodeItem","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","customItemCtrl","customItems","currentResults","nameSearch","getResults","createCustomItem","jobInit","lastJobNumber","byPath","catName","minLevel","maxLevel","grades","searchable","savedSearchStatId","navigate","hideLevel","hideJob","rankChecked","checkedRank","searchObject","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideRank","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","skillSearchCtrl","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","translationsInit","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","boxeContents","initBoxes","box","numBoxes","nameId","nameParam","chooseClass","restrict","onSetJob","chooseClassController","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","collapse","dnsimCategoryLinksController","collapsed","setCategory","dnsimItemIcon","link","attrs","$watch","newValue","oldValue","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","openItem","dnsimJobIcon","JobIcon","dnsimLoading","transclude","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","hasStartedLoading","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","searchType","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","copy","deleteNullProperties","set","compressBuild","each","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","expedition plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","dps","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","134","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add","statMap"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').config(['$routeProvider', config]);\r\n\r\nfunction config($routeProvider) {\r\n\r\n  $routeProvider.\r\n  \r\n    when('/about', {\r\n      templateUrl: 'ui/about/about.html',\r\n      controller: 'AboutCtrl as about'\r\n    }).\r\n    \r\n    when('/setup', {\r\n      templateUrl: 'ui/nav/setup.html',\r\n      controller: 'SetupCtrl'\r\n    }).\r\n    when('/test', {\r\n      templateUrl: 'ui/nav/test.html',\r\n      controller: 'TestCtrl'\r\n    }).\r\n    \r\n    when('/items/', {\r\n      templateUrl: 'ui/secrets/items.html',\r\n      controller: 'ItemsCtrl as items'\r\n    }).\r\n    \r\n    when('/', {\r\n      redirectTo: '/builds'\r\n    }).\r\n    when('/builds', {\r\n      templateUrl: 'ui/builds/build-list.html',\r\n      controller: 'BuildListCtrl as buildList'\r\n    }).\r\n    when('/build/:groupName*', {\r\n      templateUrl: 'ui/builds/build-list.html',\r\n      controller: 'BuildListCtrl as buildList'\r\n    }).\r\n    when('/view-group/:region?', {\r\n      templateUrl: 'ui/builds/view-group.html',\r\n      controller: 'ViewGroupCtrl'\r\n    }).\r\n    when('/edit-build/:groupName*', {\r\n      templateUrl: 'ui/builds/edit-build.html',\r\n      controller: 'EditBuildCtrl as editGroup',\r\n      reloadOnSearch: false,\r\n    }).\r\n    when('/new-build', {\r\n      templateUrl: 'ui/builds/edit-build.html',\r\n      controller: 'EditBuildCtrl as editGroup',\r\n      reloadOnSearch: false,\r\n    }).\r\n    when('/delete-build/:name*', {\r\n      templateUrl: 'ui/builds/delete-build.html',\r\n      controller: 'DeleteBuildCtrl as deleteBuild',\r\n      reloadOnSearch: false,\r\n    }).\r\n    \r\n    when('/search/:itemType?', {\r\n      templateUrl: 'ui/search/item-search.html',\r\n      controller: 'ItemSearchCtrl'\r\n    }).\r\n    \r\n    when('/item/:region?/:itemString*', {\r\n      templateUrl: 'ui/item/item.html',\r\n      controller: 'ItemCtrl',\r\n      reloadOnSearch: false,\r\n    }).\r\n    \r\n    when('/export', {\r\n      templateUrl: 'ui/nav/export.html',\r\n      controller: 'ExportCtrl',\r\n    }).\r\n    \r\n    when('/talismans', {\r\n      templateUrl: 'ui/builds/build-talismans.html',\r\n      controller: 'BuildTalismansCtrl as ctrl',\r\n    }).\r\n    \r\n    when('/publish', {\r\n      templateUrl: 'ui/online/publish.html',\r\n      controller: 'PublishCtrl as ctrl',\r\n    }).\r\n    \r\n    when('/publish', {\r\n      templateUrl: 'ui/online/publish.html',\r\n      controller: 'PublishCtrl as ctrl',\r\n    }).\r\n    \r\n    when('/profile/:uid', {\r\n      templateUrl: 'ui/online/profile.html',\r\n      controller: 'ProfileCtrl as ctrl',\r\n    }).\r\n    \r\n    when('/published/:uid/:buildName*', {\r\n      templateUrl: 'ui/online/published.html',\r\n      controller: 'PublishedCtrl as ctrl',\r\n    }).\r\n    \r\n    when('/build-search/:jobId?', {\r\n      templateUrl: 'ui/online/build-search.html',\r\n      controller: 'BuildSearchCtrl as ctrl',\r\n    }).\r\n    \r\n    otherwise({\r\n      redirectTo: '/builds'\r\n    });\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\nangular.module('dnsim')\r\n.controller('AboutCtrl', \r\n  ['$window',\r\n  function($window) {\r\n    'use strict';\r\n    document.body.className = 'default-back';\r\n    $window.document.title = 'DN Gear Sim';\r\n  }]\r\n);\r\n})();","angular.module('dnsim').controller('buildActionsCtrl',\r\n\r\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\r\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  this.deleteGroup = function() {\r\n    $location.path('/delete-build/' + vm.buildName);\r\n  }\r\n  \r\n  this.editGroup = function() {\r\n    $location.path('/edit-build/' + vm.buildName)\r\n  }\r\n  \r\n  this.copyGroup = function() {\r\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\r\n    \r\n    saveHelper.renameSavedGroup(\r\n      newGroupName, \r\n      newGroupName,\r\n      vm.build.enemyLevel,\r\n      vm.build.playerLevel,\r\n      vm.build.heroLevel,\r\n      vm.build.job,\r\n      vm.build.damageType,\r\n      vm.build.element,\r\n      vm.build.secondaryElement,\r\n      vm.build.enemyStatCaps, \r\n      vm.build.playerStatCaps, \r\n      vm.build.conversions, \r\n      vm.build.baseStats, \r\n      vm.build.heroStats);\r\n    \r\n    $location.path('/build/' + newGroupName);\r\n  }\r\n  \r\n  this.reloaded = false;\r\n  this.reloadGroup = function() {\r\n    dntReset();\r\n    vm.reloaded = false;\r\n    \r\n    translations.init(progress, tryInit);\r\n\r\n    var files = groupHelper.getDntFiles(vm.build);\r\n    angular.forEach(files, function(columns, fileName) {\r\n      dntData.init(fileName, columns, progress, tryInit);\r\n    });\r\n    \r\n    vm.onChange();\r\n  }\r\n\r\n  function tryInit() {\r\n    if(vm.reloaded) {\r\n      return;\r\n    }\r\n    \r\n    var allLoaded = true;\r\n    var files = groupHelper.getDntFiles(vm.build);\r\n    angular.forEach(files, function(columns, fileName) {\r\n      if(!dntData.isLoaded(fileName)) {\r\n        allLoaded = false;\r\n        return;\r\n      }\r\n    });\r\n    \r\n    if(allLoaded && translations.isLoaded()) {\r\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\r\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\r\n      vm.build.items = newItems;\r\n      \r\n      vm.reloaded = true;\r\n      $timeout(vm.onChange);\r\n    }\r\n  }\r\n  \r\n  function progress() {\r\n  }\r\n  \r\n  this.createShortUrl = function() {\r\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\r\n  }\r\n    \r\n  this.setShortUrl = function() {\r\n    if(vm.build) {\r\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\r\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\r\n    }\r\n  }\r\n  \r\n  this.setShortUrl();\r\n}])\r\n.directive('dngearsimBuildActions', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      buildName: '=buildName',\r\n      build: '=build',\r\n      onChange: '&onChange'\r\n    },\r\n    controller: 'buildActionsCtrl',\r\n    controllerAs: 'buildActions',\r\n    templateUrl: 'ui/builds/build-actions.html'\r\n  };\r\n});","angular.module('dnsim').controller('buildItemCtrl',\r\n\r\n['$timeout','statHelper','saveHelper',\r\nfunction($timeout,statHelper,saveHelper) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n}])\r\n.directive('dngearsimBuildItem', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n      buildName: '=buildName',\r\n      build: '=build',\r\n      onChange: '&onChange'\r\n    },\r\n    controller: 'buildItemCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/builds/build-item.html'\r\n  };\r\n});","angular.module('dnsim').controller('BuildListCtrl', \r\n  [ '$window','$location','$routeParams','$timeout','saveHelper',\r\n  function($window,$location,$routeParams,$timeout,saveHelper) {\r\n    'use strict';\r\n    \r\n    var vm = this;\r\n    document.body.className = 'saved-back';\r\n    this.setupBuilds = function() {\r\n      vm.savedItems = saveHelper.getSavedItems();\r\n      vm.buildNames = Object.keys(vm.savedItems).sort();\r\n      vm.builds = [];\r\n      for(var i=0;i<vm.buildNames.length;++i) {\r\n        vm.builds.push({\r\n          name: vm.buildNames[i],\r\n          build: vm.savedItems[vm.buildNames[i]],\r\n        });\r\n      }\r\n    }\r\n    this.setupBuilds();\r\n    \r\n    if('groupName' in $routeParams) {\r\n      if($routeParams.groupName != this.currentGroup) {\r\n        this.currentGroup = $routeParams.groupName;\r\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\r\n      }\r\n    }\r\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\r\n      $location.path('/build/' + this.currentGroup);\r\n    }\r\n    else {\r\n      this.currentGroup = null;\r\n    }\r\n    \r\n    if(this.currentGroup) {\r\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\r\n    }\r\n    else {\r\n      $window.document.title = 'DN Gear Sim | BUILDS';\r\n    }\r\n\r\n    this.anyItems = function() {\r\n      return Object.keys(this.savedItems).length > 0;\r\n    }\r\n\r\n    this.createGroup = function() {\r\n      $location.path('/new-build');\r\n    }\r\n    \r\n    this.handleChange = function() {\r\n      vm.setupBuilds();\r\n      $timeout();\r\n      console.log('change');\r\n    }\r\n  \r\n    this.toggleGroup = function(buildName) {\r\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\r\n      $location.url('/build/' + buildName);\r\n    }\r\n    \r\n    this.publish = function() {\r\n      $location.url('/publish');\r\n    }\r\n    \r\n    this.search = function() {\r\n      $location.url('/build-search');\r\n    }\r\n  }]\r\n);\r\n","angular.module('dnsim').controller('buildStatsCtrl',\r\n\r\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\r\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\r\n  'use strict';\r\n}])\r\n.directive('dngearsimBuildStats', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      stats: '=stats',\r\n      build: '=build',\r\n    },\r\n    controller: 'buildStatsCtrl',\r\n    controllerAs: 'statsCtrl',\r\n    templateUrl: 'ui/builds/build-stats.html'\r\n  };\r\n});","angular.module('dnsim').controller('buildSummaryCtrl',\r\n\r\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\r\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  this.stats = statHelper.getBuildStats(this.build);\r\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\r\n  \r\n  this.getSaveDate = function(group) {\r\n    if(vm.build.lastUpdate > 0) {\r\n      var lastUpdate = new Date(vm.build.lastUpdate);\r\n      return lastUpdate.toLocaleDateString();\r\n    }\r\n  }\r\n  \r\n  this.getSaveTime = function(group) {\r\n    if(vm.build.lastUpdate > 0) {\r\n      var lastUpdate = new Date(vm.build.lastUpdate);\r\n      return lastUpdate.toLocaleTimeString();\r\n    }\r\n  }\r\n  \r\n  this.getBuildSummary = function(group) {\r\n    var summary = '';\r\n    \r\n    var typeCounts = {};\r\n    var cashItems = 0;\r\n    var titles = 0;\r\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\r\n      if(itemsByType.length > 0) {\r\n        if(summary.length > 0) {\r\n          summary += ', ';\r\n        }\r\n        summary += itemsByType.length + ' ' + type;\r\n      }\r\n    });\r\n    \r\n    return summary;\r\n  }\r\n}])\r\n.directive('dngearsimBuildSummary', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      buildName: '=buildName',\r\n      build: '=build'\r\n    },\r\n    controller: 'buildSummaryCtrl',\r\n    controllerAs: 'buildCtrl',\r\n    templateUrl: 'ui/builds/build-summary.html'\r\n  };\r\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\r\n\r\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\r\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  document.body.className = 'default-back';\r\n  $window.document.title = 'DN Gear Sim | TALISMANS';\r\n  $window.scrollTo(0, 0);\r\n  \r\n  this.savedItems = saveHelper.getSavedItems();\r\n  this.groupNames = Object.keys(this.savedItems);\r\n  if(!this.groupNames) {\r\n    this.groupNames = [];\r\n  }\r\n  if(this.groupNames.length > 0) {\r\n    this.groupName = localStorage.getItem('currentGroup');\r\n  }\r\n  else {\r\n    this.groupName = null;\r\n  }\r\n  \r\n  if(!this.groupName || !(this.groupName in this.savedItems)) {\r\n    if(this.groupNames.length > 0) {\r\n      this.groupName = this.groupNames[0];\r\n    }\r\n  }\r\n  \r\n  if(!this.groupName) {\r\n    console.log('cannot find build');\r\n    return;\r\n  }\r\n  \r\n  this.getGroupCalcStats = function() {\r\n    if(this.groupCalcStats == null) {\r\n      var group = vm.savedItems[vm.groupName];\r\n      if(group) {\r\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\r\n      }\r\n    }\r\n    \r\n    return this.groupCalcStats;\r\n  }\r\n  \r\n  this.getBuild = function() {\r\n    return vm.savedItems[vm.groupName];\r\n  }\r\n  \r\n  this.pickup = function(index) {\r\n    vm.selectedIndex = index;\r\n    \r\n    vm.replaceHPAffectAmount = [];\r\n    vm.replaceMDmgAffectAmount = [];\r\n    vm.replacePDmgAffectAmount = [];\r\n    vm.replaceAvgDmgAffectAmount = [];\r\n  }\r\n  \r\n  this.getCalculatedStats = function(group, items) {\r\n    var nakedStats = statHelper.getNakedStats(group);\r\n    var combinedStats = statHelper.getCombinedStats(items);\r\n    var setStats = statHelper.getSetStats(items);\r\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\r\n    if(group.heroStats != null && group.heroStats.length > 0) {\r\n      allStats = allStats.concat(group.heroStats);\r\n    }\r\n    allStats = hCodeValues.mergeStats(allStats);\r\n    \r\n    return statHelper.getCalculatedStats(group, allStats);\r\n  }\r\n  \r\n  this.nextGroup = function() {\r\n    \r\n    var uptoItem = false;\r\n    var nextGroup = null;\r\n    angular.forEach(vm.groupNames, function(groupName, index) {\r\n      if(uptoItem) {\r\n        if(nextGroup == null) {\r\n          nextGroup = groupName;\r\n        }\r\n      }\r\n      if(groupName == vm.groupName) {\r\n        uptoItem = true;\r\n      }\r\n    });\r\n    \r\n    if(nextGroup == null) {\r\n      nextGroup = vm.groupNames[0];\r\n    }\r\n    \r\n    vm.groupName = nextGroup;\r\n    vm.groupCalcStats = null;\r\n    saveGroup();\r\n    vm.savedItems = saveHelper.getSavedItems();\r\n    vm.updateRows();\r\n  }\r\n  \r\n  this.prevGroup = function() {\r\n    \r\n    var foundGroup = false;\r\n    var prevGroup = null;\r\n    angular.forEach(vm.groupNames, function(groupName, index) {\r\n      if(groupName == vm.groupName) {\r\n        foundGroup = true;\r\n      }\r\n      \r\n      if(!foundGroup) {\r\n        prevGroup = groupName;\r\n      }\r\n    });\r\n    \r\n    if(prevGroup == null) {\r\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\r\n    }\r\n    \r\n    vm.groupName = prevGroup;\r\n    vm.groupCalcStats = null;\r\n    saveGroup();\r\n    vm.savedItems = saveHelper.getSavedItems();\r\n    vm.updateRows();\r\n  }\r\n  \r\n  function saveGroup() {\r\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\r\n  }\r\n  \r\n  this.headers = [\r\n    '+100%',\r\n    '+75%',\r\n    '+25%',\r\n    '+0%',\r\n    ];\r\n  \r\n  this.summaryStatIds = [];\r\n  for(var id in hCodeValues.stats) {\r\n    if(hCodeValues.stats[id].summaryDisplay) {\r\n      this.summaryStatIds.push(id);\r\n    }\r\n  }\r\n  \r\n  this.pcIndexes = {};\r\n  this.pcIndexes['100'] = 0;\r\n  this.pcIndexes['75'] = 1;\r\n  this.pcIndexes['25'] = 2;\r\n  this.pcIndexes['0'] = 3;\r\n  \r\n  this.selectedIndex = -1;\r\n  \r\n  this.rows = [];\r\n  \r\n  this.updateRows = function() {\r\n    vm.rows = [];\r\n        \r\n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\r\n      if(item.typeName == 'talisman') {\r\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\r\n        if(!pcIndex && pcIndex != 0) {\r\n          pcIndex = 3;\r\n        }\r\n        \r\n        var rowIndex = 0;\r\n        for(;;) {\r\n          if(!vm.rows[rowIndex]) {\r\n            vm.rows[rowIndex] = vm.makeFakeCells();\r\n          }\r\n          \r\n          if(vm.rows[rowIndex][pcIndex].index < 0) {\r\n            if(!item.enchantmentNum) {\r\n              item.enchantmentNum = 0;\r\n            }\r\n            \r\n            var data = vm.makeCell(item, index);\r\n            vm.rows[rowIndex][pcIndex] = data;\r\n            break;\r\n          }\r\n          else {\r\n            rowIndex++;\r\n          }\r\n        }\r\n      }\r\n      \r\n    });\r\n    \r\n    if(vm.rows.length < 3) {\r\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\r\n    }\r\n  }\r\n  \r\n  this.makeFakeCells = function(num) {\r\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\r\n  }\r\n  \r\n  this.makeCell = function(item, index) {\r\n    return { item: item, index: index };\r\n  }\r\n  \r\n  this.click = function(col) {\r\n    if(vm.selectedIndex == -1) {\r\n      if(col.index >= 0) {\r\n        vm.pickup(col.index);\r\n      }\r\n    }\r\n    else {\r\n      vm.move(col);\r\n    }\r\n  }\r\n  \r\n  this.move = function(col) {\r\n    \r\n    var items = vm.savedItems[vm.groupName].items;\r\n    if(col.index >= 0) {\r\n      var swapEnchantmentNumber = col.item.enchantmentNum;\r\n      \r\n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\r\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\r\n      items[col.index] = items[vm.selectedIndex];\r\n      items[vm.selectedIndex] = col.item;\r\n    }\r\n    else {\r\n      var item = items[vm.selectedIndex];\r\n      vm.setTalisman(item, col.item.enchantmentNum);\r\n      items.splice(vm.selectedIndex, 1);\r\n      items.push(item);\r\n    }\r\n\r\n    vm.groupCalcStats = null;\r\n    vm.selectedIndex = -1;\r\n    vm.updateRows();\r\n    vm.replaceAffectAmount = {};\r\n    $timeout();\r\n  }\r\n  \r\n  this.setTalisman = function(item, newEnhancementNum) {\r\n    var extraStats = [];\r\n    angular.forEach(item.stats, function(stat, index) {\r\n      if(newEnhancementNum) {\r\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\r\n      }\r\n    });\r\n    \r\n    item.enchantmentStats = extraStats;\r\n    item.enchantmentNum = newEnhancementNum;\r\n    \r\n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\r\n  }\r\n  \r\n    \r\n  this.replaceAffectAmount = {};\r\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\r\n    this.initReplaceAffects(itemIndex, item);\r\n    if(this.replaceAffectAmount[itemIndex]) {\r\n      return this.replaceAffectAmount[itemIndex][statId];\r\n    }\r\n  }\r\n  \r\n  this.initReplaceAffects = function(itemIndex, item) {\r\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\r\n      return;\r\n    }\r\n    this.replaceAffectAmount[itemIndex] = {};\r\n    \r\n    var group = vm.savedItems[vm.groupName];\r\n    var item2 = group.items[vm.selectedIndex];\r\n    \r\n    var extraStats = [];\r\n    var fullStats1 = [];\r\n    if(item.stats) {\r\n      angular.forEach(item.stats, function(stat, index) {\r\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\r\n      });\r\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\r\n    }\r\n    \r\n    extraStats = [];\r\n    angular.forEach(item2.stats, function(stat, index) {\r\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\r\n    });\r\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\r\n\r\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\r\n    angular.forEach(group.items, function(gItem , index) {\r\n      if(item !== gItem && item2 !== gItem) {\r\n        newItems.push(gItem);\r\n      }\r\n    });\r\n    \r\n    var newStats = vm.getCalculatedStats(group, newItems);\r\n    var origStats = vm.getGroupCalcStats();\r\n    \r\n    for(var id in hCodeValues.stats) {\r\n      if(hCodeValues.stats[id].summaryDisplay) {\r\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.getStatName = function(id) {\r\n    var retVal = '';\r\n    if(hCodeValues.stats[id].element == 'primary') {\r\n      var eleId = 0;\r\n      if(vm.savedItems[vm.groupName].element) {\r\n        eleId = vm.savedItems[vm.groupName].element.id;\r\n      }\r\n      retVal += hCodeValues.elements[eleId].name;\r\n    }\r\n    else if(hCodeValues.stats[id].element == 'secondary') {\r\n      var eleId = 0;\r\n      if(vm.savedItems[vm.groupName].secondaryElement) {\r\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\r\n      }\r\n      retVal += hCodeValues.elements[eleId].name;\r\n    }\r\n    return retVal + ' ' + hCodeValues.stats[id].name;\r\n  }\r\n  \r\n  this.getStat = function(id, stats) {\r\n    var len = stats.length;\r\n    for(var i=0;i<len;++i) {\r\n      if(stats[i].id == id) {\r\n        return stats[i];\r\n      }\r\n    }\r\n    return {id: id, max:0};\r\n  }\r\n  \r\n  function calcStatPercent(newVal, origVal) {\r\n    if(newVal && origVal) {\r\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  this.save = function() {\r\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\r\n    $location.path('/build/' + vm.groupName);\r\n  }\r\n  \r\n  this.updateRows();\r\n  \r\n}]); ","angular.module('dnsim').controller('buildCtrl',\r\n\r\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\r\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  this.stats = statHelper.getBuildStats(this.build);\r\n  \r\n  var selectedCategory = localStorage.getItem('selectedItemCategory');\r\n  this.category = itemCategory.byName(selectedCategory);\r\n  if(!this.category) {\r\n    selectedCategory = 'titles';\r\n    this.category = itemCategory.byName('titles');\r\n  }\r\n  \r\n  this.getCategoryItems = function() {\r\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\r\n    if(vm.category.name in itemsByCat) {\r\n      return itemsByCat[vm.category.name];\r\n    }\r\n    else {\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  this.getCategories = function() {\r\n    return itemCategory.categories;\r\n  }\r\n    \r\n  this.setSelectedCategory = function(value) {\r\n    this.category = itemCategory.byName(value);\r\n    localStorage.setItem('selectedItemCategory', value);\r\n  }\r\n\r\n  this.toggleGroup = function() {\r\n    localStorage.setItem('currentGroup', null);\r\n    $location.url('/builds');\r\n  }\r\n  \r\n  this.getSaveDate = function(group) {\r\n    if(vm.build.lastUpdate > 0) {\r\n      var lastUpdate = new Date(vm.build.lastUpdate);\r\n      return lastUpdate.toLocaleDateString();\r\n    }\r\n  }\r\n  \r\n  this.getSaveTime = function(group) {\r\n    if(vm.build.lastUpdate > 0) {\r\n      var lastUpdate = new Date(vm.build.lastUpdate);\r\n      return lastUpdate.toLocaleTimeString();\r\n    }\r\n  }\r\n  \r\n  this.allowMoreItems = function() {\r\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\r\n  }\r\n  \r\n  this.getItemCount = function() {\r\n    var itemCountText = '';\r\n    var allItems = vm.build.items;\r\n    \r\n    if(vm.category.name == 'offensive gems') {\r\n      var numOffensiveSlots = 0;\r\n      var numOffensiveGems = 0;\r\n      angular.forEach(allItems, function(item, index) {\r\n        if(item.typeName == vm.category.name) {\r\n          numOffensiveGems++;\r\n        }\r\n        else if(item.offensiveGemSlots) {\r\n          numOffensiveSlots += item.offensiveGemSlots;\r\n        }\r\n      });\r\n      \r\n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\r\n    }\r\n    else if(vm.category.name == 'increasing gems') {\r\n      \r\n      var totalIncreasingGems = 0;\r\n      var numIncreasingSlots = 0;\r\n      var numIncreasingGems = {};\r\n      angular.forEach(allItems, function(item, index) {\r\n        if(item.typeName == vm.category.name) {\r\n          var gemType = item.sparkTypeId;\r\n          if(!gemType) {\r\n            gemType = 0;\r\n          }\r\n          \r\n          if(!(gemType in numIncreasingGems)) {\r\n            numIncreasingGems[gemType] = 0;\r\n          }\r\n          numIncreasingGems[gemType]++;\r\n          totalIncreasingGems++;\r\n        }\r\n        else if(item.increasingGemSlots) {\r\n          numIncreasingSlots += item.increasingGemSlots;\r\n        }\r\n      });\r\n      \r\n      itemCountText = ''\r\n      angular.forEach(numIncreasingGems, function(number, gemType) {\r\n        if(itemCountText.length > 0) {\r\n          itemCountText += '+';\r\n        }\r\n        itemCountText += number;\r\n      });\r\n      \r\n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\r\n    }\r\n    else {\r\n      var numItems = 0;\r\n      angular.forEach(allItems, function(item, index) {\r\n        if(item && item.typeName == vm.category.name) {\r\n          numItems++;\r\n        }\r\n      });\r\n      \r\n      itemCountText = numItems;\r\n      var cat = itemCategory.byName(vm.category.name);\r\n      if(cat && 'numItemText' in cat) {\r\n        itemCountText += ' / ' + cat.numItemText;\r\n      }\r\n    }\r\n    \r\n    return itemCountText + ' ' + vm.category.name;\r\n  }\r\n  \r\n  this.handleChange = function() {\r\n    vm.onChange();\r\n  }\r\n  \r\n  this.removeItem = function(item) {\r\n    item.removeItem = true;\r\n    var newItemList = [];\r\n    angular.forEach(vm.build.items, function(gItem, index) {\r\n      if(gItem && !gItem.removeItem) {\r\n        newItemList.push(gItem);\r\n      }\r\n    });\r\n    \r\n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\r\n    vm.onChange();\r\n  }\r\n  \r\n}])\r\n.directive('dngearsimBuild', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      buildName: '=buildName',\r\n      build: '=build',\r\n      onChange: '&onChange',\r\n      server: '=server'\r\n    },\r\n    controller: 'buildCtrl',\r\n    controllerAs: 'buildCtrl',\r\n    templateUrl: 'ui/builds/build.html'\r\n  };\r\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\r\n\r\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\r\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  this.newGroup = true;\r\n  if('name' in $routeParams) {\r\n      this.name = $routeParams.name;\r\n  }\r\n  \r\n  this.delete = function() {\r\n    saveHelper.updatedSavedItems(this.name, []);\r\n    $location.path('/builds/');\r\n  }\r\n    \r\n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\r\n\r\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\r\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  this.savedItems = saveHelper.getSavedItems();\r\n  this.group = {};\r\n  this.newGroup = true;\r\n  if('groupName' in $routeParams) {\r\n      this.groupName = $routeParams.groupName;\r\n      if(this.groupName in this.savedItems) {\r\n        this.group = this.savedItems[this.groupName];\r\n        this.newGroup = false;\r\n      }\r\n  }\r\n  else {\r\n    this.groupName = '';\r\n  }\r\n  this.oldGroupName = this.groupName;\r\n  this.heroStats = [];\r\n  this.elements = hCodeValues.elements;\r\n  this.damageTypes = hCodeValues.damageTypes;\r\n  \r\n  if(this.group.damageType) {\r\n    this.damageType = this.group.damageType;\r\n  }\r\n  else {\r\n    this.damageType = hCodeValues.damageTypes[0];\r\n  }\r\n    \r\n  if(this.group.element) {\r\n    this.element = this.group.element;\r\n  }\r\n  else {\r\n    this.element = hCodeValues.elements[0];\r\n  }\r\n    \r\n  if(this.group.secondaryElement) {\r\n    this.secondaryElement = this.group.secondaryElement;\r\n  }\r\n  else {\r\n    this.secondaryElement = hCodeValues.elements[0];\r\n  }\r\n\r\n  if(this.group.enemyLevel) {\r\n    this.enemyLevel = this.group.enemyLevel;\r\n  }\r\n  else {\r\n    this.enemyLevel = 90;\r\n  }\r\n  \r\n  if(this.group.playerLevel) {\r\n    this.playerLevel = this.group.playerLevel;\r\n  }\r\n  else {\r\n    this.playerLevel = 90;\r\n  }\r\n  \r\n  if(this.group.heroLevel && this.group.heroLevel > 0) {\r\n    this.heroLevel = this.group.heroLevel;\r\n  }\r\n  else {\r\n    this.heroLevel = 1;\r\n  }\r\n  \r\n  this.getFinalJobs = function() {\r\n    var allJobs = jobs.getFinalJobs();\r\n    var finalJobs = [];\r\n    for(var j=0;j<allJobs.length;++j) {\r\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\r\n        finalJobs.push(allJobs[j]);\r\n      }\r\n    }\r\n    return finalJobs;\r\n  }\r\n  \r\n  this.init = function(vm) {\r\n    var newJobs = jobs.getFinalJobs();\r\n    if(newJobs.length > 0) {\r\n      $timeout( function() {\r\n        \r\n        if('job' in vm.group) {\r\n          angular.forEach(newJobs, function(value, key) {\r\n            if(value.id == vm.group.job.id) {\r\n              vm.job = value;\r\n            }\r\n          });\r\n        }\r\n        \r\n        vm.setHeroStats();\r\n      });\r\n    }\r\n  }\r\n  \r\n  this.setJob = function() {\r\n    $window.scrollTo(0, 0);\r\n  }\r\n  \r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n  \r\n  character.init(function() { vm.init(vm) });\r\n  \r\n  this.getStatCap = function(colName, useLevel) {\r\n    return character.getStatCaps(useLevel)[colName];\r\n  }\r\n  this.getJobConversion = function(colName) {\r\n    return character.getConversions(this.job.id)[colName];\r\n  }\r\n  this.getJobBaseStat = function(colName) {\r\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\r\n  }\r\n  \r\n  this.invalidGroupName = function() {\r\n    if(!this.groupName) {\r\n      return true;\r\n    }\r\n    \r\n    if(this.groupName in this.savedItems) {\r\n      if(this.newGroup || this.groupName != this.oldGroupName) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  this.ok = function() {\r\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\r\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\r\n    var conversions = character.getConversions(this.job.id);\r\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\r\n    var heroStats = character.getHeroStats(this.heroLevel);\r\n    \r\n    if(this.newGroup) {\r\n      this.oldGroupName = this.groupName;\r\n      saveHelper.importGroup(this.groupName, []);\r\n    }\r\n    \r\n    saveHelper.renameSavedGroup(\r\n      this.oldGroupName, \r\n      this.groupName,\r\n      this.enemyLevel,\r\n      this.playerLevel,\r\n      this.heroLevel,\r\n      this.job,\r\n      this.damageType,\r\n      this.element,\r\n      this.secondaryElement,\r\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\r\n    \r\n    $location.path('/build/' + this.groupName);\r\n  }\r\n  \r\n  this.setHeroStats = function() {\r\n    this.heroStats = character.getHeroStats(this.heroLevel);\r\n    // console.log('got ' + this.heroStats.length + ' hero stats');\r\n  }\r\n  \r\n  $timeout(function() {\r\n    var input = document.getElementById('groupNameInput');\r\n    if(input) {\r\n      input.focus();\r\n      input.setSelectionRange(0, 9999);\r\n    }\r\n  });\r\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\r\n\r\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\r\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  vm.startedForCat = '';\r\n  vm.stepNumber = 0;\r\n  vm.datas = [];\r\n  vm.options = [];\r\n  \r\n  this.setOptions = function() {\r\n    if(vm.hasStarted()) {\r\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\r\n      if(vm.options.length == 1) {\r\n        vm.selectOption(vm.options[0]);\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.selectOption = function(value) {\r\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\r\n    vm.datas.push(data);\r\n    vm.stepNumber++;\r\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\r\n      \r\n      var newItem = quickAdd.getItem(vm.datas);\r\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\r\n      angular.forEach(dntFiles, function(columns, fileName) {\r\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\r\n      });\r\n      vm.tryToAddItem(dntFiles, newItem);\r\n    }\r\n    else {\r\n      vm.setOptions();\r\n      console.log('setup next step');\r\n    }\r\n  }\r\n  \r\n  this.tryToAddItem = function(dntFiles, item) {\r\n    if(!dntData.anyLoading()) {\r\n      \r\n      var allLoaded = true;\r\n      angular.forEach(dntFiles, function(columns, fileName) {\r\n        if(!dntData.isLoaded(fileName)) {\r\n          allLoaded = false;\r\n        }\r\n      });\r\n      \r\n      if(allLoaded) {\r\n        if(vm.datas.length > 0) {\r\n          vm.cancel();\r\n          var newItem = exportLinkHelper.reloadItem(item);\r\n          saveHelper.saveItem(vm.buildName, newItem);\r\n          vm.onChange();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.reset = function() {\r\n    vm.stepNumber = 0;\r\n    vm.datas = [];\r\n    $timeout(function() {\r\n      vm.setOptions();\r\n    });\r\n  }\r\n  \r\n  this.hasStarted = function() {\r\n    return vm.startedForCat == vm.category.name;\r\n  }\r\n  \r\n  this.start = function() {\r\n    vm.startedForCat = vm.category.name;\r\n    \r\n    jobs.init(function() {}, vm.reset);\r\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\r\n    itemCategory.init(vm.category.name, vm.reset);\r\n  }\r\n  \r\n  this.hasOptions = function() {\r\n    return quickAdd.hasOptions(vm.category, vm.build, []);\r\n  }\r\n  \r\n  this.cancel = function() {\r\n    vm.startedForCat = '';\r\n    vm.reset();\r\n  }\r\n  \r\n  this.back = function() {\r\n    if(vm.stepNumber == 0) {\r\n      vm.cancel();\r\n    }\r\n    else {\r\n      do {\r\n        vm.stepNumber--;\r\n        vm.datas.pop();\r\n        \r\n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\r\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\r\n      \r\n      vm.setOptions();\r\n    }\r\n  }\r\n  \r\n}])\r\n.directive('dngearsimQuickAdd', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      category: '=category',\r\n      build: '=build',\r\n      buildName: '=buildName',\r\n      onChange: '&onChange',\r\n    },\r\n    controller: 'quickAddCtrl',\r\n    controllerAs: 'quickAdd',\r\n    templateUrl: 'ui/builds/quick-add.html'\r\n  };\r\n});","angular.module('dnsim').controller('ViewGroupCtrl', \r\n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\r\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\r\n    'use strict';\r\n  \r\n    document.body.className = 'saved-back';\r\n    $window.document.title = 'DN Gear Sim';\r\n    \r\n    region.setLocationByName($routeParams.region);\r\n    \r\n    $scope.buildName = '';\r\n    $scope.build = {};\r\n    \r\n\r\n    if('g' in $routeParams && 'i' in $routeParams) {\r\n      $scope.buildName = $routeParams.g;\r\n      \r\n      $scope.enemyLevel = $routeParams.e;\r\n      $scope.playerLevel = $routeParams.p;\r\n      $scope.heroLevel = $routeParams.h;\r\n      $scope.job = { id: $routeParams.j };\r\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\r\n      $scope.element = hCodeValues.elements[$routeParams.t];\r\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\r\n        \r\n      var items = [];\r\n      \r\n      var itemString = $routeParams.i;\r\n      \r\n      angular.forEach(itemString.split(','), function(itemStr, index) {\r\n        var item = exportLinkHelper.decodeItem(itemStr);\r\n        \r\n        if(item.id > 0) {\r\n          items.push(item);\r\n        }\r\n      });\r\n\r\n      $scope.build = {};\r\n      $scope.savedItems = {};\r\n      $scope.savedItems[$scope.buildName] = $scope.build;\r\n      $scope.build.items = items;\r\n      $scope.isLoading = true;\r\n      \r\n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\r\n        dntData.init(fileName, columns, progress, tryInit);\r\n      });\r\n      \r\n      translations.init(progress, tryInit);\r\n      jobs.init(progress, tryInit);\r\n      character.init(tryInit);\r\n      \r\n      $timeout();\r\n    }\r\n    \r\n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\r\n    \r\n    function tryInit() {\r\n      \r\n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\r\n        return;\r\n      }\r\n      \r\n      $timeout(function() {\r\n        var groupName = $scope.buildName;\r\n        var group = $scope.build;\r\n        \r\n        $scope.job = jobs.getById($scope.job.id);\r\n        \r\n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\r\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\r\n        if($scope.job) {\r\n          $scope.conversions = character.getConversions($scope.job.id);\r\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\r\n        }\r\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\r\n        \r\n        var newItems = groupHelper.reloadGroup(groupName, group);\r\n        dntReset();\r\n      \r\n        $scope.savedItems = {};\r\n        $scope.build = {\r\n          items: newItems,\r\n          lastUpdate: group.lastUpdate,\r\n\r\n          enemyLevel: $scope.enemyLevel,\r\n          playerLevel: $scope.playerLevel,\r\n          heroLevel: $scope.heroLevel,\r\n          job: $scope.job,\r\n          damageType: $scope.damageType,\r\n          element: $scope.element,\r\n          secondaryElement: $scope.secondaryElement,\r\n          enemyStatCaps: $scope.enemyStatCaps,\r\n          playerStatCaps: $scope.playerStatCaps,\r\n          conversions: $scope.conversions,\r\n          baseStats: $scope.baseStats,\r\n          heroStats: $scope.heroStats,\r\n        };\r\n        $scope.savedItems[groupName] = $scope.build;\r\n        $scope.stats = statHelper.getBuildStats($scope.build);\r\n        \r\n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\r\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\r\n      });\r\n    }\r\n    \r\n    function progress() {\r\n    }\r\n    \r\n    $scope.copyGroup = function() {\r\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\r\n      console.log('copying in as ' + newBuildName);\r\n      \r\n      saveHelper.renameSavedGroup(\r\n        newBuildName, \r\n        newBuildName,\r\n        $scope.enemyLevel,\r\n        $scope.playerLevel,\r\n        $scope.heroLevel,\r\n        $scope.job,\r\n        $scope.damageType,\r\n        $scope.element,\r\n        $scope.secondaryElement,\r\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\r\n      \r\n      $location.url('/build/' + newBuildName);\r\n    }\r\n  }]\r\n);\r\n","angular.module('dnsim').filter('percentage', [function() {\r\n  'use strict';\r\n\r\n  function filter(input) {\r\n    if(typeof input == 'number') {\r\n      return (Math.round(input * 100 * 100) / 100) + '%';\r\n    }\r\n    else {\r\n      return input;\r\n    }\r\n  }\r\n  filter.$stateful = false;\r\n\r\n  return filter;\r\n}])","angular.module('dnsim').controller('ExportCtrl', \r\n  ['$scope','$window','saveHelper',\r\n   function($scope, $window, saveHelper) {\r\n  'use strict';\r\n     \r\n  document.body.className = 'default-back';\r\n  $window.document.title = 'DN Gear Sim | EXPORT';\r\n  \r\n  var rawSavedData = saveHelper.getSavedItems();\r\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\r\n  \r\n  $scope.save = function() {\r\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\r\n  }\r\n}]);\r\n","angular.module('dnsim').controller('NavCtrl', \r\n  ['$scope','$location','translations','region','itemCategory','saveHelper',\r\n  function($scope,$location,translations,region,itemCategory,saveHelper) {\r\n    'use strict';\r\n\r\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\r\n    \r\n    var noMenu = [];\r\n    var noLocationMenu = [aboutAction];\r\n    var normalMenu = [\r\n      {path: 'builds', name:'builds', icon: 'wrench'},\r\n      {path: 'search', name:'gear', icon: 'search'},\r\n      {path: 'items', name:'items', icon: 'search'},\r\n      aboutAction,\r\n      ];\r\n    \r\n    var buildAction = {path: 'build', name:'build', icon: 'wrench'};\r\n    \r\n    var withBuildMenu = [\r\n      {path: 'builds', name:'builds', icon: 'wrench'},\r\n      buildAction,\r\n      {path: 'search', name:'gear', icon: 'search'},\r\n      {path: 'items', name:'items', icon: 'search'},\r\n      aboutAction,\r\n      ];\r\n      \r\n    region.init();\r\n  \r\n    $scope.isSearch = function() {\r\n      return $location.path().indexOf('/search') == 0;\r\n    }\r\n\r\n    $scope.isLoading = function() {\r\n      return translations.startedLoading && \r\n            !translations.isLoaded() &&\r\n            region.tlocation != null &&\r\n            region.tlocation.url != '' &&\r\n            !$scope.noRegion();\r\n    }\r\n    \r\n    $scope.noRegion = function() {\r\n      return region.dntLocation == null;\r\n    }\r\n    \r\n    $scope.fireAction = function(action) {\r\n      if(action.name == 'search') {\r\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\r\n        if(cat) {\r\n          $location.path('/' + action.path + '/' + cat);\r\n        }\r\n        else {\r\n          $location.path('/' + action.path);\r\n        }\r\n      }\r\n      else {\r\n          $location.path('/' + action.path);\r\n      }\r\n    }\r\n      \r\n    $scope.getActions = function() {\r\n      var menu = null;\r\n      \r\n      var currentBuild = localStorage.getItem('currentGroup');\r\n      if(currentBuild) {\r\n        var savedItems = saveHelper.getSavedItems();\r\n        if(!(currentBuild in savedItems)) {\r\n          currentBuild = null;\r\n        }\r\n      }\r\n\r\n      if(region.dntLocation != null && region.dntLocation.url == '') {\r\n        menu = noLocationMenu; \r\n      }\r\n      else if(region.tlocation != null && region.tlocation.url == '') {\r\n        menu = noLocationMenu; \r\n      }\r\n      else if(currentBuild && currentBuild != 'null') {\r\n        menu = withBuildMenu;\r\n        buildAction.path = 'build/' + currentBuild;\r\n        buildAction.name = currentBuild;\r\n      }\r\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\r\n        menu = normalMenu;\r\n      }\r\n      else {\r\n        menu = normalMenu;\r\n      }\r\n      \r\n      angular.forEach(menu, function(value, key) {\r\n        delete value.extraCss;\r\n        if($location.path().length == 1) {\r\n          if(value.path.length == 1) {\r\n            value.extraCss = 'active';\r\n          }\r\n        }\r\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\r\n          if(value.path != 'builds' || $location.path() == '/builds') {\r\n            value.extraCss = 'active';\r\n          }\r\n        }\r\n      });\r\n      \r\n      return menu;\r\n    };\r\n  }\r\n])\r\n.directive('dngearsimNav', function() {\r\n  return {\r\n    templateUrl: 'ui/nav/nav.html'\r\n  };\r\n});","angular.module('dnsim').controller('SetupCtrl', \r\n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\r\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\r\n  'use strict';\r\n     \r\n  document.body.className = 'default-back';\r\n  $window.document.title = 'DN Gear Sim | SETUP';\r\n  \r\n  $scope.advancedSetup = false;\r\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\r\n  $scope.translationResults = [];\r\n  $scope.hostedFiles = region.hostedFiles;\r\n  \r\n  var noLocation = '';\r\n  var sessionLocation = region.alternativeFiles.url;\r\n  if(sessionLocation == null) {\r\n    sessionLocation = noLocation;\r\n  }\r\n  \r\n  $scope.location = sessionLocation;\r\n  if($scope.location == noLocation) {\r\n    $scope.testResults = ['No location set'];\r\n  }\r\n  else {\r\n    $scope.testResults = ['Using location ' + $scope.location];\r\n  }\r\n  \r\n  $scope.setLocation = function(url) {\r\n    $scope.location = url;\r\n    $scope.isLoading = true;\r\n    $scope.saveLocation();\r\n    dntReset();\r\n\r\n    $scope.translationResults = [];\r\n    var existingFile = localStorage.getItem('UIStrings_file');\r\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\r\n      sessionStorage.removeItem('UIStrings');\r\n    }\r\n    translations.reset();\r\n    translations.location = url;\r\n    translations.init(progressTranslations, translationsStatus);\r\n  }\r\n  \r\n  $scope.resetSessionData = function() {\r\n    $scope.testResults = ['session data reset.. reloading page'];\r\n    region.tlocation = null;\r\n    region.dntLocation = null;\r\n    translations.reset();\r\n    sessionStorage.clear();\r\n    localStorage.clear();\r\n    this.saveLocation();\r\n    $timeout(function() {   \r\n      location.hash = '';\r\n      location.reload(true);\r\n    });\r\n  }\r\n  \r\n  $scope.loadUiString = function() {\r\n    $scope.translationResults = [];\r\n    sessionStorage.removeItem('UIStrings');\r\n    dntReset();\r\n    translations.reset();\r\n    translations.location = region.tlocation.url;\r\n    translations.init(progressTranslations, translationsStatus);\r\n  }\r\n  \r\n  function translationsStatus() {\r\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\r\n    $scope.isLoading = false;\r\n  }\r\n  \r\n  function progress(msg) {\r\n    $timeout(\r\n      function() {\r\n        if($scope.testResults != null) {\r\n          $scope.testResults.push(msg);\r\n        }\r\n      });\r\n  }\r\n  \r\n  function progressTranslations(msg) {\r\n    $timeout(\r\n      function() {\r\n        if($scope.translationResults != null) {\r\n          $scope.translationResults.push(msg);\r\n        }\r\n      });\r\n  }\r\n  \r\n  $scope.saveLocation = function() {\r\n    dntReset();\r\n    if($scope.location != noLocation) {\r\n      region.setCustomUrl($scope.location);\r\n      \r\n      region.init();\r\n      if(region.alternativeFiles.region == region.tlocation.region) {\r\n        translations.reset();\r\n        translations.init(progressTranslations, translationsStatus);\r\n      }\r\n      $scope.testResults = [\r\n        'Location saved',\r\n        'Using location ' + $scope.location];\r\n    }\r\n  }\r\n  \r\n  $scope.testLocation = function() {\r\n    if($scope.location != noLocation) {\r\n      $scope.testResults = [\r\n        'Using location ' + $scope.location,\r\n        'Loading all data used by the app'];\r\n\r\n      translations.init(progress, function () {\r\n        dntInit(progress);\r\n      });\r\n    }\r\n  }\r\n}]);\r\n","(function () {\r\n'use strict';\r\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\r\n\r\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  vm.maxDisplay = 15;\r\n  vm.totalNumResults = 0;\r\n  \r\n  jobs.init(null, function() {\r\n    if($routeParams.jobId) {\r\n      vm.job = jobs.getById($routeParams.jobId);\r\n      getClassBuilds();\r\n    } \r\n  })\r\n  \r\n  this.setJob = function() {\r\n    $timeout(function() {\r\n      $location.path('/build-search/' + vm.job.id);\r\n    });\r\n  }\r\n  \r\n  this.showMoreResults = function(extra) {\r\n    vm.maxDisplay = vm.totalNumResults + extra;\r\n    vm.totalNumResults = 0;\r\n  }\r\n  \r\n  vm.allResults = null;\r\n  vm.getFilteredBuilds = function() {\r\n    \r\n    // init\r\n    if(vm.allResults == null) {\r\n      vm.allResults = [];\r\n      for(var uid in vm.jobBuilds) {\r\n        for(var buildName in vm.jobBuilds[uid]) {\r\n          vm.allResults.push({\r\n            uid: uid,\r\n            name: buildName,\r\n            data: vm.jobBuilds[uid][buildName]\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    var results = [];\r\n    for(var i=0;i<vm.allResults.length;++i) {\r\n      \r\n      var result = vm.allResults[i];\r\n      if(vm.filter && vm.filter.length > 0) {\r\n        var f = vm.filter.toUpperCase();\r\n        if(result.name.toUpperCase().indexOf(f) == -1) {\r\n          if(!result.data.guild ||\r\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\r\n\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n      \r\n      results.push(result);\r\n\r\n      if(results.length >= vm.maxDisplay) {\r\n        break;\r\n      }\r\n    }\r\n    \r\n    vm.totalNumResults = results.length;\r\n    return results;\r\n  }\r\n  \r\n  function getClassBuilds() {\r\n    if(vm.job) {\r\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\r\n        if(builds) {\r\n          console.log('got builds', builds);\r\n          vm.jobBuilds = builds;\r\n        }\r\n        else {\r\n          console.log('no builds');\r\n          vm.jobBuilds = {};\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\r\n\r\nfunction profile($location, $routeParams, onlineService) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  vm.uid = $routeParams.uid;\r\n  \r\n  getSavedBuilds();\r\n  getProfile();\r\n  \r\n  function getSavedBuilds() {\r\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\r\n      if(builds) {\r\n        vm.storedBuilds = builds;\r\n      }\r\n      else {\r\n        vm.storedBuilds = {};\r\n      }\r\n    });\r\n  }\r\n  \r\n  function getProfile() {\r\n    onlineService.getProfile(vm.uid).then(function(profile) {\r\n      if(profile) {\r\n        vm.profile = profile;\r\n      }\r\n      else {\r\n        vm.profile = {};\r\n      }\r\n    });\r\n  }\r\n  \r\n  this.openServer = function(buildName) {\r\n    $location.path('/published/' + vm.uid + '/' + buildName);\r\n  }\r\n  \r\n  this.load = function(buildName, build) {\r\n\r\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\r\n    \r\n    saveHelper.renameSavedGroup(\r\n      newGroupName, \r\n      newGroupName,\r\n      build.enemyLevel,\r\n      build.playerLevel,\r\n      build.heroLevel,\r\n      build.job,\r\n      build.damageType,\r\n      build.element,\r\n      build.secondaryElement,\r\n      build.enemyStatCaps, \r\n      build.playerStatCaps, \r\n      build.conversions, \r\n      build.baseStats, \r\n      build.heroStats);\r\n      \r\n    vm.builds = saveHelper.getSavedItems();\r\n    \r\n    $location.path('/build/' + newGroupName);\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\r\n\r\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  vm.show = $routeParams.show;\r\n  \r\n  onlineService.login().then(function(user) {\r\n    getSavedBuilds();\r\n    getProfile();\r\n  \r\n    vm.builds = saveHelper.getSavedItems();\r\n  });\r\n  \r\n  function getSavedBuilds() {\r\n    var user = vm.getUser();\r\n    if(user) {\r\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\r\n        if(builds) {\r\n          vm.storedBuilds = builds;\r\n        }\r\n        else {\r\n          vm.storedBuilds = {};\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function getProfile() {\r\n    var user = vm.getUser();\r\n    if(user) {\r\n      onlineService.getProfile(user.uid).then(function(profile) {\r\n        if(profile) {\r\n          vm.profile = profile;\r\n        }\r\n        else {\r\n          vm.profile = {};\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  this.saveProfile = function() {\r\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\r\n  }\r\n  \r\n  this.getUser = function() {\r\n    return onlineService.getUser();\r\n  }\r\n  \r\n  this.save = function(buildName, build) {\r\n    build.lastUpdate = (new Date()).getTime();\r\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\r\n    vm.publishBuild = null;\r\n  }\r\n  \r\n  this.startPublish = function(buildName) {\r\n    if(buildName in vm.storedBuilds) {\r\n      if(!vm.builds[buildName].region) {\r\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\r\n      }\r\n      \r\n      if(!vm.builds[buildName].about) {\r\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\r\n      }\r\n      \r\n      if(!vm.builds[buildName].guild) {\r\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\r\n      }\r\n    }\r\n    \r\n    if(!vm.builds[buildName].region) {\r\n      vm.builds[buildName].region = region.dntLocation.region;\r\n    }\r\n    \r\n    vm.publishBuild = buildName;\r\n  }\r\n  \r\n  function handleError(err) {\r\n    console.log(err);\r\n  }\r\n  \r\n  this.deleteAccount = function() {\r\n    onlineService.deleteAccount(vm.storedBuilds);\r\n  }\r\n  \r\n  this.openLocal = function(buildName) {\r\n    $location.path('/build/' + buildName);\r\n  }\r\n  \r\n  this.openServer = function(buildName) {\r\n    $location.path('/published/' + vm.getUser().uid + '/' + buildName);\r\n  }\r\n  \r\n  this.getBuildLimit = function() {\r\n    if(vm.profile && vm.profile.maxBuilds) {\r\n      return vm.profile.maxBuilds;\r\n    }\r\n    else {\r\n      return 15;\r\n    }\r\n  }\r\n  \r\n  this.getNumStoredBuilds = function() {\r\n    return _.size(vm.storedBuilds);\r\n  }\r\n  \r\n  this.getNumBuilds = function() {\r\n    return _.size(vm.builds);\r\n  }\r\n  \r\n  this.load = function(buildName, build) {\r\n\r\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\r\n    \r\n    saveHelper.renameSavedGroup(\r\n      newGroupName, \r\n      newGroupName,\r\n      build.enemyLevel,\r\n      build.playerLevel,\r\n      build.heroLevel,\r\n      build.job,\r\n      build.damageType,\r\n      build.element,\r\n      build.secondaryElement,\r\n      build.enemyStatCaps, \r\n      build.playerStatCaps, \r\n      build.conversions, \r\n      build.baseStats, \r\n      build.heroStats);\r\n      \r\n    vm.builds = saveHelper.getSavedItems();\r\n  }\r\n  \r\n  this.signOut = function() {\r\n    onlineService.signOut();\r\n  }\r\n  \r\n  vm.deleteLocal = function(buildName) {\r\n    vm.localToDelete = buildName;\r\n  }\r\n  \r\n  vm.getAllBuildNames = function() {\r\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\r\n    return _.uniq(allKeys.sort(), true);\r\n  }\r\n  \r\n  vm.reallyDeleteLocal = function(buildName) {\r\n    saveHelper.updatedSavedItems(buildName, []);\r\n    vm.localToDelete = null;\r\n    vm.builds = saveHelper.getSavedItems();\r\n  }\r\n  \r\n  vm.deleteServer = function(buildName) {\r\n    vm.serverToDelete = buildName;\r\n  }\r\n  \r\n  vm.reallyDeleteServer = function(buildName) {\r\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\r\n    vm.serverToDelete = null;\r\n  }\r\n  \r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\r\n\r\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  vm.uid = $routeParams.uid;\r\n  vm.buildName = $routeParams.buildName;\r\n  \r\n  getBuild();\r\n  getProfile();\r\n  \r\n  vm.copyLocally = function() {\r\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\r\n    \r\n    saveHelper.renameSavedGroup(\r\n      newGroupName, \r\n      newGroupName,\r\n      vm.build.enemyLevel,\r\n      vm.build.playerLevel,\r\n      vm.build.heroLevel,\r\n      vm.build.job,\r\n      vm.build.damageType,\r\n      vm.build.element,\r\n      vm.build.secondaryElement,\r\n      vm.build.enemyStatCaps, \r\n      vm.build.playerStatCaps, \r\n      vm.build.conversions, \r\n      vm.build.baseStats, \r\n      vm.build.heroStats);\r\n      \r\n    $location.path('/build/' + newGroupName);\r\n  }\r\n  \r\n  function getProfile() {\r\n    onlineService.getProfile(vm.uid).then(function(profile) {\r\n      if(profile) {\r\n        vm.profile = profile;\r\n      }\r\n      else {\r\n        vm.profile = {};\r\n      }\r\n    });\r\n  }\r\n  \r\n  function getBuild() {\r\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\r\n      if(build) {\r\n        vm.build = build;\r\n        vm.stats = statHelper.getBuildStats(build);\r\n      }\r\n      else {\r\n        vm.build = {};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n})();","angular.module('dnsim').controller('groupAssignmentCtrl',\r\n\r\n['hCodeValues','statHelper','saveHelper','itemCategory',\r\nfunction(hCodeValues,statHelper,saveHelper,itemCategory) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  this.savedItems = saveHelper.getSavedItems();\r\n  this.groupNames = Object.keys(this.savedItems);\r\n  if(!this.groupNames) {\r\n    this.groupNames = [];\r\n  }\r\n  if(this.groupNames.length > 0) {\r\n    this.groupName = localStorage.getItem('currentGroup');\r\n  }\r\n  else {\r\n    this.groupName = null;\r\n  }\r\n  \r\n  if(!this.groupName || !(this.groupName in this.savedItems)) {\r\n    if(this.groupNames.length > 0) {\r\n      this.groupName = this.groupNames[0];\r\n    }\r\n  }\r\n  \r\n  if(!this.groupName) {\r\n    return;\r\n  }\r\n  \r\n  this.summaryStatIds = [];\r\n  for(var id in hCodeValues.stats) {\r\n    if(hCodeValues.stats[id].summaryDisplay) {\r\n      this.summaryStatIds.push(id);\r\n    }\r\n  }\r\n    \r\n  this.clearGroup = function() {\r\n    this.addAffectAmount = null;\r\n    this.replaceAffectAmount = {};\r\n\r\n    this.groupItems = null;\r\n    this.groupCalcStats = null\r\n  }\r\n  this.clearGroup();\r\n  \r\n  this.getAddAffectAmount = function(stat) {\r\n    this.initAddAffects();\r\n    return this.addAffectAmount[stat];\r\n  }\r\n  \r\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\r\n    this.initReplaceAffects(itemIndex, item);\r\n    return this.replaceAffectAmount[itemIndex][statId];\r\n  }\r\n  \r\n  this.getGroupCalcStats = function() {\r\n    \r\n    if(this.groupCalcStats == null) {\r\n      \r\n      var group = vm.savedItems[vm.groupName];\r\n      if(group) {\r\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\r\n      }\r\n    }\r\n    \r\n    return this.groupCalcStats;\r\n  }\r\n  \r\n  this.getBuild = function() {\r\n    return vm.savedItems[vm.groupName];\r\n  }\r\n  \r\n  this.getCalculatedStats = function(group, items) {\r\n    var nakedStats = statHelper.getNakedStats(group);\r\n    var combinedStats = statHelper.getCombinedStats(items);\r\n    var setStats = statHelper.getSetStats(items);\r\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\r\n    if(group.heroStats != null && group.heroStats.length > 0) {\r\n      allStats = allStats.concat(group.heroStats);\r\n    }\r\n    allStats = hCodeValues.mergeStats(allStats);\r\n    \r\n    return statHelper.getCalculatedStats(group, allStats);\r\n  }\r\n  \r\n  this.initAddAffects = function() {\r\n    \r\n    if(vm.addAffectAmount) {\r\n      return;\r\n    }\r\n    \r\n    var origStats = vm.getGroupCalcStats();\r\n    var group = vm.savedItems[vm.groupName];\r\n    var newItems = [];\r\n    if(group.items) {\r\n      newItems = group.items.concat([vm.item]);\r\n    }\r\n    var newStats = vm.getCalculatedStats(group, newItems);\r\n    \r\n    this.addAffectAmount = {};\r\n    for(var id in hCodeValues.stats) {\r\n      if(hCodeValues.stats[id].summaryDisplay) {\r\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.initReplaceAffects = function(itemIndex, item) {\r\n    if(vm.replaceAffectAmount[itemIndex]) {\r\n      return;\r\n    }\r\n    \r\n    var group = vm.savedItems[vm.groupName];\r\n    var newItems = [vm.item];\r\n    angular.forEach(group.items, function(gItem , index) {\r\n      if(item !== gItem) {\r\n        newItems.push(gItem);\r\n      }\r\n    });\r\n    \r\n    var newStats = vm.getCalculatedStats(group, newItems);\r\n    var origStats = vm.getGroupCalcStats();\r\n    \r\n    this.replaceAffectAmount[itemIndex] = {};\r\n    for(var id in hCodeValues.stats) {\r\n      if(hCodeValues.stats[id].summaryDisplay) {\r\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\r\n      }\r\n    }\r\n  }\r\n  \r\n  function calcStatPercent(newVal, origVal) {\r\n    if(newVal && origVal) {\r\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\r\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  this.getStat = function(id, stats) {\r\n    var len = stats.length;\r\n    for(var i=0;i<len;++i) {\r\n      if(stats[i].id == id) {\r\n        return stats[i];\r\n      }\r\n    }\r\n    return {id: id, max:0};\r\n  }\r\n  \r\n  this.getStatName = function(id) {\r\n    var retVal = '';\r\n    if(hCodeValues.stats[id].element == 'primary') {\r\n      var eleId = 0;\r\n      if(vm.savedItems[vm.groupName].element) {\r\n        eleId = vm.savedItems[vm.groupName].element.id;\r\n      }\r\n      retVal += hCodeValues.elements[eleId].name;\r\n    }\r\n    else if(hCodeValues.stats[id].element == 'secondary') {\r\n      var eleId = 0;\r\n      if(vm.savedItems[vm.groupName].secondaryElement) {\r\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\r\n      }\r\n      retVal += hCodeValues.elements[eleId].name;\r\n    }\r\n    return retVal + ' ' + hCodeValues.stats[id].name;\r\n  }\r\n  \r\n  this.getGroupItems = function() {\r\n\r\n    var itemSplit;\r\n    function numMatches(str) {\r\n      if(str) {\r\n        var numMatches = 0;\r\n        for(var i=0;i<itemSplit.length;++i) {\r\n          if(str.indexOf(itemSplit[i]) > 0) {\r\n            numMatches++;\r\n          }\r\n        }\r\n        return numMatches;\r\n      }\r\n      else {\r\n        return -1;\r\n      }\r\n    }\r\n    \r\n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\r\n      vm.groupItems = [];\r\n      \r\n      var items = [];\r\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\r\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\r\n          if(item.exchangeType == vm.item.exchangeType) {\r\n            items.push(item);\r\n          }\r\n        }\r\n        else if(item.typeName == vm.item.typeName) {\r\n          items.push(item);\r\n        }\r\n      });\r\n      \r\n      if(vm.item.name) {\r\n        itemSplit = vm.item.name.split(' ');\r\n      }\r\n      items.sort(function(a,b) {\r\n        return numMatches(b.name)-numMatches(a.name);\r\n      });\r\n      \r\n      angular.forEach(items, function(item, index) {\r\n        if(item.name == vm.item.name) {\r\n          vm.groupItems.push(item);\r\n        }\r\n      });\r\n      \r\n      angular.forEach(items, function(item, index) {\r\n        if(item.name != vm.item.name) {\r\n          vm.groupItems.push(item);\r\n        }\r\n      });\r\n    }\r\n    return vm.groupItems;\r\n  }\r\n  \r\n  this.hasMaxExchangable = function() {\r\n    var cat = itemCategory.byName(this.item.typeName);\r\n    var items = this.getGroupItems();\r\n    \r\n    if(cat && cat.maxCat) {\r\n      if(items.length >= cat.maxCat) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    if(cat && cat.maxExchange) {\r\n      if(items.length >= cat.maxExchange) {\r\n        for(var i=0;i<items.length;++i) {\r\n          if(!items[i].exchangeType) {\r\n            return false;\r\n          }\r\n        }\r\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  this.nextGroup = function() {\r\n    \r\n    var uptoItem = false;\r\n    var nextGroup = null;\r\n    angular.forEach(vm.groupNames, function(groupName, index) {\r\n      if(uptoItem) {\r\n        if(nextGroup == null) {\r\n          nextGroup = groupName;\r\n        }\r\n      }\r\n      if(groupName == vm.groupName) {\r\n        uptoItem = true;\r\n      }\r\n    });\r\n    \r\n    if(nextGroup == null) {\r\n      nextGroup = vm.groupNames[0];\r\n    }\r\n    \r\n    vm.groupName = nextGroup;\r\n    saveGroup();\r\n    vm.clearGroup();\r\n  }\r\n  \r\n  this.prevGroup = function() {\r\n    \r\n    var foundGroup = false;\r\n    var prevGroup = null;\r\n    angular.forEach(vm.groupNames, function(groupName, index) {\r\n      if(groupName == vm.groupName) {\r\n        foundGroup = true;\r\n      }\r\n      \r\n      if(!foundGroup) {\r\n        prevGroup = groupName;\r\n      }\r\n    });\r\n    \r\n    if(prevGroup == null) {\r\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\r\n    }\r\n    \r\n    vm.groupName = prevGroup;\r\n    saveGroup();\r\n    vm.clearGroup();\r\n  }\r\n  \r\n  this.addToGroup = function() {\r\n    saveHelper.saveItem(vm.groupName, vm.item);\r\n    this.savedItems = saveHelper.getSavedItems();\r\n    vm.clearGroup();\r\n  }\r\n  \r\n  this.replace = function(item) {\r\n    item.replaceItem = true;\r\n    var newItemList = [];\r\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\r\n      if(gItem.replaceItem) {\r\n        // console.log('found replace item');\r\n        newItemList.push(vm.item);\r\n      }\r\n      else {\r\n        newItemList.push(gItem);\r\n      }\r\n    });\r\n    \r\n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\r\n    this.savedItems = saveHelper.getSavedItems();\r\n    vm.clearGroup();\r\n  }\r\n  \r\n  function saveGroup() {\r\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\r\n  }\r\n  \r\n}])\r\n.directive('dngearsimGroupAssignment', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'groupAssignmentCtrl',\r\n    controllerAs: 'editCtrl',\r\n    templateUrl: 'ui/item/group-assignment.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\r\n\r\n['hCodeValues',\r\nfunction(hCodeValues) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  if(this.item.itemSource != 'custom') {\r\n    return;\r\n  }\r\n  \r\n  var vm = this;\r\n  \r\n  this.stat = {id:-1, name:''};\r\n  this.newStatVal = 0;\r\n\r\n  this.dropdownStats = [];\r\n  for(var id in hCodeValues.stats) {\r\n    if(!hCodeValues.stats[id].noCustom) {\r\n      this.dropdownStats.push(hCodeValues.stats[id]);\r\n    }\r\n  }\r\n  this.dropdownStats.sort()\r\n\r\n  this.getStats = function() {\r\n    return this.dropdownStats;\r\n  }\r\n  \r\n  this.newStat = function() {\r\n    return {id:this.stat.id,max:this.newStatVal};\r\n  }\r\n  \r\n  this.addStat = function() {\r\n    if(this.stat.id > -1) {\r\n      if(!this.item.stats) {\r\n        this.item.stats = [];\r\n      }\r\n       \r\n      this.item.stats.push(this.newStat());\r\n      this.onChange();\r\n    }\r\n  }\r\n  \r\n  this.removeStat = function(stat) {\r\n    var i = this.item.stats.indexOf(stat);\r\n    if(i != -1) {\r\n    \tthis.item.stats.splice(i, 1);\r\n      this.onChange();\r\n    }\r\n  }\r\n  \r\n  this.getNewStatName = function() {\r\n    return this.getStatName(this.newStat());\r\n  }\r\n  \r\n  this.getNewStatDisplayValue = function() {\r\n    return this.getStatDisplayValue(this.newStat());\r\n  }\r\n  \r\n  this.getStatName = function(stat) {\r\n    if(stat.id in hCodeValues.stats) {\r\n      return hCodeValues.stats[stat.id].name;\r\n    }\r\n  }\r\n  \r\n  this.getStatDisplayValue = function(stat) {\r\n    if(stat.id in hCodeValues.stats) {\r\n      return hCodeValues.stats[stat.id].display(stat);\r\n    }\r\n  }\r\n  \r\n}])\r\n.directive('dngearsimItemEditCustom', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n      onChange: '&onChange',\r\n    },\r\n    controller: 'itemEditCustomCtrl',\r\n    controllerAs: 'editCtrl',\r\n    templateUrl: 'ui/item/item-edit-custom.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\r\n\r\n['dntData','hCodeValues','items','$timeout','translations',\r\nfunction(dntData,hCodeValues,items,$timeout,translations) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  if('itemSource' in this.item) {\r\n    this.itemType = items[this.item.itemSource];\r\n  }\r\n  \r\n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\r\n    return;\r\n  }\r\n  \r\n  var vm = this;\r\n  \r\n  vm.enchantments = null;\r\n  vm.enchantment = null;\r\n  vm.enchantmentAfter = null;\r\n  vm.enchantmentCost = '';\r\n  vm.enhancementOptions = [];\r\n  if(vm.item.enchantmentStats == null) {\r\n    vm.item.enchantmentStats = [];\r\n  }\r\n  \r\n  this.setEnchantment = function() {\r\n    vm.item.enchantmentStats = [];\r\n\r\n    if(vm.enchantments && vm.enchantments.length > 0) {\r\n\r\n      if(typeof vm.item.enchantmentNum != 'number') {\r\n        vm.item.enchantmentNum = 6;\r\n        vm.onChange();\r\n      }\r\n      \r\n      for(var i=0;i<vm.enchantments.length;++i) {\r\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\r\n          vm.enchantment = vm.enchantments[i];\r\n          \r\n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\r\n        }\r\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\r\n          vm.enchantmentAfter = vm.enchantments[i];\r\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\r\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\r\n          }\r\n          else {\r\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.isMaxEnchantLevel = function() {\r\n\r\n    if(vm.enchantments != null &&\r\n      vm.enchantments.length > 0 &&\r\n      typeof vm.item.enchantmentNum == 'number') {\r\n\r\n      for(var i=0;i<vm.enchantments.length;++i) {\r\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  this.setEnchantmentNum = function(enhancementOption) {\r\n    vm.item.enchantmentNum = enhancementOption;\r\n    vm.enhancementOptions = [];\r\n    vm.setEnchantment();\r\n    vm.onChange();\r\n  }\r\n  \r\n  this.nextEnchantment = function() {\r\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\r\n      if(i == 0) {\r\n        vm.enhancementOptions.push({number: 0});\r\n      }\r\n      else {\r\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.prevEnchantment = function() {\r\n    vm.enhancementOptions = [];\r\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\r\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\r\n    }\r\n    \r\n    vm.enhancementOptions.push({number: 0});\r\n  }\r\n  \r\n  this.getOption = function(enchantment) {\r\n    return {\r\n      number: enchantment.EnchantLevel,\r\n      stats: hCodeValues.getStats(enchantment)\r\n    };\r\n  }\r\n  \r\n  this.getEnchantments = function() {\r\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\r\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\r\n        var eid = vm.item.enchantmentId;\r\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\r\n        vm.setEnchantment();\r\n      }\r\n    }\r\n    \r\n    return vm.enchantments;\r\n  }\r\n  \r\n  var fileName = 'all-items.lzjson';\r\n  \r\n  this.showMaterials = function() {\r\n    dntData.init(fileName, null, function() {}, function() {\r\n      $timeout(function() {\r\n        \r\n        if(!vm.enchantmentAfter) {\r\n          return;\r\n        }\r\n        \r\n        vm.materials = [];\r\n        for(var i=1;i<=5;++i) {\r\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\r\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\r\n          if(itemId > 0 && itemCount > 0) {\r\n            \r\n            var items = dntData.find(fileName, 'id', itemId);\r\n            if(items.length == 0) {\r\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\r\n            }\r\n            else {\r\n              var item = items[0];\r\n              var name = translations.translate(item.NameID, item.NameIDParam);\r\n              \r\n              if(item) {\r\n                var material = {\r\n                  num: itemCount,\r\n                  icon: item.IconImageIndex,\r\n                  rank: item.Rank,\r\n                  levelLimit: item.LevelLimit,\r\n                  name: name\r\n                };\r\n                vm.materials.push(material);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  if(dntData.isLoaded(fileName)) {\r\n    this.showMaterials();\r\n  }\r\n\r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n}])\r\n.directive('dngearsimItemEditEnchantment', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n      onChange: '&onChange',\r\n    },\r\n    controller: 'itemEditEnchantmentCtrl',\r\n    controllerAs: 'editCtrl',\r\n    templateUrl: 'ui/item/item-edit-enchantment.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\r\n\r\n['dntData','items','hCodeValues',\r\nfunction(dntData,items,hCodeValues) {\r\n  'use strict';\r\n  \r\n  this.potentials = null;\r\n  this.potential = null;\r\n  this.changingPotentials = false;\r\n  this.potentialStats = {};\r\n  \r\n  if(this.item == null) return;\r\n  \r\n  if('itemSource' in this.item) {\r\n    this.itemType = items[this.item.itemSource];\r\n  }\r\n  \r\n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\r\n    return;\r\n  }\r\n  \r\n  var vm = this;\r\n  \r\n  this.getPotentials = function() {\r\n    if(!vm.potentials) {\r\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\r\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\r\n        \r\n        if(potentials.length == 1) {\r\n          vm.potential = potentials[0];\r\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\r\n          vm.potentialStats = getPotentialStats(vm.potentials);\r\n        }\r\n        else if('potentialDntEx' in vm.itemType) {\r\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\r\n        \r\n          if(potentials.length == 1) {\r\n            vm.potential = potentials[0];\r\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\r\n            vm.potentialStats = getPotentialStats(vm.potentials);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    return vm.potentials;\r\n  }\r\n  \r\n  this.nextPotential = function() {\r\n    for(var i=0;i<vm.potentials.length;++i) {\r\n      if(vm.potential.id == vm.potentials[i].id) {\r\n        vm.potential = vm.potentials[i+1];\r\n        vm.item.pid = vm.potential.id;\r\n        vm.onChange();\r\n        this.changingPotentials = true;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.prevPotential = function() {\r\n    for(var i=0;i<vm.potentials.length;++i) {\r\n      if(vm.potential.id == vm.potentials[i].id) {\r\n        vm.potential = vm.potentials[i-1];\r\n        vm.item.pid = vm.potential.id;\r\n        vm.onChange();\r\n        this.changingPotentials = true;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n    \r\n  this.changePotential = function(pid) {\r\n    for(var i=0;i<vm.potentials.length;++i) {\r\n      if(pid == vm.potentials[i].id) {\r\n        vm.potential = vm.potentials[i];\r\n        vm.item.pid = vm.potential.id;\r\n        vm.changingPotentials = false;\r\n        vm.onChange();\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.isFirstPotential = function() {\r\n    this.getPotentials();\r\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\r\n  }\r\n  \r\n  this.isLastPotential = function() {\r\n    this.getPotentials();\r\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\r\n  }\r\n  \r\n  function getPotentialStats() {\r\n    var pStats = {};\r\n    var emptyStatId = null;\r\n    \r\n    if(vm.potentials != null) {\r\n      angular.forEach(vm.potentials, function(p, index) {\r\n        var stats = [];\r\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\r\n          if(!hCodeValues.stats[stat.id].hide) {\r\n            stats.push(stat);\r\n          }\r\n        });\r\n        \r\n        if(stats.length > 0) {\r\n          pStats[p.id] = stats;\r\n        }\r\n        else if(!emptyStatId) {\r\n          pStats[p.id] = [];\r\n          emptyStatId = p.id;\r\n        }\r\n      });\r\n    }\r\n    \r\n    return pStats;\r\n  }\r\n  \r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemEditPotential', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n      onChange: '&onChange',\r\n    },\r\n    controller: 'itemEditPotentialCtrl',\r\n    controllerAs: 'editCtrl',\r\n    templateUrl: 'ui/item/item-edit-potential.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\r\n\r\n['$timeout','dntData','statHelper',\r\nfunction($timeout,dntData,statHelper) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  if(this.item.itemSource != 'skills') {\r\n    return;\r\n  }\r\n  \r\n  if(!this.item.enchantmentNum) {\r\n    this.item.enchantmentNum = 1;\r\n  }\r\n  \r\n  var vm = this;\r\n  \r\n  this.initSkills = function() {\r\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\r\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\r\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\r\n    })});\r\n  }\r\n  \r\n  this.nextEnchantment = function() {\r\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\r\n      this.item.enchantmentNum++;\r\n      vm.onChange();\r\n    }\r\n  }\r\n  \r\n  this.isMaxSkillLevel = function() {\r\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\r\n  }\r\n  \r\n  this.prevEnchantment = function() {\r\n    if(this.item.enchantmentNum > 0) {\r\n      this.item.enchantmentNum--;\r\n    }\r\n    else {\r\n      this.item.enchantmentNum = 0;\r\n    }\r\n\r\n    vm.onChange();\r\n  }\r\n  \r\n  this.initSkills();\r\n  \r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemEditSkill', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n      onChange: '&onChange',\r\n    },\r\n    controller: 'itemEditSkillCtrl',\r\n    controllerAs: 'editCtrl',\r\n    templateUrl: 'ui/item/item-edit-skill.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\r\n\r\n['dntData','hCodeValues','items',\r\nfunction(dntData,hCodeValues,items) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  if('itemSource' in this.item) {\r\n    this.itemType = items[this.item.itemSource];\r\n  }\r\n  \r\n  this.sparks = null;\r\n  var vm = this;\r\n\r\n  this.nextSpark = function() {\r\n    var index = getPotentialIndex();\r\n    index++;\r\n    if(index >= vm.sparks.length) {\r\n      index = 0;\r\n    }\r\n    var spark = vm.sparks[index]; \r\n    vm.item.sparkId = spark.id;\r\n    vm.item.sparkStats = hCodeValues.getStats(spark);\r\n    vm.onChange();\r\n  }\r\n  \r\n  this.isMoreSparks = function() {\r\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\r\n  }\r\n  \r\n  this.isFirstSpark = function() {\r\n    return getPotentialIndex() == 0;\r\n  }\r\n  \r\n  this.prevSpark = function() {\r\n    var index = getPotentialIndex();\r\n    index--;\r\n    if(index < 0) {\r\n      index = vm.sparks.length-1;\r\n    }\r\n    var spark = vm.sparks[index]; \r\n    vm.item.sparkId = spark.id;\r\n    vm.item.sparkStats = hCodeValues.getStats(spark);\r\n    vm.onChange();\r\n  }\r\n  \r\n  this.removeSpark = function() {\r\n    vm.item.sparkId = null;\r\n    vm.item.sparkStats = null;\r\n    vm.onChange();\r\n  }\r\n  \r\n  this.getSparks = function() {\r\n    if(vm.item == null) return null;\r\n    if(vm.sparks == null) {\r\n      var sid = vm.item.sparkTypeId;\r\n      if(sid) {\r\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\r\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return vm.sparks;\r\n  }\r\n\r\n  function getPotentialIndex() {\r\n    var potentialIndex = -1;\r\n    if(vm.item.sparkId > 0) {\r\n      angular.forEach(vm.sparks, function(spark, index) {\r\n        if(spark.id == vm.item.sparkId) {\r\n          potentialIndex = index;\r\n          return;\r\n        }\r\n      });\r\n    }\r\n      \r\n    return potentialIndex;\r\n  }\r\n\r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n}])\r\n.directive('dngearsimItemEditSpark', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n      onChange: '&onChange',\r\n    },\r\n    controller: 'itemEditSparkCtrl',\r\n    controllerAs: 'editCtrl',\r\n    templateUrl: 'ui/item/item-edit-spark.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\r\n\r\n[function() {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  if(this.item.itemSource != 'tman') {\r\n    return;\r\n  }\r\n  \r\n  this.setTalisman = function(amount) {\r\n    if(amount == 0) {\r\n      this.item.enchantmentNum = null;\r\n      this.item.enchantmentStats = [];\r\n    }\r\n    else {\r\n      this.item.enchantmentNum = amount;\r\n      \r\n      var extraStats = [];\r\n      angular.forEach(this.item.stats, function(stat, index) {\r\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\r\n      });\r\n      \r\n      this.item.enchantmentStats = extraStats;\r\n    }\r\n    this.onChange();\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemEditTalisman', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n      onChange: '&onChange',\r\n    },\r\n    controller: 'itemEditTalismanCtrl',\r\n    controllerAs: 'editCtrl',\r\n    templateUrl: 'ui/item/item-edit-talisman.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\r\n\r\n['$timeout','dntData','itemFactory',\r\n  function($timeout, dntData, itemFactory) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\r\n    console.log('not box item type ' + this.item.typeId);\r\n    return;\r\n  }\r\n  \r\n  var vm = this;\r\n  \r\n  var pouchFileNames = [\r\n    'itemdroptable.lzjson',\r\n    'itemdroptable_abyss.lzjson',\r\n    'itemdroptable_apprentice.lzjson',\r\n    'itemdroptable_cook.lzjson',\r\n    'itemdroptable_darklair.lzjson',\r\n    'itemdroptable_dimension.lzjson',\r\n    'itemdroptable_disjoint.lzjson',\r\n    'itemdroptable_dnexpedition.lzjson',\r\n    'itemdroptable_event.lzjson',\r\n    'itemdroptable_farm.lzjson',\r\n    'itemdroptable_fishing.lzjson',\r\n    'itemdroptable_guildwar.lzjson',\r\n    'itemdroptable_item.lzjson',\r\n    'itemdroptable_monsteritem.lzjson',\r\n    'itemdroptable_propdrop.lzjson',\r\n    'itemdroptable_pvp.lzjson',\r\n    'itemdroptable_randomcompound.lzjson',\r\n    'itemdroptable_stageclear.lzjson',\r\n    'itemdroptable_themepark.lzjson',\r\n    'itemdroptable_union.lzjson']\r\n  \r\n  var allItemFileName = 'all-items.lzjson';\r\n  var charmItemtable = 'charmitemtable.lzjson';\r\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\r\n  \r\n  var files;\r\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\r\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\r\n  }\r\n  else if (this.item.typeId == 8) {\r\n    files = [allItemFileName].concat(pouchFileNames);\r\n  }\r\n\r\n  for(var i=0;i<files.length;++i) {\r\n    dntData.init(files[i], null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initBoxContents();\r\n      });\r\n    });\r\n  }\r\n  \r\n  this.initBoxContents = function() {\r\n    //console.log('init contents');\r\n\r\n    for(var i=0;i<files.length;++i) {\r\n      if(!dntData.isLoaded(files[i])) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\r\n    if(datas.length > 0) {\r\n      var d = datas[0];\r\n      vm.items = [];\r\n      \r\n      \r\n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\r\n        vm.getCharmItems(d.TypeParam1);\r\n      }\r\n      else if (vm.item.typeId == 8) {\r\n        vm.getPouchItems(d.TypeParam1);\r\n      }\r\n      \r\n    }\r\n  }\r\n  \r\n  this.getPouchItems = function(boxType) {\r\n    for(var f=0;f<pouchFileNames.length;++f) {\r\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\r\n    }\r\n  }\r\n  \r\n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\r\n    \r\n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\r\n    if(pouchData.length == 0) {\r\n    }\r\n    else {\r\n      var gold = pouchData[0].GoldMin;\r\n\r\n      var itemIndex = 0;\r\n      do {\r\n        itemIndex++;\r\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\r\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\r\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\r\n        //console.log('pouch contains ' + pouchItem);\r\n        if(pouchItem) {\r\n          if(isGroup) {\r\n            vm.getPouchItems(pouchItem, pouchFileName);\r\n          }\r\n          else {\r\n            // console.log('adding item ' + pouchItem);\r\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\r\n            if(itemds.length > 0) {\r\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\r\n              // console.log('found item ' + basicItem.name);\r\n  \r\n              vm.items.push({\r\n                count: pouchItemCount,\r\n                gold: gold,\r\n                item: basicItem\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } while(pouchItem);\r\n    }\r\n  }\r\n  \r\n  this.getCharmItems = function(boxType) {\r\n    var charmFiles = [charmItemtable, commonCharmItemtable];\r\n    for(var i=0;i<charmFiles.length;++i) {\r\n      \r\n      //console.log('box: ' + boxType);\r\n\r\n      var charmData = dntData.getData(charmFiles[i]);\r\n      for(var c=0;c<charmData.length;++c) {\r\n        var cd = charmData[c];\r\n        if(cd.CharmNum == boxType && cd.Look) {\r\n          \r\n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\r\n          if(itemds.length > 0) {\r\n            vm.items.push({\r\n              count: cd.Count,\r\n              gold: cd.Gold,\r\n              item: itemFactory.createBasicItem(itemds[0])\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemViewBox', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'itemViewBoxCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/item/item-view-box.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\r\n\r\n['$timeout','dntData','itemFactory','hCodeValues','translations',\r\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  \r\n  var vm = this;\r\n  vm.crafts = [];\r\n\r\n  var cFiles = [\r\n    'itemcompoundtable.lzjson',\r\n    'itemcompoundtable_custom.lzjson',\r\n    'itemcompoundtable_glyph.lzjson',\r\n    'itemcompoundtable_jewel.lzjson',\r\n    'itemcompoundtable_renewal.lzjson',\r\n    'itemcompoundtable_set.lzjson'];\r\n  \r\n  var allItemFileName = 'all-items.lzjson';\r\n  \r\n  var files = cFiles.concat([allItemFileName]);\r\n  for(var i=0;i<files.length;++i) {\r\n    dntData.init(files[i], null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initCrafts();\r\n      });\r\n    });\r\n  }\r\n  \r\n  this.initCrafts = function() {\r\n    for(var i=0;i<files.length;++i) {\r\n      if(!dntData.isLoaded(files[i])) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    vm.crafts = [];\r\n    for(var i=0;i<cFiles.length;++i) {\r\n      vm.initCraft(cFiles[i]);\r\n    }\r\n    \r\n    var newCrafts = [];\r\n    for(var i=0;i<vm.crafts.length;++i) {\r\n      var found = false;\r\n      for(var j=0;j<newCrafts.length;++j) {\r\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\r\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\r\n            \r\n            found = true;\r\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\r\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\r\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\r\n                  found = false;\r\n              }\r\n            }\r\n        }\r\n      }\r\n      \r\n      if(!found) {\r\n        newCrafts.push(vm.crafts[i]);\r\n      }\r\n    }\r\n    \r\n    vm.crafts = newCrafts;\r\n  }\r\n\r\n  this.initCraft = function(fileName) {\r\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\r\n    \r\n    for(var i=0;i<fCrafts.length;++i) {\r\n      var c = fCrafts[i];\r\n      \r\n      var craft = {\r\n        id: c.id,\r\n        fileName: fileName.replace('.lzjson', ''),\r\n        gold: c.Cost/100/100,\r\n        items: [],\r\n      };\r\n      \r\n      var j=0;\r\n      for(;;) {\r\n        j++;\r\n        var itemColName = 'Slot' + j +'Id';\r\n        var qtyColName = 'Slot' + j +'Num';\r\n        if(!(itemColName in c)) {\r\n          break;\r\n        }\r\n\r\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\r\n        if(items.length > 0) {\r\n          craft.items.push({\r\n            item: itemFactory.createBasicItem(items[0]),\r\n            num: c[qtyColName],\r\n          });\r\n        }\r\n      }\r\n      \r\n      vm.crafts.push(craft);\r\n    }\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemViewCraft', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'itemViewCraftCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/item/item-view-craft.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\r\n\r\n['$timeout','dntData','itemFactory','items',\r\n  function($timeout, dntData, itemFactory, items) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  \r\n  var vm = this;\r\n  \r\n  var extractFileName = 'itemdroptable_disjoint.lzjson';\r\n  var allItemFileName = 'all-items.lzjson';\r\n  \r\n  var files = [extractFileName,allItemFileName];\r\n  for(var i=0;i<files.length;++i) {\r\n    dntData.init(files[i], null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initExtract();\r\n      });\r\n    });\r\n  }\r\n  \r\n  this.initExtract = function() {\r\n    for(var i=0;i<files.length;++i) {\r\n      if(!dntData.isLoaded(files[i])) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    var disjoint;\r\n    var d = itemFactory.getItemData(vm.item);\r\n    if(d && d.DisjointDrop1 > 0) {\r\n      disjoint = d.DisjointDrop1;\r\n    }\r\n    \r\n    var itemType = items[vm.item.itemSource];\r\n    \r\n    if(itemType && d.EnchantID) {\r\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\r\n      for(var i=0;i<enchantments.length;++i) {\r\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\r\n          disjoint = enchantments[i].DisjointDrop;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    vm.items = [];\r\n    if(disjoint) {\r\n      vm.getItems(disjoint);\r\n    }\r\n  }\r\n  \r\n  this.getGold = function() {\r\n    var d = itemFactory.getItemData(this.item);\r\n    return Number(d.Disjointamount)/100/100;\r\n  }\r\n  \r\n  this.getItems = function(disjoint) {\r\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\r\n    \r\n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\r\n    if(pouchData.length == 0) {\r\n    }\r\n    else {\r\n      var gold = pouchData[0].GoldMin;\r\n\r\n      var itemIndex = 0;\r\n      do {\r\n        itemIndex++;\r\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\r\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\r\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\r\n        //console.log('pouch contains ' + pouchItem);\r\n        if(pouchItem) {\r\n          if(isGroup) {\r\n            vm.getItems(pouchItem);\r\n          }\r\n          else {\r\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\r\n            if(itemds.length > 0) {\r\n              //console.log('found item ');\r\n  \r\n              vm.items.push({\r\n                count: pouchItemCount,\r\n                gold: gold,\r\n                item: itemFactory.createBasicItem(itemds[0]),\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } while(pouchItem);\r\n    }\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemViewExtraction', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'itemViewExtractionCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/item/item-view-extraction.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\r\n\r\n['$timeout','dntData','itemFactory','hCodeValues','translations',\r\n  function($timeout, dntData, itemFactory) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  \r\n  var vm = this;\r\n  vm.items = [];\r\n  \r\n  var plateFile = 'platetable.lzjson';\r\n  var allItemFileName = 'all-items.lzjson';\r\n  \r\n  var allFiles = [plateFile,allItemFileName];\r\n  for(var i=0;i<allFiles.length;++i) {\r\n    dntData.init(allFiles[i], null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initSets();\r\n      });\r\n    });\r\n  }\r\n  \r\n  this.initSets = function() {\r\n    for(var i=0;i<allFiles.length;++i) {\r\n      if(!dntData.isLoaded(allFiles[i])) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    vm.items = [];\r\n    getPlates();\r\n  }\r\n  \r\n  function getPlates() {\r\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\r\n    for(var r=0;r<rows.length;++r) {\r\n      var row = rows[r];\r\n      var col=0;\r\n      for(;;) {\r\n        col++;\r\n        var colName = 'CompoundTableIndex' + col;\r\n        if(!(colName in row)) {\r\n          break;\r\n        }\r\n\r\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\r\n        if(itemData.length > 0) {\r\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemViewPlate', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'itemViewPlateCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/item/item-view-plate.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemViewSetCtrl',\r\n\r\n['$timeout','dntData','itemFactory','hCodeValues','translations',\r\n  function($timeout, dntData, itemFactory) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  \r\n  var vm = this;\r\n  vm.items = [];\r\n  \r\n  var files = [\r\n  'partstable.optimised.lzjson',\r\n  'partstable_cash.optimised.lzjson',\r\n  'partstable_common2014.optimised.lzjson',\r\n  'partstable_common2015.optimised.lzjson',\r\n  'partstable_common2016.lzjson',\r\n  'partstable_commoncash.lzjson',\r\n  'partstable_equipment.optimised.lzjson',\r\n  'partstable_event.lzjson',\r\n  'partstable_guild.lzjson',\r\n  'partstable_pvp.optimised.lzjson',\r\n  'partstable_reboot.optimised.lzjson',\r\n  'partstable_skilllevelup.lzjson',\r\n  'weapontable.optimised.lzjson',\r\n  'weapontable_cash.optimised.lzjson',\r\n  'weapontable_common2014.optimised.lzjson',\r\n  'weapontable_common2015.optimised.lzjson',\r\n  'weapontable_common2016.lzjson',\r\n  'weapontable_commoncash.lzjson',\r\n  'weapontable_equipment.optimised.lzjson',\r\n  'weapontable_event.lzjson',\r\n  'weapontable_guild.lzjson',\r\n  'weapontable_pvp.optimised.lzjson',\r\n  'weapontable_reboot.optimised.lzjson',\r\n  //'weapontable_skilllevelup.lzjson'\r\n  ];\r\n  \r\n  var allItemFileName = 'all-items.lzjson';\r\n  \r\n  var allFiles = files.concat([allItemFileName]);\r\n  for(var i=0;i<allFiles.length;++i) {\r\n    dntData.init(allFiles[i], null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initSets();\r\n      });\r\n    });\r\n  }\r\n  \r\n  this.initSets = function() {\r\n    for(var i=0;i<allFiles.length;++i) {\r\n      if(!dntData.isLoaded(allFiles[i])) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    vm.items = [];\r\n    for(var i=0;i<files.length;++i) {\r\n      getSetItems(files[i]);\r\n    }\r\n  }\r\n  \r\n  function getSetItems(fileName) {\r\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\r\n    for(var r=0;r<rows.length;++r) {\r\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\r\n      if(itemData.length > 0) {\r\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\r\n      }\r\n    }\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemViewSet', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'itemViewSetCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/item/item-view-set.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemViewShopCtrl',\r\n\r\n['$timeout','dntData','itemFactory','hCodeValues','translations',\r\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  \r\n  var vm = this;\r\n  vm.shopCosts = [];\r\n  \r\n  var cShopFileName = 'combinedshoptable.lzjson';\r\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\r\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\r\n  // var shopFileName = 'shoptable.lzjson';\r\n  var allItemFileName = 'all-items.lzjson';\r\n  \r\n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\r\n  for(var i=0;i<files.length;++i) {\r\n    dntData.init(files[i], null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initShops();\r\n      });\r\n    });\r\n  }\r\n  \r\n  this.initShops = function() {\r\n    for(var i=0;i<files.length;++i) {\r\n      if(!dntData.isLoaded(files[i])) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    vm.shopCosts = [];\r\n    getCombinedCosts(cShopFileName);\r\n    getCombinedCosts(cSysShopFileName);\r\n    getCombinedCosts(cCashShopFileName);\r\n    // getShopCosts();\r\n    \r\n    var newShopCosts = [];\r\n    for(var i=0;i<vm.shopCosts.length;++i) {\r\n      var found = false;\r\n      for(var j=0;j<newShopCosts.length;++j) {\r\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\r\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\r\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\r\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\r\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\r\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\r\n            found = true;\r\n            break;\r\n        }\r\n      }\r\n      \r\n      if(!found) {\r\n        newShopCosts.push(vm.shopCosts[i]);\r\n      }\r\n    }\r\n    \r\n    vm.shopCosts = newShopCosts;\r\n  }\r\n  \r\n  /*\r\n  function getShopCosts() {\r\n    var shops = dntData.getData(shopFileName);\r\n    \r\n    for(var i=0;i<shops.length;++i) {\r\n      var s = shops[i];\r\n      \r\n      var c = 0;\r\n      for(;;) {\r\n        ++c;\r\n        \r\n        var colName = 'itemIndex' + c;\r\n        if(!(colName in s)) {\r\n          break;\r\n        }\r\n        \r\n        var itemId = s[colName];\r\n        if(!itemId) {\r\n          break;\r\n        }\r\n        \r\n        if(itemId == vm.item.id) {\r\n          s = {\r\n            shopName: s.ShopID,\r\n            tabName: translations.translate(s.TabNameID),\r\n            gold: s['Quantity' + c],\r\n          };\r\n          \r\n      \r\n          if(s.shopName in hCodeValues.shopNames) {\r\n            s.shopName = hCodeValues.shopNames[s.shopName];\r\n          }\r\n      \r\n          if(!s.shopName) {\r\n            s.shopName = s.ShopId;\r\n          }\r\n          vm.shopCosts.push(s);\r\n        }\r\n      }\r\n    }\r\n  }*/\r\n\r\n  function getCombinedCosts(fileName) {\r\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\r\n    \r\n    for(var i=0;i<shops.length;++i) {\r\n      var s = shops[i];\r\n        \r\n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\r\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\r\n      \r\n      var shopCost = {\r\n        shopName: s.ShopID,\r\n        tabName: translations.translate(s.TabNameID),\r\n        gold: 0,\r\n        nightmarePoints: 0,\r\n        ladderPoints: 0,\r\n        item1: itemFactory.createBasicItem(item1s[0]),\r\n        item2: itemFactory.createBasicItem(item2s[0]),\r\n        numItem1: 0,\r\n        numItem2: 0,\r\n      };\r\n      \r\n      if(shopCost.shopName in hCodeValues.shopNames) {\r\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\r\n      }\r\n      \r\n      if(s.PurchaseType1 == 1) {\r\n        shopCost.gold += s.PurchaseItemValue1;\r\n      }\r\n      else if(s.PurchaseType1 == 3) {\r\n        shopCost.ladderPoints += s.PurchaseItemValue1;\r\n      }\r\n      else if(s.PurchaseType1 == 8) {\r\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\r\n      }\r\n      else {\r\n        shopCost.numItem1 = s.PurchaseItemValue1;\r\n      }\r\n      \r\n      if(s.PurchaseType2 == 1) {\r\n        shopCost.gold += s.PurchaseItemValue2;\r\n      }\r\n      else if(s.PurchaseType2 == 3) {\r\n        shopCost.ladderPoints += s.PurchaseItemValue2;\r\n      }\r\n      else if(s.PurchaseType2 == 8) {\r\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\r\n      }\r\n      else {\r\n        shopCost.numItem2 = s.PurchaseItemValue2;\r\n      }\r\n      \r\n      shopCost.gold = shopCost.gold/100/100;\r\n      \r\n      vm.shopCosts.push(shopCost);\r\n    }\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemViewShop', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'itemViewShopCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/item/item-view-shop.html'\r\n  };\r\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\r\n\r\n['$timeout','dntData','itemFactory','hCodeValues',\r\n  function($timeout, dntData, itemFactory, hCodeValues) {\r\n  'use strict';\r\n  \r\n  if(this.item == null) return;\r\n  \r\n  var vm = this;\r\n  vm.matchingTransfers = [];\r\n  \r\n  var transferFileName = 'enchanttransfertable.lzjson';\r\n  var allItemFileName = 'all-items.lzjson';\r\n  \r\n  var files = [transferFileName,allItemFileName];\r\n  for(var i=0;i<files.length;++i) {\r\n    dntData.init(files[i], null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initTransfers();\r\n      });\r\n    });\r\n  }\r\n  \r\n  this.initTransfers = function() {\r\n    for(var i=0;i<files.length;++i) {\r\n      if(!dntData.isLoaded(files[i])) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\r\n    vm.matchingTransfers = [];\r\n    \r\n    for(var i=0;i<transfers.length;++i) {\r\n      var t = transfers[i];\r\n      if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\r\n        \r\n        var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\r\n        var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\r\n        \r\n        vm.matchingTransfers.push({\r\n          level: t.ResultLevel,\r\n          enchantmentNum: t.ResultEnchantLevel,\r\n          gold: t.NeedCoin/100/100,\r\n          rank: hCodeValues.rankNames[t.ResultRank],\r\n          numItem1: t.NeedItemCount1,\r\n          item1: itemFactory.createBasicItem(item1s[0]),\r\n          numItem2: t.NeedItemCount2,\r\n          item2: itemFactory.createBasicItem(item2s[0]),\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n}])\r\n.directive('dngearsimItemViewTransfer', function() {\r\n  return {\r\n    scope: true,\r\n    bindToController: {\r\n      item: '=item',\r\n    },\r\n    controller: 'itemViewTransferCtrl',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'ui/item/item-view-transfer.html'\r\n  };\r\n});","angular.module('dnsim').controller('ItemCtrl',\r\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory',\r\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory) {\r\n  'use strict';\r\n  \r\n  region.setLocationByName($routeParams.region);\r\n  \r\n  $window.scrollTo(0, 0);\r\n  \r\n  $scope.jobName = null;\r\n  $scope.item = exportLinkHelper.decodeItem($routeParams.itemString);\r\n  if('itemSource' in $scope.item) {\r\n    $scope.itemType = items[$scope.item.itemSource];\r\n  }\r\n  \r\n  $scope.item.setStats = null;\r\n  $scope.item.setId = null;\r\n  $scope.detail = null;\r\n  \r\n  $scope.getDescription = function() {\r\n    if($scope.item.description) {\r\n      return $scope.item.description;\r\n    }\r\n    else if($scope.itemType &&\r\n      $scope.itemType.name == 'title' &&\r\n      translations.isLoaded() &&\r\n      dntData.isLoaded($scope.itemType.mainDnt)) {\r\n\r\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\r\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\r\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n  \r\n  $scope.getExchangeType = function() {\r\n    // console.log('getting exchange');\r\n    var exchangeDnt = 'exchange.lzjson';\r\n    if(translations.isLoaded() &&\r\n      dntData.isLoaded(exchangeDnt) &&\r\n      $scope.item.exchangeType > 0) {\r\n        \r\n      // console.log('finding exchange ' + $scope.item.exchangeType);\r\n\r\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\r\n      // console.log('got ' + exchange.length);\r\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\r\n        // console.log('exchange name: ' + exchange[0].NameID);\r\n        return translations.translate(exchange[0].NameID).toLowerCase();\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n  \r\n  $scope.setDetail = function(detail) {\r\n    $scope.detail = detail;\r\n  }\r\n  \r\n  $scope.getServerStorage = function() {\r\n    var itemData = itemFactory.getItemData($scope.item);\r\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\r\n      if(itemData.AbleWStorage == 1) {\r\n        return 'can put in server storage';\r\n      }\r\n      else if(itemData.AbleWStorage == 0) {\r\n        return 'not transferable';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n  \r\n  $scope.handleChange = function() {\r\n    $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\r\n    $location.replace();\r\n  }\r\n  \r\n  function getJobName() {\r\n    var retVal = '';\r\n    var allJobs = jobs.getAllJobs();\r\n    angular.forEach(allJobs, function(job, index) {\r\n      if(job.id == $scope.item.needJobClass) {\r\n        $scope.jobName = job.name;\r\n        return;\r\n      }\r\n    });\r\n  }\r\n  \r\n  function init() {\r\n    var anyToLoad = false;\r\n    \r\n    angular.forEach(exportLinkHelper.getDntFiles($scope.item), function(columns, fileName) {\r\n      if(!dntData.isLoaded(fileName)) {\r\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\r\n        anyToLoad = true;\r\n      }\r\n    });\r\n    \r\n    if(!translations.isLoaded()) {\r\n      translations.init(reportProgress,function() { tryInit() });\r\n      anyToLoad = true;\r\n    }\r\n    \r\n    if(!jobs.isLoaded()) {\r\n      jobs.init(reportProgress, function() { tryInit(); });\r\n      anyToLoad = true;\r\n    }\r\n    \r\n    if(!anyToLoad) {\r\n      tryInit();\r\n    }\r\n  }\r\n  init();\r\n  \r\n  function tryInit() {\r\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\r\n      $scope.item = exportLinkHelper.reloadItem($scope.item);\r\n      if($scope.item == null) {\r\n        return;\r\n      }\r\n      \r\n      setFullStats();\r\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\r\n      if($scope.item.itemSource != 'custom') {\r\n      \r\n        if($scope.item.typeName == 'skills') {\r\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\r\n            $scope.item.pve = 'pve';\r\n          }\r\n          else {\r\n            $scope.item.pve = 'pvp';\r\n          }\r\n        }\r\n    \r\n        if($scope.item.needJobClass > 0) {\r\n          getJobName();\r\n        }\r\n      }\r\n      \r\n      var itemData = itemFactory.getItemData($scope.item);\r\n      if(itemData.DisjointDrop1 > 0) {\r\n        $scope.canExtract = true;\r\n      }\r\n      \r\n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\r\n        $scope.canTransfer = true;\r\n      }\r\n      \r\n      if($scope.item.setId) {\r\n        $scope.isInSet = true;\r\n      }\r\n      \r\n      if($scope.item.typeId == 5) {\r\n        $scope.isPlate = true;\r\n      }\r\n      \r\n      if($scope.item.typeName != null) {\r\n        $scope.canUse = true;\r\n        $scope.detail = 'use';\r\n      }\r\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\r\n        $scope.hasContents = true;\r\n        $scope.detail = 'contents';\r\n      }\r\n      else if($scope.canExtract) {\r\n        $scope.detail = 'extract';\r\n      }\r\n      else if($scope.canTransfer) {\r\n        $scope.detail = 'transfer';\r\n      }\r\n      else if($scope.isPlate) {\r\n        $scope.detail = 'plate';\r\n      }\r\n      else {\r\n        $scope.detail = 'shops';\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  function setFullStats() {\r\n    // full stats are cleared when publishing builds\r\n    $scope.item.fullStats = $scope.item.stats;\r\n    \r\n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\r\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\r\n    }\r\n    \r\n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\r\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\r\n    }\r\n  }\r\n  \r\n  function reportProgress(msg) {\r\n    // $scope.progress += '|' + msg;\r\n    // console.log('progress: ' + msg);\r\n  }\r\n}]);","angular.module('dnsim').controller('RegionCtrl', \r\n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\r\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\r\n    'use strict';\r\n\r\n    region.init();\r\n    translations.init(\r\n      function(msg) { \r\n        // console.log(msg);\r\n      }, \r\n      function() {\r\n        $timeout();\r\n      });\r\n    \r\n    $scope.getDntLocation = function() {\r\n      return region.dntLocation;\r\n    }\r\n    $scope.getTlocation = function() {\r\n      return region.tlocation;\r\n    }\r\n     \r\n    $scope.getHostedFiles = function() {\r\n      // console.log('getting hosted files');\r\n      return region.hostedFiles;\r\n    }\r\n    \r\n    $scope.getWorldName = function() {\r\n      if(translations.isLoaded()) {\r\n        return translations.translate(10169);\r\n      }\r\n      else {\r\n        return '';\r\n      }\r\n    }\r\n    \r\n    $scope.setTLocation = function(location) {\r\n      region.setTLocation(location);\r\n      $scope.edit = false;\r\n    }\r\n    \r\n    $scope.setLocation = function(location) {\r\n      if($routeParams.region) {\r\n        $routeParams.region = location.region;\r\n        $route.updateParams($routeParams);\r\n      }\r\n      else {\r\n        region.setLocation(location);\r\n      }\r\n      $scope.edit = !$scope.edit;\r\n    }\r\n  }\r\n])\r\n.directive('dngearsimRegion', function() {\r\n  return {\r\n    templateUrl: 'ui/region/region.html'\r\n  };\r\n});","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dngearsimCustomItems', function() {\r\n  return {\r\n    scope: {},\r\n    bindToController: {\r\n    },\r\n    controller: ['$window','saveHelper','$location','hCodeValues','itemCategory','$timeout', customItemCtrl],\r\n    controllerAs: 'customItems',\r\n    templateUrl: 'ui/search/custom-items.html'\r\n  };\r\n});\r\n\r\nfunction customItemCtrl($window,saveHelper,$location,hCodeValues,itemCategory,$timeout) {\r\n  'use strict';\r\n\r\n  var vm = this;\r\n  \r\n  this.customItems = hCodeValues.customItems;\r\n  \r\n  this.maxDisplay = 10;\r\n  this.currentResults = 0;\r\n  \r\n  if(this.nameSearch == null) {\r\n    this.nameSearch = '';\r\n  }\r\n  \r\n  this.getResults = function() {\r\n    return this.customItems;\r\n  }\r\n  \r\n  this.getNewStatName = function() {\r\n    if(this.nameSearch == '' || this.nameSearch == null) {\r\n      return 'unnamed custom item';\r\n    }\r\n    else {\r\n      return this.nameSearch;\r\n    }\r\n  }\r\n  \r\n  this.createCustomItem = function() {\r\n    if(this.nameSearch == '' || this.nameSearch == null) {\r\n      this.nameSearch = this.getNewStatName();\r\n    }\r\n    $location.path('/item/_custom:.' + this.nameSearch);\r\n  }\r\n}\r\n\r\n})();","angular.module('dnsim').controller('ItemSearchCtrl',\r\n['$scope','$window','$routeParams','$timeout','$location',\r\n'translations',\r\n'itemCategory',\r\n'jobs',\r\n'hCodeValues',\r\n'itemFactory',\r\n'region',\r\n'saveHelper',\r\nfunction(\r\n  $scope,$window,$routeParams,$timeout,$location,\r\n  translations,\r\n  itemCategory,\r\n  jobs,\r\n  hCodeValues,\r\n  itemFactory,\r\n  region,\r\n  saveHelper) {\r\n  'use strict';\r\n  \r\n  $scope.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\r\n  if(!$scope.itemCategory) {\r\n     var catName = localStorage.getItem('selectedItemCategory');\r\n     if(!catName) {\r\n       catName = 'titles';\r\n     }\r\n     \r\n     $scope.itemCategory = itemCategory.byName(catName);\r\n     if($scope.itemCategory) {\r\n       console.log('moving');\r\n       $location.path($scope.itemCategory.path);\r\n     }\r\n     return;\r\n  }\r\n  \r\n  $window.document.title = 'DN Gear Sim | ' + $scope.itemCategory.name.toUpperCase();\r\n  \r\n  $scope.job = {id: -1, name: ''};\r\n  $scope.jobs = [$scope.job];\r\n  $scope.allJobs = [];\r\n  $scope.minLevel = 1;\r\n  $scope.maxLevel = 99;\r\n  $scope.maxDisplay = 10;\r\n  $scope.totalNumResults = 0;\r\n  $scope.grades = hCodeValues.rankNames;\r\n  $scope.stat = {id:-1, name:''};\r\n  $scope.stats = [$scope.stat];\r\n  \r\n  angular.forEach(hCodeValues.stats, function(stat, statId) {\r\n    if(stat.searchable) {\r\n      $scope.stats.push(stat);\r\n    }\r\n  });\r\n  \r\n  var minLevel = Number(localStorage.getItem('minLevel'));\r\n  if(minLevel > 0 && minLevel < 100) {\r\n    $scope.minLevel = minLevel;\r\n  }\r\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\r\n  if(maxLevel > 0 && maxLevel < 100) {\r\n    $scope.maxLevel = maxLevel;\r\n  }\r\n  \r\n  $scope.nameSearch = localStorage.getItem('nameSearch');\r\n  if($scope.nameSearch == null) {\r\n    $scope.nameSearch = '';\r\n  }\r\n  \r\n  var savedSearchStatId = localStorage.getItem('searchStat');\r\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\r\n    $scope.stat = hCodeValues.stats[savedSearchStatId];\r\n  }\r\n  \r\n  region.init();\r\n  if(translations.isLoaded()) {\r\n    init();\r\n  }\r\n  else {\r\n    translations.init(reportProgress, function() { $timeout(init); } );\r\n  }\r\n\r\n  $scope.navigate = function() {\r\n    var catName = localStorage.getItem('selectedItemCategory');\r\n    if(catName) {\r\n      $scope.itemCategory = itemCategory.byName(catName);\r\n      if($scope.itemCategory) {\r\n        console.log('navigating to ', $scope.itemCategory.path);\r\n        $location.path($scope.itemCategory.path);\r\n      }\r\n    }\r\n  }\r\n\r\n  $scope.save = function() {\r\n    if(!$scope.itemCategory.hideLevel) {\r\n      localStorage.setItem('minLevel', $scope.minLevel);\r\n      localStorage.setItem('maxLevel', $scope.maxLevel);\r\n    }\r\n    \r\n    if(!$scope.itemCategory.hideJob) {\r\n      if($scope.job != null) {\r\n        localStorage.setItem('jobNumber', $scope.job.id);\r\n      }\r\n    }\r\n  \r\n    if($scope.stat != null) {\r\n      localStorage.setItem('searchStat', $scope.stat.id);\r\n    }\r\n\r\n    localStorage.setItem('nameSearch', $scope.nameSearch);\r\n  };\r\n  \r\n  function init() {\r\n    // console.log('translations loaded');\r\n    if(jobs.isLoaded()) {\r\n      jobInit();\r\n    }\r\n    else {\r\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\r\n    }\r\n\r\n    itemCategory.init($scope.itemCategory.name, $timeout);\r\n  }\r\n  \r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n  \r\n  function jobInit() {\r\n    // console.log('called the job init func');\r\n    if(translations.isLoaded() && jobs.isLoaded()) {\r\n      // console.log('trying to init jobs');\r\n      // console.log('job dropdown should be set');\r\n      var newJobs = jobs.getFinalJobs();\r\n\r\n      newJobs.splice(0, 0, $scope.jobs[0]);\r\n      $scope.jobs = newJobs;\r\n      $scope.allJobs = jobs.getAllJobs();\r\n      \r\n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\r\n      if(lastJobNumber != null) {\r\n        angular.forEach(newJobs, function(value, key) {\r\n          if(value.id == lastJobNumber) {\r\n            $scope.job = value;\r\n            return;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  $scope.rankChecked = hCodeValues.checkedRank;\r\n  \r\n  $scope.getResults = function() {\r\n    var allItems = itemCategory.getItems($scope.itemCategory.name);\r\n    if(allItems == null && searchObject && searchObject.getItems) {\r\n      allItems = searchObject.getItems();\r\n    }\r\n\r\n    if(allItems == null) {\r\n      console.log('no items');\r\n      return null;\r\n    }\r\n    \r\n    allItems = allItems.sort(function(item1, item2) {\r\n        return (item2.levelLimit - item1.levelLimit);\r\n      });\r\n    console.log('got ', allItems);\r\n    \r\n    $scope.save();\r\n    \r\n    var start = new Date().getTime();\r\n          \r\n    var pcStatId = -1;\r\n    if('pc' in $scope.stat) {\r\n      pcStatId = $scope.stat.pc;\r\n    }\r\n  \r\n    var statVals = [];\r\n    var newResults = [];\r\n    var numEquip = allItems.length;\r\n    var curDisplay = 0;\r\n    for(var i=0;i<numEquip && (curDisplay<$scope.maxDisplay || $scope.stat.id >= 0);++i) {\r\n      var e = allItems[i];\r\n      if(e != null) {\r\n        \r\n        if(!$scope.itemCategory.hideLevel) {\r\n          if(e.levelLimit < $scope.minLevel || e.levelLimit > $scope.maxLevel) {\r\n            continue;\r\n          }\r\n        }\r\n          \r\n        if(!$scope.itemCategory.hideRank) {\r\n          if(e.rank != null && !$scope.rankChecked[e.rank.id]) {\r\n            continue;\r\n          }\r\n        }\r\n          \r\n        if(!$scope.itemCategory.hideJob) {\r\n          if($scope.job != null && $scope.job.id > 0) {\r\n            if(!$scope.job.isClassJob(e.needJobClass)) {\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n        \r\n        itemFactory.initItem(e);\r\n        if(e.typeName != $scope.itemCategory.name) {\r\n          continue;\r\n        }\r\n        \r\n        if($scope.nameSearch != '') {\r\n          var nameSearches = $scope.nameSearch.split(' ');\r\n          if(nameSearches.length == 0) {\r\n            nameSearches = [$scope.nameSearch];\r\n          }\r\n          var allMatch = true;\r\n          for(var ns=0;ns<nameSearches.length;++ns) {\r\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\r\n              allMatch = false;\r\n              break;\r\n            }\r\n          }\r\n          \r\n          if(!allMatch) {\r\n            continue;\r\n          }\r\n        }\r\n        \r\n        if($scope.stat.id >= 0) {\r\n          var statFound = false;\r\n          \r\n          var statVal = {};\r\n          for(var s=0;s<e.stats.length;++s) {\r\n            var stat = e.stats[s]\r\n            if(stat.id == $scope.stat.id) {\r\n              statFound = true;\r\n              statVal.i = curDisplay;\r\n              statVal.s = Number(stat.max);\r\n              break;\r\n            }\r\n            else if(stat.id == pcStatId) {\r\n              statFound = true;\r\n              statVal.i = curDisplay;\r\n              statVal.s = Number(stat.max);\r\n            }\r\n          }\r\n          \r\n          if(!statFound) {\r\n            continue;\r\n          }\r\n          else {\r\n            statVals.push(statVal);\r\n          }\r\n        }\r\n        \r\n        newResults.push(e);\r\n        curDisplay++;\r\n      }\r\n    }\r\n    \r\n    if($scope.stat.id >= 0) {\r\n      \r\n      var currentResults = Math.min(curDisplay, $scope.maxDisplay);\r\n      \r\n      statVals = statVals.sort(function(value1, value2) {\r\n        return value2.s - value1.s;\r\n      });\r\n      \r\n      var statResults = [];\r\n      for(var i=0;i<currentResults;++i) {\r\n        statResults.push(newResults[statVals[i].i]);\r\n      }\r\n      newResults = statResults;\r\n    }\r\n    \r\n    $scope.totalNumResults = newResults.length;\r\n            \r\n    var end = new Date().getTime();\r\n    var time = end - start;\r\n    \r\n    return newResults;\r\n  };\r\n  \r\n  $scope.showMoreResults = function(extra) {\r\n    $scope.maxDisplay = $scope.totalNumResults + extra;\r\n    $scope.totalNumResults = 0;\r\n  }\r\n  \r\n}]);\r\n","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dngearsimSkillSearch', function() {\r\n  return {\r\n    scope: {},\r\n    bindToController: {\r\n      job: '=job',\r\n      jobs: '=jobs',\r\n    },\r\n    controller: ['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues','itemCategory','$location', skillSearchCtrl],\r\n    controllerAs: 'skillSearch',\r\n    templateUrl: 'ui/search/skill-search.html'\r\n  };\r\n});\r\n\r\nfunction skillSearchCtrl($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues,itemCategory,$location) {\r\n  'use strict';\r\n  \r\n  var vm = this;\r\n  \r\n  this.allJobs = [];\r\n  this.maxDisplay = 60;\r\n  this.currentResults = 0;\r\n  this.dntName = '';\r\n  this.skills = [];\r\n  this.loadedJobId = -1;\r\n\r\n  this.itemCategory = itemCategory.byName('skills');\r\n\r\n  this.nameSearch = localStorage.getItem('nameSearch');\r\n  if(this.nameSearch == null) {\r\n    this.nameSearch = '';\r\n  }\r\n\r\n  var classFactories = [];\r\n  \r\n  region.init();\r\n  if(translations.isLoaded()) {\r\n    init();\r\n  }\r\n  else {\r\n    translations.init(reportProgress, function() { $timeout(init); } );\r\n  }\r\n\r\n  this.navigate = function() {\r\n    $timeout(function() {\r\n      if(vm.itemCategory) {\r\n        $location.path(vm.itemCategory.path);\r\n      }\r\n    });\r\n  }\r\n  \r\n  this.isLoading = function() {\r\n    \r\n    if(!translations.isLoaded()) {\r\n      // console.log('transations not loaded');\r\n      if(!translations.startedLoading) {\r\n        translations.init(reportProgress, function() { $timeout(translationsInit); } );\r\n      }\r\n\r\n      return true;\r\n    }\r\n    \r\n    var baseName = jobs.getBaseJobName(vm.job);\r\n    var dntName = getDntName(baseName);\r\n    if(dntName != null) {\r\n      if(!dntData.isLoaded(dntName)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n  \r\n  function getDntName(baseClassName) {\r\n    // console.log('got base class :' + baseClassName);\r\n    if(baseClassName != null) {\r\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function getSkills() {\r\n    // console.log('getting skills for ' + vm.job.name);\r\n    if(vm.loadedJobId == vm.job.id) {\r\n      return vm.skills;\r\n    }\r\n    else {\r\n      \r\n      var baseJobNames = [];\r\n      if(vm.job.id >= 0) {\r\n        var baseName = jobs.getBaseJobName(vm.job);\r\n        baseJobNames.push(baseName);\r\n      }\r\n\r\n      angular.forEach(baseJobNames, function(baseName, index) {\r\n        var dntName = getDntName(baseName);\r\n        if(dntName) {\r\n          if(!dntData.isLoaded(dntName)) {\r\n            // console.log('loading skills for ' + baseName);\r\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() {setupSkills(baseJobNames, vm.job);} ) });\r\n          }\r\n          else {\r\n            setupSkills(baseJobNames, vm.job);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function setupSkills(baseJobNames, job) {\r\n    \r\n    vm.skills = [];\r\n    var allReady = true;\r\n    angular.forEach(baseJobNames, function(baseName, index) {\r\n      var dntName = getDntName(baseName);\r\n      if(!dntData.isLoaded(dntName)) {\r\n        allReady = false;\r\n        return;\r\n      }\r\n    });\r\n    \r\n    if(allReady) {\r\n      angular.forEach(baseJobNames, function(baseName, index) {\r\n        var dntName = getDntName(baseName);\r\n      \r\n        var skills = dntData.getData(dntName);\r\n        var numSkills = skills.length;\r\n        for(var s=0;s<numSkills;++s) {\r\n          if(skills[s].NameID == 0) {\r\n            continue;\r\n          }\r\n          \r\n          if(skills[s].EffectClass1 > 0 || \r\n             skills[s].EffectClass2 > 0 || \r\n             skills[s].EffectClass3 > 0 || \r\n             skills[s].EffectClass4 > 0 ||\r\n             skills[s].EffectClass5 > 0 ||  \r\n             skills[s].EffectClass6 > 0) {\r\n               \r\n            var newItem = {d: skills[s]};\r\n            \r\n            newItem.id = skills[s].id;\r\n            newItem.typeName = 'skills';\r\n            newItem.itemSource = 'skills';\r\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\r\n            newItem.needJobClass = skills[s].NeedJob;\r\n            newItem.rank = hCodeValues.rankNames[0];\r\n            newItem.baseJobName = baseName.toLowerCase();\r\n            newItem.icon = skills[s].IconImageIndex;\r\n            \r\n            vm.skills.push(newItem);\r\n          }\r\n        }\r\n      });\r\n  \r\n      vm.loadedJobId = job.id;\r\n    }\r\n  }\r\n  \r\n  this.itemLinkClosed = function() {\r\n    saveHelper.saveCustomItems(vm.customItems);\r\n    vm.customItems = saveHelper.getCustomItems();\r\n  }\r\n  \r\n  this.getResults = function() {\r\n    \r\n    var skills = getSkills();\r\n    if(skills == null) {\r\n      return [];\r\n    }\r\n    \r\n    \r\n    if(vm.job != null) {\r\n      localStorage.setItem('jobNumber', vm.job.id);\r\n    }\r\n    localStorage.setItem('nameSearch', vm.nameSearch);\r\n\r\n    var newResults = [];\r\n    var numSkills = skills.length;\r\n    var curDisplay = 0;\r\n    for(var i=0;i<numSkills && (curDisplay<vm.maxDisplay);++i) {\r\n      var e = skills[i];\r\n      \r\n      if(vm.nameSearch != '') {\r\n        var nameSearches = vm.nameSearch.split(' ');\r\n        if(nameSearches.length == 0) {\r\n          nameSearches = [vm.nameSearch];\r\n        }\r\n        var allMatch = true;\r\n        for(var ns=0;ns<nameSearches.length;++ns) {\r\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\r\n            allMatch = false;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        if(!allMatch) {\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\r\n        continue;\r\n      }\r\n      \r\n      newResults.push(e);\r\n      curDisplay++;\r\n    }\r\n    vm.currentResults = Math.min(curDisplay, vm.maxDisplay);\r\n    return newResults;\r\n  }\r\n  \r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n  \r\n  function jobInit() {\r\n    if(translations.isLoaded() && jobs.isLoaded()) {\r\n      var newJobs = jobs.getFinalJobs();\r\n\r\n      newJobs.splice(0, 0, vm.jobs[0]);\r\n      vm.jobs = newJobs;\r\n      vm.allJobs = jobs.getAllJobs();\r\n      \r\n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\r\n      if(lastJobNumber != null) {\r\n        angular.forEach(newJobs, function(value, key) {\r\n          if(value.id == lastJobNumber) {\r\n            vm.job = value;\r\n            return;\r\n          }\r\n        });\r\n      }\r\n      \r\n      vm.getResults();\r\n    }\r\n  }\r\n  \r\n  function init() {\r\n    // console.log('skill init');\r\n    if(jobs.isLoaded()) {\r\n      $timeout(jobInit);\r\n    }\r\n    else {\r\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\r\n    }\r\n  }\r\n}\r\n\r\n})();","angular.module('dnsim')\r\n.controller('ItemsCtrl', \r\n  ['$window','$timeout','hCodeValues','region','translations','dntData',\r\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\r\n    \r\n    'use strict';\r\n    \r\n    var vm = this;\r\n    \r\n    this.boxes = null;\r\n    this.boxeContents = [];\r\n    this.maxDisplay = 10;\r\n    this.currentResults = 0;\r\n\r\n    this.nameSearch = localStorage.getItem('itemNameSearch');\r\n    if(this.nameSearch == null) {\r\n      this.nameSearch = '';\r\n    }\r\n    \r\n    document.body.className = 'default-back';\r\n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\r\n    \r\n    var fileName = 'all-items.lzjson';\r\n    \r\n    dntData.init(fileName, null, function() {}, function() {\r\n      $timeout(function() {\r\n        vm.initBoxes();\r\n      });\r\n    });\r\n    \r\n    this.initBoxes = function() {\r\n      // console.log('init boxes');\r\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\r\n        vm.boxes = [];\r\n        \r\n        var datas = dntData.getData(fileName);\r\n        // console.log(datas.length + ' boxes');\r\n        for(var i=0;i<datas.length;++i) {\r\n          var data = datas[i];\r\n          if(data.NameID > 0) {\r\n            var box = {\r\n              id: data.id,\r\n              name: vm.translate(data.NameID, data.NameIDParam),\r\n              rank: hCodeValues.rankNames[data.Rank],\r\n              icon: data.IconImageIndex,\r\n              levelLimit: data.LevelLimit,\r\n              fileName: data.fileName,\r\n            }\r\n            vm.boxes.push(box);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.getResults = function() {\r\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\r\n      if(vm.boxes == null) {\r\n        vm.initBoxes();\r\n      }\r\n      \r\n      if(vm.boxes == null) {\r\n        return;\r\n      }\r\n  \r\n      var newResults = [];\r\n      var numBoxes = vm.boxes.length;\r\n      var curDisplay = 0;\r\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\r\n        var e = vm.boxes[i];\r\n\r\n        if(vm.nameSearch != '') {\r\n          var nameSearches = vm.nameSearch.split(' ');\r\n          if(nameSearches.length == 0) {\r\n            nameSearches = [vm.nameSearch];\r\n          }\r\n          var allMatch = true;\r\n          for(var ns=0;ns<nameSearches.length;++ns) {\r\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\r\n              allMatch = false;\r\n              break;\r\n            }\r\n          }\r\n          \r\n          if(!allMatch) {\r\n            continue;\r\n          }\r\n        }\r\n        \r\n        newResults.push(e);\r\n        curDisplay++;\r\n      }\r\n      \r\n      vm.totalNumResults = newResults.length;\r\n      return newResults;\r\n    }\r\n  \r\n    this.showMoreResults = function(extra) {\r\n      vm.maxDisplay = vm.totalNumResults + extra;\r\n      vm.totalNumResults = 0;\r\n    }\r\n    \r\n    this.translate = function(nameId, nameParam) {\r\n      return translations.translate(nameId, nameParam);\r\n    }\r\n  }]\r\n);\r\n","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\r\n\r\nfunction chooseClass() {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {},\r\n    bindToController: {\r\n      job: '=job',\r\n      onSetJob: '&onSetJob'\r\n    },\r\n    templateUrl: 'ui/widgets/choose-class.html',\r\n    controllerAs: 'ctrl',\r\n    controller: [\r\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \r\n      chooseClassController],\r\n  };\r\n}\r\n\r\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\r\n  this.getFinalJobs = function() {\r\n    var allJobs = jobs.getFinalJobs();\r\n    var finalJobs = [];\r\n    for(var j=0;j<allJobs.length;++j) {\r\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\r\n        finalJobs.push(allJobs[j]);\r\n      }\r\n    }\r\n    return finalJobs;\r\n  }\r\n  \r\n  this.getBaseJobs = function() {\r\n    return jobs.getBaseJobs();\r\n  }\r\n  \r\n  this.getJobName = function(englishName) {\r\n    var allJobs = jobs.getAllJobs();\r\n    for(var j=0;j<allJobs.length;++j) {\r\n      if(allJobs[j].d.EnglishName == englishName) {\r\n        return allJobs[j].name;\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.setJob = function(job) {\r\n    this.job = job;\r\n    if(job) {\r\n      this.onSetJob();\r\n    }\r\n  }\r\n  \r\n  \r\n  jobs.init(reportProgress, $timeout);\r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n\r\n}\r\n\r\n})();\r\n","(function () {\r\n'use strict';\r\n  \r\nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\r\n\r\nfunction dnsimCategoryLinks(itemCategory,$location) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {},\r\n    bindToController: {\r\n      collapse: '=collapse',\r\n      cat: '=cat',\r\n      onChange: '&onChange'\r\n    },\r\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\r\n    controller: ['itemCategory', dnsimCategoryLinksController],\r\n    controllerAs: 'ctrl',\r\n  };\r\n};\r\n\r\nfunction dnsimCategoryLinksController(itemCategory) {\r\n\r\n  var vm = this;\r\n\r\n  vm.categories = itemCategory.categories;\r\n  vm.collapsed = true;\r\n\r\n  vm.setCategory = function(action) {\r\n    console.log('setting cat', action);\r\n    vm.cat = action;\r\n    localStorage.setItem('selectedItemCategory', action.name);\r\n    \r\n    if(vm.collapse) {\r\n      vm.collapsed = !vm.collapsed;\r\n    }\r\n\r\n    if(vm.onChange) {\r\n      vm.onChange();\r\n    }\r\n  }\r\n}\r\n\r\n})();\r\n","(function () {\r\n'use strict';\r\n  \r\nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\r\n\r\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      item: '=item',\r\n    },\r\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\r\n    link: function($scope, element, attrs) {\r\n      \r\n      $scope.$watch('item', function(newValue, oldValue) {\r\n        if (newValue) {\r\n          $scope.iconImage = $scope.getIcon();\r\n        }\r\n      });\r\n      \r\n      $scope.getIcon = function() {\r\n        if($scope.item && $scope.item.icon > 0) {\r\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\r\n          \r\n          var prefix;\r\n          if($scope.item.typeName == 'skills') {\r\n            prefix = 'skillicon';\r\n          }\r\n          else {\r\n            prefix = 'itemicon';\r\n          }\r\n          \r\n          if(fileIndex > 9) {\r\n            return prefix + fileIndex + '.png';\r\n          }\r\n          else {\r\n            return prefix + '0' + fileIndex + '.png';\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      \r\n      $scope.iconImage = $scope.getIcon();\r\n      \r\n      $scope.getIconXPostion = function() {\r\n        if($scope.item && $scope.item.icon > 0) {\r\n          return (($scope.item.icon % 10) * 40) + 5;\r\n        }\r\n        return 0;\r\n      }\r\n      \r\n      $scope.getIconYPostion = function() {\r\n        if($scope.item && $scope.item.icon > 0) {\r\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\r\n        }\r\n        return 0;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\n})();\r\n","(function () {\r\n'use strict';\r\n  \r\nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\r\n\r\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      item: '=item',\r\n      noClick: '=noClick',\r\n    },\r\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\r\n    link: function($scope, element, attrs) {\r\n      $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\r\n      \r\n      $scope.$watch('item', function(newValue, oldValue) {\r\n        if (newValue) {\r\n          $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\r\n        }\r\n      });\r\n      \r\n      $scope.openItem = function() {\r\n        if(!$scope.noClick) {\r\n          $location.path($scope.itemLink);\r\n        }\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\n})();\r\n","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dnsimJobIcon', ['exportLinkHelper','$location','region', dnsimJobIcon]);\r\n\r\nfunction dnsimJobIcon(exportLinkHelper,$location,region) {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      item: '=item',\r\n    },\r\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\r\n    link: function($scope, element, attrs) {\r\n\r\n      $scope.getIconXPostion = function() {\r\n        if($scope.item && $scope.item.d && $scope.item.d.JobIcon > 0) {\r\n          return (($scope.item.d.JobIcon % 9) * 44) + 5;\r\n        }\r\n        return 0;\r\n      }\r\n      \r\n      $scope.getIconYPostion = function() {\r\n        if($scope.item && $scope.item.d && $scope.item.d.JobIcon > 0) {\r\n          return (Math.floor($scope.item.d.JobIcon / 9) * 44) + 5;\r\n        }\r\n        return 0;\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\n})();\r\n","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\r\n\r\nfunction dnsimLoading(dntData, translations, $timeout) {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    transclude: true,\r\n    scope: {\r\n    },\r\n    templateUrl: 'ui/widgets/dnsim-loading.html',\r\n    link: function($scope, element, attrs) {\r\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\r\n        $scope.setLoadCount();\r\n      });\r\n      \r\n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\r\n        $scope.setLoadCount();\r\n      });\r\n      \r\n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\r\n        $timeout(function() {\r\n          $scope.loadError = true;\r\n        });\r\n      });\r\n      \r\n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\r\n        $timeout(function() {\r\n          $scope.loadError = true;\r\n        });\r\n      });\r\n\r\n      $scope.numLoading = 0;\r\n      $scope.setLoadCount = function() {\r\n        var n = dntData.anyLoading();\r\n        if(!translations.isLoaded())\r\n        {\r\n          n++;\r\n        }\r\n        \r\n        $timeout(function() {\r\n          if($scope.numLoading < n || !$scope.totalToLoad) {\r\n            $scope.totalToLoad = n;\r\n          }\r\n          $scope.numLoading = n;\r\n        });\r\n      }\r\n      \r\n      $scope.setLoadCount();\r\n      $scope.loadError = false;\r\n    },\r\n  };\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\r\n\r\nfunction dnsimSelectAllOnClick() {\r\n  'use strict';\r\n  return {\r\n    restrict: 'A',\r\n    link: function(scope, element, attrs) {\r\n      var hasSelectedAll = false;\r\n      element.on('click', function($event) {\r\n        if (!hasSelectedAll) {\r\n          try {\r\n            //IOs, Safari, thows exception on Chrome etc\r\n            this.selectionStart = 0;\r\n            this.selectionEnd = this.value.length + 1;\r\n            hasSelectedAll = true;\r\n          } catch (err) {\r\n            //Non IOs option if not supported, e.g. Chrome\r\n            this.select();\r\n            hasSelectedAll = true;\r\n          }\r\n        }\r\n      });\r\n      //On blur reset hasSelectedAll to allow full select\r\n      element.on('blur', function($event) {\r\n        hasSelectedAll = false;\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\r\n\r\nfunction dnsimStats(hCodeValues) {\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      stats: '=stats',\r\n      build: '=build',\r\n      altStats: '=altStats',\r\n      separator: '=separator',\r\n      filter: '=filter',\r\n    },\r\n    link: function($scope, element, attrs) {\r\n      \r\n      var sep;\r\n      if(!$scope.separator) {\r\n        sep = '';\r\n      }\r\n      else {\r\n        sep = '&nbsp;' + $scope.separator + ' ';\r\n      }\r\n      \r\n      var addedElements = [];\r\n      var originalDisplay = element.css('display');\r\n      \r\n      function showStats() {\r\n        element.css('display', 'none' );\r\n        var stats = $scope.stats;\r\n        if(!stats) {\r\n          stats = $scope.altStats;\r\n        }\r\n        \r\n        angular.forEach(addedElements, function(value, key) {\r\n          value.remove();\r\n        });\r\n        \r\n        var first = true;\r\n        var lastElement = element;\r\n        \r\n        function append(text) {\r\n          var newElement = element.clone();\r\n          newElement.css('display', originalDisplay);\r\n          newElement.html(text);\r\n          \r\n          lastElement.after(newElement);\r\n          lastElement = newElement;\r\n          addedElements.push(newElement);\r\n        }\r\n        \r\n        angular.forEach(stats, function(stat, key) {\r\n          var output = '';\r\n          \r\n          if(stat.id in hCodeValues.stats) {\r\n            \r\n            var def = hCodeValues.stats[stat.id];\r\n            if(!$scope.filter && 'hide' in def && def.hide) {\r\n              return;\r\n            }\r\n            \r\n            if($scope.filter && !def[$scope.filter]) {\r\n              return;\r\n            }\r\n            \r\n            if(!first) {\r\n              output += sep;\r\n            }\r\n            first = false;\r\n          \r\n            if('needSetNum' in stat) {\r\n              output += stat.needSetNum + '&nbsp;';\r\n            }\r\n            \r\n            if($scope.build) {\r\n              if(def.element == 'primary') {\r\n                var eleId = 0;\r\n                if($scope.build.element) {\r\n                  eleId = $scope.build.element.id;\r\n                }\r\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\r\n              }\r\n              else if(def.element == 'secondary') {\r\n                var eleId = 0;\r\n                if($scope.build.secondaryElement) {\r\n                  eleId = $scope.build.secondaryElement.id;\r\n                }\r\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\r\n              }\r\n            }\r\n            \r\n            output += def.name+':&nbsp;'+def.display(stat);\r\n            if(def.combineWith > 0) {\r\n              angular.forEach(stats, function(stat2, key2) {\r\n                if(stat2.id == def.combineWith) {\r\n                  if(stat2.max != stat.max) {\r\n                    output += '-' + def.display(stat2);\r\n                  }\r\n                  return;\r\n                }\r\n              });\r\n            }\r\n          }\r\n          else {\r\n            if(!first) {\r\n              output += sep;\r\n            }\r\n            first = false;\r\n          \r\n            if('needSetNum' in stat) {\r\n              output += stat.needSetNum + '-Increases&nbsp;';\r\n            }\r\n            \r\n            output += stat.id+':&nbsp;'+stat.max;\r\n          }\r\n          \r\n          append(output);\r\n        });\r\n      }\r\n        \r\n      $scope.$watch('stats', function(newValue, oldValue) {\r\n        if (newValue) {\r\n          showStats();\r\n        }\r\n      });\r\n      \r\n      $scope.$watch('altStats', function(newValue, oldValue) {\r\n        if (newValue) {\r\n          showStats();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\r\n\r\nfunction dnsimStringToNumber() {\r\n  return {\r\n    require: 'ngModel',\r\n    link: function(scope, element, attrs, ngModel) {\r\n      ngModel.$parsers.push(function(value) {\r\n        return '' + value;\r\n      });\r\n      ngModel.$formatters.push(function(value) {\r\n        return parseFloat(value, 10);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\r\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\r\n\r\n  var jobConversions = 'rebootplayerweighttable.lzjson';\r\n  var statCaps = 'playercommonleveltable.lzjson';\r\n  var jobBaseStats = 'playerleveltable.lzjson';\r\n\r\n  var heroLevels = 'heroleveltable.lzjson';\r\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\r\n  \r\n  function reportProgress(msg) {\r\n    // console.log('progress: ' + msg);\r\n  }\r\n\r\n  return {\r\n    init: function(complete) {\r\n      jobs.init(reportProgress, complete);\r\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\r\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\r\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\r\n      dntData.init(heroLevels, null, reportProgress, complete);\r\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\r\n    },\r\n    \r\n    getHeroStats: function(heroLevel) {\r\n      var heroStats = [];\r\n      if(heroLevel > 0) {\r\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\r\n        if(index.length == 1) {\r\n          var h = dntData.getRow(heroLevels, index[0]);\r\n          if(h != null) {\r\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\r\n            if(pIndex.length == 1) {\r\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\r\n              if(p != null) {\r\n                heroStats = hCodeValues.getStats(p);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return heroStats;\r\n    },\r\n    \r\n    getStatCaps: function(level) {\r\n      if(level > 0) {\r\n        var index = dntData.findFast(statCaps, 'id', level);\r\n        if(index.length == 1) {\r\n          return dntData.getRow(statCaps, index[0]);\r\n        }\r\n      }\r\n      \r\n      return {};\r\n    },\r\n    \r\n    getConversions: function(jobId) {\r\n      if(jobId > 0) {\r\n        var index = dntData.findFast(jobConversions, 'id', jobId);\r\n        if(index.length == 1) {\r\n          return dntData.getRow(jobConversions, index[0]);\r\n        }\r\n      }\r\n      \r\n      return {};\r\n    },\r\n    \r\n    getBaseStats: function(level, jobId) {\r\n      if(level > 0 && jobId > 0) {\r\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\r\n        if(index.length == 1) {\r\n          return dntData.getRow(jobBaseStats, index[0]);\r\n        }\r\n      }\r\n      \r\n      return {};\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\r\nfunction itemColumnsToLoad() {\r\n  return {\r\n    mainDnt: {\r\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\r\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\r\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\r\n      State2: true, StateValue2: true, State2_Max: true,\r\n      State3: true, StateValue3: true, State3_Max: true,\r\n      State4: true, StateValue4: true, State4_Max: true,\r\n      State5: true, StateValue5: true, State5_Max: true,\r\n      State6: true, StateValue6: true, State6_Max: true,\r\n      State7: true, StateValue7: true, State7_Max: true,\r\n      State8: true, StateValue8: true, State8_Max: true,\r\n      State9: true, StateValue9: true, State9_Max: true,\r\n      State10: true,StateValue10: true,State10_Max: true,\r\n      EnchantID: true,\r\n      SkillID: true,\r\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\r\n    },\r\n    partsDnt: {\r\n      SetItemID: true\r\n    },\r\n    enchantDnt: {\r\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\r\n      DisjointDrop: true,\r\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\r\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\r\n    },\r\n    potentialDnt : {\r\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\r\n      State1: true,State1Value: true,\r\n      State2: true,State2Value: true,\r\n      State3: true,State3Value: true,\r\n      State4: true,State4Value: true,\r\n      State5: true,State5Value: true,\r\n      State6: true,State6Value: true,\r\n      State7: true,State7Value: true,\r\n      State8: true,State8Value: true,\r\n      State9: true,State9Value: true,\r\n      State10: true,State10Value: true,\r\n      State11: true,State11Value: true,\r\n      State12: true,State12Value: true,\r\n      State13: true,State13Value: true,\r\n      State14: true,State14Value: true,\r\n      State15: true,State15Value: true,\r\n      State16: true,State16Value: true\r\n    },\r\n    gemDnt: {\r\n      Type: true\r\n    },\r\n    setDnt : null,\r\n    sparkDnt: null,\r\n    jobsDnt: {\r\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\r\n    },\r\n    jobBaseStatColsToLoad: {\r\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\r\n    },\r\n    statCapColsToLoad: {\r\n      Cbase: true,\r\n      Cdefense: true,\r\n      Ccritical: true,\r\n      Cfinaldamage: true,\r\n      CcriticalDamage: true,\r\n    },\r\n    jobConversionColsToLoad: {\r\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\r\n\r\nfunction dntData($rootScope,$timeout) {\r\n  \r\n  function createLoader(dntLocation, file, colsToLoad) {\r\n\r\n    var loader = {\r\n      reader: new DntReader(),\r\n      \r\n      loaded: false,\r\n      startedLoading: false,\r\n      \r\n      file: file,\r\n      \r\n      dntLocation: dntLocation,\r\n      progressCallback: null,\r\n      completeCallbacks : [],\r\n      \r\n      init: function(progress, complete) {\r\n        \r\n        if(this.loaded) {\r\n          complete();\r\n        }\r\n        else {\r\n          this.progressCallback = progress;\r\n          this.completeCallbacks.push(complete);\r\n          \r\n          if(!this.startedLoading) {\r\n            this.startedLoading = true;\r\n            var t = this;\r\n            \r\n            this.reader.colsToLoad = colsToLoad;\r\n            \r\n            if(this.dntLocation != null && \r\n              this.dntLocation.url != null &&\r\n              this.dntLocation.url.length > 0) {\r\n\r\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\r\n\r\n              $timeout(function() {\r\n                t.reader.loadDntFromServerFile(\r\n                  t.dntLocation.url + '/' + file,\r\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \r\n                  function(result, fileName) {\r\n                    // console.info('dnt loading complete : ' + file);\r\n                    t.loaded = true;\r\n                    \r\n                    angular.forEach(t.completeCallbacks, function(value, key) {\r\n                      value();\r\n                    });\r\n                    t.completeCallbacks = [];\r\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\r\n                  },\r\n                  function(msg) {\r\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\r\n                    t.startedLoading = false;\r\n                    t.loaded = false;\r\n                  }  );\r\n              });\r\n            }\r\n            else {\r\n              // console.log(\"dnt location not set!\");\r\n            }\r\n          }\r\n        }\r\n      },\r\n      \r\n      reset: function() {\r\n        this.reader = new DntReader();\r\n        this.loaded = false;\r\n        this.startedLoading = false;\r\n      }\r\n    }\r\n  \r\n    return loader;\r\n  };\r\n  \r\n  return {\r\n    loaders : {},\r\n    findIndexes : {},\r\n    dntLocation : null,\r\n    \r\n    setLocation: function(location) {\r\n      this.dntLocation = location;\r\n      var t = this;\r\n      angular.forEach(this.loaders, function(value, key) {\r\n        if(value.dntLocation != location) {\r\n          value.dntLocation = location;\r\n          t.reset(key);\r\n        }\r\n      });\r\n    },\r\n    \r\n    init : function (fileName, colsToLoad, progress, complete) {\r\n      if(!(fileName in this.loaders)) {\r\n        if(fileName.length > 0) {\r\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\r\n        }\r\n      }\r\n      this.loaders[fileName].init(progress, complete);\r\n    },\r\n    getData : function (fileName) {\r\n      if(this.isLoaded(fileName)) {\r\n        var reader = this.loaders[fileName].reader;\r\n        var retVal = new Array(reader.numRows);\r\n        for(var i=0;i<reader.numRows;++i) {\r\n          retVal[i] = reader.getRow(i);\r\n        }\r\n        \r\n        return retVal;\r\n      }\r\n      else {\r\n        return [];\r\n      }\r\n    },\r\n    find : function(fileName, column, value) {\r\n      var results = this.findFast(fileName, column, value);\r\n      var retVal = [];\r\n      var numResults = results.length;\r\n      for(var i=0;i<numResults;++i) {\r\n        retVal.push(this.getRow(fileName, results[i]));\r\n      }\r\n      \r\n      return retVal;\r\n    },\r\n    findFast : function(fileName, column, value) {\r\n      \r\n      if(this.isLoaded(fileName)) {\r\n        if(!(fileName in this.findIndexes)){\r\n          this.findIndexes[fileName] = {};\r\n        }\r\n        \r\n        var reader = this.loaders[fileName].reader;\r\n        var colIndex = reader.columnIndexes[column];\r\n        \r\n        var findIndex = this.findIndexes[fileName];\r\n        \r\n        if(!(column in findIndex)) {\r\n          var index = {}\r\n          findIndex[column] = index;\r\n          \r\n          var results = [];\r\n          \r\n          var data = reader.data;\r\n          var len = data.length;\r\n          for(var r=0;r<len;++r) {\r\n            var d = data[r];\r\n            var val = d[colIndex];\r\n\r\n            if(!(val in index)) {\r\n              index[val] = [r];\r\n            }\r\n            else {\r\n              index[val].push(r);\r\n            }\r\n          }\r\n        }\r\n        \r\n        if(value in findIndex[column]) {\r\n          return findIndex[column][value];\r\n        }\r\n        else {\r\n          return [];\r\n        }\r\n      }\r\n      \r\n      return [];\r\n    },\r\n    isLoaded : function(fileName) {\r\n      return fileName in this.loaders && this.loaders[fileName].loaded;\r\n    },\r\n    hasStartedLoading : function(fileName) {\r\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\r\n    },\r\n    reset : function(fileName) {\r\n      if(fileName in this.loaders) {\r\n        this.loaders[fileName].reset();\r\n        delete this.loaders[fileName];\r\n        delete this.findIndexes[fileName];\r\n      }\r\n    },\r\n    resetAll : function() {\r\n      var t = this;\r\n      angular.forEach(this.loaders, function(value, key) {\r\n        t.reset(key);\r\n      });\r\n    },\r\n    anyLoading : function() {\r\n      var t = this;\r\n      var found = 0;\r\n      angular.forEach(this.loaders, function(value, key) {\r\n        if(!value.loaded && value.startedLoading) {\r\n          found++;\r\n        }\r\n      });\r\n      \r\n      return found;\r\n    },\r\n    getNumRows : function(fileName) {\r\n      if(this.isLoaded(fileName)) {\r\n        return this.loaders[fileName].reader.numRows;\r\n      }\r\n      else {\r\n        return 0;\r\n      }\r\n    },\r\n    getRow : function(fileName, index) {\r\n      if(this.isLoaded(fileName)) {\r\n        return this.loaders[fileName].reader.getRow(index);\r\n      }\r\n      else {\r\n        return {};\r\n      }\r\n    },\r\n    lookupValue: function(fileName, data, columnName) {\r\n      if(this.isLoaded(fileName)) {\r\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    },\r\n    convertData: function(fileName, data) {\r\n      if(this.isLoaded(fileName)) {\r\n        return this.loaders[fileName].reader.convertData(data);\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    },\r\n    getValue : function(fileName, index, columnName) {\r\n      if(this.isLoaded(fileName)) {\r\n        return this.loaders[fileName].reader.getValue(index, columnName);\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\r\nfunction dntInit(items,jobs,dntData,itemFactory) {\r\n  return function(progress) {\r\n    \r\n    progress('starting init');\r\n    \r\n    var allFactories = [jobs];\r\n    \r\n    var dntFiles = {};\r\n    angular.forEach(items, function(item, key) {\r\n      if(key != 'all') {\r\n        angular.forEach(item, function(value, prop) {\r\n          if(prop.indexOf('Dnt') == prop.length-3) {\r\n            var newFactory = { \r\n              init: function(progress, complete) {\r\n                dntData.init(value, null, progress, complete);\r\n              },\r\n              isLoaded: function() {\r\n                return dntData.isLoaded(value);\r\n              },\r\n              fileName: value,\r\n            };\r\n            \r\n            allFactories.push(newFactory);\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    function initFactory(index) {\r\n    \r\n      if(index < allFactories.length) {\r\n        allFactories[index].init(progress, function() { \r\n          if(allFactories[index].isLoaded()) {\r\n            if('fileName' in allFactories[index]) {\r\n              progress('dnt loaded: ' + allFactories[index].fileName);\r\n            }\r\n            initFactory(index+1);\r\n          }\r\n        });\r\n      }\r\n      else {\r\n        progress('Full initialise complete');\r\n      }\r\n    }\r\n    \r\n    initFactory(0);\r\n  }\r\n}\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\r\nfunction dntReset(items, jobs, dntData) {\r\n  return function() {\r\n    \r\n    angular.forEach(items, function(source, name) {\r\n      source.reset();\r\n    });\r\n    \r\n    jobs.reset();\r\n    dntData.resetAll();\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('exportLinkHelper', \r\n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\r\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\r\n  'use strict';\r\n  \r\n  return {\r\n    \r\n    encodeItem: function(item, small) {\r\n      if(item != null) {\r\n        var itemString;\r\n\r\n        if(item.typeName == 'custom')  {\r\n          itemString = '_custom';\r\n          angular.forEach(item.stats, function(stat, index) {\r\n            if(index > 0) {\r\n              itemString += '|';\r\n            }\r\n            else {\r\n              itemString += ':C'\r\n            }\r\n            itemString += stat.id.toString(36) + '=' + stat.max;\r\n          });\r\n        }\r\n        else if(item.id) {\r\n          itemString = 'I' + item.id.toString(36) + ':_';\r\n          if('itemSource' in item) {\r\n            itemString += item.itemSource;\r\n          }\r\n          else if('itemTypeName' in item) {\r\n            // this is to support groups saved with the old property name\r\n            itemString += item.itemTypeName;\r\n          }\r\n        \r\n          if(item.enchantmentNum || item.enchantmentNum == 0) {\r\n            itemString += ':E' + item.enchantmentNum.toString(36);\r\n          }\r\n          if(item.pid > 0) {\r\n            itemString += ':P' + item.pid.toString(36);\r\n          }\r\n          // if(item.setId > 0) {\r\n            // itemString += ':S' + item.setId.toString(36);\r\n          // }\r\n          if(item.sparkId > 0) {\r\n            itemString += ':H' + item.sparkId.toString(36);\r\n          }\r\n          if(item.typeName == 'skills') {\r\n            itemString += ':J' + item.baseJobName;\r\n          }\r\n          if(item.pve) {\r\n            itemString += ':V' + item.pve;\r\n          }\r\n          if(item.fileName) {\r\n            itemString += ':F' + item.fileName;\r\n          }\r\n        }\r\n        \r\n        if(item.name && !small) {\r\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\r\n        }\r\n\r\n        return itemString;\r\n      }\r\n      \r\n      return '';\r\n    },\r\n    \r\n    decodeItem: function(itemStr) {\r\n      var item = {};\r\n      \r\n      if(itemStr != null) {\r\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\r\n          if(itemBit.charAt(0) == 'I') {\r\n            item.id = parseInt(itemBit.substr(1), 36);\r\n          }\r\n          else if(itemBit.charAt(0) == 'E') {\r\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\r\n          }\r\n          else if(itemBit.charAt(0) == 'P') {\r\n            item.pid = parseInt(itemBit.substr(1), 36);\r\n          }\r\n          else if(itemBit.charAt(0) == 'S') {\r\n            item.setId = parseInt(itemBit.substr(1), 36);\r\n          }\r\n          else if(itemBit.charAt(0) == 'H') {\r\n            item.sparkId = parseInt(itemBit.substr(1), 36);\r\n          }\r\n          else if(itemBit.charAt(0) == 'J') {\r\n            item.baseJobName = itemBit.substr(1);\r\n          }\r\n          else if(itemBit.charAt(0) == 'V') {\r\n            item.pve = itemBit.substr(1);\r\n          }\r\n          else if(itemBit.charAt(0) == '_') {\r\n            item.itemSource = itemBit.substr(1);\r\n          }\r\n          else if(itemBit.charAt(0) == '.') {\r\n            item.name = itemBit.substr(1).replace('-', ' ');\r\n          }\r\n          else if(itemBit.charAt(0) == 'C') {\r\n            item.stats = [];\r\n            var statString = itemBit.substr(1);\r\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\r\n              var splitStat = statBit.split('=');\r\n              item.stats.push({\r\n                id: parseInt(splitStat[0], 36),\r\n                max: Number(splitStat[1])\r\n              });\r\n            });\r\n          }\r\n          else if(itemBit.charAt(0) == 'F') {\r\n            \r\n            item.fileName = itemBit.substr(1);\r\n            angular.forEach(items, function(itemSource, key) {\r\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\r\n                item.itemSource = key;\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n      \r\n      return item;\r\n    },\r\n    \r\n    createGroupLink: function(groupName, group) {\r\n      var itemStrings = [];\r\n      var self = this;\r\n      \r\n      if(group == null) {\r\n        return '';\r\n      }\r\n      \r\n      angular.forEach(group.items, function(item, key) {\r\n        var itemString = self.encodeItem(item, true);  \r\n        if(itemString != null && itemString.length > 0) {\r\n          itemStrings.push(itemString);\r\n        }\r\n      });\r\n  \r\n      var retVal = '#/view-group/' + region.dntLocation.region + '/?';\r\n      \r\n      \r\n      if(group.enemyLevel) {\r\n        retVal += '&e=' + group.enemyLevel;\r\n      }\r\n      if(group.playerLevel) {\r\n        retVal += '&p=' + group.playerLevel;\r\n      }\r\n      if(group.heroLevel) {\r\n        retVal += '&h=' + group.heroLevel;\r\n      }\r\n      if(group.job && group.job.id) {\r\n        retVal += '&j=' + group.job.id;\r\n      }\r\n      if(group.damageType && group.damageType.id) {\r\n        retVal += '&d=' + group.damageType.id;\r\n      }\r\n      if(group.element && group.element.id) {\r\n        retVal += '&t=' + group.element.id;\r\n      }\r\n      if(group.secondaryElement && group.secondaryElement.id) {\r\n        retVal += '&s=' + group.secondaryElement.id;\r\n      }\r\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\r\n      return retVal\r\n    },\r\n\r\n    createShortUrl: function(groupName, group) {\r\n      \r\n      var path = this.createGroupLink(groupName, group);\r\n      var longUrl = window.location.href.split(\"#\")[0] + path;\r\n      var data = { longUrl: longUrl };\r\n      \r\n    \t$http.post(\r\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\r\n    \t    function(data,status,headers,config){\r\n        \t\tgroup.shortUrl = data.id;\r\n    \t      sessionStorage.setItem(path, data.id);\r\n        \t}).\r\n        \terror(function(data,status,headers,config){\r\n        \t\t// console.log(data);\r\n        \t\t// console.log(status);\r\n        \t\t// console.log(headers);\r\n        \t\t// console.log(config);\r\n        \t});\r\n    },\r\n    \r\n    reloadItem: function(item) {\r\n\r\n      if(item == null) {\r\n        // console.log('cannot reload null item');\r\n        return;\r\n      }\r\n      \r\n      // support for old property name\r\n      if('itemTypeName' in item && !item.itemSource) {\r\n        item.itemSource = item.itemTypeName;\r\n      }\r\n      \r\n      // console.log('checking ' + item.itemSource)\r\n      if(item.itemSource == 'rbTech') {\r\n        item.itemSource = 'tech';\r\n        console.log('changed to ' + item.itemSource)\r\n      }\r\n      \r\n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\r\n        item.typeName = 'custom';\r\n        return item;\r\n      }\r\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\r\n        \r\n        if(!item.enchantmentNum) {\r\n          item.enchantmentNum = 1;\r\n        }\r\n        \r\n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\r\n        var pv = 'pve';\r\n        if(item.pve == 'pvp') {\r\n          pv = 'pvp';\r\n        }\r\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\r\n        \r\n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\r\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\r\n\r\n        var skillLevelVals = {};\r\n        angular.forEach(skillLevelDatas, function(value, index) {\r\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\r\n            skillLevelVals = value;\r\n            return;\r\n          }\r\n        });\r\n        \r\n        var newItem = {\r\n          id: item.id,\r\n          itemSource: item.itemSource,\r\n          typeName: item.itemSource,\r\n          needJobClass: skillData.NeedJob,\r\n          baseJobName: item.baseJobName,\r\n          rank: hCodeValues.rankNames[0],\r\n          enchantmentNum: item.enchantmentNum,\r\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\r\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\r\n          icon: skillData.IconImageIndex,\r\n          pve: item.pve,\r\n        };\r\n        \r\n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\r\n        return newItem;\r\n      }\r\n      else if(item.itemSource in items) {\r\n        \r\n        var itemType = items[item.itemSource];\r\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\r\n        if(ds.length == 0) {\r\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\r\n        }\r\n        else {\r\n          var d = ds[0];\r\n        \r\n          var totalRatio = 0;\r\n          var p = null;\r\n          \r\n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\r\n          if(ps.length == 0) {\r\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\r\n          }\r\n          \r\n          if(ps.length == 0) {\r\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\r\n            if(ps.length == 0) {\r\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\r\n            }\r\n          }\r\n          \r\n          if(ps.length > 0) {\r\n            p = ps[0];\r\n            \r\n            if(p.PotentialID != d.TypeParam1) {\r\n              // this happened one time\r\n              // not sure how but it corrupted the stats\r\n              p = null;\r\n            console.log('bad potential');\r\n            }\r\n            else {\r\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\r\n              angular.forEach(potentials, function(value, key) {\r\n                totalRatio += value.PotentialRatio;\r\n              });\r\n            }\r\n          }\r\n          \r\n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\r\n          itemFactory.initItem(newItem);\r\n          itemCategory.setItemCategory(newItem, d);\r\n\r\n          var usePartDnt = null;\r\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\r\n            usePartDnt = 'partsDnt';\r\n          }\r\n          else {\r\n            usePartDnt = 'weaponDnt';\r\n          }\r\n      \r\n          if(usePartDnt) {\r\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\r\n              newItem.setStats = [];\r\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\r\n              if(parts.length > 0) {\r\n                newItem.setId = parts[0].SetItemID;\r\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\r\n                if(sets.length > 0) {\r\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          newItem.fullStats = newItem.stats;\r\n          if(item.enchantmentNum >= 0) {\r\n            newItem.enchantmentNum = item.enchantmentNum;\r\n            \r\n            if(newItem.typeName == 'skills') {\r\n              \r\n            }\r\n            else if(newItem.typeName == 'talisman') {\r\n              var extraStats = [];\r\n              angular.forEach(newItem.stats, function(stat, index) {\r\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\r\n              });\r\n              \r\n              newItem.enchantmentStats = extraStats;\r\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\r\n            }\r\n            else {\r\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\r\n              angular.forEach(enchantments, function(enchantment, index) {\r\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\r\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\r\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\r\n                  return;\r\n                }\r\n              });\r\n            }\r\n          }\r\n          \r\n          if(item.sparkId > 0) {\r\n            newItem.sparkId = item.sparkId;\r\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\r\n            if(sparks.length > 0) {\r\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\r\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\r\n            }\r\n          }\r\n          else if(d.dragonjeweltype) {\r\n            newItem.offensiveGemSlots = 0;\r\n            newItem.increasingGemSlots = 0;\r\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\r\n            if(itemData && itemData.length > 0) {\r\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\r\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\r\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\r\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\r\n              \r\n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\r\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\r\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\r\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\r\n            }\r\n          }\r\n          \r\n          return newItem;\r\n        }\r\n      }\r\n      \r\n      if(item.fileName) {\r\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\r\n        if(datas.length > 0) {\r\n          var d = datas[0];\r\n          var newItem = {\r\n            id: item.id,\r\n            data: d,\r\n            levelLimit : d.LevelLimit,\r\n            needJobClass : d.NeedJobClass,\r\n            typeId : d.Type,\r\n            exchangeType: d.ExchangeType,\r\n            rank : hCodeValues.rankNames[d.Rank],\r\n            fileName: item.fileName,\r\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\r\n          };\r\n          \r\n          itemFactory.initItem(newItem);\r\n          return newItem;\r\n        }\r\n        else {\r\n          return {name: 'unknown item'};\r\n        }\r\n      }\r\n      else {\r\n        return {name: 'unknown item source: ' + item.itemSource};\r\n      }\r\n    },\r\n    \r\n    getDntFiles: function(item) {\r\n\r\n      var dntFiles = {};\r\n\r\n      if(item == null) {\r\n      }\r\n      else {\r\n        if(!item.itemSource && item.itemTypeName in items) {\r\n          item.itemSource = item.itemTypeName;\r\n        }\r\n        \r\n        if(item.itemSource == 'rbTech') {\r\n          item.itemSource = 'tech';\r\n        }\r\n        \r\n        if(item.itemSource in items) {\r\n          var itemType = items[item.itemSource];\r\n          \r\n          dntFiles['exchange.lzjson'] = null;\r\n          dntFiles['dragonjewelslottable.lzjson'] = null;\r\n  \r\n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\r\n          if('potentialDnt' in itemType) {\r\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\r\n          }\r\n          if('potentialDntEx' in itemType) {\r\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\r\n          }\r\n          \r\n          if('enchantDnt' in itemType) {\r\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\r\n          }\r\n          \r\n          if('weaponDnt' in itemType) {\r\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\r\n          }\r\n          \r\n          if('partsDnt' in itemType) {\r\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\r\n          }\r\n          \r\n          if('setDnt' in itemType) {\r\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\r\n          }\r\n          \r\n          if('gemDnt' in itemType) {\r\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\r\n          }\r\n          \r\n          if('sparkDnt' in itemType) {\r\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\r\n          }\r\n        }\r\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\r\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\r\n            dntFiles[skillDnt] = null;\r\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\r\n            dntFiles[skillLevelDnt] = null;\r\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\r\n            dntFiles[skillLevelDnt] = null;\r\n        }\r\n        else if(item.typeName == 'custom') {\r\n        }\r\n        \r\n        if(item.fileName) {\r\n          dntFiles[item.fileName + '.lzjson'] = null;\r\n        }\r\n      }\r\n      \r\n      return dntFiles;\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\r\nfunction groupHelper(exportLinkHelper) {\r\n  'use strict';\r\n  \r\n  return {\r\n    reloadGroup: function(groupName, group) {\r\n      var newItems = [];\r\n      angular.forEach(group.items, function(item, key) {\r\n        var newItem = exportLinkHelper.reloadItem(item);\r\n        if(newItem != null) {\r\n          newItems.push(newItem);\r\n        }\r\n      });\r\n      \r\n      return newItems;\r\n    },\r\n    \r\n    getDntFiles: function(group) {\r\n\r\n      var allDntFiles = {};\r\n      angular.forEach(group.items, function(item, key1) {\r\n        \r\n        var dntFiles = exportLinkHelper.getDntFiles(item);\r\n\r\n        angular.forEach(dntFiles, function(value, key) {\r\n          allDntFiles[key] = value;\r\n        });\r\n      });\r\n      \r\n      return allDntFiles;\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('itemCategory',\r\n['itemFactory','items','dntData',itemCategory]);\r\nfunction itemCategory(itemFactory,items,dntData) {\r\n\r\n  return {\r\n    categories: [\r\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\r\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\r\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\r\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\r\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\r\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\r\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\r\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\r\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\r\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\r\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, limitExchange: [16,17,18,19,20,21,22]},\r\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, limitExchange: [23,24,25,26,27,28,29]},\r\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true,},\r\n      {path: 'search/skills', name:'skills', searchType: 'skills'},\r\n      {path: 'search/custom', name:'custom', searchType: 'custom'},\r\n      ],\r\n      \r\n    byName: function(name) {\r\n      var retVal = null;\r\n      angular.forEach(this.categories, function(category, index) {\r\n        if(category.name == name) {\r\n          retVal = category;\r\n        }\r\n      });\r\n      \r\n      return retVal;\r\n    },\r\n      \r\n    byPath: function(name) {\r\n      var retVal = null;\r\n      angular.forEach(this.categories, function(category, index) {\r\n        if(category.path == name) {\r\n          retVal = category;\r\n        }\r\n      });\r\n      \r\n      return retVal;\r\n    },\r\n    \r\n    getItems: function(name) {\r\n      var cat = this.byName(name);\r\n      if(cat && 'sourceType' in cat) {\r\n        var retVal = [];\r\n        angular.forEach(items, function(source, sourceName) {\r\n          if(source.type == cat.sourceType && retVal != null) {\r\n            if(source.items == null && !source.loading) {\r\n              itemFactory.loadItems(source);\r\n            }\r\n            \r\n            if(source.items != null) {\r\n              retVal = retVal.concat(source.items);\r\n            }\r\n            else {\r\n              retVal = null; // if any are null just return null\r\n            }\r\n          }\r\n        });\r\n        \r\n        var catItems = [];\r\n        if(retVal) {\r\n          var vm = this;\r\n          angular.forEach(retVal, function(item, index) {\r\n            if(item.typeName == cat.name ||\r\n              vm.isItemForCat(cat, item, item.data)) {\r\n\r\n              item.typeName = name;\r\n              catItems.push(item);\r\n            }\r\n          });\r\n        }\r\n        \r\n        return catItems;\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    },\r\n    \r\n    isItemForCat: function(cat, item, rawData) {\r\n      \r\n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\r\n        return false;\r\n      }\r\n      else if(item.itemType == cat.name) {\r\n        return true;\r\n      }\r\n      else if(cat.limitExchange) {\r\n        \r\n        for(var i=0;i<cat.limitExchange.length;++i) {\r\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\r\n            \r\n            if(item.itemSource == 'plate') {\r\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\r\n                return cat.name == 'expedition plates';\r\n              }\r\n              else {\r\n                return cat.name == 'enhancement plates';\r\n              }\r\n            }\r\n            else if(item.itemSource == 'gem') {\r\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\r\n              if(gemTypes.length > 0) {\r\n                \r\n                if(gemTypes[0].Type == 1) {\r\n                  return cat.name == 'offensive gems';\r\n                }\r\n                else if(gemTypes[0].Type == 2) {\r\n                  return cat.name == 'increasing gems';\r\n                }\r\n                else {\r\n                  return false;\r\n                }\r\n              }\r\n            }\r\n            \r\n            return true;\r\n          }\r\n        }\r\n        \r\n        return false;\r\n      }\r\n      else if(item.itemSource in items) {\r\n        return items[item.itemSource].type == cat.sourceType;\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    },\r\n    \r\n    init: function(name, complete) {\r\n      var cat = this.byName(name);\r\n      if(cat && 'sourceType' in cat) {\r\n        angular.forEach(items, function(source, sourceName) {\r\n          if(source.type == cat.sourceType) {\r\n            source.init(function() {}, complete);\r\n          }\r\n        });\r\n      }\r\n    },\r\n    \r\n    setItemCategory: function (item, rawData) {\r\n      var vm = this;\r\n      \r\n      angular.forEach(this.categories, function(cat, index) {\r\n        if(vm.isItemForCat(cat, item, rawData)) {\r\n          item.typeName = cat.name;\r\n        }\r\n      });\r\n    },\r\n    \r\n    getItemsByCategory: function(items) {\r\n      var itemMap = {};\r\n      if(items != null) {\r\n        var types = {};\r\n        angular.forEach(items, function(item, index) {\r\n          if(item != null) {\r\n            if(!(item.typeName in types)) {\r\n              types[item.typeName] = [];\r\n            }\r\n            types[item.typeName].push(item);\r\n          }\r\n        });\r\n        \r\n        angular.forEach(this.categories, function(category, index) {\r\n\r\n          if(category.name in types) {\r\n            \r\n            var sorted = types[category.name].sort(function(item1, item2) {\r\n              if(category.name == 'talisman') {\r\n                \r\n                var enh1 = item1.enchantmentNum;\r\n                if(!enh1) enh1 = 0;\r\n                var enh2 = item2.enchantmentNum;\r\n                if(!enh2) enh1 = 0;\r\n                \r\n                if(enh1 != enh2) {\r\n                  return enh2 - enh1;\r\n                }\r\n              }\r\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\r\n                return item2.levelLimit - item1.levelLimit;\r\n              }\r\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\r\n                return item1.exchangeType - item2.exchangeType;\r\n              }\r\n              \r\n              return item1.name.localeCompare(item2.name);\r\n            });\r\n            itemMap[category.name] = sorted;\r\n          }\r\n          else {\r\n            itemMap[category.name] = [];\r\n          }\r\n        });\r\n        \r\n        angular.forEach(items, function(item, index) {\r\n          if(item != null && !(item.typeName in itemMap)) {\r\n            console.log('we dont know ' + item.typeName + ' anymore')\r\n            itemMap.typeError = true;\r\n          }\r\n        });\r\n      }\r\n      return itemMap;\r\n    },\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('itemFactory',\r\n['translations','dntData','hCodeValues','items',itemFactory]);\r\n\r\nfunction itemFactory(translations,dntData,hCodeValues,items) {\r\n  \r\n  return {\r\n    loadItems: loadItems,\r\n    initItem: initItem,\r\n    createItem: createItem,\r\n    getItemData: getItemData,\r\n    createBasicItem: createBasicItem,\r\n  };\r\n  \r\n  function createItem(itemSourceName, d, p, totalRatio) {\r\n    \r\n    // data and potential are used to initialise name and stats\r\n    // this is only done when needed\r\n    // they are then removed from the object\r\n    return {\r\n      data : d,\r\n      potential : p,\r\n      id: d.id,\r\n      totalRatio: totalRatio,\r\n      itemSource : itemSourceName,\r\n      levelLimit : d.LevelLimit,\r\n      needJobClass : d.NeedJobClass,\r\n      typeId : d.Type,\r\n      exchangeType: d.ExchangeType,\r\n      rank : hCodeValues.rankNames[d.Rank],\r\n      pid: null,\r\n      name : null,\r\n      stats : null,\r\n      potentialRatio : null,\r\n      typeName : null,\r\n      sparkId: null,\r\n    };\r\n  };\r\n  \r\n  function loadItems(itemType) {\r\n    \r\n    if(!dntData.isLoaded(itemType.mainDnt)) {\r\n      return null;\r\n    }\r\n    \r\n    if(!translations.isLoaded()) {\r\n      return null;\r\n    }\r\n    \r\n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\r\n      return null;\r\n    }\r\n    \r\n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\r\n      return null;\r\n    }\r\n    \r\n    var start = new Date().getTime();\r\n    \r\n    itemType.items = [];\r\n    var numRows = dntData.getNumRows(itemType.mainDnt);\r\n    for(var r=0;r<numRows;++r) {\r\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\r\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\r\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\r\n      \r\n      // skip certain types like pouches, res scrolls, etc\r\n      if(dType != 8 &&\r\n        dType != 29 &&\r\n        dType != 114 &&\r\n        dType != 79 &&\r\n        dType != 174 &&\r\n        dType != 130 &&\r\n        dType != 24 &&\r\n        dType != 182 &&\r\n        dType != 78 &&\r\n        dType != 20 &&\r\n        dType != 46 &&\r\n        dType != 9 &&\r\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\r\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\r\n        (!itemType.minRank || dRank >= itemType.minRank)) {\r\n\r\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\r\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\r\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\r\n          \r\n        // skip items with no data\r\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\r\n          var d = dntData.getRow(itemType.mainDnt, r);\r\n          \r\n          if(itemType.type == 'techs') {\r\n            var exists = false;\r\n            for(var i=0;i<itemType.items.length;++i) {\r\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\r\n                itemType.items[i].levelLimit == d.LevelLimit &&\r\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\r\n                  exists = true;\r\n                  break;\r\n                }\r\n            }\r\n            \r\n            if(exists) {\r\n              continue;\r\n            }\r\n          }\r\n          \r\n          var potentials = [];\r\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\r\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\r\n            \r\n            if(potentials.length == 0 && 'potentialDntEx' in itemType) {\r\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\r\n            }\r\n          }\r\n          \r\n          var totalRatio = 0;\r\n          angular.forEach(potentials, function(value, key) {\r\n            totalRatio += value.PotentialRatio;\r\n          });\r\n          \r\n          var numPotentials = potentials.length;\r\n          if(numPotentials == 0) {\r\n            itemType.items.push(this.createItem(itemType.name, d, null, totalRatio));\r\n          }\r\n          else {\r\n            for(var p=0;p<numPotentials;++p) {\r\n              \r\n              var found = false;\r\n              for(var q=0;q<p;++q) {\r\n                if(potentialsMatch(potentials[p], potentials[q])) {\r\n                  found = true;\r\n                  break;\r\n                }\r\n              }\r\n              \r\n              if(!found) {\r\n                for(var q=p+1;q<numPotentials;++q) {\r\n                  if(potentialsMatch(potentials[p], potentials[q])) {\r\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\r\n                  }\r\n                }\r\n                \r\n                itemType.items.push(this.createItem(itemType.name, d, potentials[p], totalRatio));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n            \r\n    var end = new Date().getTime();\r\n    var time = end - start;\r\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\r\n  }\r\n  \r\n  function potentialsMatch(p1, p2) {\r\n    \r\n    var i = 1;\r\n    var j = 1;\r\n    for(;;) {\r\n      var state1Col = 'State' + i;\r\n      var state2Col = 'State' + j;\r\n      \r\n      if(p1[state1Col] == 107) {\r\n        i++;\r\n        state1Col = 'State' + i;\r\n      }\r\n      if(p2[state2Col] == 107) {\r\n        j++;\r\n        state2Col = 'State' + j;\r\n      }\r\n      \r\n      if(!(state1Col in p1 || state2Col in p2)) {\r\n        return true;\r\n      }\r\n      \r\n      if(!(state1Col in p1)) {\r\n        return false;\r\n      }\r\n      if(!(state2Col in p2)) {\r\n        return false;\r\n      }\r\n      \r\n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\r\n        return true;\r\n      }\r\n      \r\n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\r\n        return true;\r\n      }\r\n      \r\n      if(p1[state1Col] != p2[state2Col]) {\r\n        return false;\r\n      }\r\n      \r\n      var val1Col = 'State' + i + 'Value';\r\n      var val2Col = 'State' + j + 'Value';\r\n      if(p1[val1Col] != p2[val2Col]) {\r\n        return false;\r\n      }\r\n      \r\n      ++i;\r\n    }\r\n  }\r\n  \r\n  function initItem(item) {\r\n    \r\n    if(item.data) {\r\n      var d = item.data;\r\n      var p = item.potential;\r\n  \r\n      if(item.name == null) {\r\n        item.name = translations.translate(d.NameID, d.NameIDParam);\r\n      }\r\n      \r\n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\r\n        item.sparkTypeId = d.TypeParam2;\r\n      }\r\n      \r\n      if(item.stats == null) {\r\n        var stats = hCodeValues.getStats(d);\r\n        if(p != null) {\r\n          var potentialStats = hCodeValues.getStats(p);\r\n          stats = hCodeValues.mergeStats(stats, potentialStats);\r\n        }\r\n        \r\n        item.stats = stats;\r\n      }\r\n      \r\n      if(d.SkillID && !item.skillId) {\r\n        item.skillId = d.SkillID;\r\n      }\r\n      \r\n      if(item.iconIndex == null) {\r\n        item.icon = d.IconImageIndex;\r\n        if(!item.icon && item.itemSource == 'title') {\r\n          item.icon = 12417;\r\n        }\r\n      }\r\n      \r\n      if(d.EnchantID && !item.enchantmentId) {\r\n        item.enchantmentId = d.EnchantID;\r\n      }\r\n      \r\n      if(p != null) {\r\n        item.pid = p.id;\r\n      \r\n        if(item.potentialRatio == null) {\r\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\r\n        }\r\n      }\r\n      \r\n      delete item.data;\r\n      delete item.potential;\r\n    }\r\n  }\r\n  \r\n  function getPotentialRatio(p, totalRatio) {\r\n    \r\n    if(p != null && p.PotentialRatio > 0 && totalRatio != 0) {\r\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\r\n      if(ratio != 100) {\r\n        return ratio + '%';\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  \r\n  function getItemData(item) {\r\n    \r\n    var fileName = null;\r\n    var itemType = items[item.itemSource];\r\n    \r\n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\r\n      fileName = item.fileName + '.optimised.lzjson';\r\n    }\r\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\r\n      fileName = item.fileName + '.lzjson';\r\n    }\r\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\r\n      fileName = itemType.mainDnt\r\n    }\r\n\r\n    if(fileName) {\r\n      var itemData = dntData.find(fileName, 'id', item.id);\r\n      if(itemData && itemData.length > 0) {\r\n        return itemData[0];\r\n      }\r\n    }\r\n    \r\n    return [];\r\n  }\r\n  \r\n  function createBasicItem(d) {\r\n    if(!d) {\r\n      return [];\r\n    }\r\n    return {\r\n      id: d.id,\r\n      name: translations.translate(d.NameID, d.NameIDParam),\r\n      rank: hCodeValues.rankNames[d.Rank],\r\n      icon: d.IconImageIndex,\r\n      levelLimit : d.LevelLimit,\r\n      fileName: d.fileName,\r\n    };\r\n  }\r\n}\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('items',\r\n['translations','dntData','itemColumnsToLoad',items]);\r\nfunction items(translations,dntData,itemColumnsToLoad) {\r\n  \r\n  var itemSources = {\r\n    \r\n      title : {\r\n        mainDnt: 'appellationtable.optimised.lzjson', \r\n        type: 'titles', \r\n        minLevel: 0, \r\n        minRank: 0 },\r\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\r\n      \r\n      tech: { \r\n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \r\n        potentialDnt: 'potentialtable.optimised.lzjson',\r\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\r\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\r\n        type: 'techs', \r\n        minLevel: 24,\r\n        minRank: 0},\r\n      \r\n      tman: { \r\n        mainDnt: 'itemtable_talisman.optimised.lzjson', \r\n        type: 'talisman', \r\n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\r\n        minLevel: 24,\r\n        minRank: 0 },\r\n      \r\n      gem: { \r\n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \r\n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\r\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\r\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \r\n        gemDnt: 'dragonjeweltable.optimised.lzjson',\r\n        type: 'gems',\r\n        minLevel: 24,\r\n        minRank: 3},\r\n      \r\n      plate: { \r\n        mainDnt : 'itemtable_glyph.optimised.lzjson', \r\n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\r\n        type: 'plates',\r\n        minLevel: 16,\r\n        minRank: 2 },\r\n\r\n      items: {\r\n        mainDnt: 'itemtable.optimised.lzjson', \r\n        partsDnt: 'partstable.optimised.lzjson', \r\n        weaponDnt: 'weapontable.optimised.lzjson', \r\n        enchantDnt: 'enchanttable.optimised.lzjson', \r\n        potentialDnt: 'potentialtable.optimised.lzjson',\r\n        setDnt: 'setitemtable.optimised.lzjson',\r\n        type: 'equipment',\r\n        minLevel: 80,\r\n        minRank: 3 },\r\n      eq: {\r\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \r\n        partsDnt: 'partstable_equipment.optimised.lzjson', \r\n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \r\n        enchantDnt: 'enchanttable.optimised.lzjson', \r\n        potentialDnt: 'potentialtable.optimised.lzjson',\r\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\r\n        setDnt: 'setitemtable.optimised.lzjson',\r\n        type: 'equipment',\r\n        minLevel: 24,\r\n        minRank: 3 },\r\n      rbeq: { \r\n        mainDnt: 'itemtable_reboot.optimised.lzjson', \r\n        partsDnt: 'partstable_reboot.optimised.lzjson', \r\n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \r\n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \r\n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\r\n        setDnt: 'setitemtable.optimised.lzjson',\r\n        type: 'equipment',\r\n        minLevel: 24,\r\n        minRank: 3 },\r\n      pvpeq: { \r\n        mainDnt: 'itemtable_pvp.optimised.lzjson',\r\n        partsDnt: 'partstable_pvp.optimised.lzjson', \r\n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \r\n        enchantDnt: 'enchanttable.optimised.lzjson', \r\n        setDnt: 'setitemtable.optimised.lzjson',\r\n        type: 'equipment',\r\n        minLevel: 24,\r\n        minRank: 3 },\r\n\r\n      c2016: { \r\n        mainDnt: 'itemtable_common2016.lzjson', \r\n        partsDnt: 'partstable_common2016.lzjson', \r\n        weaponDnt: 'weapontable_common2016.lzjson', \r\n        setDnt: 'setitemtable_cash.optimised.lzjson',\r\n        type: 'cash',\r\n        minLevel: 0,\r\n        minRank: 0 },\r\n      c2015: { \r\n        mainDnt: 'itemtable_common2015.optimised.lzjson', \r\n        partsDnt: 'partstable_common2015.optimised.lzjson', \r\n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \r\n        setDnt: 'setitemtable_cash.optimised.lzjson',\r\n        type: 'cash',\r\n        minLevel: 0,\r\n        minRank: 0 },\r\n      c2014: { \r\n        mainDnt: 'itemtable_common2014.optimised.lzjson', \r\n        partsDnt: 'partstable_common2014.optimised.lzjson', \r\n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \r\n        setDnt: 'setitemtable_cash.optimised.lzjson',\r\n        type: 'cash',\r\n        minLevel: 0,\r\n        minRank: 0 },\r\n      cash: { \r\n        mainDnt: 'itemtable_cash.optimised.lzjson', \r\n        partsDnt: 'partstable_cash.optimised.lzjson', \r\n        weaponDnt: 'weapontable_cash.optimised.lzjson', \r\n        setDnt: 'setitemtable_cash.optimised.lzjson',\r\n        type: 'cash',\r\n        minLevel: 0,\r\n        minRank: 0 },\r\n      event: {\r\n        mainDnt: 'itemtable_event.optimised.lzjson',\r\n        partsDnt: 'partstable_event.optimised.lzjson',\r\n        weaponDnt: 'weapontable_event.optimised.lzjson',\r\n        setDnt: 'setitemtable_cash.optimised.lzjson',\r\n        type: 'cash',\r\n        minLevel: 0,\r\n        minRank: 0 },\r\n      xtras: {\r\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\r\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\r\n        setDnt: 'setitemtable_cash.optimised.lzjson',\r\n        type: 'xtras',\r\n        minLevel: 0,\r\n        minRank: 0 },\r\n    };\r\n    \r\n    // now that the sources are set up add some methods on them for initialisation\r\n    // each source will store the items from that source for reuse by searches\r\n    angular.forEach(itemSources, function(itemSource, key) {\r\n      itemSource.name = key;\r\n      itemSource.loading = false;\r\n      itemSource.items = null;\r\n      itemSource.init = init; // decalared below\r\n      itemSource.reset = function() {\r\n        itemSource.items = null;\r\n        itemSource.loading = false;\r\n      };\r\n    });\r\n\r\n    return itemSources;\r\n  \r\n  \r\n    function init(progress, complete) {\r\n      var itemSource = this;\r\n      itemSource.loading = true;\r\n  \r\n      if(itemSource.items != null) {\r\n        complete();\r\n      }\r\n      else {\r\n        \r\n        translations.init(progress, function() { doComplete(itemSource, complete) });\r\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\r\n        if('potentialDnt' in itemSource) {\r\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\r\n        }\r\n        if('potentialDntEx' in itemSource) {\r\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\r\n        }\r\n        if('gemDnt' in itemSource) {\r\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\r\n        }\r\n  \r\n        doComplete(itemSource, complete);\r\n      }\r\n    }\r\n    \r\n    function doComplete(itemSource, complete) {\r\n      if(translations.isLoaded() && \r\n      dntData.isLoaded(itemSource.mainDnt) && \r\n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\r\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\r\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\r\n      ) {\r\n        complete();\r\n        itemSource.loading = false;\r\n      }\r\n    }\r\n  };\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\r\nfunction jobs(dntData, translations, itemColumnsToLoad) {\r\n  \r\n  var fileName ='jobtable.lzjson';\r\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\r\n  \r\n  return {\r\n    fileName : fileName,\r\n    allJobs : null,\r\n    \r\n    isLoaded : function() {\r\n      return dntData.isLoaded(fileName);\r\n    },\r\n    \r\n    hasStartedLoading: function() {\r\n      return dntData.hasStartedLoading(fileName);\r\n    },\r\n    \r\n    init : function(progress, complete) {\r\n      dntData.init(fileName, colsToLoad, progress, function() {\r\n        complete();\r\n        });\r\n    },\r\n\r\n    reset : function() {\r\n      this.allJobs = null;\r\n      dntData.reset(fileName);\r\n    },\r\n    \r\n    getFinalJobs : function () {\r\n      var jobs = [];\r\n      var alljobs = this.getAllJobs();\r\n      if(alljobs != null) {\r\n        var numRows = alljobs.length;\r\n        for(var r=0;r<numRows;++r) {\r\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\r\n            jobs.push(alljobs[r]);\r\n          }\r\n        }\r\n      }\r\n      \r\n      return jobs;\r\n    },\r\n    \r\n    getBaseJobs : function () {\r\n      var retVal=[];\r\n      var baseJobs = {};\r\n\r\n      var self = this;\r\n      angular.forEach(this.getFinalJobs(), function(job, key) {\r\n        baseJobs[self.getBaseJobName(job)] = job;\r\n      });\r\n\r\n      angular.forEach(baseJobs, function(job, jobName) {\r\n        retVal.push(jobName);\r\n      });\r\n\r\n      return retVal;\r\n    },\r\n    \r\n    getAllJobs : function () {\r\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\r\n        var jobs = [];\r\n        var data = dntData.getData(fileName);\r\n        var numRows = data.length;\r\n        for(var r=0;r<numRows;++r) {\r\n          jobs[jobs.length] = this.createJob(data[r]);\r\n        }\r\n        \r\n        this.allJobs = jobs;\r\n      }\r\n      return this.allJobs;\r\n    },\r\n    \r\n    getById: function(id) {\r\n      var data = this.getAllJobs();\r\n      \r\n      var numRows = data.length;\r\n      for(var r=0;r<numRows;++r) {\r\n        if(data[r].id == id) {\r\n          return data[r];\r\n        }\r\n      }\r\n    },\r\n    \r\n    createJob : function(d) {\r\n      var t = this;\r\n      return {\r\n          d : d,\r\n          id : d.id,\r\n          name : translations.translate(d.JobName),\r\n          isClassJob : function(c) {\r\n            return t.isClassJob(d, c);\r\n          }\r\n        };\r\n    },\r\n    \r\n    isClassJob : function (d, c) {\r\n      if(c == 0) return true;\r\n      if(d.id == c) {\r\n        return true;\r\n      }\r\n      \r\n      var parentJob = d.ParentJob;\r\n      \r\n      if(!parentJob) return false;\r\n      if(parentJob == c) return true;\r\n\r\n      var parentJobData = this.getById(parentJob);\r\n      if(parentJobData) {\r\n        return this.isClassJob(parentJobData.d, c);\r\n      }\r\n      \r\n      return false;\r\n    },\r\n    \r\n    getBaseJobName : function(job) {\r\n      if(this.isLoaded()) {\r\n        var alljobs = this.getAllJobs();\r\n        if(alljobs != null) {\r\n          var numRows = alljobs.length;\r\n          for(var r=0;r<numRows;++r) {\r\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\r\n              return alljobs[r].d.EnglishName;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      return null;\r\n    },\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\r\n\r\nfunction onlineService($window, $q, hCodeValues) {\r\n  console.log('setup online service');\r\n  \r\n  var service = {\r\n    login: login,\r\n    getUser: function() {\r\n      return firebase.auth().currentUser;\r\n    },\r\n    signOut: signOut,\r\n    deleteAccount: deleteAccount,\r\n    \r\n    getUserBuilds: getUserBuilds,\r\n    deleteBuild: deleteBuild,\r\n    saveBuild: saveBuild,\r\n    getBuild: getBuild,\r\n    getClassBuilds: getClassBuilds,\r\n    \r\n    getProfile: getProfile,\r\n    saveProfile: saveProfile,\r\n  };\r\n  \r\n  init();\r\n  \r\n  return service;\r\n  \r\n  function init() {\r\n    console.log('init');\r\n    firebase.initializeApp({\r\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\r\n      authDomain: \"dngearsim.firebaseapp.com\",\r\n      databaseURL: \"https://dngearsim.firebaseio.com\",\r\n      storageBucket: \"dngearsim.appspot.com\",\r\n    });\r\n  }\r\n  \r\n  function login() {\r\n    return $q(function(resolve, reject) {\r\n      var auth = firebase.auth();\r\n        \r\n      auth.onAuthStateChanged(function(user) {\r\n        if(user == null) {\r\n          console.log('redirecting');\r\n          $window.location.href = 'login.html';\r\n        }\r\n        else {\r\n          console.log('logged in');\r\n          resolve(user);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  function getProfile(uid) {\r\n    console.log('get profile');\r\n    return $q(function(resolve, reject) {\r\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\r\n        if(storedProfile) {\r\n          resolve(storedProfile.val());\r\n        }\r\n        else {\r\n          resolve({});\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  function getBuild(uid, buildName) {\r\n    console.log('get build');\r\n    return $q(function(resolve, reject) {\r\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\r\n        if(storedProfile) {\r\n          resolve(decompressBuild(storedProfile.val()));\r\n        }\r\n        else {\r\n          resolve({});\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  function saveProfile(profile) {\r\n    return $q(function(resolve, reject) {\r\n      var user = service.getUser();\r\n      if(user) {\r\n        profile = angular.copy(profile);\r\n        deleteNullProperties(profile, true);\r\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\r\n      }\r\n    });\r\n  }\r\n  \r\n  function getUserBuilds(uid) {\r\n    console.log('get builds');\r\n    return $q(function(resolve, reject) {\r\n      console.log('getting builds');\r\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\r\n        if(storedBuilds) {\r\n          var retVal = {};\r\n          var val = storedBuilds.val();\r\n          for(var buildName in val) {\r\n            retVal[buildName] = decompressBuild(val[buildName]);\r\n          }\r\n          resolve(retVal);\r\n        }\r\n        else {\r\n          resolve({});\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  function getClassBuilds(job) {\r\n    console.log('get class builds');\r\n    return $q(function(resolve, reject) {\r\n      console.log('getting builds', job.id);\r\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\r\n        console.log('ok');\r\n        if(jobBuilds) {\r\n          resolve(jobBuilds.val());\r\n        }\r\n        else {\r\n          resolve({});\r\n        }\r\n      });\r\n    });\r\n  }\r\n  \r\n  function compressBuild(build) {\r\n    \r\n    if(build.items) {\r\n      _.each(build.items, function(item) {\r\n        delete item.fullStats;\r\n      });\r\n    }\r\n    \r\n    var stringifiedData = JSON.stringify(build);\r\n    return LZString.compressToUTF16(stringifiedData);\r\n  }\r\n  \r\n  function decompressBuild(compressedBuild) {\r\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\r\n    var build = JSON.parse(stringifiedData);\r\n    \r\n    if(build.items) {\r\n      _.each(build.items, function(item) {\r\n        item.fullStats = item.stats;\r\n        \r\n        if(item.enchantmentStats != null && item.enchantmentStats.length > 0) {\r\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\r\n        }\r\n        \r\n        if(item.sparkStats != null && item.sparkStats.length > 0) {\r\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\r\n        }\r\n      });\r\n    }\r\n    \r\n    return build;\r\n  }\r\n  \r\n  function saveBuild(buildName, build) {\r\n    var user = service.getUser();\r\n    var actions = [];\r\n    if(user) {\r\n      build = angular.copy(build);\r\n      deleteNullProperties(build, true);\r\n      // console.log('saving', build);\r\n      actions.push(\r\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\r\n      );\r\n      \r\n      if(build.job && build.job.id) {\r\n        console.log('saving build');\r\n          \r\n        var data = {};\r\n        if(build.playerLevel) {\r\n          data.lev = build.playerLevel;\r\n        }\r\n        if(build.region) {\r\n          data.region = build.region;\r\n        }\r\n        if(build.guild) {\r\n          data.guild = build.guild;\r\n        }\r\n        if(build.about) {\r\n          data.about = build.about;\r\n        }\r\n        \r\n        deleteNullProperties(data, true);\r\n          \r\n        actions.push(\r\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\r\n        );\r\n      }\r\n    }\r\n    return $q.all(actions);\r\n  }\r\n  \r\n  function deleteNullProperties(test, recurse) {\r\n    for (var i in test) {\r\n        if (test[i] === undefined) {\r\n            delete test[i];\r\n        } else if (recurse && typeof test[i] === 'object') {\r\n            deleteNullProperties(test[i], recurse);\r\n        }\r\n    }\r\n  }\r\n  \r\n  function signOut() {\r\n    var auth = firebase.auth();\r\n    return $q(function(resolve, reject) {\r\n      auth.signOut().then(function() {\r\n        resolve();\r\n      }, function(error) {\r\n        reject();\r\n      });\r\n    });\r\n  }\r\n  \r\n  function deleteAccount(builds) {\r\n    var auth = firebase.auth();\r\n    var user = service.getUser();\r\n    \r\n    return $q(function(resolve, reject) {\r\n      \r\n      var pList = [\r\n        firebase.database().ref('builds/' + user.uid).remove(),\r\n        firebase.database().ref('profile/' + user.uid).remove(),\r\n        firebase.database().ref('private/' + user.uid).remove()];\r\n        \r\n      var jobIds = [];\r\n      for(var buildName in builds) {\r\n        if(builds[buildName].job) {\r\n          jobIds.push(builds[buildName].job.id)\r\n        }\r\n      }\r\n      \r\n      jobIds = _.uniq(jobIds);\r\n      _.each(jobIds, function(id) {\r\n        pList.push(\r\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\r\n        )\r\n      });\r\n        \r\n      $q.all(pList).then(function() {\r\n        console.log('deleted data');\r\n        user.delete().then(function() {\r\n          console.log('deleted user');\r\n          auth.signOut().then(function() {\r\n            console.log('signed out');\r\n            resolve();\r\n          }, function(error) {\r\n            reject();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n  \r\n  function deleteBuild(buildName, build) {\r\n    \r\n    var pList = [];\r\n    var user = service.getUser();\r\n    if(user) {\r\n      pList.push(\r\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\r\n      \r\n      if(build.job) {\r\n        pList.push(\r\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\r\n      }\r\n    }\r\n    \r\n    return $q.all(pList);\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\r\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\r\n\r\n  return {\r\n    stepDefs: {\r\n      exchangeStep: {\r\n        name: 'type',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          var exchanges = [];\r\n          \r\n          for(var e=0;e<category.limitExchange.length;++e) {\r\n            var exId = category.limitExchange[e];\r\n            \r\n            var numExchange = 0;\r\n            if(build.items) {\r\n              for(var i=0;i<build.items.length;++i) {\r\n                if(build.items[i].exchangeType == exId) {\r\n                  numExchange++;\r\n                }\r\n              }\r\n            }\r\n            \r\n            if(numExchange >= category.maxExchange) {\r\n              continue;\r\n            }\r\n            \r\n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\r\n            var exName = '';\r\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\r\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\r\n            }\r\n            exchanges.push({id: exId, name: exName.toLowerCase()});\r\n          }\r\n          \r\n          return exchanges;\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.exchangeType == id;\r\n        }\r\n      },\r\n      accExchangeStep: {\r\n        name: 'type',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          var exchanges = [];\r\n          \r\n          for(var e=0;e<category.limitExchange.length;++e) {\r\n            var exId = category.limitExchange[e];\r\n            \r\n            var numExchange = 0;\r\n            for(var i=0;i<build.items.length;++i) {\r\n              if(build.items[i] && build.items[i].exchangeType == exId) {\r\n                numExchange++;\r\n              }\r\n            }\r\n            \r\n            if(exId == 10 || exId == 25) {\r\n              if(numExchange >= 2) {\r\n                continue;\r\n              }\r\n            }\r\n            else {\r\n              if(numExchange >= 1) {\r\n                continue;\r\n              }\r\n            }\r\n            \r\n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\r\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\r\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\r\n              \r\n              exchanges.push({id: exId, name: exName.toLowerCase()});\r\n            }\r\n          }\r\n          \r\n          return exchanges;\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.exchangeType == id;\r\n        }\r\n      },\r\n      sixtyLevelStep: {\r\n        name: 'level',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 93, name: 'level 93' },\r\n          { id: 90, name: 'level 90' },\r\n          { id: 80, name: 'level 80' },\r\n          { id: 70, name: 'level 70' }, \r\n          { id: 60, name: 'level 60' }, \r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.levelLimit == id;\r\n        }\r\n      },\r\n      allLevelStep: {\r\n        name: 'level',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 93, name: 'level 93' },\r\n          { id: 90, name: 'level 90' },\r\n          { id: 80, name: 'level 80' },\r\n          { id: 70, name: 'level 70' }, \r\n          { id: 60, name: 'level 60' }, \r\n          { id: 50, name: 'level 50' }, \r\n          { id: 40, name: 'level 40' }, \r\n          { id: 32, name: 'level 32' }, \r\n          { id: 24, name: 'level 24' }, \r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.levelLimit == id;\r\n        }\r\n      },\r\n      cashRankStep: {\r\n        name: 'rank',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 4, name: 'unique' },\r\n          { id: 3, name: 'epic' },\r\n          { id: 2, name: 'rare' },\r\n          { id: 1, name: 'magic' },\r\n          { id: 0, name: 'normal' },\r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.rank.id == id;\r\n        }\r\n      },\r\n      techRankStep: {\r\n        name: 'rank',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 4, name: 'unique' },\r\n          { id: 3, name: 'epic' },\r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.rank.id == id;\r\n        }\r\n      },\r\n      talismanRankStep: {\r\n        name: 'rank',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 2, name: 'rare' },\r\n          { id: 999, name: 'quality high grade' },\r\n          { id: 1, name: 'magic' },\r\n          { id: 0, name: 'normal' },\r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          itemFactory.initItem(item);\r\n          if(item.name) {\r\n            // todo: change this to use the name id\r\n            var index = Math.max(\r\n              item.name.indexOf('Quality'),\r\n              item.name.indexOf('High Grade'));\r\n              \r\n            if(id == 999) {\r\n              return index == 0;\r\n            }\r\n            else {\r\n              return item.rank.id == id && index != 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      },\r\n      gemRankStep: {\r\n        name: 'rank',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 5, name: 'legendary' },\r\n          { id: 999, name: 'quality high grade epic' },\r\n          { id: 3, name: 'epic' },\r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          itemFactory.initItem(item);\r\n          if(item.name) {\r\n            var index = Math.max(\r\n              item.name.indexOf('Quality'),\r\n              item.name.indexOf('High Grade'));\r\n            if(id == 999) {\r\n              return item.rank.id == 3 && index == 0;\r\n            }\r\n            else {\r\n              return item.rank.id == id && index != 0;\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      },\r\n      otherRankStep: {\r\n        name: 'rank',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 3, name: 'epic' },\r\n          { id: 2, name: 'rare' },\r\n          { id: 1, name: 'normal' },\r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.rank.id == id;\r\n        }\r\n      },\r\n      equipRankStep: {\r\n        name: 'rank',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 5, name: 'legendary' },\r\n          { id: 4, name: 'unique' },\r\n          { id: 3, name: 'epic' },\r\n          ];\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.rank.id == id;\r\n        }\r\n      },\r\n      enhanceTalismanStep: {\r\n        name: 'slot',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          return [\r\n          { id: 100, name: '+100% slot' },\r\n          { id: 75, name: '+75% slot' },\r\n          { id: 25, name: '+25% slot' },\r\n          { id: 0, name: '+0% slot' },\r\n          ];\r\n        },\r\n        alterItem: function(id, item) {\r\n          item.enchantmentNum = id;\r\n        }\r\n      },\r\n      titleStep: {\r\n        name: 'select',\r\n        getOptions: function(category, build, datas) {\r\n          var allTitles = findData(category, build, datas, 9999);\r\n          var usefulTitles = [];\r\n          for(var i=0;i<allTitles.length;++i) {\r\n            switch(allTitles[i].id) {\r\n              case 1975: // Manticore Expert\r\n              case 1973: // Returned\r\n              case 1008: // Dark Knight\r\n              // case 339: // Cow Wrangler\r\n              case 230: // Miraculous\r\n              case 279: // Provoking\r\n              // case 1280: // Dragon Tamer\r\n              case 1313: // Jakard's Demise\r\n              case 2032: // Sharing Goddess's Grief\r\n                usefulTitles.push(allTitles[i]);\r\n            }\r\n          }\r\n          \r\n          return usefulTitles;\r\n        },\r\n        hasOptions: function(category, build, datas) {\r\n          return true;\r\n        },\r\n        isItemStep: true,\r\n      },\r\n      enhanceStep: {\r\n        name: 'enhance',\r\n        getOptions: function(category, build, datas) {\r\n          \r\n          var item = getItem(datas);\r\n          if(item && item.enchantmentId) {\r\n            return [\r\n            { id: 14, name: 'enhance to +14' },\r\n            { id: 13, name: 'enhance to +13' },\r\n            { id: 12, name: 'enhance to +12' },\r\n            { id: 11, name: 'enhance to +11' },\r\n            { id: 10, name: 'enhance to +10' },\r\n            { id: 9, name: 'enhance to +9' },\r\n            { id: 8, name: 'enhance to +8' },\r\n            { id: 7, name: 'enhance to +7' },\r\n            { id: 6, name: 'enhance to +6' },\r\n            { id: 5, name: 'enhance to +5' },\r\n            { id: 4, name: 'enhance to +4' },\r\n            { id: 3, name: 'enhance to +3' },\r\n            { id: 2, name: 'enhance to +2' },\r\n            { id: 1, name: 'enhance to +1' },\r\n            { id: 0, name: 'not enhanced' },\r\n            ]\r\n          }\r\n          else {\r\n            return [{ id: 0, name: 'not enhanced' }];\r\n          }\r\n        },\r\n        alterItem: function(id, item) {\r\n          item.enchantmentNum = id;\r\n        }\r\n      },\r\n      itemStep: {\r\n        name: 'select',\r\n        getOptions: function(category, build, datas) {\r\n          return findData(category, build, datas);\r\n        },\r\n        isItemStep: true,\r\n      },\r\n      techSkillStep: {\r\n        name: 'skill',\r\n        getOptions: function(category, build, datas) {\r\n          var items = findData(category, build, datas, 1);\r\n          \r\n          // eventually show all the skills\r\n          // but for now\r\n          if(items.length > 0) {\r\n            return [{id: items[0].skillId, name: items[0].skillId}];\r\n          }\r\n          else {\r\n            return [];\r\n          }\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.skillId == id;\r\n        }\r\n      },\r\n      itemNameStep: {\r\n        name: 'item',\r\n        getOptions: function(category, build, datas) {\r\n          var items = findData(category, build, datas);\r\n          var itemNames = {};\r\n          var itemNamesList = [];\r\n          for(var i=0;i<items.length;++i) {\r\n            var name = items[i].name;\r\n            if(!(name in itemNames)) {\r\n              itemNames[name] = true;\r\n              itemNamesList.push({\r\n                id: name,\r\n                name: name,\r\n              });\r\n            }\r\n          }\r\n          \r\n          return itemNamesList;\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.name == id;\r\n        },\r\n        isItemStep: true,\r\n      },\r\n      distinctItemNameStep: {\r\n        name: 'item',\r\n        getOptions: function(category, build, datas) {\r\n          var items = findData(category, build, datas);\r\n          var itemNames = {};\r\n          var itemNamesList = [];\r\n          \r\n          for(var i=0;i<build.items.length;++i) {\r\n            var item = build.items[i];\r\n            itemNames[item.name] = true;\r\n          }\r\n          \r\n          for(var i=0;i<items.length;++i) {\r\n            var name = items[i].name;\r\n            if(!(name in itemNames)) {\r\n              itemNames[name] = true;\r\n              itemNamesList.push({\r\n                id: name,\r\n                name: name,\r\n              });\r\n            }\r\n          }\r\n          \r\n          return itemNamesList;\r\n        },\r\n        matchesItem: function(id, item) {\r\n          return item.name == id;\r\n        },\r\n        isItemStep: true,\r\n      },\r\n      numStatsStep: {\r\n        name: 'Num Stats',\r\n        getOptions: function(category, build, datas) {\r\n          var items = findData(category, build, datas);\r\n          var numStats = {};\r\n          \r\n          for(var i=0;i<items.length;++i) {\r\n            var len = 0;\r\n            for(var j=0;j<items[i].stats.length;++j) {\r\n              var stat = hCodeValues.stats[items[i].stats[j].id];\r\n              if(stat && !stat.hide) {\r\n                len++;\r\n              }\r\n            }\r\n            numStats[len + 'x stats'] = len;\r\n          }\r\n          \r\n          var retVal = [];\r\n          for(var val in numStats) {\r\n            retVal.push({\r\n              id: numStats[val],\r\n              name: val,\r\n            });\r\n          }\r\n          \r\n          retVal = retVal.sort(function(a, b) {\r\n              return a.id - b.id;\r\n            });\r\n          \r\n          return retVal;\r\n        },\r\n        matchesItem: function(id, item) {\r\n          var len = 0;\r\n          for(var j=0;j<item.stats.length;++j) {\r\n            var stat = hCodeValues.stats[item.stats[j].id];\r\n            if(stat && !stat.hide) {\r\n              len++;\r\n            }\r\n          }\r\n            \r\n          return len == id;\r\n        },\r\n        isItemStep: true,\r\n      },\r\n      customStep: {\r\n        name: 'misc',\r\n        getOptions: function(category, build, datas) {\r\n          return hCodeValues.customItems;\r\n        },\r\n        isItemStep: true,\r\n      },\r\n    },\r\n    // end of step defs\r\n    \r\n    categorySteps: {\r\n      titles: ['titleStep'],\r\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\r\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\r\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\r\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\r\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\r\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\r\n      'expedition plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\r\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\r\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\r\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\r\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\r\n      custom: ['customStep'],\r\n    },\r\n    getOptions: function(category, build, datas) {\r\n      if(category.name in this.categorySteps) {\r\n        var stepName = this.getStepName(category, datas.length);\r\n        return this.stepDefs[stepName].getOptions(category, build, datas);\r\n      }\r\n      else {\r\n        return [];\r\n      }\r\n    },\r\n    hasOptions: function(category, build, datas) {\r\n      if(category.name in this.categorySteps) {\r\n        var stepName = this.getStepName(category, datas.length);\r\n        if(this.stepDefs[stepName].hasOptions) {\r\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\r\n        }\r\n        else {\r\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    },\r\n    isValidStepNumber: function(category, stepNumber) {\r\n      return this.categorySteps[category.name].length > stepNumber;\r\n    },\r\n    createData: function(value, category, stepNumber) {\r\n      var stepName = this.getStepName(category, stepNumber);\r\n      var def = this.stepDefs[stepName];\r\n      \r\n      return {\r\n        step: stepName,\r\n        value: value,\r\n        def: def,\r\n        matchesItem: function(item) {\r\n          return def.matchesItem(value.id, item);\r\n        }\r\n      };\r\n    },\r\n    getItem: getItem,\r\n    getStepName: function(category, stepNumber) {\r\n      return this.categorySteps[category.name][stepNumber];\r\n    }\r\n  }\r\n  \r\n  function getItem(datas) {\r\n    var item = null;\r\n    for(var d=0;d<datas.length;++d) {\r\n      if(datas[d].def.isItemStep) {\r\n        item = datas[d].value;\r\n      }\r\n    }\r\n    \r\n    for(var d=0;d<datas.length;++d) {\r\n      if(datas[d].def.alterItem) {\r\n        datas[d].def.alterItem(datas[d].value.id, item);\r\n      }\r\n    }\r\n    \r\n    return item;\r\n  }\r\n  \r\n  function findData(category, build, datas, maxItems) {\r\n    if(!maxItems) {\r\n      maxItems = 9999;\r\n    }\r\n    \r\n    var allItems = itemCategory.getItems(category.name);\r\n    var retVal = [];\r\n    // console.log('looking at ' + allItems.length + ' items');\r\n    var numItems = allItems.length;\r\n    \r\n    for(var i=0;i<numItems;++i) {\r\n      \r\n      var item = allItems[i];\r\n      \r\n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\r\n        continue;\r\n      }\r\n      itemFactory.initItem(item);\r\n      \r\n      var addItem = true;\r\n      for(var d=0;d<datas.length;++d) {\r\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\r\n          addItem = false;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      if(addItem) {\r\n        retVal.push(item);\r\n      }\r\n      \r\n      if(retVal.length >= maxItems) {\r\n        break;\r\n      }\r\n    }\r\n    \r\n    retVal = retVal.sort(function(item1, item2) {\r\n      return item1.name.localeCompare(item2.name);\r\n    });\r\n    \r\n    // console.log('found ' + retVal.length + ' items');\r\n    return retVal;\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\r\nfunction region(translations,dntReset,dntData,$route) {\r\n  \r\n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\r\n  var hostedFiles =[\r\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\r\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\r\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\r\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\r\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\r\n      {region: 'ina', name: 'indonesian files from gemscool', url : 'https://inafiles-da491.firebaseapp.com'},\r\n    ];\r\n  \r\n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\r\n  var dntLocation = hostedFiles[0];\r\n  if(dntLocationRegion != null) {\r\n    angular.forEach(hostedFiles, function(hostedFile, index) {\r\n      if(hostedFile.region == dntLocationRegion) {\r\n        dntLocation = hostedFile;\r\n      }\r\n    });\r\n  }\r\n\r\n  var lastTFile = localStorage.getItem('UIStrings_file');\r\n  var tlocation = null;\r\n  if(lastTFile != null) {\r\n    angular.forEach(hostedFiles, function(hostedFile, index) {\r\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\r\n        tlocation = hostedFile;\r\n        return;\r\n      }\r\n    });\r\n  }\r\n  \r\n  if(tlocation == null) {\r\n    tlocation = dntLocation;\r\n  }\r\n\r\n  return {\r\n    hostedFiles : hostedFiles,\r\n    alternativeFiles : alternativeFiles,\r\n    dntLocation : dntLocation,\r\n    tlocation : tlocation,\r\n    \r\n    setCustomUrl: function(url) {\r\n      // console.log('setting custom location');\r\n      this.alternativeFiles.url = url;\r\n\r\n      var newFiles = [];\r\n      angular.forEach(hostedFiles, function(hostedFile, index) {\r\n        if(hostedFile.region != alternativeFiles.region) {\r\n          newFiles.push(hostedFile);\r\n        }\r\n      });\r\n  \r\n      newFiles.push(alternativeFiles);\r\n      hostedFiles = newFiles;\r\n      this.hostedFiles = newFiles;\r\n    },\r\n    \r\n    setLocationByName: function(locationName) {\r\n      var newLocation = null;\r\n      \r\n      angular.forEach(hostedFiles, function(hostedFile, index) {\r\n        if(hostedFile.region == locationName) {\r\n          newLocation = hostedFile;\r\n        }\r\n      });\r\n        \r\n      this.setLocation(newLocation);\r\n    },\r\n    \r\n    setLocation: function(location) {\r\n      if(location && location != this.dntLocation) {\r\n        this.dntLocation = location;\r\n        dntReset();\r\n        localStorage.setItem('lastDNTRegion', location.region);\r\n        dntReset();\r\n        $route.reload();\r\n      }\r\n\r\n      if(this.tlocation == null) {\r\n        this.setTLocation(location);\r\n      }\r\n      \r\n      this.init();\r\n      \r\n      // $route.reload();\r\n    },\r\n    \r\n    setTLocation: function(location) {\r\n      \r\n      if(location != this.tlocation) {\r\n        \r\n        angular.forEach(this.translationResettingEvents, function(event, index) {\r\n          event();\r\n        });\r\n        \r\n        this.tlocation = location;\r\n        sessionStorage.removeItem('UIStrings');\r\n        localStorage.removeItem('UIStrings_file');\r\n        dntReset();\r\n        translations.reset();\r\n        translations.location = this.tlocation.url;\r\n        translations.init(function() {}, function() { $route.reload(); });\r\n        // $route.reload();\r\n      }\r\n    },\r\n    \r\n    init: function() {\r\n      if(this.tlocation != null) {\r\n        translations.location = this.tlocation.url;\r\n      }\r\n      dntData.setLocation(this.dntLocation);\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\r\nfunction saveHelper(itemCategory) {\r\n  return {\r\n    saveItem: function(groupName, item) {\r\n      var groups = this.getSavedItems();\r\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\r\n        \r\n        groups[groupName].items.push(item);\r\n        groups[groupName].lastUpdate = (new Date()).getTime();\r\n        this.updatedSavedItems(groupName, groups[groupName].items);\r\n      }\r\n      else {\r\n        this.updatedSavedItems(groupName, [item]);\r\n      }\r\n      \r\n      localStorage.setItem('lastSavedGroup', groupName);\r\n    },\r\n    \r\n    saveBuildSelection : function(buildName, builds) {\r\n      console.log('saving selection');\r\n      localStorage.setItem('currentGroup', buildName);\r\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\r\n        console.log('also job');\r\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\r\n      }\r\n    },\r\n    \r\n    importGroup: function(groupName, updatedItems) {\r\n      var items = this.getSavedItems();\r\n      groupName = this.getUniqueGroupName(groupName, items);\r\n      this.updatedSavedItems(groupName, updatedItems);\r\n      return groupName;\r\n    },\r\n    \r\n    getUniqueGroupName: function(groupName, existingGroups) {\r\n      var groupNameIndex = 0;\r\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\r\n        var startIndex = groupName.lastIndexOf('(');\r\n        if(startIndex > 0) {\r\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\r\n          if(foundIndex > 0) {\r\n            groupNameIndex = foundIndex + 1;\r\n            groupName = groupName.substr(0, startIndex - 1);\r\n          }\r\n        }\r\n      }\r\n      \r\n      var originalName = groupName;\r\n      for(;;) {\r\n        var groupName = originalName;\r\n        if(groupNameIndex > 0) {\r\n          groupName = originalName + ' (' + groupNameIndex + ')';\r\n        }\r\n        \r\n        if(groupName in existingGroups) {\r\n          groupNameIndex++;\r\n        }\r\n        else {\r\n          break;\r\n        }\r\n      }\r\n      \r\n      return groupName;\r\n    },\r\n    \r\n    updatedSavedItems: function(groupName, updatedItems) {\r\n      var items = this.getSavedItems();\r\n      if(groupName in items) {\r\n        if(updatedItems.length == 0) {\r\n          delete items[groupName];\r\n          // console.log('no items to update');\r\n        }\r\n        else {\r\n          items[groupName].items = updatedItems;\r\n          items[groupName].lastUpdate = (new Date()).getTime();\r\n          localStorage.setItem('lastSavedGroup', groupName);\r\n          // console.log('set group');\r\n        }\r\n      }\r\n      else {\r\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\r\n        localStorage.setItem('lastSavedGroup', groupName);\r\n          // console.log('created group');\r\n      }\r\n      \r\n      var stringifiedData = JSON.stringify(items);\r\n      // console.log('saving: ' + stringifiedData);\r\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\r\n    },\r\n    \r\n    renameSavedGroup: function(\r\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\r\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\r\n        \r\n      var savedItems = this.getSavedItems();\r\n      \r\n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\r\n        // console.log('not changing name');\r\n        newGroupName = oldGroupName;\r\n      }\r\n      else if(oldGroupName in savedItems) {\r\n        var group = savedItems[oldGroupName];\r\n        savedItems[newGroupName] = group;\r\n        delete savedItems[oldGroupName];\r\n      }\r\n      \r\n      savedItems[newGroupName].enemyLevel = enemyLevel;\r\n      savedItems[newGroupName].playerLevel = playerLevel;\r\n      savedItems[newGroupName].heroLevel = heroLevel;\r\n      savedItems[newGroupName].job = job;\r\n      savedItems[newGroupName].damageType = damageType;\r\n      savedItems[newGroupName].element = element;\r\n      savedItems[newGroupName].secondaryElement = secondaryElement;\r\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\r\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\r\n      savedItems[newGroupName].conversions = conversions;\r\n      savedItems[newGroupName].baseStats = baseStats;\r\n      savedItems[newGroupName].heroStats = heroStats;\r\n      \r\n      var stringifiedData = JSON.stringify(savedItems);\r\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\r\n    },\r\n    \r\n    getSavedItems: function() {\r\n      try {\r\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\r\n        var savedItems = JSON.parse(stringifiedData);\r\n        return savedItems;\r\n      }\r\n      catch(ex) {\r\n      }\r\n      \r\n      return {};\r\n    },\r\n    \r\n    getCustomItems: function() {\r\n      try {\r\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\r\n        var savedItems = JSON.parse(stringifiedData);\r\n        return savedItems;\r\n      }\r\n      catch(ex) {\r\n      }\r\n      \r\n      return [];\r\n    },\r\n    \r\n    saveCustomItems: function(items) {\r\n      var stringifiedData = JSON.stringify(items);\r\n      // console.log('saving: ' + stringifiedData);\r\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\r\n    },\r\n    \r\n    getHiddenTypes: function() {\r\n      try {\r\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\r\n        var savedItems = JSON.parse(stringifiedData);\r\n        return savedItems;\r\n      }\r\n      catch(ex) {\r\n      }\r\n      \r\n      return {};\r\n    },\r\n    \r\n    saveHiddenTypes: function(items) {\r\n      var stringifiedData = JSON.stringify(items);\r\n      // console.log('saving: ' + stringifiedData);\r\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\r\n    }\r\n  };\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\r\nfunction statHelper(hCodeValues) {\r\n\r\n  return {\r\n    \r\n    getSetStats: function(groupItems) {\r\n      var stats = [];\r\n      var sets = {};\r\n      \r\n      angular.forEach(groupItems, function(value, key) {\r\n        if(value != null && value.setStats != null) {\r\n          if(value.setId in sets) {\r\n            sets[value.setId].numItems++;\r\n          }\r\n          else {\r\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\r\n          }\r\n        }\r\n      });\r\n      \r\n      angular.forEach(sets, function(value, key) {\r\n        var setStats = [];\r\n        angular.forEach(value.stats, function(stat, index) {\r\n          if(stat.needSetNum <= value.numItems) {\r\n            stats.push(stat);\r\n          }\r\n        });\r\n      });\r\n      \r\n      return hCodeValues.mergeStats(stats);\r\n    },\r\n    \r\n    getCombinedStats: function(groupItems) {\r\n      var stats = [];\r\n      \r\n      angular.forEach(groupItems, function(value, key) {\r\n        if(value != null) {\r\n          \r\n          if(value.fullStats != null) {\r\n            stats = stats.concat(value.fullStats);\r\n          }\r\n          else {\r\n            stats = stats.concat(value.stats);\r\n          }\r\n        }\r\n      });\r\n      \r\n      return hCodeValues.mergeStats(stats);\r\n    },\r\n    \r\n    getCalculatedStats: function(group, combinedStats) {\r\n      \r\n      var retVal = [];\r\n      var statLookup = {};\r\n      if(!group.conversions || !group.enemyStatCaps) {\r\n        return [];\r\n      }\r\n      \r\n      angular.forEach(combinedStats, function(stat, index) {\r\n        statLookup[stat.id] = stat;\r\n      });\r\n      \r\n      function getPc(stat) {\r\n        var statDef = hCodeValues.stats[stat.id];\r\n        if(statLookup[statDef.pc]) {\r\n          return Number(statLookup[statDef.pc].max);\r\n        }\r\n        else {\r\n          return 0;\r\n        }\r\n      }\r\n      \r\n      function getSkillPc(stat) {\r\n        var statDef = hCodeValues.stats[stat.id];\r\n        if(statLookup[statDef.skPc]) {\r\n          return Number(statLookup[statDef.skPc].max);\r\n        }\r\n        else {\r\n          return 0;\r\n        }\r\n      }\r\n      \r\n      function applyPc(stat) {\r\n        stat.max = Math.floor(\r\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\r\n          );\r\n      }\r\n      \r\n      function dupeStat(id) {\r\n        var stat = statLookup[id];\r\n        if(stat) {\r\n          return {id: id, max: Number(stat.max), pc: stat.pc};\r\n        }\r\n        else {\r\n          return {id: id, max: 0, pc: 0};\r\n        }\r\n      }\r\n      \r\n      function addStat(stat) {\r\n        if(stat.max > 0) {\r\n          retVal.push(stat);\r\n        }\r\n      }\r\n      \r\n      // base stats\r\n      var str = dupeStat(0);\r\n      applyPc(str);\r\n      addStat(str);\r\n      \r\n      var agi = dupeStat(1);\r\n      applyPc(agi);\r\n      addStat(agi);\r\n      \r\n      var int = dupeStat(2);\r\n      applyPc(int);\r\n      addStat(int);\r\n\r\n      var vit = dupeStat(3);\r\n      applyPc(vit);\r\n      addStat(vit);\r\n\r\n      // add vit to hp\r\n      var hp = dupeStat(25);\r\n      hp.max += (vit.max * Number(group.conversions.HP));\r\n      applyPc(hp);\r\n      addStat(hp);\r\n      \r\n      // defs\r\n      var def = dupeStat(8);\r\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\r\n      applyPc(def);\r\n      addStat(def);\r\n      \r\n      var defpc = dupeStat(1008);\r\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\r\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\r\n      addStat(defpc);\r\n      \r\n      var mdef = dupeStat(9);\r\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\r\n      applyPc(mdef);\r\n      addStat(mdef);\r\n      \r\n      var mdefpc = dupeStat(1009);\r\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\r\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\r\n      addStat(mdefpc);\r\n      \r\n      // attack power - like fd but for bufs\r\n      // this shows as blue damage\r\n      // i think there are magic and phis variants of this but doesnt matter\r\n      var aPwr = dupeStat(3000);\r\n\r\n      // physical damage\r\n      if(!group.damageType || group.damageType.id != 2) {\r\n        var extraPdmg = dupeStat(32);\r\n        var extraPdmgMod= dupeStat(101);\r\n        var paPwr = dupeStat(3001);\r\n        \r\n        // special stats for zeal\r\n        var intToPdmg = dupeStat(10164);\r\n        \r\n        var minPdmg = dupeStat(4);\r\n        minPdmg.max += extraPdmg.max;\r\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\r\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\r\n        \r\n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\r\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\r\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\r\n        addStat(minPdmg);\r\n  \r\n        var maxPdmg = dupeStat(5);\r\n        maxPdmg.max += extraPdmg.max;\r\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\r\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\r\n        \r\n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\r\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\r\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\r\n        addStat(maxPdmg);\r\n      }\r\n      \r\n      // magic damage\r\n      if(!group.damageType || group.damageType.id != 1) {\r\n        var extraMdmg = dupeStat(33);\r\n        var extraMdmgMod = dupeStat(102);\r\n        var maPwr = dupeStat(3002);\r\n        \r\n        // special stats for zeal\r\n        var strToMdmg = dupeStat(10165);\r\n        \r\n        var minMdmg = dupeStat(6);\r\n        minMdmg.max += extraMdmg.max;\r\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\r\n\r\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\r\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\r\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\r\n        addStat(minMdmg);\r\n        \r\n        var maxMdmg = dupeStat(7);\r\n        maxMdmg.max += extraMdmg.max;\r\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\r\n        \r\n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\r\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\r\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\r\n        addStat(maxMdmg);\r\n      }\r\n      \r\n      \r\n      // crit chance %\r\n      var crit = dupeStat(12);\r\n      crit.max += (agi.max*Number(group.conversions.Critical));\r\n      applyPc(crit);\r\n      \r\n      var skCrit = dupeStat(4012);\r\n      crit.max += skCrit.max;\r\n      addStat(crit);\r\n      \r\n      var critChance = Math.min(0.89, crit.max / Number(group.enemyStatCaps.Ccritical));\r\n      retVal.push({id: 1012, max: critChance})\r\n\r\n      // crit damage %\r\n      var cDmg = dupeStat(103);\r\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\r\n      applyPc(cDmg);\r\n      addStat(cDmg);\r\n\r\n      var critDamagePc = cDmg.max / group.enemyStatCaps.CcriticalDamage;\r\n      addStat({id: 1103, max: critDamagePc + 2});\r\n\r\n      // fd\r\n      var fd = dupeStat(29);\r\n      addStat(fd);\r\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\r\n      \r\n      var fdPc = dupeStat(1029);\r\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\r\n      addStat(fdPc);\r\n      \r\n      // elements\r\n      var firePc = dupeStat(16);\r\n      addStat(firePc);\r\n      \r\n      var icePc = dupeStat(17);\r\n      addStat(icePc);\r\n      \r\n      var lightPc = dupeStat(18);\r\n      addStat(lightPc);\r\n      \r\n      var darkPc = dupeStat(19);\r\n      addStat(darkPc);\r\n      \r\n      // average damage\r\n      function addAvgDamageStat(id, min, max) {\r\n        \r\n        var nonEleDamage = (min+max)/2;\r\n        // add crit (assume 25% crit resist - ie. x0.75)\r\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\r\n        // apply fd\r\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\r\n        \r\n        // apply element(s)\r\n        // assume no elemental resist (since probably have resist reduction anyways)\r\n        var avgDmg = nonEleDamage;\r\n        if(group.element && group.element.id > 0) {\r\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\r\n          if(elementStat) {\r\n            avgDmg = avgDmg * (1+Number(elementStat.max));\r\n          }\r\n        }\r\n        addStat({id: id, max: avgDmg});\r\n        var secElementId = 0;\r\n        var priElementId = 0;\r\n        if(group.element) {\r\n          priElementId = group.element.id;\r\n        }\r\n        else {\r\n          priElementId = 0;\r\n        }\r\n        if(group.secondaryElement) {\r\n          secElementId = group.secondaryElement.id;\r\n        }\r\n        else {\r\n          secElementId = 0;\r\n        }\r\n        \r\n        if(secElementId != priElementId) {\r\n          if(secElementId > 0) {\r\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\r\n            if(secondaryElementStat) {\r\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\r\n              addStat({id: id + 1000, max: secAvgDmg});\r\n            }\r\n          }\r\n          else {\r\n            addStat({id: id + 1000, max: nonEleDamage});\r\n          }\r\n        }\r\n      }\r\n      \r\n      // average damages\r\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\r\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\r\n      }\r\n\r\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\r\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\r\n      }\r\n      \r\n      if(!group.damageType || group.damageType.id == 3) {\r\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\r\n      }\r\n      \r\n      // Equivalent HP\r\n      var pdefEqHp = dupeStat(2008);\r\n      pdefEqHp.max = hp.max / (1-defpc.max);\r\n      \r\n      var mdefEqHp = dupeStat(2009);\r\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\r\n      \r\n      var eqHp = dupeStat(3008);\r\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\r\n      addStat(eqHp);\r\n      \r\n      return retVal;\r\n    },\r\n    \r\n    getNakedStats: function(group) {\r\n      \r\n      if(\r\n        group.baseStats && \r\n        group.baseStats.Strength > 0) {\r\n\r\n        return [\r\n          {id:0, max:group.baseStats.Strength},\r\n          {id:1, max:group.baseStats.Agility},\r\n          {id:2, max:group.baseStats.Intelligence},\r\n          {id:3, max:group.baseStats.Stamina}\r\n          ];\r\n      }\r\n      else {\r\n        return [];\r\n      }\r\n    },\r\n    \r\n    getSkillStats : function (item, data, skillData) {\r\n\r\n      var skillLevelVals = null;\r\n      angular.forEach(skillData, function(value, index) {\r\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\r\n          skillLevelVals = value;\r\n          return;\r\n        }\r\n      });\r\n      \r\n      if(!skillLevelVals) {\r\n        return null;\r\n      }\r\n      \r\n      var index = 1;\r\n      var effects = [];\r\n      var stillCols = true;\r\n      \r\n      while(stillCols) {\r\n        var colName = 'EffectClass' + index;\r\n        var valColName = 'EffectClassValue' + index;\r\n        if(data && colName in data && valColName in skillLevelVals) {\r\n          if(data[colName] > 0) {\r\n            \r\n            var val = skillLevelVals[valColName];\r\n            \r\n            // for now add 10k\r\n            var effectId = data[colName];\r\n            var map = hCodeValues.skillEffectMapping[effectId];\r\n            if(map && map.getVals) {\r\n              var vals = map.getVals(val);\r\n              for(var i=0;i<vals.length;++i) {\r\n                effects.push(vals[i]);\r\n              }\r\n            }\r\n            else {\r\n              var statId;\r\n              if(map && map.mapTo) {\r\n                statId = map.mapTo;\r\n              }\r\n              else {\r\n                statId = 10000 + effectId;\r\n              }\r\n              \r\n              if(val > 0) {\r\n                effects.push({ id: statId, effect: effectId, max: val });\r\n              }\r\n              else {\r\n                if(val.toString().indexOf(';') > 0) {\r\n                  var vals = val.split(';');\r\n                  if(vals.length > 0 && vals[0] > 0) {\r\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          stillCols = false;\r\n        }\r\n        \r\n        index++;\r\n      }\r\n      \r\n      return effects;\r\n    },\r\n\r\n    getBuildStats: function(build) {\r\n      var stats = {};\r\n      stats.nakedStats = this.getNakedStats(build);\r\n      stats.combinedStats = this.getCombinedStats(build.items);\r\n      stats.setStats = this.getSetStats(build.items);\r\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\r\n      if(build.heroStats != null && build.heroStats.length > 0) {\r\n        stats.heroStats = build.heroStats;\r\n        stats.allStats = stats.allStats.concat(build.heroStats);\r\n      }\r\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\r\n      \r\n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\r\n      return stats;\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\r\nfunction translations($routeParams, $rootScope) {\r\n\r\n  var dnTranslations = new DnTranslations();\r\n  var tFile = 'uistring.lzjson';\r\n\r\n  var completeCallback = [];\r\n  var progressCallback = [];\r\n\r\n  return {\r\n    \r\n    reset : function() {\r\n      dnTranslations = new DnTranslations();\r\n      dnTranslations.sizeLimit = 100;\r\n      this.loaded = false;\r\n      this.startedLoading = false;\r\n      completeCallback = [];\r\n      progressCallback = [];\r\n    },\r\n    \r\n    loaded : false,\r\n    startedLoading : false,\r\n    \r\n    location : null,\r\n  \r\n    init : function(progress, complete) {\r\n\r\n      if(this.isLoaded()) {\r\n        complete();\r\n      }\r\n      else {\r\n        progressCallback = [];\r\n        progressCallback.push(progress);\r\n        completeCallback.push(complete);\r\n  \r\n        if(!this.startedLoading) {\r\n          this.startedLoading = true;\r\n          var t = this;\r\n          \r\n          var fileName = null;\r\n          if(this.location != null && this.location != '') {\r\n            fileName = this.location + '/' + tFile;\r\n            \r\n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\r\n              sessionStorage.removeItem('UIStrings');\r\n              localStorage.removeItem('UIStrings_file');\r\n            }\r\n          }\r\n          \r\n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\r\n          dnTranslations.loadDefaultFile(\r\n            fileName, \r\n            function(msg) {\r\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\r\n            }, \r\n            function() {\r\n              t.loaded = true;\r\n              angular.forEach(completeCallback, function(value, key) { value(); });\r\n              completeCallback = [];\r\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\r\n            },\r\n            function(msg) {\r\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\r\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\r\n              t.startedLoading = false;\r\n              t.loaded = false;\r\n            }\r\n          );\r\n        }\r\n      }\r\n    },\r\n    \r\n    isLoaded : function() {\r\n      if(!this.loaded) {\r\n        var fileName = this.location + '/' + tFile;\r\n        \r\n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\r\n          sessionStorage.removeItem('UIStrings');\r\n          localStorage.removeItem('UIStrings_file');\r\n        }\r\n\r\n        this.loaded = dnTranslations.loadFromSession();\r\n        if(this.loaded) {\r\n          this.startedLoading = true;\r\n        }\r\n      }\r\n      return this.loaded;\r\n    },\r\n    \r\n    translate : function(id,idParam) {\r\n      if(this.loaded) {\r\n        \r\n        var name;\r\n        if(!id) {\r\n          return '';\r\n        }\r\n        else {\r\n          name = dnTranslations.translate(id);\r\n          \r\n          if(typeof name != 'string') {\r\n            return 'm' + name;\r\n          }\r\n        }\r\n        \r\n        if(idParam) {\r\n          var params = idParam.split(',');\r\n          for(var p=0;p<params.length;++p) {\r\n            var pid = params[p];\r\n            if(pid.indexOf('{') == 0) {\r\n              pid = params[p].replace(/\\{|\\}/g,'');\r\n              pid = dnTranslations.translate(pid);\r\n            }\r\n            \r\n            name = name.replace('{' + p + '}', pid);\r\n          }\r\n        }\r\n\r\n        return name;\r\n      }\r\n      else {\r\n        return 'm' + id;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n})();","(function () {\r\n'use strict';\r\n\r\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\r\nfunction hCodeValues() {\r\n\r\n  function toOneDec(stat) {\r\n    return Math.round(stat.max*10)/10;\r\n  }\r\n  function toNoDec(stat) {\r\n    return Math.floor(stat.max);\r\n  }\r\n  function inThousands(stat) {\r\n    var val = Number(stat.max);\r\n    if(val < 100) {\r\n      return val;\r\n    }\r\n    else if(val < 100000) {\r\n      return Math.round(val/100)/10 + 'k';\r\n    }\r\n    else if(val < 1000000) {\r\n      return Math.round(val/1000) + 'k';\r\n    }\r\n    else if(val < 10000000) {\r\n      return Math.round(val/10000)/100 + 'm';\r\n    }\r\n    else {\r\n      return Math.round(val/1000000) + 'm';\r\n    }\r\n  }\r\n  function toPercent(stat) {\r\n    return (Math.floor(stat.max*100000)/1000) + '%';\r\n  }\r\n  \r\n  return {\r\n    stats : {\r\n      0  : {id: 0, name: 'str', display: toNoDec, dps: true, pc: 50, skPc: 4050, searchable: true },\r\n      1  : {id: 1, name: 'agi', display: toNoDec, dps: true, pc: 51, skPc: 4051, searchable: true },\r\n      2  : {id: 2, name: 'int', display: toNoDec, dps: true, pc: 52, skPc: 4052, searchable: true },\r\n      3  : {id: 3, name: 'vit', display: toNoDec, def: true, pc: 53, skPc: 4053, searchable: true },\r\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, dps: true, pc: 54, searchable: true },\r\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\r\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, dps: true, pc: 56, searchable: true },\r\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\r\n      8  : {id: 8, name: 'pdef', display: inThousands, def: true, pc: 58, searchable: true },\r\n      9  : {id: 9, name: 'mdef', display: inThousands, def: true, pc: 59, searchable: true },\r\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\r\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\r\n      12 : {id: 12, name: 'crit', display: toNoDec, dps: true, pc: 62, searchable: true },\r\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\r\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\r\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\r\n      16 : {id: 16, name: 'fire%', display: toPercent, dps: true, searchable: true },\r\n      17 : {id: 17, name: 'ice%', display: toPercent, dps: true, searchable: true },\r\n      18 : {id: 18, name: 'light%', display: toPercent, dps: true, searchable: true },\r\n      19 : {id: 19, name: 'dark%', display: toPercent, dps: true, searchable: true },\r\n      20 : {id: 20, name: 'fire def', display: toPercent, def: true, searchable: true },\r\n      21 : {id: 21, name: 'ice def', display: toPercent, def: true, searchable: true },\r\n      22 : {id: 22, name: 'light def', display: toPercent, def: true, searchable: true },\r\n      23 : {id: 23, name: 'dark def', display: toPercent, def: true, searchable: true },\r\n      25 : {id: 25, name: 'hp', display: inThousands, def: true, pc: 75, skPc: 4075, searchable: true },\r\n      26 : {id: 26, name: 'mp', display: inThousands, def: true, pc: 76, skPc: 4076 },\r\n      29 : {id: 29, name: 'fd', display: toNoDec, dps: true, searchable: true },\r\n      \r\n      // these are both min and max\r\n      // shows with the same name but these are used really just for set bonus I think\r\n      32 : {id: 32, name: 'pdmg', display: toNoDec, dps: true, pc: 54 },\r\n      33 : {id: 33, name: 'mdmg', display: toNoDec, dps: true, pc: 56 },\r\n      \r\n      50 : {id: 50, name: 'str%', display: toPercent, dps: true },\r\n      51 : {id: 51, name: 'agi%', display: toPercent, dps: true },\r\n      52 : {id: 52, name: 'int%', display: toPercent, dps: true },\r\n      53 : {id: 53, name: 'vit%', display: toPercent, def: true },\r\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55, dps: true },\r\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\r\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57, dps: true },\r\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\r\n      58 : {id: 58, name: 'pdef%', display: toPercent, def: true },\r\n      59 : {id: 59, name: 'mdef%', display: toPercent, def: true },\r\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true, def: true },\r\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true, def: true },\r\n      62 : {id: 62, name: 'crit%', display: toPercent, dps: true },\r\n      63 : {id: 63, name: 'crit resist%', display: toPercent, def: true },\r\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true, def: true },\r\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true, def: true },\r\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true, def: true },\r\n      75 : {id: 75, name: 'hp%', display: toPercent, def: true },\r\n      76 : {id: 76, name: 'mp%', display: toPercent, def: true },\r\n      77 : {id: 77, name: 'mp recover%', display: toPercent, def: true },\r\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true, def: true },\r\n\r\n      // these are both min and max\r\n      // shows with the same name but these are used really just for set bonus I think\r\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true, dps: true },\r\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true, dps: true },\r\n\r\n      103: {id: 103, name: 'crit dmg', display: toNoDec, dps: true, pc: 104 },\r\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true, dps: true },\r\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true, def: true },\r\n      \r\n      // stats below here are ones I made up\r\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\r\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\r\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\r\n      \r\n      1008: {id: 1008, name: 'pdef', display: toPercent, noCustom: true },\r\n      1009: {id: 1009, name: 'mdef', display: toPercent, noCustom: true },\r\n      \r\n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\r\n      1029: {id: 1029, name: 'fd', display: toPercent, noCustom: true },\r\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\r\n      \r\n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\r\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\r\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\r\n      \r\n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\r\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\r\n      \r\n      3000: {id: 3000, name: 'skDmg%', display: toPercent },\r\n      3001: {id: 3000, name: 'skPDmg%', display: toPercent },\r\n      3002: {id: 3000, name: 'skMDmg%', display: toPercent },\r\n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true, hide: true },\r\n      \r\n      4012: {id: 4012, name: 'skCrit', display: inThousands },\r\n      4050: {id: 4050, name: 'skStr%', display: toPercent },\r\n      4051: {id: 4051, name: 'skAgi%', display: toPercent },\r\n      4052: {id: 4052, name: 'skInt%', display: toPercent },\r\n      4053: {id: 4053, name: 'skVit%', display: toPercent },\r\n      4075: {id: 4075, name: 'skHp%', display: toPercent },\r\n      4076: {id: 4076, name: 'skMp%', display: toPercent },\r\n      \r\n      // special cases for skills\r\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\r\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\r\n      \r\n      // items over 10000 are unknown skill effects\r\n    },\r\n  \r\n    rankNames : {\r\n      0 : { id: 0, name : 'normal' },\r\n      1 : { id: 1, name : 'magic' },\r\n      2 : { id: 2, name : 'rare' },\r\n      3 : { id: 3, name : 'epic' },\r\n      4 : { id: 4, name : 'unique' },\r\n      5 : { id: 5, name : 'legendary' },\r\n    },\r\n    \r\n    shopNames : {\r\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\r\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\r\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\r\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\r\n      59001: 'garden bunny',\r\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\r\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \r\n      89001: 'guild master',\r\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \r\n      66001: 'erosion',\r\n      35006: 'plate',\r\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \r\n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\r\n      40001: 'daredevil faire', 40002: 'daredevil faire', \r\n      91001: 'wrath',\r\n      45001: 'farm',\r\n    },\r\n    \r\n    checkedRank : {\r\n      0 : true,\r\n      1 : true,\r\n      2 : true,\r\n      3 : true,\r\n      4 : true,\r\n      5 : true,\r\n    },\r\n    \r\n    typeNames : {\r\n      0 : 'weapons',\r\n      1 : 'equipment',\r\n      5 : 'plates',\r\n      8 : 'pouch',\r\n      38 : 'plates',\r\n      90 : 'welspring',\r\n      132 : 'talisman',\r\n      139 : 'gems',\r\n    },\r\n    \r\n    elements : {\r\n      0 : { id: 0, name: 'non-ele' },\r\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\r\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\r\n      3 : { id: 3, name: 'light', dmgStat: 18 },\r\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\r\n    },\r\n    \r\n    damageTypes : {\r\n      0 : { id: 0, name: 'both separate' },\r\n      1 : { id: 1, name: 'physical' },\r\n      2 : { id: 2, name: 'magical' },\r\n      3 : { id: 3, name: 'both combined' },\r\n    },\r\n    \r\n    // note: skills shown on-screen have 1k added to their id\r\n    skillEffectMapping : {\r\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\r\n      13 : { id: 13, name: 'mp', mapTo: 26 },\r\n      25 : { id: 25, name: 'action speed' },\r\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\r\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\r\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\r\n      34 : { id: 34, name: 'light %', mapTo: 18 },\r\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\r\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\r\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\r\n      38 : { id: 38, name: 'light def', mapTo: 22 },\r\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\r\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\r\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\r\n      65 : { id: 65, name: 'range' },\r\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\r\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\r\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\r\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\r\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\r\n      134 : { id: 134, name: 'physicial defense%' },\r\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\r\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\r\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\r\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\r\n      222: {\r\n        id: 222, \r\n        name: 'hellfire', \r\n        getVals: function(val) {\r\n          if(val.indexOf(';') > 0) {\r\n            var vals = val.split(';');\r\n            return [\r\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\r\n              {id: 4012, effect: 222, max: Number(vals[1])},\r\n              ];\r\n          }\r\n          else {\r\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\r\n          }\r\n        }\r\n      },\r\n    },\r\n    \r\n    customItems: \r\n    [\r\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\r\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\r\n    ],\r\n  \r\n    getStats : function(data) {\r\n\r\n      var useMax=false;\r\n      var useStateXVal=false;\r\n      var mightHaveSets=true;\r\n      var prop = 'State1_Max';\r\n      if(prop in data) {\r\n        useMax = true;\r\n      }\r\n      else {\r\n        prop = 'State1Value';\r\n        if(prop in data) {\r\n          useStateXVal = true;\r\n        }\r\n      }\r\n      \r\n      var currentState = 0;\r\n      var statVals = [];\r\n      for(;;) {\r\n        currentState++;\r\n        \r\n        var stateProp = 'State' + currentState;\r\n        if(!(stateProp in data)) {\r\n          break;\r\n        }\r\n\r\n        var stateId = data[stateProp];\r\n        if(stateId == -1) {\r\n          break;\r\n        }\r\n        \r\n        if(stateId == 107) {\r\n          // is this mp?\r\n        }\r\n        else {\r\n          \r\n          var currentData = { id: stateId };\r\n          \r\n          var prop;\r\n        \r\n          if(useMax) {\r\n            prop = 'State' + currentState + '_Max';\r\n            currentData.max = data[prop];\r\n          }\r\n          else if(useStateXVal) {\r\n            prop = 'State' + currentState + 'Value';\r\n            currentData.max = data[prop];\r\n          }\r\n          else {\r\n            prop = 'StateValue' + currentState;\r\n            currentData.max = Number(data[prop]);\r\n          }\r\n          \r\n          if(currentData.max > 0 || currentData.max < 0) {\r\n            if(mightHaveSets) {\r\n              prop = 'NeedSetNum' + currentState;\r\n              if(prop in data) {\r\n                if(data[prop] == 0) {\r\n                  break;\r\n                }\r\n                currentData.needSetNum = data[prop];\r\n              }\r\n              else {\r\n                mightHaveSets = false;\r\n              }\r\n            }\r\n          \r\n            statVals.push(currentData);\r\n          }\r\n        }\r\n      }\r\n      \r\n      return statVals;\r\n    },\r\n    \r\n    setupStat : function(stat, id) {\r\n      stat.id = Number(id);\r\n    },\r\n    \r\n    mergeStats : function(stats1, stats2) {\r\n      var statMap = {};\r\n      \r\n      var self = this;\r\n      function add(value) {\r\n        \r\n        var amount = Number(value.max);\r\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\r\n          amount = Math.floor(amount);\r\n        }\r\n        \r\n        if(value.id in statMap) {\r\n          statMap[value.id] += amount;\r\n        }\r\n        else {\r\n          statMap[value.id] = amount;\r\n        }\r\n      }\r\n      \r\n      angular.forEach(stats1, function(value, key) {\r\n        if(value) {\r\n          add(value);\r\n        }\r\n      });\r\n      \r\n      if(stats2) {\r\n        angular.forEach(stats2, function(value, key) {\r\n          if(value) {\r\n            add(value);\r\n          }\r\n        });\r\n      }\r\n      \r\n      var newStats = [];\r\n      \r\n      for(var key in statMap) {\r\n        var stat = { max : statMap[key], id: Number(key) };\r\n        newStats.push(stat);\r\n      }\r\n        \r\n      return newStats;\r\n    }\r\n  }\r\n}\r\n\r\n})();"],"sourceRoot":"/source/"}