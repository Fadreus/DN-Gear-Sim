{"version":3,"sources":["routes.js","about/about.js","filters/filters.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","nav/export.js","nav/nav.js","nav/setup.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","search/custom-items.js","search/item-search.js","search/skill-search.js","region/region.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","widgets/dnsim-string-to-percent.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","filter","input","Math","round","$stateful","$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset","tryInit","vm","reloaded","allLoaded","files","getDntFiles","build","forEach","columns","fileName","isLoaded","newItems","reloadGroup","buildName","updatedSavedItems","items","onChange","progress","this","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","job","damageType","element","secondaryElement","enemyStatCaps","playerStatCaps","conversions","baseStats","heroStats","init","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","directive","scope","bindToController","controllerAs","item","$routeParams","setupBuilds","savedItems","getSavedItems","buildNames","Object","keys","sort","builds","i","length","push","name","groupName","currentGroup","saveBuildSelection","anyItems","createGroup","handleChange","toggleGroup","url","publish","search","stats","getBuildStats","itemsByCategory","getItemsByCategory","getSaveDate","group","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","jobs","itemColumnsToLoad","character","calcStatPercent","newVal","origVal","scrollTo","groupNames","getCurrentBuild","getGroupCalcStats","groupCalcStats","getCalculatedStats","getBuild","pickup","index","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","mergeStats","headers","summaryStatIds","id","summaryDisplay","pcIndexes","rows","updateRows","typeName","pcIndex","enchantmentNum","rowIndex","makeFakeCells","data","makeCell","num","click","col","move","swapEnchantmentNumber","setTalisman","splice","replaceAffectAmount","newEnhancementNum","extraStats","stat","max","enchantmentStats","fullStats","getReplaceAffectAmount","statId","itemIndex","initReplaceAffects","item2","fullStats1","fullStats2","gItem","newStats","origStats","getStat","getStatName","retVal","eleId","elements","len","save","selectedCategory","localStorage","category","byName","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","value","setItem","allowMoreItems","maxCat","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","sparkTypeId","increasingGemSlots","number","numItems","cat","numItemText","removeItem","newItemList","server","newGroup","oldGroupName","damageTypes","newJobs","getFinalJobs","key","setHeroStats","setJob","getStatCap","colName","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","datas","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","anyLoading","cancel","reloadItem","saveItem","reset","start","hasOptions","back","pop","testOptions","$scope","region","getById","setLocationByName","g","e","p","h","j","d","t","s","itemString","split","itemStr","decodeItem","isLoading","newBuildName","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","icon","noLocationMenu","normalMenu","buildAction","withBuildMenu","isSearch","indexOf","startedLoading","tlocation","noRegion","dntLocation","getActionUrl","action","getActions","menu","currentBuild","extraCss","$route","dntInit","translationsStatus","progressTranslations","translate","msg","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","saveGroup","clearGroup","addAffectAmount","groupItems","$watch","getAddAffectAmount","initAddAffects","getGroupItems","numMatches","str","itemSplit","exchangeType","itemSource","a","b","hasMaxExchangable","maxExchange","nextGroup","uptoItem","prevGroup","foundGroup","addToGroup","replace","replaceItem","statMap","_","newValue","oldValue","anyChange","Number","found","each","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","setEnchantment","EnchantLevel","getStats","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","find","showMaterials","materials","itemId","itemCount","NameID","NameIDParam","material","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkDnt","amount","itemFactory","typeId","console","log","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","getCharmItems","TypeParam1","getPouchItems","boxType","f","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Disjointamount","getPlates","plateFile","r","row","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","transferItemsFileName","initTransfers","transferItem","transfers","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","getJobName","allJobs","getAllJobs","needJobClass","jobName","preInitItem","anyToLoad","setFullStats","mainDnt","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","getDescription","description","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","encodeItem","copy","buildSearch","onlineService","getClassBuilds","then","jobBuilds","maxDisplay","totalNumResults","jobId","showMoreResults","extra","allResults","getFilteredBuilds","uid","results","result","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","openServer","load","user","getUser","handleError","err","show","login","saveProfile","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","openLocal","getBuildLimit","maxBuilds","getNumStoredBuilds","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","copyLocally","customItemCtrl","customItems","currentResults","nameSearch","getResults","getNewStatName","createCustomItem","jobInit","loadResults","lastJobNumber","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideLevel","minLevel","maxLevel","hideRank","rankChecked","hideJob","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","byPath","catName","grades","searchable","savedSearchStatId","navigate","checkedRank","changeSearch","skillSearchCtrl","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","getBaseJobName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","itemLinkClosed","saveCustomItems","getCustomItems","toString","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","boxes","initBoxes","box","sortBy","numBoxes","chooseClass","restrict","onSetJob","chooseClassController","finalJobs","bJob","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","collapse","dnsimCategoryLinksController","collapsed","setCategory","dnsimItemIcon","link","attrs","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","dnsimJobIcon","dnsimJobIconController","JobIcon","dnsimLoading","transclude","alsoShowFor","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","display","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","hasStartedLoading","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","searchType","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","deleteNullProperties","set","compressBuild","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","unique plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","setCurrentBuild","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","itemCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","dps","1","2","3","4","5","6","7","8","9","10","noCustom","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","105","106","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/build/:groupName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:groupName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      reloadOnSearch: false,\n    }).\n    \n    when('/search/:itemType?', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl as ctrl'\n    }).\n    \n    when('/item/:region?/:i*', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/profile/:uid', {\n      templateUrl: 'ui/online/profile.html',\n      controller: 'ProfileCtrl as ctrl',\n    }).\n    \n    when('/published/:uid/:buildName*', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/build-search/:jobId?', {\n      templateUrl: 'ui/online/build-search.html',\n      controller: 'BuildSearchCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n})();","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/build/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$routeParams','$timeout','saveHelper',\n  function($window,$location,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('groupName' in $routeParams) {\n      if($routeParams.groupName != this.currentGroup) {\n        this.currentGroup = $routeParams.groupName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/build/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      // console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/build/' + buildName);\n    }\n    \n    this.publish = function() {\n      $location.url('/publish');\n    }\n    \n    this.search = function() {\n      $location.url('/build-search');\n    }\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    // console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/build/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\n    if(vm.category.name in itemsByCat) {\n      return itemsByCat[vm.category.name];\n    }\n    else {\n      return [];\n    }\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.stats = statHelper.getBuildStats(vm.build);\n    vm.onChange();\n  }\n  \n  this.removeItem = function(item) {\n    item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n\n    vm.build.items = newItemList;\n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.handleChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange',\n      server: '=server'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('groupName' in $routeParams) {\n      this.groupName = $routeParams.groupName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function() {\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/build/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      // console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.build.items.push(newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      // console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/build/' + newBuildName);\n    }\n  }]\n);\n","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory','saveHelper',\n  function($scope,$location,translations,region,itemCategory,saveHelper) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n    \n    var buildAction = {path: 'build', name:'build', icon: 'wrench'};\n    \n    var withBuildMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      buildAction,\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    //var basePath = angular.element(document.querySelector('base')).attr('href');\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.getActionUrl = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          return action.path + '/' + cat;\n        }\n        else {\n          return action.path;\n        }\n      }\n      else {\n          return action.path;\n      }\n    }\n      \n    $scope.getActions = function() {\n      // console.log('getting actions');\n      var menu = null;\n      \n      var currentBuild = saveHelper.getCurrentBuild();\n      if(currentBuild) {\n        var savedItems = saveHelper.getSavedItems();\n        if(!(currentBuild in savedItems)) {\n          currentBuild = null;\n        }\n      }\n\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(currentBuild && currentBuild != 'null') {\n        menu = withBuildMenu;\n        buildAction.path = 'build/' + currentBuild;\n        buildAction.name = currentBuild;\n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          if(value.path != 'builds' || $location.path() == '/builds') {\n            value.extraCss = 'active';\n          }\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory','$scope',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory,$scope) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    vm.addAffectAmount = null;\n    vm.replaceAffectAmount = {};\n\n    vm.groupItems = null;\n    vm.groupCalcStats = null\n  }\n\n  $scope.$watch('editCtrl.item', function() {\n    // console.log('item changed');\n    vm.clearGroup();\n  });\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    // console.log('add affect: ', this.addAffectAmount[stat], this.item);\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    // console.log('initialising add affects ');\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = [];\n    if(group.items) {\n      newItems = group.items.concat([vm.item]);\n    }\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues','$scope',\nfunction(hCodeValues,$scope) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n\n  this.statMap = {};\n  \n  // console.log(vm.item.stats);\n  _.forEach(vm.item.stats, function(stat) {\n    // console.log('got stat', stat.id);\n    vm.statMap[stat.id] = stat.max;\n  });\n  \n  for(var statId in hCodeValues.stats) {\n    $scope.$watch('editCtrl.statMap[' + statId + ']', function(newValue, oldValue) { \n\n      if(newValue != oldValue) {\n        // console.log(statId);\n        // console.log('watch got stat value', newValue);\n\n        var anyChange = false;\n        var newStats = [];\n        for(var statId in vm.statMap) {\n\n          if(!vm.statMap[statId] || !Number(vm.statMap[statId])) {\n            _.each(vm.item.stats, function(stat) { \n              if(stat.id == statId) {\n                anyChange = true;\n              }\n            });\n          }\n          else {\n            newStats.push({\n              id: Number(statId),\n              max: Number(vm.statMap[statId])\n            });\n\n            var found = false;\n            _.each(vm.item.stats, function(stat) {\n              if(stat.id == statId) {\n                found = true;\n                // console.log('comparing', stat.max, vm.statMap[statId]);\n                if(!(statId in vm.statMap) || stat.max != vm.statMap[statId]) {\n                  anyChange = true;\n                }\n              } \n            });\n\n            if(!found) {\n              anyChange = true;\n            }\n          }\n        }\n\n        if(anyChange) {\n          // console.log('GOT CHANGES!', newStats);\n          vm.item.stats = newStats;\n          vm.onChange();\n        }\n      }\n    });\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null || vm.itemType == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    console.log('init contents', this.item.fileName);\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        vm.getPouchItems(d.TypeParam1);\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType) {\n    for(var f=0;f<pouchFileNames.length;++f) {\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\n    }\n  }\n  \n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            // console.log('adding item ' + pouchItem);\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\n              // console.log('found item ' + basicItem.name);\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: basicItem\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n\n      var charmData = dntData.getData(charmFiles[i]);\n      console.log('box: ' + boxType, charmData);\n      \n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  var transferItemsFileName = 'enchanttransferitemtable.lzjson';\n  \n  var files = [transferFileName,allItemFileName,transferItemsFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    vm.matchingTransfers = [];\n    \n    var transferItem = dntData.find(transferItemsFileName, 'ItemID', vm.item.id);\n    if(transferItem && transferItem.length > 0) {\n      var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n      \n      for(var i=0;i<transfers.length;++i) {\n        var t = transfers[i];\n        if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n          \n          var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n          var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n          \n          vm.matchingTransfers.push({\n            level: t.ResultLevel,\n            enchantmentNum: t.ResultEnchantLevel,\n            gold: t.NeedCoin/100/100,\n            rank: hCodeValues.rankNames[t.ResultRank],\n            numItem1: t.NeedItemCount1,\n            item1: itemFactory.createBasicItem(item1s[0]),\n            numItem2: t.NeedItemCount2,\n            item2: itemFactory.createBasicItem(item2s[0]),\n          });\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ItemCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory','$timeout',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory,$timeout) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  // console.log('search string: ', $routeParams.i);\n  $scope.item = exportLinkHelper.decodeItem($routeParams.i);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    else if($scope.item.fileName &&\n      dntData.isLoaded($scope.item.fileName + '.lzjson')) {\n        \n      var itemData = dntData.find($scope.item.fileName + '.lzjson', 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      } \n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    // console.log('changes');\n    if($scope.item.itemSource != 'custom') {\n      $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\n    }\n    else {\n      setFullStats();\n      $scope.item = angular.copy($scope.item);\n    }\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    $scope.preInitItem = $scope.item;\n    $scope.item = null;\n  \n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.preInitItem), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.preInitItem);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n        \n        if(!$scope.item.fileName) {\n          if($scope.item.itemSource in items && items[$scope.item.itemSource].mainDnt) {\n            $scope.item.fileName = items[$scope.item.itemSource].mainDnt.replace('.lzjson', '').replace('.optimised', '');\n          }\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null && $scope.item.typeId != 112) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    // full stats are cleared when publishing builds\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","(function () {\n'use strict';\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\n\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.maxDisplay = 15;\n  vm.totalNumResults = 0;\n  \n  jobs.init(null, function() {\n    if($routeParams.jobId) {\n      vm.job = jobs.getById($routeParams.jobId);\n      getClassBuilds();\n    } \n  })\n  \n  this.setJob = function() {\n    $timeout(function() {\n      $location.path('/build-search/' + vm.job.id);\n    });\n  }\n  \n  this.showMoreResults = function(extra) {\n    vm.maxDisplay = vm.totalNumResults + extra;\n    vm.totalNumResults = 0;\n  }\n  \n  vm.allResults = null;\n  vm.getFilteredBuilds = function() {\n    \n    // init\n    if(vm.allResults == null) {\n      vm.allResults = [];\n      for(var uid in vm.jobBuilds) {\n        for(var buildName in vm.jobBuilds[uid]) {\n          vm.allResults.push({\n            uid: uid,\n            name: buildName,\n            data: vm.jobBuilds[uid][buildName]\n          });\n        }\n      }\n    }\n    \n    var results = [];\n    for(var i=0;i<vm.allResults.length;++i) {\n      \n      var result = vm.allResults[i];\n      if(vm.filter && vm.filter.length > 0) {\n        var f = vm.filter.toUpperCase();\n        if(result.name.toUpperCase().indexOf(f) == -1) {\n          if(!result.data.guild ||\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\n\n            continue;\n          }\n        }\n      }\n      \n      results.push(result);\n\n      if(results.length >= vm.maxDisplay) {\n        break;\n      }\n    }\n    \n    vm.totalNumResults = results.length;\n    return results;\n  }\n  \n  function getClassBuilds() {\n    if(vm.job) {\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\n        if(builds) {\n          // console.log('got builds', builds);\n          vm.jobBuilds = builds;\n        }\n        else {\n          // console.log('no builds');\n          vm.jobBuilds = {};\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\n\nfunction profile($location, $routeParams, onlineService, saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  \n  getSavedBuilds();\n  getProfile();\n  \n  function getSavedBuilds() {\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\n      if(builds) {\n        vm.storedBuilds = builds;\n      }\n      else {\n        vm.storedBuilds = {};\n      }\n    });\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.uid + '/' + buildName);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n    \n    $location.path('/build/' + newGroupName);\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\n\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.show = $routeParams.show;\n  \n  onlineService.login().then(function(user) {\n    getSavedBuilds();\n    getProfile();\n  \n    vm.builds = saveHelper.getSavedItems();\n  });\n  \n  function getSavedBuilds() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\n        if(builds) {\n          vm.storedBuilds = builds;\n        }\n        else {\n          vm.storedBuilds = {};\n        }\n      });\n    }\n  }\n  \n  function getProfile() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getProfile(user.uid).then(function(profile) {\n        if(profile) {\n          vm.profile = profile;\n        }\n        else {\n          vm.profile = {};\n        }\n      });\n    }\n  }\n  \n  this.saveProfile = function() {\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\n  }\n  \n  this.getUser = function() {\n    return onlineService.getUser();\n  }\n  \n  this.save = function(buildName, build) {\n    build.lastUpdate = (new Date()).getTime();\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\n    vm.publishBuild = null;\n  }\n  \n  this.startPublish = function(buildName) {\n    if(buildName in vm.storedBuilds) {\n      if(!vm.builds[buildName].region) {\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\n      }\n      \n      if(!vm.builds[buildName].about) {\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\n      }\n      \n      if(!vm.builds[buildName].guild) {\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\n      }\n    }\n    \n    if(!vm.builds[buildName].region) {\n      vm.builds[buildName].region = region.dntLocation.region;\n    }\n    \n    vm.publishBuild = buildName;\n  }\n  \n  function handleError(err) {\n    console.log(err);\n  }\n  \n  this.deleteAccount = function() {\n    onlineService.deleteAccount(vm.storedBuilds);\n  }\n  \n  this.openLocal = function(buildName) {\n    $location.path('../build/' + buildName);\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('../published/' + vm.getUser().uid + '/' + buildName);\n  }\n  \n  this.getBuildLimit = function() {\n    if(vm.profile && vm.profile.maxBuilds) {\n      return vm.profile.maxBuilds;\n    }\n    else {\n      return 15;\n    }\n  }\n  \n  this.getNumStoredBuilds = function() {\n    return _.size(vm.storedBuilds);\n  }\n  \n  this.getNumBuilds = function() {\n    return _.size(vm.builds);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  this.signOut = function() {\n    onlineService.signOut();\n  }\n  \n  vm.deleteLocal = function(buildName) {\n    vm.localToDelete = buildName;\n  }\n  \n  vm.getAllBuildNames = function() {\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\n    return _.uniq(allKeys.sort(), true);\n  }\n  \n  vm.reallyDeleteLocal = function(buildName) {\n    saveHelper.updatedSavedItems(buildName, []);\n    vm.localToDelete = null;\n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  vm.deleteServer = function(buildName) {\n    vm.serverToDelete = buildName;\n  }\n  \n  vm.reallyDeleteServer = function(buildName) {\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\n    vm.serverToDelete = null;\n  }\n  \n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\n\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  vm.buildName = $routeParams.buildName;\n  \n  getBuild();\n  getProfile();\n  \n  vm.copyLocally = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n      \n    $location.path('/build/' + newGroupName);\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  function getBuild() {\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\n      if(build) {\n        vm.build = build;\n        vm.stats = statHelper.getBuildStats(build);\n      }\n      else {\n        vm.build = {};\n      }\n    });\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimCustomItems', function() {\n  return {\n    scope: {},\n    bindToController: {\n    },\n    controller: ['$window','saveHelper','$location','hCodeValues','itemCategory','$timeout', customItemCtrl],\n    controllerAs: 'customItems',\n    templateUrl: 'ui/search/custom-items.html'\n  };\n});\n\nfunction customItemCtrl($window,saveHelper,$location,hCodeValues,itemCategory,$timeout) {\n  'use strict';\n\n  var vm = this;\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}\n\n})();","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\n  if(!vm.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     vm.itemCategory = itemCategory.byName(catName);\n     if(vm.itemCategory) {\n       // console.log('moving');\n       $location.path(vm.itemCategory.path);\n     }\n     return;\n  }\n  \n  $window.document.title = 'DN Gear Sim | ' + vm.itemCategory.name.toUpperCase();\n  \n  vm.job = {id: -1, name: ''};\n  vm.jobs = [vm.job];\n  vm.allJobs = [];\n  vm.minLevel = 1;\n  vm.maxLevel = 99;\n  vm.maxDisplay = 10;\n  vm.totalNumResults = 0;\n  vm.grades = hCodeValues.rankNames;\n  vm.stat = {id:-1, name:''};\n  vm.stats = [vm.stat];\n  vm.results = null;\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.searchable) {\n      vm.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    vm.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    vm.maxLevel = maxLevel;\n  }\n  \n  vm.nameSearch = localStorage.getItem('nameSearch');\n  if(!vm.nameSearch) {\n    vm.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    vm.stat = hCodeValues.stats[savedSearchStatId];\n  }\n\n  vm.navigate = function() {\n    var catName = localStorage.getItem('selectedItemCategory');\n    if(catName) {\n      vm.itemCategory = itemCategory.byName(catName);\n      if(vm.itemCategory) {\n        // console.log('navigating to ', vm.itemCategory.path);\n        $location.path(vm.itemCategory.path);\n      }\n    }\n  }\n\n  vm.save = function() {\n    if(!vm.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', vm.minLevel);\n      localStorage.setItem('maxLevel', vm.maxLevel);\n    }\n    \n    if(!vm.itemCategory.hideJob) {\n      if(vm.job != null) {\n        localStorage.setItem('jobNumber', vm.job.id);\n      }\n    }\n  \n    if(vm.stat) {\n      localStorage.setItem('searchStat', vm.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', vm.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init(vm.itemCategory.name, loadResults);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  vm.rankChecked = hCodeValues.checkedRank;\n    \n  vm.changeSearch = function() {\n    vm.save();\n    loadResults();\n  }\n  \n  function loadResults() {\n    $timeout(function() {\n      vm.maxDisplay = 12;\n      vm.results = getResults();\n    });\n  }\n  \n  function getResults() {\n    // console.log('getting items');\n    var allItems = itemCategory.getItems(vm.itemCategory.name);\n    if(allItems == null) {\n      // console.log('no items');\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n          \n    var pcStatId = -1;\n    if('pc' in vm.stat) {\n      pcStatId = vm.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<vm.maxDisplay || vm.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e) {\n        \n        if(!vm.itemCategory.hideLevel) {\n          if(e.levelLimit < vm.minLevel || e.levelLimit > vm.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!vm.itemCategory.hideRank) {\n          if(e.rank && !vm.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!vm.itemCategory.hideJob) {\n          if(vm.job && vm.job.id > -1) {\n            if(!vm.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != vm.itemCategory.name) {\n          continue;\n        }\n        // console.log('name filter', vm.nameSearch); \n        \n        if(vm.nameSearch != '') {\n          // console.log('filtering on name');\n          var nameSearches = vm.nameSearch.split(' ');\n          if(!nameSearches.length) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if(vm.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s];\n            if(stat.id == vm.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if(vm.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, vm.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    vm.totalNumResults = newResults.length;\n    \n    return newResults;\n  }\n\n  vm.showMoreResults = function() {\n    $timeout(function() {\n      vm.maxDisplay += 18;\n      vm.results = getResults();\n    });\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n  \n}]);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimSkillSearch', function() {\n  return {\n    scope: {},\n    bindToController: {\n      job: '=job',\n      jobs: '=jobs',\n    },\n    controller: ['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues','itemCategory','$location', skillSearchCtrl],\n    controllerAs: 'skillSearch',\n    templateUrl: 'ui/search/skill-search.html'\n  };\n});\n\nfunction skillSearchCtrl($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues,itemCategory,$location) {\n\n  var vm = this;\n  \n  vm.allJobs = [];\n  vm.dntName = '';\n  vm.skills = [];\n  vm.loadedJobId = -1;\n\n  vm.itemCategory = itemCategory.byName('skills');\n\n  vm.nameSearch = localStorage.getItem('nameSearch');\n  if(!vm.nameSearch) {\n    vm.nameSearch = '';\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  vm.navigate = function() {\n    $timeout(function() {\n      if(vm.itemCategory) {\n        $location.path(vm.itemCategory.path);\n      }\n    });\n  }\n  \n  vm.isLoading = function() {\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() { setupSkills(baseJobNames, vm.job);} ); });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  vm.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  vm.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    if(vm.job && vm.job.id >= 0) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills;++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(!nameSearches.length) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n    }\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      if(vm.jobs && vm.jobs.length) {\n        newJobs.splice(0, 0, vm.jobs[0]);\n      }\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      // console.log('using job', lastJobNumber);\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            // console.log('using job', value);\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}\n\n})();","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n      \n    $scope.region = region;\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    vm.boxes = null;\n    vm.maxDisplay = 32;\n    vm.currentResults = 0;\n    vm.results = null;\n\n    vm.nameSearch = localStorage.getItem('itemNameSearch');\n    if(vm.nameSearch == null) {\n      vm.nameSearch = '';\n    }\n    \n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    vm.initBoxes = function() {\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: translations.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n        \n        vm.boxes = _.sortBy(vm.boxes, 'name');\n        \n        $timeout(function() {\n          vm.showMoreResults();\n        });\n      }\n    }\n    \n    vm.getResults = function() {\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return [];\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n    \n    vm.changeSearch = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      \n      vm.maxDisplay = 64;\n      vm.results = vm.getResults();\n    }\n  \n    vm.showMoreResults = function() {\n      $timeout(function() {\n        // console.log('show more', vm.maxDisplay);\n        vm.maxDisplay += 18;\n        vm.results = vm.getResults();\n      });\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\n\nfunction chooseClass() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      job: '=job',\n      onSetJob: '&onSetJob'\n    },\n    templateUrl: 'ui/widgets/choose-class.html',\n    controllerAs: 'ctrl',\n    controller: [\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \n      chooseClassController],\n  };\n}\n\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    if(job) {\n      this.onSetJob();\n    }\n  }\n  \n  \n  jobs.init(reportProgress, $timeout);\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      collapse: '=collapse',\n      cat: '=cat',\n      onChange: '&onChange'\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    controller: ['itemCategory', dnsimCategoryLinksController],\n    controllerAs: 'ctrl',\n  };\n};\n\nfunction dnsimCategoryLinksController(itemCategory) {\n\n  var vm = this;\n\n  vm.categories = itemCategory.categories;\n  vm.collapsed = true;\n\n  vm.setCategory = function(action) {\n    // console.log('setting cat', action);\n    vm.cat = action;\n    localStorage.setItem('selectedItemCategory', action.name);\n    \n    if(vm.collapse) {\n      vm.collapsed = !vm.collapsed;\n    }\n\n    if(vm.onChange) {\n      vm.onChange();\n    }\n  }\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = '/dngearsim/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n      // var basePath = angular.element(document.querySelector('base')).attr('href');\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = 'item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', [dnsimJobIcon]);\n\nfunction dnsimJobIcon() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    controller: dnsimJobIconController,\n    controllerAs: 'ctrl'\n  }\n}\n\nfunction dnsimJobIconController() {\n\n  this.getIconXPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return ((this.item.d.JobIcon % 9) * 44) + 5;\n    }\n    return 0;\n  }\n  \n  this.getIconYPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return (Math.floor(this.item.d.JobIcon / 9) * 44) + 5;\n    }\n    return 0;\n  }\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      alsoShowFor: '=alsoShowFor',\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.numLoading = 0;\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if(!$scope.filter && 'hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToPercent', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + (value/100.0);\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10)*100;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation && \n              this.dntLocation.url &&\n              this.dntLocation.url.length) {\n\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!progress) {\n        progress = function() {};\n      }\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n\n  return {\n    \n    encodeItem: function(item, small) {\n      if(item) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C';\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n          if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString && itemString.length) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = 'view-group/' + region.dntLocation.region + '/?';\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal;\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var longUrl = window.location.href.split(\"#\")[0] + path;\n      var data = { longUrl: longUrl };\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        // console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(!ds.length) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(!ps.length) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(!ps.length) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(!ps.length) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, hideLevel: true, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, hideLevel: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true, hideLevel: true,},\n      {path: 'search/skills', name:'skills', searchType: 'skills'},\n      {path: 'search/custom', name:'custom', searchType: 'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal) {\n            if(!source.items && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      \n      if(item.itemType == cat.name) {\n        return true;\n      }\n      \n      if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n\n      return false;\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item && !(item.typeName in itemMap)) {\n            // console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 9 &&\n        dType != 11 &&\n        dType != 12 &&\n        dType != 13 &&\n        dType != 18 &&\n        dType != 19 &&\n        dType != 20 &&\n        dType != 21 &&\n        dType != 24 &&\n        dType != 29 &&\n        dType != 46 &&\n        dType != 51 &&\n        dType != 74 &&\n        dType != 75 &&\n        dType != 76 &&\n        dType != 78 &&\n        dType != 79 &&\n        dType != 84 &&\n        dType != 100 &&\n        dType != 112 &&\n        dType != 114 &&\n        dType != 115 &&\n        dType != 116 &&\n        dType != 122 &&\n        dType != 142 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 182 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(!potentials.length && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var numPotentials = potentials.length;\n          if(!numPotentials) {\n            itemType.items.push(createItem(itemType.name, d, null, 0));\n          }\n          else {\n            var totalRatio = 0;\n            for(var p=0;p<numPotentials;++p) {\n              totalRatio += potentials[p].PotentialRatio;\n            }\n            \n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio === null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.optimised.lzjson', \n        partsDnt: 'partstable_common2016.optimised.lzjson', \n        weaponDnt: 'weapontable_common2016.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      if(data) {\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          if(data[r].id == id) {\n            return data[r];\n          }\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\n\nfunction onlineService($window, $q, hCodeValues) {\n  console.log('setup online service');\n  \n  var service = {\n    login: login,\n    getUser: function() {\n      return firebase.auth().currentUser;\n    },\n    signOut: signOut,\n    deleteAccount: deleteAccount,\n    \n    getUserBuilds: getUserBuilds,\n    deleteBuild: deleteBuild,\n    saveBuild: saveBuild,\n    getBuild: getBuild,\n    getClassBuilds: getClassBuilds,\n    \n    getProfile: getProfile,\n    saveProfile: saveProfile,\n  };\n  \n  init();\n  \n  return service;\n  \n  function init() {\n    console.log('init');\n    firebase.initializeApp({\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\n      authDomain: \"dngearsim.firebaseapp.com\",\n      databaseURL: \"https://dngearsim.firebaseio.com\",\n      storageBucket: \"dngearsim.appspot.com\",\n    });\n  }\n  \n  function login() {\n    return $q(function(resolve, reject) {\n      var auth = firebase.auth();\n        \n      auth.onAuthStateChanged(function(user) {\n        if(user == null) {\n          console.log('redirecting');\n          $window.location.href = 'login.html';\n        }\n        else {\n          console.log('logged in');\n          resolve(user);\n        }\n      });\n    });\n  }\n  \n  function getProfile(uid) {\n    console.log('get profile');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(storedProfile.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getBuild(uid, buildName) {\n    console.log('get build');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(decompressBuild(storedProfile.val()));\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function saveProfile(profile) {\n    return $q(function(resolve, reject) {\n      var user = service.getUser();\n      if(user) {\n        profile = angular.copy(profile);\n        deleteNullProperties(profile, true);\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\n      }\n    });\n  }\n  \n  function getUserBuilds(uid) {\n    console.log('get builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds');\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\n        if(storedBuilds) {\n          var retVal = {};\n          var val = storedBuilds.val();\n          for(var buildName in val) {\n            retVal[buildName] = decompressBuild(val[buildName]);\n          }\n          resolve(retVal);\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getClassBuilds(job) {\n    console.log('get class builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds', job.id);\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\n        console.log('ok');\n        if(jobBuilds) {\n          resolve(jobBuilds.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function compressBuild(build) {\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        delete item.fullStats;\n      });\n    }\n    \n    var stringifiedData = JSON.stringify(build);\n    return LZString.compressToUTF16(stringifiedData);\n  }\n  \n  function decompressBuild(compressedBuild) {\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\n    var build = JSON.parse(stringifiedData);\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        item.fullStats = item.stats;\n        \n        if(item.enchantmentStats && item.enchantmentStats.length) {\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\n        }\n        \n        if(item.sparkStats && item.sparkStats.length) {\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\n        }\n      });\n    }\n    \n    return build;\n  }\n  \n  function saveBuild(buildName, build) {\n    var user = service.getUser();\n    var actions = [];\n    if(user) {\n      build = angular.copy(build);\n      deleteNullProperties(build, true);\n      // console.log('saving', build);\n      actions.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\n      );\n      \n      if(build.job && build.job.id) {\n        console.log('saving build');\n          \n        var data = {};\n        if(build.playerLevel) {\n          data.lev = build.playerLevel;\n        }\n        if(build.region) {\n          data.region = build.region;\n        }\n        if(build.guild) {\n          data.guild = build.guild;\n        }\n        if(build.about) {\n          data.about = build.about;\n        }\n        \n        deleteNullProperties(data, true);\n          \n        actions.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\n        );\n      }\n    }\n    return $q.all(actions);\n  }\n  \n  function deleteNullProperties(test, recurse) {\n    for (var i in test) {\n        if (test[i] === undefined) {\n            delete test[i];\n        } else if (recurse && typeof test[i] === 'object') {\n            deleteNullProperties(test[i], recurse);\n        }\n    }\n  }\n  \n  function signOut() {\n    var auth = firebase.auth();\n    return $q(function(resolve, reject) {\n      auth.signOut().then(function() {\n        resolve();\n      }, function(error) {\n        reject();\n      });\n    });\n  }\n  \n  function deleteAccount(builds) {\n    var auth = firebase.auth();\n    var user = service.getUser();\n    \n    return $q(function(resolve, reject) {\n      \n      var pList = [\n        firebase.database().ref('builds/' + user.uid).remove(),\n        firebase.database().ref('profile/' + user.uid).remove(),\n        firebase.database().ref('private/' + user.uid).remove()];\n        \n      var jobIds = [];\n      for(var buildName in builds) {\n        if(builds[buildName].job) {\n          jobIds.push(builds[buildName].job.id)\n        }\n      }\n      \n      jobIds = _.uniq(jobIds);\n      _.each(jobIds, function(id) {\n        pList.push(\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\n        )\n      });\n        \n      $q.all(pList).then(function() {\n        console.log('deleted data');\n        user.delete().then(function() {\n          console.log('deleted user');\n          auth.signOut().then(function() {\n            console.log('signed out');\n            resolve();\n          }, function(error) {\n            reject();\n          });\n        });\n      });\n    });\n  }\n  \n  function deleteBuild(buildName, build) {\n    \n    var pList = [];\n    var user = service.getUser();\n    if(user) {\n      pList.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\n      \n      if(build.job) {\n        pList.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\n      }\n    }\n    \n    return $q.all(pList);\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            if(build.items) {\n              for(var i=0;i<build.items.length;++i) {\n                if(build.items[i].exchangeType == exId) {\n                  numExchange++;\n                }\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality high grade' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            // todo: change this to use the name id\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n              \n            if(id == 999) {\n              return index === 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality high grade epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n            if(id == 999) {\n              return item.rank.id == 3 && index >= 0;\n            }\n            else {\n              return item.rank.id == id && index < 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n              case 1313: // Jakard's Demise\n              case 2032: // Sharing Goddess's Grief\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'unique plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      {region: 'ina', name: 'indonesian files from gemscool', url : 'https://inafiles-da491.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        angular.forEach(this.translationResettingEvents, function(event, index) {\n          event();\n        });\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      this.setCurrentBuild(buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(!updatedItems.length) {\n          delete items[groupName];\n          this.setCurrentBuild(null);\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    currentBuild: null,\n    getCurrentBuild: function() {\n      if(!this.currentBuild) {\n        this.currentBuild = localStorage.getItem('currentGroup');\n        if(this.currentBuild) {\n          var savedItems = this.getSavedItems();\n          if(!(this.currentBuild in savedItems)) {\n            localStorage.removeItem('currentGroup');\n            this.currentBuild = null;\n          }\n        }\n      }\n      \n      return this.currentBuild;\n    },\n    \n    setCurrentBuild: function(buildName) {\n      this.currentBuild = buildName;\n      localStorage.setItem('currentGroup', buildName);\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value !== null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value) {\n          \n          if(value.fullStats) {\n            stats = stats.concat(value.fullStats);\n          }\n          else if(value.stats) {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps || !group.playerStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      var itemCrit = dupeStat(1012);\n      \n      var critChance = Math.min(0.89, (crit.max / Number(group.enemyStatCaps.Ccritical)) + itemCrit.max);\n      retVal.push({id: 1012, max: critChance});\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.playerStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats && build.heroStats.length) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.optimised.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, dps: true, pc: 50, skPc: 4050, searchable: true },\n      1  : {id: 1, name: 'agi', display: toNoDec, dps: true, pc: 51, skPc: 4051, searchable: true },\n      2  : {id: 2, name: 'int', display: toNoDec, dps: true, pc: 52, skPc: 4052, searchable: true },\n      3  : {id: 3, name: 'vit', display: toNoDec, def: true, pc: 53, skPc: 4053, searchable: true },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, dps: true, pc: 54, searchable: true },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, dps: true, pc: 56, searchable: true },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'pdef', display: inThousands, def: true, pc: 58, searchable: true },\n      9  : {id: 9, name: 'mdef', display: inThousands, def: true, pc: 59, searchable: true },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, dps: true, pc: 62, searchable: true },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, dps: true, searchable: true },\n      17 : {id: 17, name: 'ice%', display: toPercent, dps: true, searchable: true },\n      18 : {id: 18, name: 'light%', display: toPercent, dps: true, searchable: true },\n      19 : {id: 19, name: 'dark%', display: toPercent, dps: true, searchable: true },\n      20 : {id: 20, name: 'fire def', display: toPercent, def: true, searchable: true },\n      21 : {id: 21, name: 'ice def', display: toPercent, def: true, searchable: true },\n      22 : {id: 22, name: 'light def', display: toPercent, def: true, searchable: true },\n      23 : {id: 23, name: 'dark def', display: toPercent, def: true, searchable: true },\n      25 : {id: 25, name: 'hp', display: inThousands, def: true, pc: 75, skPc: 4075, searchable: true },\n      26 : {id: 26, name: 'mp', display: inThousands, def: true, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, dps: true, searchable: true },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, dps: true, pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, dps: true, pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent, dps: true },\n      51 : {id: 51, name: 'agi%', display: toPercent, dps: true },\n      52 : {id: 52, name: 'int%', display: toPercent, dps: true },\n      53 : {id: 53, name: 'vit%', display: toPercent, def: true },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55, dps: true },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57, dps: true },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'pdef%', display: toPercent, def: true },\n      59 : {id: 59, name: 'mdef%', display: toPercent, def: true },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true, def: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true, def: true },\n      62 : {id: 62, name: 'crit%', display: toPercent, dps: true },\n      63 : {id: 63, name: 'crit resist%', display: toPercent, def: true },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true, def: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true, def: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true, def: true },\n      75 : {id: 75, name: 'hp%', display: toPercent, def: true },\n      76 : {id: 76, name: 'mp%', display: toPercent, def: true },\n      77 : {id: 77, name: 'mp recover%', display: toPercent, def: true },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true, def: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true, dps: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true, dps: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, dps: true, pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true, dps: true },\n      105: {id: 104, name: 'pvp dmg', display: inThousands, noCustom: true, dps: true },\n      106: {id: 106, name: 'pvp def', display: inThousands, noCustom: true, def: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true, def: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      \n      1008: {id: 1008, name: 'pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent, dps: true },\n      3001: {id: 3001, name: 'skPDmg%', display: toPercent, dps: true },\n      3002: {id: 3002, name: 'skMDmg%', display: toPercent, dps: true },\n      \n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true, hide: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands, dps: true },\n      4050: {id: 4050, name: 'skStr%', display: toPercent, dps: true },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent, dps: true },\n      4052: {id: 4052, name: 'skInt%', display: toPercent, dps: true },\n      4053: {id: 4053, name: 'skVit%', display: toPercent, def: true },\n      4075: {id: 4075, name: 'skHp%', display: toPercent, def: true },\n      4076: {id: 4076, name: 'skMp%', display: toPercent, def: true },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      // 134 : { id: 134, name: 'p dmg reduction%' },\n      // 135 : { id: 135, name: 'm dmg reduction%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}