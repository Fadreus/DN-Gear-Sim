{"version":3,"sources":["routes.js","about/about.js","filters/filters.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","nav/export.js","nav/nav.js","nav/setup.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","region/region.js","search/custom-items.js","search/item-search.js","search/skill-search.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","widgets/dnsim-string-to-percent.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","otherwise","angular","module","$window","document","body","className","title","filter","input","Math","round","$stateful","hCodeValues","statHelper","saveHelper","itemCategory","$scope","calcStatPercent","newVal","origVal","saveGroup","saveBuildSelection","vm","groupName","savedItems","this","getSavedItems","groupNames","Object","keys","length","getCurrentBuild","summaryStatIds","id","stats","summaryDisplay","push","clearGroup","addAffectAmount","replaceAffectAmount","groupItems","groupCalcStats","$watch","getAddAffectAmount","stat","initAddAffects","getReplaceAffectAmount","statId","itemIndex","item","initReplaceAffects","getGroupCalcStats","group","getCalculatedStats","items","getBuild","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","heroStats","mergeStats","origStats","newItems","newStats","getStat","max","forEach","gItem","index","len","i","getStatName","retVal","element","eleId","elements","name","secondaryElement","getGroupItems","numMatches","str","itemSplit","indexOf","typeName","exchangeType","itemSource","split","sort","a","b","hasMaxExchangable","cat","byName","maxCat","maxExchange","nextGroup","uptoItem","prevGroup","foundGroup","addToGroup","saveItem","replace","replaceItem","newItemList","updatedSavedItems","directive","scope","bindToController","controllerAs","statMap","_","newValue","oldValue","anyChange","Number","found","each","onChange","dntData","$timeout","translations","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","enchantmentStats","setEnchantment","enchantmentNum","EnchantLevel","getStats","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","number","getOption","prevEnchantment","getEnchantments","enchantmentId","isLoaded","enchantDnt","eid","find","fileName","showMaterials","init","materials","itemId","itemCount","num","translate","NameID","NameIDParam","material","icon","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","p","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","msg","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkTypeId","sparkDnt","setTalisman","amount","extraStats","itemFactory","typeId","console","log","files","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","datas","d","getCharmItems","TypeParam1","getPouchItems","boxType","f","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","j","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Disjointamount","getPlates","rows","plateFile","r","row","col","colName","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","s","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","item2","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","transferItemsFileName","initTransfers","transferItem","transfers","t","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","jobs","exportLinkHelper","$routeParams","$location","region","getJobName","allJobs","getAllJobs","job","needJobClass","jobName","preInitItem","anyToLoad","getDntFiles","columns","tryInit","anyLoading","reloadItem","setFullStats","mainDnt","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","fullStats","setLocationByName","scrollTo","decodeItem","getDescription","description","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","handleChange","search","encodeItem","copy","groupHelper","dntReset","reloaded","allLoaded","build","reloadGroup","buildName","progress","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","damageType","enemyStatCaps","playerStatCaps","conversions","baseStats","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","setupBuilds","buildNames","builds","currentGroup","anyItems","createGroup","toggleGroup","url","publish","getBuildStats","itemsByCategory","getItemsByCategory","getSaveDate","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","itemColumnsToLoad","character","pickup","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","headers","pcIndexes","updateRows","pcIndex","rowIndex","makeFakeCells","data","makeCell","click","move","swapEnchantmentNumber","splice","newEnhancementNum","fullStats1","fullStats2","save","selectedCategory","localStorage","category","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","value","setItem","allowMoreItems","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","increasingGemSlots","numItems","numItemText","removeItem","server","newGroup","oldGroupName","damageTypes","newJobs","getFinalJobs","key","setHeroStats","setJob","getStatCap","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","cancel","reset","start","hasOptions","back","pop","testOptions","getById","g","e","h","itemString","itemStr","isLoading","newBuildName","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","noLocationMenu","normalMenu","buildAction","withBuildMenu","isSearch","startedLoading","tlocation","noRegion","dntLocation","getActionUrl","action","getActions","menu","currentBuild","extraCss","$route","dntInit","translationsStatus","progressTranslations","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","buildSearch","onlineService","getClassBuilds","then","jobBuilds","maxDisplay","totalNumResults","jobId","showMoreResults","extra","allResults","getFilteredBuilds","uid","results","result","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","load","user","getUser","handleError","err","show","login","saveProfile","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","getBuildLimit","maxBuilds","getNumStoredBuilds","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","copyLocally","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","customItemCtrl","customItems","currentResults","nameSearch","getResults","getNewStatName","createCustomItem","jobInit","loadResults","lastJobNumber","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideLevel","minLevel","maxLevel","hideRank","rankChecked","hideJob","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","byPath","catName","grades","searchable","savedSearchStatId","navigate","checkedRank","changeSearch","skillSearchCtrl","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","getBaseJobName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","initBoxes","box","sortBy","numBoxes","chooseClass","restrict","onSetJob","chooseClassController","finalJobs","bJob","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","collapse","dnsimCategoryLinksController","collapsed","setCategory","dnsimItemIcon","link","attrs","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","dnsimJobIcon","dnsimJobIconController","JobIcon","dnsimLoading","transclude","alsoShowFor","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","display","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","hasStartedLoading","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","basePath","querySelector","attr","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","searchType","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","deleteNullProperties","set","compressBuild","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","expedition plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","groups","isArray","setCurrentBuild","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","itemCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","dps","1","2","3","4","5","6","7","8","9","10","noCustom","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","105","106","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add"],"mappings":"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A,GACA2W,QAAA,GAEAb,KACA5oB,QAAA,yCACA3K,aAAA,8CACAE,eAAA,yCACAlC,WAAA,4CACAktB,OAAA,oCACAvb,KAAA,OACA8N,SAAA,GACA2W,QAAA,GAEAwB,OACAjrB,QAAA,mCACA3K,aAAA,wCACA2P,KAAA,SACA8N,SAAA,GACA2W,QAAA,GAEAl8B,OACAyS,QAAA,6BACAke,SAAA,8BACA6J,UAAA,+BACA10B,WAAA,gCACAgC,aAAA,kCACAmrB,OAAA,gCACAxb,KAAA,YACA8N,SAAA,GACA2W,QAAA,GACAyB,IACAlrB,QAAA,uCACAke,SAAA,wCACA6J,UAAA,yCACA10B,WAAA,gCACAgC,aAAA;AACA8B,SAAA,iDACAqpB,OAAA,gCACAxb,KAAA,YACA8N,SAAA,GACA2W,QAAA,GACA0B,MACAnrB,QAAA,oCACAke,SAAA,qCACA6J,UAAA,sCACA10B,WAAA,uCACAgC,aAAA,yCACAmrB,OAAA,gCACAxb,KAAA,YACA8N,SAAA,GACA2W,QAAA,GACA2B,OACAprB,QAAA,iCACAke,SAAA,kCACA6J,UAAA,mCACA10B,WAAA,gCACAmtB,OAAA,gCACAxb,KAAA,YACA8N,SAAA,GACA2W,QAAA,GAEA4B,OACArrB,QAAA,wCACAke,SAAA,yCACA6J,UAAA,0CACAvH,OAAA,qCACAxb,KAAA,OACA8N,SAAA,EACA2W,QAAA,GACA6B,OACAtrB,QAAA,wCACAke,SAAA,yCACA6J,UAAA,0CACAvH,OAAA,qCACAxb,KAAA,OACA8N,SAAA,EACA2W,QAAA,GACA8B,OACAvrB,QAAA,wCACAke,SAAA,yCACA6J,UAAA,0CACAvH,OAAA,qCACAxb,KAAA,OACA8N,SAAA,EACA2W,QAAA,GACA+B,MACAxrB,QAAA,kCACAke,SAAA,mCACA6J,UAAA,oCACAvH,OAAA,qCACAxb,KAAA,OACA8N,SAAA,EACA2W,QAAA,GACAgC,OACAzrB,QAAA,mCACAke,SAAA,oCACA6J,UAAA,qCACAvH,OAAA,qCACAxb,KAAA,OACA8N,SAAA,EACA2W,QAAA,GACAiC,OACA1rB,QAAA,qCACAke,SAAA,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","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/build/:buildName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:buildName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      // reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      // reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      // reloadOnSearch: false,\n    }).\n    \n    when('/search/:cat?', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl as ctrl'\n    }).\n    \n    when('/item', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      // reloadOnSearch: false,\n    }).\n    when('/item/:region?/:i*', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      // reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/profile/:uid?', {\n      templateUrl: 'ui/online/profile.html',\n      controller: 'ProfileCtrl as ctrl',\n    }).\n    \n    when('/published', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/published/:uid/:buildName*', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/build-search/:jobId?', {\n      templateUrl: 'ui/online/build-search.html',\n      controller: 'BuildSearchCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n})();","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory','$scope',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory,$scope) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    vm.addAffectAmount = null;\n    vm.replaceAffectAmount = {};\n\n    vm.groupItems = null;\n    vm.groupCalcStats = null\n  }\n\n  $scope.$watch('editCtrl.item', function() {\n    vm.clearGroup();\n  });\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    // console.log('add affect: ', this.addAffectAmount[stat], this.item);\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    // console.log('initialising add affects ');\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = [];\n    if(group.items) {\n      newItems = group.items.concat([vm.item]);\n    }\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues','$scope',\nfunction(hCodeValues,$scope) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n\n  this.statMap = {};\n  \n  // console.log(vm.item.stats);\n  _.forEach(vm.item.stats, function(stat) {\n    // console.log('got stat', stat.id);\n    vm.statMap[stat.id] = stat.max;\n  });\n  \n  for(var statId in hCodeValues.stats) {\n    $scope.$watch('editCtrl.statMap[' + statId + ']', function(newValue, oldValue) { \n\n      if(newValue != oldValue) {\n        // console.log(statId);\n        // console.log('watch got stat value', newValue);\n\n        var anyChange = false;\n        var newStats = [];\n        for(var statId in vm.statMap) {\n\n          if(!vm.statMap[statId] || !Number(vm.statMap[statId])) {\n            _.each(vm.item.stats, function(stat) { \n              if(stat.id == statId) {\n                anyChange = true;\n              }\n            });\n          }\n          else {\n            newStats.push({\n              id: Number(statId),\n              max: Number(vm.statMap[statId])\n            });\n\n            var found = false;\n            _.each(vm.item.stats, function(stat) {\n              if(stat.id == statId) {\n                found = true;\n                // console.log('comparing', stat.max, vm.statMap[statId]);\n                if(!(statId in vm.statMap) || stat.max != vm.statMap[statId]) {\n                  anyChange = true;\n                }\n              } \n            });\n\n            if(!found) {\n              anyChange = true;\n            }\n          }\n        }\n\n        if(anyChange) {\n          // console.log('GOT CHANGES!', newStats);\n          vm.item.stats = newStats;\n          vm.onChange();\n        }\n      }\n    });\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null || vm.itemType == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    console.log('init contents', this.item.fileName);\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        vm.getPouchItems(d.TypeParam1);\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType) {\n    for(var f=0;f<pouchFileNames.length;++f) {\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\n    }\n  }\n  \n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            // console.log('adding item ' + pouchItem);\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\n              // console.log('found item ' + basicItem.name);\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: basicItem\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n\n      var charmData = dntData.getData(charmFiles[i]);\n      console.log('box: ' + boxType, charmData);\n      \n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  var transferItemsFileName = 'enchanttransferitemtable.lzjson';\n  \n  var files = [transferFileName,allItemFileName,transferItemsFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    vm.matchingTransfers = [];\n    \n    var transferItem = dntData.find(transferItemsFileName, 'ItemID', vm.item.id);\n    if(transferItem && transferItem.length > 0) {\n      var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n      \n      for(var i=0;i<transfers.length;++i) {\n        var t = transfers[i];\n        if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n          \n          var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n          var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n          \n          vm.matchingTransfers.push({\n            level: t.ResultLevel,\n            enchantmentNum: t.ResultEnchantLevel,\n            gold: t.NeedCoin/100/100,\n            rank: hCodeValues.rankNames[t.ResultRank],\n            numItem1: t.NeedItemCount1,\n            item1: itemFactory.createBasicItem(item1s[0]),\n            numItem2: t.NeedItemCount2,\n            item2: itemFactory.createBasicItem(item2s[0]),\n          });\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ItemCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory','$timeout',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory,$timeout) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  // console.log('search string: ', $routeParams.i);\n  $scope.item = exportLinkHelper.decodeItem($routeParams.i);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    else if($scope.item.fileName &&\n      dntData.isLoaded($scope.item.fileName + '.lzjson')) {\n        \n      var itemData = dntData.find($scope.item.fileName + '.lzjson', 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      } \n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    // console.log('changes');\n    if($scope.item.itemSource != 'custom') {\n      $location.search('i', exportLinkHelper.encodeItem($scope.item));\n    }\n    else {\n      setFullStats();\n      $scope.item = angular.copy($scope.item);\n    }\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    $scope.preInitItem = $scope.item;\n    $scope.item = null;\n  \n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.preInitItem), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.preInitItem);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n        \n        if(!$scope.item.fileName) {\n          if($scope.item.itemSource in items && items[$scope.item.itemSource].mainDnt) {\n            $scope.item.fileName = items[$scope.item.itemSource].mainDnt.replace('.lzjson', '').replace('.optimised', '');\n          }\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null && $scope.item.typeId != 112) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    // full stats are cleared when publishing builds\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/build/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$routeParams','$timeout','saveHelper',\n  function($window,$location,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('buildName' in $routeParams) {\n      if($routeParams.buildName != this.currentGroup) {\n        this.currentGroup = $routeParams.buildName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/build/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      // console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/build/' + buildName);\n    }\n    \n    this.publish = function() {\n      $location.url('/publish');\n    }\n    \n    this.search = function() {\n      $location.url('/build-search');\n    }\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    // console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/build/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\n    if(vm.category.name in itemsByCat) {\n      return itemsByCat[vm.category.name];\n    }\n    else {\n      return [];\n    }\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.stats = statHelper.getBuildStats(vm.build);\n    vm.onChange();\n  }\n  \n  this.removeItem = function(item) {\n    item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n\n    vm.build.items = newItemList;\n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.handleChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange',\n      server: '=server'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('buildName' in $routeParams) {\n      this.groupName = $routeParams.buildName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function() {\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/build/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      // console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.build.items.push(newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      // console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/build/' + newBuildName);\n    }\n  }]\n);\n","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory','saveHelper',\n  function($scope,$location,translations,region,itemCategory,saveHelper) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n    \n    var buildAction = {path: 'build', name:'build', icon: 'wrench'};\n    \n    var withBuildMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      buildAction,\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    //var basePath = angular.element(document.querySelector('base')).attr('href');\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.getActionUrl = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          return action.path + '?cat=' + cat;\n        }\n        else {\n          return action.path;\n        }\n      }\n      else {\n          return action.path;\n      }\n    }\n      \n    $scope.getActions = function() {\n      // console.log('getting actions');\n      var menu = null;\n      \n      var currentBuild = saveHelper.getCurrentBuild();\n      if(currentBuild) {\n        var savedItems = saveHelper.getSavedItems();\n        if(!(currentBuild in savedItems)) {\n          currentBuild = null;\n        }\n      }\n\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(currentBuild && currentBuild != 'null') {\n        menu = withBuildMenu;\n        buildAction.path = 'build/' + currentBuild;\n        buildAction.name = currentBuild;\n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          if(value.path != 'builds' || $location.path() == '/builds') {\n            value.extraCss = 'active';\n          }\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","(function () {\n'use strict';\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\n\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.maxDisplay = 15;\n  vm.totalNumResults = 0;\n  \n  jobs.init(null, function() {\n    if($routeParams.jobId) {\n      vm.job = jobs.getById($routeParams.jobId);\n      getClassBuilds();\n    } \n  })\n  \n  this.setJob = function() {\n    $timeout(function() {\n      $location.search('jobId', vm.job.id);\n    });\n  }\n  \n  this.showMoreResults = function(extra) {\n    vm.maxDisplay = vm.totalNumResults + extra;\n    vm.totalNumResults = 0;\n  }\n  \n  vm.allResults = null;\n  vm.getFilteredBuilds = function() {\n    \n    // init\n    if(vm.allResults == null) {\n      vm.allResults = [];\n      for(var uid in vm.jobBuilds) {\n        for(var buildName in vm.jobBuilds[uid]) {\n          vm.allResults.push({\n            uid: uid,\n            name: buildName,\n            data: vm.jobBuilds[uid][buildName]\n          });\n        }\n      }\n    }\n    \n    var results = [];\n    for(var i=0;i<vm.allResults.length;++i) {\n      \n      var result = vm.allResults[i];\n      if(vm.filter && vm.filter.length > 0) {\n        var f = vm.filter.toUpperCase();\n        if(result.name.toUpperCase().indexOf(f) == -1) {\n          if(!result.data.guild ||\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\n\n            continue;\n          }\n        }\n      }\n      \n      results.push(result);\n\n      if(results.length >= vm.maxDisplay) {\n        break;\n      }\n    }\n    \n    vm.totalNumResults = results.length;\n    return results;\n  }\n  \n  function getClassBuilds() {\n    if(vm.job) {\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\n        if(builds) {\n          // console.log('got builds', builds);\n          vm.jobBuilds = builds;\n        }\n        else {\n          // console.log('no builds');\n          vm.jobBuilds = {};\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\n\nfunction profile($location, $routeParams, onlineService, saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  \n  getSavedBuilds();\n  getProfile();\n  \n  function getSavedBuilds() {\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\n      if(builds) {\n        vm.storedBuilds = builds;\n      }\n      else {\n        vm.storedBuilds = {};\n      }\n    });\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n    \n    $location.path('/build/' + newGroupName);\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\n\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.show = $routeParams.show;\n  \n  onlineService.login().then(function(user) {\n    getSavedBuilds();\n    getProfile();\n  \n    vm.builds = saveHelper.getSavedItems();\n  });\n  \n  function getSavedBuilds() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\n        if(builds) {\n          vm.storedBuilds = builds;\n        }\n        else {\n          vm.storedBuilds = {};\n        }\n      });\n    }\n  }\n  \n  function getProfile() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getProfile(user.uid).then(function(profile) {\n        if(profile) {\n          vm.profile = profile;\n        }\n        else {\n          vm.profile = {};\n        }\n      });\n    }\n  }\n  \n  this.saveProfile = function() {\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\n  }\n  \n  this.getUser = function() {\n    return onlineService.getUser();\n  }\n  \n  this.save = function(buildName, build) {\n    build.lastUpdate = (new Date()).getTime();\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\n    vm.publishBuild = null;\n  }\n  \n  this.startPublish = function(buildName) {\n    if(buildName in vm.storedBuilds) {\n      if(!vm.builds[buildName].region) {\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\n      }\n      \n      if(!vm.builds[buildName].about) {\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\n      }\n      \n      if(!vm.builds[buildName].guild) {\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\n      }\n    }\n    \n    if(!vm.builds[buildName].region) {\n      vm.builds[buildName].region = region.dntLocation.region;\n    }\n    \n    vm.publishBuild = buildName;\n  }\n  \n  function handleError(err) {\n    console.log(err);\n  }\n  \n  this.deleteAccount = function() {\n    onlineService.deleteAccount(vm.storedBuilds);\n  }\n  \n  this.getBuildLimit = function() {\n    if(vm.profile && vm.profile.maxBuilds) {\n      return vm.profile.maxBuilds;\n    }\n    else {\n      return 15;\n    }\n  }\n  \n  this.getNumStoredBuilds = function() {\n    return _.size(vm.storedBuilds);\n  }\n  \n  this.getNumBuilds = function() {\n    return _.size(vm.builds);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  this.signOut = function() {\n    onlineService.signOut();\n  }\n  \n  vm.deleteLocal = function(buildName) {\n    vm.localToDelete = buildName;\n  }\n  \n  vm.getAllBuildNames = function() {\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\n    return _.uniq(allKeys.sort(), true);\n  }\n  \n  vm.reallyDeleteLocal = function(buildName) {\n    saveHelper.updatedSavedItems(buildName, []);\n    vm.localToDelete = null;\n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  vm.deleteServer = function(buildName) {\n    vm.serverToDelete = buildName;\n  }\n  \n  vm.reallyDeleteServer = function(buildName) {\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\n    vm.serverToDelete = null;\n  }\n  \n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\n\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  vm.buildName = $routeParams.buildName;\n  \n  getBuild();\n  getProfile();\n  \n  vm.copyLocally = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n      \n    $location.path('/build/' + newGroupName);\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  function getBuild() {\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\n      if(build) {\n        vm.build = build;\n        vm.stats = statHelper.getBuildStats(build);\n      }\n      else {\n        vm.build = {};\n      }\n    });\n  }\n}\n\n})();","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n      \n    $scope.region = region;\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n        $route.reload();\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimCustomItems', function() {\n  return {\n    scope: {},\n    bindToController: {\n    },\n    controller: ['$window','saveHelper','$location','hCodeValues','itemCategory','$timeout', customItemCtrl],\n    controllerAs: 'customItems',\n    templateUrl: 'ui/search/custom-items.html'\n  };\n});\n\nfunction customItemCtrl($window,saveHelper,$location,hCodeValues,itemCategory,$timeout) {\n  'use strict';\n\n  var vm = this;\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}\n\n})();","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.itemCategory = itemCategory.byPath($routeParams.cat);\n  if(!vm.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     vm.itemCategory = itemCategory.byName(catName);\n     if(vm.itemCategory) {\n       // console.log('moving');\n       $location.search('cat', vm.itemCategory.path);\n     }\n     return;\n  }\n  \n  $window.document.title = 'DN Gear Sim | ' + vm.itemCategory.name.toUpperCase();\n  \n  vm.job = {id: -1, name: ''};\n  vm.jobs = [vm.job];\n  vm.allJobs = [];\n  vm.minLevel = 1;\n  vm.maxLevel = 99;\n  vm.maxDisplay = 10;\n  vm.totalNumResults = 0;\n  vm.grades = hCodeValues.rankNames;\n  vm.stat = {id:-1, name:''};\n  vm.stats = [vm.stat];\n  vm.results = null;\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.searchable) {\n      vm.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    vm.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    vm.maxLevel = maxLevel;\n  }\n  \n  vm.nameSearch = localStorage.getItem('nameSearch');\n  if(!vm.nameSearch) {\n    vm.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    vm.stat = hCodeValues.stats[savedSearchStatId];\n  }\n\n  vm.navigate = function() {\n    var catName = localStorage.getItem('selectedItemCategory');\n    if(catName) {\n      vm.itemCategory = itemCategory.byName(catName);\n      if(vm.itemCategory) {\n        // console.log('navigating to ', vm.itemCategory.path);\n        $location.search('cat', vm.itemCategory.path);\n      }\n    }\n  }\n\n  vm.save = function() {\n    if(!vm.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', vm.minLevel);\n      localStorage.setItem('maxLevel', vm.maxLevel);\n    }\n    \n    if(!vm.itemCategory.hideJob) {\n      if(vm.job != null) {\n        localStorage.setItem('jobNumber', vm.job.id);\n      }\n    }\n  \n    if(vm.stat) {\n      localStorage.setItem('searchStat', vm.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', vm.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init(vm.itemCategory.name, loadResults);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  vm.rankChecked = hCodeValues.checkedRank;\n    \n  vm.changeSearch = function() {\n    vm.save();\n    loadResults();\n  }\n  \n  function loadResults() {\n    $timeout(function() {\n      vm.maxDisplay = 24;\n      vm.results = getResults();\n    });\n  }\n  \n  function getResults() {\n    // console.log('getting items');\n    var allItems = itemCategory.getItems(vm.itemCategory.name);\n    if(allItems == null) {\n      // console.log('no items');\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n          \n    var pcStatId = -1;\n    if('pc' in vm.stat) {\n      pcStatId = vm.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<vm.maxDisplay || vm.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e) {\n        \n        if(!vm.itemCategory.hideLevel) {\n          if(e.levelLimit < vm.minLevel || e.levelLimit > vm.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!vm.itemCategory.hideRank) {\n          if(e.rank && !vm.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!vm.itemCategory.hideJob) {\n          if(vm.job && vm.job.id > -1) {\n            if(!vm.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != vm.itemCategory.name) {\n          continue;\n        }\n        // console.log('name filter', vm.nameSearch); \n        \n        if(vm.nameSearch != '') {\n          // console.log('filtering on name');\n          var nameSearches = vm.nameSearch.split(' ');\n          if(!nameSearches.length) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if(vm.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s];\n            if(stat.id == vm.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if(vm.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, vm.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    vm.totalNumResults = newResults.length;\n    \n    return newResults;\n  }\n\n  vm.showMoreResults = function() {\n    $timeout(function() {\n      vm.maxDisplay += 18;\n      vm.results = getResults();\n    });\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n  \n}]);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimSkillSearch', function() {\n  return {\n    scope: {},\n    bindToController: {\n      job: '=job',\n      jobs: '=jobs',\n    },\n    controller: ['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues','itemCategory','$location', skillSearchCtrl],\n    controllerAs: 'skillSearch',\n    templateUrl: 'ui/search/skill-search.html'\n  };\n});\n\nfunction skillSearchCtrl($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues,itemCategory,$location) {\n\n  var vm = this;\n  \n  vm.allJobs = [];\n  vm.dntName = '';\n  vm.skills = [];\n  vm.loadedJobId = -1;\n\n  vm.itemCategory = itemCategory.byName('skills');\n\n  vm.nameSearch = localStorage.getItem('nameSearch');\n  if(!vm.nameSearch) {\n    vm.nameSearch = '';\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  vm.navigate = function() {\n    $timeout(function() {\n      if(vm.itemCategory) {\n        $location.path(vm.itemCategory.path);\n      }\n    });\n  }\n  \n  vm.isLoading = function() {\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() { setupSkills(baseJobNames, vm.job);} ); });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  vm.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  vm.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    if(vm.job && vm.job.id >= 0) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills;++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(!nameSearches.length) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n    }\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      if(vm.jobs && vm.jobs.length) {\n        newJobs.splice(0, 0, vm.jobs[0]);\n      }\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      // console.log('using job', lastJobNumber);\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            // console.log('using job', value);\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}\n\n})();","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    vm.boxes = null;\n    vm.maxDisplay = 32;\n    vm.currentResults = 0;\n    vm.results = null;\n\n    vm.nameSearch = localStorage.getItem('itemNameSearch');\n    if(vm.nameSearch == null) {\n      vm.nameSearch = '';\n    }\n    \n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    vm.initBoxes = function() {\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: translations.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n        \n        vm.boxes = _.sortBy(vm.boxes, 'name');\n        \n        $timeout(function() {\n          vm.showMoreResults();\n        });\n      }\n    }\n    \n    vm.getResults = function() {\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return [];\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n    \n    vm.changeSearch = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      \n      vm.maxDisplay = 64;\n      vm.results = vm.getResults();\n    }\n  \n    vm.showMoreResults = function() {\n      $timeout(function() {\n        // console.log('show more', vm.maxDisplay);\n        vm.maxDisplay += 18;\n        vm.results = vm.getResults();\n      });\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\n\nfunction chooseClass() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      job: '=job',\n      onSetJob: '&onSetJob'\n    },\n    templateUrl: 'ui/widgets/choose-class.html',\n    controllerAs: 'ctrl',\n    controller: [\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \n      chooseClassController],\n  };\n}\n\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    if(job) {\n      this.onSetJob();\n    }\n  }\n  \n  \n  jobs.init(reportProgress, $timeout);\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      collapse: '=collapse',\n      cat: '=cat',\n      onChange: '&onChange'\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    controller: ['itemCategory', dnsimCategoryLinksController],\n    controllerAs: 'ctrl',\n  };\n};\n\nfunction dnsimCategoryLinksController(itemCategory) {\n\n  var vm = this;\n\n  vm.categories = itemCategory.categories;\n  vm.collapsed = true;\n\n  vm.setCategory = function(action) {\n    // console.log('setting cat', action);\n    vm.cat = action;\n    localStorage.setItem('selectedItemCategory', action.name);\n    \n    if(vm.collapse) {\n      vm.collapsed = !vm.collapsed;\n    }\n\n    if(vm.onChange) {\n      vm.onChange();\n    }\n  }\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = 'item/?region=' + region.dntLocation.region + '&i=' + exportLinkHelper.encodeItem($scope.item);\n      // var basePath = angular.element(document.querySelector('base')).attr('href');\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = 'item/?region=' + region.dntLocation.region + '&i=' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', [dnsimJobIcon]);\n\nfunction dnsimJobIcon() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    controller: dnsimJobIconController,\n    controllerAs: 'ctrl'\n  }\n}\n\nfunction dnsimJobIconController() {\n\n  this.getIconXPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return ((this.item.d.JobIcon % 9) * 44) + 5;\n    }\n    return 0;\n  }\n  \n  this.getIconYPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return (Math.floor(this.item.d.JobIcon / 9) * 44) + 5;\n    }\n    return 0;\n  }\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      alsoShowFor: '=alsoShowFor',\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.numLoading = 0;\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if(!$scope.filter && 'hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToPercent', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + (value/100.0);\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10)*100;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation && \n              this.dntLocation.url &&\n              this.dntLocation.url.length) {\n\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!progress) {\n        progress = function() {};\n      }\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n\n  return {\n    \n    encodeItem: function(item, small) {\n      if(item) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C';\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n          else if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString && itemString.length) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = 'view-group?region=' + region.dntLocation.region;\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal;\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var basePath = angular.element(document.querySelector('base')).attr('href');\n      var longUrl = window.location.href.split(basePath)[0] + basePath + path;\n      var data = { longUrl: longUrl };\n      console.log('getting short url for ', longUrl);\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        // console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(!ds.length) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(!ps.length) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(!ps.length) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(!ps.length) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, hideLevel: true, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, hideLevel: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true, hideLevel: true,},\n      {path: 'skills', name:'skills', searchType: 'skills'},\n      {path: 'custom', name:'custom', searchType: 'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal) {\n            if(!source.items && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      \n      if(item.itemType == cat.name) {\n        return true;\n      }\n      \n      if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n\n      return false;\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item && !(item.typeName in itemMap)) {\n            // console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 9 &&\n        dType != 11 &&\n        dType != 12 &&\n        dType != 13 &&\n        dType != 18 &&\n        dType != 19 &&\n        dType != 20 &&\n        dType != 21 &&\n        dType != 24 &&\n        dType != 29 &&\n        dType != 46 &&\n        dType != 51 &&\n        dType != 74 &&\n        dType != 75 &&\n        dType != 76 &&\n        dType != 78 &&\n        dType != 79 &&\n        dType != 84 &&\n        dType != 100 &&\n        dType != 112 &&\n        dType != 114 &&\n        dType != 115 &&\n        dType != 116 &&\n        dType != 122 &&\n        dType != 142 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 182 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(!potentials.length && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var numPotentials = potentials.length;\n          if(!numPotentials) {\n            itemType.items.push(createItem(itemType.name, d, null, 0));\n          }\n          else {\n            var totalRatio = 0;\n            for(var p=0;p<numPotentials;++p) {\n              totalRatio += potentials[p].PotentialRatio;\n            }\n            \n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio === null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.optimised.lzjson', \n        partsDnt: 'partstable_common2016.optimised.lzjson', \n        weaponDnt: 'weapontable_common2016.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      if(data) {\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          if(data[r].id == id) {\n            return data[r];\n          }\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\n\nfunction onlineService($window, $q, hCodeValues) {\n  console.log('setup online service');\n  \n  var service = {\n    login: login,\n    getUser: function() {\n      return firebase.auth().currentUser;\n    },\n    signOut: signOut,\n    deleteAccount: deleteAccount,\n    \n    getUserBuilds: getUserBuilds,\n    deleteBuild: deleteBuild,\n    saveBuild: saveBuild,\n    getBuild: getBuild,\n    getClassBuilds: getClassBuilds,\n    \n    getProfile: getProfile,\n    saveProfile: saveProfile,\n  };\n  \n  init();\n  \n  return service;\n  \n  function init() {\n    console.log('init');\n    firebase.initializeApp({\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\n      authDomain: \"dngearsim.firebaseapp.com\",\n      databaseURL: \"https://dngearsim.firebaseio.com\",\n      storageBucket: \"dngearsim.appspot.com\",\n    });\n  }\n  \n  function login() {\n    return $q(function(resolve, reject) {\n      var auth = firebase.auth();\n        \n      auth.onAuthStateChanged(function(user) {\n        if(user == null) {\n          console.log('redirecting');\n          $window.location.href = 'login.html';\n        }\n        else {\n          console.log('logged in');\n          resolve(user);\n        }\n      });\n    });\n  }\n  \n  function getProfile(uid) {\n    console.log('get profile');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(storedProfile.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getBuild(uid, buildName) {\n    console.log('get build');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(decompressBuild(storedProfile.val()));\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function saveProfile(profile) {\n    return $q(function(resolve, reject) {\n      var user = service.getUser();\n      if(user) {\n        profile = angular.copy(profile);\n        deleteNullProperties(profile, true);\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\n      }\n    });\n  }\n  \n  function getUserBuilds(uid) {\n    console.log('get builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds');\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\n        if(storedBuilds) {\n          var retVal = {};\n          var val = storedBuilds.val();\n          for(var buildName in val) {\n            retVal[buildName] = decompressBuild(val[buildName]);\n          }\n          resolve(retVal);\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getClassBuilds(job) {\n    console.log('get class builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds', job.id);\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\n        console.log('ok');\n        if(jobBuilds) {\n          resolve(jobBuilds.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function compressBuild(build) {\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        delete item.fullStats;\n      });\n    }\n    \n    var stringifiedData = JSON.stringify(build);\n    return LZString.compressToUTF16(stringifiedData);\n  }\n  \n  function decompressBuild(compressedBuild) {\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\n    var build = JSON.parse(stringifiedData);\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        item.fullStats = item.stats;\n        \n        if(item.enchantmentStats && item.enchantmentStats.length) {\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\n        }\n        \n        if(item.sparkStats && item.sparkStats.length) {\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\n        }\n      });\n    }\n    \n    return build;\n  }\n  \n  function saveBuild(buildName, build) {\n    var user = service.getUser();\n    var actions = [];\n    if(user) {\n      build = angular.copy(build);\n      deleteNullProperties(build, true);\n      // console.log('saving', build);\n      actions.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\n      );\n      \n      if(build.job && build.job.id) {\n        console.log('saving build');\n          \n        var data = {};\n        if(build.playerLevel) {\n          data.lev = build.playerLevel;\n        }\n        if(build.region) {\n          data.region = build.region;\n        }\n        if(build.guild) {\n          data.guild = build.guild;\n        }\n        if(build.about) {\n          data.about = build.about;\n        }\n        \n        deleteNullProperties(data, true);\n          \n        actions.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\n        );\n      }\n    }\n    return $q.all(actions);\n  }\n  \n  function deleteNullProperties(test, recurse) {\n    for (var i in test) {\n        if (test[i] === undefined) {\n            delete test[i];\n        } else if (recurse && typeof test[i] === 'object') {\n            deleteNullProperties(test[i], recurse);\n        }\n    }\n  }\n  \n  function signOut() {\n    var auth = firebase.auth();\n    return $q(function(resolve, reject) {\n      auth.signOut().then(function() {\n        resolve();\n      }, function(error) {\n        reject();\n      });\n    });\n  }\n  \n  function deleteAccount(builds) {\n    var auth = firebase.auth();\n    var user = service.getUser();\n    \n    return $q(function(resolve, reject) {\n      \n      var pList = [\n        firebase.database().ref('builds/' + user.uid).remove(),\n        firebase.database().ref('profile/' + user.uid).remove(),\n        firebase.database().ref('private/' + user.uid).remove()];\n        \n      var jobIds = [];\n      for(var buildName in builds) {\n        if(builds[buildName].job) {\n          jobIds.push(builds[buildName].job.id)\n        }\n      }\n      \n      jobIds = _.uniq(jobIds);\n      _.each(jobIds, function(id) {\n        pList.push(\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\n        )\n      });\n        \n      $q.all(pList).then(function() {\n        console.log('deleted data');\n        user.delete().then(function() {\n          console.log('deleted user');\n          auth.signOut().then(function() {\n            console.log('signed out');\n            resolve();\n          }, function(error) {\n            reject();\n          });\n        });\n      });\n    });\n  }\n  \n  function deleteBuild(buildName, build) {\n    \n    var pList = [];\n    var user = service.getUser();\n    if(user) {\n      pList.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\n      \n      if(build.job) {\n        pList.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\n      }\n    }\n    \n    return $q.all(pList);\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            if(build.items) {\n              for(var i=0;i<build.items.length;++i) {\n                if(build.items[i].exchangeType == exId) {\n                  numExchange++;\n                }\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality high grade' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            // todo: change this to use the name id\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n              \n            if(id == 999) {\n              return index === 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality high grade epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n            if(id == 999) {\n              return item.rank.id == 3 && index >= 0;\n            }\n            else {\n              return item.rank.id == id && index < 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n              case 1313: // Jakard's Demise\n              case 2032: // Sharing Goddess's Grief\n              case 2033: // Grief-stricken\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 15, name: 'enhance to +15' },\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'expedition plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      {region: 'ina', name: 'indonesian files from gemscool', url : 'https://inafiles-da491.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      this.setCurrentBuild(buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(!updatedItems.length) {\n          delete items[groupName];\n          this.setCurrentBuild(null);\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    currentBuild: null,\n    getCurrentBuild: function() {\n      if(!this.currentBuild) {\n        this.currentBuild = localStorage.getItem('currentGroup');\n        if(this.currentBuild) {\n          var savedItems = this.getSavedItems();\n          if(!(this.currentBuild in savedItems)) {\n            localStorage.removeItem('currentGroup');\n            this.currentBuild = null;\n          }\n        }\n      }\n      \n      return this.currentBuild;\n    },\n    \n    setCurrentBuild: function(buildName) {\n      this.currentBuild = buildName;\n      localStorage.setItem('currentGroup', buildName);\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value !== null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value) {\n          \n          if(value.fullStats) {\n            stats = stats.concat(value.fullStats);\n          }\n          else if(value.stats) {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps || !group.playerStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      var itemCrit = dupeStat(1012);\n      \n      var critChance = Math.min(0.89, (crit.max / Number(group.enemyStatCaps.Ccritical)) + itemCrit.max);\n      retVal.push({id: 1012, max: critChance});\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.playerStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats && build.heroStats.length) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.optimised.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, dps: true, pc: 50, skPc: 4050, searchable: true },\n      1  : {id: 1, name: 'agi', display: toNoDec, dps: true, pc: 51, skPc: 4051, searchable: true },\n      2  : {id: 2, name: 'int', display: toNoDec, dps: true, pc: 52, skPc: 4052, searchable: true },\n      3  : {id: 3, name: 'vit', display: toNoDec, def: true, pc: 53, skPc: 4053, searchable: true },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, dps: true, pc: 54, searchable: true },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, dps: true, pc: 56, searchable: true },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'pdef', display: inThousands, def: true, pc: 58, searchable: true },\n      9  : {id: 9, name: 'mdef', display: inThousands, def: true, pc: 59, searchable: true },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, dps: true, pc: 62, searchable: true },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, dps: true, searchable: true },\n      17 : {id: 17, name: 'ice%', display: toPercent, dps: true, searchable: true },\n      18 : {id: 18, name: 'light%', display: toPercent, dps: true, searchable: true },\n      19 : {id: 19, name: 'dark%', display: toPercent, dps: true, searchable: true },\n      20 : {id: 20, name: 'fire def', display: toPercent, def: true, searchable: true },\n      21 : {id: 21, name: 'ice def', display: toPercent, def: true, searchable: true },\n      22 : {id: 22, name: 'light def', display: toPercent, def: true, searchable: true },\n      23 : {id: 23, name: 'dark def', display: toPercent, def: true, searchable: true },\n      25 : {id: 25, name: 'hp', display: inThousands, def: true, pc: 75, skPc: 4075, searchable: true },\n      26 : {id: 26, name: 'mp', display: inThousands, def: true, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, dps: true, searchable: true },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, dps: true, pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, dps: true, pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent, dps: true },\n      51 : {id: 51, name: 'agi%', display: toPercent, dps: true },\n      52 : {id: 52, name: 'int%', display: toPercent, dps: true },\n      53 : {id: 53, name: 'vit%', display: toPercent, def: true },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55, dps: true },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57, dps: true },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'pdef%', display: toPercent, def: true },\n      59 : {id: 59, name: 'mdef%', display: toPercent, def: true },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true, def: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true, def: true },\n      62 : {id: 62, name: 'crit%', display: toPercent, dps: true },\n      63 : {id: 63, name: 'crit resist%', display: toPercent, def: true },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true, def: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true, def: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true, def: true },\n      75 : {id: 75, name: 'hp%', display: toPercent, def: true },\n      76 : {id: 76, name: 'mp%', display: toPercent, def: true },\n      77 : {id: 77, name: 'mp recover%', display: toPercent, def: true },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true, def: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true, dps: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true, dps: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, dps: true, pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true, dps: true },\n      105: {id: 104, name: 'pvp dmg', display: inThousands, noCustom: true, dps: true },\n      106: {id: 106, name: 'pvp def', display: inThousands, noCustom: true, def: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true, def: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      \n      1008: {id: 1008, name: 'pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent, dps: true },\n      3001: {id: 3001, name: 'skPDmg%', display: toPercent, dps: true },\n      3002: {id: 3002, name: 'skMDmg%', display: toPercent, dps: true },\n      \n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true, hide: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands, dps: true },\n      4050: {id: 4050, name: 'skStr%', display: toPercent, dps: true },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent, dps: true },\n      4052: {id: 4052, name: 'skInt%', display: toPercent, dps: true },\n      4053: {id: 4053, name: 'skVit%', display: toPercent, def: true },\n      4075: {id: 4075, name: 'skHp%', display: toPercent, def: true },\n      4076: {id: 4076, name: 'skMp%', display: toPercent, def: true },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      // 134 : { id: 134, name: 'p dmg reduction%' },\n      // 135 : { id: 135, name: 'm dmg reduction%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}