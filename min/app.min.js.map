{"version":3,"sources":["routes.js","about/about.js","nav/export.js","nav/nav.js","nav/setup.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","region/region.js","filters/filters.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","search/custom-items.js","search/item-search.js","search/skill-search.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","widgets/dnsim-string-to-percent.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","$scope","saveHelper","rawSavedData","getSavedItems","exportData","JSON","stringify","save","localStorage","setItem","LZString","compressToUTF16","$location","translations","region","itemCategory","aboutAction","path","name","icon","noLocationMenu","normalMenu","buildAction","withBuildMenu","init","isSearch","indexOf","isLoading","startedLoading","isLoaded","tlocation","url","noRegion","dntLocation","fireAction","action","cat","getItem","getActions","menu","currentBuild","getCurrentBuild","savedItems","forEach","value","key","extraCss","length","directive","$route","$timeout","dntInit","dntReset","translationsStatus","progressTranslations","translate","progress","msg","testResults","push","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","sessionStorage","removeItem","reset","resetSessionData","clear","this","hash","reload","loadUiString","setCustomUrl","testLocation","hCodeValues","statHelper","calcStatPercent","newVal","origVal","Math","round","saveGroup","saveBuildSelection","vm","groupName","groupNames","Object","keys","summaryStatIds","id","stats","summaryDisplay","clearGroup","addAffectAmount","replaceAffectAmount","groupItems","groupCalcStats","$watch","getAddAffectAmount","stat","initAddAffects","getReplaceAffectAmount","statId","itemIndex","item","initReplaceAffects","getGroupCalcStats","group","getCalculatedStats","items","getBuild","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","heroStats","mergeStats","origStats","newItems","newStats","getStat","max","gItem","index","len","i","getStatName","retVal","element","eleId","elements","secondaryElement","getGroupItems","numMatches","str","itemSplit","typeName","exchangeType","itemSource","split","sort","a","b","hasMaxExchangable","byName","maxCat","maxExchange","nextGroup","uptoItem","prevGroup","foundGroup","addToGroup","saveItem","replace","replaceItem","newItemList","updatedSavedItems","scope","bindToController","controllerAs","statMap","_","newValue","oldValue","anyChange","Number","found","each","onChange","dntData","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","enchantmentStats","setEnchantment","enchantmentNum","EnchantLevel","getStats","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","number","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","find","fileName","showMaterials","materials","itemId","itemCount","num","NameID","NameIDParam","material","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","p","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkTypeId","sparkDnt","setTalisman","amount","extraStats","itemFactory","typeId","console","log","files","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","datas","d","getCharmItems","TypeParam1","getPouchItems","boxType","f","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","j","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Disjointamount","getPlates","rows","plateFile","r","row","col","colName","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","s","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","item2","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","transferItemsFileName","initTransfers","transferItem","transfers","t","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","jobs","exportLinkHelper","$routeParams","getJobName","allJobs","getAllJobs","job","needJobClass","jobName","preInitItem","anyToLoad","getDntFiles","columns","tryInit","anyLoading","reloadItem","setFullStats","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","fullStats","setLocationByName","scrollTo","decodeItem","getDescription","description","mainDnt","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","handleChange","encodeItem","copy","buildSearch","onlineService","getClassBuilds","then","builds","jobBuilds","maxDisplay","totalNumResults","jobId","getById","setJob","showMoreResults","extra","allResults","getFilteredBuilds","uid","buildName","data","results","result","filter","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","openServer","load","build","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","damageType","enemyStatCaps","playerStatCaps","conversions","baseStats","publish","user","getUser","handleError","err","show","login","saveProfile","lastUpdate","Date","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","openLocal","getBuildLimit","maxBuilds","getNumStoredBuilds","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","getBuildStats","copyLocally","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","input","$stateful","groupHelper","reloaded","allLoaded","reloadGroup","deleteGroup","editGroup","copyGroup","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","setupBuilds","buildNames","currentGroup","anyItems","createGroup","toggleGroup","search","itemsByCategory","getItemsByCategory","getSaveDate","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","itemColumnsToLoad","character","pickup","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","updateRows","headers","pcIndexes","pcIndex","rowIndex","makeFakeCells","makeCell","click","move","swapEnchantmentNumber","splice","newEnhancementNum","fullStats1","fullStats2","selectedCategory","category","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","allowMoreItems","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","increasingGemSlots","numItems","numItemText","server","newGroup","oldGroupName","damageTypes","getFinalJobs","finalJobs","getBaseJobName","bJob","newJobs","setHeroStats","getStatCap","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","cancel","start","hasOptions","back","pop","testOptions","g","e","h","itemString","itemStr","newBuildName","customItemCtrl","customItems","currentResults","nameSearch","getResults","getNewStatName","createCustomItem","jobInit","lastJobNumber","byPath","catName","minLevel","maxLevel","grades","searchable","savedSearchStatId","navigate","hideLevel","hideJob","rankChecked","checkedRank","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideRank","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","skillSearchCtrl","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","translationsInit","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","boxeContents","initBoxes","box","numBoxes","nameId","nameParam","chooseClass","restrict","onSetJob","chooseClassController","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","collapse","dnsimCategoryLinksController","collapsed","setCategory","dnsimItemIcon","link","attrs","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","openItem","dnsimJobIcon","dnsimJobIconController","JobIcon","dnsimLoading","transclude","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","display","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","hasStartedLoading","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","searchType","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","deleteNullProperties","set","compressBuild","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","unique plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","setCurrentBuild","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","itemCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","dps","1","2","3","4","5","6","7","8","9","10","noCustom","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","105","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add"],"mappings":"CAAA,WACA,YAIA,SAAAA,GAAAC,GAEAA,EAEAC,KAAA,UACAC,YAAA,sBACAC,WAAA,uBAGAF,KAAA,UACAC,YAAA,oBACAC,WAAA,cAEAF,KAAA,SACAC,YAAA,mBACAC,WAAA,aAGAF,KAAA,WACAC,YAAA,wBACAC,WAAA,uBAGAF,KAAA,KACAG,WAAA,YAEAH,KAAA,WACAC,YAAA,4BACAC,WAAA,+BAEAF,KAAA,sBACAC,YAAA,4BACAC,WAAA,+BAEAF,KAAA,wBACAC,YAAA,4BACAC,WAAA,kBAEAF,KAAA,2BACAC,YAAA,4BACAC,WAAA,6BACAE,gBAAA,IAEAJ,KAAA,cACAC,YAAA,4BACAC,WAAA,6BACAE,gBAAA,IAEAJ,KAAA,wBACAC,YAAA,8BACAC,WAAA,iCACAE,gBAAA,IAGAJ,KAAA,sBACAC,YAAA,6BACAC,WAAA,mBAGAF,KAAA,sBACAC,YAAA,oBACAC,WAAA,WACAE,gBAAA,IAGAJ,KAAA,WACAC,YAAA,qBACAC,WAAA,eAGAF,KAAA,cACAC,YAAA,iCACAC,WAAA,+BAGAF,KAAA,YACAC,YAAA,yBACAC,WAAA,wBAGAF,KAAA,YACAC,YAAA,yBACAC,WAAA,wBAGAF,KAAA,iBACAC,YAAA,yBACAC,WAAA,wBAGAF,KAAA,+BACAC,YAAA,2BACAC,WAAA,0BAGAF,KAAA,yBACAC,YAAA,8BACAC,WAAA,4BAGAG,WACAF,WAAA,YAvGAG,QAAAC,OAAA,SAAAT,QAAA,iBAAAA,OCHA,WACA,YACAQ,SAAAC,OAAA,SACAL,WAAA,aACA,UACA,SAAAM,GAEAC,SAAAC,KAAAC,UAAA,eACAH,EAAAC,SAAAG,MAAA,oBCRAN,QAAAC,OAAA,SAAAL,WAAA,cACA,SAAA,UAAA,aACA,SAAAW,EAAAL,EAAAM,GACA,YAEAL,UAAAC,KAAAC,UAAA,eACAH,EAAAC,SAAAG,MAAA,sBAEA,IAAAG,GAAAD,EAAAE,eACAH,GAAAI,WAAAC,KAAAC,UAAAJ,EAAA,KAAA,GAEAF,EAAAO,KAAA,WACAC,aAAAC,QAAA,aAAAC,SAAAC,gBAAAX,EAAAI,iBCZAX,QAAAC,OAAA,SAAAL,WAAA,WACA,SAAA,YAAA,eAAA,SAAA,eAAA,aACA,SAAAW,EAAAY,EAAAC,EAAAC,EAAAC,EAAAd,GACA,YAEA,IAAAe,IAAAC,KAAA,QAAAC,KAAA,GAAAC,KAAA,iBAGAC,GAAAJ,GACAK,IACAJ,KAAA,SAAAC,KAAA,SAAAC,KAAA,WACAF,KAAA,SAAAC,KAAA,OAAAC,KAAA,WACAF,KAAA,QAAAC,KAAA,QAAAC,KAAA,UACAH,GAGAM,GAAAL,KAAA,QAAAC,KAAA,QAAAC,KAAA,UAEAI,IACAN,KAAA,SAAAC,KAAA,SAAAC,KAAA,UACAG,GACAL,KAAA,SAAAC,KAAA,OAAAC,KAAA,WACAF,KAAA,QAAAC,KAAA,QAAAC,KAAA,UACAH,EAGAF,GAAAU,OAEAxB,EAAAyB,SAAA,WACA,MAAA,IAAAb,EAAAK,OAAAS,QAAA,YAGA1B,EAAA2B,UAAA,WACA,MAAAd,GAAAe,iBACAf,EAAAgB,YACA,MAAAf,EAAAgB,WACA,IAAAhB,EAAAgB,UAAAC,MACA/B,EAAAgC,YAGAhC,EAAAgC,SAAA,WACA,MAAA,OAAAlB,EAAAmB,aAGAjC,EAAAkC,WAAA,SAAAC,GACA,GAAA,UAAAA,EAAAjB,KAAA,CACA,GAAAkB,GAAA5B,aAAA6B,QAAA,uBAAAF,EAAAjB,KACAkB,GACAxB,EAAAK,KAAA,IAAAkB,EAAAlB,KAAA,IAAAmB,GAGAxB,EAAAK,KAAA,IAAAkB,EAAAlB,UAIAL,GAAAK,KAAA,IAAAkB,EAAAlB,OAIAjB,EAAAsC,WAAA,WAEA,GAAAC,GAAA,KAEAC,EAAAvC,EAAAwC,iBACA,IAAAD,EAAA,CACA,GAAAE,GAAAzC,EAAAE,eACAqC,KAAAE,KACAF,EAAA,MAoCA,MAhCA,OAAA1B,EAAAmB,aAAA,IAAAnB,EAAAmB,YAAAF,IACAQ,EAAAnB,EAEA,MAAAN,EAAAgB,WAAA,IAAAhB,EAAAgB,UAAAC,IACAQ,EAAAnB,EAEAoB,GAAA,QAAAA,GACAD,EAAAhB,EACAD,EAAAL,KAAA,SAAAuB,EACAlB,EAAAJ,KAAAsB,GAGAD,EADA,eAAA3B,EAAAK,QAAA,MAAAH,EAAAmB,YACAZ,EAGAA,EAGA5B,QAAAkD,QAAAJ,EAAA,SAAAK,EAAAC,SACAD,GAAAE,SACA,GAAAlC,EAAAK,OAAA8B,OACA,GAAAH,EAAA3B,KAAA8B,SACAH,EAAAE,SAAA,UAGAF,EAAA3B,KAAA8B,OAAA,GAAA,GAAAnC,EAAAK,OAAAS,QAAA,IAAAkB,EAAA3B,QACA,UAAA2B,EAAA3B,MAAA,WAAAL,EAAAK,SACA2B,EAAAE,SAAA,aAKAP,MAIAS,UAAA,eAAA,WACA,OACA5D,YAAA,qBC7GAK,QAAAC,OAAA,SAAAL,WAAA,aACA,SAAA,UAAA,SAAA,WAAA,eAAA,UAAA,WAAA,SACA,SAAAW,EAAAL,EAAAsD,EAAAC,EAAArC,EAAAsC,EAAAC,EAAAtC,GACA,YA+DA,SAAAuC,KACAC,EAAA,2CAAAzC,EAAA0C,UAAA,KAAA,KAAA1C,EAAA0C,UAAA,KAAA,QAAA1C,EAAA0C,UAAA,MACAvD,EAAA2B,WAAA,EAGA,QAAA6B,GAAAC,GACAP,EACA,WACA,MAAAlD,EAAA0D,aACA1D,EAAA0D,YAAAC,KAAAF,KAKA,QAAAH,GAAAG,GACAP,EACA,WACA,MAAAlD,EAAA4D,oBACA5D,EAAA4D,mBAAAD,KAAAF,KA/EA7D,SAAAC,KAAAC,UAAA,eACAH,EAAAC,SAAAG,MAAA,sBAEAC,EAAA6D,eAAA,EACA7D,EAAA2B,UAAAd,EAAAe,iBAAAf,EAAAgB,WACA7B,EAAA4D,sBACA5D,EAAA8D,YAAAhD,EAAAgD,WAEA,IAAAC,GAAA,GACAC,EAAAlD,EAAAmD,iBAAAlC,GACA,OAAAiC,IACAA,EAAAD,GAGA/D,EAAAkE,SAAAF,EACAhE,EAAAkE,UAAAH,EACA/D,EAAA0D,aAAA,mBAGA1D,EAAA0D,aAAA,kBAAA1D,EAAAkE,UAGAlE,EAAAmE,YAAA,SAAApC,GACA/B,EAAAkE,SAAAnC,EACA/B,EAAA2B,WAAA,EACA3B,EAAAoE,eACAhB,IAEApD,EAAA4D,qBACA,IAAAS,GAAA7D,aAAA6B,QAAA,iBACA,OAAAgC,GAAAA,EAAA3C,QAAAK,QACAuC,eAAAC,WAAA,aAEA1D,EAAA2D,QACA3D,EAAAqD,SAAAnC,EACAlB,EAAAW,KAAA8B,EAAAD,IAGArD,EAAAyE,iBAAA,WACAzE,EAAA0D,aAAA,uCACA5C,EAAAgB,UAAA,KACAhB,EAAAmB,YAAA,KACApB,EAAA2D,QACAF,eAAAI,QACAlE,aAAAkE,QACAC,KAAAP,eACAlB,EAAA,WACAgB,SAAAU,KAAA,GACAV,SAAAW,QAAA,MAIA7E,EAAA8E,aAAA,WACA9E,EAAA4D,sBACAU,eAAAC,WAAA,aACAnB,IACAvC,EAAA2D,QACA3D,EAAAqD,SAAApD,EAAAgB,UAAAC,IACAlB,EAAAW,KAAA8B,EAAAD,IA0BArD,EAAAoE,aAAA,WACAhB,IACApD,EAAAkE,UAAAH,IACAjD,EAAAiE,aAAA/E,EAAAkE,UAEApD,EAAAU,OACAV,EAAAmD,iBAAAnD,QAAAA,EAAAgB,UAAAhB,SACAD,EAAA2D,QACA3D,EAAAW,KAAA8B,EAAAD,IAEArD,EAAA0D,aACA,iBACA,kBAAA1D,EAAAkE,YAIAlE,EAAAgF,aAAA,WACAhF,EAAAkE,UAAAH,IACA/D,EAAA0D,aACA,kBAAA1D,EAAAkE,SACA,oCAEArD,EAAAW,KAAAgC,EAAA,WACAL,EAAAK,UChHA/D,QAAAC,OAAA,SAAAL,WAAA,uBAEA,cAAA,aAAA,aAAA,eAAA,SACA,SAAA4F,EAAAC,EAAAjF,EAAAc,EAAAf,GACA,YAuIA,SAAAmF,GAAAC,EAAAC,GACA,MAAAD,IAAAC,EAEAC,KAAAC,MAAA,KAAA,EAAAF,EAAAD,IAAA,IAGA,EAuLA,QAAAI,KACAvF,EAAAwF,mBAAAC,EAAAC,UAAAD,EAAAhD,YAnUA,GAAAgD,GAAAf,IAoBA,IAlBAA,KAAAjC,WAAAzC,EAAAE,gBACAwE,KAAAiB,WAAAC,OAAAC,KAAAnB,KAAAjC,YACAiC,KAAAiB,aACAjB,KAAAiB,eAEAjB,KAAAiB,WAAA7C,OAAA,EACA4B,KAAAgB,UAAA1F,EAAAwC,kBAGAkC,KAAAgB,UAAA,KAGAhB,KAAAgB,WAAAhB,KAAAgB,YAAAhB,MAAAjC,YACAiC,KAAAiB,WAAA7C,OAAA,IACA4B,KAAAgB,UAAAhB,KAAAiB,WAAA,IAIAjB,KAAAgB,UAAA,CAIAhB,KAAAoB,iBACA,KAAA,GAAAC,KAAAf,GAAAgB,MACAhB,EAAAgB,MAAAD,GAAAE,gBACAvB,KAAAoB,eAAApC,KAAAqC,EAIArB,MAAAwB,WAAA,WACAT,EAAAU,gBAAA,KACAV,EAAAW,uBAEAX,EAAAY,WAAA,KACAZ,EAAAa,eAAA,MAGAvG,EAAAwG,OAAA,gBAAA,WAEAd,EAAAS,eAGAxB,KAAA8B,mBAAA,SAAAC,GAGA,MAFA/B,MAAAgC,iBAEAhC,KAAAyB,gBAAAM,IAGA/B,KAAAiC,uBAAA,SAAAC,EAAAC,EAAAC,GAEA,MADApC,MAAAqC,mBAAAF,EAAAC,GACApC,KAAA0B,oBAAAS,GAAAD,IAGAlC,KAAAsC,kBAAA,WAEA,GAAA,MAAAtC,KAAA4B,eAAA,CAEA,GAAAW,GAAAxB,EAAAhD,WAAAgD,EAAAC,UACAuB,KACAvC,KAAA4B,eAAA5B,KAAAwC,mBAAAD,EAAAA,EAAAE,QAIA,MAAAzC,MAAA4B,gBAGA5B,KAAA0C,SAAA,WACA,MAAA3B,GAAAhD,WAAAgD,EAAAC,YAGAhB,KAAAwC,mBAAA,SAAAD,EAAAE,GACA,GAAAE,GAAApC,EAAAqC,cAAAL,GACAM,EAAAtC,EAAAuC,iBAAAL,GACAM,EAAAxC,EAAAyC,YAAAP,GACAQ,EAAAN,EAAAO,OAAAL,GAAAK,OAAAH,EAMA,OALA,OAAAR,EAAAY,WAAAZ,EAAAY,UAAA/E,OAAA,IACA6E,EAAAA,EAAAC,OAAAX,EAAAY,YAEAF,EAAA3C,EAAA8C,WAAAH,GAEA1C,EAAAiC,mBAAAD,EAAAU,IAGAjD,KAAAgC,eAAA,WAEA,IAAAjB,EAAAU,gBAAA,CAMA,GAAA4B,GAAAtC,EAAAuB,oBACAC,EAAAxB,EAAAhD,WAAAgD,EAAAC,WACAsC,IACAf,GAAAE,QACAa,EAAAf,EAAAE,MAAAS,QAAAnC,EAAAqB,OAEA,IAAAmB,GAAAxC,EAAAyB,mBAAAD,EAAAe,EAEAtD,MAAAyB,kBACA,KAAA,GAAAJ,KAAAf,GAAAgB,MACAhB,EAAAgB,MAAAD,GAAAE,iBACAR,EAAAU,gBAAAJ,GAAAb,EAAAO,EAAAyC,QAAAnC,EAAAkC,GAAAE,IAAA1C,EAAAyC,QAAAnC,EAAAgC,GAAAI,QAKAzD,KAAAqC,mBAAA,SAAAF,EAAAC,GACA,IAAArB,EAAAW,oBAAAS,GAAA,CAIA,GAAAI,GAAAxB,EAAAhD,WAAAgD,EAAAC,WACAsC,GAAAvC,EAAAqB,KACAtH,SAAAkD,QAAAuE,EAAAE,MAAA,SAAAiB,EAAAC,GACAvB,IAAAsB,GACAJ,EAAAtE,KAAA0E,IAIA,IAAAH,GAAAxC,EAAAyB,mBAAAD,EAAAe,GACAD,EAAAtC,EAAAuB,mBAEAtC,MAAA0B,oBAAAS,KACA,KAAA,GAAAd,KAAAf,GAAAgB,MACAhB,EAAAgB,MAAAD,GAAAE,iBACAR,EAAAW,oBAAAS,GAAAd,GAAAb,EAAAO,EAAAyC,QAAAnC,EAAAkC,GAAAE,IAAA1C,EAAAyC,QAAAnC,EAAAgC,GAAAI,QAeAzD,KAAAwD,QAAA,SAAAnC,EAAAC,GAEA,IAAA,GADAsC,GAAAtC,EAAAlD,OACAyF,EAAA,EAAAA,EAAAD,IAAAC,EACA,GAAAvC,EAAAuC,GAAAxC,IAAAA,EACA,MAAAC,GAAAuC,EAGA,QAAAxC,GAAAA,EAAAoC,IAAA,IAGAzD,KAAA8D,YAAA,SAAAzC,GACA,GAAA0C,GAAA,EACA,IAAA,WAAAzD,EAAAgB,MAAAD,GAAA2C,QAAA,CACA,GAAAC,GAAA,CACAlD,GAAAhD,WAAAgD,EAAAC,WAAAgD,UACAC,EAAAlD,EAAAhD,WAAAgD,EAAAC,WAAAgD,QAAA3C,IAEA0C,GAAAzD,EAAA4D,SAAAD,GAAA1H,SAEA,IAAA,aAAA+D,EAAAgB,MAAAD,GAAA2C,QAAA,CACA,GAAAC,GAAA,CACAlD,GAAAhD,WAAAgD,EAAAC,WAAAmD,mBACAF,EAAAlD,EAAAhD,WAAAgD,EAAAC,WAAAmD,iBAAA9C,IAEA0C,GAAAzD,EAAA4D,SAAAD,GAAA1H,KAEA,MAAAwH,GAAA,IAAAzD,EAAAgB,MAAAD,GAAA9E,MAGAyD,KAAAoE,cAAA,WAGA,QAAAC,GAAAC,GACA,GAAAA,EAAA,CAEA,IAAA,GADAD,GAAA,EACAR,EAAA,EAAAA,EAAAU,EAAAnG,SAAAyF,EACAS,EAAAvH,QAAAwH,EAAAV,IAAA,GACAQ,GAGA,OAAAA,GAGA,SAZA,GAAAE,EAgBA,IAAA,MAAAxD,EAAAY,YAAAZ,EAAAC,WAAAD,EAAAC,YAAAD,GAAAhD,YAAAgD,EAAAqB,MAAArB,EAAAqB,KAAAoC,SAAA,CACAzD,EAAAY,aAEA,IAAAc,KACA3H,SAAAkD,QAAA+C,EAAAhD,WAAAgD,EAAAC,WAAAyB,MAAA,SAAAL,EAAAuB,GACAvB,EAAAqC,cAAA,OAAArC,EAAAsC,YAAA,SAAAtC,EAAAsC,WACAtC,EAAAqC,cAAA1D,EAAAqB,KAAAqC,cACAhC,EAAAzD,KAAAoD,GAGAA,EAAAoC,UAAAzD,EAAAqB,KAAAoC,UACA/B,EAAAzD,KAAAoD,KAIArB,EAAAqB,KAAA7F,OACAgI,EAAAxD,EAAAqB,KAAA7F,KAAAoI,MAAA,MAEAlC,EAAAmC,KAAA,SAAAC,EAAAC,GACA,MAAAT,GAAAS,EAAAvI,MAAA8H,EAAAQ,EAAAtI,QAGAzB,QAAAkD,QAAAyE,EAAA,SAAAL,EAAAuB,GACAvB,EAAA7F,MAAAwE,EAAAqB,KAAA7F,MACAwE,EAAAY,WAAA3C,KAAAoD,KAIAtH,QAAAkD,QAAAyE,EAAA,SAAAL,EAAAuB,GACAvB,EAAA7F,MAAAwE,EAAAqB,KAAA7F,MACAwE,EAAAY,WAAA3C,KAAAoD,KAIA,MAAArB,GAAAY,YAGA3B,KAAA+E,kBAAA,WACA,GAAAtH,GAAArB,EAAA4I,OAAAhF,KAAAoC,KAAAoC,UACA/B,EAAAzC,KAAAoE,eAEA,IAAA3G,GAAAA,EAAAwH,QACAxC,EAAArE,QAAAX,EAAAwH,OACA,OAAA,CAIA,IAAAxH,GAAAA,EAAAyH,aACAzC,EAAArE,QAAAX,EAAAyH,YAAA,CACA,IAAA,GAAArB,GAAA,EAAAA,EAAApB,EAAArE,SAAAyF,EACA,IAAApB,EAAAoB,GAAAY,aACA,OAAA,CAIA,QAAA,EAGA,OAAA,GAGAzE,KAAAmF,UAAA,WAEA,GAAAC,IAAA,EACAD,EAAA,IACArK,SAAAkD,QAAA+C,EAAAE,WAAA,SAAAD,EAAA2C,GACAyB,GACA,MAAAD,IACAA,EAAAnE,GAGAA,GAAAD,EAAAC,YACAoE,GAAA,KAIA,MAAAD,IACAA,EAAApE,EAAAE,WAAA,IAGAF,EAAAC,UAAAmE,EACAtE,IACAE,EAAAS,cAGAxB,KAAAqF,UAAA,WAEA,GAAAC,IAAA,EACAD,EAAA,IACAvK,SAAAkD,QAAA+C,EAAAE,WAAA,SAAAD,EAAA2C,GACA3C,GAAAD,EAAAC,YACAsE,GAAA,GAGAA,IACAD,EAAArE,KAIA,MAAAqE,IACAA,EAAAtE,EAAAE,WAAAF,EAAAE,WAAA7C,OAAA,IAGA2C,EAAAC,UAAAqE,EACAxE,IACAE,EAAAS,cAGAxB,KAAAuF,WAAA,WACAjK,EAAAkK,SAAAzE,EAAAC,UAAAD,EAAAqB,MACApC,KAAAjC,WAAAzC,EAAAE,gBACAuF,EAAAS,cAGAxB,KAAAyF,QAAA,SAAArD,GACAA,EAAAsD,aAAA,CACA,IAAAC,KACA7K,SAAAkD,QAAA+C,EAAAhD,WAAAgD,EAAAC,WAAAyB,MAAA,SAAAiB,EAAAC,GACAD,EAAAgC,YAEAC,EAAA3G,KAAA+B,EAAAqB,MAGAuD,EAAA3G,KAAA0E,KAIApI,EAAAsK,kBAAA7E,EAAAC,UAAA2E,GACA3F,KAAAjC,WAAAzC,EAAAE,gBACAuF,EAAAS,kBAQAnD,UAAA,2BAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,sBACAqL,aAAA,WACAtL,YAAA,mCCrVAK,QAAAC,OAAA,SAAAL,WAAA,sBAEA,cAAA,SACA,SAAA4F,EAAAjF,GACA,YAEA,IAAA,MAAA2E,KAAAoC,MACA,UAAApC,KAAAoC,KAAAsC,WAAA,CAIA,GAAA3D,GAAAf,IAEAA,MAAAgG,WAGAC,EAAAjI,QAAA+C,EAAAqB,KAAAd,MAAA,SAAAS,GAEAhB,EAAAiF,QAAAjE,EAAAV,IAAAU,EAAA0B,KAGA,KAAA,GAAAvB,KAAA5B,GAAAgB,MACAjG,EAAAwG,OAAA,oBAAAK,EAAA,IAAA,SAAAgE,EAAAC,GAEA,GAAAD,GAAAC,EAAA,CAIA,GAAAC,IAAA,EACA7C,IACA,KAAA,GAAArB,KAAAnB,GAAAiF,QAEA,GAAAjF,EAAAiF,QAAA9D,IAAAmE,OAAAtF,EAAAiF,QAAA9D,IAOA,CACAqB,EAAAvE,MACAqC,GAAAgF,OAAAnE,GACAuB,IAAA4C,OAAAtF,EAAAiF,QAAA9D,KAGA,IAAAoE,IAAA,CACAL,GAAAM,KAAAxF,EAAAqB,KAAAd,MAAA,SAAAS,GACAA,EAAAV,IAAAa,IACAoE,GAAA,EAEApE,IAAAnB,GAAAiF,SAAAjE,EAAA0B,KAAA1C,EAAAiF,QAAA9D,KACAkE,GAAA,MAKAE,IACAF,GAAA,OAxBAH,GAAAM,KAAAxF,EAAAqB,KAAAd,MAAA,SAAAS,GACAA,EAAAV,IAAAa,IACAkE,GAAA,IA2BAA,KAEArF,EAAAqB,KAAAd,MAAAiC,EACAxC,EAAAyF,mBAOAnI,UAAA,0BAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,QACAoE,SAAA,aAEA9L,WAAA,qBACAqL,aAAA,WACAtL,YAAA,mCCjFAK,QAAAC,OAAA,SAAAL,WAAA,2BAEA,UAAA,cAAA,QAAA,WAAA,eACA,SAAA+L,EAAAnG,EAAAmC,EAAAlE,EAAArC,GACA,YAEA,IAAA,MAAA8D,KAAAoC,OACA,cAAApC,MAAAoC,OACApC,KAAA0G,SAAAjE,EAAAzC,KAAAoC,KAAAsC,aAGA1E,KAAA0G,UAAA,cAAA1G,MAAA0G,UAAA,CAIA,GAAA3F,GAAAf,IAEAe,GAAA4F,aAAA,KACA5F,EAAA6F,YAAA,KACA7F,EAAA8F,iBAAA,KACA9F,EAAA+F,gBAAA,GACA/F,EAAAgG,sBACA,MAAAhG,EAAAqB,KAAA4E,mBACAjG,EAAAqB,KAAA4E,qBAGAhH,KAAAiH,eAAA,WAGA,GAFAlG,EAAAqB,KAAA4E,oBAEAjG,EAAA4F,cAAA5F,EAAA4F,aAAAvI,OAAA,EAAA,CAEA,gBAAA2C,GAAAqB,KAAA8E,iBACAnG,EAAAqB,KAAA8E,eAAA,EACAnG,EAAAyF,WAGA,KAAA,GAAA3C,GAAA,EAAAA,EAAA9C,EAAA4F,aAAAvI,SAAAyF,EACA9C,EAAAqB,KAAA8E,gBAAAnG,EAAA4F,aAAA9C,GAAAsD,cACApG,EAAA6F,YAAA7F,EAAA4F,aAAA9C,GAEA9C,EAAAqB,KAAA4E,iBAAA1G,EAAA8G,SAAArG,EAAA6F,cAEA7F,EAAAqB,KAAA8E,eAAA,GAAAnG,EAAA4F,aAAA9C,GAAAsD,eACApG,EAAA8F,iBAAA9F,EAAA4F,aAAA9C,GACA9C,EAAA8F,iBAAAQ,SAAA,IACAtG,EAAA+F,gBAAAnG,KAAAC,MAAAG,EAAA8F,iBAAAQ,SAAA,KAAA,GAAA,IAGAtG,EAAA+F,gBAAAnG,KAAAC,MAAAG,EAAA8F,iBAAAQ,SAAA,KAAA,OAOArH,KAAAsH,kBAAA,WAEA,GAAA,MAAAvG,EAAA4F,cACA5F,EAAA4F,aAAAvI,OAAA,GACA,gBAAA2C,GAAAqB,KAAA8E,eAAA,CAEA,IAAA,GAAArD,GAAA,EAAAA,EAAA9C,EAAA4F,aAAAvI,SAAAyF,EACA,GAAA9C,EAAAqB,KAAA8E,eAAA,GAAAnG,EAAA4F,aAAA9C,GAAAsD,aACA,OAAA,CAGA,QAAA,EAGA,OAAA,GAIAnH,KAAAuH,kBAAA,SAAAC,GACAzG,EAAAqB,KAAA8E,eAAAM,EACAzG,EAAAgG,sBACAhG,EAAAkG,iBACAlG,EAAAyF,YAGAxG,KAAAyH,gBAAA,WACA,IAAA,GAAA5D,GAAA9C,EAAAqB,KAAA8E,eAAA,GAAArD,GAAA9C,EAAA4F,aAAA9C,EAAA,KAAAA,EACA,GAAAA,EACA9C,EAAAgG,mBAAA/H,MAAA0I,OAAA,IAGA3G,EAAAgG,mBAAA/H,KAAA+B,EAAA4G,UAAA5G,EAAA4F,aAAA9C,EAAA,MAKA7D,KAAA4H,gBAAA,WACA7G,EAAAgG,qBACA,KAAA,GAAAlD,GAAA9C,EAAAqB,KAAA8E,eAAArD,EAAA,IAAAA,EACA9C,EAAAgG,mBAAA/H,KAAA+B,EAAA4G,UAAA5G,EAAA4F,aAAA9C,EAAA,IAGA9C,GAAAgG,mBAAA/H,MAAA0I,OAAA,KAGA1H,KAAA2H,UAAA,SAAAf,GACA,OACAc,OAAAd,EAAAO,aACA7F,MAAAhB,EAAA8G,SAAAR,KAIA5G,KAAA6H,gBAAA,WACA,IAAA9G,EAAA4F,cAAA5F,EAAAqB,MAAArB,EAAAqB,KAAA0F,eACArB,EAAAvJ,SAAA6D,EAAA2F,SAAAqB,YAAA,CACA,GAAAC,GAAAjH,EAAAqB,KAAA0F,aACA/G,GAAA4F,aAAAF,EAAAwB,KAAAlH,EAAA2F,SAAAqB,WAAA,YAAAC,GACAjH,EAAAkG,iBAIA,MAAAlG,GAAA4F,aAGA,IAAAuB,GAAA,kBAEAlI,MAAAmI,cAAA,WACA1B,EAAA5J,KAAAqL,EAAA,KAAA,aAAA,WACA3J,EAAA,WAEA,GAAAwC,EAAA8F,iBAAA,CAIA9F,EAAAqH,YACA,KAAA,GAAAvE,GAAA,EAAAA,GAAA,IAAAA,EAAA,CACA,GAAAwE,GAAAtH,EAAA8F,iBAAA,aAAAhD,GACAyE,EAAAvH,EAAA8F,iBAAA,gBAAAhD,EACA,IAAAwE,EAAA,GAAAC,EAAA,EAAA,CAEA,GAAA7F,GAAAgE,EAAAwB,KAAAC,EAAA,KAAAG,EACA,IAAA,GAAA5F,EAAArE,OACA2C,EAAAqH,UAAApJ,MAAAuJ,IAAAD,EAAA/L,KAAA,YAAA8L,EAAA,UAEA,CACA,GAAAjG,GAAAK,EAAA,GACAlG,EAAAL,EAAA0C,UAAAwD,EAAAoG,OAAApG,EAAAqG,YAEA,IAAArG,EAAA,CACA,GAAAsG,IACAH,IAAAD,EACA9L,KAAA4F,EAAAuG,eACAC,KAAAxG,EAAAyG,KACAC,WAAA1G,EAAA2G,WACAxM,KAAAA,EAEAwE,GAAAqH,UAAApJ,KAAA0J,aASAjC,EAAAvJ,SAAAgL,IACAlI,KAAAmI,oBAOA9J,UAAA,+BAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,QACAoE,SAAA,aAEA9L,WAAA,0BACAqL,aAAA,WACAtL,YAAA,wCCjLAK,QAAAC,OAAA,SAAAL,WAAA,yBAEA,UAAA,QAAA,cACA,SAAA+L,EAAAhE,EAAAnC,GACA,YA0FA,SAAA0I,KACA,GAAAC,MACAC,EAAA,IAqBA,OAnBA,OAAAnI,EAAAoI,YACArO,QAAAkD,QAAA+C,EAAAoI,WAAA,SAAAC,EAAAzF,GACA,GAAArC,KACAxG,SAAAkD,QAAAsC,EAAA8G,SAAAgC,GAAA,SAAArH,EAAAsH,GACA/I,EAAAgB,MAAAS,EAAAV,IAAAiI,MACAhI,EAAAtC,KAAA+C,KAIAT,EAAAlD,OAAA,EACA6K,EAAAG,EAAA/H,IAAAC,EAEA4H,IACAD,EAAAG,EAAA/H,OACA6H,EAAAE,EAAA/H,MAKA4H,EA1GA,GALAjJ,KAAAmJ,WAAA,KACAnJ,KAAAuJ,UAAA,KACAvJ,KAAAwJ,oBAAA,EACAxJ,KAAAyJ,kBAEA,MAAAzJ,KAAAoC,OAEA,cAAApC,MAAAoC,OACApC,KAAA0G,SAAAjE,EAAAzC,KAAAoC,KAAAsC,aAGA1E,KAAA0G,UAAA1G,KAAAoC,KAAAsH,KAAA,gBAAA1J,MAAA0G,UAAA,CAIA,GAAA3F,GAAAf,IAEAA,MAAA2J,cAAA,WACA,IAAA5I,EAAAoI,YACApI,EAAAqB,MAAArB,EAAAqB,KAAAsH,KAAA,gBAAA3I,GAAA2F,SAAA,CACA,GAAAyC,GAAA1C,EAAAwB,KAAAlH,EAAA2F,SAAAkD,aAAA,KAAA7I,EAAAqB,KAAAsH,IAEA,IAAAP,EAAA/K,QACA2C,EAAAwI,UAAAJ,EAAA,GACApI,EAAAoI,WAAA1C,EAAAwB,KAAAlH,EAAA2F,SAAAkD,aAAA,cAAA7I,EAAAwI,UAAAM,aACA9I,EAAA0I,eAAAT,EAAAjI,EAAAoI,aAEA,kBAAApI,GAAA2F,WACAyC,EAAA1C,EAAAwB,KAAAlH,EAAA2F,SAAAoD,eAAA,KAAA/I,EAAAqB,KAAAsH,KAEA,GAAAP,EAAA/K,SACA2C,EAAAwI,UAAAJ,EAAA,GACApI,EAAAoI,WAAA1C,EAAAwB,KAAAlH,EAAA2F,SAAAoD,eAAA,cAAA/I,EAAAwI,UAAAM,aACA9I,EAAA0I,eAAAT,EAAAjI,EAAAoI,cAMA,MAAApI,GAAAoI,YAGAnJ,KAAA+J,cAAA,WACA,IAAA,GAAAlG,GAAA,EAAAA,EAAA9C,EAAAoI,WAAA/K,SAAAyF,EACA,GAAA9C,EAAAwI,UAAAlI,IAAAN,EAAAoI,WAAAtF,GAAAxC,GAKA,MAJAN,GAAAwI,UAAAxI,EAAAoI,WAAAtF,EAAA,GACA9C,EAAAqB,KAAAsH,IAAA3I,EAAAwI,UAAAlI,GACAN,EAAAyF,gBACAxG,KAAAwJ,oBAAA,IAMAxJ,KAAAgK,cAAA,WACA,IAAA,GAAAnG,GAAA,EAAAA,EAAA9C,EAAAoI,WAAA/K,SAAAyF,EACA,GAAA9C,EAAAwI,UAAAlI,IAAAN,EAAAoI,WAAAtF,GAAAxC,GAKA,MAJAN,GAAAwI,UAAAxI,EAAAoI,WAAAtF,EAAA,GACA9C,EAAAqB,KAAAsH,IAAA3I,EAAAwI,UAAAlI,GACAN,EAAAyF,gBACAxG,KAAAwJ,oBAAA,IAMAxJ,KAAAiK,gBAAA,SAAAP,GACA,IAAA,GAAA7F,GAAA,EAAAA,EAAA9C,EAAAoI,WAAA/K,SAAAyF,EACA,GAAA6F,GAAA3I,EAAAoI,WAAAtF,GAAAxC,GAKA,MAJAN,GAAAwI,UAAAxI,EAAAoI,WAAAtF,GACA9C,EAAAqB,KAAAsH,IAAA3I,EAAAwI,UAAAlI,GACAN,EAAAyI,oBAAA,MACAzI,GAAAyF,YAMAxG,KAAAkK,iBAAA,WAEA,MADAlK,MAAA2J,iBACA5I,EAAAoI,YAAApI,EAAAoI,WAAA/K,QAAA,IAAA2C,EAAAwI,WAAAxI,EAAAwI,UAAAlI,IAAAN,EAAAoI,WAAA,GAAA9H,IAGArB,KAAAmK,gBAAA,WAEA,MADAnK,MAAA2J,iBACA5I,EAAAoI,YAAApI,EAAAoI,WAAA/K,QAAA,IAAA2C,EAAAwI,WAAAxI,EAAAwI,UAAAlI,IAAAN,EAAAoI,WAAApI,EAAAoI,WAAA/K,OAAA,GAAAiD,QAkCAhD,UAAA,6BAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,QACAoE,SAAA,aAEA9L,WAAA,wBACAqL,aAAA,WACAtL,YAAA,sCCtIAK,QAAAC,OAAA,SAAAL,WAAA,qBAEA,WAAA,UAAA,aACA,SAAA6D,EAAAkI,EAAAlG,GACA,YA4CA,SAAA6J,GAAAtL,IA1CA,GAAA,MAAAkB,KAAAoC,MACA,UAAApC,KAAAoC,KAAAsC,WAAA,CAIA1E,KAAAoC,KAAA8E,iBACAlH,KAAAoC,KAAA8E,eAAA,EAGA,IAAAnG,GAAAf,IAEAA,MAAAqK,WAAA,WACA,GAAAC,GAAA,4BAAAvJ,EAAAqB,KAAAmI,YAAAxJ,EAAAqB,KAAAoI,IAAA,SACA/D,GAAA5J,KAAAyN,EAAA,KAAAF,EAAA,WAAA7L,EAAA,WACAwC,EAAA0J,UAAAhE,EAAAwB,KAAAqC,EAAA,aAAAvJ,EAAAqB,KAAAf,SAIArB,KAAAyH,gBAAA,WACAzH,KAAAyK,WAAAzK,KAAAoC,KAAA8E,eAAAlH,KAAAyK,UAAArM,SACA4B,KAAAoC,KAAA8E,iBACAnG,EAAAyF,aAIAxG,KAAA0K,gBAAA,WACA,MAAA1K,MAAAyK,WAAAzK,KAAAoC,MAAApC,KAAAoC,KAAA8E,gBAAAlH,KAAAyK,UAAArM,QAGA4B,KAAA4H,gBAAA,WACA5H,KAAAoC,KAAA8E,eAAA,EACAlH,KAAAoC,KAAA8E,iBAGAlH,KAAAoC,KAAA8E,eAAA,EAGAnG,EAAAyF,YAGAxG,KAAAqK,iBAOAhM,UAAA,yBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,QACAoE,SAAA,aAEA9L,WAAA,oBACAqL,aAAA,WACAtL,YAAA,kCC9DAK,QAAAC,OAAA,SAAAL,WAAA,qBAEA,UAAA,cAAA,QACA,SAAA+L,EAAAnG,EAAAmC,GACA,YA8DA,SAAAkI,KACA,GAAAC,KAUA,OATA7J,GAAAqB,KAAAyI,QAAA,GACA/P,QAAAkD,QAAA+C,EAAA+J,OAAA,SAAAC,EAAApH,GACA,GAAAoH,EAAA1J,IAAAN,EAAAqB,KAAAyI,QAEA,YADAD,EAAAjH,KAMAiH,EAvEA,GAAA,MAAA5K,KAAAoC,KAAA,CACA,cAAApC,MAAAoC,OACApC,KAAA0G,SAAAjE,EAAAzC,KAAAoC,KAAAsC,aAGA1E,KAAA8K,OAAA,IACA,IAAA/J,GAAAf,IAEAA,MAAAgL,UAAA,WACA,GAAArH,GAAAgH,GACAhH,KACAA,GAAA5C,EAAA+J,OAAA1M,SACAuF,EAAA,EAEA,IAAAoH,GAAAhK,EAAA+J,OAAAnH,EACA5C,GAAAqB,KAAAyI,QAAAE,EAAA1J,GACAN,EAAAqB,KAAA6I,WAAA3K,EAAA8G,SAAA2D,GACAhK,EAAAyF,YAGAxG,KAAAkL,aAAA,WACA,MAAA,OAAAnK,EAAA+J,QAAAH,KAAA5J,EAAA+J,OAAA1M,OAAA,GAGA4B,KAAAmL,aAAA,WACA,MAAA,IAAAR,KAGA3K,KAAAoL,UAAA,WACA,GAAAzH,GAAAgH,GACAhH,KACAA,EAAA,IACAA,EAAA5C,EAAA+J,OAAA1M,OAAA,EAEA,IAAA2M,GAAAhK,EAAA+J,OAAAnH,EACA5C,GAAAqB,KAAAyI,QAAAE,EAAA1J,GACAN,EAAAqB,KAAA6I,WAAA3K,EAAA8G,SAAA2D,GACAhK,EAAAyF,YAGAxG,KAAAqL,YAAA,WACAtK,EAAAqB,KAAAyI,QAAA,KACA9J,EAAAqB,KAAA6I,WAAA,KACAlK,EAAAyF,YAGAxG,KAAAsL,UAAA,WACA,GAAA,MAAAvK,EAAAqB,KAAA,MAAA,KACA,IAAA,MAAArB,EAAA+J,OAAA,CACA,GAAAS,GAAAxK,EAAAqB,KAAAoJ,WACAD,IACA9E,EAAAvJ,SAAA6D,EAAA2F,SAAA+E,YACA1K,EAAA+J,OAAArE,EAAAwB,KAAAlH,EAAA2F,SAAA+E,SAAA,cAAAF,IAKA,MAAAxK,GAAA+J,YAqBAzM,UAAA,yBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,QACAoE,SAAA,aAEA9L,WAAA,oBACAqL,aAAA,WACAtL,YAAA,kCC7FAK,QAAAC,OAAA,SAAAL,WAAA,wBAEA,WACA,YAEA,OAAAsF,KAAAoC,MACA,QAAApC,KAAAoC,KAAAsC,aAIA1E,KAAA0L,YAAA,SAAAC,GACA,GAAA,GAAAA,EACA3L,KAAAoC,KAAA8E,eAAA,KACAlH,KAAAoC,KAAA4E,wBAEA,CACAhH,KAAAoC,KAAA8E,eAAAyE,CAEA,IAAAC,KACA9Q,SAAAkD,QAAAgC,KAAAoC,KAAAd,MAAA,SAAAS,EAAA4B,GACAiI,EAAA5M,MAAAqC,GAAAU,EAAAV,GAAAoC,IAAA1B,EAAA0B,KAAAkI,EAAA,SAGA3L,KAAAoC,KAAA4E,iBAAA4E,EAEA5L,KAAAwG,gBAIAnI,UAAA,4BAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,QACAoE,SAAA,aAEA9L,WAAA,uBACAqL,aAAA,WACAtL,YAAA,qCCtCAK,QAAAC,OAAA,SAAAL,WAAA,mBAEA,WAAA,UAAA,cACA,SAAA6D,EAAAkI,EAAAoF,GACA,YAEA,IAAA,MAAA7L,KAAAoC,KAAA,CACA,GAAA,IAAApC,KAAAoC,KAAA0J,QAAA,GAAA9L,KAAAoC,KAAA0J,QAAA,KAAA9L,KAAAoC,KAAA0J,OAEA,WADAC,SAAAC,IAAA,qBAAAhM,KAAAoC,KAAA0J,OAIA,IA4BAG,GA5BAlL,EAAAf,KAEAkM,GACA,uBACA,6BACA,kCACA,4BACA,gCACA,iCACA,gCACA,oCACA,6BACA,4BACA,+BACA,gCACA,4BACA,mCACA,gCACA,2BACA,sCACA,kCACA,iCACA,8BAEAC,EAAA,mBACAC,EAAA,wBACAC,EAAA,8BAGA,KAAArM,KAAAoC,KAAA0J,QAAA,KAAA9L,KAAAoC,KAAA0J,OACAG,GAAAE,EAAAC,EAAAC,GAEA,GAAArM,KAAAoC,KAAA0J,SACAG,GAAAE,GAAAjJ,OAAAgJ,GAGA,KAAA,GAAArI,GAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA4C,EAAA5J,KAAAoP,EAAApI,GAAA,KAAA,aAAA,WACAtF,EAAA,WACAwC,EAAAuL,qBAKAtM,MAAAsM,gBAAA,WAGA,IAAA,GAAAzI,GAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA,IAAA4C,EAAAvJ,SAAA+O,EAAApI,IACA,MAIA,IAAA0I,GAAA9F,EAAAwB,KAAAjI,KAAAoC,KAAA8F,SAAA,UAAA,KAAAlI,KAAAoC,KAAAf,GACA,IAAAkL,EAAAnO,OAAA,EAAA,CACA,GAAAoO,GAAAD,EAAA,EACAxL,GAAA0B,SAGA,IAAA1B,EAAAqB,KAAA0J,QAAA,KAAA/K,EAAAqB,KAAA0J,OACA/K,EAAA0L,cAAAD,EAAAE,YAEA,GAAA3L,EAAAqB,KAAA0J,QACA/K,EAAA4L,cAAAH,EAAAE,cAMA1M,KAAA2M,cAAA,SAAAC,GACA,IAAA,GAAAC,GAAA,EAAAA,EAAAX,EAAA9N,SAAAyO,EACA9L,EAAA+L,sBAAAF,EAAAV,EAAAW,KAIA7M,KAAA8M,sBAAA,SAAAF,EAAAG,GAEA,GAAAC,GAAAvG,EAAAwB,KAAA8E,EAAA,KAAAH,EACA,IAAA,GAAAI,EAAA5O,YAEA,CACA,GAAA6O,GAAAD,EAAA,GAAAE,QAEA/K,EAAA,CACA,GAAA,CACAA,GACA,IAAAgL,GAAAH,EAAA,GAAA,UAAA7K,GACAiL,EAAAJ,EAAA,GAAA,OAAA7K,EAAA,SACAkL,EAAAL,EAAA,GAAA,OAAA7K,EAAA,OAEA,IAAAiL,EACA,GAAAD,EACApM,EAAA4L,cAAAS,EAAAL,OAEA,CAEA,GAAAO,GAAA7G,EAAAwB,KAAAkE,EAAA,KAAAiB,EACA,IAAAE,EAAAlP,OAAA,EAAA,CACA,GAAAmP,GAAA1B,EAAA2B,gBAAAF,EAAA,GAGAvM,GAAA0B,MAAAzD,MACAyO,MAAAJ,EACAJ,KAAAA,EACA7K,KAAAmL,YAKAH,KAIApN,KAAAyM,cAAA,SAAAG,GAEA,IAAA,GADAc,IAAAtB,EAAAC,GACAxI,EAAA,EAAAA,EAAA6J,EAAAtP,SAAAyF,EAKA,IAAA,GADA8J,GAAAlH,EAAAmH,QAAAF,EAAA7J,IACAgK,EAAA,EAAAA,EAAAF,EAAAvP,SAAAyP,EAAA,CACA,GAAAC,GAAAH,EAAAE,EACA,IAAAC,EAAAC,UAAAnB,GAAAkB,EAAAE,KAAA,CAEA,GAAAV,GAAA7G,EAAAwB,KAAAkE,EAAA,KAAA2B,EAAAG,OACAX,GAAAlP,OAAA,GACA2C,EAAA0B,MAAAzD,MACAyO,MAAAK,EAAAI,MACAjB,KAAAa,EAAAK,KACA/L,KAAAyJ,EAAA2B,gBAAAF,EAAA,aASAjP,UAAA,uBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,kBACAqL,aAAA,OACAtL,YAAA,gCC9JAK,QAAAC,OAAA,SAAAL,WAAA,qBAEA,WAAA,UAAA,cAAA,cAAA,eACA,SAAA6D,EAAAkI,EAAAoF,EAAAvL,EAAApE,GACA,YAEA,IAAA,MAAA8D,KAAAoC,KAAA,CAEA,GAAArB,GAAAf,IACAe,GAAAqN,SAaA,KAAA,GAXAC,IACA,2BACA,kCACA,iCACA,iCACA,mCACA,gCAEAlC,EAAA,mBAEAF,EAAAoC,EAAAnL,QAAAiJ,IACAtI,EAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA4C,EAAA5J,KAAAoP,EAAApI,GAAA,KAAA,aAAA,WACAtF,EAAA,WACAwC,EAAAuN,gBAKAtO,MAAAsO,WAAA,WACA,IAAA,GAAAzK,GAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA,IAAA4C,EAAAvJ,SAAA+O,EAAApI,IACA,MAIA9C,GAAAqN,SACA,KAAA,GAAAvK,GAAA,EAAAA,EAAAwK,EAAAjQ,SAAAyF,EACA9C,EAAAwN,UAAAF,EAAAxK,GAIA,KAAA,GADA2K,MACA3K,EAAA,EAAAA,EAAA9C,EAAAqN,OAAAhQ,SAAAyF,EAAA,CAEA,IAAA,GADAyC,IAAA,EACAmI,EAAA,EAAAA,EAAAD,EAAApQ,SAAAqQ,EACA,GAAA1N,EAAAqN,OAAAvK,GAAAoJ,MAAAuB,EAAAC,GAAAxB,MACAlM,EAAAqN,OAAAvK,GAAApB,MAAArE,QAAAoQ,EAAAC,GAAAhM,MAAArE,OAAA,CAEAkI,GAAA,CACA,KAAA,GAAAoI,GAAA,EAAAA,EAAA3N,EAAAqN,OAAAvK,GAAApB,MAAArE,SAAAsQ,EACA3N,EAAAqN,OAAAvK,GAAApB,MAAAiM,GAAAtM,KAAAf,IAAAmN,EAAAC,GAAAhM,MAAAiM,GAAAtM,KAAAf,IACAN,EAAAqN,OAAAvK,GAAApB,MAAAiM,GAAAnG,KAAAiG,EAAAC,GAAAhM,MAAAiM,GAAAnG,MACAjC,GAAA,GAMAA,GACAkI,EAAAxP,KAAA+B,EAAAqN,OAAAvK,IAIA9C,EAAAqN,OAAAI,GAGAxO,KAAAuO,UAAA,SAAArG,GAGA,IAAA,GAFAyG,GAAAlI,EAAAwB,KAAAC,EAAA,iBAAAnH,EAAAqB,KAAAf,IAEAwC,EAAA,EAAAA,EAAA8K,EAAAvQ,SAAAyF,EAAA,CAWA,IAVA,GAAAgK,GAAAc,EAAA9K,GAEA+K,GACAvN,GAAAwM,EAAAxM,GACA6G,SAAAA,EAAAzC,QAAA,UAAA,IACAwH,KAAAY,EAAAgB,KAAA,IAAA,IACApM,UAGAgM,EAAA,IACA,CACAA,GACA,IAAAK,GAAA,OAAAL,EAAA,KACAM,EAAA,OAAAN,EAAA,KACA,MAAAK,IAAAjB,IACA,KAGA,IAAApL,GAAAgE,EAAAwB,KAAAkE,EAAA,KAAA0B,EAAAiB,GACArM,GAAArE,OAAA,GACAwQ,EAAAnM,MAAAzD,MACAoD,KAAAyJ,EAAA2B,gBAAA/K,EAAA,IACA8F,IAAAsF,EAAAkB,KAKAhO,EAAAqN,OAAApP,KAAA4P,SAKAvQ,UAAA,yBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,oBACAqL,aAAA,OACAtL,YAAA,kCC/GAK,QAAAC,OAAA,SAAAL,WAAA,0BAEA,WAAA,UAAA,cAAA,QACA,SAAA6D,EAAAkI,EAAAoF,EAAApJ,GACA,YAEA,IAAA,MAAAzC,KAAAoC,KAAA,CAQA,IAAA,GANArB,GAAAf,KAEAgP,EAAA,gCACA7C,EAAA,mBAEAF,GAAA+C,EAAA7C,GACAtI,EAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA4C,EAAA5J,KAAAoP,EAAApI,GAAA,KAAA,aAAA,WACAtF,EAAA,WACAwC,EAAAkO,iBAKAjP,MAAAiP,YAAA,WACA,IAAA,GAAApL,GAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA,IAAA4C,EAAAvJ,SAAA+O,EAAApI,IACA,MAIA,IAAAqL,GACA1C,EAAAX,EAAAsD,YAAApO,EAAAqB,KACAoK,IAAAA,EAAA4C,cAAA,IACAF,EAAA1C,EAAA4C,cAGA,IAAA1I,GAAAjE,EAAA1B,EAAAqB,KAAAsC,WAEA,IAAAgC,GAAA8F,EAAA6C,UAEA,IAAA,GADA1I,GAAAF,EAAAwB,KAAAvB,EAAAqB,WAAA,YAAAyE,EAAA6C,WACAxL,EAAA,EAAAA,EAAA8C,EAAAvI,SAAAyF,EACA,GAAA8C,EAAA9C,GAAAsD,cAAApG,EAAAqB,KAAA8E,eAAA,CACAgI,EAAAvI,EAAA9C,GAAAyL,YACA,OAKAvO,EAAA0B,SACAyM,GACAnO,EAAAwO,SAAAL,IAIAlP,KAAAwP,QAAA,WACA,GAAAhD,GAAAX,EAAAsD,YAAAnP,KAAAoC,KACA,OAAAiE,QAAAmG,EAAAiD,gBAAA,IAAA,KAGAzP,KAAAuP,SAAA,SAAAL,GAGA,GAAAlC,GAAAvG,EAAAwB,KAAA+G,EAAA,KAAAE,EACA,IAAA,GAAAlC,EAAA5O,YAEA,CACA,GAAA6O,GAAAD,EAAA,GAAAE,QAEA/K,EAAA,CACA,GAAA,CACAA,GACA,IAAAgL,GAAAH,EAAA,GAAA,UAAA7K,GACAiL,EAAAJ,EAAA,GAAA,OAAA7K,EAAA,SACAkL,EAAAL,EAAA,GAAA,OAAA7K,EAAA,OAEA,IAAAiL,EACA,GAAAD,EACApM,EAAAwO,SAAAnC,OAEA,CACA,GAAAE,GAAA7G,EAAAwB,KAAAkE,EAAA,KAAAiB,EACAE,GAAAlP,OAAA,GAGA2C,EAAA0B,MAAAzD,MACAyO,MAAAJ,EACAJ,KAAAA,EACA7K,KAAAyJ,EAAA2B,gBAAAF,EAAA,aAKAF,SAKA/O,UAAA,8BAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,yBACAqL,aAAA,OACAtL,YAAA,uCCxGAK,QAAAC,OAAA,SAAAL,WAAA,qBAEA,WAAA,UAAA,cAAA,cAAA,eACA,SAAA6D,EAAAkI,EAAAoF,GACA,YA8BA,SAAA6D,KAEA,IAAA,GADAC,GAAAlJ,EAAAwB,KAAA2H,EAAA,SAAA7O,EAAAqB,KAAAf,IACAwO,EAAA,EAAAA,EAAAF,EAAAvR,SAAAyR,EAGA,IAFA,GAAAC,GAAAH,EAAAE,GACAE,EAAA,IACA,CACAA,GACA,IAAAC,GAAA,qBAAAD,CACA,MAAAC,IAAAF,IACA,KAGA,IAAAG,GAAAxJ,EAAAwB,KAAAkE,EAAA,KAAA2D,EAAAE,GACAC,GAAA7R,OAAA,GACA2C,EAAA0B,MAAAzD,KAAA6M,EAAA2B,gBAAAyC,EAAA,MA1CA,GAAA,MAAAjQ,KAAAoC,KAAA,CAEA,GAAArB,GAAAf,IACAe,GAAA0B,QAMA,KAAA,GAJAmN,GAAA,oBACAzD,EAAA,mBAEA+D,GAAAN,EAAAzD,GACAtI,EAAA,EAAAA,EAAAqM,EAAA9R,SAAAyF,EACA4C,EAAA5J,KAAAqT,EAAArM,GAAA,KAAA,aAAA,WACAtF,EAAA,WACAwC,EAAAoP,cAKAnQ,MAAAmQ,SAAA,WACA,IAAA,GAAAtM,GAAA,EAAAA,EAAAqM,EAAA9R,SAAAyF,EACA,IAAA4C,EAAAvJ,SAAAgT,EAAArM,IACA,MAIA9C,GAAA0B,SACAiN,SAwBArR,UAAA,yBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,oBACAqL,aAAA,OACAtL,YAAA,kCC/DAK,QAAAC,OAAA,SAAAL,WAAA,mBAEA,WAAA,UAAA,cAAA,cAAA,eACA,SAAA6D,EAAAkI,EAAAoF,GACA,YA0DA,SAAAuE,GAAAlI,GAEA,IAAA,GADAyH,GAAAlJ,EAAAwB,KAAAC,EAAA,YAAAnH,EAAAqB,KAAAiO,OACAR,EAAA,EAAAA,EAAAF,EAAAvR,SAAAyR,EAAA,CACA,GAAAI,GAAAxJ,EAAAwB,KAAAkE,EAAA,KAAAwD,EAAAE,GAAAxO,GACA4O,GAAA7R,OAAA,GACA2C,EAAA0B,MAAAzD,KAAA6M,EAAA2B,gBAAAyC,EAAA,MA7DA,GAAA,MAAAjQ,KAAAoC,KAAA,CAEA,GAAArB,GAAAf,IACAe,GAAA0B,QAgCA,KAAA,GA9BAwJ,IACA,8BACA,mCACA,yCACA,yCACA,+BACA,+BACA,wCACA,0BACA,0BACA,kCACA,qCACA,iCACA,+BACA,oCACA,0CACA,0CACA,gCACA,gCACA,yCACA,2BACA,2BACA,mCACA,uCAIAE,EAAA,mBAEA+D,EAAAjE,EAAA/I,QAAAiJ,IACAtI,EAAA,EAAAA,EAAAqM,EAAA9R,SAAAyF,EACA4C,EAAA5J,KAAAqT,EAAArM,GAAA,KAAA,aAAA,WACAtF,EAAA,WACAwC,EAAAoP,cAKAnQ,MAAAmQ,SAAA,WACA,IAAA,GAAAtM,GAAA,EAAAA,EAAAqM,EAAA9R,SAAAyF,EACA,IAAA4C,EAAAvJ,SAAAgT,EAAArM,IACA,MAIA9C,GAAA0B,QACA,KAAA,GAAAoB,GAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACAuM,EAAAnE,EAAApI,SAeAxF,UAAA,uBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,kBACAqL,aAAA,OACAtL,YAAA,gCCjFAK,QAAAC,OAAA,SAAAL,WAAA,oBAEA,WAAA,UAAA,cAAA,cAAA,eACA,SAAA6D,EAAAkI,EAAAoF,EAAAvL,EAAApE,GACA,YAoGA,SAAAoU,GAAApI,GAGA,IAAA,GAFAqI,GAAA9J,EAAAwB,KAAAC,EAAA,YAAAnH,EAAAqB,KAAAf,IAEAwC,EAAA,EAAAA,EAAA0M,EAAAnS,SAAAyF,EAAA,CACA,GAAA2M,GAAAD,EAAA1M,GAEA4M,EAAAhK,EAAAwB,KAAAkE,EAAA,KAAAqE,EAAAE,eACAC,EAAAlK,EAAAwB,KAAAkE,EAAA,KAAAqE,EAAAI,eAEAC,GACAC,SAAAN,EAAAO,OACAC,QAAA9U,EAAA0C,UAAA4R,EAAAS,WACAhE,KAAA,EACAiE,gBAAA,EACAC,aAAA,EACAC,MAAAvF,EAAA2B,gBAAAiD,EAAA,IACAY,MAAAxF,EAAA2B,gBAAAmD,EAAA,IACAW,SAAA,EACAC,SAAA,EAGAV,GAAAC,WAAAxQ,GAAAkR,YACAX,EAAAC,SAAAxQ,EAAAkR,UAAAX,EAAAC,WAGA,GAAAN,EAAAiB,cACAZ,EAAA5D,MAAAuD,EAAAkB,mBAEA,GAAAlB,EAAAiB,cACAZ,EAAAM,cAAAX,EAAAkB,mBAEA,GAAAlB,EAAAiB,cACAZ,EAAAK,iBAAAV,EAAAkB,mBAGAb,EAAAS,SAAAd,EAAAkB,mBAGA,GAAAlB,EAAAmB,cACAd,EAAA5D,MAAAuD,EAAAoB,mBAEA,GAAApB,EAAAmB,cACAd,EAAAM,cAAAX,EAAAoB,mBAEA,GAAApB,EAAAmB,cACAd,EAAAK,iBAAAV,EAAAoB,mBAGAf,EAAAU,SAAAf,EAAAoB,mBAGAf,EAAA5D,KAAA4D,EAAA5D,KAAA,IAAA,IAEAlM,EAAA8Q,UAAA7S,KAAA6R,IAvJA,GAAA,MAAA7Q,KAAAoC,KAAA,CAEA,GAAArB,GAAAf,IACAe,GAAA8Q,YASA,KAAA,GAPAC,GAAA,2BACAC,EAAA,kCACAC,EAAA,gCAEA7F,EAAA,mBAEAF,GAAA+F,EAAAD,EAAAD,EAAA3F,GACAtI,EAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA4C,EAAA5J,KAAAoP,EAAApI,GAAA,KAAA,aAAA,WACAtF,EAAA,WACAwC,EAAAkR,eAKAjS,MAAAiS,UAAA,WACA,IAAA,GAAApO,GAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA,IAAA4C,EAAAvJ,SAAA+O,EAAApI,IACA,MAIA9C,GAAA8Q,aACAvB,EAAAwB,GACAxB,EAAAyB,GACAzB,EAAA0B,EAIA,KAAA,GADAE,MACArO,EAAA,EAAAA,EAAA9C,EAAA8Q,UAAAzT,SAAAyF,EAAA,CAEA,IAAA,GADAyC,IAAA,EACAmI,EAAA,EAAAA,EAAAyD,EAAA9T,SAAAqQ,EACA,GAAA1N,EAAA8Q,UAAAhO,GAAAmN,SAAAkB,EAAAzD,GAAAuC,SACAjQ,EAAA8Q,UAAAhO,GAAAoJ,MAAAiF,EAAAzD,GAAAxB,MACAlM,EAAA8Q,UAAAhO,GAAAuN,MAAA/P,IAAA6Q,EAAAzD,GAAA2C,MAAA/P,IACAN,EAAA8Q,UAAAhO,GAAAyN,SAAAjQ,IAAA6Q,EAAAzD,GAAA6C,SAAAjQ,IACAN,EAAA8Q,UAAAhO,GAAAwN,MAAAhQ,IAAA6Q,EAAAzD,GAAA4C,MAAAhQ,IACAN,EAAA8Q,UAAAhO,GAAA0N,SAAAlQ,IAAA6Q,EAAAzD,GAAA8C,SAAAlQ,GAAA,CACAiF,GAAA,CACA,OAIAA,GACA4L,EAAAlT,KAAA+B,EAAA8Q,UAAAhO,IAIA9C,EAAA8Q,UAAAK,OAuGA7T,UAAA,wBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,mBACAqL,aAAA,OACAtL,YAAA,iCC1KAK,QAAAC,OAAA,SAAAL,WAAA,wBAEA,WAAA,UAAA,cAAA,cACA,SAAA6D,EAAAkI,EAAAoF,EAAAvL,GACA,YAEA,IAAA,MAAAN,KAAAoC,KAAA,CAEA,GAAArB,GAAAf,IACAe,GAAAoR,oBAOA,KAAA,GALAC,GAAA,8BACAjG,EAAA,mBACAkG,EAAA,kCAEApG,GAAAmG,EAAAjG,EAAAkG,GACAxO,EAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA4C,EAAA5J,KAAAoP,EAAApI,GAAA,KAAA,aAAA,WACAtF,EAAA,WACAwC,EAAAuR,mBAKAtS,MAAAsS,cAAA,WACA,IAAA,GAAAzO,GAAA,EAAAA,EAAAoI,EAAA7N,SAAAyF,EACA,IAAA4C,EAAAvJ,SAAA+O,EAAApI,IACA,MAGA9C,GAAAoR,oBAEA,IAAAI,GAAA9L,EAAAwB,KAAAoK,EAAA,SAAAtR,EAAAqB,KAAAf,GACA,IAAAkR,GAAAA,EAAAnU,OAAA,EAGA,IAAA,GAFAoU,GAAA/L,EAAAwB,KAAAmK,EAAA,eAAArR,EAAAqB,KAAA8E,gBAEArD,EAAA,EAAAA,EAAA2O,EAAApU,SAAAyF,EAAA,CACA,GAAA4O,GAAAD,EAAA3O,EACA,IAAA4O,EAAA5J,MAAA9H,EAAAqB,KAAAwG,KAAAvH,IAAAoR,EAAA1J,YAAAhI,EAAAqB,KAAA0G,WAAA,CAEA,GAAA2H,GAAAhK,EAAAwB,KAAAkE,EAAA,KAAAsG,EAAAC,aACA/B,EAAAlK,EAAAwB,KAAAkE,EAAA,KAAAsG,EAAAE,YAEA5R,GAAAoR,kBAAAnT,MACA4T,MAAAH,EAAAI,YACA3L,eAAAuL,EAAAK,mBACA7F,KAAAwF,EAAApL,SAAA,IAAA,IACAuB,KAAAtI,EAAAyS,UAAAN,EAAAO,YACA1B,SAAAmB,EAAAQ,eACA7B,MAAAvF,EAAA2B,gBAAAiD,EAAA,IACAc,SAAAkB,EAAAS,eACA7B,MAAAxF,EAAA2B,gBAAAmD,EAAA,aAQAtS,UAAA,4BAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,SAEA1H,WAAA,uBACAqL,aAAA,OACAtL,YAAA,qCCnEAK,QAAAC,OAAA,SAAAL,WAAA,YACA,SAAA,UAAA,UAAA,cAAA,QAAA,OAAA,mBAAA,eAAA,eAAA,YAAA,SAAA,cAAA,WACA,SAAAW,EAAAL,EAAAyL,EAAAnG,EAAAmC,EAAA0Q,EAAAC,EAAAC,EAAAnX,EAAAD,EAAAE,EAAA0P,EAAAtN,GACA,YAiFA,SAAA+U,KACA,GACAC,GAAAJ,EAAAK,YACA1Y,SAAAkD,QAAAuV,EAAA,SAAAE,EAAA9P,GACA,GAAA8P,EAAApS,IAAAhG,EAAA+G,KAAAsR,aAEA,YADArY,EAAAsY,QAAAF,EAAAlX,QAMA,QAAAM,KACAxB,EAAAuY,YAAAvY,EAAA+G,KACA/G,EAAA+G,KAAA,IAEA,IAAAyR,IAAA,CAEA/Y,SAAAkD,QAAAoV,EAAAU,YAAAzY,EAAAuY,aAAA,SAAAG,EAAA7L,GACAzB,EAAAvJ,SAAAgL,KACAzB,EAAA5J,KAAAqL,EAAA6L,EAAA3J,EAAA,WAAA4J,MACAH,GAAA,KAIA3X,EAAAgB,aACAhB,EAAAW,KAAAuN,EAAA,WAAA4J,MACAH,GAAA,GAGAV,EAAAjW,aACAiW,EAAAtW,KAAAuN,EAAA,WAAA4J,MACAH,GAAA,GAGAA,GACAG,IAKA,QAAAA,KACA,IAAAvN,EAAAwN,cAAA/X,EAAAgB,YAAAiW,EAAAjW,WAAA,CAEA,GADA7B,EAAA+G,KAAAgR,EAAAc,WAAA7Y,EAAAuY,aACA,MAAAvY,EAAA+G,KACA,MAGA+R,KACAnZ,EAAAC,SAAAG,MAAA,iBAAAC,EAAA+G,KAAA7F,KACA,UAAAlB,EAAA+G,KAAAsC,aAEA,UAAArJ,EAAA+G,KAAAoC,WACAnJ,EAAA+G,KAAAoI,KAAA,OAAAnP,EAAA+G,KAAAoI,IAIAnP,EAAA+G,KAAAoI,IAAA,MAHAnP,EAAA+G,KAAAoI,IAAA,OAOAnP,EAAA+G,KAAAsR,aAAA,GACAJ,IAIA,IAAArD,GAAApE,EAAAsD,YAAA9T,EAAA+G,KACA6N,GAAAb,cAAA,IACA/T,EAAA+Y,YAAA,IAGA,GAAAnE,EAAAoE,MAAA,GAAApE,EAAAoE,OAAAhZ,EAAA+G,KAAA8E,eAAA,IACA7L,EAAAiZ,aAAA,GAGAjZ,EAAA+G,KAAAiO,QACAhV,EAAAkZ,SAAA,GAGA,GAAAlZ,EAAA+G,KAAA0J,SACAzQ,EAAAmZ,SAAA,GAGA,MAAAnZ,EAAA+G,KAAAoC,UACAnJ,EAAAoZ,QAAA,EACApZ,EAAAqZ,OAAA,OAEA,IAAArZ,EAAA+G,KAAA0J,QAAA,GAAAzQ,EAAA+G,KAAA0J,QAAA,KAAAzQ,EAAA+G,KAAA0J,QACAzQ,EAAAsZ,aAAA,EACAtZ,EAAAqZ,OAAA,YAEArZ,EAAA+Y,WACA/Y,EAAAqZ,OAAA,UAEArZ,EAAAiZ,YACAjZ,EAAAqZ,OAAA,WAEArZ,EAAAmZ,QACAnZ,EAAAqZ,OAAA,QAGArZ,EAAAqZ,OAAA;EAMA,QAAAP,KAEA9Y,EAAA+G,KAAAwS,UAAAvZ,EAAA+G,KAAAd,MAEA,MAAAjG,EAAA+G,KAAA4E,kBAAA3L,EAAA+G,KAAA4E,iBAAA5I,OAAA,IACA/C,EAAA+G,KAAAwS,UAAAtU,EAAA8C,WAAA/H,EAAA+G,KAAA4E,iBAAA3L,EAAA+G,KAAAwS,YAGA,MAAAvZ,EAAA+G,KAAA6I,YAAA5P,EAAA+G,KAAA6I,WAAA7M,OAAA,IACA/C,EAAA+G,KAAAwS,UAAAtU,EAAA8C,WAAA/H,EAAA+G,KAAA6I,WAAA5P,EAAA+G,KAAAwS,YAIA,QAAAxK,GAAAtL,IAtMA3C,EAAA0Y,kBAAAxB,EAAAlX,QAEAnB,EAAA8Z,SAAA,EAAA,GAEAzZ,EAAAsY,QAAA,KAEAtY,EAAA+G,KAAAgR,EAAA2B,WAAA1B,EAAAxP,GACA,cAAAxI,GAAA+G,OACA/G,EAAAqL,SAAAjE,EAAApH,EAAA+G,KAAAsC,aAGArJ,EAAA+G,KAAAW,SAAA,KACA1H,EAAA+G,KAAAiO,MAAA,KACAhV,EAAAqZ,OAAA,KAEArZ,EAAA2Z,eAAA,WACA,GAAA3Z,EAAA+G,KAAA6S,YACA,MAAA5Z,GAAA+G,KAAA6S,WAEA,IAAA5Z,EAAAqL,UACA,SAAArL,EAAAqL,SAAAnK,MACAL,EAAAgB,YACAuJ,EAAAvJ,SAAA7B,EAAAqL,SAAAwO,SAAA,CAEA,GAAAjF,GAAAxJ,EAAAwB,KAAA5M,EAAAqL,SAAAwO,QAAA,KAAA7Z,EAAA+G,KAAAf,GACA,IAAA4O,GAAAA,EAAA7R,OAAA,GAAA6R,EAAA,GAAAkF,cAAA,EACA,MAAAjZ,GAAA0C,UAAAqR,EAAA,GAAAkF,cAAAlF,EAAA,GAAAmF,oBAGA,MAAA,IAGA/Z,EAAAga,gBAAA,WAEA,GAAAC,GAAA,iBACA,IAAApZ,EAAAgB,YACAuJ,EAAAvJ,SAAAoY,IACAja,EAAA+G,KAAAqC,aAAA,EAAA,CAIA,GAAA8Q,GAAA9O,EAAAwB,KAAAqN,EAAA,eAAAja,EAAA+G,KAAAqC,aAEA,IAAA8Q,GAAAA,EAAAnX,OAAA,GAAAmX,EAAA,GAAA/M,OAAA,EAEA,MAAAtM,GAAA0C,UAAA2W,EAAA,GAAA/M,QAAAgN,cAGA,MAAA,IAGAna,EAAAoa,UAAA,SAAAf,GACArZ,EAAAqZ,OAAAA,GAGArZ,EAAAqa,iBAAA,WACA,GAAAzF,GAAApE,EAAAsD,YAAA9T,EAAA+G,KACA,IAAA6N,GAAA,gBAAAA,IAAA,UAAAA,IAAA,GAAAA,EAAA0F,OAAA,CACA,GAAA,GAAA1F,EAAA2F,aACA,MAAA,2BAEA,IAAA,GAAA3F,EAAA2F,aACA,MAAA,mBAGA,MAAA,IAGAva,EAAAwa,aAAA,WAEA,UAAAxa,EAAA+G,KAAAsC,WACAzI,EAAAK,KAAA,SAAAH,EAAAmB,YAAAnB,OAAA,IAAAiX,EAAA0C,WAAAza,EAAA+G,QAGA+R,IACA9Y,EAAA+G,KAAAtH,QAAAib,KAAA1a,EAAA+G,QA0CAvF,OC1HA,WACA,YAGA,SAAAmZ,GAAA3C,EAAApX,EAAAsC,EAAA0X,EAAA9C,GAqEA,QAAA+C,KACAnV,EAAA0S,KACAwC,EAAAC,eAAAnV,EAAA0S,KAAA0C,KAAA,SAAAC,GACAA,EAEArV,EAAAsV,UAAAD,EAIArV,EAAAsV,eA3EA,GAAAtV,GAAAf,IAEAe,GAAAuV,WAAA,GACAvV,EAAAwV,gBAAA,EAEApD,EAAAtW,KAAA,KAAA,WACAwW,EAAAmD,QACAzV,EAAA0S,IAAAN,EAAAsD,QAAApD,EAAAmD,OACAN,OAIAlW,KAAA0W,OAAA,WACAnY,EAAA,WACAtC,EAAAK,KAAA,iBAAAyE,EAAA0S,IAAApS,OAIArB,KAAA2W,gBAAA,SAAAC,GACA7V,EAAAuV,WAAAvV,EAAAwV,gBAAAK,EACA7V,EAAAwV,gBAAA,GAGAxV,EAAA8V,WAAA,KACA9V,EAAA+V,kBAAA,WAGA,GAAA,MAAA/V,EAAA8V,WAAA,CACA9V,EAAA8V,aACA,KAAA,GAAAE,KAAAhW,GAAAsV,UACA,IAAA,GAAAW,KAAAjW,GAAAsV,UAAAU,GACAhW,EAAA8V,WAAA7X,MACA+X,IAAAA,EACAxa,KAAAya,EACAC,KAAAlW,EAAAsV,UAAAU,GAAAC,KAOA,IAAA,GADAE,MACArT,EAAA,EAAAA,EAAA9C,EAAA8V,WAAAzY,SAAAyF,EAAA,CAEA,GAAAsT,GAAApW,EAAA8V,WAAAhT,EACA,IAAA9C,EAAAqW,QAAArW,EAAAqW,OAAAhZ,OAAA,EAAA,CACA,GAAAyO,GAAA9L,EAAAqW,OAAAC,aACA,IAAAF,EAAA5a,KAAA8a,cAAAta,QAAA8P,UACAsK,EAAAF,KAAAK,OACAH,EAAAF,KAAAK,MAAAD,cAAAta,QAAA8P,QAEA,SAOA,GAFAqK,EAAAlY,KAAAmY,GAEAD,EAAA9Y,QAAA2C,EAAAuV,WACA,MAKA,MADAvV,GAAAwV,gBAAAW,EAAA9Y,OACA8Y,GApEApc,QAAAC,OAAA,SAAAL,WAAA,mBAAA,eAAA,YAAA,WAAA,gBAAA,OAAAsb,OCFA,WACA,YAGA,SAAAuB,GAAAtb,EAAAoX,EAAA4C,GASA,QAAAuB,KACAvB,EAAAwB,cAAA1W,EAAAgW,KAAAZ,KAAA,SAAAC,GACAA,EACArV,EAAA2W,aAAAtB,EAGArV,EAAA2W,kBAKA,QAAAC,KACA1B,EAAA0B,WAAA5W,EAAAgW,KAAAZ,KAAA,SAAAoB,GACAA,EACAxW,EAAAwW,QAAAA,EAGAxW,EAAAwW,aAvBA,GAAAxW,GAAAf,IACAe,GAAAgW,IAAA1D,EAAA0D,IAEAS,IACAG,IAwBA3X,KAAA4X,WAAA,SAAAZ,GACA/a,EAAAK,KAAA,cAAAyE,EAAAgW,IAAA,IAAAC,IAGAhX,KAAA6X,KAAA,SAAAb,EAAAc,GAEA,GAAAC,GAAAzc,WAAA0c,YAAAhB,EAAAc,EAAArV,MAEAnH,YAAA2c,iBACAF,EACAA,EACAD,EAAAI,WACAJ,EAAAK,YACAL,EAAAM,UACAN,EAAArE,IACAqE,EAAAO,WACAP,EAAA9T,QACA8T,EAAA3T,iBACA2T,EAAAQ,cACAR,EAAAS,eACAT,EAAAU,YACAV,EAAAW,UACAX,EAAA3U,WAEApC,EAAAqV,OAAA9a,WAAAE,gBAEAS,EAAAK,KAAA,UAAAyb,IA3DAjd,QAAAC,OAAA,SAAAL,WAAA,eAAA,YAAA,eAAA,gBAAA6c,OCFA,WACA,YAGA,SAAAmB,GAAAzc,EAAAX,EAAA2a,EAAA5C,EAAAlX,GAcA,QAAAqb,KACA,GAAAmB,GAAA5X,EAAA6X,SACAD,IACA1C,EAAAwB,cAAAkB,EAAA5B,KAAAZ,KAAA,SAAAC,GACAA,EACArV,EAAA2W,aAAAtB,EAGArV,EAAA2W,kBAMA,QAAAC,KACA,GAAAgB,GAAA5X,EAAA6X,SACAD,IACA1C,EAAA0B,WAAAgB,EAAA5B,KAAAZ,KAAA,SAAAoB,GACAA,EACAxW,EAAAwW,QAAAA,EAGAxW,EAAAwW,aA0CA,QAAAsB,GAAAC,GACA/M,QAAAC,IAAA8M,GA5EA,GAAA/X,GAAAf,IAEAe,GAAAgY,KAAA1F,EAAA0F,KAEA9C,EAAA+C,QAAA7C,KAAA,SAAAwC,GACAnB,IACAG,IAEA5W,EAAAqV,OAAA9a,EAAAE,kBA+BAwE,KAAAiZ,YAAA,WACAhD,EAAAgD,YAAAlY,EAAAwW,SAAApB,KAAAwB,GAAA1B,SAAA4C,IAGA7Y,KAAA4Y,QAAA,WACA,MAAA3C,GAAA2C,WAGA5Y,KAAApE,KAAA,SAAAob,EAAAc,GACAA,EAAAoB,YAAA,GAAAC,OAAAC,UACAnD,EAAAoD,UAAArC,EAAAc,GAAA3B,KAAAqB,GAAAvB,SAAA4C,GACA9X,EAAAuY,aAAA,MAGAtZ,KAAAuZ,aAAA,SAAAvC,GACAA,IAAAjW,GAAA2W,eACA3W,EAAAqV,OAAAY,GAAA7a,SACA4E,EAAAqV,OAAAY,GAAA7a,OAAA4E,EAAA2W,aAAAV,GAAA7a,QAGA4E,EAAAqV,OAAAY,GAAAwC,QACAzY,EAAAqV,OAAAY,GAAAwC,MAAAzY,EAAA2W,aAAAV,GAAAwC,OAGAzY,EAAAqV,OAAAY,GAAAM,QACAvW,EAAAqV,OAAAY,GAAAM,MAAAvW,EAAA2W,aAAAV,GAAAM,QAIAvW,EAAAqV,OAAAY,GAAA7a,SACA4E,EAAAqV,OAAAY,GAAA7a,OAAAA,EAAAmB,YAAAnB,QAGA4E,EAAAuY,aAAAtC,GAOAhX,KAAAyZ,cAAA,WACAxD,EAAAwD,cAAA1Y,EAAA2W,eAGA1X,KAAA0Z,UAAA,SAAA1C,GACA/a,EAAAK,KAAA,UAAA0a,IAGAhX,KAAA4X,WAAA,SAAAZ,GACA/a,EAAAK,KAAA,cAAAyE,EAAA6X,UAAA7B,IAAA,IAAAC,IAGAhX,KAAA2Z,cAAA,WACA,MAAA5Y,GAAAwW,SAAAxW,EAAAwW,QAAAqC,UACA7Y,EAAAwW,QAAAqC,UAGA,IAIA5Z,KAAA6Z,mBAAA,WACA,MAAA5T,GAAA6T,KAAA/Y,EAAA2W,eAGA1X,KAAA+Z,aAAA,WACA,MAAA9T,GAAA6T,KAAA/Y,EAAAqV,SAGApW,KAAA6X,KAAA,SAAAb,EAAAc,GAEA,GAAAC,GAAAzc,EAAA0c,YAAAhB,EAAAc,EAAArV,MAEAnH,GAAA2c,iBACAF,EACAA,EACAD,EAAAI,WACAJ,EAAAK,YACAL,EAAAM,UACAN,EAAArE,IACAqE,EAAAO,WACAP,EAAA9T,QACA8T,EAAA3T,iBACA2T,EAAAQ,cACAR,EAAAS,eACAT,EAAAU,YACAV,EAAAW,UACAX,EAAA3U,WAEApC,EAAAqV,OAAA9a,EAAAE,iBAGAwE,KAAAga,QAAA,WACA/D,EAAA+D,WAGAjZ,EAAAkZ,YAAA,SAAAjD,GACAjW,EAAAmZ,cAAAlD,GAGAjW,EAAAoZ,iBAAA,WACA,GAAAC,GAAAnU,EAAA9E,KAAAJ,EAAAqV,QAAAlT,OAAA+C,EAAA9E,KAAAJ,EAAA2W,cACA,OAAAzR,GAAAoU,KAAAD,EAAAxV,QAAA,IAGA7D,EAAAuZ,kBAAA,SAAAtD,GACA1b,EAAAsK,kBAAAoR,MACAjW,EAAAmZ,cAAA,KACAnZ,EAAAqV,OAAA9a,EAAAE,iBAGAuF,EAAAwZ,aAAA,SAAAvD,GACAjW,EAAAyZ,eAAAxD,GAGAjW,EAAA0Z,mBAAA,SAAAzD,GACAf,EAAAyE,YAAA1D,EAAAjW,EAAA2W,aAAAV,IAAAb,KAAAqB,GACAzW,EAAAyZ,eAAA,MAjKA1f,QAAAC,OAAA,SAAAL,WAAA,eAAA,YAAA,aAAA,gBAAA,eAAA,SAAAge,OCFA,WACA,YAGA,SAAAiC,GAAA1E,EAAAha,EAAAoX,EAAA/X,EAAAiF,GAgCA,QAAAoX,KACA1B,EAAA0B,WAAA5W,EAAAgW,KAAAZ,KAAA,SAAAoB,GACAA,EACAxW,EAAAwW,QAAAA,EAGAxW,EAAAwW,aAKA,QAAA7U,KACAuT,EAAAvT,SAAA3B,EAAAgW,IAAAhW,EAAAiW,WAAAb,KAAA,SAAA2B,GACAA,GACA/W,EAAA+W,MAAAA,EACA/W,EAAAO,MAAAf,EAAAqa,cAAA9C,IAGA/W,EAAA+W,WA/CA,GAAA/W,GAAAf,IACAe,GAAAgW,IAAA1D,EAAA0D,IACAhW,EAAAiW,UAAA3D,EAAA2D,UAEAtU,IACAiV,IAEA5W,EAAA8Z,YAAA,WACA,GAAA9C,GAAAzc,EAAA0c,YAAAjX,EAAAiW,UAAAjW,EAAA+W,MAAArV,MAEAnH,GAAA2c,iBACAF,EACAA,EACAhX,EAAA+W,MAAAI,WACAnX,EAAA+W,MAAAK,YACApX,EAAA+W,MAAAM,UACArX,EAAA+W,MAAArE,IACA1S,EAAA+W,MAAAO,WACAtX,EAAA+W,MAAA9T,QACAjD,EAAA+W,MAAA3T,iBACApD,EAAA+W,MAAAQ,cACAvX,EAAA+W,MAAAS,eACAxX,EAAA+W,MAAAU,YACAzX,EAAA+W,MAAAW,UACA1X,EAAA+W,MAAA3U,WAEAlH,EAAAK,KAAA,UAAAyb,IA/BAjd,QAAAC,OAAA,SAAAL,WAAA,iBAAA,gBAAA,YAAA,eAAA,aAAA,aAAAigB,OCFA7f,QAAAC,OAAA,SAAAL,WAAA,cACA,SAAA,WAAA,SAAA,eAAA,YAAA,eAAA,SACA,SAAAW,EAAAkD,EAAAD,EAAA+U,EAAApX,EAAAC,EAAAC,GACA,YAEAA,GAAAU,OACAX,EAAAW,KACA,SAAAiC,KAGA,WACAP,MAGAlD,EAAAc,OAAAA,EAEAd,EAAAyf,eAAA,WACA,MAAA3e,GAAAmB,aAEAjC,EAAA0f,aAAA,WACA,MAAA5e,GAAAgB,WAGA9B,EAAA2f,eAAA,WAEA,MAAA7e,GAAAgD,aAGA9D,EAAA4f,aAAA,WACA,MAAA/e,GAAAgB,WACAhB,EAAA0C,UAAA,OAGA,IAIAvD,EAAA6f,aAAA,SAAA3b,GACApD,EAAA+e,aAAA3b,GACAlE,EAAA8f,MAAA,GAGA9f,EAAAmE,YAAA,SAAAD,GACA8T,EAAAlX,QACAkX,EAAAlX,OAAAoD,EAAApD,OACAmC,EAAA8c,aAAA/H,IAGAlX,EAAAqD,YAAAD,GAEAlE,EAAA8f,MAAA9f,EAAA8f,SAIA9c,UAAA,kBAAA,WACA,OACA5D,YAAA,2BCxDAK,QAAAC,OAAA,SAAAqc,OAAA,cAAA,WACA,YAEA,SAAAA,GAAAiE,GACA,MAAA,gBAAAA,GACA1a,KAAAC,MAAA,IAAAya,EAAA,KAAA,IAAA,IAGAA,EAKA,MAFAjE,GAAAkE,WAAA,EAEAlE,KCbAtc,QAAAC,OAAA,SAAAL,WAAA,oBAEA,WAAA,YAAA,cAAA,aAAA,eAAA,aAAA,mBAAA,cAAA,eAAA,UAAA,WACA,SAAA6D,EAAAtC,EAAAqE,EAAAC,EAAAnE,EAAAd,EAAA8X,EAAAmI,EAAArf,EAAAuK,EAAAhI,GACA,YAiDA,SAAAuV,KACA,IAAAjT,EAAAya,SAAA,CAIA,GAAAC,IAAA,EACAxP,EAAAsP,EAAAzH,YAAA/S,EAAA+W,MAQA,IAPAhd,QAAAkD,QAAAiO,EAAA,SAAA8H,EAAA7L,GACA,IAAAzB,EAAAvJ,SAAAgL,GAEA,YADAuT,GAAA,KAKAA,GAAAvf,EAAAgB,WAAA,CACA,GAAAoG,GAAAiY,EAAAG,YAAA3a,EAAAiW,UAAAjW,EAAA+W,MACAxc,GAAAsK,kBAAA7E,EAAAiW,UAAA1T,GACAvC,EAAA+W,MAAArV,MAAAa,EAEAvC,EAAAya,UAAA,EACAjd,EAAAwC,EAAAyF,YAIA,QAAA3H,MAvEA,GAAAkC,GAAAf,IAEAA,MAAA2b,YAAA,WACA1f,EAAAK,KAAA,iBAAAyE,EAAAiW,YAGAhX,KAAA4b,UAAA,WACA3f,EAAAK,KAAA,eAAAyE,EAAAiW,YAGAhX,KAAA6b,UAAA,WACA,GAAA9D,GAAAzc,EAAA0c,YAAAjX,EAAAiW,UAAAjW,EAAA+W,MAAArV,MAEAnH,GAAA2c,iBACAF,EACAA,EACAhX,EAAA+W,MAAAI,WACAnX,EAAA+W,MAAAK,YACApX,EAAA+W,MAAAM,UACArX,EAAA+W,MAAArE,IACA1S,EAAA+W,MAAAO,WACAtX,EAAA+W,MAAA9T,QACAjD,EAAA+W,MAAA3T,iBACApD,EAAA+W,MAAAQ,cACAvX,EAAA+W,MAAAS,eACAxX,EAAA+W,MAAAU,YACAzX,EAAA+W,MAAAW,UACA1X,EAAA+W,MAAA3U,WAEAlH,EAAAK,KAAA,UAAAyb,IAGA/X,KAAAwb,UAAA,EACAxb,KAAA0b,YAAA,WACAjd,IACAsC,EAAAya,UAAA,EAEAtf,EAAAW,KAAAgC,EAAAmV,EAEA,IAAA/H,GAAAsP,EAAAzH,YAAA/S,EAAA+W,MACAhd,SAAAkD,QAAAiO,EAAA,SAAA8H,EAAA7L,GACAzB,EAAA5J,KAAAqL,EAAA6L,EAAAlV,EAAAmV,KAGAjT,EAAAyF,YA8BAxG,KAAA8b,eAAA,WACA1I,EAAA0I,eAAA/a,EAAAiW,UAAAjW,EAAA+W,QAGA9X,KAAA+b,YAAA,WACA,GAAAhb,EAAA+W,MAAA,CACA,GAAAkE,GAAA5I,EAAA6I,gBAAAlb,EAAAiW,UAAAjW,EAAA+W,MACA/W,GAAA+W,MAAAoE,SAAAvc,eAAAjC,QAAAse,KAIAhc,KAAA+b,iBAEA1d,UAAA,wBAAA,WACA,OACAwH,OAAA,EACAC,kBACAkR,UAAA,aACAc,MAAA,SACAtR,SAAA,aAEA9L,WAAA,mBACAqL,aAAA,eACAtL,YAAA,kCCvGAK,QAAAC,OAAA,SAAAL,WAAA,iBAEA,WAAA,aAAA,aACA,SAAA6D,EAAAgC,EAAAjF,GACA,gBAKA+C,UAAA,qBAAA,WACA,OACAwH,OAAA,EACAC,kBACA1D,KAAA,QACA4U,UAAA,aACAc,MAAA,SACAtR,SAAA,aAEA9L,WAAA,gBACAqL,aAAA,OACAtL,YAAA,+BCpBAK,QAAAC,OAAA,SAAAL,WAAA,iBACA,UAAA,YAAA,eAAA,WAAA,aACA,SAAAM,EAAAiB,EAAAoX,EAAA9U,EAAAjD,GACA,YAEA,IAAAyF,GAAAf,IACA/E,UAAAC,KAAAC,UAAA,aACA6E,KAAAmc,YAAA,WACApb,EAAAhD,WAAAzC,EAAAE,gBACAuF,EAAAqb,WAAAlb,OAAAC,KAAAJ,EAAAhD,YAAA6G,OACA7D,EAAAqV,SACA,KAAA,GAAAvS,GAAA,EAAAA,EAAA9C,EAAAqb,WAAAhe,SAAAyF,EACA9C,EAAAqV,OAAApX,MACAzC,KAAAwE,EAAAqb,WAAAvY,GACAiU,MAAA/W,EAAAhD,WAAAgD,EAAAqb,WAAAvY,OAIA7D,KAAAmc,cAEA,aAAA9I,GACAA,EAAArS,WAAAhB,KAAAqc,eACArc,KAAAqc,aAAAhJ,EAAArS,UACA1F,EAAAwF,mBAAAd,KAAAqc,aAAArc,KAAAjC,aAGAiC,KAAAqc,cAAArc,KAAAqc,eAAArc,MAAAjC,WACA9B,EAAAK,KAAA,UAAA0D,KAAAqc,cAGArc,KAAAqc,aAAA,KAGArc,KAAAqc,aACArhB,EAAAC,SAAAG,MAAA,iBAAA4E,KAAAqc,aAGArhB,EAAAC,SAAAG,MAAA,uBAGA4E,KAAAsc,SAAA,WACA,MAAApb,QAAAC,KAAAnB,KAAAjC,YAAAK,OAAA,GAGA4B,KAAAuc,YAAA,WACAtgB,EAAAK,KAAA,eAGA0D,KAAA6V,aAAA,WACA9U,EAAAob,cACA5d,KAIAyB,KAAAwc,YAAA,SAAAxF,GACA1b,EAAAwF,mBAAAkW,EAAAhX,KAAAjC,YACA9B,EAAAmB,IAAA,UAAA4Z,IAGAhX,KAAA0Y,QAAA,WACAzc,EAAAmB,IAAA,aAGA4C,KAAAyc,OAAA,WACAxgB,EAAAmB,IAAA,qBChEAtC,QAAAC,OAAA,SAAAL,WAAA,kBAEA,eAAA,YAAA,cAAA,aAAA,eACA,SAAA2Y,EAAApX,EAAAqE,EAAAC,EAAAnE,GACA,gBAEAiC,UAAA,sBAAA,WACA,OACAwH,OAAA,EACAC,kBACAxE,MAAA,SACAwW,MAAA,UAEApd,WAAA,iBACAqL,aAAA,YACAtL,YAAA,gCCfAK,QAAAC,OAAA,SAAAL,WAAA,oBAEA,eAAA,YAAA,cAAA,aAAA,eACA,SAAA2Y,EAAApX,EAAAqE,EAAAC,EAAAnE,GACA,YAEA,IAAA2E,GAAAf,IAEAA,MAAAsB,MAAAf,EAAAqa,cAAA5a,KAAA8X,OACA9X,KAAA0c,gBAAAtgB,EAAAugB,mBAAA3c,KAAA8X,MAAArV,OAEAzC,KAAA4c,YAAA,SAAAra,GACA,GAAAxB,EAAA+W,MAAAoB,WAAA,EAAA,CACA,GAAAA,GAAA,GAAAC,MAAApY,EAAA+W,MAAAoB,WACA,OAAAA,GAAA2D,uBAIA7c,KAAA8c,YAAA,SAAAva,GACA,GAAAxB,EAAA+W,MAAAoB,WAAA,EAAA,CACA,GAAAA,GAAA,GAAAC,MAAApY,EAAA+W,MAAAoB,WACA,OAAAA,GAAA6D,uBAIA/c,KAAAgd,gBAAA,SAAAza,GACA,GAAA0a,GAAA,EAcA,OATAniB,SAAAkD,QAAA+C,EAAA2b,gBAAA,SAAAQ,EAAAC,GACAD,EAAA9e,OAAA,IACA6e,EAAA7e,OAAA,IACA6e,GAAA,MAEAA,GAAAC,EAAA9e,OAAA,IAAA+e,KAIAF,MAGA5e,UAAA,wBAAA,WACA,OACAwH,OAAA,EACAC,kBACAkR,UAAA,aACAc,MAAA,UAEApd,WAAA,mBACAqL,aAAA,YACAtL,YAAA,kCCpDAK,QAAAC,OAAA,SAAAL,WAAA,sBAEA,UAAA,YAAA,eAAA,WAAA,aAAA,aAAA,OAAA,cAAA,oBAAA,YACA,SAAAM,EAAAiB,EAAAoX,EAAA9U,EAAAjD,EAAAiF,EAAA4S,EAAA7S,EAAA8c,EAAAC,GACA,YAuHA,SAAAxc,KACAvF,EAAAwF,mBAAAC,EAAAC,UAAAD,EAAAhD,YA0MA,QAAAyC,GAAAC,EAAAC,GACA,MAAAD,IAAAC,EACAC,KAAAC,MAAA,KAAA,EAAAF,EAAAD,IAAA,IAGA,EArUA,GAAAM,GAAAf,IAwBA,IAtBA/E,SAAAC,KAAAC,UAAA,eACAH,EAAAC,SAAAG,MAAA,0BACAJ,EAAA8Z,SAAA,EAAA,GAEA9U,KAAAjC,WAAAzC,EAAAE,gBACAwE,KAAAiB,WAAAC,OAAAC,KAAAnB,KAAAjC,YACAiC,KAAAiB,aACAjB,KAAAiB,eAEAjB,KAAAiB,WAAA7C,OAAA,EACA4B,KAAAgB,UAAA1F,EAAAwC,kBAGAkC,KAAAgB,UAAA,KAGAhB,KAAAgB,WAAAhB,KAAAgB,YAAAhB,MAAAjC,YACAiC,KAAAiB,WAAA7C,OAAA,IACA4B,KAAAgB,UAAAhB,KAAAiB,WAAA,IAIAjB,KAAAgB,UAAA,CAKAhB,KAAAsC,kBAAA,WACA,GAAA,MAAAtC,KAAA4B,eAAA,CACA,GAAAW,GAAAxB,EAAAhD,WAAAgD,EAAAC,UACAuB,KACAvC,KAAA4B,eAAA5B,KAAAwC,mBAAAD,EAAAA,EAAAE,QAIA,MAAAzC,MAAA4B,gBAGA5B,KAAA0C,SAAA,WACA,MAAA3B,GAAAhD,WAAAgD,EAAAC,YAGAhB,KAAAsd,OAAA,SAAA3Z,GACA5C,EAAAwc,cAAA5Z,EAEA5C,EAAAyc,yBACAzc,EAAA0c,2BACA1c,EAAA2c,2BACA3c,EAAA4c,8BAGA3d,KAAAwC,mBAAA,SAAAD,EAAAE,GACA,GAAAE,GAAApC,EAAAqC,cAAAL,GACAM,EAAAtC,EAAAuC,iBAAAL,GACAM,EAAAxC,EAAAyC,YAAAP,GACAQ,EAAAN,EAAAO,OAAAL,GAAAK,OAAAH,EAMA,OALA,OAAAR,EAAAY,WAAAZ,EAAAY,UAAA/E,OAAA,IACA6E,EAAAA,EAAAC,OAAAX,EAAAY,YAEAF,EAAA3C,EAAA8C,WAAAH,GAEA1C,EAAAiC,mBAAAD,EAAAU,IAGAjD,KAAAmF,UAAA,WAEA,GAAAC,IAAA,EACAD,EAAA,IACArK,SAAAkD,QAAA+C,EAAAE,WAAA,SAAAD,EAAA2C,GACAyB,GACA,MAAAD,IACAA,EAAAnE,GAGAA,GAAAD,EAAAC,YACAoE,GAAA,KAIA,MAAAD,IACAA,EAAApE,EAAAE,WAAA,IAGAF,EAAAC,UAAAmE,EACApE,EAAAa,eAAA,KACAf,IACAE,EAAAhD,WAAAzC,EAAAE,gBACAuF,EAAA6c,cAGA5d,KAAAqF,UAAA,WAEA,GAAAC,IAAA,EACAD,EAAA,IACAvK,SAAAkD,QAAA+C,EAAAE,WAAA,SAAAD,EAAA2C,GACA3C,GAAAD,EAAAC,YACAsE,GAAA,GAGAA,IACAD,EAAArE,KAIA,MAAAqE,IACAA,EAAAtE,EAAAE,WAAAF,EAAAE,WAAA7C,OAAA,IAGA2C,EAAAC,UAAAqE,EACAtE,EAAAa,eAAA,KACAf,IACAE,EAAAhD,WAAAzC,EAAAE,gBACAuF,EAAA6c,cAOA5d,KAAA6d,SACA,QACA,OACA,OACA,OAGA7d,KAAAoB,iBACA,KAAA,GAAAC,KAAAf,GAAAgB,MACAhB,EAAAgB,MAAAD,GAAAE,gBACAvB,KAAAoB,eAAApC,KAAAqC,EAIArB,MAAA8d,aACA9d,KAAA8d,UAAA,KAAA,EACA9d,KAAA8d,UAAA,IAAA,EACA9d,KAAA8d,UAAA,IAAA,EACA9d,KAAA8d,UAAA,GAAA,EAEA9d,KAAAud,iBAEAvd,KAAA2P,QAEA3P,KAAA4d,WAAA,WACA7c,EAAA4O,QAEA7U,QAAAkD,QAAA+C,EAAAhD,WAAAgD,EAAAC,WAAAyB,MAAA,SAAAL,EAAAuB,GACA,GAAA,YAAAvB,EAAAoC,SAAA,CACA,GAAAuZ,GAAAhd,EAAA+c,UAAA1b,EAAA8E,eACA6W,IAAA,GAAAA,IACAA,EAAA,EAIA,KADA,GAAAC,GAAA,IACA,CAKA,GAJAjd,EAAA4O,KAAAqO,KACAjd,EAAA4O,KAAAqO,GAAAjd,EAAAkd,iBAGAld,EAAA4O,KAAAqO,GAAAD,GAAApa,MAAA,EAAA,CACAvB,EAAA8E,iBACA9E,EAAA8E,eAAA,EAGA,IAAA+P,GAAAlW,EAAAmd,SAAA9b,EAAAuB,EACA5C,GAAA4O,KAAAqO,GAAAD,GAAA9G,CACA,OAGA+G,QAOAjd,EAAA4O,KAAAvR,OAAA,IACA2C,EAAA4O,KAAA5O,EAAA4O,KAAAvR,OAAA,GAAA2C,EAAAkd,kBAIAje,KAAAie,cAAA,SAAA1V,GACA,OAAAxH,EAAAmd,UAAAhX,eAAA,SAAAnG,EAAAmd,UAAAhX,eAAA,QAAAnG,EAAAmd,UAAAhX,eAAA,QAAAnG,EAAAmd,UAAAhX,eAAA,SAGAlH,KAAAke,SAAA,SAAA9b,EAAAuB,GACA,OAAAvB,KAAAA,EAAAuB,MAAAA,IAGA3D,KAAAme,MAAA,SAAApO,GACAhP,EAAAwc,kBACAxN,EAAApM,OAAA,GACA5C,EAAAuc,OAAAvN,EAAApM,OAIA5C,EAAAqd,KAAArO,IAIA/P,KAAAoe,KAAA,SAAArO,GAEA,GAAAtN,GAAA1B,EAAAhD,WAAAgD,EAAAC,WAAAyB,KACA,IAAAsN,EAAApM,OAAA,EAAA,CACA,GAAA0a,GAAAtO,EAAA3N,KAAA8E,cAEAnG,GAAA2K,YAAAqE,EAAA3N,KAAAK,EAAA1B,EAAAwc,eAAArW,gBACAnG,EAAA2K,YAAAjJ,EAAA1B,EAAAwc,eAAAc,GACA5b,EAAAsN,EAAApM,OAAAlB,EAAA1B,EAAAwc,eACA9a,EAAA1B,EAAAwc,eAAAxN,EAAA3N,SAEA,CACA,GAAAA,GAAAK,EAAA1B,EAAAwc,cACAxc,GAAA2K,YAAAtJ,EAAA2N,EAAA3N,KAAA8E,gBACAzE,EAAA6b,OAAAvd,EAAAwc,cAAA,GACA9a,EAAAzD,KAAAoD,GAGArB,EAAAa,eAAA,KACAb,EAAAwc,iBACAxc,EAAA6c,aACA7c,EAAAW,uBACAnD,KAGAyB,KAAA0L,YAAA,SAAAtJ,EAAAmc,GACA,GAAA3S,KACA9Q,SAAAkD,QAAAoE,EAAAd,MAAA,SAAAS,EAAA4B,GACA4a,GACA3S,EAAA5M,MAAAqC,GAAAU,EAAAV,GAAAoC,IAAA1B,EAAA0B,KAAA8a,EAAA,SAIAnc,EAAA4E,iBAAA4E,EACAxJ,EAAA8E,eAAAqX,EAEAnc,EAAAwS,UAAAtU,EAAA8C,WAAAhB,EAAA4E,iBAAA5E,EAAAd,QAIAtB,KAAA0B,uBACA1B,KAAAiC,uBAAA,SAAAC,EAAAC,EAAAC,GAEA,GADApC,KAAAqC,mBAAAF,EAAAC,GACApC,KAAA0B,oBAAAS,GACA,MAAAnC,MAAA0B,oBAAAS,GAAAD,IAIAlC,KAAAqC,mBAAA,SAAAF,EAAAC,GACA,IAAArB,EAAAW,oBAAAS,IAAApB,EAAAwc,kBAAA,CAGAvd,KAAA0B,oBAAAS,KAEA,IAAAI,GAAAxB,EAAAhD,WAAAgD,EAAAC,WACAqQ,EAAA9O,EAAAE,MAAA1B,EAAAwc,eAEA3R,KACA4S,IACApc,GAAAd,QACAxG,QAAAkD,QAAAoE,EAAAd,MAAA,SAAAS,EAAA4B,GACAiI,EAAA5M,MAAAqC,GAAAU,EAAAV,GAAAoC,IAAA1B,EAAA0B,KAAA4N,EAAAnK,eAAA,SAEAsX,EAAAle,EAAA8C,WAAAwI,EAAAxJ,EAAAd,QAGAsK,KACA9Q,QAAAkD,QAAAqT,EAAA/P,MAAA,SAAAS,EAAA4B,GACAiI,EAAA5M,MAAAqC,GAAAU,EAAAV,GAAAoC,IAAA1B,EAAA0B,KAAArB,EAAA8E,eAAA,QAEA,IAAAuX,GAAAne,EAAA8C,WAAAwI,EAAAyF,EAAA/P,OAEAgC,IAAAhC,MAAAkd,IAAAld,MAAAmd,GACA3jB,SAAAkD,QAAAuE,EAAAE,MAAA,SAAAiB,EAAAC,GACAvB,IAAAsB,GAAA2N,IAAA3N,GACAJ,EAAAtE,KAAA0E,IAIA,IAAAH,GAAAxC,EAAAyB,mBAAAD,EAAAe,GACAD,EAAAtC,EAAAuB,mBAEA,KAAA,GAAAjB,KAAAf,GAAAgB,MACAhB,EAAAgB,MAAAD,GAAAE,iBACAR,EAAAW,oBAAAS,GAAAd,GAAAb,EAAAO,EAAAyC,QAAAnC,EAAAkC,GAAAE,IAAA1C,EAAAyC,QAAAnC,EAAAgC,GAAAI,QAKAzD,KAAA8D,YAAA,SAAAzC,GACA,GAAA0C,GAAA,EACA,IAAA,WAAAzD,EAAAgB,MAAAD,GAAA2C,QAAA,CACA,GAAAC,GAAA,CACAlD,GAAAhD,WAAAgD,EAAAC,WAAAgD,UACAC,EAAAlD,EAAAhD,WAAAgD,EAAAC,WAAAgD,QAAA3C,IAEA0C,GAAAzD,EAAA4D,SAAAD,GAAA1H,SAEA,IAAA,aAAA+D,EAAAgB,MAAAD,GAAA2C,QAAA,CACA,GAAAC,GAAA,CACAlD,GAAAhD,WAAAgD,EAAAC,WAAAmD,mBACAF,EAAAlD,EAAAhD,WAAAgD,EAAAC,WAAAmD,iBAAA9C,IAEA0C,GAAAzD,EAAA4D,SAAAD,GAAA1H,KAEA,MAAAwH,GAAA,IAAAzD,EAAAgB,MAAAD,GAAA9E,MAGAyD,KAAAwD,QAAA,SAAAnC,EAAAC,GAEA,IAAA,GADAsC,GAAAtC,EAAAlD,OACAyF,EAAA,EAAAA,EAAAD,IAAAC,EACA,GAAAvC,EAAAuC,GAAAxC,IAAAA,EACA,MAAAC,GAAAuC,EAGA,QAAAxC,GAAAA,EAAAoC,IAAA,IAYAzD,KAAApE,KAAA,WACAN,EAAAsK,kBAAA7E,EAAAC,UAAAD,EAAAhD,WAAAgD,EAAAC,WAAAyB,OACAxG,EAAAK,KAAA,UAAAyE,EAAAC,YAGAhB,KAAA4d,iBCpVA9iB,QAAAC,OAAA,SAAAL,WAAA,aAEA,WAAA,YAAA,cAAA,aAAA,eAAA,aACA,SAAA6D,EAAAtC,EAAAqE,EAAAC,EAAAnE,EAAAd,GACA,YAEA,IAAAyF,GAAAf,IAEAA,MAAAsB,MAAAf,EAAAqa,cAAA5a,KAAA8X,MAEA,IAAA4G,GAAA7iB,aAAA6B,QAAA,uBACAsC,MAAA2e,SAAAviB,EAAA4I,OAAA0Z,GACA1e,KAAA2e,WACAD,EAAA,SACA1e,KAAA2e,SAAAviB,EAAA4I,OAAA,WAGAhF,KAAA4e,iBAAA,WACA,GAAAC,GAAAziB,EAAAugB,mBAAA3c,KAAA8X,MAAArV,MACA,OAAA1B,GAAA4d,SAAApiB,OAAAsiB,GACAA,EAAA9d,EAAA4d,SAAApiB,UAOAyD,KAAA8e,cAAA,WACA,MAAA1iB,GAAA2iB,YAGA/e,KAAAgf,oBAAA,SAAA/gB,GACA+B,KAAA2e,SAAAviB,EAAA4I,OAAA/G,GACApC,aAAAC,QAAA,uBAAAmC,IAGA+B,KAAA4c,YAAA,SAAAra,GACA,GAAAxB,EAAA+W,MAAAoB,WAAA,EAAA,CACA,GAAAA,GAAA,GAAAC,MAAApY,EAAA+W,MAAAoB,WACA,OAAAA,GAAA2D,uBAIA7c,KAAA8c,YAAA,SAAAva,GACA,GAAAxB,EAAA+W,MAAAoB,WAAA,EAAA,CACA,GAAAA,GAAA,GAAAC,MAAApY,EAAA+W,MAAAoB,WACA,OAAAA,GAAA6D,uBAIA/c,KAAAif,eAAA,WACA,OAAAle,EAAA4d,SAAA1Z,QAAAjF,KAAA4e,mBAAAxgB,OAAA2C,EAAA4d,SAAA1Z,QAGAjF,KAAAkf,aAAA,WACA,GAAAC,GAAA,GACAC,EAAAre,EAAA+W,MAAArV,KAEA,IAAA,kBAAA1B,EAAA4d,SAAApiB,KAAA,CACA,GAAA8iB,GAAA,EACAC,EAAA,CACAxkB,SAAAkD,QAAAohB,EAAA,SAAAhd,EAAAuB,GACAvB,EAAAoC,UAAAzD,EAAA4d,SAAApiB,KACA+iB,IAEAld,EAAAmd,oBACAF,GAAAjd,EAAAmd,qBAIAJ,EAAAG,EAAA,MAAAD,MAEA,IAAA,mBAAAte,EAAA4d,SAAApiB,KAAA,CAEA,GAAAijB,GAAA,EACAC,EAAA,EACAC,IACA5kB,SAAAkD,QAAAohB,EAAA,SAAAhd,EAAAuB,GACA,GAAAvB,EAAAoC,UAAAzD,EAAA4d,SAAApiB,KAAA,CACA,GAAAojB,GAAAvd,EAAAoJ,WACAmU,KACAA,EAAA,GAGAA,IAAAD,KACAA,EAAAC,GAAA,GAEAD,EAAAC,KACAH,QAEApd,GAAAwd,qBACAH,GAAArd,EAAAwd,sBAIAT,EAAA,GACArkB,QAAAkD,QAAA0hB,EAAA,SAAAhY,EAAAiY,GACAR,EAAA/gB,OAAA,IACA+gB,GAAA,KAEAA,GAAAzX,IAGAyX,EAAAK,EAAA,KAAAL,EAAA,OAAAM,MAEA,CACA,GAAAI,GAAA,CACA/kB,SAAAkD,QAAAohB,EAAA,SAAAhd,EAAAuB,GACAvB,GAAAA,EAAAoC,UAAAzD,EAAA4d,SAAApiB,MACAsjB,MAIAV,EAAAU,CACA,IAAApiB,GAAArB,EAAA4I,OAAAjE,EAAA4d,SAAApiB,KACAkB,IAAA,eAAAA,KACA0hB,GAAA,MAAA1hB,EAAAqiB,aAIA,MAAAX,GAAA,IAAApe,EAAA4d,SAAApiB,MAGAyD,KAAA6V,aAAA,WACA9U,EAAAyF,YAGAxG,KAAAJ,WAAA,SAAAwC,GACAA,EAAAxC,YAAA,CACA,IAAA+F,KACA7K,SAAAkD,QAAA+C,EAAA+W,MAAArV,MAAA,SAAAiB,EAAAC,GACAD,IAAAA,EAAA9D,YACA+F,EAAA3G,KAAA0E,KAIA3C,EAAA+W,MAAArV,MAAAkD,EACA5E,EAAAO,MAAAf,EAAAqa,cAAA7Z,EAAA+W,OACAxc,EAAAsK,kBAAA7E,EAAAiW,UAAArR,GACA5E,EAAAyF,eAIAnI,UAAA,iBAAA,WACA,OACAwH,OAAA,EACAC,kBACAkR,UAAA,aACAc,MAAA,SACAtR,SAAA,YACAuZ,OAAA,WAEArlB,WAAA,YACAqL,aAAA,YACAtL,YAAA,0BC1JAK,QAAAC,OAAA,SAAAL,WAAA,mBAEA,YAAA,eAAA,WAAA,aAAA,UAAA,OAAA,cAAA,oBACA,SAAAuB,EAAAoX,EAAA9U,EAAAjD,EAAAmL,EAAA0M,EAAA7S,EAAA8c,GACA,YAGApd,MAAAggB,UAAA,EACA,QAAA3M,KACArT,KAAAzD,KAAA8W,EAAA9W,MAGAyD,KAAAA,UAAA,WACA1E,EAAAsK,kBAAA5F,KAAAzD,SACAN,EAAAK,KAAA,gBCdAxB,QAAAC,OAAA,SAAAL,WAAA,iBAEA,UAAA,YAAA,eAAA,WAAA,aAAA,UAAA,OAAA,cAAA,oBAAA,YACA,SAAAM,EAAAiB,EAAAoX,EAAA9U,EAAAjD,EAAAmL,EAAA0M,EAAA7S,EAAA8c,EAAAC,GACA,YAEA,IAAAtc,GAAAf,IACAA,MAAAjC,WAAAzC,EAAAE,gBACAwE,KAAAuC,SACAvC,KAAAggB,UAAA,EACA,aAAA3M,IACArT,KAAAgB,UAAAqS,EAAArS,UACAhB,KAAAgB,YAAAhB,MAAAjC,aACAiC,KAAAuC,MAAAvC,KAAAjC,WAAAiC,KAAAgB,WACAhB,KAAAggB,UAAA,IAIAhgB,KAAAgB,UAAA,GAEAhB,KAAAigB,aAAAjgB,KAAAgB,UACAhB,KAAAmD,aACAnD,KAAAkE,SAAA5D,EAAA4D,SACAlE,KAAAkgB,YAAA5f,EAAA4f,YAEAlgB,KAAAuC,MAAA8V,WACArY,KAAAqY,WAAArY,KAAAuC,MAAA8V,WAGArY,KAAAqY,WAAA/X,EAAA4f,YAAA,GAGAlgB,KAAAuC,MAAAyB,QACAhE,KAAAgE,QAAAhE,KAAAuC,MAAAyB,QAGAhE,KAAAgE,QAAA1D,EAAA4D,SAAA,GAGAlE,KAAAuC,MAAA4B,iBACAnE,KAAAmE,iBAAAnE,KAAAuC,MAAA4B,iBAGAnE,KAAAmE,iBAAA7D,EAAA4D,SAAA,GAGAlE,KAAAuC,MAAA2V,WACAlY,KAAAkY,WAAAlY,KAAAuC,MAAA2V,WAGAlY,KAAAkY,WAAA,GAGAlY,KAAAuC,MAAA4V,YACAnY,KAAAmY,YAAAnY,KAAAuC,MAAA4V,YAGAnY,KAAAmY,YAAA,GAGAnY,KAAAuC,MAAA6V,WAAApY,KAAAuC,MAAA6V,UAAA,EACApY,KAAAoY,UAAApY,KAAAuC,MAAA6V,UAGApY,KAAAoY,UAAA,EAGApY,KAAAmgB,aAAA,WAGA,IAAA,GAFA5M,GAAAJ,EAAAgN,eACAC,KACA3R,EAAA,EAAAA,EAAA8E,EAAAnV,SAAAqQ,EACA0E,EAAAkN,eAAA9M,EAAA9E,KAAAzO,KAAAsgB,MACAF,EAAAphB,KAAAuU,EAAA9E,GAGA,OAAA2R,IAGApgB,KAAAnD,KAAA,SAAAkE,GACA,GAAAwf,GAAApN,EAAAgN,cACAI,GAAAniB,OAAA,GACAG,EAAA,WAEA,OAAAwC,GAAAwB,OACAzH,QAAAkD,QAAAuiB,EAAA,SAAAtiB,EAAAC,GACAD,EAAAoD,IAAAN,EAAAwB,MAAAkR,IAAApS,KACAN,EAAA0S,IAAAxV,KAKA8C,EAAAyf,kBAKAxgB,KAAA0W,OAAA,WACA1b,EAAA8Z,SAAA,EAAA,IAOAuI,EAAAxgB,KAAA,WAAAkE,EAAAlE,KAAAkE,KAEAf,KAAAygB,WAAA,SAAAzQ,EAAA0Q,GACA,MAAArD,GAAAsD,YAAAD,GAAA1Q,IAEAhQ,KAAA4gB,iBAAA,SAAA5Q,GACA,MAAAqN,GAAAwD,eAAA7gB,KAAAyT,IAAApS,IAAA2O,IAEAhQ,KAAA8gB,eAAA,SAAA9Q,GACA,MAAAqN,GAAA0D,aAAA/gB,KAAAmY,YAAAnY,KAAAyT,IAAApS,IAAA2O,IAGAhQ,KAAAghB,iBAAA,WACA,OAAAhhB,KAAAgB,eAIAhB,KAAAgB,YAAAhB,MAAAjC,cACAiC,KAAAggB,UAAAhgB,KAAAgB,WAAAhB,KAAAigB,eAQAjgB,KAAAihB,GAAA,WACA,GAAA3I,GAAA+E,EAAAsD,YAAA3gB,KAAAkY,YACAK,EAAA8E,EAAAsD,YAAA3gB,KAAAmY,aACAK,EAAA6E,EAAAwD,eAAA7gB,KAAAyT,IAAApS,IACAoX,EAAA4E,EAAA0D,aAAA/gB,KAAAmY,YAAAnY,KAAAyT,IAAApS,IACA8B,EAAAka,EAAA6D,aAAAlhB,KAAAoY,UAEApY,MAAAggB,WACAhgB,KAAAigB,aAAAjgB,KAAAgB,UACA1F,EAAA0c,YAAAhY,KAAAgB,eAGA1F,EAAA2c,iBACAjY,KAAAigB,aACAjgB,KAAAgB,UACAhB,KAAAkY,WACAlY,KAAAmY,YACAnY,KAAAoY,UACApY,KAAAyT,IACAzT,KAAAqY,WACArY,KAAAgE,QACAhE,KAAAmE,iBACAmU,EAAAC,EAAAC,EAAAC,EAAAtV,GAEAlH,EAAAK,KAAA,UAAA0D,KAAAgB,YAGAhB,KAAAwgB,aAAA,WACAxgB,KAAAmD,UAAAka,EAAA6D,aAAAlhB,KAAAoY,YAIA7Z,EAAA,WACA,GAAA8c,GAAApgB,SAAAkmB,eAAA,iBACA9F,KACAA,EAAA+F,QACA/F,EAAAgG,kBAAA,EAAA,YCtKAvmB,QAAAC,OAAA,SAAAL,WAAA,gBAEA,WAAA,aAAA,aAAA,WAAA,eAAA,OAAA,UAAA,mBACA,SAAA6D,EAAAgC,EAAAjF,EAAAgmB,EAAAllB,EAAA+W,EAAA1M,EAAA2M,GACA,YAEA,IAAArS,GAAAf,IACAe,GAAAwgB,cAAA,GACAxgB,EAAAygB,WAAA,EACAzgB,EAAAwL,SACAxL,EAAA0gB,WAEAzhB,KAAA0hB,WAAA,WACA3gB,EAAA4gB,eACA5gB,EAAA0gB,QAAAH,EAAAM,WAAA7gB,EAAA4d,SAAA5d,EAAA+W,MAAA/W,EAAAwL,OACA,GAAAxL,EAAA0gB,QAAArjB,QACA2C,EAAA8gB,aAAA9gB,EAAA0gB,QAAA,MAKAzhB,KAAA6hB,aAAA,SAAA5jB,GACA,GAAAgZ,GAAAqK,EAAAQ,WAAA7jB,EAAA8C,EAAA4d,SAAA5d,EAAAygB,WAGA,IAFAzgB,EAAAwL,MAAAvN,KAAAiY,GACAlW,EAAAygB,aACAF,EAAAS,kBAAAhhB,EAAA4d,SAAA5d,EAAAygB,YAUAzgB,EAAA2gB,iBAVA,CAEA,GAAAM,GAAAV,EAAA5jB,QAAAqD,EAAAwL,OACA0V,EAAA7O,EAAAU,YAAAkO,EACAlnB,SAAAkD,QAAAikB,EAAA,SAAAlO,EAAA7L,GACAzB,EAAA5J,KAAAqL,EAAA6L,EAAA,aAAA,WAAAhT,EAAAmhB,aAAAD,EAAAD,OAEAjhB,EAAAmhB,aAAAD,EAAAD,KAQAhiB,KAAAkiB,aAAA,SAAAD,EAAA7f,GACA,IAAAqE,EAAAwN,aAAA,CAEA,GAAAwH,IAAA,CAOA,IANA3gB,QAAAkD,QAAAikB,EAAA,SAAAlO,EAAA7L,GACAzB,EAAAvJ,SAAAgL,KACAuT,GAAA,KAIAA,GACA1a,EAAAwL,MAAAnO,OAAA,EAAA,CACA2C,EAAAohB,QACA,IAAAH,GAAA5O,EAAAc,WAAA9R,EACA9G,GAAAkK,SAAAzE,EAAAiW,UAAAgL,GACAjhB,EAAAyF,cAMAxG,KAAAH,MAAA,WACAkB,EAAAygB,WAAA,EACAzgB,EAAAwL,SACAhO,EAAA,WACAwC,EAAA2gB,gBAIA1hB,KAAA2hB,WAAA,WACA,MAAA5gB,GAAAwgB,eAAAxgB,EAAA4d,SAAApiB,MAGAyD,KAAAoiB,MAAA,WACArhB,EAAAwgB,cAAAxgB,EAAA4d,SAAApiB,KAEA4W,EAAAtW,KAAA,aAAAkE,EAAAlB,OACA4G,EAAA5J,KAAA,kBAAA,KAAA,aAAAkE,EAAAlB,OACAzD,EAAAS,KAAAkE,EAAA4d,SAAApiB,KAAAwE,EAAAlB,QAGAG,KAAAqiB,WAAA,WACA,MAAAf,GAAAe,WAAAthB,EAAA4d,SAAA5d,EAAA+W,WAGA9X,KAAAmiB,OAAA,WACAphB,EAAAwgB,cAAA,GACAxgB,EAAAlB,SAGAG,KAAAsiB,KAAA,WACA,GAAA,GAAAvhB,EAAAygB,WACAzgB,EAAAohB,aAEA,CACA,EAAA,CACAphB,EAAAygB,aACAzgB,EAAAwL,MAAAgW,KAEA,IAAAC,GAAAlB,EAAAM,WAAA7gB,EAAA4d,SAAA5d,EAAA+W,MAAA/W,EAAAwL,aACAiW,EAAApkB,QAAA,GAAA2C,EAAAygB,WAAA,EAEAzgB,GAAA2gB,kBAKArjB,UAAA,oBAAA,WACA,OACAwH,OAAA,EACAC,kBACA6Y,SAAA,YACA7G,MAAA,SACAd,UAAA,aACAxQ,SAAA,aAEA9L,WAAA,eACAqL,aAAA,WACAtL,YAAA,8BCtHAK,QAAAC,OAAA,SAAAL,WAAA,iBACA,SAAA,UAAA,SAAA,YAAA,eAAA,aAAA,UAAA,WAAA,eAAA,WAAA,mBAAA,cAAA,OAAA,YAAA,aAAA,cACA,SAAAW,EAAAL,EAAAmB,EAAAF,EAAAoX,EAAA/X,EAAAmL,EAAAlI,EAAArC,EAAAuC,EAAA2U,EAAAmI,EAAApI,EAAAkK,EAAA9c,EAAAD,GACA,YAqDA,SAAA0T,MAEAvN,EAAAwN,cAAA/X,EAAAgB,YAAAiW,EAAAjW,YAIAqB,EAAA,WACA,GAAAyC,GAAA3F,EAAA2b,UACAzU,EAAAlH,EAAAyc,KAEAzc,GAAAoY,IAAAN,EAAAsD,QAAApb,EAAAoY,IAAApS,IAEAhG,EAAAid,cAAA+E,EAAAsD,YAAAtlB,EAAA6c,YACA7c,EAAAkd,eAAA8E,EAAAsD,YAAAtlB,EAAA8c,aACA9c,EAAAoY,MACApY,EAAAmd,YAAA6E,EAAAwD,eAAAxlB,EAAAoY,IAAApS,IACAhG,EAAAod,UAAA4E,EAAA0D,aAAA1lB,EAAA8c,YAAA9c,EAAAoY,IAAApS,KAEAhG,EAAA8H,UAAAka,EAAA6D,aAAA7lB,EAAA+c,UAEA,IAAA9U,GAAAiY,EAAAG,YAAA1a,EAAAuB,EACA9D,KAEApD,EAAA0C,cACA1C,EAAAyc,OACArV,MAAAa,EACA4V,WAAA3W,EAAA2W,WAEAhB,WAAA7c,EAAA6c,WACAC,YAAA9c,EAAA8c,YACAC,UAAA/c,EAAA+c,UACA3E,IAAApY,EAAAoY,IACA4E,WAAAhd,EAAAgd,WACArU,QAAA3I,EAAA2I,QACAG,iBAAA9I,EAAA8I,iBACAmU,cAAAjd,EAAAid,cACAC,eAAAld,EAAAkd,eACAC,YAAAnd,EAAAmd,YACAC,UAAApd,EAAAod,UACAtV,UAAA9H,EAAA8H,WAEA9H,EAAA0C,WAAAiD,GAAA3F,EAAAyc,MACAzc,EAAAiG,MAAAf,EAAAqa,cAAAvf,EAAAyc,MAEA,IAAAkE,GAAA5I,EAAA6I,gBAAA5gB,EAAA2b,UAAA3b,EAAAyc,MACAzc,GAAAyc,MAAAoE,SAAAvc,eAAAjC,QAAAse,KAIA,QAAAnd,MA3FA,GATA5D,SAAAC,KAAAC,UAAA,aACAH,EAAAC,SAAAG,MAAA,cAEAe,EAAA0Y,kBAAAxB,EAAAlX,QAEAd,EAAA2b,UAAA,GACA3b,EAAAyc,SAGA,KAAAzE,IAAA,KAAAA,GAAA,CACAhY,EAAA2b,UAAA3D,EAAAoP,EAEApnB,EAAA6c,WAAA7E,EAAAqP,EACArnB,EAAA8c,YAAA9E,EAAAjK,EACA/N,EAAA+c,UAAA/E,EAAAsP,EACAtnB,EAAAoY,KAAApS,GAAAgS,EAAA5E,GACApT,EAAAgd,WAAA/X,EAAA4f,YAAA7M,EAAA7G,GACAnR,EAAA2I,QAAA1D,EAAA4D,SAAAmP,EAAAZ,GACApX,EAAA8I,iBAAA7D,EAAA4D,SAAAmP,EAAA7C,EAEA,IAAA/N,MAEAmgB,EAAAvP,EAAAxP,CAEA/I,SAAAkD,QAAA4kB,EAAAje,MAAA,KAAA,SAAAke,EAAAlf,GACA,GAAAvB,GAAAgR,EAAA2B,WAAA8N,EAEAzgB,GAAAf,GAAA,GACAoB,EAAAzD,KAAAoD,KAIA/G,EAAAyc,SACAzc,EAAA0C,cACA1C,EAAA0C,WAAA1C,EAAA2b,WAAA3b,EAAAyc,MACAzc,EAAAyc,MAAArV,MAAAA,EACApH,EAAA2B,WAAA,EAEAlC,QAAAkD,QAAAud,EAAAzH,YAAAzY,EAAAyc,OAAA,SAAA/D,EAAA7L,GACAzB,EAAA5J,KAAAqL,EAAA6L,EAAAlV,EAAAmV,KAGA9X,EAAAW,KAAAgC,EAAAmV,GACAb,EAAAtW,KAAAgC,EAAAmV,GACAqJ,EAAAxgB,KAAAmX,GAEAzV,IAGAlD,EAAAihB,SAAApb,OAAAC,KAAA9F,EAAA0C,YAAAK,OAAA,EAsDA/C,EAAAwgB,UAAA,WACA,GAAAiH,GAAAxnB,EAAA0c,YAAA3c,EAAA2b,UAAA3b,EAAAyc,MAAArV,MAGAnH,GAAA2c,iBACA6K,EACAA,EACAznB,EAAA6c,WACA7c,EAAA8c,YACA9c,EAAA+c,UACA/c,EAAAoY,IACApY,EAAAgd,WACAhd,EAAA2I,QACA3I,EAAA8I,iBACA9I,EAAAid,cAAAjd,EAAAkd,eAAAld,EAAAmd,YAAAnd,EAAAod,UAAApd,EAAA8H,WAEAlH,EAAAmB,IAAA,UAAA0lB,OC5HA,WACA,YAaA,SAAAC,GAAA/nB,EAAAM,EAAAW,EAAAqE,EAAAlE,EAAAmC,GAKAyB,KAAAgjB,YAAA1iB,EAAA0iB,YAEAhjB,KAAAsW,WAAA,GACAtW,KAAAijB,eAAA,EAEA,MAAAjjB,KAAAkjB,aACAljB,KAAAkjB,WAAA,IAGAljB,KAAAmjB,WAAA,WACA,MAAAnjB,MAAAgjB,aAGAhjB,KAAAojB,eAAA,WACA,MAAA,IAAApjB,KAAAkjB,YAAA,MAAAljB,KAAAkjB,WACA,sBAGAljB,KAAAkjB,YAIAljB,KAAAqjB,iBAAA,WACA,IAAArjB,KAAAkjB,YAAA,MAAAljB,KAAAkjB,aACAljB,KAAAkjB,WAAAljB,KAAAojB,kBAEAnnB,EAAAK,KAAA,kBAAA0D,KAAAkjB,aA1CApoB,QAAAC,OAAA,SAAAsD,UAAA,uBAAA,WACA,OACAwH,SACAC,oBAEApL,YAAA,UAAA,aAAA,YAAA,cAAA,eAAA,WAAAqoB,GACAhd,aAAA,cACAtL,YAAA,oCCVAK,QAAAC,OAAA,SAAAL,WAAA,kBACA,SAAA,UAAA,eAAA,WAAA,YACA,eACA,eACA,OACA,cACA,cACA,SACA,aACA,SACAW,EAAAL,EAAAqY,EAAA9U,EAAAtC,EACAC,EACAE,EACA+W,EACA7S,EACAuL,EACA1P,EACAb,GACA,YA6FA,SAAAuB,KAEAsW,EAAAjW,WACAomB,IAGAnQ,EAAAtW,KAAAuN,EAAA,WAAA7L,EAAA+kB,KAGAlnB,EAAAS,KAAAxB,EAAAe,aAAAG,KAAAgC,GAGA,QAAA6L,GAAAtL,IAIA,QAAAwkB,KAEA,GAAApnB,EAAAgB,YAAAiW,EAAAjW,WAAA,CAGA,GAAAqjB,GAAApN,EAAAgN,cAEAI,GAAAjC,OAAA,EAAA,EAAAjjB,EAAA8X,KAAA,IACA9X,EAAA8X,KAAAoN,EACAllB,EAAAkY,QAAAJ,EAAAK,YAEA,IAAA+P,GAAAld,OAAAxK,aAAA6B,QAAA,aACA,OAAA6lB,GACAzoB,QAAAkD,QAAAuiB,EAAA,SAAAtiB,EAAAC,GACA,GAAAD,EAAAoD,IAAAkiB,EAEA,YADAloB,EAAAoY,IAAAxV,MAzHA,GADA5C,EAAAe,aAAAA,EAAAonB,OAAA,UAAAnQ,EAAA3M,WACArL,EAAAe,aAAA,CACA,GAAAqnB,GAAA5nB,aAAA6B,QAAA,uBAUA,OATA+lB,KACAA,EAAA,UAGApoB,EAAAe,aAAAA,EAAA4I,OAAAye,QACApoB,EAAAe,cAEAH,EAAAK,KAAAjB,EAAAe,aAAAE,OAKAtB,EAAAC,SAAAG,MAAA,iBAAAC,EAAAe,aAAAG,KAAA8a,cAEAhc,EAAAoY,KAAApS,MAAA9E,KAAA,IACAlB,EAAA8X,MAAA9X,EAAAoY,KACApY,EAAAkY,WACAlY,EAAAqoB,SAAA,EACAroB,EAAAsoB,SAAA,GACAtoB,EAAAib,WAAA,GACAjb,EAAAkb,gBAAA,EACAlb,EAAAuoB,OAAAtjB,EAAAyS,UACA1X,EAAA0G,MAAAV,MAAA9E,KAAA,IACAlB,EAAAiG,OAAAjG,EAAA0G,MAEAjH,QAAAkD,QAAAsC,EAAAgB,MAAA,SAAAS,EAAAG,GACAH,EAAA8hB,YACAxoB,EAAAiG,MAAAtC,KAAA+C,IAIA,IAAA2hB,GAAArd,OAAAxK,aAAA6B,QAAA,YACAgmB,GAAA,GAAAA,EAAA,MACAroB,EAAAqoB,SAAAA,EAEA,IAAAC,GAAAtd,OAAAxK,aAAA6B,QAAA,YACAimB,GAAA,GAAAA,EAAA,MACAtoB,EAAAsoB,SAAAA,GAGAtoB,EAAA6nB,WAAArnB,aAAA6B,QAAA,cACA,MAAArC,EAAA6nB,aACA7nB,EAAA6nB,WAAA,GAGA,IAAAY,GAAAjoB,aAAA6B,QAAA,aACAomB,OAAAA,IAAAxjB,GAAAgB,QACAjG,EAAA0G,KAAAzB,EAAAgB,MAAAwiB,IAGA3nB,EAAAU,OACAX,EAAAgB,WACAL,IAGAX,EAAAW,KAAAuN,EAAA,WAAA7L,EAAA1B,KAGAxB,EAAA0oB,SAAA,WACA,GAAAN,GAAA5nB,aAAA6B,QAAA,uBACA+lB,KACApoB,EAAAe,aAAAA,EAAA4I,OAAAye,GACApoB,EAAAe,cAEAH,EAAAK,KAAAjB,EAAAe,aAAAE,QAKAjB,EAAAO,KAAA,WACAP,EAAAe,aAAA4nB,YACAnoB,aAAAC,QAAA,WAAAT,EAAAqoB,UACA7nB,aAAAC,QAAA,WAAAT,EAAAsoB,WAGAtoB,EAAAe,aAAA6nB,SACA,MAAA5oB,EAAAoY,KACA5X,aAAAC,QAAA,YAAAT,EAAAoY,IAAApS,IAIA,MAAAhG,EAAA0G,MACAlG,aAAAC,QAAA,aAAAT,EAAA0G,KAAAV,IAGAxF,aAAAC,QAAA,aAAAT,EAAA6nB,aA0CA7nB,EAAA6oB,YAAA5jB,EAAA6jB,YAEA9oB,EAAA8nB,WAAA,WAEA,GAAA/D,GAAAhjB,EAAAmT,SAAAlU,EAAAe,aAAAG,KACA,IAAA,MAAA6iB,EAEA,MAAA,KAGAA,GAAAA,EAAAxa,KAAA,SAAAwM,EAAAC,GACA,MAAAA,GAAAvI,WAAAsI,EAAAtI,aAIAzN,EAAAO,MAEA,IAEAwoB,KAFA,GAAAjL,OAAAC,aAGA,OAAA/d,GAAA0G,OACAqiB,EAAA/oB,EAAA0G,KAAAsiB,GAOA,KAAA,GAJAC,MACAC,KACAC,EAAApF,EAAAhhB,OACAqmB,EAAA,EACA5gB,EAAA,EAAAA,EAAA2gB,IAAAC,EAAAppB,EAAAib,YAAAjb,EAAA0G,KAAAV,IAAA,KAAAwC,EAAA,CACA,GAAA6e,GAAAtD,EAAAvb,EACA,IAAA,MAAA6e,EAAA,CAEA,IAAArnB,EAAAe,aAAA4nB,YACAtB,EAAA5Z,WAAAzN,EAAAqoB,UAAAhB,EAAA5Z,WAAAzN,EAAAsoB,UACA,QAIA,KAAAtoB,EAAAe,aAAAsoB,UACA,MAAAhC,EAAA9Z,OAAAvN,EAAA6oB,YAAAxB,EAAA9Z,KAAAvH,IACA,QAIA,KAAAhG,EAAAe,aAAA6nB,SACA,MAAA5oB,EAAAoY,KAAApY,EAAAoY,IAAApS,GAAA,IACAhG,EAAAoY,IAAAkR,WAAAjC,EAAAhP,cACA,QAMA,IADA7H,EAAA+Y,SAAAlC,GACAA,EAAAle,UAAAnJ,EAAAe,aAAAG,KACA,QAIA,IAAA,IAAAlB,EAAA6nB,WAAA,CAEA,GAAA2B,GAAAxpB,EAAA6nB,WAAAve,MAAA,IACA,IAAAkgB,EAAAzmB,SACAymB,GAAAxpB,EAAA6nB,YAGA,KAAA,GADA4B,IAAA,EACAC,EAAA,EAAAA,EAAAF,EAAAzmB,SAAA2mB,EACA,GAAArC,EAAAnmB,KAAA8a,cAAAta,QAAA8nB,EAAAE,GAAA1N,mBAAA,CACAyN,GAAA,CACA,OAIA,IAAAA,EACA,SAIA,GAAAzpB,EAAA0G,KAAAV,IAAA,EAAA,CAIA,IAAA,GAHA2jB,IAAA,EAEAC,KACAzU,EAAA,EAAAA,EAAAkS,EAAAphB,MAAAlD,SAAAoS,EAAA,CACA,GAAAzO,GAAA2gB,EAAAphB,MAAAkP,EACA,IAAAzO,EAAAV,IAAAhG,EAAA0G,KAAAV,GAAA,CACA2jB,GAAA,EACAC,EAAAphB,EAAA4gB,EACAQ,EAAAzU,EAAAnK,OAAAtE,EAAA0B,IACA,OAEA1B,EAAAV,IAAA+iB,IACAY,GAAA,EACAC,EAAAphB,EAAA4gB,EACAQ,EAAAzU,EAAAnK,OAAAtE,EAAA0B,MAIA,IAAAuhB,EACA,QAGAV,GAAAtlB,KAAAimB,GAIAV,EAAAvlB,KAAA0jB,GACA+B,KAIA,GAAAppB,EAAA0G,KAAAV,IAAA,EAAA,CAEA,GAAA4hB,GAAAtiB,KAAAukB,IAAAT,EAAAppB,EAAAib,WAEAgO,GAAAA,EAAA1f,KAAA,SAAAugB,EAAAC,GACA,MAAAA,GAAA5U,EAAA2U,EAAA3U,GAIA,KAAA,GADA6U,MACAxhB,EAAA,EAAAA,EAAAof,IAAApf,EACAwhB,EAAArmB,KAAAulB,EAAAD,EAAAzgB,GAAAA,GAEA0gB,GAAAc,EAGAhqB,EAAAkb,gBAAAgO,EAAAnmB,QAEA,GAAA+a,OAAAC,SAGA,OAAAmL,IAGAlpB,EAAAsb,gBAAA,SAAAC,GACAvb,EAAAib,WAAAjb,EAAAkb,gBAAAK,EACAvb,EAAAkb,gBAAA,MC5RA,WACA,YAeA,SAAA+O,GAAAtqB,EAAAuD,EAAAjD,EAAAa,EAAAgX,EAAAjX,EAAAuK,EAAAnG,EAAAlE,EAAAH,GA2DA,QAAAspB,GAAAC,GAEA,MAAA,OAAAA,EACA,uBAAAA,EAAAhQ,cAAA,UAGA,KAIA,QAAAiQ,KAEA,GAAA1kB,EAAA2kB,aAAA3kB,EAAA0S,IAAApS,GACA,MAAAN,GAAA4kB,MAIA,IAAAC,KACA,IAAA7kB,EAAA0S,IAAApS,IAAA,EAAA,CACA,GAAAwkB,GAAA1S,EAAAkN,eAAAtf,EAAA0S,IACAmS,GAAA5mB,KAAA6mB,GAGA/qB,QAAAkD,QAAA4nB,EAAA,SAAAC,EAAAliB,GACA,GAAAmiB,GAAAP,EAAAM,EACAC,KACArf,EAAAvJ,SAAA4oB,GAKAC,EAAAH,EAAA7kB,EAAA0S,KAHAhN,EAAA5J,KAAAipB,EAAA,KAAA1b,EAAA,WAAA7L,EAAA,WAAAwnB,EAAAH,EAAA7kB,EAAA0S,YAUA,QAAAsS,GAAAH,EAAAnS,GAEA1S,EAAA4kB,SACA,IAAAK,IAAA,CACAlrB,SAAAkD,QAAA4nB,EAAA,SAAAC,EAAAliB,GACA,GAAAmiB,GAAAP,EAAAM,EACA,KAAApf,EAAAvJ,SAAA4oB,GAEA,YADAE,GAAA,KAKAA,IACAlrB,QAAAkD,QAAA4nB,EAAA,SAAAC,EAAAliB,GAKA,IAAA,GAJAmiB,GAAAP,EAAAM,GAEAF,EAAAlf,EAAAmH,QAAAkY,GACAG,EAAAN,EAAAvnB,OACAoS,EAAA,EAAAA,EAAAyV,IAAAzV,EACA,GAAA,GAAAmV,EAAAnV,GAAAhI,SAIAmd,EAAAnV,GAAA0V,aAAA,GACAP,EAAAnV,GAAA2V,aAAA,GACAR,EAAAnV,GAAA4V,aAAA,GACAT,EAAAnV,GAAA6V,aAAA,GACAV,EAAAnV,GAAA8V,aAAA,GACAX,EAAAnV,GAAA+V,aAAA,GAAA,CAEA,GAAAvE,IAAAxV,EAAAmZ,EAAAnV,GAEAwR,GAAA3gB,GAAAskB,EAAAnV,GAAAnP,GACA2gB,EAAAxd,SAAA,SACAwd,EAAAtd,WAAA,SACAsd,EAAAzlB,KAAAL,EAAA0C,UAAA+mB,EAAAnV,GAAAhI,OAAAmd,EAAAnV,GAAA/H,aACAuZ,EAAAtO,aAAAiS,EAAAnV,GAAAgW,QACAxE,EAAApZ,KAAAtI,EAAAyS,UAAA,GACAiP,EAAAzX,YAAAsb,EAAArQ,cACAwM,EAAAxlB,KAAAmpB,EAAAnV,GAAA7H,eAEA5H,EAAA4kB,OAAA3mB,KAAAgjB,MAKAjhB,EAAA2kB,YAAAjS,EAAApS,IAyDA,QAAA+I,GAAAtL,IAIA,QAAAwkB,KACA,GAAApnB,EAAAgB,YAAAiW,EAAAjW,WAAA,CACA,GAAAqjB,GAAApN,EAAAgN,cAEAI,GAAAjC,OAAA,EAAA,EAAAvd,EAAAoS,KAAA,IACApS,EAAAoS,KAAAoN,EACAxf,EAAAwS,QAAAJ,EAAAK,YAEA,IAAA+P,GAAAld,OAAAxK,aAAA6B,QAAA,aACA,OAAA6lB,GACAzoB,QAAAkD,QAAAuiB,EAAA,SAAAtiB,EAAAC,GACA,GAAAD,EAAAoD,IAAAkiB,EAEA,YADAxiB,EAAA0S,IAAAxV,KAMA8C,EAAAoiB,cAIA,QAAAtmB,KAEAsW,EAAAjW,WACAqB,EAAA+kB,GAGAnQ,EAAAtW,KAAAuN,EAAA,WAAA7L,EAAA+kB,KArOA,GAAAviB,GAAAf,IAEAA,MAAAuT,WACAvT,KAAAsW,WAAA,GACAtW,KAAAijB,eAAA,EACAjjB,KAAA8lB,QAAA,GACA9lB,KAAA2lB,UACA3lB,KAAA0lB,eAEA1lB,KAAA5D,aAAAA,EAAA4I,OAAA,UAEAhF,KAAAkjB,WAAArnB,aAAA6B,QAAA,cACA,MAAAsC,KAAAkjB,aACAljB,KAAAkjB,WAAA,GAKA/mB,GAAAU,OACAX,EAAAgB,WACAL,IAGAX,EAAAW,KAAAuN,EAAA,WAAA7L,EAAA1B,KAGAmD,KAAA+jB,SAAA,WACAxlB,EAAA,WACAwC,EAAA3E,cACAH,EAAAK,KAAAyE,EAAA3E,aAAAE,SAKA0D,KAAAhD,UAAA,WAEA,IAAAd,EAAAgB,WAMA,MAJAhB,GAAAe,gBACAf,EAAAW,KAAAuN,EAAA,WAAA7L,EAAAkoB,qBAGA,CAGA,IAAAZ,GAAA1S,EAAAkN,eAAAtf,EAAA0S,KACAqS,EAAAP,EAAAM,EACA,OAAA,OAAAC,IACArf,EAAAvJ,SAAA4oB,IAgGA9lB,KAAA0mB,eAAA,WACAprB,EAAAqrB,gBAAA5lB,EAAAiiB,aACAjiB,EAAAiiB,YAAA1nB,EAAAsrB,kBAGA5mB,KAAAmjB,WAAA,WAEA,GAAAwC,GAAAF,GACA,IAAA,MAAAE,EACA,QAIA,OAAA5kB,EAAA0S,KACA5X,aAAAC,QAAA,YAAAiF,EAAA0S,IAAApS,IAEAxF,aAAAC,QAAA,aAAAiF,EAAAmiB,WAKA,KAAA,GAHAqB,MACA0B,EAAAN,EAAAvnB,OACAqmB,EAAA,EACA5gB,EAAA,EAAAA,EAAAoiB,GAAAxB,EAAA1jB,EAAAuV,aAAAzS,EAAA,CACA,GAAA6e,GAAAiD,EAAA9hB,EAEA,IAAA,IAAA9C,EAAAmiB,WAAA,CACA,GAAA2B,GAAA9jB,EAAAmiB,WAAAve,MAAA;AACA,GAAAkgB,EAAAzmB,SACAymB,GAAA9jB,EAAAmiB,YAGA,KAAA,GADA4B,IAAA,EACAC,EAAA,EAAAA,EAAAF,EAAAzmB,SAAA2mB,EACA,GAAArC,EAAAnmB,MAAAmmB,EAAAnmB,KAAAsqB,WAAAxP,cAAAta,QAAA8nB,EAAAE,GAAA1N,mBAAA,CACAyN,GAAA,CACA,OAIA,IAAAA,EACA,SAIA/jB,EAAA0S,IAAApS,IAAA,IAAAN,EAAA0S,IAAAkR,WAAAjC,EAAAhP,gBAIA6Q,EAAAvlB,KAAA0jB,GACA+B,KAGA,MADA1jB,GAAAkiB,eAAAtiB,KAAAukB,IAAAT,EAAA1jB,EAAAuV,YACAiO,GAlNAzpB,QAAAC,OAAA,SAAAsD,UAAA,uBAAA,WACA,OACAwH,SACAC,kBACA2N,IAAA,OACAN,KAAA,SAEAzY,YAAA,UAAA,WAAA,aAAA,SAAA,OAAA,eAAA,UAAA,cAAA,eAAA,YAAA4qB,GACAvf,aAAA,cACAtL,YAAA,oCCZAK,QAAAC,OAAA,SACAL,WAAA,aACA,UAAA,WAAA,cAAA,SAAA,eAAA,UACA,SAAAM,EAAAuD,EAAA+B,EAAAnE,EAAAD,EAAAuK,GAEA,YAEA,IAAA1F,GAAAf,IAEAA,MAAA8mB,MAAA,KACA9mB,KAAA+mB,gBACA/mB,KAAAsW,WAAA,GACAtW,KAAAijB,eAAA,EAEAjjB,KAAAkjB,WAAArnB,aAAA6B,QAAA,kBACA,MAAAsC,KAAAkjB,aACAljB,KAAAkjB,WAAA,IAGAjoB,SAAAC,KAAAC,UAAA,eACAH,EAAAC,SAAAG,MAAA,2BAEA,IAAA8M,GAAA,kBAEAzB,GAAA5J,KAAAqL,EAAA,KAAA,aAAA,WACA3J,EAAA,WACAwC,EAAAimB,gBAIAhnB,KAAAgnB,UAAA,WAEA,GAAAvgB,EAAAvJ,SAAAgL,IAAAhM,EAAAgB,WAAA,CACA6D,EAAA+lB,QAIA,KAAA,GAFAva,GAAA9F,EAAAmH,QAAA1F,GAEArE,EAAA,EAAAA,EAAA0I,EAAAnO,SAAAyF,EAAA,CACA,GAAAoT,GAAA1K,EAAA1I,EACA,IAAAoT,EAAAzO,OAAA,EAAA,CACA,GAAAye,IACA5lB,GAAA4V,EAAA5V,GACA9E,KAAAwE,EAAAnC,UAAAqY,EAAAzO,OAAAyO,EAAAxO,aACAG,KAAAtI,EAAAyS,UAAAkE,EAAApO,MACArM,KAAAya,EAAAtO,eACAG,WAAAmO,EAAAlO,WACAb,SAAA+O,EAAA/O,SAEAnH,GAAA+lB,MAAA9nB,KAAAioB,OAMAjnB,KAAAmjB,WAAA,WAMA,GALAtnB,aAAAC,QAAA,iBAAAiF,EAAAmiB,YACA,MAAAniB,EAAA+lB,OACA/lB,EAAAimB,YAGA,MAAAjmB,EAAA+lB,MAAA,CAOA,IAAA,GAHAvC,MACA2C,EAAAnmB,EAAA+lB,MAAA1oB,OACAqmB,EAAA,EACA5gB,EAAA,EAAAA,EAAAqjB,GAAAzC,EAAA1jB,EAAAuV,aAAAzS,EAAA,CACA,GAAA6e,GAAA3hB,EAAA+lB,MAAAjjB,EAEA,IAAA,IAAA9C,EAAAmiB,WAAA,CACA,GAAA2B,GAAA9jB,EAAAmiB,WAAAve,MAAA,IACA,IAAAkgB,EAAAzmB,SACAymB,GAAA9jB,EAAAmiB,YAGA,KAAA,GADA4B,IAAA,EACAC,EAAA,EAAAA,EAAAF,EAAAzmB,SAAA2mB,EACA,GAAArC,EAAAnmB,MAAAmmB,EAAAnmB,KAAAsqB,WAAAxP,cAAAta,QAAA8nB,EAAAE,GAAA1N,mBAAA,CACAyN,GAAA,CACA,OAIA,IAAAA,EACA,SAIAP,EAAAvlB,KAAA0jB,GACA+B,IAIA,MADA1jB,GAAAwV,gBAAAgO,EAAAnmB,OACAmmB,IAGAvkB,KAAA2W,gBAAA,SAAAC,GACA7V,EAAAuV,WAAAvV,EAAAwV,gBAAAK,EACA7V,EAAAwV,gBAAA,GAGAvW,KAAApB,UAAA,SAAAuoB,EAAAC,GACA,MAAAlrB,GAAA0C,UAAAuoB,EAAAC,OCtGA,WACA,YAIA,SAAAC,KACA,OACAC,SAAA,IACAzhB,SACAC,kBACA2N,IAAA,OACA8T,SAAA,aAEA9sB,YAAA,+BACAsL,aAAA,OACArL,YACA,UAAA,YAAA,eAAA,WAAA,aAAA,UAAA,OAAA,cAAA,oBAAA,YACA8sB,IAIA,QAAAA,GAAAxsB,EAAAiB,EAAAoX,EAAA9U,EAAAjD,EAAAmL,EAAA0M,EAAA7S,EAAA8c,EAAAC,GAkCA,QAAAjT,GAAAtL,IAjCAkB,KAAAmgB,aAAA,WAGA,IAAA,GAFA5M,GAAAJ,EAAAgN,eACAC,KACA3R,EAAA,EAAAA,EAAA8E,EAAAnV,SAAAqQ,EACA0E,EAAAkN,eAAA9M,EAAA9E,KAAAzO,KAAAsgB,MACAF,EAAAphB,KAAAuU,EAAA9E,GAGA,OAAA2R,IAGApgB,KAAAynB,YAAA,WACA,MAAAtU,GAAAsU,eAGAznB,KAAAsT,WAAA,SAAAoU,GAEA,IAAA,GADAnU,GAAAJ,EAAAK,aACA/E,EAAA,EAAAA,EAAA8E,EAAAnV,SAAAqQ,EACA,GAAA8E,EAAA9E,GAAAjC,EAAAmb,aAAAD,EACA,MAAAnU,GAAA9E,GAAAlS,MAKAyD,KAAA0W,OAAA,SAAAjD,GACAzT,KAAAyT,IAAAA,EACAA,GACAzT,KAAAunB,YAKApU,EAAAtW,KAAAuN,EAAA7L,GAnDAzD,QAAAC,OAAA,SAAAsD,UAAA,mBAAAgpB,MCHA,WACA,YAIA,SAAAO,GAAAxrB,EAAAH,GACA,OACAqrB,SAAA,IACAzhB,SACAC,kBACA+hB,SAAA,YACApqB,IAAA,OACA+I,SAAA,aAEA/L,YAAA,uCACAC,YAAA,eAAAotB,GACA/hB,aAAA,QAIA,QAAA+hB,GAAA1rB,GAEA,GAAA2E,GAAAf,IAEAe,GAAAge,WAAA3iB,EAAA2iB,WACAhe,EAAAgnB,WAAA,EAEAhnB,EAAAinB,YAAA,SAAAxqB,GAEAuD,EAAAtD,IAAAD,EACA3B,aAAAC,QAAA,uBAAA0B,EAAAjB,MAEAwE,EAAA8mB,WACA9mB,EAAAgnB,WAAAhnB,EAAAgnB,WAGAhnB,EAAAyF,UACAzF,EAAAyF,YAlCA1L,QAAAC,OAAA,SAAAsD,UAAA,sBAAA,eAAA,YAAAupB,OCHA,WACA,YAIA,SAAAK,GAAA7U,EAAAnX,EAAAE,GACA,OACAmrB,SAAA,IACAzhB,OACAzD,KAAA,SAEA3H,YAAA,kCACAytB,KAAA,SAAA7sB,EAAA2I,EAAAmkB,GAEA9sB,EAAAwG,OAAA,OAAA,SAAAqE,EAAAC,GACAD,IACA7K,EAAA+sB,UAAA/sB,EAAAgtB,aAIAhtB,EAAAgtB,QAAA,WACA,GAAAhtB,EAAA+G,MAAA/G,EAAA+G,KAAA5F,KAAA,EAAA,CACA,GAEA8rB,GAFAC,EAAA5nB,KAAA6nB,MAAAntB,EAAA+G,KAAA5F,KAAA,IAAA,EAUA,OANA8rB,GADA,UAAAjtB,EAAA+G,KAAAoC,SACA,YAGA,WAGA+jB,EAAA,EACAD,EAAAC,EAAA,OAGAD,EAAA,IAAAC,EAAA,OAGA,MAAA,OAGAltB,EAAA+sB,UAAA/sB,EAAAgtB,UAEAhtB,EAAAotB,gBAAA,WACA,MAAAptB,GAAA+G,MAAA/G,EAAA+G,KAAA5F,KAAA,EACAnB,EAAA+G,KAAA5F,KAAA,GAAA,GAAA,EAEA,GAGAnB,EAAAqtB,gBAAA,WACA,MAAArtB,GAAA+G,MAAA/G,EAAA+G,KAAA5F,KAAA,EACA,GAAAmE,KAAA6nB,MAAAntB,EAAA+G,KAAA5F,KAAA,IAAA,IAAA,EAEA,KApDA1B,QAAAC,OAAA,SAAAsD,UAAA,iBAAA,mBAAA,YAAA,SAAA4pB,OCHA,WACA,YAIA,SAAAU,GAAAvV,EAAAnX,EAAAE,GACA,OACAmrB,SAAA,IACAzhB,OACAzD,KAAA,QACAwmB,QAAA,YAEAnuB,YAAA,kCACAytB,KAAA,SAAA7sB,EAAA2I,EAAAmkB,GACA9sB,EAAAwtB,SAAA,SAAA1sB,EAAAmB,YAAAnB,OAAA,IAAAiX,EAAA0C,WAAAza,EAAA+G,MAEA/G,EAAAwG,OAAA,OAAA,SAAAqE,EAAAC,GACAD,IACA7K,EAAAwtB,SAAA,SAAA1sB,EAAAmB,YAAAnB,OAAA,IAAAiX,EAAA0C,WAAAza,EAAA+G,SAIA/G,EAAAytB,SAAA,WACAztB,EAAAutB,SACA3sB,EAAAK,KAAAjB,EAAAwtB,aArBA/tB,QAAAC,OAAA,SAAAsD,UAAA,iBAAA,mBAAA,YAAA,SAAAsqB,OCHA,WACA,YAIA,SAAAI,KACA,OACAzB,SAAA,IACAzhB,SACAC,kBACA1D,KAAA,SAEA3H,YAAA,iCACAC,WAAAsuB,EACAjjB,aAAA,QAIA,QAAAijB,KAEAhpB,KAAAyoB,gBAAA,WACA,MAAAzoB,MAAAoC,MAAApC,KAAAoC,KAAAoK,GAAAxM,KAAAoC,KAAAoK,EAAAyc,QAAA,EACAjpB,KAAAoC,KAAAoK,EAAAyc,QAAA,EAAA,GAAA,EAEA,GAGAjpB,KAAA0oB,gBAAA,WACA,MAAA1oB,MAAAoC,MAAApC,KAAAoC,KAAAoK,GAAAxM,KAAAoC,KAAAoK,EAAAyc,QAAA,EACA,GAAAtoB,KAAA6nB,MAAAxoB,KAAAoC,KAAAoK,EAAAyc,QAAA,GAAA,EAEA,GA5BAnuB,QAAAC,OAAA,SAAAsD,UAAA,gBAAA0qB,OCHA,WACA,YAIA,SAAAG,GAAAziB,EAAAvK,EAAAqC,GAEA,OACA+oB,SAAA,IACA6B,YAAA,EACAtjB,SAEApL,YAAA,gCACAytB,KAAA,SAAA7sB,EAAA2I,EAAAmkB,GACA9sB,EAAA+tB,IAAA,yBAAA,WACA/tB,EAAAguB,iBAGAhuB,EAAA+tB,IAAA,qBAAA,WACA/tB,EAAAguB,iBAGAhuB,EAAA+tB,IAAA,qBAAA,WACA7qB,EAAA,WACAlD,EAAAiuB,WAAA,MAIAjuB,EAAA+tB,IAAA,yBAAA,WACA7qB,EAAA,WACAlD,EAAAiuB,WAAA,MAIAjuB,EAAAkuB,WAAA,EACAluB,EAAAguB,aAAA,WACA,GAAAG,GAAA/iB,EAAAwN,YACA/X,GAAAgB,YAEAssB,IAGAjrB,EAAA,YACAlD,EAAAkuB,WAAAC,IAAAnuB,EAAAouB,eACApuB,EAAAouB,YAAAD,GAEAnuB,EAAAkuB,WAAAC,KAIAnuB,EAAAguB,eACAhuB,EAAAiuB,WAAA,IAhDAxuB,QAAAC,OAAA,SAAAsD,UAAA,gBAAA,UAAA,eAAA,WAAA6qB,OCHA,WACA,YAIA,SAAAQ,KAEA,OACApC,SAAA,IACAY,KAAA,SAAAriB,EAAA7B,EAAAmkB,GACA,GAAAwB,IAAA,CACA3lB,GAAA4lB,GAAA,QAAA,SAAAC,GACA,IAAAF,EACA,IAEA3pB,KAAA8pB,eAAA,EACA9pB,KAAA+pB,aAAA/pB,KAAA/B,MAAAG,OAAA,EACAurB,GAAA,EACA,MAAA7Q,GAEA9Y,KAAAgqB,SACAL,GAAA,KAKA3lB,EAAA4lB,GAAA,OAAA,SAAAC,GACAF,GAAA,MAxBA7uB,QAAAC,OAAA,SAAAsD,UAAA,yBAAAqrB,OCHA,WACA,YAIA,SAAAO,GAAA3pB,GACA,OACAgnB,SAAA,IACAzhB,OACAvE,MAAA,SACAwW,MAAA,SACAoS,SAAA,YACAC,UAAA,aACA/S,OAAA,WAEA8Q,KAAA,SAAA7sB,EAAA2I,EAAAmkB,GAaA,QAAAiC,KAcA,QAAAC,GAAAC,GACA,GAAAC,GAAAvmB,EAAAwmB,OACAD,GAAAE,IAAA,UAAAC,GACAH,EAAAI,KAAAL,GAEAM,EAAAC,MAAAN,GACAK,EAAAL,EACAO,EAAA9rB,KAAAurB,GApBAvmB,EAAAymB,IAAA,UAAA,OACA,IAAAnpB,GAAAjG,EAAAiG,KACAA,KACAA,EAAAjG,EAAA6uB,UAGApvB,QAAAkD,QAAA8sB,EAAA,SAAA7sB,EAAAC,GACAD,EAAA8sB,UAGA,IAAAC,IAAA,EACAJ,EAAA5mB,CAYAlJ,SAAAkD,QAAAsD,EAAA,SAAAS,EAAA7D,GACA,GAAA+sB,GAAA,EAEA,IAAAlpB,EAAAV,KAAAf,GAAAgB,MAAA,CAEA,GAAA4pB,GAAA5qB,EAAAgB,MAAAS,EAAAV,GACA,KAAAhG,EAAA+b,QAAA,QAAA8T,IAAAA,EAAA5hB,KACA,MAGA,IAAAjO,EAAA+b,SAAA8T,EAAA7vB,EAAA+b,QACA,MAYA,IATA4T,IACAC,GAAAE,GAEAH,GAAA,EAEA,cAAAjpB,KACAkpB,GAAAlpB,EAAAqpB,WAAA,UAGA/vB,EAAAyc,MACA,GAAA,WAAAoT,EAAAlnB,QAAA,CACA,GAAAC,GAAA,CACA5I,GAAAyc,MAAA9T,UACAC,EAAA5I,EAAAyc,MAAA9T,QAAA3C,IAEA4pB,GAAA3qB,EAAA4D,SAAAD,GAAA1H,KAAA,aAEA,IAAA,aAAA2uB,EAAAlnB,QAAA,CACA,GAAAC,GAAA,CACA5I,GAAAyc,MAAA3T,mBACAF,EAAA5I,EAAAyc,MAAA3T,iBAAA9C,IAEA4pB,GAAA3qB,EAAA4D,SAAAD,GAAA1H,KAAA,SAIA0uB,GAAAC,EAAA3uB,KAAA,UAAA2uB,EAAAG,QAAAtpB,GACAmpB,EAAAI,YAAA,GACAxwB,QAAAkD,QAAAsD,EAAA,SAAAiqB,EAAAC,GACA,GAAAD,EAAAlqB,IAAA6pB,EAAAI,YAIA,YAHAC,EAAA9nB,KAAA1B,EAAA0B,MACAwnB,GAAA,IAAAC,EAAAG,QAAAE,WAQAP,KACAC,GAAAE,GAEAH,GAAA,EAEA,cAAAjpB,KACAkpB,GAAAlpB,EAAAqpB,WAAA,oBAGAH,GAAAlpB,EAAAV,GAAA,UAAAU,EAAA0B,GAGA4mB,GAAAY,KApGA,GAAAE,EAKAA,GAJA9vB,EAAA8uB,UAIA,SAAA9uB,EAAA8uB,UAAA,IAHA,EAMA,IAAAW,MACAJ,EAAA1mB,EAAAymB,IAAA,UA+FApvB,GAAAwG,OAAA,QAAA,SAAAqE,EAAAC,GACAD,GACAkkB,MAIA/uB,EAAAwG,OAAA,WAAA,SAAAqE,EAAAC,GACAD,GACAkkB,QA9HAtvB,QAAAC,OAAA,SAAAsD,UAAA,cAAA,cAAA4rB,OCHA,WACA,YAIA,SAAAwB,KACA,OACAC,QAAA,UACAxD,KAAA,SAAAriB,EAAA7B,EAAAmkB,EAAAwD,GACAA,EAAAC,SAAA5sB,KAAA,SAAAf,GACA,MAAA,GAAAA,IAEA0tB,EAAAE,YAAA7sB,KAAA,SAAAf,GACA,MAAA6tB,YAAA7tB,EAAA,QAVAnD,QAAAC,OAAA,SAAAsD,UAAA,sBAAAotB,MCHA,WACA,YAIA,SAAAA,KACA,OACAC,QAAA,UACAxD,KAAA,SAAAriB,EAAA7B,EAAAmkB,EAAAwD,GACAA,EAAAC,SAAA5sB,KAAA,SAAAf,GACA,MAAA,GAAAA,EAAA,MAEA0tB,EAAAE,YAAA7sB,KAAA,SAAAf,GACA,MAAA,KAAA6tB,WAAA7tB,EAAA,QAVAnD,QAAAC,OAAA,SAAAsD,UAAA,uBAAAotB,MCHA,WACA,YAGA,SAAApO,GAAA5W,EAAA2W,EAAAjK,EAAA7S,GASA,QAAA8J,GAAAtL,IAPA,GAAAitB,GAAA,iCACAC,EAAA,gCACAC,EAAA,0BAEAC,EAAA,wBACAC,EAAA,iCAMA,QACAtvB,KAAA,SAAAuvB,GACAjZ,EAAAtW,KAAAuN,EAAAgiB,GACA3lB,EAAA5J,KAAAkvB,EAAA3O,EAAAiP,wBAAAjiB,EAAAgiB,GACA3lB,EAAA5J,KAAAmvB,EAAA5O,EAAAkP,kBAAAliB,EAAAgiB,GACA3lB,EAAA5J,KAAAovB,EAAA7O,EAAAmP,sBAAAniB,EAAAgiB,GACA3lB,EAAA5J,KAAAqvB,EAAA,KAAA9hB,EAAAgiB,GACA3lB,EAAA5J,KAAAsvB,EAAA,KAAA/hB,EAAAgiB,IAGAlL,aAAA,SAAA9I,GACA,GAAAjV,KACA,IAAAiV,EAAA,EAAA,CACA,GAAAzU,GAAA8C,EAAA+lB,SAAAN,EAAA,KAAA9T,EACA,IAAA,GAAAzU,EAAAvF,OAAA,CACA,GAAAukB,GAAAlc,EAAAgmB,OAAAP,EAAAvoB,EAAA,GACA,IAAA,MAAAgf,EAAA,CACA,GAAA+J,GAAAjmB,EAAA+lB,SAAAL,EAAA,cAAAxJ,EAAAgK,mBACA,IAAA,GAAAD,EAAAtuB,OAAA,CACA,GAAAgL,GAAA3C,EAAAgmB,OAAAN,EAAAO,EAAA,GACA,OAAAtjB,IACAjG,EAAA7C,EAAA8G,SAAAgC,OAMA,MAAAjG,IAGAwd,YAAA,SAAA/N,GACA,GAAAA,EAAA,EAAA,CACA,GAAAjP,GAAA8C,EAAA+lB,SAAAR,EAAA,KAAApZ,EACA,IAAA,GAAAjP,EAAAvF,OACA,MAAAqI,GAAAgmB,OAAAT,EAAAroB,EAAA,IAIA,UAGAkd,eAAA,SAAArK,GACA,GAAAA,EAAA,EAAA,CACA,GAAA7S,GAAA8C,EAAA+lB,SAAAT,EAAA,KAAAvV,EACA,IAAA,GAAA7S,EAAAvF,OACA,MAAAqI,GAAAgmB,OAAAV,EAAApoB,EAAA,IAIA,UAGAod,aAAA,SAAAnO,EAAA4D,GACA,GAAA5D,EAAA,GAAA4D,EAAA,EAAA,CACA,GAAA7S,GAAA8C,EAAA+lB,SAAAP,EAAA,KAAA,IAAA5lB,OAAAmQ,GAAAnQ,OAAAuM,GAAA,IACA,IAAA,GAAAjP,EAAAvF,OACA,MAAAqI,GAAAgmB,OAAAR,EAAAtoB,EAAA,IAIA,WA1EA7I,QAAAC,OAAA,SAAA6xB,QAAA,aAAA,UAAA,oBAAA,OAAA,cAAAvP,OCHA,WACA,YAGA,SAAAD,KACA,OACAlI,SACA1M,QAAA,EAAA2M,eAAA,EAAA1M,aAAA,EAAA2M,oBAAA,EACAf,MAAA,EAAA3H,YAAA,EAAAmgB,YAAA,EAAAC,YAAA,EAAA/jB,YAAA,EAAAgkB,cAAA,EAAAlkB,MAAA,EACAmkB,QAAA,EAAAC,aAAA,EAAAC,YAAA,EAAAC,gBAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,QAAA,EAAAC,aAAA,EAAAC,YAAA,EACAC,SAAA,EAAAC,cAAA,EAAAC,aAAA,EACAzf,WAAA,EACA0f,SAAA,EACAC,iBAAA,EAAApZ,cAAA,EAAAqZ,cAAA,EAAAtmB,gBAAA,EAAAgN,QAAA,EAAAvG,eAAA,EAAAK,gBAAA,GAEAyf,UACAC,WAAA,GAEApnB,YACAsH,WAAA,EAAAlI,cAAA,EAAAioB,cAAA,EAAAC,YAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAloB,UAAA,EACAiI,cAAA,EACAoD,aAAA,EAAAO,gBAAA,EAAAN,aAAA,EAAAO,gBAAA,EAAAsc,aAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,gBAAA,EAAAC,aAAA,EAAAC,gBAAA,EAAAC,kBAAA,EACA9C,QAAA,EAAA+C,aAAA,EAAA3C,QAAA,EAAA4C,aAAA,EAAAzC,QAAA,EAAA0C,aAAA,EAAAvC,QAAA,EAAAwC,aAAA,EAAArC,QAAA,EAAAsC,aAAA,EAAAnC,QAAA,EAAAoC,aAAA,EAAAjC,QAAA,EAAAkC,aAAA,EAAA/B,QAAA,EAAAgC,aAAA,EAAA7B,QAAA,EAAA8B,aAAA,EAAA3B,SAAA,EAAA4B,cAAA,GAEA5mB,cACAC,aAAA,EAAA4mB,aAAA,EAAAC,gBAAA,EACA1D,QAAA,EAAA+C,aAAA,EACA3C,QAAA,EAAA4C,aAAA,EACAzC,QAAA,EAAA0C,aAAA,EACAvC,QAAA,EAAAwC,aAAA,EACArC,QAAA,EAAAsC,aAAA,EACAnC,QAAA,EAAAoC,aAAA,EACAjC,QAAA,EAAAkC,aAAA,EACA/B,QAAA,EAAAgC,aAAA,EACA7B,QAAA,EAAA8B,aAAA,EACA3B,SAAA,EAAA4B,cAAA,EACAG,SAAA,EAAAC,cAAA,EACAC,SAAA,EAAAC,cAAA,EACAC,SAAA,EAAAC,cAAA,EACAC,SAAA,EAAAC,cAAA,EACAC,SAAA,EAAAC,cAAA,EACAC,SAAA,EAAAC,cAAA,GAEAC,QACAld,MAAA,GAEAmd,OAAA,KACA/lB,SAAA,KACAgmB,SACAC,SAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAlK,aAAA,EAAAsB,SAAA,GAEAsD,uBACAuF,UAAA,EAAAC,SAAA,EAAAC,cAAA,EAAAC,SAAA,EAAAC,aAAA,EAAAC,QAAA,GAEA7F,mBACA8F,OAAA,EACAC,UAAA,EACAC,WAAA,EACAC,cAAA,EACAC,iBAAA,GAEAnG,yBACAoG,IAAA,EAAAC,gBAAA,EAAAC,eAAA,EAAAC,oBAAA,EAAAC,iBAAA,EAAAC,cAAA,EAAAC,UAAA,EAAAC,oBAAA,EAAAC,OAAA,EAAAC,iBAAA,EAAAC,MAAA,EAAAC,gBAAA,EAAAC,WAAA,EAAAC,mBAAA,EAAAC,WAAA,EAAAC,eAAA,EAAAC,gBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,sCAAA,IAnEA94B,QAAAC,OAAA,SAAA6xB,QAAA,qBAAAxP,OCHA,WACA,YAIA,SAAA3W,GAAAotB,EAAAt1B,GAEA,QAAAu1B,GAAAx2B,EAAAy2B,EAAAC,GAEA,GAAAC,IACAC,OAAA,GAAAC,WAEAC,QAAA,EACAn3B,gBAAA,EAEA82B,KAAAA,EAEAz2B,YAAAA,EACA+2B,iBAAA,KACAC,qBAEAz3B,KAAA,SAAAgC,EAAAutB,GAEA,GAAApsB,KAAAo0B,OACAhI,QAMA,IAHApsB,KAAAq0B,iBAAAx1B,EACAmB,KAAAs0B,kBAAAt1B,KAAAotB,IAEApsB,KAAA/C,eAAA,CACA+C,KAAA/C,gBAAA,CACA,IAAAwV,GAAAzS,IAEAA,MAAAk0B,OAAAF,WAAAA,EAEA,MAAAh0B,KAAA1C,aACA,MAAA0C,KAAA1C,YAAAF,KACA4C,KAAA1C,YAAAF,IAAAgB,OAAA,IAEAy1B,EAAAU,WAAA,sBAEAh2B,EAAA,WACAkU,EAAAyhB,OAAAM,sBACA/hB,EAAAnV,YAAAF,IAAA,IAAA22B,EACA,SAAAj1B,GAAA,MAAA2T,EAAA4hB,kBAAA5hB,EAAA4hB,iBAAAv1B,IACA,SAAAqY,EAAAjP,GAEAuK,EAAA2hB,QAAA,EAEAt5B,QAAAkD,QAAAyU,EAAA6hB,kBAAA,SAAAr2B,EAAAC,GACAD,MAEAwU,EAAA6hB,qBACAT,EAAAU,WAAA,uBAEA,SAAAz1B,GACA+0B,EAAAU,WAAA,sBACA9hB,EAAAxV,gBAAA,EACAwV,EAAA2hB,QAAA,SAWAv0B,MAAA,WACAG,KAAAk0B,OAAA,GAAAC,WACAn0B,KAAAo0B,QAAA,EACAp0B,KAAA/C,gBAAA,GAIA,OAAAg3B,GAGA,OACAQ,WACAC,eACAp3B,YAAA,KAEAkC,YAAA,SAAAD,GACAS,KAAA1C,YAAAiC,CACA,IAAAkT,GAAAzS,IACAlF,SAAAkD,QAAAgC,KAAAy0B,QAAA,SAAAx2B,EAAAC,GACAD,EAAAX,aAAAiC,IACAtB,EAAAX,YAAAiC,EACAkT,EAAA5S,MAAA3B,OAKArB,KAAA,SAAAqL,EAAA8rB,EAAAn1B,EAAAutB,GACAlkB,IAAAlI,MAAAy0B,SACAvsB,EAAA9J,OAAA,IACA4B,KAAAy0B,QAAAvsB,GAAA4rB,EAAA9zB,KAAA1C,YAAA4K,EAAA8rB,IAGAh0B,KAAAy0B,QAAAvsB,GAAArL,KAAAgC,EAAAutB,IAEAxe,QAAA,SAAA1F,GACA,GAAAlI,KAAA9C,SAAAgL,GAAA,CAGA,IAAA,GAFAgsB,GAAAl0B,KAAAy0B,QAAAvsB,GAAAgsB,OACAnwB,EAAA,GAAA4wB,OAAAT,EAAAU,SACA/wB,EAAA,EAAAA,EAAAqwB,EAAAU,UAAA/wB,EACAE,EAAAF,GAAAqwB,EAAAzH,OAAA5oB,EAGA,OAAAE,GAGA,UAGAkE,KAAA,SAAAC,EAAA2sB,EAAA52B,GAIA,IAAA,GAHAiZ,GAAAlX,KAAAwsB,SAAAtkB,EAAA2sB,EAAA52B,GACA8F,KACA+wB,EAAA5d,EAAA9Y,OACAyF,EAAA,EAAAA,EAAAixB,IAAAjxB,EACAE,EAAA/E,KAAAgB,KAAAysB,OAAAvkB,EAAAgP,EAAArT,IAGA,OAAAE,IAEAyoB,SAAA,SAAAtkB,EAAA2sB,EAAA52B,GAEA,GAAA+B,KAAA9C,SAAAgL,GAAA,CACAA,IAAAlI,MAAA00B,cACA10B,KAAA00B,YAAAxsB,MAGA,IAAAgsB,GAAAl0B,KAAAy0B,QAAAvsB,GAAAgsB,OACAa,EAAAb,EAAAc,cAAAH,GAEAI,EAAAj1B,KAAA00B,YAAAxsB,EAEA,MAAA2sB,IAAAI,IAAA,CACA,GAAAtxB,KACAsxB,GAAAJ,GAAAlxB,CAMA,KAAA,GAFAsT,GAAAid,EAAAjd,KACArT,EAAAqT,EAAA7Y,OACAyR,EAAA,EAAAA,EAAAjM,IAAAiM,EAAA,CACA,GAAArD,GAAAyK,EAAApH,GACAqlB,EAAA1oB,EAAAuoB,EAEAG,KAAAvxB,GAIAA,EAAAuxB,GAAAl2B,KAAA6Q,GAHAlM,EAAAuxB,IAAArlB,IAQA,MAAA5R,KAAAg3B,GAAAJ,GACAI,EAAAJ,GAAA52B,MAOA,UAEAf,SAAA,SAAAgL,GACA,MAAAA,KAAAlI,MAAAy0B,SAAAz0B,KAAAy0B,QAAAvsB,GAAAksB,QAEAe,kBAAA,SAAAjtB,GACA,MAAAlI,MAAA9C,SAAAgL,IAAAA,IAAAlI,MAAAy0B,SAAAz0B,KAAAy0B,QAAAvsB,GAAAjL,gBAEA4C,MAAA,SAAAqI,GACAA,IAAAlI,MAAAy0B,UACAz0B,KAAAy0B,QAAAvsB,GAAArI,cACAG,MAAAy0B,QAAAvsB,SACAlI,MAAA00B,YAAAxsB,KAGAktB,SAAA,WACA,GAAA3iB,GAAAzS,IACAlF,SAAAkD,QAAAgC,KAAAy0B,QAAA,SAAAx2B,EAAAC,GACAuU,EAAA5S,MAAA3B,MAGA+V,WAAA,WACA,GACA3N,GAAA,CAOA,OANAxL,SAAAkD,QAAAgC,KAAAy0B,QAAA,SAAAx2B,EAAAC,IACAD,EAAAm2B,QAAAn2B,EAAAhB,gBACAqJ,MAIAA,GAEA+uB,WAAA,SAAAntB,GACA,MAAAlI,MAAA9C,SAAAgL,GACAlI,KAAAy0B,QAAAvsB,GAAAgsB,OAAAU,QAGA,GAGAnI,OAAA,SAAAvkB,EAAAvE,GACA,MAAA3D,MAAA9C,SAAAgL,GACAlI,KAAAy0B,QAAAvsB,GAAAgsB,OAAAzH,OAAA9oB,OAMA2xB,YAAA,SAAAptB,EAAA+O,EAAAse,GACA,MAAAv1B,MAAA9C,SAAAgL,GACA+O,EAAAjX,KAAAy0B,QAAAvsB,GAAAgsB,OAAAsB,YAAAD,IAGA,MAGAE,YAAA,SAAAvtB,EAAA+O,GACA,MAAAjX,MAAA9C,SAAAgL,GACAlI,KAAAy0B,QAAAvsB,GAAAgsB,OAAAuB,YAAAxe,GAGA,MAGAye,SAAA,SAAAxtB,EAAAvE,EAAA4xB,GACA,MAAAv1B,MAAA9C,SAAAgL,GACAlI,KAAAy0B,QAAAvsB,GAAAgsB,OAAAwB,SAAA/xB,EAAA4xB,GAGA,OA3OAz6B,QAAAC,OAAA,SAAA6xB,QAAA,WAAA,aAAA,WAAAnmB,OCHA,WACA,YAGA,SAAAjI,GAAAiE,EAAA0Q,EAAA1M,EAAAoF,GACA,MAAA,UAAAhN,GA2BA,QAAA82B,GAAAhyB,GAEAA,EAAAiyB,EAAAx3B,OACAw3B,EAAAjyB,GAAA9G,KAAAgC,EAAA,WACA+2B,EAAAjyB,GAAAzG,aACA,YAAA04B,GAAAjyB,IACA9E,EAAA,eAAA+2B,EAAAjyB,GAAAuE,UAEAytB,EAAAhyB,EAAA,MAKA9E,EAAA,4BAtCAA,EAAA,gBAEA,IAAA+2B,IAAAziB,EAGArY,SAAAkD,QAAAyE,EAAA,SAAAL,EAAAlE,GACA,OAAAA,GACApD,QAAAkD,QAAAoE,EAAA,SAAAnE,EAAA43B,GACA,GAAAA,EAAA94B,QAAA,QAAA84B,EAAAz3B,OAAA,EAAA,CACA,GAAA03B,IACAj5B,KAAA,SAAAgC,EAAAutB,GACA3lB,EAAA5J,KAAAoB,EAAA,KAAAY,EAAAutB,IAEAlvB,SAAA,WACA,MAAAuJ,GAAAvJ,SAAAe,IAEAiK,SAAAjK,EAGA23B,GAAA52B,KAAA82B,QAuBAH,EAAA,IA9CA76B,QAAAC,OAAA,SAAA6xB,QAAA,WAAA,QAAA,OAAA,UAAA,cAAApuB,OCHA,WACA,YAGA,SAAAC,GAAAgE,EAAA0Q,EAAA1M,GACA,MAAA,YAEA3L,QAAAkD,QAAAyE,EAAA,SAAAszB,EAAAx5B,GACAw5B,EAAAl2B,UAGAsT,EAAAtT,QACA4G,EAAA2uB,YATAt6B,QAAAC,OAAA,SAAA6xB,QAAA,YAAA,QAAA,OAAA,UAAAnuB,OCHA,WACA,YAIA,SAAA2U,GAAA4iB,EAAAvzB,EAAAgE,EAAAoF,EAAAvL,EAAA8c,EAAA7c,EAAArE,EAAAE,EAAAD,GAGA,OAEA2Z,WAAA,SAAA1T,EAAA6zB,GACA,GAAA,MAAA7zB,EAAA,CACA,GAAAwgB,EAmDA,OAjDA,UAAAxgB,EAAAoC,UACAoe,EAAA,UACA9nB,QAAAkD,QAAAoE,EAAAd,MAAA,SAAAS,EAAA4B,GAEAif,GADAjf,EAAA,EACA,IAGA,KAEAif,GAAA7gB,EAAAV,GAAAwlB,SAAA,IAAA,IAAA9kB,EAAA0B,OAGArB,EAAAf,KACAuhB,EAAA,IAAAxgB,EAAAf,GAAAwlB,SAAA,IAAA,KACA,cAAAzkB,GACAwgB,GAAAxgB,EAAAsC,WAEA,gBAAAtC,KAEAwgB,GAAAxgB,EAAA8zB,eAGA9zB,EAAA8E,gBAAA,GAAA9E,EAAA8E,kBACA0b,GAAA,KAAAxgB,EAAA8E,eAAA2f,SAAA,KAEAzkB,EAAAsH,IAAA,IACAkZ,GAAA,KAAAxgB,EAAAsH,IAAAmd,SAAA,KAKAzkB,EAAAyI,QAAA,IACA+X,GAAA,KAAAxgB,EAAAyI,QAAAgc,SAAA,KAEA,UAAAzkB,EAAAoC,WACAoe,GAAA,KAAAxgB,EAAAmI,aAEAnI,EAAAoI,MACAoY,GAAA,KAAAxgB,EAAAoI,KAEApI,EAAA8F,WACA0a,GAAA,KAAAxgB,EAAA8F,WAIA9F,EAAA7F,OAAA05B,IACArT,GAAA,KAAAxgB,EAAA7F,KAAAkJ,QAAA,KAAA,KAAAA,QAAA,MAAA,MAGAmd,EAGA,MAAA,IAGA7N,WAAA,SAAA8N,GACA,GAAAzgB,KAsDA,OApDA,OAAAygB,GACA/nB,QAAAkD,QAAA6kB,EAAAle,MAAA,KAAA,SAAAwxB,EAAAC,GACA,GAAA,KAAAD,EAAAE,OAAA,GACAj0B,EAAAf,GAAAi1B,SAAAH,EAAAI,OAAA,GAAA,QAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAA8E,eAAAovB,SAAAH,EAAAI,OAAA,GAAA,QAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAAsH,IAAA4sB,SAAAH,EAAAI,OAAA,GAAA,QAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAAiO,MAAAimB,SAAAH,EAAAI,OAAA,GAAA,QAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAAyI,QAAAyrB,SAAAH,EAAAI,OAAA,GAAA,QAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAAmI,YAAA4rB,EAAAI,OAAA,OAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAAoI,IAAA2rB,EAAAI,OAAA,OAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAAsC,WAAAyxB,EAAAI,OAAA,OAEA,IAAA,KAAAJ,EAAAE,OAAA,GACAj0B,EAAA7F,KAAA45B,EAAAI,OAAA,GAAA9wB,QAAA,IAAA,SAEA,IAAA,KAAA0wB,EAAAE,OAAA,GAAA,CACAj0B,EAAAd,QACA,IAAAk1B,GAAAL,EAAAI,OAAA,EACAz7B,SAAAkD,QAAAw4B,EAAA7xB,MAAA,KAAA,SAAA8xB,EAAAC,GACA,GAAAC,GAAAF,EAAA9xB,MAAA,IACAvC,GAAAd,MAAAtC,MACAqC,GAAAi1B,SAAAK,EAAA,GAAA,IACAlzB,IAAA4C,OAAAswB,EAAA,YAIA,KAAAR,EAAAE,OAAA,KAEAj0B,EAAA8F,SAAAiuB,EAAAI,OAAA,GACAz7B,QAAAkD,QAAAyE,EAAA,SAAAiC,EAAAxG,GACAwG,EAAAwQ,SAAA,GAAAxQ,EAAAwQ,QAAAnY,QAAAqF,EAAA8F,SAAA,OACA9F,EAAAsC,WAAAxG,QAOAkE,GAGA6Z,gBAAA,SAAAjb,EAAAuB,GACA,GAAAq0B,MACAC,EAAA72B,IAEA,IAAA,MAAAuC,EACA,MAAA,EAGAzH,SAAAkD,QAAAuE,EAAAE,MAAA,SAAAL,EAAAlE,GACA,GAAA0kB,GAAAiU,EAAA/gB,WAAA1T,GAAA,EACA,OAAAwgB,GAAAA,EAAAxkB,OAAA,GACAw4B,EAAA53B,KAAA4jB,IAIA,IAAA7e,GAAA,gBAAA5H,EAAAmB,YAAAnB,OAAA,IAyBA,OAtBAoG,GAAA2V,aACAnU,GAAA,MAAAxB,EAAA2V,YAEA3V,EAAA4V,cACApU,GAAA,MAAAxB,EAAA4V,aAEA5V,EAAA6V,YACArU,GAAA,MAAAxB,EAAA6V,WAEA7V,EAAAkR,KAAAlR,EAAAkR,IAAApS,KACA0C,GAAA,MAAAxB,EAAAkR,IAAApS,IAEAkB,EAAA8V,YAAA9V,EAAA8V,WAAAhX,KACA0C,GAAA,MAAAxB,EAAA8V,WAAAhX,IAEAkB,EAAAyB,SAAAzB,EAAAyB,QAAA3C,KACA0C,GAAA,MAAAxB,EAAAyB,QAAA3C,IAEAkB,EAAA4B,kBAAA5B,EAAA4B,iBAAA9C,KACA0C,GAAA,MAAAxB,EAAA4B,iBAAA9C,IAEA0C,GAAA,MAAA+yB,UAAA91B,GAAA,MAAA41B,EAAAG,KAAA,MAIAjb,eAAA,SAAA9a,EAAAuB,GAEA,GAAAjG,GAAA0D,KAAAic,gBAAAjb,EAAAuB,GACAyZ,EAAAgb,OAAAz3B,SAAA03B,KAAAtyB,MAAA,KAAA,GAAArI,EACA2a,GAAA+E,QAAAA,EAEAga,GAAAkB,KACA,6FAAAjgB,GAAAkgB,QACA,SAAAlgB,EAAAmgB,EAAAvZ,EAAAvjB,GACAiI,EAAA2Z,SAAAjF,EAAA5V,GACA1B,eAAA7D,QAAAQ,EAAA2a,EAAA5V,MAEAg2B,MAAA,SAAApgB,EAAAmgB,EAAAvZ,EAAAvjB,OAQA4Z,WAAA,SAAA9R,GAEA,GAAA,MAAAA,EAAA,CAgBA,GAVA,gBAAAA,KAAAA,EAAAsC,aACAtC,EAAAsC,WAAAtC,EAAA8zB,cAIA,UAAA9zB,EAAAsC,aACAtC,EAAAsC,WAAA,OACAqH,QAAAC,IAAA,cAAA5J,EAAAsC,aAGA,UAAAtC,EAAAsC,YAAA,UAAAtC,EAAAoC,SAEA,MADApC,GAAAoC,SAAA,SACApC,CAEA,IAAA,UAAAA,EAAAsC,YAAA,UAAAtC,EAAAoC,SAAA,CAEApC,EAAA8E,iBACA9E,EAAA8E,eAAA,EAGA,IAAAowB,GAAA,uBAAAl1B,EAAAmI,YAAA,UACAgtB,EAAA,KACA,QAAAn1B,EAAAoI,MACA+sB,EAAA,MAEA,IAAAC,GAAA,4BAAAp1B,EAAAmI,YAAAgtB,EAAA,UAEA9sB,EAAAhE,EAAAwB,KAAAqvB,EAAA,KAAAl1B,EAAAf,IAAA,GACAo2B,EAAAhxB,EAAAmH,QAAA4pB,GAEAE,IACA58B,SAAAkD,QAAAy5B,EAAA,SAAAx5B,EAAA0F,GACA,GAAA1F,EAAA05B,YAAAv1B,EAAAf,IAAApD,EAAA25B,YAAAx1B,EAAA8E,eAEA,YADAwwB,EAAAz5B,IAKA,IAAA+jB,IACA3gB,GAAAe,EAAAf,GACAqD,WAAAtC,EAAAsC,WACAF,SAAApC,EAAAsC,WACAgP,aAAAjJ,EAAA+b,QACAjc,YAAAnI,EAAAmI,YACA3B,KAAAtI,EAAAyS,UAAA,GACA7L,eAAA9E,EAAA8E,eACA3K,KAAAL,EAAA0C,UAAA6L,EAAAjC,OAAAiC,EAAAhC,aACAwM,YAAA/Y,EAAA0C,UAAA84B,EAAAG,mBAAAH,EAAAI,yBACAt7B,KAAAiO,EAAA9B,eACA6B,IAAApI,EAAAoI,IAIA,OADAwX,GAAA1gB,MAAAf,EAAAw3B,cAAA/V,EAAAvX,EAAAgtB,GACAzV,EAEA,GAAA5f,EAAAsC,aAAAjC,GAAA,CAEA,GAAAiE,GAAAjE,EAAAL,EAAAsC,YACAszB,EAAAvxB,EAAAwB,KAAAvB,EAAAwO,QAAA,KAAA9S,EAAAf,GACA,IAAA,GAAA22B,EAAA55B,OAGA,CACA,GAAAoO,GAAAwrB,EAAA,GAEAC,EAAA,EACA7uB,EAAA,KAEA8uB,EAAAzxB,EAAAwB,KAAAvB,EAAAkD,aAAA,KAAAxH,EAAAsH,IAKA,IAJA,GAAAwuB,EAAA95B,SACA85B,EAAAzxB,EAAAwB,KAAAvB,EAAAkD,aAAA,cAAA4C,EAAAE,aAGA,GAAAwrB,EAAA95B,OAAA,CACA,GAAA85B,GAAAzxB,EAAAwB,KAAAvB,EAAAoD,eAAA,KAAA1H,EAAAsH,IACA,IAAAwuB,EAAA95B,SACA85B,EAAAzxB,EAAAwB,KAAAvB,EAAAoD,eAAA,cAAA0C,EAAAE,aAIA,GAAAwrB,EAAA95B,OAAA,EAGA,GAFAgL,EAAA8uB,EAAA,GAEA9uB,EAAAS,aAAA2C,EAAAE,WAGAtD,EAAA,KACA2C,QAAAC,IAAA,qBAEA,CACA,GAAA7C,GAAA1C,EAAAwB,KAAAvB,EAAAkD,aAAA,cAAAR,EAAAS,YACA/O,SAAAkD,QAAAmL,EAAA,SAAAlL,EAAAC,GACA+5B,GAAAh6B,EAAAyyB,iBAKA,GAAA1O,GAAAnW,EAAAssB,WAAAzxB,EAAAnK,KAAAiQ,EAAApD,EAAA6uB,EACApsB,GAAA+Y,SAAA5C,GACA5lB,EAAAg8B,gBAAApW,EAAAxV,EAEA,IAAA6rB,GAAA,IAQA,IANAA,EADA,WAAArW,EAAAxd,UAAA,GAAAwd,EAAAlW,OACA,WAGA,YAGAusB,GACA5xB,EAAAvJ,SAAAwJ,EAAA2xB,KAAA5xB,EAAAvJ,SAAAwJ,EAAA8qB,QAAA,CACAxP,EAAAjf,WACA,IAAAu1B,GAAA7xB,EAAAwB,KAAAvB,EAAA2xB,GAAA,KAAAj2B,EAAAf,GACA,IAAAi3B,EAAAl6B,OAAA,EAAA,CACA4jB,EAAA3R,MAAAioB,EAAA,GAAAnJ,SACA,IAAAoJ,GAAA9xB,EAAAwB,KAAAvB,EAAA8qB,OAAA,KAAA8G,EAAA,GAAAnJ,UACAoJ,GAAAn6B,OAAA,IACA4jB,EAAAjf,SAAAzC,EAAA8G,SAAAmxB,EAAA,MAOA,GADAvW,EAAApN,UAAAoN,EAAA1gB,MACAc,EAAA8E,gBAAA,EAGA,GAFA8a,EAAA9a,eAAA9E,EAAA8E,eAEA,UAAA8a,EAAAxd,cAGA,IAAA,YAAAwd,EAAAxd,SAAA,CACA,GAAAoH,KACA9Q,SAAAkD,QAAAgkB,EAAA1gB,MAAA,SAAAS,EAAA4B,GACAiI,EAAA5M,MAAAqC,GAAAU,EAAAV,GAAAoC,IAAA1B,EAAA0B,KAAAue,EAAA9a,eAAA,SAGA8a,EAAAhb,iBAAA4E,EACAoW,EAAApN,UAAAtU,EAAA8C,WAAA4e,EAAAhb,iBAAAgb,EAAA1gB,WAEA,CACA,GAAAqF,GAAAF,EAAAwB,KAAAvB,EAAAqB,WAAA,YAAAia,EAAAla,cACAhN,SAAAkD,QAAA2I,EAAA,SAAAC,EAAAjD,GACA,GAAAiD,EAAAO,cAAA6a,EAAA9a,eAGA,MAFA8a,GAAAhb,iBAAA1G,EAAA8G,SAAAR,QACAob,EAAApN,UAAAtU,EAAA8C,WAAA4e,EAAAhb,iBAAAgb,EAAA1gB,UAOA,GAAAc,EAAAyI,QAAA,EAAA,CACAmX,EAAAnX,QAAAzI,EAAAyI,OACA,IAAAC,GAAArE,EAAAwB,KAAAvB,EAAA+E,SAAA,KAAArJ,EAAAyI,QACAC,GAAA1M,OAAA,IACA4jB,EAAA/W,WAAA3K,EAAA8G,SAAA0D,EAAA,IACAkX,EAAApN,UAAAtU,EAAA8C,WAAA4e,EAAApN,UAAAoN,EAAA/W,iBAGA,IAAAuB,EAAAwiB,gBAAA,CACAhN,EAAAzC,kBAAA,EACAyC,EAAApC,mBAAA,CACA,IAAA3P,GAAAxJ,EAAAwB,KAAA,8BAAA,gBAAAuE,EAAAwiB,gBACA/e,IAAAA,EAAA7R,OAAA,IACA,GAAA6R,EAAA,GAAAuoB,kBAAAxW,EAAAzC,oBACA,GAAAtP,EAAA,GAAAwoB,kBAAAzW,EAAAzC,oBACA,GAAAtP,EAAA,GAAAyoB,kBAAA1W,EAAAzC,oBACA,GAAAtP,EAAA,GAAA0oB,kBAAA3W,EAAAzC,oBAEA,GAAAtP,EAAA,GAAAuoB,kBAAAxW,EAAApC,qBACA,GAAA3P,EAAA,GAAAwoB,kBAAAzW,EAAApC,qBACA,GAAA3P,EAAA,GAAAyoB,kBAAA1W,EAAApC,qBACA,GAAA3P,EAAA,GAAA0oB,kBAAA3W,EAAApC,sBAIA,MAAAoC,GApHAjW,QAAAC,IAAA,QAAA5J,EAAAf,GAAA,iBAAAqF,EAAAwO,SAwHA,GAAA9S,EAAA8F,SAAA,CACA,GAAAqE,GAAA9F,EAAAwB,KAAA7F,EAAA8F,SAAA,UAAA,KAAA9F,EAAAf,GACA,IAAAkL,EAAAnO,OAAA,EAAA,CACA,GAAAoO,GAAAD,EAAA,GACAyV,GACA3gB,GAAAe,EAAAf,GACA4V,KAAAzK,EACA1D,WAAA0D,EAAAzD,WACA2K,aAAAlH,EAAAugB,aACAjhB,OAAAU,EAAA6H,KACA5P,aAAA+H,EAAAyiB,aACArmB,KAAAtI,EAAAyS,UAAAvG,EAAA3D,MACAX,SAAA9F,EAAA8F,SACA+M,YAAA/Y,EAAA0C,UAAA4N,EAAA2I,cAAA3I,EAAA4I,oBAIA,OADAvJ,GAAA+Y,SAAA5C,GACAA,EAGA,OAAAzlB,KAAA,gBAIA,OAAAA,KAAA,wBAAA6F,EAAAsC,cAIAoP,YAAA,SAAA1R,GAEA,GAAA6f,KAEA,IAAA,MAAA7f,OAEA,CASA,IARAA,EAAAsC,YAAAtC,EAAA8zB,eAAAzzB,KACAL,EAAAsC,WAAAtC,EAAA8zB,cAGA,UAAA9zB,EAAAsC,aACAtC,EAAAsC,WAAA,QAGAtC,EAAAsC,aAAAjC,GAAA,CACA,GAAAiE,GAAAjE,EAAAL,EAAAsC,WAEAud,GAAA,mBAAA,KACAA,EAAA,+BAAA,KAEAA,EAAAvb,EAAAwO,SAAAkI,EAAAlI,QACA,gBAAAxO,KACAub,EAAAvb,EAAAkD,cAAAwT,EAAAxT,cAEA,kBAAAlD,KACAub,EAAAvb,EAAAoD,gBAAAsT,EAAAxT,cAGA,cAAAlD,KACAub,EAAAvb,EAAAqB,YAAAqV,EAAArV,YAGA,aAAArB,KACAub,EAAAvb,EAAAkyB,WAAAxb,EAAAwb,WAGA,YAAAlyB,KACAub,EAAAvb,EAAAwoB,UAAA9R,EAAA8R,UAGA,UAAAxoB,KACAub,EAAAvb,EAAA8qB,QAAApU,EAAAoU,QAGA,UAAA9qB,KACAub,EAAAvb,EAAA6qB,QAAAnU,EAAAmU,QAGA,YAAA7qB,KACAub,EAAAvb,EAAA+E,UAAA2R,EAAA3R,cAGA,IAAA,UAAArJ,EAAAsC,YAAA,UAAAtC,EAAAoC,SAAA,CACA,GAAA8yB,GAAA,uBAAAl1B,EAAAmI,YAAA,SACA0X,GAAAqV,GAAA,IACA,IAAAE,GAAA,4BAAAp1B,EAAAmI,YAAA,YACA0X,GAAAuV,GAAA,KACAA,EAAA,4BAAAp1B,EAAAmI,YAAA,aACA0X,EAAAuV,GAAA,SAEA,UAAAp1B,EAAAoC,QAGApC,GAAA8F,WACA+Z,EAAA7f,EAAA8F,SAAA,WAAA,MAIA,MAAA+Z,KAxdAnnB,QAAAC,OAAA,SAAA6xB,QAAA,oBACA,QAAA,QAAA,UAAA,cAAA,cAAA,oBAAA,aAAA,eAAA,eAAA,SAAAxZ,OCJA,WACA,YAGA,SAAAmI,GAAAnI,GAGA,OACAsI,YAAA,SAAA1a,EAAAuB,GACA,GAAAe,KAQA,OAPAxI,SAAAkD,QAAAuE,EAAAE,MAAA,SAAAL,EAAAlE,GACA,GAAA8jB,GAAA5O,EAAAc,WAAA9R,EACA,OAAA4f,GACA1e,EAAAtE,KAAAgjB,KAIA1e,GAGAwQ,YAAA,SAAAvR,GAEA,GAAAs2B,KAUA,OATA/9B,SAAAkD,QAAAuE,EAAAE,MAAA,SAAAL,EAAA02B,GAEA,GAAA7W,GAAA7O,EAAAU,YAAA1R,EAEAtH,SAAAkD,QAAAikB,EAAA,SAAAhkB,EAAAC,GACA26B,EAAA36B,GAAAD,MAIA46B,IA7BA/9B,QAAAC,OAAA,SAAA6xB,QAAA,eAAA,mBAAArR,OCHA,WACA,YAIA,SAAAnf,GAAAyP,EAAApJ,EAAAgE,GAEA,OACAsY,aACAziB,KAAA,gBAAAC,KAAA,SAAAw8B,WAAA,SAAArU,UAAA,EAAAT,SAAA,EAAAD,WAAA,EAAAlE,YAAA,IAAA7a,OAAA,IACA3I,KAAA,iBAAAC,KAAA,UAAAw8B,WAAA,YAAAjZ,YAAA,IAAA5a,YAAA,EAAAD,OAAA,EAAA+zB,eAAA,EAAA,KACA18B,KAAA,gBAAAC,KAAA,SAAAw8B,WAAA,YAAAjZ,YAAA,IAAA5a,YAAA,EAAAD,OAAA,EAAA+zB,eAAA,EAAA,EAAA,EAAA,EAAA,KACA18B,KAAA,qBAAAC,KAAA,cAAAw8B,WAAA,YAAA9U,SAAA,EAAAhf,OAAA,EAAAC,YAAA,EAAA8zB,eAAA,EAAA,EAAA,MACA18B,KAAA,eAAAC,KAAA,QAAAw8B,WAAA,QAAA9zB,OAAA,EAAAC,YAAA,EAAA8zB,eAAA,EAAA,EAAA,MACA18B,KAAA,wBAAAC,KAAA,iBAAAw8B,WAAA,OAAA9U,SAAA,EAAAhf,OAAA,EAAAC,YAAA,EAAA8zB,eAAA,MACA18B,KAAA,yBAAAC,KAAA,kBAAAw8B,WAAA,OAAA9U,SAAA,EAAAhf,OAAA,GAAAC,YAAA,GAAA8zB,eAAA,MACA18B,KAAA,4BAAAC,KAAA,qBAAAw8B,WAAA,SAAA9U,SAAA,EAAAnE,YAAA,MAAA7a,OAAA,GAAAC,YAAA,GAAA8zB,eAAA,MACA18B,KAAA,2BAAAC,KAAA,oBAAAw8B,WAAA,SAAArU,UAAA,EAAAT,SAAA,EAAAnE,YAAA,IAAA7a,OAAA,EAAAC,YAAA,GAAA8zB,eAAA,MACA18B,KAAA,kBAAAC,KAAA,WAAAw8B,WAAA,WAAA9U,SAAA,EAAAnE,YAAA,MAAA7a,OAAA,GAAAC,YAAA,GAAA8zB,eAAA,GAAA,MACA18B,KAAA,iBAAAC,KAAA,UAAAw8B,WAAA,OAAAjZ,YAAA,IAAA7a,OAAA,EAAAC,YAAA,EAAA8zB,eAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MACA18B,KAAA,cAAAC,KAAA,OAAAw8B,WAAA,OAAAjZ,YAAA,IAAA7a,OAAA,EAAAC,YAAA,EAAA+e,SAAA,EAAA+U,eAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MACA18B,KAAA,gBAAAC,KAAA,SAAAw8B,WAAA,QAAAC,eAAA,IAAA/U,SAAA,IACA3nB,KAAA,gBAAAC,KAAA,SAAA08B,WAAA,WACA38B,KAAA,gBAAAC,KAAA,SAAA08B,WAAA,WAGAj0B,OAAA,SAAAzI,GACA,GAAAwH,GAAA,IAOA,OANAjJ,SAAAkD,QAAAgC,KAAA+e,WAAA,SAAAJ,EAAAhb,GACAgb,EAAApiB,MAAAA,IACAwH,EAAA4a,KAIA5a,GAGAyf,OAAA,SAAAjnB,GACA,GAAAwH,GAAA,IAOA,OANAjJ,SAAAkD,QAAAgC,KAAA+e,WAAA,SAAAJ,EAAAhb,GACAgb,EAAAriB,MAAAC,IACAwH,EAAA4a,KAIA5a,GAGAwL,SAAA,SAAAhT,GACA,GAAAkB,GAAAuC,KAAAgF,OAAAzI,EACA,IAAAkB,GAAA,cAAAA,GAAA,CACA,GAAAsG,KACAjJ,SAAAkD,QAAAyE,EAAA,SAAAszB,EAAAmD,GACAnD,EAAA5Y,MAAA1f,EAAAs7B,YAAA,MAAAh1B,IACA,MAAAgyB,EAAAtzB,OAAAszB,EAAAoD,SACAttB,EAAAutB,UAAArD,GAIAhyB,EADA,MAAAgyB,EAAAtzB,MACAsB,EAAAb,OAAA6yB,EAAAtzB,OAGA,OAKA,IAAA42B,KACA,IAAAt1B,EAAA,CACA,GAAAhD,GAAAf,IACAlF,SAAAkD,QAAA+F,EAAA,SAAA3B,EAAAuB,IACAvB,EAAAoC,UAAA/G,EAAAlB,MACAwE,EAAAu4B,aAAA77B,EAAA2E,EAAAA,EAAA6U,SAEA7U,EAAAoC,SAAAjI,EACA88B,EAAAr6B,KAAAoD,MAKA,MAAAi3B,GAGA,MAAA,OAIAC,aAAA,SAAA77B,EAAA2E,EAAAm3B,GAEA,GAAAn3B,EAAAsC,aAAAjC,IAAAA,EAAAL,EAAAsC,YAAAyY,MAAA1f,EAAAs7B,WACA,OAAA,CAEA,IAAA32B,EAAAsE,UAAAjJ,EAAAlB,KACA,OAAA,CAEA,IAAAkB,EAAAu7B,cAAA,CAEA,IAAA,GAAAn1B,GAAA,EAAAA,EAAApG,EAAAu7B,cAAA56B,SAAAyF,EACA,GAAApG,EAAAu7B,cAAAn1B,IAAAzB,EAAAqC,cAAA80B,GAAA97B,EAAAu7B,cAAAn1B,IAAA01B,EAAAtK,aAAA,CAEA,GAAA,SAAA7sB,EAAAsC,WACA,MAAAtC,GAAAm3B,SAAA,GAAAA,EAAA1wB,MAAAzG,EAAAwG,MAAA,GAAAxG,EAAAwG,KAAAvH,GACA,qBAAA5D,EAAAlB,KAGA,sBAAAkB,EAAAlB,IAGA,IAAA,OAAA6F,EAAAsC,WAAA,CACA,GAAA80B,GAAA/yB,EAAAwB,KAAAxF,EAAAg3B,IAAAlI,OAAA,KAAAnvB,EAAAf,GACA,IAAAm4B,EAAAp7B,OAAA,EAEA,MAAA,IAAAo7B,EAAA,GAAAnlB,KACA,kBAAA5W,EAAAlB,KAEA,GAAAi9B,EAAA,GAAAnlB,MACA,mBAAA5W,EAAAlB,KAQA,OAAA,EAIA,OAAA,EAEA,MAAA6F,GAAAsC,aAAAjC,IACAA,EAAAL,EAAAsC,YAAAyY,MAAA1f,EAAAs7B,YAOAl8B,KAAA,SAAAN,EAAA6vB,GACA,GAAA3uB,GAAAuC,KAAAgF,OAAAzI,EACAkB,IAAA,cAAAA,IACA3C,QAAAkD,QAAAyE,EAAA,SAAAszB,EAAAmD,GACAnD,EAAA5Y,MAAA1f,EAAAs7B,YACAhD,EAAAl5B,KAAA,aAAAuvB,MAMAgM,gBAAA,SAAAh2B,EAAAm3B,GACA,GAAAx4B,GAAAf,IAEAlF,SAAAkD,QAAAgC,KAAA+e,WAAA,SAAAthB,EAAAkG,GACA5C,EAAAu4B,aAAA77B,EAAA2E,EAAAm3B,KACAn3B,EAAAoC,SAAA/G,EAAAlB,SAKAogB,mBAAA,SAAAla,GACA,GAAAi3B,KACA,IAAA,MAAAj3B,EAAA,CACA,GAAAk3B,KACA7+B,SAAAkD,QAAAyE,EAAA,SAAAL,EAAAuB,GACA,MAAAvB,IACAA,EAAAoC,WAAAm1B,KACAA,EAAAv3B,EAAAoC,cAEAm1B,EAAAv3B,EAAAoC,UAAAxF,KAAAoD,MAIAtH,QAAAkD,QAAAgC,KAAA+e,WAAA,SAAAJ,EAAAhb,GAEA,GAAAgb,EAAApiB,OAAAo9B,GAAA,CAEA,GAAAC,GAAAD,EAAAhb,EAAApiB,MAAAqI,KAAA,SAAAwM,EAAAC,GACA,GAAA,YAAAsN,EAAApiB,KAAA,CAEA,GAAAs9B,GAAAzoB,EAAAlK,cACA2yB,KAAAA,EAAA,EACA,IAAAC,GAAAzoB,EAAAnK,cAGA,IAFA4yB,IAAAD,EAAA,GAEAA,GAAAC,EACA,MAAAA,GAAAD,MAGA,CAAA,GAAA,OAAAzoB,EAAA1M,YAAA,SAAA0M,EAAA1M,WACA,MAAA2M,GAAAvI,WAAAsI,EAAAtI,UAEA,IAAA,gBAAAsI,IAAA,gBAAAC,GACA,MAAAD,GAAA3M,aAAA4M,EAAA5M,aAGA,MAAA2M,GAAA7U,KAAAw9B,cAAA1oB,EAAA9U,OAEAm9B,GAAA/a,EAAApiB,MAAAq9B,MAGAF,GAAA/a,EAAApiB,WAIAzB,QAAAkD,QAAAyE,EAAA,SAAAL,EAAAuB,GACA,MAAAvB,GAAAA,EAAAoC,WAAAk1B,KACA3tB,QAAAC,IAAA,gBAAA5J,EAAAoC,SAAA,YACAk1B,EAAAM,WAAA,KAIA,MAAAN,KAhNA5+B,QAAAC,OAAA,SAAA6xB,QAAA,gBACA,cAAA,QAAA,UAAAxwB,OCJA,WACA,YAKA,SAAAyP,GAAA3P,EAAAuK,EAAAnG,EAAAmC,GAUA,QAAA01B,GAAA8B,EAAAztB,EAAApD,EAAA6uB,GAKA,OACAhhB,KAAAzK,EACAjD,UAAAH,EACA/H,GAAAmL,EAAAnL,GACA42B,WAAAA,EACAvzB,WAAAu1B,EACAnxB,WAAA0D,EAAAzD,WACA2K,aAAAlH,EAAAugB,aACAjhB,OAAAU,EAAA6H,KACA5P,aAAA+H,EAAAyiB,aACArmB,KAAAtI,EAAAyS,UAAAvG,EAAA3D,MACAa,IAAA,KACAnN,KAAA,KACA+E,MAAA,KACA44B,eAAA,KACA11B,SAAA,KACAqG,QAAA,MAIA,QAAAuuB,GAAA1yB,GAEA,IAAAD,EAAAvJ,SAAAwJ,EAAAwO,SACA,MAAA,KAGA,KAAAhZ,EAAAgB,WACA,MAAA,KAGA,IAAA,gBAAAwJ,KAAAD,EAAAvJ,SAAAwJ,EAAAkD,cACA,MAAA,KAGA,IAAA,kBAAAlD,KAAAD,EAAAvJ,SAAAwJ,EAAAoD,gBACA,MAAA,KAGA,IAAAsY,IAAA,GAAAjJ,OAAAC,SAEA1S,GAAAjE,QAEA,KAAA,GADAmyB,GAAAnuB,EAAA4uB,WAAA3uB,EAAAwO,SACArF,EAAA,EAAAA,EAAA+kB,IAAA/kB,EAAA,CACA,GAAAsqB,GAAA1zB,EAAAivB,SAAAhvB,EAAAwO,QAAArF,EAAA,QACAuqB,EAAA3zB,EAAAivB,SAAAhvB,EAAAwO,QAAArF,EAAA,cACAwqB,EAAA5zB,EAAAivB,SAAAhvB,EAAAwO,QAAArF,EAAA,OAGA,IAAA,GAAAsqB,GACA,IAAAA,GACA,KAAAA,GACA,IAAAA,GACA,KAAAA,GACA,KAAAA,GACA,IAAAA,GACA,KAAAA,GACA,IAAAA,GACA,IAAAA,GACA,IAAAA,GACA,GAAAA,KACAzzB,EAAAgd,UAAA0W,GAAA1zB,EAAAgd,aACAhd,EAAAid,UAAAyW,GAAA1zB,EAAAid,aACAjd,EAAA4zB,SAAAD,GAAA3zB,EAAA4zB,SAAA,CAEA,GAAAC,GAAA9zB,EAAAivB,SAAAhvB,EAAAwO,QAAArF,EAAA,kBACA2qB,EAAA/zB,EAAAivB,SAAAhvB,EAAAwO,QAAArF,EAAA,eACA4qB,EAAAh0B,EAAAivB,SAAAhvB,EAAAwO,QAAArF,EAAA,aAGA,IAAA0qB,EAAA,GAAAC,EAAA,GAAAC,EAAA,EAAA,CACA,GAAAjuB,GAAA/F,EAAAgmB,OAAA/lB,EAAAwO,QAAArF,EAEA,IAAA,SAAAnJ,EAAAyW,KAAA,CAEA,IAAA,GADAud,IAAA,EACA72B,EAAA,EAAAA,EAAA6C,EAAAjE,MAAArE,SAAAyF,EACA,GAAA6C,EAAAjE,MAAAoB,GAAA6P,cAAAlH,EAAAugB,cACArmB,EAAAjE,MAAAoB,GAAAiF,YAAA0D,EAAAzD,YACArC,EAAAjE,MAAAoB,GAAA0F,WAAA7C,EAAAjE,MAAAoB,GAAA0F,UAAAM,aAAA4wB,EAAA,CACAC,GAAA,CACA,OAIA,GAAAA,EACA,SAIA,GAAAvxB,KACAsxB,GAAA,GAAA,gBAAA/zB,KACAyC,EAAA1C,EAAAwB,KAAAvB,EAAAkD,aAAA,cAAA6wB,GAEA,GAAAtxB,EAAA/K,QAAA,kBAAAsI,KACAyC,EAAA1C,EAAAwB,KAAAvB,EAAAoD,eAAA,cAAA2wB,IAIA,IAAAxC,GAAA,CACAn9B,SAAAkD,QAAAmL,EAAA,SAAAlL,EAAAC,GACA+5B,GAAAh6B,EAAAyyB,gBAGA,IAAAiK,GAAAxxB,EAAA/K,MACA,IAAA,GAAAu8B,EACAj0B,EAAAjE,MAAAzD,KAAAgB,KAAAm4B,WAAAzxB,EAAAnK,KAAAiQ,EAAA,KAAAyrB,QAGA,KAAA,GAAA7uB,GAAA,EAAAA,EAAAuxB,IAAAvxB,EAAA,CAGA,IAAA,GADA9C,IAAA,EACAs0B,EAAA,EAAAA,EAAAxxB,IAAAwxB,EACA,GAAAC,EAAA1xB,EAAAC,GAAAD,EAAAyxB,IAAA,CACAt0B,GAAA,CACA,OAIA,IAAAA,EAAA,CACA,IAAA,GAAAs0B,GAAAxxB,EAAA,EAAAwxB,EAAAD,IAAAC,EACAC,EAAA1xB,EAAAC,GAAAD,EAAAyxB,MACAzxB,EAAAC,GAAAsnB,gBAAAvnB,EAAAyxB,GAAAlK,eAIAhqB,GAAAjE,MAAAzD,KAAAgB,KAAAm4B,WAAAzxB,EAAAnK,KAAAiQ,EAAArD,EAAAC,GAAA6uB,QAQA,GAAA6C,IAAA,GAAA3hB,OAAAC,UACA2hB,EAAAD,EAAA1Y,CACArW,SAAAC,IAAA,mBAAA+uB,EAAA,IAAA,SAAAr0B,EAAAnK,MAGA,QAAAs+B,GAAAG,EAAAC,GAIA,IAFA,GAAAp3B,GAAA,EACA4K,EAAA,IACA,CACA,GAAAysB,GAAA,QAAAr3B,EACAs3B,EAAA,QAAA1sB,CAWA,IATA,KAAAusB,EAAAE,KACAr3B,IACAq3B,EAAA,QAAAr3B,GAEA,KAAAo3B,EAAAE,KACA1sB,IACA0sB,EAAA,QAAA1sB,KAGAysB,IAAAF,IAAAG,IAAAF,IACA,OAAA,CAGA,MAAAC,IAAAF,IACA,OAAA,CAEA,MAAAG,IAAAF,IACA,OAAA,CAGA,IAAAD,EAAAE,QAAAD,EAAAE,OACA,OAAA,CAGA,MAAAH,EAAAE,IAAA,GAAAD,EAAAE,IAAA,GACA,OAAA,CAGA,IAAAH,EAAAE,IAAAD,EAAAE,GACA,OAAA,CAGA,IAAAC,GAAA,QAAAv3B,EAAA,QACAw3B,EAAA,QAAA5sB,EAAA,OACA,IAAAusB,EAAAI,IAAAH,EAAAI,GACA,OAAA,IAGAx3B,GAIA,QAAA+gB,GAAAxiB,GAEA,GAAAA,EAAA6U,KAAA,CACA,GAAAzK,GAAApK,EAAA6U,KACA7N,EAAAhH,EAAAmH,SAUA,IARA,MAAAnH,EAAA7F,OACA6F,EAAA7F,KAAAL,EAAA0C,UAAA4N,EAAAhE,OAAAgE,EAAA/D,eAGArG,EAAAoJ,aAAAgB,EAAAqgB,WAAA,IACAzqB,EAAAoJ,YAAAgB,EAAAqgB,YAGA,MAAAzqB,EAAAd,MAAA,CACA,GAAAA,GAAAhB,EAAA8G,SAAAoF,EACA,IAAA,MAAApD,EAAA,CACA,GAAAK,GAAAnJ,EAAA8G,SAAAgC,EACA9H,GAAAhB,EAAA8C,WAAA9B,EAAAmI,GAGArH,EAAAd,MAAAA,EAGAkL,EAAAuiB,UAAA3sB,EAAAk5B,UACAl5B,EAAAk5B,QAAA9uB,EAAAuiB,SAGA,MAAA3sB,EAAAm5B,YACAn5B,EAAA5F,KAAAgQ,EAAA7D,eACAvG,EAAA5F,MAAA,SAAA4F,EAAAsC,aACAtC,EAAA5F,KAAA,QAIAgQ,EAAA6C,YAAAjN,EAAA0F,gBACA1F,EAAA0F,cAAA0E,EAAA6C,WAGA,MAAAjG,IACAhH,EAAAsH,IAAAN,EAAA/H,GAEA,MAAAe,EAAA83B,iBACA93B,EAAA83B,eAAAsB,EAAApyB,EAAAhH,EAAA61B,oBAIA71B,GAAA6U,WACA7U,GAAAmH,WAIA,QAAAiyB,GAAApyB,EAAA6uB,GAEA,GAAA,MAAA7uB,GAAAA,EAAAsnB,eAAA,GAAA,GAAAuH,EAAA,CACA,GAAAwD,GAAA96B,KAAAC,MAAAwI,EAAAsnB,eAAAuH,EAAA,IAAA,KAAA,GACA,IAAA,KAAAwD,EACA,MAAAA,GAAA,IAIA,MAAA,MAGA,QAAAtsB,GAAA/M,GAEA,GAAA8F,GAAA,KACAxB,EAAAjE,EAAAL,EAAAsC,WAYA,IAVAtC,EAAA8F,UAAAzB,EAAAvJ,SAAAkF,EAAA8F,SAAA,qBACAA,EAAA9F,EAAA8F,SAAA,oBAEA9F,EAAA8F,UAAAzB,EAAAvJ,SAAAkF,EAAA8F,SAAA,WACAA,EAAA9F,EAAA8F,SAAA,UAEAxB,GAAAD,EAAAvJ,SAAAwJ,EAAAwO,WACAhN,EAAAxB,EAAAwO,SAGAhN,EAAA,CACA,GAAA+H,GAAAxJ,EAAAwB,KAAAC,EAAA,KAAA9F,EAAAf,GACA,IAAA4O,GAAAA,EAAA7R,OAAA,EACA,MAAA6R,GAAA,GAIA,SAGA,QAAAzC,GAAAhB,GACA,MAAAA,IAIAnL,GAAAmL,EAAAnL,GACA9E,KAAAL,EAAA0C,UAAA4N,EAAAhE,OAAAgE,EAAA/D,aACAG,KAAAtI,EAAAyS,UAAAvG,EAAA3D,MACArM,KAAAgQ,EAAA7D,eACAG,WAAA0D,EAAAzD,WACAb,SAAAsE,EAAAtE,aA3SA,OACAkxB,UAAAA,EACAxU,SAAAA,EACAuT,WAAAA,EACAhpB,YAAAA,EACA3B,gBAAAA,GAVA1S,QAAAC,OAAA,SAAA6xB,QAAA,eACA,eAAA,UAAA,cAAA,QAAA/gB,OCJA,WACA,YAIA,SAAApJ,GAAAvG,EAAAuK,EAAA2W,GAsJA,QAAAvgB,GAAAgC,EAAAutB,GACA,GAAA1nB,GAAA1E,IACA0E,GAAAy0B,SAAA,EAEA,MAAAz0B,EAAAjC,MACA2pB,KAIAlwB,EAAAW,KAAAgC,EAAA,WAAA68B,EAAAh3B,EAAA0nB,KACA3lB,EAAA5J,KAAA6H,EAAAwQ,QAAAkI,EAAAlI,QAAArW,EAAA,WAAA68B,EAAAh3B,EAAA0nB,KACA,gBAAA1nB,IACA+B,EAAA5J,KAAA6H,EAAAkF,aAAAwT,EAAAxT,aAAA/K,EAAA,WAAA68B,EAAAh3B,EAAA0nB,KAEA,kBAAA1nB,IACA+B,EAAA5J,KAAA6H,EAAAoF,eAAAsT,EAAAxT,aAAA/K,EAAA,WAAA68B,EAAAh3B,EAAA0nB,KAEA,UAAA1nB,IACA+B,EAAA5J,KAAA6H,EAAA6sB,OAAAnU,EAAAmU,OAAA1yB,EAAA,WAAA68B,EAAAh3B,EAAA0nB,KAGAsP,EAAAh3B,EAAA0nB,IAIA,QAAAsP,GAAAh3B,EAAA0nB,IACAlwB,EAAAgB,aACAuJ,EAAAvJ,SAAAwH,EAAAwQ,UACA,gBAAAxQ,KAAA+B,EAAAvJ,SAAAwH,EAAAkF,eACA,kBAAAlF,KAAA+B,EAAAvJ,SAAAwH,EAAAoF,iBACA,UAAApF,KAAA+B,EAAAvJ,SAAAwH,EAAA6sB,UAEAnF,IACA1nB,EAAAy0B,SAAA,GArLA,GAAAwC,IAEAvgC,OACA8Z,QAAA,oCACAiI,KAAA,SACAuG,SAAA,EACA4W,QAAA,GAGAsB,MACA1mB,QAAA,0CACAtL,aAAA,kCACAE,eAAA,yCACA2B,SAAA,iDACA0R,KAAA,QACAuG,SAAA,GACA4W,QAAA,GAEAuB,MACA3mB,QAAA,sCACAiI,KAAA,WACAvT,aAAA,+CACA8Z,SAAA,GACA4W,QAAA,GAEAb,KACAvkB,QAAA,yCACAtL,aAAA,8CACAE,eAAA;AACA/B,WAAA,4CACAwpB,OAAA,oCACApU,KAAA,OACAuG,SAAA,GACA4W,QAAA,GAEAwB,OACA5mB,QAAA,mCACAtL,aAAA,wCACAuT,KAAA,SACAuG,SAAA,GACA4W,QAAA,GAEA73B,OACAyS,QAAA,6BACAga,SAAA,8BACA0J,UAAA,+BACA7wB,WAAA,gCACA6B,aAAA,kCACA4nB,OAAA,gCACArU,KAAA,YACAuG,SAAA,GACA4W,QAAA,GACAyB,IACA7mB,QAAA,uCACAga,SAAA,wCACA0J,UAAA,yCACA7wB,WAAA,gCACA6B,aAAA,kCACA6B,SAAA,iDACA+lB,OAAA,gCACArU,KAAA,YACAuG,SAAA,GACA4W,QAAA,GACA0B,MACA9mB,QAAA,oCACAga,SAAA,qCACA0J,UAAA,sCACA7wB,WAAA,uCACA6B,aAAA,yCACA4nB,OAAA,gCACArU,KAAA,YACAuG,SAAA,GACA4W,QAAA,GACA2B,OACA/mB,QAAA,iCACAga,SAAA,kCACA0J,UAAA,mCACA7wB,WAAA,gCACAypB,OAAA,gCACArU,KAAA,YACAuG,SAAA,GACA4W,QAAA,GAEA4B,OACAhnB,QAAA,8BACAga,SAAA,+BACA0J,UAAA,gCACApH,OAAA,qCACArU,KAAA,OACAuG,SAAA,EACA4W,QAAA,GACA6B,OACAjnB,QAAA,wCACAga,SAAA,yCACA0J,UAAA,0CACApH,OAAA,qCACArU,KAAA,OACAuG,SAAA,EACA4W,QAAA,GACA8B,OACAlnB,QAAA,wCACAga,SAAA,yCACA0J,UAAA,0CACApH,OAAA,qCACArU,KAAA,OACAuG,SAAA,EACA4W,QAAA,GACA+B,MACAnnB,QAAA,kCACAga,SAAA,mCACA0J,UAAA,oCACApH,OAAA,qCACArU,KAAA,OACAuG,SAAA,EACA4W,QAAA,GACAgC,OACApnB,QAAA,mCACAga,SAAA,oCACA0J,UAAA,qCACApH,OAAA,qCACArU,KAAA,OACAuG,SAAA,EACA4W,QAAA,GACAiC,OACArnB,QAAA,qCACAga,SAAA,qCACAsC,OAAA,qCACArU,KAAA,QACAuG,SAAA,EACA4W,QAAA,GAgBA,OAXAx/B,SAAAkD,QAAA29B,EAAA,SAAAj3B,EAAAxG,GACAwG,EAAAnI,KAAA2B,EACAwG,EAAAy0B,SAAA,EACAz0B,EAAAjC,MAAA,KACAiC,EAAA7H,KAAAA,EACA6H,EAAA7E,MAAA,WACA6E,EAAAjC,MAAA,KACAiC,EAAAy0B,SAAA,KAIAwC,EArJA7gC,QAAAC,OAAA,SAAA6xB,QAAA,SACA,eAAA,UAAA,oBAAAnqB,OCJA,WACA,YAGA,SAAA0Q,GAAA1M,EAAAvK,EAAAkhB,GAEA,GAAAlV,GAAA,kBACA8rB,EAAA5W,EAAAqU,OAEA,QACAvpB,SAAAA,EACAqL,QAAA,KAEArW,SAAA,WACA,MAAAuJ,GAAAvJ,SAAAgL,IAGAitB,kBAAA,WACA,MAAA1uB,GAAA0uB,kBAAAjtB,IAGArL,KAAA,SAAAgC,EAAAutB,GACA3lB,EAAA5J,KAAAqL,EAAA8rB,EAAAn1B,EAAA,WACAutB,OAIAvsB,MAAA,WACAG,KAAAuT,QAAA,KACA9M,EAAA5G,MAAAqI,IAGAiY,aAAA,WACA,GAAAhN,MACAqpB,EAAAx8B,KAAAwT,YACA,IAAA,MAAAgpB,EAEA,IAAA,GADA5H,GAAA4H,EAAAp+B,OACAyR,EAAA,EAAAA,EAAA+kB,IAAA/kB,EACA,GAAA2sB,EAAA3sB,GAAArD,EAAAmlB,WAAA6K,EAAA3sB,GAAArD,EAAAyc,QAAA,GACA9V,EAAAnU,KAAAw9B,EAAA3sB,GAKA,OAAAsD,IAGAsU,YAAA,WACA,GAAA1jB,MACA04B,KAEA5F,EAAA72B,IASA,OARAlF,SAAAkD,QAAAgC,KAAAmgB,eAAA,SAAA1M,EAAAvV,GACAu+B,EAAA5F,EAAAxW,eAAA5M,IAAAA,IAGA3Y,QAAAkD,QAAAy+B,EAAA,SAAAhpB,EAAAE,GACA5P,EAAA/E,KAAA2U,KAGA5P,GAGAyP,WAAA,WACA,GAAA,MAAAxT,KAAAuT,SAAAvT,KAAA9C,YAAAhB,EAAAgB,WAAA,CAIA,IAAA,GAHAiW,MACA8D,EAAAxQ,EAAAmH,QAAA1F,GACA0sB,EAAA3d,EAAA7Y,OACAyR,EAAA,EAAAA,EAAA+kB,IAAA/kB,EACAsD,EAAAA,EAAA/U,QAAA4B,KAAA08B,UAAAzlB,EAAApH,GAGA7P,MAAAuT,QAAAJ,EAEA,MAAAnT,MAAAuT,SAGAkD,QAAA,SAAApV,GAIA,IAAA,GAHA4V,GAAAjX,KAAAwT,aAEAohB,EAAA3d,EAAA7Y,OACAyR,EAAA,EAAAA,EAAA+kB,IAAA/kB,EACA,GAAAoH,EAAApH,GAAAxO,IAAAA,EACA,MAAA4V,GAAApH,IAKA6sB,UAAA,SAAAlwB,GACA,GAAAiG,GAAAzS,IACA,QACAwM,EAAAA,EACAnL,GAAAmL,EAAAnL,GACA9E,KAAAL,EAAA0C,UAAA4N,EAAAklB,SACA/M,WAAA,SAAA9W,GACA,MAAA4E,GAAAkS,WAAAnY,EAAAqB,MAKA8W,WAAA,SAAAnY,EAAAqB,GACA,GAAA,GAAAA,EAAA,OAAA,CACA,IAAArB,EAAAnL,IAAAwM,EACA,OAAA,CAGA,IAAA8uB,GAAAnwB,EAAAqlB,SAEA,KAAA8K,EAAA,OAAA,CACA,IAAAA,GAAA9uB,EAAA,OAAA,CAEA,IAAA+uB,GAAA58B,KAAAyW,QAAAkmB,EACA,SAAAC,GACA58B,KAAA2kB,WAAAiY,EAAApwB,EAAAqB,IAMAwS,eAAA,SAAA5M,GACA,GAAAzT,KAAA9C,WAAA,CACA,GAAAs/B,GAAAx8B,KAAAwT,YACA,IAAA,MAAAgpB,EAEA,IAAA,GADA5H,GAAA4H,EAAAp+B,OACAyR,EAAA,EAAAA,EAAA+kB,IAAA/kB,EACA,GAAA2sB,EAAA3sB,GAAAxO,IAAAoS,EAAAjH,EAAAolB,UAAA,GAAA4K,EAAA3sB,GAAArD,EAAAmb,YACA,MAAA6U,GAAA3sB,GAAArD,EAAAmb,YAMA,MAAA,QAjIA7sB,QAAAC,OAAA,SAAA6xB,QAAA,QAAA,UAAA,eAAA,oBAAAzZ,OCHA,WACA,YAIA,SAAA8C,GAAAjb,EAAA6hC,EAAAv8B,GAyBA,QAAAzD,KACAkP,QAAAC,IAAA,QACA8wB,SAAAC,eACAC,OAAA,0CACAC,WAAA,4BACAC,YAAA,mCACAC,cAAA,0BAIA,QAAAnkB,KACA,MAAA6jB,GAAA,SAAAO,EAAAC,GACA,GAAAC,GAAAR,SAAAQ,MAEAA,GAAAC,mBAAA,SAAA5kB,GACA,MAAAA,GACA5M,QAAAC,IAAA,eACAhR,EAAAuE,SAAA03B,KAAA,eAGAlrB,QAAAC,IAAA,aACAoxB,EAAAzkB,QAMA,QAAAhB,GAAAZ,GAEA,MADAhL,SAAAC,IAAA,eACA6wB,EAAA,SAAAO,EAAAC,GACAP,SAAAU,WAAAC,IAAA,WAAA1mB,GAAA2mB,KAAA,QAAA,SAAAC,GAEAP,EADAO,EACAA,EAAAzI,cASA,QAAAxyB,GAAAqU,EAAAC,GAEA,MADAjL,SAAAC,IAAA,aACA6wB,EAAA,SAAAO,EAAAC,GACAP,SAAAU,WAAAC,IAAA,UAAA1mB,EAAA,IAAAC,GAAA0mB,KAAA,QAAA,SAAAC,GAEAP,EADAO,EACAC,EAAAD,EAAAzI,eASA,QAAAjc,GAAA1B,GACA,MAAAslB,GAAA,SAAAO,EAAAC,GACA,GAAA1kB,GAAAklB,EAAAjlB,SACAD,KACApB,EAAAzc,QAAAib,KAAAwB,GACAumB,EAAAvmB,GAAA,GACAulB,SAAAU,WAAAC,IAAA,WAAA9kB,EAAA5B,KAAAgnB,IAAAxmB,GAAApB,KAAAinB,MAKA,QAAA3lB,GAAAV,GAEA,MADAhL,SAAAC,IAAA,cACA6wB,EAAA,SAAAO,EAAAC,GACAtxB,QAAAC,IAAA,kBACA8wB,SAAAU,WAAAC,IAAA,UAAA1mB,GAAA2mB,KAAA,QAAA,SAAAhmB,GACA,GAAAA,EAAA,CACA,GAAA3T,MACAmxB,EAAAxd,EAAAwd,KACA,KAAA,GAAAle,KAAAke,GACAnxB,EAAAiT,GAAA4mB,EAAA1I,EAAAle,GAEAomB,GAAAr5B,OAGAq5B,WAMA,QAAAlnB,GAAAzC,GAEA,MADA1H,SAAAC,IAAA,oBACA6wB,EAAA,SAAAO,EAAAC,GACAtxB,QAAAC,IAAA,iBAAAyH,EAAApS,IACAy7B,SAAAU,WAAAC,IAAA,cAAAhqB,EAAApS,IAAAq8B,KAAA,QAAA,SAAArnB,GACAtK,QAAAC,IAAA,MAEAoxB,EADA/mB,EACAA,EAAA6e,cASA,QAAA8I,GAAAlmB,GAEAA,EAAArV,OACAwD,EAAAM,KAAAuR,EAAArV,MAAA,SAAAL,SACAA,GAAAwS,WAIA,IAAAqpB,GAAAviC,KAAAC,UAAAmc,EACA,OAAA/b,UAAAC,gBAAAiiC,GAGA,QAAAL,GAAAM,GACA,GAAAD,GAAAliC,SAAAoiC,oBAAAD,GACApmB,EAAApc,KAAA0iC,MAAAH,EAgBA,OAdAnmB,GAAArV,OACAwD,EAAAM,KAAAuR,EAAArV,MAAA,SAAAL,GACAA,EAAAwS,UAAAxS,EAAAd,MAEA,MAAAc,EAAA4E,kBAAA5E,EAAA4E,iBAAA5I,OAAA,IACAgE,EAAAwS,UAAAtU,EAAA8C,WAAAhB,EAAA4E,iBAAA5E,EAAAwS,YAGA,MAAAxS,EAAA6I,YAAA7I,EAAA6I,WAAA7M,OAAA,IACAgE,EAAAwS,UAAAtU,EAAA8C,WAAAhB,EAAA6I,WAAA7I,EAAAwS,cAKAkD,EAGA,QAAAuB,GAAArC,EAAAc,GACA,GAAAa,GAAAklB,EAAAjlB,UACAylB,IACA,IAAA1lB,IACAb,EAAAhd,QAAAib,KAAA+B,GACAgmB,EAAAhmB,GAAA,GAEAumB,EAAAr/B,KACA89B,SAAAU,WAAAC,IAAA,UAAA9kB,EAAA5B,IAAA,IAAAC,GAAA+mB,IAAAC,EAAAlmB,KAGAA,EAAArE,KAAAqE,EAAArE,IAAApS,IAAA,CACA0K,QAAAC,IAAA,eAEA,IAAAiL,KACAa,GAAAK,cACAlB,EAAAqnB,IAAAxmB,EAAAK,aAEAL,EAAA3b,SACA8a,EAAA9a,OAAA2b,EAAA3b,QAEA2b,EAAAR,QACAL,EAAAK,MAAAQ,EAAAR,OAEAQ,EAAA0B,QACAvC,EAAAuC,MAAA1B,EAAA0B,OAGAskB,EAAA7mB,GAAA,GAEAonB,EAAAr/B,KACA89B,SAAAU,WAAAC,IAAA,cAAA3lB,EAAArE,IAAApS,GAAA,IAAAsX,EAAA5B,IAAA,IAAAC,GAAA+mB,IAAA9mB,IAIA,MAAA4lB,GAAA0B,IAAAF,GAGA,QAAAP,GAAAU,EAAAC,GACA,IAAA,GAAA56B,KAAA26B,GACAE,SAAAF,EAAA36B,SACA26B,GAAA36B,GACA46B,GAAA,gBAAAD,GAAA36B,IACAi6B,EAAAU,EAAA36B,GAAA46B,GAKA,QAAAzkB,KACA,GAAAsjB,GAAAR,SAAAQ,MACA,OAAAT,GAAA,SAAAO,EAAAC,GACAC,EAAAtjB,UAAA7D,KAAA,WACAinB,KACA,SAAA/F,GACAgG,QAKA,QAAA5jB,GAAArD,GACA,GAAAknB,GAAAR,SAAAQ,OACA3kB,EAAAklB,EAAAjlB,SAEA,OAAAikB,GAAA,SAAAO,EAAAC,GAEA,GAAAsB,IACA7B,SAAAU,WAAAC,IAAA,UAAA9kB,EAAA5B,KAAAgU,SACA+R,SAAAU,WAAAC,IAAA,WAAA9kB,EAAA5B,KAAAgU,SACA+R,SAAAU,WAAAC,IAAA,WAAA9kB,EAAA5B,KAAAgU,UAEA6T,IACA,KAAA,GAAA5nB,KAAAZ,GACAA,EAAAY,GAAAvD,KACAmrB,EAAA5/B,KAAAoX,EAAAY,GAAAvD,IAAApS,GAIAu9B,GAAA34B,EAAAoU,KAAAukB,GACA34B,EAAAM,KAAAq4B,EAAA,SAAAv9B,GACAs9B,EAAA3/B,KACA89B,SAAAU,WAAAC,IAAA,cAAAp8B,EAAA,IAAAsX,EAAA5B,KAAAgU,YAIA8R,EAAA0B,IAAAI,GAAAxoB,KAAA,WACApK,QAAAC,IAAA,gBACA2M,EAAAA,YAAAxC,KAAA,WACApK,QAAAC,IAAA,gBACAsxB,EAAAtjB,UAAA7D,KAAA,WACApK,QAAAC,IAAA,cACAoxB,KACA,SAAA/F,GACAgG,YAOA,QAAA3iB,GAAA1D,EAAAc,GAEA,GAAA6mB,MACAhmB,EAAAklB,EAAAjlB,SAWA,OAVAD,KACAgmB,EAAA3/B,KACA89B,SAAAU,WAAAC,IAAA,UAAA9kB,EAAA5B,IAAA,IAAAC,GAAA+T,UAEAjT,EAAArE,KACAkrB,EAAA3/B,KACA89B,SAAAU,WAAAC,IAAA,cAAA3lB,EAAArE,IAAApS,GAAA,IAAAsX,EAAA5B,KAAAgU,WAIA8R,EAAA0B,IAAAI,GAhRA5yB,QAAAC,IAAA,uBAEA,IAAA6xB,IACA7kB,MAAAA,EACAJ,QAAA,WACA,MAAAkkB,UAAAQ,OAAAuB,aAEA7kB,QAAAA,EACAP,cAAAA,EAEAhC,cAAAA,EACAiD,YAAAA,EACArB,UAAAA,EACA3W,SAAAA,EACAwT,eAAAA,EAEAyB,WAAAA,EACAsB,YAAAA,EAKA,OAFApc,KAEAghC,EAzBA/iC,QAAAC,OAAA,SAAA6xB,QAAA,iBAAA,UAAA,KAAA,cAAA3W,OCHA,WACA,YAGA,SAAAqL,GAAA7a,EAAAvK,EAAAkhB,EAAAhhB,EAAAyP,EAAAsH,EAAA7S,GAgfA,QAAA5C,GAAA6O,GAEA,IAAA,GADAnK,GAAA,KACAoK,EAAA,EAAAA,EAAAD,EAAAnO,SAAAoO,EACAD,EAAAC,GAAA0e,IAAA4T,aACA18B,EAAAmK,EAAAC,GAAAvO,MAIA,KAAA,GAAAuO,GAAA,EAAAA,EAAAD,EAAAnO,SAAAoO,EACAD,EAAAC,GAAA0e,IAAA6T,WACAxyB,EAAAC,GAAA0e,IAAA6T,UAAAxyB,EAAAC,GAAAvO,MAAAoD,GAAAe,EAIA,OAAAA,GAGA,QAAA48B,GAAArgB,EAAA7G,EAAAvL,EAAA0yB,GACAA,IACAA,EAAA,KAQA,KAAA,GALA7f,GAAAhjB,EAAAmT,SAAAoP,EAAApiB,MACAwH,KAEA8b,EAAAT,EAAAhhB,OAEAyF,EAAA,EAAAA,EAAAgc,IAAAhc,EAAA,CAEA,GAAAzB,GAAAgd,EAAAvb,EAEA,MAAAiU,EAAArE,IAAApS,GAAA,GAAAe,EAAAsR,aAAA,IAAAP,EAAAwR,WAAA7M,EAAArE,IAAAjH,EAAApK,EAAAsR,cAAA,CAGA7H,EAAA+Y,SAAAxiB,EAGA,KAAA,GADA88B,IAAA,EACA1yB,EAAA,EAAAA,EAAAD,EAAAnO,SAAAoO,EACA,GAAAD,EAAAC,GAAA2yB,cAAA5yB,EAAAC,GAAA2yB,YAAA/8B,GAAA,CACA88B,GAAA,CACA,OAQA,GAJAA,GACAn7B,EAAA/E,KAAAoD,GAGA2B,EAAA3F,QAAA6gC,EACA,OASA,MALAl7B,GAAAA,EAAAa,KAAA,SAAAwM,EAAAC,GACA,MAAAD,GAAA7U,KAAAw9B,cAAA1oB,EAAA9U,QApiBA,OACA6iC,UACAC,cACA9iC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAIA,IAAA,GAFA+yB,MAEA5c,EAAA,EAAAA,EAAA/D,EAAAqa,cAAA56B,SAAAskB,EAAA,CACA,GAAA6c,GAAA5gB,EAAAqa,cAAAtW,GAEA8c,EAAA,CACA,IAAA1nB,EAAArV,MACA,IAAA,GAAAoB,GAAA,EAAAA,EAAAiU,EAAArV,MAAArE,SAAAyF,EACAiU,EAAArV,MAAAoB,GAAAY,cAAA86B,GACAC,GAKA,MAAAA,GAAA7gB,EAAAzZ,aAAA,CAIA,GAAAqQ,GAAA9O,EAAAwB,KAAA,kBAAA,eAAAs3B,GACAE,EAAA,EACA,IAAAlqB,GAAAA,EAAAnX,OAAA,GAAAmX,EAAA,GAAA/M,OAAA,EACA,GAAAi3B,GAAAvjC,EAAA0C,UAAA2W,EAAA,GAAA/M,QAAAgN,aAEA8pB,GAAAtgC,MAAAqC,GAAAk+B,EAAAhjC,KAAAkjC,EAAAjqB,iBAGA,MAAA8pB,IAEAH,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAAqC,cAAApD,IAGAq+B,iBACAnjC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAIA,IAAA,GAFA+yB,MAEA5c,EAAA,EAAAA,EAAA/D,EAAAqa,cAAA56B,SAAAskB,EAAA,CAIA,IAAA,GAHA6c,GAAA5gB,EAAAqa,cAAAtW,GAEA8c,EAAA,EACA37B,EAAA,EAAAA,EAAAiU,EAAArV,MAAArE,SAAAyF,EACAiU,EAAArV,MAAAoB,IAAAiU,EAAArV,MAAAoB,GAAAY,cAAA86B,GACAC,GAIA,IAAA,IAAAD,GAAA,IAAAA,GACA,GAAAC,GAAA,EACA,aAIA,IAAAA,GAAA,EACA,QAIA,IAAAjqB,GAAA9O,EAAAwB,KAAA,kBAAA,eAAAs3B,EACA,IAAAhqB,GAAAA,EAAAnX,OAAA,GAAAmX,EAAA,GAAA/M,OAAA,EAAA,CACA,GAAAi3B,GAAAvjC,EAAA0C,UAAA2W,EAAA,GAAA/M,QAAAgN,aAEA8pB,GAAAtgC,MAAAqC,GAAAk+B,EAAAhjC,KAAAkjC,EAAAjqB,iBAIA,MAAA8pB,IAEAH,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAAqC,cAAApD,IAGAs+B,gBACApjC,KAAA,QACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,cAGA4iC,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAA0G,YAAAzH,IAGAu+B,cACArjC,KAAA,QACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,aACA8E,GAAA,GAAA9E,KAAA,cAGA4iC,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAA0G,YAAAzH,IAGAw+B,cACAtjC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,EAAA9E,KAAA,WACA8E,GAAA,EAAA9E,KAAA,SACA8E,GAAA,EAAA9E,KAAA,SACA8E,GAAA,EAAA9E,KAAA,UACA8E,GAAA,EAAA9E,KAAA,YAGA4iC,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAAwG,KAAAvH,IAAAA,IAGAy+B,cACAvjC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,EAAA9E,KAAA,WACA8E,GAAA,EAAA9E,KAAA,UAGA4iC,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAAwG,KAAAvH,IAAAA,IAGA0+B,kBACAxjC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,EAAA9E,KAAA,SACA8E,GAAA,IAAA9E,KAAA,uBACA8E,GAAA,EAAA9E,KAAA,UACA8E,GAAA,EAAA9E,KAAA,YAGA4iC,YAAA,SAAA99B,EAAAe,GAEA,GADAyJ,EAAA+Y,SAAAxiB,GACAA,EAAA7F,KAAA,CAEA,GAAAoH,GAAAhD,KAAA8C,IACArB,EAAA7F,KAAAQ,QAAA,WACAqF,EAAA7F,KAAAQ,QAAA,cAEA,OAAA,MAAAsE,EACA,GAAAsC,EAGAvB,EAAAwG,KAAAvH,IAAAA,GAAA,GAAAsC,EAGA,OAAA,IAGAq8B,aACAzjC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,EAAA9E,KAAA,cACA8E,GAAA,IAAA9E,KAAA,4BACA8E,GAAA,EAAA9E,KAAA,UAGA4iC,YAAA,SAAA99B,EAAAe,GAEA,GADAyJ,EAAA+Y,SAAAxiB,GACAA,EAAA7F,KAAA,CACA,GAAAoH,GAAAhD,KAAA8C,IACArB,EAAA7F,KAAAQ,QAAA,WACAqF,EAAA7F,KAAAQ,QAAA,cACA,OAAA,MAAAsE,EACA,GAAAe,EAAAwG,KAAAvH,IAAA,GAAAsC,EAGAvB,EAAAwG,KAAAvH,IAAAA,GAAA,GAAAsC,EAGA,OAAA,IAGAs8B,eACA1jC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,EAAA9E,KAAA,SACA8E,GAAA,EAAA9E,KAAA,SACA8E,GAAA,EAAA9E,KAAA,YAGA4iC,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAAwG,KAAAvH,IAAAA,IAGA6+B,eACA3jC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,EAAA9E,KAAA,cACA8E,GAAA,EAAA9E,KAAA,WACA8E,GAAA,EAAA9E,KAAA,UAGA4iC,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAAwG,KAAAvH,IAAAA,IAGA8+B,qBACA5jC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,QACAlL,GAAA,IAAA9E,KAAA,eACA8E,GAAA,GAAA9E,KAAA,cACA8E,GAAA,GAAA9E,KAAA,cACA8E,GAAA,EAAA9E,KAAA,cAGAwiC,UAAA,SAAA19B,EAAAe,GACAA,EAAA8E,eAAA7F,IAGA++B,WACA7jC,KAAA,SACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAGA,IAAA,GAFA8zB,GAAArB,EAAArgB,EAAA7G,EAAAvL,EAAA,MACA+zB,KACAz8B,EAAA,EAAAA,EAAAw8B,EAAAjiC,SAAAyF,EACA,OAAAw8B,EAAAx8B,GAAAxC,IACA,IAAA,MACA,IAAA,MACA,IAAA,MAEA,IAAA,KACA,IAAA,KAEA,IAAA,MACA,IAAA,MACAi/B,EAAAthC,KAAAqhC,EAAAx8B,IAIA,MAAAy8B,IAEAje,WAAA,SAAA1D,EAAA7G,EAAAvL,GACA,OAAA,GAEAuyB,YAAA,GAEAyB,aACAhkC,KAAA,UACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAEA,GAAAnK,GAAA1E,EAAA6O,EACA,OAAAnK,IAAAA,EAAA0F,gBAEAzG,GAAA,GAAA9E,KAAA,mBACA8E,GAAA,GAAA9E,KAAA,mBACA8E,GAAA,GAAA9E,KAAA,mBACA8E,GAAA,GAAA9E,KAAA,mBACA8E,GAAA,GAAA9E,KAAA,mBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,kBACA8E,GAAA,EAAA9E,KAAA,mBAIA8E,GAAA,EAAA9E,KAAA,kBAGAwiC,UAAA,SAAA19B,EAAAe,GACAA,EAAA8E,eAAA7F,IAGAm/B,UACAjkC,KAAA,SACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GACA,MAAAyyB,GAAArgB,EAAA7G,EAAAvL,IAEAuyB,YAAA,GAEA2B,eACAlkC,KAAA,QACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GACA,GAAA9J,GAAAu8B,EAAArgB,EAAA7G,EAAAvL,EAAA,EAIA,OAAA9J,GAAArE,OAAA,IACAiD,GAAAoB,EAAA,GAAA64B,QAAA/+B,KAAAkG,EAAA,GAAA64B,cAMA6D,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAAk5B,SAAAj6B,IAGAq/B,cACAnkC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAIA,IAAA,GAHA9J,GAAAu8B,EAAArgB,EAAA7G,EAAAvL,GACAo0B,KACAC,KACA/8B,EAAA,EAAAA,EAAApB,EAAArE,SAAAyF,EAAA,CACA,GAAAtH,GAAAkG,EAAAoB,GAAAtH,IACAA,KAAAokC,KACAA,EAAApkC,IAAA,EACAqkC,EAAA5hC,MACAqC,GAAA9E,EACAA,KAAAA,KAKA,MAAAqkC,IAEAzB,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAA7F,MAAA8E,GAEAy9B,YAAA,GAEA+B,sBACAtkC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAKA,IAAA,GAJA9J,GAAAu8B,EAAArgB,EAAA7G,EAAAvL,GACAo0B,KACAC,KAEA/8B,EAAA,EAAAA,EAAAiU,EAAArV,MAAArE,SAAAyF,EAAA,CACA,GAAAzB,GAAA0V,EAAArV,MAAAoB,EACA88B,GAAAv+B,EAAA7F,OAAA,EAGA,IAAA,GAAAsH,GAAA,EAAAA,EAAApB,EAAArE,SAAAyF,EAAA,CACA,GAAAtH,GAAAkG,EAAAoB,GAAAtH,IACAA,KAAAokC,KACAA,EAAApkC,IAAA,EACAqkC,EAAA5hC,MACAqC,GAAA9E,EACAA,KAAAA,KAKA,MAAAqkC,IAEAzB,YAAA,SAAA99B,EAAAe,GACA,MAAAA,GAAA7F,MAAA8E,GAEAy9B,YAAA,GAEAgC,cACAvkC,KAAA,YACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GAIA,IAAA,GAHA9J,GAAAu8B,EAAArgB,EAAA7G,EAAAvL,GACAw0B,KAEAl9B,EAAA,EAAAA,EAAApB,EAAArE,SAAAyF,EAAA,CAEA,IAAA,GADAD,GAAA,EACA6K,EAAA,EAAAA,EAAAhM,EAAAoB,GAAAvC,MAAAlD,SAAAqQ,EAAA,CACA,GAAA1M,GAAAzB,EAAAgB,MAAAmB,EAAAoB,GAAAvC,MAAAmN,GAAApN,GACAU,KAAAA,EAAAuH,MACA1F,IAGAm9B,EAAAn9B,EAAA,WAAAA,EAGA,GAAAG,KACA,KAAA,GAAAmxB,KAAA6L,GACAh9B,EAAA/E,MACAqC,GAAA0/B,EAAA7L,GACA34B,KAAA24B,GAQA,OAJAnxB,GAAAA,EAAAa,KAAA,SAAAC,EAAAC,GACA,MAAAD,GAAAxD,GAAAyD,EAAAzD,MAKA89B,YAAA,SAAA99B,EAAAe,GAEA,IAAA,GADAwB,GAAA,EACA6K,EAAA,EAAAA,EAAArM,EAAAd,MAAAlD,SAAAqQ,EAAA,CACA,GAAA1M,GAAAzB,EAAAgB,MAAAc,EAAAd,MAAAmN,GAAApN,GACAU,KAAAA,EAAAuH,MACA1F,IAIA,MAAAA,IAAAvC,GAEAy9B,YAAA,GAEAkC,YACAzkC,KAAA,OACAqlB,WAAA,SAAAjD,EAAA7G,EAAAvL,GACA,MAAAjM,GAAA0iB,aAEA8b,YAAA,IAKAmC,eACAC,QAAA,aACAC,SAAA,eAAA,iBAAA,gBAAA,WAAA,eACAC,QAAA,eAAA,iBAAA,gBAAA,WAAA,eACAC,aAAA,kBAAA,eAAA,gBAAA,eAAA,YACAC,kBAAA,iBAAA,cAAA,eAAA,eAAA,WAAA,eACAC,mBAAA,iBAAA,cAAA,eAAA,eAAA,WAAA,eACAC,sBAAA,eAAA,gBAAA,uBAAA,eAAA,YACAC,iBAAA,iBAAA,uBAAA,eAAA,YACAC,UAAA,iBAAA,mBAAA,uBAAA,eAAA,WAAA,uBACAC,SAAA,eAAA,gBAAA,eAAA,YACAtF,MAAA,kBAAA,eAAA,eAAA,YACAuF,OAAA,eAAA,eAAA,eAAA,gBAAA,YACAC,QAAA,eAEAjgB,WAAA,SAAAjD,EAAA7G,EAAAvL,GACA,GAAAoS,EAAApiB,OAAAyD,MAAAihC,cAAA,CACA,GAAAa,GAAA9hC,KAAA+hC,YAAApjB,EAAApS,EAAAnO,OACA,OAAA4B,MAAAo/B,SAAA0C,GAAAlgB,WAAAjD,EAAA7G,EAAAvL,GAGA,UAGA8V,WAAA,SAAA1D,EAAA7G,EAAAvL,GACA,GAAAoS,EAAApiB,OAAAyD,MAAAihC,cAAA,CACA,GAAAa,GAAA9hC,KAAA+hC,YAAApjB,EAAApS,EAAAnO,OACA,OAAA4B,MAAAo/B,SAAA0C,GAAAzf,WACAriB,KAAAo/B,SAAA0C,GAAAzf,WAAA1D,EAAA7G,EAAAvL,GAGAvM,KAAAo/B,SAAA0C,GAAAlgB,WAAAjD,EAAA7G,EAAAvL,GAAAnO,OAAA,EAIA,OAAA,GAGA2jB,kBAAA,SAAApD,EAAA6C,GACA,MAAAxhB,MAAAihC,cAAAtiB,EAAApiB,MAAA6B,OAAAojB,GAEAM,WAAA,SAAA7jB,EAAA0gB,EAAA6C,GACA,GAAAsgB,GAAA9hC,KAAA+hC,YAAApjB,EAAA6C,GACA0J,EAAAlrB,KAAAo/B,SAAA0C,EAEA,QACAE,KAAAF,EACA7jC,MAAAA,EACAitB,IAAAA,EACAiU,YAAA,SAAA/8B,GACA,MAAA8oB,GAAAiU,YAAAlhC,EAAAoD,GAAAe,MAIA1E,QAAAA,EACAqkC,YAAA,SAAApjB,EAAA6C,GACA,MAAAxhB,MAAAihC,cAAAtiB,EAAApiB,MAAAilB,KA7eA1mB,QAAAC,OAAA,SAAA6xB,QAAA,YAAA,UAAA,eAAA,oBAAA,eAAA,cAAA,OAAA,cAAAtL,OCHA,WACA,YAGA,SAAAnlB,GAAAD,EAAAuC,EAAAgI,EAAAnI,GAEA,GAAAgB,IAAAnD,OAAA,MAAAI,KAAA,mCAAAa,IAAA,IACA+B,IACAhD,OAAA,KAAAI,KAAA,yCAAAa,IAAA,iCACAjB,OAAA,MAAAI,KAAA,yBAAAa,IAAA,qCACAjB,OAAA,MAAAI,KAAA,4BAAAa,IAAA,qCACAjB,OAAA,MAAAI,KAAA,sDAAAa,IAAA,uCACAjB,OAAA,KAAAI,KAAA,6CAAAa,IAAA,oCACAjB,OAAA,MAAAI,KAAA,iCAAAa,IAAA,2CAGA6kC,EAAApmC,aAAA6B,QAAA,iBACAJ,EAAA6B,EAAA,EACA,OAAA8iC,GACAnnC,QAAAkD,QAAAmB,EAAA,SAAA+iC,EAAAv+B,GACAu+B,EAAA/lC,QAAA8lC,IACA3kC,EAAA4kC,IAKA,IAAAC,GAAAtmC,aAAA6B,QAAA,kBACAP,EAAA,IAcA,OAbA,OAAAglC,GACArnC,QAAAkD,QAAAmB,EAAA,SAAA+iC,EAAAv+B,GACA,GAAAu+B,EAAA/lC,QAAAmD,EAAAnD,QAAAgmC,EAAAplC,QAAAmlC,EAAA9kC,QAEA,YADAD,EAAA+kC,KAMA,MAAA/kC,IACAA,EAAAG,IAIA6B,YAAAA,EACAG,iBAAAA,EACAhC,YAAAA,EACAH,UAAAA,EAEAiD,aAAA,SAAAhD,GAEA4C,KAAAV,iBAAAlC,IAAAA,CAEA,IAAAglC,KACAtnC,SAAAkD,QAAAmB,EAAA,SAAA+iC,EAAAv+B,GACAu+B,EAAA/lC,QAAAmD,EAAAnD,QACAimC,EAAApjC,KAAAkjC,KAIAE,EAAApjC,KAAAM,GACAH,EAAAijC,EACApiC,KAAAb,YAAAijC,GAGAvtB,kBAAA,SAAAwtB,GACA,GAAAC,GAAA,IAEAxnC,SAAAkD,QAAAmB,EAAA,SAAA+iC,EAAAv+B,GACAu+B,EAAA/lC,QAAAkmC,IACAC,EAAAJ,KAIAliC,KAAAR,YAAA8iC,IAGA9iC,YAAA,SAAAD,GACAA,GAAAA,GAAAS,KAAA1C,cACA0C,KAAA1C,YAAAiC,EACAd,IACA5C,aAAAC,QAAA,gBAAAyD,EAAApD,QACAsC,IACAH,EAAA4B,UAGA,MAAAF,KAAA7C,WACA6C,KAAAkb,aAAA3b,GAGAS,KAAAnD,QAKAqe,aAAA,SAAA3b,GAEAA,GAAAS,KAAA7C,YAEArC,QAAAkD,QAAAgC,KAAAuiC,2BAAA,SAAAjG,EAAA34B,GACA24B,MAGAt8B,KAAA7C,UAAAoC,EACAI,eAAAC,WAAA,aACA/D,aAAA+D,WAAA,kBACAnB,IACAvC,EAAA2D,QACA3D,EAAAqD,SAAAS,KAAA7C,UAAAC,IACAlB,EAAAW,KAAA,aAAA,WAAAyB,EAAA4B,aAKArD,KAAA,WACA,MAAAmD,KAAA7C,YACAjB,EAAAqD,SAAAS,KAAA7C,UAAAC,KAEAqJ,EAAAjH,YAAAQ,KAAA1C,eAjHAxC,QAAAC,OAAA,SAAA6xB,QAAA,UAAA,eAAA,WAAA,UAAA,SAAAzwB,OCHA,WACA,YAGA,SAAAb,GAAAc,GACA,OACAoJ,SAAA,SAAAxE,EAAAoB,GACA,GAAAogC,GAAAxiC,KAAAxE,eACAwF,KAAAwhC,IAAA7N,MAAA8N,QAAAD,EAAAxhC,GAAAyB,QAEA+/B,EAAAxhC,GAAAyB,MAAAzD,KAAAoD,GACAogC,EAAAxhC,GAAAkY,YAAA,GAAAC,OAAAC,UACApZ,KAAA4F,kBAAA5E,EAAAwhC,EAAAxhC,GAAAyB,QAGAzC,KAAA4F,kBAAA5E,GAAAoB,IAGAvG,aAAAC,QAAA,iBAAAkF,IAGAF,mBAAA,SAAAkW,EAAAZ,GACApW,KAAA0iC,gBAAA1rB,GACAZ,GAAAY,IAAAZ,IAAAA,EAAAY,GAAAvD,KAAA2C,EAAAY,GAAAvD,IAAApS,IACAxF,aAAAC,QAAA,YAAAsa,EAAAY,GAAAvD,IAAApS,KAIA2W,YAAA,SAAAhX,EAAA2hC,GACA,GAAAlgC,GAAAzC,KAAAxE,eAGA,OAFAwF,GAAAhB,KAAA4iC,mBAAA5hC,EAAAyB,GACAzC,KAAA4F,kBAAA5E,EAAA2hC,GACA3hC,GAGA4hC,mBAAA,SAAA5hC,EAAA6hC,GACA,GAAAC,GAAA,CACA,IAAA9hC,EAAA+hC,YAAA,MAAA/hC,EAAA5C,OAAA,EAAA,CACA,GAAA4kC,GAAAhiC,EAAA+hC,YAAA,IACA,IAAAC,EAAA,EAAA,CACA,GAAAC,GAAA58B,OAAArF,EAAAu1B,OAAAyM,EAAA,EAAAhiC,EAAA5C,OAAA4kC,EAAA,GACAC,GAAA,IACAH,EAAAG,EAAA,EACAjiC,EAAAA,EAAAu1B,OAAA,EAAAyM,EAAA,KAMA,IADA,GAAAE,GAAAliC,IACA,CACA,GAAAA,GAAAkiC,CAKA,IAJAJ,EAAA,IACA9hC,EAAAkiC,EAAA,KAAAJ,EAAA,OAGA9hC,IAAA6hC,IAIA,KAHAC,KAOA,MAAA9hC,IAGA4E,kBAAA,SAAA5E,EAAA2hC,GACA,GAAAlgC,GAAAzC,KAAAxE,eACAwF,KAAAyB,GACA,GAAAkgC,EAAAvkC,cACAqE,GAAAzB,GACAhB,KAAA0iC,gBAAA,QAIAjgC,EAAAzB,GAAAyB,MAAAkgC,EACAlgC,EAAAzB,GAAAkY,YAAA,GAAAC,OAAAC,UACAvd,aAAAC,QAAA,iBAAAkF,KAKAyB,EAAAzB,IAAAyB,MAAAkgC,EAAAzpB,YAAA,GAAAC,OAAAC,WACAvd,aAAAC,QAAA,iBAAAkF,GAIA,IAAAi9B,GAAAviC,KAAAC,UAAA8G,EAEA5G,cAAAC,QAAA,aAAAC,SAAAC,gBAAAiiC,KAGAhmB,iBAAA,SACAgI,EAAAlI,EAAAG,EAAAC,EAAAC,EAAA3E,EAAA4E,EAAArU,EAAAG,EACAmU,EAAAC,EAAAC,EAAAC,EAAAtV,GAEA,GAAApF,GAAAiC,KAAAxE,eAEA,IAAAuc,IAAAha,IAAAkiB,GAAAlI,EAEAA,EAAAkI,MAEA,IAAAA,IAAAliB,GAAA,CACA,GAAAwE,GAAAxE,EAAAkiB,EACAliB,GAAAga,GAAAxV,QACAxE,GAAAkiB,GAGAliB,EAAAga,GAAAG,WAAAA,EACAna,EAAAga,GAAAI,YAAAA,EACApa,EAAAga,GAAAK,UAAAA,EACAra,EAAAga,GAAAtE,IAAAA,EACA1V,EAAAga,GAAAM,WAAAA,EACAta,EAAAga,GAAA/T,QAAAA,EACAjG,EAAAga,GAAA5T,iBAAAA,EACApG,EAAAga,GAAAO,cAAAA,EACAva,EAAAga,GAAAQ,eAAAA,EACAxa,EAAAga,GAAAS,YAAAA,EACAza,EAAAga,GAAAU,UAAAA,EACA1a,EAAAga,GAAA5U,UAAAA,CAEA,IAAA86B,GAAAviC,KAAAC,UAAAoC,EACAlC,cAAAC,QAAA,aAAAC,SAAAC,gBAAAiiC,KAGAziC,cAAA,WACA,IACA,GAAAyiC,GAAAliC,SAAAoiC,oBAAAtiC,aAAA6B,QAAA,eACAK,EAAArC,KAAA0iC,MAAAH,EACA,OAAAlgC,GAEA,MAAAolC,IAGA,UAGAvc,eAAA,WACA,IACA,GAAAqX,GAAAliC,SAAAoiC,oBAAAtiC,aAAA6B,QAAA,gBACAK,EAAArC,KAAA0iC,MAAAH,EACA,OAAAlgC,GAEA,MAAAolC,IAGA,UAGAxc,gBAAA,SAAAlkB,GACA,GAAAw7B,GAAAviC,KAAAC,UAAA8G,EAEA5G,cAAAC,QAAA,cAAAC,SAAAC,gBAAAiiC,KAGAmF,eAAA,WACA,IACA,GAAAnF,GAAAliC,SAAAoiC,oBAAAtiC,aAAA6B,QAAA,gBACAK,EAAArC,KAAA0iC,MAAAH,EACA,OAAAlgC,GAEA,MAAAolC,IAGA,UAGAE,gBAAA,SAAA5gC,GACA,GAAAw7B,GAAAviC,KAAAC,UAAA8G,EAEA5G,cAAAC,QAAA,cAAAC,SAAAC,gBAAAiiC,KAGApgC,aAAA,KACAC,gBAAA,WACA,IAAAkC,KAAAnC,eACAmC,KAAAnC,aAAAhC,aAAA6B,QAAA,gBACAsC,KAAAnC,cAAA,CACA,GAAAE,GAAAiC,KAAAxE,eACAwE,MAAAnC,eAAAE,KACAlC,aAAA+D,WAAA,gBACAI,KAAAnC,aAAA,MAKA,MAAAmC,MAAAnC,cAGA6kC,gBAAA,SAAA1rB,GACAhX,KAAAnC,aAAAmZ,EACAnb,aAAAC,QAAA,eAAAkb,KA5LAlc,QAAAC,OAAA,SAAA6xB,QAAA,cAAA,eAAAtxB,OCHA,WACA,YAGA,SAAAiF,GAAAD,GAEA,OAEA0C,YAAA,SAAArB,GACA,GAAAL,MACAi3B,IAsBA,OApBAz9B,SAAAkD,QAAA2D,EAAA,SAAA1D,EAAAC,GACA,MAAAD,GAAA,MAAAA,EAAA8E,WACA9E,EAAAoS,QAAAkoB,GACAA,EAAAt6B,EAAAoS,OAAAwP,WAGA0Y,EAAAt6B,EAAAoS,QAAAwP,SAAA,EAAAve,MAAArD,EAAA8E,aAKAjI,QAAAkD,QAAAu6B,EAAA,SAAAt6B,EAAAC,GAEApD,QAAAkD,QAAAC,EAAAqD,MAAA,SAAAS,EAAA4B,GACA5B,EAAAqpB,YAAAntB,EAAA4hB,UACAve,EAAAtC,KAAA+C,OAKAzB,EAAA8C,WAAA9B,IAGAwB,iBAAA,SAAAnB,GACA,GAAAL,KAcA,OAZAxG,SAAAkD,QAAA2D,EAAA,SAAA1D,EAAAC,GACA,MAAAD,IAGAqD,EADA,MAAArD,EAAA2W,UACAtT,EAAA4B,OAAAjF,EAAA2W,WAGAtT,EAAA4B,OAAAjF,EAAAqD,UAKAhB,EAAA8C,WAAA9B,IAGAkB,mBAAA,SAAAD,EAAAM,GAYA,QAAAygC,GAAAvhC,GACA,GAAAwhC,GAAAjjC,EAAAgB,MAAAS,EAAAV,GACA,OAAAmiC,GAAAD,EAAAlf,IACAhe,OAAAm9B,EAAAD,EAAAlf,IAAA5gB,KAGA,EAIA,QAAAggC,GAAA1hC,GACA,GAAAwhC,GAAAjjC,EAAAgB,MAAAS,EAAAV,GACA,OAAAmiC,GAAAD,EAAAG,MACAr9B,OAAAm9B,EAAAD,EAAAG,MAAAjgC,KAGA,EAIA,QAAAkgC,GAAA5hC,GACAA,EAAA0B,IAAA9C,KAAA6nB,MACAzmB,EAAA0B,KAAA,EAAA6/B,EAAAvhC,KAAA,EAAA0hC,EAAA1hC,KAIA,QAAA6hC,GAAAviC,GACA,GAAAU,GAAAyhC,EAAAniC,EACA,OAAAU,IACAV,GAAAA,EAAAoC,IAAA4C,OAAAtE,EAAA0B,KAAA4gB,GAAAtiB,EAAAsiB,KAGAhjB,GAAAA,EAAAoC,IAAA,EAAA4gB,GAAA,GAIA,QAAAwf,GAAA9hC,GACAA,EAAA0B,IAAA,GACAM,EAAA/E,KAAA+C,GA6JA,QAAA+hC,GAAAziC,EAAA6jB,EAAAzhB,GAEA,GAAAsgC,IAAA7e,EAAAzhB,GAAA,CAEAsgC,IAAAC,GAAAC,EAAA,GAAAF,EAAA,IAEAA,GAAA,EAAAG,EAAAzgC,GAIA,IAAA0gC,GAAAJ,CACA,IAAAxhC,EAAAyB,SAAAzB,EAAAyB,QAAA3C,GAAA,EAAA,CACA,GAAA+iC,GAAAZ,EAAAljC,EAAA4D,SAAA3B,EAAAyB,QAAA3C,IAAAgjC,QACAD,KACAD,GAAA,EAAA99B,OAAA+9B,EAAA3gC,MAGAogC,GAAAxiC,GAAAA,EAAAoC,IAAA0gC,GACA,IAAAG,GAAA,EACAC,EAAA,CAcA,IAZAA,EADAhiC,EAAAyB,QACAzB,EAAAyB,QAAA3C,GAGA,EAGAijC,EADA/hC,EAAA4B,iBACA5B,EAAA4B,iBAAA9C,GAGA,EAGAijC,GAAAC,EACA,GAAAD,EAAA,EAAA,CACA,GAAAE,GAAAhB,EAAAljC,EAAA4D,SAAA3B,EAAA4B,iBAAA9C,IAAAgjC,QACA,IAAAG,EAAA,CACA,GAAAC,GAAAV,GAAA,EAAA19B,OAAAm+B,EAAA/gC,KACAogC,IAAAxiC,GAAAA,EAAA,IAAAoC,IAAAghC,SAIAZ,IAAAxiC,GAAAA,EAAA,IAAAoC,IAAAsgC,IAvPA,GAAAhgC,MACAy/B,IACA,KAAAjhC,EAAAiW,cAAAjW,EAAA+V,cACA,QAGAxd,SAAAkD,QAAA6E,EAAA,SAAAd,EAAA4B,GACA6/B,EAAAzhC,EAAAV,IAAAU,GA8CA,IAAAuC,GAAAs/B,EAAA,EACAD,GAAAr/B,GACAu/B,EAAAv/B,EAEA,IAAAogC,GAAAd,EAAA,EACAD,GAAAe,GACAb,EAAAa,EAEA,IAAAC,GAAAf,EAAA,EACAD,GAAAgB,GACAd,EAAAc,EAEA,IAAAC,GAAAhB,EAAA,EACAD,GAAAiB,GACAf,EAAAe,EAGA,IAAAC,GAAAjB,EAAA,GACAiB,GAAAphC,KAAAmhC,EAAAnhC,IAAA4C,OAAA9D,EAAAiW,YAAAia,IACAkR,EAAAkB,GACAhB,EAAAgB,EAGA,IAAA3Z,GAAA0Y,EAAA,EACA1Y,GAAAznB,KAAAmhC,EAAAnhC,IAAA4C,OAAA9D,EAAAiW,YAAAqa,iBACA8Q,EAAAzY,GACA2Y,EAAA3Y,EAEA,IAAA4Z,GAAAlB,EAAA,KAEAkB,GAAArhC,IAAA9C,KAAAukB,IAAA,IAAAgG,EAAAznB,IAAA4C,OAAA9D,EAAA+V,cAAA+Z,WACAwR,EAAAiB,EAEA,IAAAC,GAAAnB,EAAA,EACAmB,GAAAthC,KAAAkhC,EAAAlhC,IAAA4C,OAAA9D,EAAAiW,YAAAsa,cACA6Q,EAAAoB,GACAlB,EAAAkB,EAEA,IAAAC,GAAApB,EAAA,KAEAoB,GAAAvhC,IAAA9C,KAAAukB,IAAA,IAAA6f,EAAAthC,IAAA4C,OAAA9D,EAAA+V,cAAA+Z,WACAwR,EAAAmB,EAKA,IAAAC,GAAArB,EAAA,IAGA,KAAArhC,EAAA8V,YAAA,GAAA9V,EAAA8V,WAAAhX,GAAA,CACA,GAAA6jC,GAAAtB,EAAA,IACAuB,EAAAvB,EAAA,KACAwB,EAAAxB,EAAA,MAGAyB,EAAAzB,EAAA,OAEA0B,EAAA1B,EAAA,EACA0B,GAAA7hC,KAAAyhC,EAAAzhC,IACA6hC,EAAA7hC,KAAA9C,KAAA6nB,MAAAlkB,EAAAb,IAAA4C,OAAA9D,EAAAiW,YAAAka,iBACA4S,EAAA7hC,KAAA9C,KAAA6nB,MAAAkc,EAAAjhC,IAAA4C,OAAA9D,EAAAiW,YAAAma,gBAEA2S,EAAA7hC,IAAA9C,KAAA6nB,MAAA8c,EAAA7hC,KAAA,GAAA6/B,EAAAgC,GAAAH,EAAA1hC,OACA6hC,EAAA7hC,IAAA9C,KAAA6nB,MAAA8c,EAAA7hC,KAAA,EAAAwhC,EAAAxhC,IAAA2hC,EAAA3hC,MACA6hC,EAAA7hC,KAAA9C,KAAA6nB,MAAA6c,EAAA5hC,IAAAkhC,EAAAlhC,KACAogC,EAAAyB,EAEA,IAAAC,GAAA3B,EAAA,EACA2B,GAAA9hC,KAAAyhC,EAAAzhC,IACA8hC,EAAA9hC,KAAA9C,KAAA6nB,MAAAlkB,EAAAb,IAAA4C,OAAA9D,EAAAiW,YAAAka,iBACA6S,EAAA9hC,KAAA9C,KAAA6nB,MAAAkc,EAAAjhC,IAAA4C,OAAA9D,EAAAiW,YAAAma,gBAEA4S,EAAA9hC,IAAA9C,KAAA6nB,MAAA+c,EAAA9hC,KAAA,GAAA6/B,EAAAiC,GAAAJ,EAAA1hC,OACA8hC,EAAA9hC,IAAA9C,KAAA6nB,MAAA+c,EAAA9hC,KAAA,EAAAwhC,EAAAxhC,IAAA2hC,EAAA3hC,MACA8hC,EAAA9hC,KAAA9C,KAAA6nB,MAAA6c,EAAA5hC,IAAAkhC,EAAAlhC,KACAogC,EAAA0B,GAIA,IAAAhjC,EAAA8V,YAAA,GAAA9V,EAAA8V,WAAAhX,GAAA,CACA,GAAAmkC,GAAA5B,EAAA,IACA6B,EAAA7B,EAAA,KACA8B,EAAA9B,EAAA,MAGA+B,EAAA/B,EAAA,OAEAgC,EAAAhC,EAAA,EACAgC,GAAAniC,KAAA+hC,EAAA/hC,IACAmiC,EAAAniC,KAAA9C,KAAA6nB,MAAAmc,EAAAlhC,IAAA4C,OAAA9D,EAAAiW,YAAAoa,qBAEAgT,EAAAniC,IAAA9C,KAAA6nB,MAAAod,EAAAniC,KAAA,GAAA6/B,EAAAsC,GAAAH,EAAAhiC,OACAmiC,EAAAniC,IAAAmiC,EAAAniC,KAAA,EAAAwhC,EAAAxhC,IAAAiiC,EAAAjiC,KACAmiC,EAAAniC,KAAA9C,KAAA6nB,MAAAmd,EAAAliC,IAAAa,EAAAb,KACAogC,EAAA+B,EAEA,IAAAC,GAAAjC,EAAA,EACAiC,GAAApiC,KAAA+hC,EAAA/hC,IACAoiC,EAAApiC,KAAAkhC,EAAAlhC,IAAA4C,OAAA9D,EAAAiW,YAAAoa,oBAEAiT,EAAApiC,IAAA9C,KAAA6nB,MAAAqd,EAAApiC,KAAA,GAAA6/B,EAAAuC,GAAAJ,EAAAhiC,OACAoiC,EAAApiC,IAAAoiC,EAAApiC,KAAA,EAAAwhC,EAAAxhC,IAAAiiC,EAAAjiC,KACAoiC,EAAApiC,KAAA9C,KAAA6nB,MAAAmd,EAAAliC,IAAAa,EAAAb,KACAogC,EAAAgC,GAKA,GAAAC,GAAAlC,EAAA,GACAkC,GAAAriC,KAAAihC,EAAAjhC,IAAA4C,OAAA9D,EAAAiW,YAAAua,UACA4Q,EAAAmC,EAEA,IAAAC,GAAAnC,EAAA,KACAkC,GAAAriC,KAAAsiC,EAAAtiC,IACAogC,EAAAiC,EACA,IAAAE,GAAApC,EAAA,MAEAI,EAAArjC,KAAAukB,IAAA,IAAA4gB,EAAAriC,IAAA4C,OAAA9D,EAAA+V,cAAAga,WAAA0T,EAAAviC,IACAM,GAAA/E,MAAAqC,GAAA,KAAAoC,IAAAugC,GAGA,IAAAiC,GAAArC,EAAA,IACAqC,GAAAxiC,MAAAa,EAAAb,IAAAkhC,EAAAlhC,KAAA4C,OAAA9D,EAAAiW,YAAAob,sCACA+P,EAAAsC,GACApC,EAAAoC,EAEA,IAAAhC,GAAAgC,EAAAxiC,IAAAlB,EAAA+V,cAAAka,eACAqR,IAAAxiC,GAAA,KAAAoC,IAAAwgC,EAAA,GAGA,IAAAiC,GAAAtC,EAAA,GACAC,GAAAqC,EACA,IAAAC,GAAA9/B,OAAA9D,EAAA+V,cAAAia,cAEA2R,EAAAN,EAAA,KACAM,GAAAzgC,IAAA9C,KAAAukB,IAAAvkB,KAAA8C,IAAA,IAAA4C,OAAA6/B,EAAAziC,KAAA0iC,EAAAxlC,KAAAylC,IAAA//B,OAAA6/B,EAAAziC,KAAA0iC,EAAA,MAAA,GACAtC,EAAAK,EAGA,IAAAmC,GAAAzC,EAAA,GACAC,GAAAwC,EAEA,IAAAC,GAAA1C,EAAA,GACAC,GAAAyC,EAEA,IAAAC,GAAA3C,EAAA,GACAC,GAAA0C,EAEA,IAAAC,GAAA5C,EAAA,GACAC,GAAA2C,GAmDAjkC,EAAA8V,YAAA,GAAA9V,EAAA8V,WAAAhX,IAAA,GAAAkB,EAAA8V,WAAAhX,IACAyiC,EAAA,KAAAwB,EAAA7hC,IAAA8hC,EAAA9hC,KAGAlB,EAAA8V,YAAA,GAAA9V,EAAA8V,WAAAhX,IAAA,GAAAkB,EAAA8V,WAAAhX,IACAyiC,EAAA,KAAA8B,EAAAniC,IAAAoiC,EAAApiC,KAGAlB,EAAA8V,YAAA,GAAA9V,EAAA8V,WAAAhX,IACAyiC,EAAA,KAAA8B,EAAAniC,IAAA6hC,EAAA7hC,IAAAoiC,EAAApiC,IAAA8hC,EAAA9hC,IAIA,IAAAgjC,GAAA7C,EAAA,KACA6C,GAAAhjC,IAAAohC,EAAAphC,KAAA,EAAAqhC,EAAArhC,IAEA,IAAAijC,GAAA9C,EAAA,KACA8C,GAAAjjC,IAAAohC,EAAAphC,KAAA,EAAAuhC,EAAAvhC,IAEA,IAAAkjC,GAAA/C,EAAA,KAIA,OAHA+C,GAAAljC,KAAAgjC,EAAAhjC,IAAAijC,EAAAjjC,KAAA,EACAogC,EAAA8C,GAEA5iC,GAGAnB,cAAA,SAAAL,GAEA,MACAA,GAAAkW,WACAlW,EAAAkW,UAAAqZ,SAAA,IAGAzwB,GAAA,EAAAoC,IAAAlB,EAAAkW,UAAAqZ,WACAzwB,GAAA,EAAAoC,IAAAlB,EAAAkW,UAAAsZ,UACA1wB,GAAA,EAAAoC,IAAAlB,EAAAkW,UAAAuZ,eACA3wB,GAAA,EAAAoC,IAAAlB,EAAAkW,UAAAwZ,cAQA8F,cAAA,SAAA31B,EAAA6U,EAAAxM,GAEA,GAAAitB,GAAA,IAQA,IAPA58B,QAAAkD,QAAAyM,EAAA,SAAAxM,EAAA0F,GACA,GAAA1F,EAAA05B,YAAAv1B,EAAAf,IAAApD,EAAA25B,YAAAx1B,EAAA8E,eAEA,YADAwwB,EAAAz5B,MAKAy5B,EACA,MAAA,KAOA,KAJA,GAAA/zB,GAAA,EACAijC,KACAC,GAAA,EAEAA,GAAA,CACA,GAAA72B,GAAA,cAAArM,EACAmjC,EAAA,mBAAAnjC,CACA,IAAAsT,GAAAjH,IAAAiH,IAAA6vB,IAAApP,IACA,GAAAzgB,EAAAjH,GAAA,EAAA,CAEA,GAAAklB,GAAAwC,EAAAoP,GAGAC,EAAA9vB,EAAAjH,GACAg3B,EAAA1mC,EAAA2mC,mBAAAF,EACA,IAAAC,GAAAA,EAAAE,QAEA,IAAA,GADAC,GAAAH,EAAAE,QAAAhS,GACArxB,EAAA,EAAAA,EAAAsjC,EAAA/oC,SAAAyF,EACA+iC,EAAA5nC,KAAAmoC,EAAAtjC,QAGA,CACA,GAAA3B,EAQA,IANAA,EADA8kC,GAAAA,EAAAI,MACAJ,EAAAI,MAGA,IAAAL,EAGA7R,EAAA,EACA0R,EAAA5nC,MAAAqC,GAAAa,EAAAmlC,OAAAN,EAAAtjC,IAAAyxB,QAGA,IAAAA,EAAArO,WAAA9pB,QAAA,KAAA,EAAA,CACA,GAAAoqC,GAAAjS,EAAAvwB,MAAA,IACAwiC,GAAA/oC,OAAA,GAAA+oC,EAAA,GAAA,GACAP,EAAA5nC,MAAAqC,GAAAa,EAAAmlC,OAAAN,EAAAtjC,IAAA0jC,EAAA,YAQAN,IAAA,CAGAljC,KAGA,MAAAijC,IAGAhsB,cAAA,SAAA9C,GACA,GAAAxW,KAYA,OAXAA,GAAAqB,WAAA3C,KAAA4C,cAAAkV,GACAxW,EAAAuB,cAAA7C,KAAA8C,iBAAAgV,EAAArV,OACAnB,EAAAyB,SAAA/C,KAAAgD,YAAA8U,EAAArV,OACAnB,EAAA2B,SAAA3B,EAAAqB,WAAAO,OAAA5B,EAAAuB,eAAAK,OAAA5B,EAAAyB,UACA,MAAA+U,EAAA3U,WAAA2U,EAAA3U,UAAA/E,OAAA,IACAkD,EAAA6B,UAAA2U,EAAA3U,UACA7B,EAAA2B,SAAA3B,EAAA2B,SAAAC,OAAA4U,EAAA3U,YAEA7B,EAAA2B,SAAA3C,EAAA8C,WAAA9B,EAAA2B,UAEA3B,EAAAgmC,gBAAAtnC,KAAAwC,mBAAAsV,EAAAxW,EAAA2B,UACA3B,IA9aAxG,QAAAC,OAAA,SAAA6xB,QAAA,cAAA,cAAArsB,OCHA,WACA,YAGA,SAAArE,GAAAmX,EAAAwgB,GAEA,GAAA0T,GAAA,GAAAC,gBACAC,EAAA,kBAEAC,KACArT,IAEA,QAEAx0B,MAAA,WACA0nC,EAAA,GAAAC,gBACAD,EAAAI,UAAA,IACA3nC,KAAAo0B,QAAA,EACAp0B,KAAA/C,gBAAA,EACAyqC,KACArT,MAGAD,QAAA,EACAn3B,gBAAA,EAEAsC,SAAA,KAEA1C,KAAA,SAAAgC,EAAAutB,GAEA,GAAApsB,KAAA9C,WACAkvB,QAOA,IAJAiI,KACAA,EAAAr1B,KAAAH,GACA6oC,EAAA1oC,KAAAotB,IAEApsB,KAAA/C,eAAA,CACA+C,KAAA/C,gBAAA,CACA,IAAAwV,GAAAzS,KAEAkI,EAAA,IACA,OAAAlI,KAAAT,UAAA,IAAAS,KAAAT,WACA2I,EAAAlI,KAAAT,SAAA,IAAAkoC,EAEAv/B,GAAArM,aAAA6B,QAAA,oBACAiC,eAAAC,WAAA,aACA/D,aAAA+D,WAAA,oBAIAi0B,EAAAU,WAAA,0BACAgT,EAAAK,gBACA1/B,EACA,SAAApJ,GACAhE,QAAAkD,QAAAq2B,EAAA,SAAAp2B,EAAAC,GAAAD,EAAAa,MAEA,WACA2T,EAAA2hB,QAAA,EACAt5B,QAAAkD,QAAA0pC,EAAA,SAAAzpC,EAAAC,GAAAD,MACAypC,KACA7T,EAAAU,WAAA,2BAEA,SAAAz1B,GACAhE,QAAAkD,QAAAq2B,EAAA,SAAAp2B,EAAAC,GAAAD,EAAAa,KACA+0B,EAAAU,WAAA,0BACA9hB,EAAAxV,gBAAA,EACAwV,EAAA2hB,QAAA,MAOAl3B,SAAA,WACA,IAAA8C,KAAAo0B,OAAA,CACA,GAAAlsB,GAAAlI,KAAAT,SAAA,IAAAkoC,CAEAv/B,IAAArM,aAAA6B,QAAA,oBACAiC,eAAAC,WAAA,aACA/D,aAAA+D,WAAA,mBAGAI,KAAAo0B,OAAAmT,EAAAM,kBACA7nC,KAAAo0B,SACAp0B,KAAA/C,gBAAA,GAGA,MAAA+C,MAAAo0B,QAGAx1B,UAAA,SAAAyC,EAAAymC,GACA,GAAA9nC,KAAAo0B,OAAA,CAEA,GAAA73B,EACA,KAAA8E,EACA,MAAA,EAKA,IAFA9E,EAAAgrC,EAAA3oC,UAAAyC,GAEA,gBAAA9E,GACA,MAAA,IAAAA,CAIA,IAAAurC,EAEA,IAAA,GADAC,GAAAD,EAAAnjC,MAAA,KACAyE,EAAA,EAAAA,EAAA2+B,EAAA3pC,SAAAgL,EAAA,CACA,GAAAM,GAAAq+B,EAAA3+B,EACA,IAAAM,EAAA3M,QAAA,OACA2M,EAAAq+B,EAAA3+B,GAAA3D,QAAA,SAAA,IACAiE,EAAA69B,EAAA3oC,UAAA8K,IAGAnN,EAAAA,EAAAkJ,QAAA,IAAA2D,EAAA,IAAAM,GAIA,MAAAnN,GAGA,MAAA,IAAA8E,IAxHAvG,QAAAC,OAAA,SAAA6xB,QAAA,gBAAA,eAAA,aAAA1wB,OCHA,WACA,YAGA,SAAAoE,KAKA,QAAA0nC,GAAAjmC,GACA,MAAApB,MAAA6nB,MAAAzmB,EAAA0B,KAEA,QAAAwkC,GAAAlmC,GACA,GAAAmzB,GAAA7uB,OAAAtE,EAAA0B,IACA,OAAAyxB,GAAA,IACAA,EAEAA,EAAA,IACAv0B,KAAAC,MAAAs0B,EAAA,KAAA,GAAA,IAEAA,EAAA,IACAv0B,KAAAC,MAAAs0B,EAAA,KAAA,IAEAA,EAAA,IACAv0B,KAAAC,MAAAs0B,EAAA,KAAA,IAAA,IAGAv0B,KAAAC,MAAAs0B,EAAA,KAAA,IAGA,QAAAgT,GAAAnmC,GACA,MAAApB,MAAA6nB,MAAA,IAAAzmB,EAAA0B,KAAA,IAAA,IAGA,OACAnC,OACA6mC,GAAA9mC,GAAA,EAAA9E,KAAA,MAAA8uB,QAAA2c,EAAAI,KAAA,EAAA/jB,GAAA,GAAAqf,KAAA,KAAA7f,YAAA,GACAwkB,GAAAhnC,GAAA,EAAA9E,KAAA,MAAA8uB,QAAA2c,EAAAI,KAAA,EAAA/jB,GAAA,GAAAqf,KAAA,KAAA7f,YAAA,GACAykB,GAAAjnC,GAAA,EAAA9E,KAAA,MAAA8uB,QAAA2c,EAAAI,KAAA,EAAA/jB,GAAA,GAAAqf,KAAA,KAAA7f,YAAA,GACA0kB,GAAAlnC,GAAA,EAAA9E,KAAA,MAAA8uB,QAAA2c,EAAA9c,KAAA,EAAA7G,GAAA,GAAAqf,KAAA,KAAA7f,YAAA,GACA2kB,GAAAnnC,GAAA,EAAA9E,KAAA,OAAA8uB,QAAA2c,EAAA1c,YAAA,EAAA8c,KAAA,EAAA/jB,GAAA,GAAAR,YAAA,GACA4kB,GAAApnC,GAAA,EAAA9E,KAAA,UAAA8uB,QAAA2c,EAAA1+B,MAAA,EAAA+a,GAAA,IACAqkB,GAAArnC,GAAA,EAAA9E,KAAA,OAAA8uB,QAAA2c,EAAA1c,YAAA,EAAA8c,KAAA,EAAA/jB,GAAA,GAAAR,YAAA,GACA8kB,GAAAtnC,GAAA,EAAA9E,KAAA,UAAA8uB,QAAA2c,EAAA1+B,MAAA,EAAA+a,GAAA,IACAukB,GAAAvnC,GAAA,EAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA/c,KAAA,EAAA7G,GAAA,GAAAR,YAAA,GACAglB,GAAAxnC,GAAA,EAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA/c,KAAA,EAAA7G,GAAA,GAAAR,YAAA,GACAilB,IAAAznC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA5jB,GAAA,GAAA0kB,UAAA,GACAC,IAAA3nC,GAAA,GAAA9E,KAAA,cAAA8uB,QAAA4c,EAAA5jB,GAAA,GAAA0kB,UAAA,GACAE,IAAA5nC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA2c,EAAAI,KAAA,EAAA/jB,GAAA,GAAAR,YAAA,GACAqlB,IAAA7nC,GAAA,GAAA9E,KAAA,cAAA8uB,QAAA4c,EAAA5jB,GAAA,GAAA0kB,UAAA,GACAI,IAAA9nC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA5jB,GAAA,GAAA0kB,UAAA,GACAK,IAAA/nC,GAAA,GAAA9E,KAAA,cAAA8uB,QAAA4c,EAAA5jB,GAAA,GAAA0kB,UAAA,GACAM,IAAAhoC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAE,KAAA,EAAAvkB,YAAA,GACAylB,IAAAjoC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA6c,EAAAE,KAAA,EAAAvkB,YAAA,GACA0lB,IAAAloC,GAAA,GAAA9E,KAAA,SAAA8uB,QAAA6c,EAAAE,KAAA,EAAAvkB,YAAA,GACA2lB,IAAAnoC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAE,KAAA,EAAAvkB,YAAA,GACA4lB,IAAApoC,GAAA,GAAA9E,KAAA,WAAA8uB,QAAA6c,EAAAhd,KAAA,EAAArH,YAAA,GACA6lB,IAAAroC,GAAA,GAAA9E,KAAA,UAAA8uB,QAAA6c,EAAAhd,KAAA,EAAArH,YAAA,GACA8lB,IAAAtoC,GAAA,GAAA9E,KAAA,YAAA8uB,QAAA6c,EAAAhd,KAAA,EAAArH,YAAA,GACA+lB,IAAAvoC,GAAA,GAAA9E,KAAA,WAAA8uB,QAAA6c,EAAAhd,KAAA,EAAArH,YAAA,GACAgmB,IAAAxoC,GAAA,GAAA9E,KAAA,KAAA8uB,QAAA4c,EAAA/c,KAAA,EAAA7G,GAAA,GAAAqf,KAAA,KAAA7f,YAAA,GACAimB,IAAAzoC,GAAA,GAAA9E,KAAA,KAAA8uB,QAAA4c,EAAA/c,KAAA,EAAA7G,GAAA,GAAAqf,KAAA,MACAqG,IAAA1oC,GAAA,GAAA9E,KAAA,KAAA8uB,QAAA2c,EAAAI,KAAA,EAAAvkB,YAAA,GAIAmmB,IAAA3oC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA2c,EAAAI,KAAA,EAAA/jB,GAAA,IACA4lB,IAAA5oC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA2c,EAAAI,KAAA,EAAA/jB,GAAA,IAEA6lB,IAAA7oC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA6c,EAAAE,KAAA,GACA+B,IAAA9oC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA6c,EAAAE,KAAA,GACAgC,IAAA/oC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA6c,EAAAE,KAAA,GACAiC,IAAAhpC,GAAA,GAAA9E,KAAA,OAAA8uB,QAAA6c,EAAAhd,KAAA,GACAof,IAAAjpC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAA5c,YAAA,GAAA8c,KAAA,GACAmC,IAAAlpC,GAAA,GAAA9E,KAAA,WAAA8uB,QAAA6c,EAAA5+B,MAAA,GACAkhC,IAAAnpC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAA5c,YAAA,GAAA8c,KAAA,GACAqC,IAAAppC,GAAA,GAAA9E,KAAA,WAAA8uB,QAAA6c,EAAA5+B,MAAA,GACAohC,IAAArpC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAhd,KAAA,GACAyf,IAAAtpC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAhd,KAAA,GACA0f,IAAAvpC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAa,UAAA,EAAA7d,KAAA,GACA2f,IAAAxpC,GAAA,GAAA9E,KAAA,eAAA8uB,QAAA6c,EAAAa,UAAA,EAAA7d,KAAA,GACA4f,IAAAzpC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAE,KAAA,GACA2C,IAAA1pC,GAAA,GAAA9E,KAAA,eAAA8uB,QAAA6c,EAAAhd,KAAA,GACA8f,IAAA3pC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAa,UAAA,EAAA7d,KAAA,GACA+f,IAAA5pC,GAAA,GAAA9E,KAAA,eAAA8uB,QAAA6c,EAAAa,UAAA,EAAA7d,KAAA,GACAggB,IAAA7pC,GAAA,GAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAa,UAAA,EAAA7d,KAAA,GACAigB,IAAA9pC,GAAA,GAAA9E,KAAA,MAAA8uB,QAAA6c,EAAAhd,KAAA,GACAkgB,IAAA/pC,GAAA,GAAA9E,KAAA,MAAA8uB,QAAA6c,EAAAhd,KAAA,GACAmgB,IAAAhqC,GAAA,GAAA9E,KAAA,cAAA8uB,QAAA6c,EAAAhd,KAAA,GACAogB,IAAAjqC,GAAA,GAAA9E,KAAA,aAAA8uB,QAAA6c,EAAAa,UAAA,EAAA7d,KAAA,GAIAqgB,KAAAlqC,GAAA,IAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAa,UAAA,EAAAX,KAAA,GACAoD,KAAAnqC,GAAA,IAAA9E,KAAA,QAAA8uB,QAAA6c,EAAAa,UAAA,EAAAX,KAAA,GAEAqD,KAAApqC,GAAA,IAAA9E,KAAA,WAAA8uB,QAAA2c,EAAAI,KAAA,EAAA/jB,GAAA,KACAqnB,KAAArqC,GAAA,IAAA9E,KAAA,YAAA8uB,QAAA6c,EAAAa,UAAA,EAAAX,KAAA,GACAuD,KAAAtqC,GAAA,IAAA9E,KAAA,UAAA8uB,QAAA4c,EAAAc,UAAA,EAAAX,KAAA,GACAwD,KAAAvqC,GAAA,IAAA9E,KAAA,MAAA8uB,QAAA2c,EAAAe,UAAA,EAAAz/B,MAAA,EAAA4hB,KAAA,GAGA2gB,MAAAxqC,GAAA,KAAA9E,KAAA,MAAA8uB,QAAA4c,EAAA1mC,gBAAA,EAAAyC,QAAA,UAAA+kC,UAAA,EAAAz/B,MAAA,GACAwiC,MAAAzqC,GAAA,KAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA1mC,gBAAA,EAAAyC,QAAA,UAAA+kC,UAAA,EAAAz/B,MAAA,GACAyiC,MAAA1qC,GAAA,KAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA1mC,gBAAA,EAAAyC,QAAA,UAAA+kC,UAAA,EAAAz/B,MAAA,GAEA0iC,MAAA3qC,GAAA,KAAA9E,KAAA,OAAA8uB,QAAA6c,EAAAa,UAAA,GACAkD,MAAA5qC,GAAA,KAAA9E,KAAA,OAAA8uB,QAAA6c,EAAAa,UAAA,GAEAmD,MAAA7qC,GAAA,KAAA9E,KAAA,cAAA8uB,QAAA6c,EAAAa,UAAA,GACAoD,MAAA9qC,GAAA,KAAA9E,KAAA,KAAA8uB,QAAA6c,EAAAa,UAAA,GACAqD,MAAA/qC,GAAA,KAAA9E,KAAA,WAAA8uB,QAAA6c,EAAAa,UAAA,GAEAsD,MAAAhrC,GAAA,KAAA9E,KAAA,MAAA8uB,QAAA4c,EAAA1mC,gBAAA,EAAAyC,QAAA,YAAA+kC,UAAA,EAAAz/B,MAAA,GACAgjC,MAAAjrC,GAAA,KAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA1mC,gBAAA,EAAAyC,QAAA,YAAA+kC,UAAA,EAAAz/B,MAAA,GACAijC,MAAAlrC,GAAA,KAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA1mC,gBAAA,EAAAyC,QAAA,YAAA+kC,UAAA,EAAAz/B,MAAA,GAEAkjC,MAAAnrC,GAAA,KAAA9E,KAAA,YAAA8uB,QAAA4c,EAAAc,UAAA,GACA0D,MAAAprC,GAAA,KAAA9E,KAAA,YAAA8uB,QAAA4c,EAAAc,UAAA,GAEA2D,KAAArrC,GAAA,IAAA9E,KAAA,SAAA8uB,QAAA6c,GACAyE,MAAAtrC,GAAA,KAAA9E,KAAA,UAAA8uB,QAAA6c,GACA0E,MAAAvrC,GAAA,KAAA9E,KAAA,UAAA8uB,QAAA6c,GAEA2E,MAAAxrC,GAAA,KAAA9E,KAAA,OAAA8uB,QAAA4c,EAAA1mC,gBAAA,EAAAwnC,UAAA,EAAAz/B,MAAA,GAEAwjC,MAAAzrC,GAAA,KAAA9E,KAAA,SAAA8uB,QAAA4c,GACA8E,MAAA1rC,GAAA,KAAA9E,KAAA,SAAA8uB,QAAA6c,GACA8E,MAAA3rC,GAAA,KAAA9E,KAAA,SAAA8uB,QAAA6c,GACA+E,MAAA5rC,GAAA,KAAA9E,KAAA,SAAA8uB,QAAA6c,GACAgF,MAAA7rC,GAAA,KAAA9E,KAAA,SAAA8uB,QAAA6c,GACAiF,MAAA9rC,GAAA,KAAA9E,KAAA;AAAA8uB,QAAA6c,GACAkF,MAAA/rC,GAAA,KAAA9E,KAAA,QAAA8uB,QAAA6c,GAGAmF,OAAAhsC,GAAA,MAAA9E,KAAA,YAAA8uB,QAAA6c,EAAAa,UAAA,GACAuE,OAAAjsC,GAAA,MAAA9E,KAAA,YAAA8uB,QAAA6c,EAAAa,UAAA,IAKAh2B,WACAo1B,GAAA9mC,GAAA,EAAA9E,KAAA,UACA8rC,GAAAhnC,GAAA,EAAA9E,KAAA,SACA+rC,GAAAjnC,GAAA,EAAA9E,KAAA,QACAgsC,GAAAlnC,GAAA,EAAA9E,KAAA,QACAisC,GAAAnnC,GAAA,EAAA9E,KAAA,UACAksC,GAAApnC,GAAA,EAAA9E,KAAA,cAGAiV,WACA+7B,MAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,MAAA,SAAAC,MAAA,SACAC,MAAA,OAAAC,MAAA,OAAAC,MAAA,OAAAC,MAAA,OAAAC,MAAA,OAAAC,MAAA,OAAAC,MAAA,OAAAC,MAAA,OAAAC,MAAA,OACAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,QAAAC,KAAA,QACAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SACAC,MAAA,eACAC,MAAA,YAAAC,MAAA,YAAAC,MAAA,YAAAC,MAAA,YAAAC,MAAA,YAAAC,MAAA,YAAAC,MAAA,YAAAC,MAAA,YAAAC,MAAA,YACA1G,GAAA,aAAAC,GAAA,aAAAC,GAAA,aAAAyG,GAAA,aAAAxG,GAAA,aAAAC,GAAA,aAAAwG,GAAA,aAAAC,GAAA,aAAAxG,GAAA,aACAyG,MAAA,eACAC,MAAA,cAAAC,MAAA,cAAAC,MAAA,cAAAC,MAAA,cAAAC,MAAA,cAAAC,MAAA,cAAAC,MAAA,cAAAC,MAAA,cAAAC,MAAA,cACAC,MAAA,UACAC,MAAA,QACAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QAAAC,MAAA,QACAC,MAAA,kBAAAC,MAAA,kBAAAC,MAAA,kBAAAC,MAAA,kBAAAC,MAAA,kBAAAC,MAAA,kBAAAC,MAAA,kBAAAC,MAAA,kBACAC,MAAA,kBAAAC,MAAA,kBACAC,MAAA,QACAC,MAAA,QAGAruB,aACAgkB,GAAA,EACAE,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,GAGAgK,WACAtK,EAAA,UACAE,EAAA,YACAI,EAAA,SACAG,EAAA,QACA8J,GAAA,SACAC,GAAA,YACAC,IAAA,WACAC,IAAA,QAGA3uC,UACAikC,GAAA9mC,GAAA,EAAA9E,KAAA,WACA8rC,GAAAhnC,GAAA,EAAA9E,KAAA,OAAA8nC,QAAA,IACAiE,GAAAjnC,GAAA,EAAA9E,KAAA,MAAA8nC,QAAA,IACAkE,GAAAlnC,GAAA,EAAA9E,KAAA,QAAA8nC,QAAA,IACAmE,GAAAnnC,GAAA,EAAA9E,KAAA,OAAA8nC,QAAA,KAGAnkB,aACAioB,GAAA9mC,GAAA,EAAA9E,KAAA,iBACA8rC,GAAAhnC,GAAA,EAAA9E,KAAA,YACA+rC,GAAAjnC,GAAA,EAAA9E,KAAA,WACAgsC,GAAAlnC,GAAA,EAAA9E,KAAA,kBAIA0qC,oBACAqB,GAAAjnC,GAAA,EAAA9E,KAAA,yBAAA6qC,MAAA,MACA8B,IAAA7nC,GAAA,GAAA9E,KAAA,KAAA6qC,MAAA,IACAyC,IAAAxoC,GAAA,GAAA9E,KAAA,gBACAwtC,IAAA1oC,GAAA,GAAA9E,KAAA,qBAAA6qC,MAAA,MACA4C,IAAA3oC,GAAA,GAAA9E,KAAA,SAAA6qC,MAAA,IACA6C,IAAA5oC,GAAA,GAAA9E,KAAA,QAAA6qC,MAAA,IACA0L,IAAAzxC,GAAA,GAAA9E,KAAA,UAAA6qC,MAAA,IACA2L,IAAA1xC,GAAA,GAAA9E,KAAA,SAAA6qC,MAAA,IACA4L,IAAA3xC,GAAA,GAAA9E,KAAA,WAAA6qC,MAAA,IACA6L,IAAA5xC,GAAA,GAAA9E,KAAA,UAAA6qC,MAAA,IACAsL,IAAArxC,GAAA,GAAA9E,KAAA,YAAA6qC,MAAA,IACA8L,IAAA7xC,GAAA,GAAA9E,KAAA,WAAA6qC,MAAA,IACAsD,IAAArpC,GAAA,GAAA9E,KAAA,MAAA6qC,MAAA,MACAuD,IAAAtpC,GAAA,GAAA9E,KAAA,MAAA6qC,MAAA,MACA6D,IAAA5pC,GAAA,GAAA9E,KAAA,SACA6uC,IAAA/pC,GAAA,GAAA9E,KAAA,iBAAA6qC,MAAA,IACA+L,IAAA9xC,GAAA,GAAA9E,KAAA,OAAA6qC,MAAA,MACAgM,IAAA/xC,GAAA,GAAA9E,KAAA,OAAA6qC,MAAA,MACAiM,IAAAhyC,GAAA,GAAA9E,KAAA,OAAA6qC,MAAA,MACAuL,IAAAtxC,GAAA,GAAA9E,KAAA,OAAA6qC,MAAA,MAGAkM,KAAAjyC,GAAA,IAAA9E,KAAA,oBAAA6qC,MAAA,KACAmM,KAAAlyC,GAAA,IAAA9E,KAAA,mBAAA6qC,MAAA,MACAoM,KAAAnyC,GAAA,IAAA9E,KAAA,YAAA6qC,MAAA,OACAqM,KAAApyC,GAAA,IAAA9E,KAAA,YAAA6qC,MAAA,OACAsM,KACAryC,GAAA,IACA9E,KAAA,WACA2qC,QAAA,SAAAhS,GACA,GAAAA,EAAAn4B,QAAA,KAAA,EAAA,CACA,GAAAoqC,GAAAjS,EAAAvwB,MAAA,IACA,SACAtD,GAAA,GAAAgmC,OAAA,IAAA5jC,IAAA4C,OAAA8gC,EAAA,IAAA,MACA9lC,GAAA,KAAAgmC,OAAA,IAAA5jC,IAAA4C,OAAA8gC,EAAA,MAIA,QAAA9lC,GAAA,GAAAgmC,OAAA,IAAA5jC,IAAA4C,OAAA6uB,GAAA,SAMAlS,cAEA3hB,GAAA,EAAAmD,SAAA,SAAAjI,KAAA,iBAAA+E,QAAAD,GAAA,GAAAoC,cACApC,GAAA,EAAAmD,SAAA,SAAAjI,KAAA,aAAA+E,QAAAD,GAAA,KAAAoC,IAAA,QAGA2D,SAAA,SAAA6P,GAEA,GAAA08B,IAAA,EACAC,GAAA,EACAC,GAAA,EACAhe,EAAA,YACAA,KAAA5e,GACA08B,GAAA,GAGA9d,EAAA,cACAA,IAAA5e,KACA28B,GAAA,GAMA,KAFA,GAAAE,GAAA,EACAxvB,OACA,CACAwvB,GAEA,IAAAC,GAAA,QAAAD,CACA,MAAAC,IAAA98B,IACA,KAGA,IAAA+8B,GAAA/8B,EAAA88B,EACA,IAAAC,MACA,KAGA,IAAA,KAAAA,OAGA,CAEA,GAEAne,GAFAoe,GAAA5yC,GAAA2yC,EAiBA,IAbAL,GACA9d,EAAA,QAAAie,EAAA,OACAG,EAAAxwC,IAAAwT,EAAA4e,IAEA+d,GACA/d,EAAA,QAAAie,EAAA,QACAG,EAAAxwC,IAAAwT,EAAA4e,KAGAA,EAAA,aAAAie,EACAG,EAAAxwC,IAAA4C,OAAA4Q,EAAA4e,KAGAoe,EAAAxwC,IAAA,GAAAwwC,EAAAxwC,IAAA,EAAA,CACA,GAAAowC,EAEA,GADAhe,EAAA,aAAAie,EACAje,IAAA5e,GAAA,CACA,GAAA,GAAAA,EAAA4e,GACA,KAEAoe,GAAA7oB,WAAAnU,EAAA4e,OAGAge,IAAA,CAIAvvB,GAAAtlB,KAAAi1C,KAKA,MAAA3vB,IAGA4vB,UAAA,SAAAnyC,EAAAV,GACAU,EAAAV,GAAAgF,OAAAhF,IAGA+B,WAAA,SAAA+wC,EAAAC,GAIA,QAAAC,GAAAp2C,GAEA,GAAA0N,GAAAtF,OAAApI,EAAAwF,IACAozB,GAAAv1B,MAAArD,EAAAoD,KAAA,MAAAw1B,GAAAv1B,MAAArD,EAAAoD,MACAsK,EAAAhL,KAAA6nB,MAAA7c,IAGA1N,EAAAoD,KAAA2E,GACAA,EAAA/H,EAAAoD,KAAAsK,EAGA3F,EAAA/H,EAAAoD,IAAAsK,EAdA,GAAA3F,MAEA6wB,EAAA72B,IAgBAlF,SAAAkD,QAAAm2C,EAAA,SAAAl2C,EAAAC,GACAD,GACAo2C,EAAAp2C,KAIAm2C,GACAt5C,QAAAkD,QAAAo2C,EAAA,SAAAn2C,EAAAC,GACAD,GACAo2C,EAAAp2C,IAKA,IAAAsF,KAEA,KAAA,GAAArF,KAAA8H,GAAA,CACA,GAAAjE,IAAA0B,IAAAuC,EAAA9H,GAAAmD,GAAAgF,OAAAnI,GACAqF,GAAAvE,KAAA+C,GAGA,MAAAwB,KApXAzI,QAAAC,OAAA,SAAA6xB,QAAA,eAAAtsB","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items/', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/build/:groupName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:groupName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      reloadOnSearch: false,\n    }).\n    \n    when('/search/:itemType?', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    \n    when('/item/:region?/:i*', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/profile/:uid', {\n      templateUrl: 'ui/online/profile.html',\n      controller: 'ProfileCtrl as ctrl',\n    }).\n    \n    when('/published/:uid/:buildName*', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/build-search/:jobId?', {\n      templateUrl: 'ui/online/build-search.html',\n      controller: 'BuildSearchCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n})();","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory','saveHelper',\n  function($scope,$location,translations,region,itemCategory,saveHelper) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n    \n    var buildAction = {path: 'build', name:'build', icon: 'wrench'};\n    \n    var withBuildMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      buildAction,\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.fireAction = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          $location.path('/' + action.path + '/' + cat);\n        }\n        else {\n          $location.path('/' + action.path);\n        }\n      }\n      else {\n          $location.path('/' + action.path);\n      }\n    }\n      \n    $scope.getActions = function() {\n      // console.log('getting actions');\n      var menu = null;\n      \n      var currentBuild = saveHelper.getCurrentBuild();\n      if(currentBuild) {\n        var savedItems = saveHelper.getSavedItems();\n        if(!(currentBuild in savedItems)) {\n          currentBuild = null;\n        }\n      }\n\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(currentBuild && currentBuild != 'null') {\n        menu = withBuildMenu;\n        buildAction.path = 'build/' + currentBuild;\n        buildAction.name = currentBuild;\n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          if(value.path != 'builds' || $location.path() == '/builds') {\n            value.extraCss = 'active';\n          }\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory','$scope',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory,$scope) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    vm.addAffectAmount = null;\n    vm.replaceAffectAmount = {};\n\n    vm.groupItems = null;\n    vm.groupCalcStats = null\n  }\n\n  $scope.$watch('editCtrl.item', function() {\n    // console.log('item changed');\n    vm.clearGroup();\n  });\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    // console.log('add affect: ', this.addAffectAmount[stat], this.item);\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    // console.log('initialising add affects ');\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = [];\n    if(group.items) {\n      newItems = group.items.concat([vm.item]);\n    }\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues','$scope',\nfunction(hCodeValues,$scope) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n\n  this.statMap = {};\n  \n  // console.log(vm.item.stats);\n  _.forEach(vm.item.stats, function(stat) {\n    // console.log('got stat', stat.id);\n    vm.statMap[stat.id] = stat.max;\n  });\n  \n  for(var statId in hCodeValues.stats) {\n    $scope.$watch('editCtrl.statMap[' + statId + ']', function(newValue, oldValue) { \n\n      if(newValue != oldValue) {\n        // console.log(statId);\n        // console.log('watch got stat value', newValue);\n\n        var anyChange = false;\n        var newStats = [];\n        for(var statId in vm.statMap) {\n\n          if(!vm.statMap[statId] || !Number(vm.statMap[statId])) {\n            _.each(vm.item.stats, function(stat) { \n              if(stat.id == statId) {\n                anyChange = true;\n              }\n            });\n          }\n          else {\n            newStats.push({\n              id: Number(statId),\n              max: Number(vm.statMap[statId])\n            });\n\n            var found = false;\n            _.each(vm.item.stats, function(stat) {\n              if(stat.id == statId) {\n                found = true;\n                // console.log('comparing', stat.max, vm.statMap[statId]);\n                if(!(statId in vm.statMap) || stat.max != vm.statMap[statId]) {\n                  anyChange = true;\n                }\n              } \n            });\n\n            if(!found) {\n              anyChange = true;\n            }\n          }\n        }\n\n        if(anyChange) {\n          // console.log('GOT CHANGES!', newStats);\n          vm.item.stats = newStats;\n          vm.onChange();\n        }\n      }\n    });\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    //console.log('init contents');\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        vm.getPouchItems(d.TypeParam1);\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType) {\n    for(var f=0;f<pouchFileNames.length;++f) {\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\n    }\n  }\n  \n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            // console.log('adding item ' + pouchItem);\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\n              // console.log('found item ' + basicItem.name);\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: basicItem\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n      \n      //console.log('box: ' + boxType);\n\n      var charmData = dntData.getData(charmFiles[i]);\n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  var transferItemsFileName = 'enchanttransferitemtable.lzjson';\n  \n  var files = [transferFileName,allItemFileName,transferItemsFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    vm.matchingTransfers = [];\n    \n    var transferItem = dntData.find(transferItemsFileName, 'ItemID', vm.item.id);\n    if(transferItem && transferItem.length > 0) {\n      var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n      \n      for(var i=0;i<transfers.length;++i) {\n        var t = transfers[i];\n        if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n          \n          var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n          var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n          \n          vm.matchingTransfers.push({\n            level: t.ResultLevel,\n            enchantmentNum: t.ResultEnchantLevel,\n            gold: t.NeedCoin/100/100,\n            rank: hCodeValues.rankNames[t.ResultRank],\n            numItem1: t.NeedItemCount1,\n            item1: itemFactory.createBasicItem(item1s[0]),\n            numItem2: t.NeedItemCount2,\n            item2: itemFactory.createBasicItem(item2s[0]),\n          });\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ItemCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory','$timeout',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory,$timeout) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  // console.log('search string: ', $routeParams.i);\n  $scope.item = exportLinkHelper.decodeItem($routeParams.i);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    // console.log('changes');\n    if($scope.item.itemSource != 'custom') {\n      $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\n    }\n    else {\n      setFullStats();\n      $scope.item = angular.copy($scope.item);\n    }\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    $scope.preInitItem = $scope.item;\n    $scope.item = null;\n  \n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.preInitItem), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.preInitItem);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    // full stats are cleared when publishing builds\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","(function () {\n'use strict';\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\n\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.maxDisplay = 15;\n  vm.totalNumResults = 0;\n  \n  jobs.init(null, function() {\n    if($routeParams.jobId) {\n      vm.job = jobs.getById($routeParams.jobId);\n      getClassBuilds();\n    } \n  })\n  \n  this.setJob = function() {\n    $timeout(function() {\n      $location.path('/build-search/' + vm.job.id);\n    });\n  }\n  \n  this.showMoreResults = function(extra) {\n    vm.maxDisplay = vm.totalNumResults + extra;\n    vm.totalNumResults = 0;\n  }\n  \n  vm.allResults = null;\n  vm.getFilteredBuilds = function() {\n    \n    // init\n    if(vm.allResults == null) {\n      vm.allResults = [];\n      for(var uid in vm.jobBuilds) {\n        for(var buildName in vm.jobBuilds[uid]) {\n          vm.allResults.push({\n            uid: uid,\n            name: buildName,\n            data: vm.jobBuilds[uid][buildName]\n          });\n        }\n      }\n    }\n    \n    var results = [];\n    for(var i=0;i<vm.allResults.length;++i) {\n      \n      var result = vm.allResults[i];\n      if(vm.filter && vm.filter.length > 0) {\n        var f = vm.filter.toUpperCase();\n        if(result.name.toUpperCase().indexOf(f) == -1) {\n          if(!result.data.guild ||\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\n\n            continue;\n          }\n        }\n      }\n      \n      results.push(result);\n\n      if(results.length >= vm.maxDisplay) {\n        break;\n      }\n    }\n    \n    vm.totalNumResults = results.length;\n    return results;\n  }\n  \n  function getClassBuilds() {\n    if(vm.job) {\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\n        if(builds) {\n          // console.log('got builds', builds);\n          vm.jobBuilds = builds;\n        }\n        else {\n          // console.log('no builds');\n          vm.jobBuilds = {};\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\n\nfunction profile($location, $routeParams, onlineService) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  \n  getSavedBuilds();\n  getProfile();\n  \n  function getSavedBuilds() {\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\n      if(builds) {\n        vm.storedBuilds = builds;\n      }\n      else {\n        vm.storedBuilds = {};\n      }\n    });\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.uid + '/' + buildName);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n    \n    $location.path('/build/' + newGroupName);\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\n\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.show = $routeParams.show;\n  \n  onlineService.login().then(function(user) {\n    getSavedBuilds();\n    getProfile();\n  \n    vm.builds = saveHelper.getSavedItems();\n  });\n  \n  function getSavedBuilds() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\n        if(builds) {\n          vm.storedBuilds = builds;\n        }\n        else {\n          vm.storedBuilds = {};\n        }\n      });\n    }\n  }\n  \n  function getProfile() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getProfile(user.uid).then(function(profile) {\n        if(profile) {\n          vm.profile = profile;\n        }\n        else {\n          vm.profile = {};\n        }\n      });\n    }\n  }\n  \n  this.saveProfile = function() {\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\n  }\n  \n  this.getUser = function() {\n    return onlineService.getUser();\n  }\n  \n  this.save = function(buildName, build) {\n    build.lastUpdate = (new Date()).getTime();\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\n    vm.publishBuild = null;\n  }\n  \n  this.startPublish = function(buildName) {\n    if(buildName in vm.storedBuilds) {\n      if(!vm.builds[buildName].region) {\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\n      }\n      \n      if(!vm.builds[buildName].about) {\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\n      }\n      \n      if(!vm.builds[buildName].guild) {\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\n      }\n    }\n    \n    if(!vm.builds[buildName].region) {\n      vm.builds[buildName].region = region.dntLocation.region;\n    }\n    \n    vm.publishBuild = buildName;\n  }\n  \n  function handleError(err) {\n    console.log(err);\n  }\n  \n  this.deleteAccount = function() {\n    onlineService.deleteAccount(vm.storedBuilds);\n  }\n  \n  this.openLocal = function(buildName) {\n    $location.path('/build/' + buildName);\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.getUser().uid + '/' + buildName);\n  }\n  \n  this.getBuildLimit = function() {\n    if(vm.profile && vm.profile.maxBuilds) {\n      return vm.profile.maxBuilds;\n    }\n    else {\n      return 15;\n    }\n  }\n  \n  this.getNumStoredBuilds = function() {\n    return _.size(vm.storedBuilds);\n  }\n  \n  this.getNumBuilds = function() {\n    return _.size(vm.builds);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  this.signOut = function() {\n    onlineService.signOut();\n  }\n  \n  vm.deleteLocal = function(buildName) {\n    vm.localToDelete = buildName;\n  }\n  \n  vm.getAllBuildNames = function() {\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\n    return _.uniq(allKeys.sort(), true);\n  }\n  \n  vm.reallyDeleteLocal = function(buildName) {\n    saveHelper.updatedSavedItems(buildName, []);\n    vm.localToDelete = null;\n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  vm.deleteServer = function(buildName) {\n    vm.serverToDelete = buildName;\n  }\n  \n  vm.reallyDeleteServer = function(buildName) {\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\n    vm.serverToDelete = null;\n  }\n  \n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\n\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  vm.buildName = $routeParams.buildName;\n  \n  getBuild();\n  getProfile();\n  \n  vm.copyLocally = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n      \n    $location.path('/build/' + newGroupName);\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  function getBuild() {\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\n      if(build) {\n        vm.build = build;\n        vm.stats = statHelper.getBuildStats(build);\n      }\n      else {\n        vm.build = {};\n      }\n    });\n  }\n}\n\n})();","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n      \n    $scope.region = region;\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/build/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$routeParams','$timeout','saveHelper',\n  function($window,$location,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('groupName' in $routeParams) {\n      if($routeParams.groupName != this.currentGroup) {\n        this.currentGroup = $routeParams.groupName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/build/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      // console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/build/' + buildName);\n    }\n    \n    this.publish = function() {\n      $location.url('/publish');\n    }\n    \n    this.search = function() {\n      $location.url('/build-search');\n    }\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    // console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/build/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\n    if(vm.category.name in itemsByCat) {\n      return itemsByCat[vm.category.name];\n    }\n    else {\n      return [];\n    }\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.onChange();\n  }\n  \n  this.removeItem = function(item) {\n    item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n\n    vm.build.items = newItemList;\n    vm.stats = statHelper.getBuildStats(vm.build);\n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.onChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange',\n      server: '=server'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('groupName' in $routeParams) {\n      this.groupName = $routeParams.groupName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function() {\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/build/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      // console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      // console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/build/' + newBuildName);\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimCustomItems', function() {\n  return {\n    scope: {},\n    bindToController: {\n    },\n    controller: ['$window','saveHelper','$location','hCodeValues','itemCategory','$timeout', customItemCtrl],\n    controllerAs: 'customItems',\n    templateUrl: 'ui/search/custom-items.html'\n  };\n});\n\nfunction customItemCtrl($window,saveHelper,$location,hCodeValues,itemCategory,$timeout) {\n  'use strict';\n\n  var vm = this;\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}\n\n})();","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  $scope.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\n  if(!$scope.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     $scope.itemCategory = itemCategory.byName(catName);\n     if($scope.itemCategory) {\n       // console.log('moving');\n       $location.path($scope.itemCategory.path);\n     }\n     return;\n  }\n  \n  $window.document.title = 'DN Gear Sim | ' + $scope.itemCategory.name.toUpperCase();\n  \n  $scope.job = {id: -1, name: ''};\n  $scope.jobs = [$scope.job];\n  $scope.allJobs = [];\n  $scope.minLevel = 1;\n  $scope.maxLevel = 99;\n  $scope.maxDisplay = 10;\n  $scope.totalNumResults = 0;\n  $scope.grades = hCodeValues.rankNames;\n  $scope.stat = {id:-1, name:''};\n  $scope.stats = [$scope.stat];\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.searchable) {\n      $scope.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    $scope.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    $scope.maxLevel = maxLevel;\n  }\n  \n  $scope.nameSearch = localStorage.getItem('nameSearch');\n  if($scope.nameSearch == null) {\n    $scope.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    $scope.stat = hCodeValues.stats[savedSearchStatId];\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  $scope.navigate = function() {\n    var catName = localStorage.getItem('selectedItemCategory');\n    if(catName) {\n      $scope.itemCategory = itemCategory.byName(catName);\n      if($scope.itemCategory) {\n        // console.log('navigating to ', $scope.itemCategory.path);\n        $location.path($scope.itemCategory.path);\n      }\n    }\n  }\n\n  $scope.save = function() {\n    if(!$scope.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', $scope.minLevel);\n      localStorage.setItem('maxLevel', $scope.maxLevel);\n    }\n    \n    if(!$scope.itemCategory.hideJob) {\n      if($scope.job != null) {\n        localStorage.setItem('jobNumber', $scope.job.id);\n      }\n    }\n  \n    if($scope.stat != null) {\n      localStorage.setItem('searchStat', $scope.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', $scope.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init($scope.itemCategory.name, $timeout);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, $scope.jobs[0]);\n      $scope.jobs = newJobs;\n      $scope.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            $scope.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  $scope.rankChecked = hCodeValues.checkedRank;\n  \n  $scope.getResults = function() {\n    // console.log('getting items');\n    var allItems = itemCategory.getItems($scope.itemCategory.name);\n    if(allItems == null) {\n      // console.log('no items');\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n    // console.log('got ', allItems);\n    \n    $scope.save();\n    \n    var start = new Date().getTime();\n          \n    var pcStatId = -1;\n    if('pc' in $scope.stat) {\n      pcStatId = $scope.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<$scope.maxDisplay || $scope.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e != null) {\n        \n        if(!$scope.itemCategory.hideLevel) {\n          if(e.levelLimit < $scope.minLevel || e.levelLimit > $scope.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideRank) {\n          if(e.rank != null && !$scope.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideJob) {\n          if($scope.job != null && $scope.job.id > 0) {\n            if(!$scope.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != $scope.itemCategory.name) {\n          continue;\n        }\n        // console.log('name filter', $scope.nameSearch); \n        \n        if($scope.nameSearch != '') {\n          // console.log('filtering on name');\n          var nameSearches = $scope.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [$scope.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if($scope.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s]\n            if(stat.id == $scope.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if($scope.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, $scope.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    $scope.totalNumResults = newResults.length;\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    \n    return newResults;\n  };\n  \n  $scope.showMoreResults = function(extra) {\n    $scope.maxDisplay = $scope.totalNumResults + extra;\n    $scope.totalNumResults = 0;\n  }\n  \n}]);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimSkillSearch', function() {\n  return {\n    scope: {},\n    bindToController: {\n      job: '=job',\n      jobs: '=jobs',\n    },\n    controller: ['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues','itemCategory','$location', skillSearchCtrl],\n    controllerAs: 'skillSearch',\n    templateUrl: 'ui/search/skill-search.html'\n  };\n});\n\nfunction skillSearchCtrl($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues,itemCategory,$location) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.allJobs = [];\n  this.maxDisplay = 60;\n  this.currentResults = 0;\n  this.dntName = '';\n  this.skills = [];\n  this.loadedJobId = -1;\n\n  this.itemCategory = itemCategory.byName('skills');\n\n  this.nameSearch = localStorage.getItem('nameSearch');\n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n\n  var classFactories = [];\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  this.navigate = function() {\n    $timeout(function() {\n      if(vm.itemCategory) {\n        $location.path(vm.itemCategory.path);\n      }\n    });\n  }\n  \n  this.isLoading = function() {\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { $timeout(translationsInit); } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName != null) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() {setupSkills(baseJobNames, vm.job);} ) });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n        return;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  this.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  this.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    \n    if(vm.job != null) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills && (curDisplay<vm.maxDisplay);++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(nameSearches.length == 0) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n      curDisplay++;\n    }\n    vm.currentResults = Math.min(curDisplay, vm.maxDisplay);\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}\n\n})();","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    this.boxes = null;\n    this.boxeContents = [];\n    this.maxDisplay = 10;\n    this.currentResults = 0;\n\n    this.nameSearch = localStorage.getItem('itemNameSearch');\n    if(this.nameSearch == null) {\n      this.nameSearch = '';\n    }\n    \n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    this.initBoxes = function() {\n      // console.log('init boxes');\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: vm.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n      }\n    }\n    \n    this.getResults = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return;\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n  \n    this.showMoreResults = function(extra) {\n      vm.maxDisplay = vm.totalNumResults + extra;\n      vm.totalNumResults = 0;\n    }\n    \n    this.translate = function(nameId, nameParam) {\n      return translations.translate(nameId, nameParam);\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\n\nfunction chooseClass() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      job: '=job',\n      onSetJob: '&onSetJob'\n    },\n    templateUrl: 'ui/widgets/choose-class.html',\n    controllerAs: 'ctrl',\n    controller: [\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \n      chooseClassController],\n  };\n}\n\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    if(job) {\n      this.onSetJob();\n    }\n  }\n  \n  \n  jobs.init(reportProgress, $timeout);\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      collapse: '=collapse',\n      cat: '=cat',\n      onChange: '&onChange'\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    controller: ['itemCategory', dnsimCategoryLinksController],\n    controllerAs: 'ctrl',\n  };\n};\n\nfunction dnsimCategoryLinksController(itemCategory) {\n\n  var vm = this;\n\n  vm.categories = itemCategory.categories;\n  vm.collapsed = true;\n\n  vm.setCategory = function(action) {\n    // console.log('setting cat', action);\n    vm.cat = action;\n    localStorage.setItem('selectedItemCategory', action.name);\n    \n    if(vm.collapse) {\n      vm.collapsed = !vm.collapsed;\n    }\n\n    if(vm.onChange) {\n      vm.onChange();\n    }\n  }\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n      \n      $scope.openItem = function() {\n        if(!$scope.noClick) {\n          $location.path($scope.itemLink);\n        }\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', [dnsimJobIcon]);\n\nfunction dnsimJobIcon() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    controller: dnsimJobIconController,\n    controllerAs: 'ctrl'\n  }\n}\n\nfunction dnsimJobIconController() {\n\n  this.getIconXPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return ((this.item.d.JobIcon % 9) * 44) + 5;\n    }\n    return 0;\n  }\n  \n  this.getIconYPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return (Math.floor(this.item.d.JobIcon / 9) * 44) + 5;\n    }\n    return 0;\n  }\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.numLoading = 0;\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if(!$scope.filter && 'hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToPercent', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + (value/100.0);\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10)*100;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h != null) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p != null) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation != null && \n              this.dntLocation.url != null &&\n              this.dntLocation.url.length > 0) {\n\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n  'use strict';\n  \n  return {\n    \n    encodeItem: function(item, small) {\n      if(item != null) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C'\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n          if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr != null) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString != null && itemString.length > 0) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = '#/view-group/' + region.dntLocation.region + '/?';\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var longUrl = window.location.href.split(\"#\")[0] + path;\n      var data = { longUrl: longUrl };\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(ds.length == 0) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(ps.length == 0) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(ps.length == 0) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(ps.length == 0) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem != null) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true,},\n      {path: 'search/skills', name:'skills', searchType: 'skills'},\n      {path: 'search/custom', name:'custom', searchType: 'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal != null) {\n            if(source.items == null && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items != null) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      else if(item.itemType == cat.name) {\n        return true;\n      }\n      else if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n        \n        return false;\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n      else {\n        return false;\n      }\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items != null) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item != null) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item != null && !(item.typeName in itemMap)) {\n            console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 29 &&\n        dType != 114 &&\n        dType != 79 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 24 &&\n        dType != 182 &&\n        dType != 78 &&\n        dType != 20 &&\n        dType != 46 &&\n        dType != 9 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(potentials.length == 0 && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var totalRatio = 0;\n          angular.forEach(potentials, function(value, key) {\n            totalRatio += value.PotentialRatio;\n          });\n          \n          var numPotentials = potentials.length;\n          if(numPotentials == 0) {\n            itemType.items.push(this.createItem(itemType.name, d, null, totalRatio));\n          }\n          else {\n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(this.createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p != null) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p != null) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio == null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p != null && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.lzjson', \n        partsDnt: 'partstable_common2016.lzjson', \n        weaponDnt: 'weapontable_common2016.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items != null) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs != null) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      \n      var numRows = data.length;\n      for(var r=0;r<numRows;++r) {\n        if(data[r].id == id) {\n          return data[r];\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs != null) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\n\nfunction onlineService($window, $q, hCodeValues) {\n  console.log('setup online service');\n  \n  var service = {\n    login: login,\n    getUser: function() {\n      return firebase.auth().currentUser;\n    },\n    signOut: signOut,\n    deleteAccount: deleteAccount,\n    \n    getUserBuilds: getUserBuilds,\n    deleteBuild: deleteBuild,\n    saveBuild: saveBuild,\n    getBuild: getBuild,\n    getClassBuilds: getClassBuilds,\n    \n    getProfile: getProfile,\n    saveProfile: saveProfile,\n  };\n  \n  init();\n  \n  return service;\n  \n  function init() {\n    console.log('init');\n    firebase.initializeApp({\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\n      authDomain: \"dngearsim.firebaseapp.com\",\n      databaseURL: \"https://dngearsim.firebaseio.com\",\n      storageBucket: \"dngearsim.appspot.com\",\n    });\n  }\n  \n  function login() {\n    return $q(function(resolve, reject) {\n      var auth = firebase.auth();\n        \n      auth.onAuthStateChanged(function(user) {\n        if(user == null) {\n          console.log('redirecting');\n          $window.location.href = 'login.html';\n        }\n        else {\n          console.log('logged in');\n          resolve(user);\n        }\n      });\n    });\n  }\n  \n  function getProfile(uid) {\n    console.log('get profile');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(storedProfile.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getBuild(uid, buildName) {\n    console.log('get build');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(decompressBuild(storedProfile.val()));\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function saveProfile(profile) {\n    return $q(function(resolve, reject) {\n      var user = service.getUser();\n      if(user) {\n        profile = angular.copy(profile);\n        deleteNullProperties(profile, true);\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\n      }\n    });\n  }\n  \n  function getUserBuilds(uid) {\n    console.log('get builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds');\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\n        if(storedBuilds) {\n          var retVal = {};\n          var val = storedBuilds.val();\n          for(var buildName in val) {\n            retVal[buildName] = decompressBuild(val[buildName]);\n          }\n          resolve(retVal);\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getClassBuilds(job) {\n    console.log('get class builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds', job.id);\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\n        console.log('ok');\n        if(jobBuilds) {\n          resolve(jobBuilds.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function compressBuild(build) {\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        delete item.fullStats;\n      });\n    }\n    \n    var stringifiedData = JSON.stringify(build);\n    return LZString.compressToUTF16(stringifiedData);\n  }\n  \n  function decompressBuild(compressedBuild) {\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\n    var build = JSON.parse(stringifiedData);\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        item.fullStats = item.stats;\n        \n        if(item.enchantmentStats != null && item.enchantmentStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\n        }\n        \n        if(item.sparkStats != null && item.sparkStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\n        }\n      });\n    }\n    \n    return build;\n  }\n  \n  function saveBuild(buildName, build) {\n    var user = service.getUser();\n    var actions = [];\n    if(user) {\n      build = angular.copy(build);\n      deleteNullProperties(build, true);\n      // console.log('saving', build);\n      actions.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\n      );\n      \n      if(build.job && build.job.id) {\n        console.log('saving build');\n          \n        var data = {};\n        if(build.playerLevel) {\n          data.lev = build.playerLevel;\n        }\n        if(build.region) {\n          data.region = build.region;\n        }\n        if(build.guild) {\n          data.guild = build.guild;\n        }\n        if(build.about) {\n          data.about = build.about;\n        }\n        \n        deleteNullProperties(data, true);\n          \n        actions.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\n        );\n      }\n    }\n    return $q.all(actions);\n  }\n  \n  function deleteNullProperties(test, recurse) {\n    for (var i in test) {\n        if (test[i] === undefined) {\n            delete test[i];\n        } else if (recurse && typeof test[i] === 'object') {\n            deleteNullProperties(test[i], recurse);\n        }\n    }\n  }\n  \n  function signOut() {\n    var auth = firebase.auth();\n    return $q(function(resolve, reject) {\n      auth.signOut().then(function() {\n        resolve();\n      }, function(error) {\n        reject();\n      });\n    });\n  }\n  \n  function deleteAccount(builds) {\n    var auth = firebase.auth();\n    var user = service.getUser();\n    \n    return $q(function(resolve, reject) {\n      \n      var pList = [\n        firebase.database().ref('builds/' + user.uid).remove(),\n        firebase.database().ref('profile/' + user.uid).remove(),\n        firebase.database().ref('private/' + user.uid).remove()];\n        \n      var jobIds = [];\n      for(var buildName in builds) {\n        if(builds[buildName].job) {\n          jobIds.push(builds[buildName].job.id)\n        }\n      }\n      \n      jobIds = _.uniq(jobIds);\n      _.each(jobIds, function(id) {\n        pList.push(\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\n        )\n      });\n        \n      $q.all(pList).then(function() {\n        console.log('deleted data');\n        user.delete().then(function() {\n          console.log('deleted user');\n          auth.signOut().then(function() {\n            console.log('signed out');\n            resolve();\n          }, function(error) {\n            reject();\n          });\n        });\n      });\n    });\n  }\n  \n  function deleteBuild(buildName, build) {\n    \n    var pList = [];\n    var user = service.getUser();\n    if(user) {\n      pList.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\n      \n      if(build.job) {\n        pList.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\n      }\n    }\n    \n    return $q.all(pList);\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            if(build.items) {\n              for(var i=0;i<build.items.length;++i) {\n                if(build.items[i].exchangeType == exId) {\n                  numExchange++;\n                }\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality high grade' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            // todo: change this to use the name id\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n              \n            if(id == 999) {\n              return index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality high grade epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n            if(id == 999) {\n              return item.rank.id == 3 && index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n              case 1313: // Jakard's Demise\n              case 2032: // Sharing Goddess's Grief\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'unique plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      {region: 'ina', name: 'indonesian files from gemscool', url : 'https://inafiles-da491.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        angular.forEach(this.translationResettingEvents, function(event, index) {\n          event();\n        });\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation != null) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      this.setCurrentBuild(buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(updatedItems.length == 0) {\n          delete items[groupName];\n          this.setCurrentBuild(null);\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    currentBuild: null,\n    getCurrentBuild: function() {\n      if(!this.currentBuild) {\n        this.currentBuild = localStorage.getItem('currentGroup');\n        if(this.currentBuild) {\n          var savedItems = this.getSavedItems();\n          if(!(this.currentBuild in savedItems)) {\n            localStorage.removeItem('currentGroup');\n            this.currentBuild = null;\n          }\n        }\n      }\n      \n      return this.currentBuild;\n    },\n    \n    setCurrentBuild: function(buildName) {\n      this.currentBuild = buildName;\n      localStorage.setItem('currentGroup', buildName);\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        var setStats = [];\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null) {\n          \n          if(value.fullStats != null) {\n            stats = stats.concat(value.fullStats);\n          }\n          else {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      var itemCrit = dupeStat(1012);\n      \n      var critChance = Math.min(0.89, (crit.max / Number(group.enemyStatCaps.Ccritical)) + itemCrit.max);\n      retVal.push({id: 1012, max: critChance})\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.enemyStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats != null && build.heroStats.length > 0) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location != null && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, dps: true, pc: 50, skPc: 4050, searchable: true },\n      1  : {id: 1, name: 'agi', display: toNoDec, dps: true, pc: 51, skPc: 4051, searchable: true },\n      2  : {id: 2, name: 'int', display: toNoDec, dps: true, pc: 52, skPc: 4052, searchable: true },\n      3  : {id: 3, name: 'vit', display: toNoDec, def: true, pc: 53, skPc: 4053, searchable: true },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, dps: true, pc: 54, searchable: true },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, dps: true, pc: 56, searchable: true },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'pdef', display: inThousands, def: true, pc: 58, searchable: true },\n      9  : {id: 9, name: 'mdef', display: inThousands, def: true, pc: 59, searchable: true },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, dps: true, pc: 62, searchable: true },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, dps: true, searchable: true },\n      17 : {id: 17, name: 'ice%', display: toPercent, dps: true, searchable: true },\n      18 : {id: 18, name: 'light%', display: toPercent, dps: true, searchable: true },\n      19 : {id: 19, name: 'dark%', display: toPercent, dps: true, searchable: true },\n      20 : {id: 20, name: 'fire def', display: toPercent, def: true, searchable: true },\n      21 : {id: 21, name: 'ice def', display: toPercent, def: true, searchable: true },\n      22 : {id: 22, name: 'light def', display: toPercent, def: true, searchable: true },\n      23 : {id: 23, name: 'dark def', display: toPercent, def: true, searchable: true },\n      25 : {id: 25, name: 'hp', display: inThousands, def: true, pc: 75, skPc: 4075, searchable: true },\n      26 : {id: 26, name: 'mp', display: inThousands, def: true, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, dps: true, searchable: true },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, dps: true, pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, dps: true, pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent, dps: true },\n      51 : {id: 51, name: 'agi%', display: toPercent, dps: true },\n      52 : {id: 52, name: 'int%', display: toPercent, dps: true },\n      53 : {id: 53, name: 'vit%', display: toPercent, def: true },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55, dps: true },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57, dps: true },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'pdef%', display: toPercent, def: true },\n      59 : {id: 59, name: 'mdef%', display: toPercent, def: true },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true, def: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true, def: true },\n      62 : {id: 62, name: 'crit%', display: toPercent, dps: true },\n      63 : {id: 63, name: 'crit resist%', display: toPercent, def: true },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true, def: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true, def: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true, def: true },\n      75 : {id: 75, name: 'hp%', display: toPercent, def: true },\n      76 : {id: 76, name: 'mp%', display: toPercent, def: true },\n      77 : {id: 77, name: 'mp recover%', display: toPercent, def: true },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true, def: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true, dps: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true, dps: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, dps: true, pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true, dps: true },\n      105: {id: 104, name: 'pvp dmg', display: inThousands, noCustom: true, dps: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true, def: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      \n      1008: {id: 1008, name: 'pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent },\n      3001: {id: 3001, name: 'skPDmg%', display: toPercent },\n      3002: {id: 3002, name: 'skMDmg%', display: toPercent },\n      \n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true, hide: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands },\n      4050: {id: 4050, name: 'skStr%', display: toPercent },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent },\n      4052: {id: 4052, name: 'skInt%', display: toPercent },\n      4053: {id: 4053, name: 'skVit%', display: toPercent },\n      4075: {id: 4075, name: 'skHp%', display: toPercent },\n      4076: {id: 4076, name: 'skMp%', display: toPercent },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      // 134 : { id: 134, name: 'p dmg reduction%' },\n      // 135 : { id: 135, name: 'm dmg reduction%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}