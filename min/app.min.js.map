{"version":3,"sources":["routes.js","about/aboutController.js","builds/buildActionsController.js","builds/buildController.js","builds/buildItemController.js","builds/buildListController.js","builds/buildStatsController.js","builds/buildSummaryController.js","builds/buildTalismansController.js","builds/deleteBuildController.js","builds/editBuildController.js","builds/quickAddController.js","builds/viewGroupController.js","filters/filters.js","item/equipmentController.js","item/groupAssignmentController.js","item/itemEditCustomController.js","item/itemEditEnchantmentController.js","item/itemEditPotentialController.js","item/itemEditSkillController.js","item/itemEditSparkController.js","item/itemEditTalismanController.js","item/itemViewBoxController.js","item/itemViewCraftController.js","item/itemViewExtractionController.js","item/itemViewPlateController.js","item/itemViewSetController.js","item/itemViewShopController.js","item/itemViewTransferController.js","nav/exportController.js","nav/navController.js","nav/setupController.js","region/regionController.js","search/customItemsController.js","search/itemSearchController.js","search/skillSearchController.js","secrets/itemsController.js","widgets/dnsimCategoryLinks.js","widgets/dnsimItemIcon.js","widgets/dnsimItemLink.js","widgets/dnsimJobIcon.js","widgets/dnsimLoading.js","widgets/dnsimSelectAllOnClick.js","widgets/dnsimStats.js","widgets/dnsimStringToNumber.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset","tryInit","vm","reloaded","allLoaded","files","getDntFiles","build","forEach","columns","fileName","isLoaded","newItems","reloadGroup","buildName","updatedSavedItems","items","onChange","progress","this","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","job","damageType","element","secondaryElement","enemyStatCaps","playerStatCaps","conversions","baseStats","heroStats","init","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","directive","scope","bindToController","controllerAs","stats","getBuildStats","selectedCategory","localStorage","category","byName","getCategoryItems","getItemsByCategory","name","getCategories","categories","setSelectedCategory","value","setItem","toggleGroup","url","getSaveDate","group","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","allowMoreItems","maxCat","length","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","item","index","typeName","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","sparkTypeId","increasingGemSlots","number","numItems","cat","numItemText","handleChange","removeItem","newItemList","gItem","push","$anchorScroll","$routeParams","currentGroup","setupBuilds","savedItems","getSavedItems","buildNames","Object","keys","sort","builds","i","groupName","saveBuildSelection","anyItems","createGroup","console","log","itemsByCategory","getBuildSummary","summary","itemsByType","type","jobs","itemColumnsToLoad","character","saveGroup","calcStatPercent","newVal","origVal","Math","round","scrollTo","groupNames","getGroupCalcStats","groupCalcStats","getCalculatedStats","getBuild","pickup","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","mergeStats","nextGroup","uptoItem","updateRows","prevGroup","foundGroup","headers","summaryStatIds","id","summaryDisplay","pcIndexes","rows","pcIndex","enchantmentNum","rowIndex","makeFakeCells","data","makeCell","num","click","col","move","swapEnchantmentNumber","setTalisman","splice","replaceAffectAmount","newEnhancementNum","extraStats","stat","max","enchantmentStats","fullStats","getReplaceAffectAmount","statId","itemIndex","initReplaceAffects","item2","fullStats1","fullStats2","newStats","origStats","getStat","getStatName","retVal","eleId","elements","len","save","newGroup","oldGroupName","damageTypes","getFinalJobs","allJobs","finalJobs","j","getBaseJobName","bJob","getBaseJobs","getJobName","englishName","getAllJobs","d","EnglishName","newJobs","key","setHeroStats","setJob","getStatCap","colName","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","input","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","datas","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","anyLoading","cancel","reloadItem","saveItem","reset","start","hasOptions","back","pop","testOptions","$scope","region","getById","setLocationByName","g","e","p","h","t","s","itemString","split","itemStr","decodeItem","isLoading","newBuildName","filter","$stateful","itemFactory","needJobClass","jobName","anyToLoad","reportProgress","setFullStats","itemSource","pve","itemData","getItemData","DisjointDrop1","canExtract","Type","canTransfer","setId","isInSet","typeId","isPlate","canUse","detail","hasContents","sparkStats","msg","itemType","getDescription","description","mainDnt","find","DescriptionID","translate","DescriptionIDParam","getExchangeType","exchangeDnt","exchangeType","exchange","NameID","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","dntLocation","encodeItem","replace","clearGroup","addAffectAmount","groupItems","getAddAffectAmount","initAddAffects","getGroupItems","numMatches","str","itemSplit","indexOf","a","b","hasMaxExchangable","maxExchange","addToGroup","replaceItem","newStatVal","dropdownStats","noCustom","getStats","newStat","addStat","removeStat","getNewStatName","getNewStatDisplayValue","getStatDisplayValue","display","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","setEnchantment","EnchantLevel","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","showMaterials","materials","itemId","itemCount","NameIDParam","material","icon","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","initSkills","dntFile","baseJobName","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkDnt","amount","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","getCharmItems","TypeParam1","f","getPouchItems","boxType","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","count","createBasicItem","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","found","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","EnchantID","DisjointDrop","getItems","getGold","Number","Disjointamount","getPlates","plateFile","r","row","allFiles","initSets","getSetItems","getCombinedCosts","shops","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","initTransfers","transfers","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","noLocationMenu","normalMenu","isSearch","startedLoading","tlocation","noRegion","fireAction","action","getActions","menu","extraCss","$route","dntInit","translationsStatus","progressTranslations","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","customItems","maxDisplay","currentResults","nameSearch","getResults","createCustomItem","jobInit","lastJobNumber","byPath","catName","toUpperCase","minLevel","maxLevel","totalNumResults","grades","savedSearchStatId","hideLevel","hideJob","rankChecked","checkedRank","pcStatId","getTime","pc","statVals","newResults","numEquip","curDisplay","hideRank","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","showMoreResults","extra","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","hasStartedLoading","translationsInit","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","boxeContents","initBoxes","box","numBoxes","nameId","nameParam","dnsimCategoryLinks","restrict","link","attrs","setCategory","dnsimItemIcon","$watch","newValue","oldValue","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","openItem","dnsimJobIcon","JobIcon","dnsimLoading","transclude","$on","setLoadCount","loadError","n","numLoading","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","err","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","jobId","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","result","loaders","findIndexes","Array","numRows","column","results","numResults","colIndex","columnIndexes","findIndex","val","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","expedition plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","stringifiedData","decompressFromUTF16","parse","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","134","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add","statMap"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items/', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/saved', {\n      redirectTo: '/builds'\n    }).\n    when('/saved/:groupName*', {\n      redirectTo: '/builds/:groupName'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/builds/:groupName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:groupName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      reloadOnSearch: false,\n    }).\n    \n    when('/item-search', {\n      redirectTo: '/search'\n    }).\n    when('/item-search/:itemType', {\n      redirectTo: '/search/:itemType'\n    }).\n    \n    when('/search', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    when('/search/custom', {\n      templateUrl: 'ui/search/custom-items.html',\n      controller: 'CustomItemCtrl as customItems'\n    }).\n    when('/search/skills', {\n      templateUrl: 'ui/search/skill-search.html',\n      controller: 'SkillSearchCtrl as skillSearch'\n    }).\n    when('/search/:itemType*', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    \n    when('/item/:region?/:itemString*', {\n      templateUrl: 'ui/item/equipment.html',\n      controller: 'EquipmentCtrl',\n      reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","angular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/builds/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    return itemCategory.getItemsByCategory(this.build.items)[vm.category.name];\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n\n  this.toggleGroup = function() {\n    localStorage.setItem('currentGroup', null);\n    $location.url('/builds');\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.onChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n    \n  this.removeItem = function() {\n    vm.item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.onChange();\n  }\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$anchorScroll','$routeParams','$timeout','saveHelper',\n  function($window,$location,$anchorScroll,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.currentGroup = localStorage.getItem('currentGroup');\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('groupName' in $routeParams) {\n      if($routeParams.groupName != this.currentGroup) {\n        this.currentGroup = $routeParams.groupName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/builds/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/builds/' + buildName);\n    }\n    \n    $timeout(function() {\n      $anchorScroll('/builds/' + vm.currentGroup);\n    });\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = localStorage.getItem('currentGroup');\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/builds/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('groupName' in $routeParams) {\n      this.groupName = $routeParams.groupName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/builds/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/builds/' + newBuildName);\n    }\n  }]\n);\n","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('EquipmentCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  $scope.item = exportLinkHelper.decodeItem($routeParams.itemString);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\n    $location.replace();\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.item), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.item);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = localStorage.getItem('currentGroup');\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    this.addAffectAmount = null;\n    this.replaceAffectAmount = {};\n\n    this.groupItems = null;\n    this.groupCalcStats = null\n  }\n  this.clearGroup();\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = group.items.concat([vm.item]);\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues',\nfunction(hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.stat = {id:-1, name:''};\n  this.newStatVal = 0;\n\n  this.dropdownStats = [];\n  for(var id in hCodeValues.stats) {\n    if(!hCodeValues.stats[id].noCustom) {\n      this.dropdownStats.push(hCodeValues.stats[id]);\n    }\n  }\n  this.dropdownStats.sort()\n\n  this.getStats = function() {\n    return this.dropdownStats;\n  }\n  \n  this.newStat = function() {\n    return {id:this.stat.id,max:this.newStatVal};\n  }\n  \n  this.addStat = function() {\n    if(this.stat.id > -1) {\n      if(!this.item.stats) {\n        this.item.stats = [];\n      }\n       \n      this.item.stats.push(this.newStat());\n      this.onChange();\n    }\n  }\n  \n  this.removeStat = function(stat) {\n    var i = this.item.stats.indexOf(stat);\n    if(i != -1) {\n    \tthis.item.stats.splice(i, 1);\n      this.onChange();\n    }\n  }\n  \n  this.getNewStatName = function() {\n    return this.getStatName(this.newStat());\n  }\n  \n  this.getNewStatDisplayValue = function() {\n    return this.getStatDisplayValue(this.newStat());\n  }\n  \n  this.getStatName = function(stat) {\n    if(stat.id in hCodeValues.stats) {\n      return hCodeValues.stats[stat.id].name;\n    }\n  }\n  \n  this.getStatDisplayValue = function(stat) {\n    if(stat.id in hCodeValues.stats) {\n      return hCodeValues.stats[stat.id].display(stat);\n    }\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    //console.log('init contents');\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        for(var f=0;f<pouchFileNames.length;++f) {\n          vm.getPouchItems(d.TypeParam1, pouchFileNames[f]);\n        }\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType, pouchFileName) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0])\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n      \n      //console.log('box: ' + boxType);\n\n      var charmData = dntData.getData(charmFiles[i]);\n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [transferFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n    vm.matchingTransfers = [];\n    \n    for(var i=0;i<transfers.length;++i) {\n      var t = transfers[i];\n      if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n        \n        var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n        var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n        \n        vm.matchingTransfers.push({\n          level: t.ResultLevel,\n          enchantmentNum: t.ResultEnchantLevel,\n          gold: t.NeedCoin/100/100,\n          rank: hCodeValues.rankNames[t.ResultRank],\n          numItem1: t.NeedItemCount1,\n          item1: itemFactory.createBasicItem(item1s[0]),\n          numItem2: t.NeedItemCount2,\n          item2: itemFactory.createBasicItem(item2s[0]),\n        });\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory',\n  function($scope,$location,translations,region,itemCategory) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.fireAction = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          $location.path('/' + action.path + '/' + cat);\n        }\n        else {\n          $location.path('/' + action.path);\n        }\n      }\n      else {\n          $location.path('/' + action.path);\n      }\n    }\n      \n    $scope.getActions = function() {\n      var menu = null;\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          value.extraCss = 'active';\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","angular.module('dnsim').controller('CustomItemCtrl',\n\n['$window','saveHelper','$location','hCodeValues',\nfunction($window,saveHelper,$location,hCodeValues) {\n  'use strict';\n  \n  document.body.className = 'search-back';\n  $window.document.title = 'DN Gear Sim | CUSTOM ITEMS';\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}]);","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  $scope.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\n  if(!$scope.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     var cat = itemCategory.byName(catName);\n     if(cat) {\n       $location.path(cat.path);\n     }\n     return;\n  }\n\n  document.body.className = 'search-back';\n  $window.document.title = 'DN Gear Sim | ' + $scope.itemCategory.name.toUpperCase();\n  \n  $scope.job = {id: -1, name: ''};\n  $scope.jobs = [$scope.job];\n  $scope.allJobs = [];\n  $scope.minLevel = 1;\n  $scope.maxLevel = 99;\n  $scope.maxDisplay = 10;\n  $scope.totalNumResults = 0;\n  $scope.grades = hCodeValues.rankNames;\n  $scope.stat = {id:-1, name:''};\n  $scope.stats = [$scope.stat];\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.type) {\n      $scope.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    $scope.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    $scope.maxLevel = maxLevel;\n  }\n  \n  $scope.nameSearch = localStorage.getItem('nameSearch');\n  if($scope.nameSearch == null) {\n    $scope.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    $scope.stat = hCodeValues.stats[savedSearchStatId];\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  $scope.save = function() {\n    if(!$scope.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', $scope.minLevel);\n      localStorage.setItem('maxLevel', $scope.maxLevel);\n    }\n    \n    if(!$scope.itemCategory.hideJob) {\n      if($scope.job != null) {\n        localStorage.setItem('jobNumber', $scope.job.id);\n      }\n    }\n  \n    if($scope.stat != null) {\n      localStorage.setItem('searchStat', $scope.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', $scope.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init($scope.itemCategory.name, $timeout);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, $scope.jobs[0]);\n      $scope.jobs = newJobs;\n      $scope.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            $scope.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  $scope.rankChecked = hCodeValues.checkedRank;\n  \n  $scope.getResults = function() {\n    var allItems = itemCategory.getItems($scope.itemCategory.name);\n    if(allItems == null) {\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n    \n    $scope.save();\n    \n    var start = new Date().getTime();\n          \n    var pcStatId = -1;\n    if('pc' in $scope.stat) {\n      pcStatId = $scope.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<$scope.maxDisplay || $scope.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e != null) {\n        \n        if(!$scope.itemCategory.hideLevel) {\n          if(e.levelLimit < $scope.minLevel || e.levelLimit > $scope.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideRank) {\n          if(e.rank != null && !$scope.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideJob) {\n          if($scope.job != null && $scope.job.id > 0) {\n            if(!$scope.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != $scope.itemCategory.name) {\n          continue;\n        }\n        \n        if($scope.nameSearch != '') {\n          var nameSearches = $scope.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [$scope.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if($scope.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s]\n            if(stat.id == $scope.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if($scope.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, $scope.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    $scope.totalNumResults = newResults.length;\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    \n    return newResults;\n  };\n  \n  $scope.showMoreResults = function(extra) {\n    $scope.maxDisplay = $scope.totalNumResults + extra;\n    $scope.totalNumResults = 0;\n  }\n  \n}]);\n","angular.module('dnsim').controller('SkillSearchCtrl',\n\n['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues',\nfunction($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues) {\n  'use strict';\n  \n  $window.document.title = 'DN Gear Sim | SKILLS';\n  \n  var vm = this;\n  document.body.className = 'search-back';\n  \n  this.job = {id: -1, d:{}, name: ''};\n  this.jobs = [this.job];\n  this.allJobs = [];\n  this.maxDisplay = 60;\n  this.currentResults = 0;\n  this.dntName = '';\n  this.skills = [];\n  this.loadedJobId = -1;\n\n  this.nameSearch = localStorage.getItem('nameSearch');\n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n\n  var classFactories = [];\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n  \n  this.isLoading = function() {\n    if(!jobs.isLoaded()) {\n      // console.log('jobs not loaded');\n      if(!jobs.hasStartedLoading()) {\n        init();\n      }\n      return true;      \n    }\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { $timeout(translationsInit); } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName != null) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() {setupSkills(baseJobNames, vm.job);} ) });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n        return;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  this.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  this.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    \n    if(vm.job != null) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills && (curDisplay<vm.maxDisplay);++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(nameSearches.length == 0) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n      curDisplay++;\n    }\n    vm.currentResults = Math.min(curDisplay, vm.maxDisplay);\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}]);","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    this.boxes = null;\n    this.boxeContents = [];\n    this.maxDisplay = 10;\n    this.currentResults = 0;\n\n    this.nameSearch = localStorage.getItem('itemNameSearch');\n    if(this.nameSearch == null) {\n      this.nameSearch = '';\n    }\n    \n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    this.initBoxes = function() {\n      // console.log('init boxes');\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: vm.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n      }\n    }\n    \n    this.getResults = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return;\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n  \n    this.showMoreResults = function(extra) {\n      vm.maxDisplay = vm.totalNumResults + extra;\n      vm.totalNumResults = 0;\n    }\n    \n    this.translate = function(nameId, nameParam) {\n      return translations.translate(nameId, nameParam);\n    }\n  }]\n);\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.categories = itemCategory.categories;\n      \n      $scope.setCategory = function(action) {\n        localStorage.setItem('selectedItemCategory', action.name);\n        $location.path('/' + action.path);\n      }\n\n      angular.forEach($scope.categories, function(value, key) {\n        if($location.path() == '/' + value.path) {\n          value.extraCss = 'active';\n        }\n        else {\n          value.extraCss = 'search-default';\n        }\n      });\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n      \n      $scope.openItem = function() {\n        if(!$scope.noClick) {\n          $location.path($scope.itemLink);\n        }\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', ['exportLinkHelper','$location','region', dnsimJobIcon]);\n\nfunction dnsimJobIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    link: function($scope, element, attrs) {\n\n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.d && $scope.item.d.JobIcon > 0) {\n          return (($scope.item.d.JobIcon % 9) * 44) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.d && $scope.item.d.JobIcon > 0) {\n          return (Math.floor($scope.item.d.JobIcon / 9) * 44) + 5;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if('hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h != null) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p != null) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation != null && \n              this.dntLocation.url != null &&\n              this.dntLocation.url.length > 0) {\n                \n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n  'use strict';\n  \n  return {\n    \n    encodeItem: function(item, small) {\n      if(item != null) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C'\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n          if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr != null) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString != null && itemString.length > 0) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = '#/view-group/' + region.dntLocation.region + '/?';\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var longUrl = window.location.href.split(\"#\")[0] + path;\n      var data = { longUrl: longUrl };\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(ds.length == 0) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(ps.length == 0) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(ps.length == 0) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(ps.length == 0) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem != null) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true,},\n      {path: 'search/skills', name:'skills'},\n      {path: 'search/custom', name:'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal != null) {\n            if(source.items == null && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items != null) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      else if(item.itemType == cat.name) {\n        return true;\n      }\n      else if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n        \n        return false;\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n      else {\n        return false;\n      }\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items != null) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item != null) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item != null && !(item.typeName in itemMap)) {\n            console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 29 &&\n        dType != 114 &&\n        dType != 79 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 24 &&\n        dType != 182 &&\n        dType != 78 &&\n        dType != 20 &&\n        dType != 46 &&\n        dType != 9 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(potentials.length == 0 && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var totalRatio = 0;\n          angular.forEach(potentials, function(value, key) {\n            totalRatio += value.PotentialRatio;\n          });\n          \n          var numPotentials = potentials.length;\n          if(numPotentials == 0) {\n            itemType.items.push(this.createItem(itemType.name, d, null, totalRatio));\n          }\n          else {\n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(this.createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p != null) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p != null) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio == null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p != null && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.lzjson', \n        partsDnt: 'partstable_common2016.lzjson', \n        weaponDnt: 'weapontable_common2016.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items != null) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs != null) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      \n      var numRows = data.length;\n      for(var r=0;r<numRows;++r) {\n        if(data[r].id == id) {\n          return data[r];\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs != null) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = item.name.indexOf('Quality');\n            if(id == 999) {\n              return index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = item.name.indexOf('Quality');\n            if(id == 999) {\n              return item.rank.id == 3 && index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'expedition plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      // {region: 'ina', name: 'indonesian files from gemscool', url : 'https://dnina.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        angular.forEach(this.translationResettingEvents, function(event, index) {\n          event();\n        });\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation != null) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      console.log('saving selection');\n      localStorage.setItem('currentGroup', buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        console.log('also job');\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(updatedItems.length == 0) {\n          delete items[groupName];\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        var setStats = [];\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null) {\n          \n          if(value.fullStats != null) {\n            stats = stats.concat(value.fullStats);\n          }\n          else {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      \n      var critChance = Math.min(0.89, crit.max / Number(group.enemyStatCaps.Ccritical));\n      retVal.push({id: 1012, max: critChance})\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.enemyStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats != null && build.heroStats.length > 0) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location != null && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, type: 'dps', pc: 50, skPc: 4050 },\n      1  : {id: 1, name: 'agi', display: toNoDec, type: 'dps', pc: 51, skPc: 4051 },\n      2  : {id: 2, name: 'int', display: toNoDec, type: 'dps', pc: 52, skPc: 4052 },\n      3  : {id: 3, name: 'vit', display: toNoDec, type: 'def', pc: 53, skPc: 4053 },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, type: 'dps', pc: 54 },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, type: 'dps', pc: 56 },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'def', display: inThousands, type: 'def', pc: 58 },\n      9  : {id: 9, name: 'mdef', display: inThousands, type: 'def', pc: 59 },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, type: 'dps', pc: 62 },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, type: 'dps' },\n      17 : {id: 17, name: 'ice%', display: toPercent, type: 'dps' },\n      18 : {id: 18, name: 'light%', display: toPercent, type: 'dps' },\n      19 : {id: 19, name: 'dark%', display: toPercent, type: 'dps' },\n      20 : {id: 20, name: 'fire def', display: toPercent, type: 'def' },\n      21 : {id: 21, name: 'ice def', display: toPercent, type: 'def' },\n      22 : {id: 22, name: 'light def', display: toPercent, type: 'def' },\n      23 : {id: 23, name: 'dark def', display: toPercent, type: 'def' },\n      25 : {id: 25, name: 'hp', display: inThousands, type: 'def', pc: 75, skPc: 4075 },\n      26 : {id: 26, name: 'mp', display: inThousands, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, type: 'dps' },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, type: 'dps', pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, type: 'dps', pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent },\n      51 : {id: 51, name: 'agi%', display: toPercent },\n      52 : {id: 52, name: 'int%', display: toPercent },\n      53 : {id: 53, name: 'vit%', display: toPercent },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55 },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57 },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'def%', display: toPercent },\n      59 : {id: 59, name: 'mdef%', display: toPercent },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true },\n      62 : {id: 62, name: 'crit%', display: toPercent },\n      63 : {id: 63, name: 'crit resist%', display: toPercent },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true },\n      75 : {id: 75, name: 'hp%', display: toPercent },\n      76 : {id: 76, name: 'mp%', display: toPercent },\n      77 : {id: 77, name: 'mp recover%', display: toPercent },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, type: 'dps', pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true },\n      \n      1008: {id: 1008, name: 'calc pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'calc mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd calc', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent },\n      3001: {id: 3000, name: 'skPDmg%', display: toPercent },\n      3002: {id: 3000, name: 'skMDmg%', display: toPercent },\n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands },\n      4050: {id: 4050, name: 'skStr%', display: toPercent },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent },\n      4052: {id: 4052, name: 'skInt%', display: toPercent },\n      4053: {id: 4053, name: 'skVit%', display: toPercent },\n      4075: {id: 4075, name: 'skHp%', display: toPercent },\n      4076: {id: 4076, name: 'skMp%', display: toPercent },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      134 : { id: 134, name: 'physicial defense%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}