<<<<<<< Updated upstream
<<<<<<< Updated upstream
{"version":3,"sources":["routes.js","about/about.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","nav/export.js","nav/nav.js","nav/setup.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","filters/filters.js","region/region.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","search/custom-items.js","search/item-search.js","search/skill-search.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","widgets/dnsim-string-to-percent.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset","tryInit","vm","reloaded","allLoaded","files","getDntFiles","build","forEach","columns","fileName","isLoaded","newItems","reloadGroup","buildName","updatedSavedItems","items","onChange","progress","this","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","job","damageType","element","secondaryElement","enemyStatCaps","playerStatCaps","conversions","baseStats","heroStats","init","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","directive","scope","bindToController","controllerAs","item","$routeParams","setupBuilds","savedItems","getSavedItems","buildNames","Object","keys","sort","builds","i","length","push","name","groupName","currentGroup","saveBuildSelection","anyItems","createGroup","handleChange","toggleGroup","url","publish","search","stats","getBuildStats","itemsByCategory","getItemsByCategory","getSaveDate","group","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","jobs","itemColumnsToLoad","character","saveGroup","calcStatPercent","newVal","origVal","Math","round","scrollTo","groupNames","getCurrentBuild","getGroupCalcStats","groupCalcStats","getCalculatedStats","getBuild","pickup","index","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","mergeStats","nextGroup","uptoItem","updateRows","prevGroup","foundGroup","headers","summaryStatIds","id","summaryDisplay","pcIndexes","rows","typeName","pcIndex","enchantmentNum","rowIndex","makeFakeCells","data","makeCell","num","click","col","move","swapEnchantmentNumber","setTalisman","splice","replaceAffectAmount","newEnhancementNum","extraStats","stat","max","enchantmentStats","fullStats","getReplaceAffectAmount","statId","itemIndex","initReplaceAffects","item2","fullStats1","fullStats2","gItem","newStats","origStats","getStat","getStatName","retVal","eleId","elements","len","save","selectedCategory","localStorage","category","byName","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","value","setItem","allowMoreItems","maxCat","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","sparkTypeId","increasingGemSlots","number","numItems","cat","numItemText","removeItem","newItemList","server","newGroup","oldGroupName","damageTypes","getFinalJobs","allJobs","finalJobs","j","getBaseJobName","bJob","newJobs","key","setHeroStats","setJob","getStatCap","colName","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","input","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","datas","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","anyLoading","cancel","reloadItem","saveItem","reset","start","hasOptions","back","pop","testOptions","$scope","region","getById","setLocationByName","g","e","p","h","d","t","s","itemString","split","itemStr","decodeItem","isLoading","newBuildName","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","icon","noLocationMenu","normalMenu","buildAction","withBuildMenu","isSearch","indexOf","startedLoading","tlocation","noRegion","dntLocation","fireAction","action","getActions","menu","currentBuild","extraCss","$route","dntInit","translationsStatus","progressTranslations","translate","msg","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","clearGroup","addAffectAmount","groupItems","$watch","getAddAffectAmount","initAddAffects","getGroupItems","numMatches","str","itemSplit","exchangeType","itemSource","a","b","hasMaxExchangable","maxExchange","addToGroup","replace","replaceItem","statMap","_","newValue","oldValue","anyChange","Number","found","each","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","setEnchantment","EnchantLevel","getStats","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","find","showMaterials","materials","itemId","itemCount","NameID","NameIDParam","material","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkDnt","amount","itemFactory","typeId","console","log","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","getCharmItems","TypeParam1","getPouchItems","boxType","f","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Disjointamount","getPlates","plateFile","r","row","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","initTransfers","transfers","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","getJobName","getAllJobs","needJobClass","jobName","preInitItem","anyToLoad","setFullStats","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","getDescription","description","mainDnt","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","encodeItem","copy","filter","$stateful","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","buildSearch","onlineService","getClassBuilds","then","jobBuilds","maxDisplay","totalNumResults","jobId","showMoreResults","extra","allResults","getFilteredBuilds","uid","results","result","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","openServer","load","user","getUser","handleError","err","show","login","saveProfile","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","openLocal","getBuildLimit","maxBuilds","getNumStoredBuilds","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","copyLocally","customItemCtrl","customItems","currentResults","nameSearch","getResults","getNewStatName","createCustomItem","jobInit","lastJobNumber","byPath","catName","minLevel","maxLevel","grades","searchable","savedSearchStatId","navigate","hideLevel","hideJob","rankChecked","checkedRank","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideRank","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","skillSearchCtrl","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","translationsInit","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","boxeContents","initBoxes","box","numBoxes","nameId","nameParam","chooseClass","restrict","onSetJob","chooseClassController","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","collapse","dnsimCategoryLinksController","collapsed","setCategory","dnsimItemIcon","link","attrs","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","openItem","dnsimJobIcon","dnsimJobIconController","JobIcon","dnsimLoading","transclude","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","display","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","hasStartedLoading","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","searchType","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","deleteNullProperties","set","compressBuild","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","expedition plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","setCurrentBuild","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","itemCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","dps","1","2","3","4","5","6","7","8","9","10","noCustom","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","105","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items/', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/build/:groupName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:groupName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      reloadOnSearch: false,\n    }).\n    \n    when('/search/:itemType?', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    \n    when('/item/:region?/:i*', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/profile/:uid', {\n      templateUrl: 'ui/online/profile.html',\n      controller: 'ProfileCtrl as ctrl',\n    }).\n    \n    when('/published/:uid/:buildName*', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/build-search/:jobId?', {\n      templateUrl: 'ui/online/build-search.html',\n      controller: 'BuildSearchCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n})();","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/build/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$routeParams','$timeout','saveHelper',\n  function($window,$location,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('groupName' in $routeParams) {\n      if($routeParams.groupName != this.currentGroup) {\n        this.currentGroup = $routeParams.groupName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/build/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      // console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/build/' + buildName);\n    }\n    \n    this.publish = function() {\n      $location.url('/publish');\n    }\n    \n    this.search = function() {\n      $location.url('/build-search');\n    }\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    // console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/build/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\n    if(vm.category.name in itemsByCat) {\n      return itemsByCat[vm.category.name];\n    }\n    else {\n      return [];\n    }\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.onChange();\n  }\n  \n  this.removeItem = function(item) {\n    item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n\n    vm.build.items = newItemList;\n    vm.stats = statHelper.getBuildStats(vm.build);\n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.onChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange',\n      server: '=server'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('groupName' in $routeParams) {\n      this.groupName = $routeParams.groupName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function() {\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/build/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      // console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      // console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/build/' + newBuildName);\n    }\n  }]\n);\n","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory','saveHelper',\n  function($scope,$location,translations,region,itemCategory,saveHelper) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n    \n    var buildAction = {path: 'build', name:'build', icon: 'wrench'};\n    \n    var withBuildMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      buildAction,\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.fireAction = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          $location.path('/' + action.path + '/' + cat);\n        }\n        else {\n          $location.path('/' + action.path);\n        }\n      }\n      else {\n          $location.path('/' + action.path);\n      }\n    }\n      \n    $scope.getActions = function() {\n      // console.log('getting actions');\n      var menu = null;\n      \n      var currentBuild = saveHelper.getCurrentBuild();\n      if(currentBuild) {\n        var savedItems = saveHelper.getSavedItems();\n        if(!(currentBuild in savedItems)) {\n          currentBuild = null;\n        }\n      }\n\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(currentBuild && currentBuild != 'null') {\n        menu = withBuildMenu;\n        buildAction.path = 'build/' + currentBuild;\n        buildAction.name = currentBuild;\n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          if(value.path != 'builds' || $location.path() == '/builds') {\n            value.extraCss = 'active';\n          }\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory','$scope',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory,$scope) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    vm.addAffectAmount = null;\n    vm.replaceAffectAmount = {};\n\n    vm.groupItems = null;\n    vm.groupCalcStats = null\n  }\n\n  $scope.$watch('editCtrl.item', function() {\n    // console.log('item changed');\n    vm.clearGroup();\n  });\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    // console.log('add affect: ', this.addAffectAmount[stat], this.item);\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    // console.log('initialising add affects ');\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = [];\n    if(group.items) {\n      newItems = group.items.concat([vm.item]);\n    }\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues','$scope',\nfunction(hCodeValues,$scope) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n\n  this.statMap = {};\n  \n  // console.log(vm.item.stats);\n  _.forEach(vm.item.stats, function(stat) {\n    // console.log('got stat', stat.id);\n    vm.statMap[stat.id] = stat.max;\n  });\n  \n  for(var statId in hCodeValues.stats) {\n    $scope.$watch('editCtrl.statMap[' + statId + ']', function(newValue, oldValue) { \n\n      if(newValue != oldValue) {\n        // console.log(statId);\n        // console.log('watch got stat value', newValue);\n\n        var anyChange = false;\n        var newStats = [];\n        for(var statId in vm.statMap) {\n\n          if(!vm.statMap[statId] || !Number(vm.statMap[statId])) {\n            _.each(vm.item.stats, function(stat) { \n              if(stat.id == statId) {\n                anyChange = true;\n              }\n            });\n          }\n          else {\n            newStats.push({\n              id: Number(statId),\n              max: Number(vm.statMap[statId])\n            });\n\n            var found = false;\n            _.each(vm.item.stats, function(stat) {\n              if(stat.id == statId) {\n                found = true;\n                // console.log('comparing', stat.max, vm.statMap[statId]);\n                if(!(statId in vm.statMap) || stat.max != vm.statMap[statId]) {\n                  anyChange = true;\n                }\n              } \n            });\n\n            if(!found) {\n              anyChange = true;\n            }\n          }\n        }\n\n        if(anyChange) {\n          // console.log('GOT CHANGES!', newStats);\n          vm.item.stats = newStats;\n          vm.onChange();\n        }\n      }\n    });\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    //console.log('init contents');\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        vm.getPouchItems(d.TypeParam1);\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType) {\n    for(var f=0;f<pouchFileNames.length;++f) {\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\n    }\n  }\n  \n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            // console.log('adding item ' + pouchItem);\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\n              // console.log('found item ' + basicItem.name);\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: basicItem\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n      \n      //console.log('box: ' + boxType);\n\n      var charmData = dntData.getData(charmFiles[i]);\n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [transferFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n    vm.matchingTransfers = [];\n    \n    for(var i=0;i<transfers.length;++i) {\n      var t = transfers[i];\n      if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n        \n        var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n        var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n        \n        vm.matchingTransfers.push({\n          level: t.ResultLevel,\n          enchantmentNum: t.ResultEnchantLevel,\n          gold: t.NeedCoin/100/100,\n          rank: hCodeValues.rankNames[t.ResultRank],\n          numItem1: t.NeedItemCount1,\n          item1: itemFactory.createBasicItem(item1s[0]),\n          numItem2: t.NeedItemCount2,\n          item2: itemFactory.createBasicItem(item2s[0]),\n        });\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ItemCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory','$timeout',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory,$timeout) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  // console.log('search string: ', $routeParams.i);\n  $scope.item = exportLinkHelper.decodeItem($routeParams.i);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    // console.log('changes');\n    if($scope.item.itemSource != 'custom') {\n      $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\n    }\n    else {\n      setFullStats();\n      $scope.item = angular.copy($scope.item);\n    }\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    $scope.preInitItem = $scope.item;\n    $scope.item = null;\n  \n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.preInitItem), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.preInitItem);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    // full stats are cleared when publishing builds\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n      \n    $scope.region = region;\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","(function () {\n'use strict';\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\n\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.maxDisplay = 15;\n  vm.totalNumResults = 0;\n  \n  jobs.init(null, function() {\n    if($routeParams.jobId) {\n      vm.job = jobs.getById($routeParams.jobId);\n      getClassBuilds();\n    } \n  })\n  \n  this.setJob = function() {\n    $timeout(function() {\n      $location.path('/build-search/' + vm.job.id);\n    });\n  }\n  \n  this.showMoreResults = function(extra) {\n    vm.maxDisplay = vm.totalNumResults + extra;\n    vm.totalNumResults = 0;\n  }\n  \n  vm.allResults = null;\n  vm.getFilteredBuilds = function() {\n    \n    // init\n    if(vm.allResults == null) {\n      vm.allResults = [];\n      for(var uid in vm.jobBuilds) {\n        for(var buildName in vm.jobBuilds[uid]) {\n          vm.allResults.push({\n            uid: uid,\n            name: buildName,\n            data: vm.jobBuilds[uid][buildName]\n          });\n        }\n      }\n    }\n    \n    var results = [];\n    for(var i=0;i<vm.allResults.length;++i) {\n      \n      var result = vm.allResults[i];\n      if(vm.filter && vm.filter.length > 0) {\n        var f = vm.filter.toUpperCase();\n        if(result.name.toUpperCase().indexOf(f) == -1) {\n          if(!result.data.guild ||\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\n\n            continue;\n          }\n        }\n      }\n      \n      results.push(result);\n\n      if(results.length >= vm.maxDisplay) {\n        break;\n      }\n    }\n    \n    vm.totalNumResults = results.length;\n    return results;\n  }\n  \n  function getClassBuilds() {\n    if(vm.job) {\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\n        if(builds) {\n          // console.log('got builds', builds);\n          vm.jobBuilds = builds;\n        }\n        else {\n          // console.log('no builds');\n          vm.jobBuilds = {};\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\n\nfunction profile($location, $routeParams, onlineService) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  \n  getSavedBuilds();\n  getProfile();\n  \n  function getSavedBuilds() {\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\n      if(builds) {\n        vm.storedBuilds = builds;\n      }\n      else {\n        vm.storedBuilds = {};\n      }\n    });\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.uid + '/' + buildName);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n    \n    $location.path('/build/' + newGroupName);\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\n\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.show = $routeParams.show;\n  \n  onlineService.login().then(function(user) {\n    getSavedBuilds();\n    getProfile();\n  \n    vm.builds = saveHelper.getSavedItems();\n  });\n  \n  function getSavedBuilds() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\n        if(builds) {\n          vm.storedBuilds = builds;\n        }\n        else {\n          vm.storedBuilds = {};\n        }\n      });\n    }\n  }\n  \n  function getProfile() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getProfile(user.uid).then(function(profile) {\n        if(profile) {\n          vm.profile = profile;\n        }\n        else {\n          vm.profile = {};\n        }\n      });\n    }\n  }\n  \n  this.saveProfile = function() {\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\n  }\n  \n  this.getUser = function() {\n    return onlineService.getUser();\n  }\n  \n  this.save = function(buildName, build) {\n    build.lastUpdate = (new Date()).getTime();\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\n    vm.publishBuild = null;\n  }\n  \n  this.startPublish = function(buildName) {\n    if(buildName in vm.storedBuilds) {\n      if(!vm.builds[buildName].region) {\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\n      }\n      \n      if(!vm.builds[buildName].about) {\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\n      }\n      \n      if(!vm.builds[buildName].guild) {\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\n      }\n    }\n    \n    if(!vm.builds[buildName].region) {\n      vm.builds[buildName].region = region.dntLocation.region;\n    }\n    \n    vm.publishBuild = buildName;\n  }\n  \n  function handleError(err) {\n    console.log(err);\n  }\n  \n  this.deleteAccount = function() {\n    onlineService.deleteAccount(vm.storedBuilds);\n  }\n  \n  this.openLocal = function(buildName) {\n    $location.path('/build/' + buildName);\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.getUser().uid + '/' + buildName);\n  }\n  \n  this.getBuildLimit = function() {\n    if(vm.profile && vm.profile.maxBuilds) {\n      return vm.profile.maxBuilds;\n    }\n    else {\n      return 15;\n    }\n  }\n  \n  this.getNumStoredBuilds = function() {\n    return _.size(vm.storedBuilds);\n  }\n  \n  this.getNumBuilds = function() {\n    return _.size(vm.builds);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  this.signOut = function() {\n    onlineService.signOut();\n  }\n  \n  vm.deleteLocal = function(buildName) {\n    vm.localToDelete = buildName;\n  }\n  \n  vm.getAllBuildNames = function() {\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\n    return _.uniq(allKeys.sort(), true);\n  }\n  \n  vm.reallyDeleteLocal = function(buildName) {\n    saveHelper.updatedSavedItems(buildName, []);\n    vm.localToDelete = null;\n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  vm.deleteServer = function(buildName) {\n    vm.serverToDelete = buildName;\n  }\n  \n  vm.reallyDeleteServer = function(buildName) {\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\n    vm.serverToDelete = null;\n  }\n  \n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\n\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  vm.buildName = $routeParams.buildName;\n  \n  getBuild();\n  getProfile();\n  \n  vm.copyLocally = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n      \n    $location.path('/build/' + newGroupName);\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  function getBuild() {\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\n      if(build) {\n        vm.build = build;\n        vm.stats = statHelper.getBuildStats(build);\n      }\n      else {\n        vm.build = {};\n      }\n    });\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimCustomItems', function() {\n  return {\n    scope: {},\n    bindToController: {\n    },\n    controller: ['$window','saveHelper','$location','hCodeValues','itemCategory','$timeout', customItemCtrl],\n    controllerAs: 'customItems',\n    templateUrl: 'ui/search/custom-items.html'\n  };\n});\n\nfunction customItemCtrl($window,saveHelper,$location,hCodeValues,itemCategory,$timeout) {\n  'use strict';\n\n  var vm = this;\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}\n\n})();","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  $scope.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\n  if(!$scope.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     $scope.itemCategory = itemCategory.byName(catName);\n     if($scope.itemCategory) {\n       // console.log('moving');\n       $location.path($scope.itemCategory.path);\n     }\n     return;\n  }\n  \n  $window.document.title = 'DN Gear Sim | ' + $scope.itemCategory.name.toUpperCase();\n  \n  $scope.job = {id: -1, name: ''};\n  $scope.jobs = [$scope.job];\n  $scope.allJobs = [];\n  $scope.minLevel = 1;\n  $scope.maxLevel = 99;\n  $scope.maxDisplay = 10;\n  $scope.totalNumResults = 0;\n  $scope.grades = hCodeValues.rankNames;\n  $scope.stat = {id:-1, name:''};\n  $scope.stats = [$scope.stat];\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.searchable) {\n      $scope.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    $scope.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    $scope.maxLevel = maxLevel;\n  }\n  \n  $scope.nameSearch = localStorage.getItem('nameSearch');\n  if($scope.nameSearch == null) {\n    $scope.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    $scope.stat = hCodeValues.stats[savedSearchStatId];\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  $scope.navigate = function() {\n    var catName = localStorage.getItem('selectedItemCategory');\n    if(catName) {\n      $scope.itemCategory = itemCategory.byName(catName);\n      if($scope.itemCategory) {\n        // console.log('navigating to ', $scope.itemCategory.path);\n        $location.path($scope.itemCategory.path);\n      }\n    }\n  }\n\n  $scope.save = function() {\n    if(!$scope.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', $scope.minLevel);\n      localStorage.setItem('maxLevel', $scope.maxLevel);\n    }\n    \n    if(!$scope.itemCategory.hideJob) {\n      if($scope.job != null) {\n        localStorage.setItem('jobNumber', $scope.job.id);\n      }\n    }\n  \n    if($scope.stat != null) {\n      localStorage.setItem('searchStat', $scope.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', $scope.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init($scope.itemCategory.name, $timeout);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, $scope.jobs[0]);\n      $scope.jobs = newJobs;\n      $scope.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            $scope.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  $scope.rankChecked = hCodeValues.checkedRank;\n  \n  $scope.getResults = function() {\n    // console.log('getting items');\n    var allItems = itemCategory.getItems($scope.itemCategory.name);\n    if(allItems == null) {\n      // console.log('no items');\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n    // console.log('got ', allItems);\n    \n    $scope.save();\n    \n    var start = new Date().getTime();\n          \n    var pcStatId = -1;\n    if('pc' in $scope.stat) {\n      pcStatId = $scope.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<$scope.maxDisplay || $scope.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e != null) {\n        \n        if(!$scope.itemCategory.hideLevel) {\n          if(e.levelLimit < $scope.minLevel || e.levelLimit > $scope.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideRank) {\n          if(e.rank != null && !$scope.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideJob) {\n          if($scope.job != null && $scope.job.id > 0) {\n            if(!$scope.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != $scope.itemCategory.name) {\n          continue;\n        }\n        // console.log('name filter', $scope.nameSearch); \n        \n        if($scope.nameSearch != '') {\n          // console.log('filtering on name');\n          var nameSearches = $scope.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [$scope.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if($scope.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s]\n            if(stat.id == $scope.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if($scope.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, $scope.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    $scope.totalNumResults = newResults.length;\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    \n    return newResults;\n  };\n  \n  $scope.showMoreResults = function(extra) {\n    $scope.maxDisplay = $scope.totalNumResults + extra;\n    $scope.totalNumResults = 0;\n  }\n  \n}]);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimSkillSearch', function() {\n  return {\n    scope: {},\n    bindToController: {\n      job: '=job',\n      jobs: '=jobs',\n    },\n    controller: ['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues','itemCategory','$location', skillSearchCtrl],\n    controllerAs: 'skillSearch',\n    templateUrl: 'ui/search/skill-search.html'\n  };\n});\n\nfunction skillSearchCtrl($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues,itemCategory,$location) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.allJobs = [];\n  this.maxDisplay = 60;\n  this.currentResults = 0;\n  this.dntName = '';\n  this.skills = [];\n  this.loadedJobId = -1;\n\n  this.itemCategory = itemCategory.byName('skills');\n\n  this.nameSearch = localStorage.getItem('nameSearch');\n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n\n  var classFactories = [];\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  this.navigate = function() {\n    $timeout(function() {\n      if(vm.itemCategory) {\n        $location.path(vm.itemCategory.path);\n      }\n    });\n  }\n  \n  this.isLoading = function() {\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { $timeout(translationsInit); } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName != null) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() {setupSkills(baseJobNames, vm.job);} ) });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n        return;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  this.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  this.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    \n    if(vm.job != null) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills && (curDisplay<vm.maxDisplay);++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(nameSearches.length == 0) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n      curDisplay++;\n    }\n    vm.currentResults = Math.min(curDisplay, vm.maxDisplay);\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}\n\n})();","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    this.boxes = null;\n    this.boxeContents = [];\n    this.maxDisplay = 10;\n    this.currentResults = 0;\n\n    this.nameSearch = localStorage.getItem('itemNameSearch');\n    if(this.nameSearch == null) {\n      this.nameSearch = '';\n    }\n    \n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    this.initBoxes = function() {\n      // console.log('init boxes');\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: vm.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n      }\n    }\n    \n    this.getResults = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return;\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n  \n    this.showMoreResults = function(extra) {\n      vm.maxDisplay = vm.totalNumResults + extra;\n      vm.totalNumResults = 0;\n    }\n    \n    this.translate = function(nameId, nameParam) {\n      return translations.translate(nameId, nameParam);\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\n\nfunction chooseClass() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      job: '=job',\n      onSetJob: '&onSetJob'\n    },\n    templateUrl: 'ui/widgets/choose-class.html',\n    controllerAs: 'ctrl',\n    controller: [\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \n      chooseClassController],\n  };\n}\n\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    if(job) {\n      this.onSetJob();\n    }\n  }\n  \n  \n  jobs.init(reportProgress, $timeout);\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      collapse: '=collapse',\n      cat: '=cat',\n      onChange: '&onChange'\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    controller: ['itemCategory', dnsimCategoryLinksController],\n    controllerAs: 'ctrl',\n  };\n};\n\nfunction dnsimCategoryLinksController(itemCategory) {\n\n  var vm = this;\n\n  vm.categories = itemCategory.categories;\n  vm.collapsed = true;\n\n  vm.setCategory = function(action) {\n    // console.log('setting cat', action);\n    vm.cat = action;\n    localStorage.setItem('selectedItemCategory', action.name);\n    \n    if(vm.collapse) {\n      vm.collapsed = !vm.collapsed;\n    }\n\n    if(vm.onChange) {\n      vm.onChange();\n    }\n  }\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n      \n      $scope.openItem = function() {\n        if(!$scope.noClick) {\n          $location.path($scope.itemLink);\n        }\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', [dnsimJobIcon]);\n\nfunction dnsimJobIcon() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    controller: dnsimJobIconController,\n    controllerAs: 'ctrl'\n  }\n}\n\nfunction dnsimJobIconController() {\n\n  this.getIconXPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return ((this.item.d.JobIcon % 9) * 44) + 5;\n    }\n    return 0;\n  }\n  \n  this.getIconYPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return (Math.floor(this.item.d.JobIcon / 9) * 44) + 5;\n    }\n    return 0;\n  }\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.numLoading = 0;\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if(!$scope.filter && 'hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToPercent', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + (value/100.0);\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10)*100;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h != null) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p != null) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation != null && \n              this.dntLocation.url != null &&\n              this.dntLocation.url.length > 0) {\n\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n  'use strict';\n  \n  return {\n    \n    encodeItem: function(item, small) {\n      if(item != null) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C'\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n          if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr != null) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString != null && itemString.length > 0) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = '#/view-group/' + region.dntLocation.region + '/?';\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var longUrl = window.location.href.split(\"#\")[0] + path;\n      var data = { longUrl: longUrl };\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(ds.length == 0) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(ps.length == 0) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(ps.length == 0) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(ps.length == 0) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem != null) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true,},\n      {path: 'search/skills', name:'skills', searchType: 'skills'},\n      {path: 'search/custom', name:'custom', searchType: 'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal != null) {\n            if(source.items == null && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items != null) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      else if(item.itemType == cat.name) {\n        return true;\n      }\n      else if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n        \n        return false;\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n      else {\n        return false;\n      }\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items != null) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item != null) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item != null && !(item.typeName in itemMap)) {\n            console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 29 &&\n        dType != 114 &&\n        dType != 79 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 24 &&\n        dType != 182 &&\n        dType != 78 &&\n        dType != 20 &&\n        dType != 46 &&\n        dType != 9 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(potentials.length == 0 && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var totalRatio = 0;\n          angular.forEach(potentials, function(value, key) {\n            totalRatio += value.PotentialRatio;\n          });\n          \n          var numPotentials = potentials.length;\n          if(numPotentials == 0) {\n            itemType.items.push(this.createItem(itemType.name, d, null, totalRatio));\n          }\n          else {\n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(this.createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p != null) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p != null) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio == null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p != null && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.lzjson', \n        partsDnt: 'partstable_common2016.lzjson', \n        weaponDnt: 'weapontable_common2016.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items != null) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs != null) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      \n      var numRows = data.length;\n      for(var r=0;r<numRows;++r) {\n        if(data[r].id == id) {\n          return data[r];\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs != null) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\n\nfunction onlineService($window, $q, hCodeValues) {\n  console.log('setup online service');\n  \n  var service = {\n    login: login,\n    getUser: function() {\n      return firebase.auth().currentUser;\n    },\n    signOut: signOut,\n    deleteAccount: deleteAccount,\n    \n    getUserBuilds: getUserBuilds,\n    deleteBuild: deleteBuild,\n    saveBuild: saveBuild,\n    getBuild: getBuild,\n    getClassBuilds: getClassBuilds,\n    \n    getProfile: getProfile,\n    saveProfile: saveProfile,\n  };\n  \n  init();\n  \n  return service;\n  \n  function init() {\n    console.log('init');\n    firebase.initializeApp({\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\n      authDomain: \"dngearsim.firebaseapp.com\",\n      databaseURL: \"https://dngearsim.firebaseio.com\",\n      storageBucket: \"dngearsim.appspot.com\",\n    });\n  }\n  \n  function login() {\n    return $q(function(resolve, reject) {\n      var auth = firebase.auth();\n        \n      auth.onAuthStateChanged(function(user) {\n        if(user == null) {\n          console.log('redirecting');\n          $window.location.href = 'login.html';\n        }\n        else {\n          console.log('logged in');\n          resolve(user);\n        }\n      });\n    });\n  }\n  \n  function getProfile(uid) {\n    console.log('get profile');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(storedProfile.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getBuild(uid, buildName) {\n    console.log('get build');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(decompressBuild(storedProfile.val()));\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function saveProfile(profile) {\n    return $q(function(resolve, reject) {\n      var user = service.getUser();\n      if(user) {\n        profile = angular.copy(profile);\n        deleteNullProperties(profile, true);\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\n      }\n    });\n  }\n  \n  function getUserBuilds(uid) {\n    console.log('get builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds');\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\n        if(storedBuilds) {\n          var retVal = {};\n          var val = storedBuilds.val();\n          for(var buildName in val) {\n            retVal[buildName] = decompressBuild(val[buildName]);\n          }\n          resolve(retVal);\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getClassBuilds(job) {\n    console.log('get class builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds', job.id);\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\n        console.log('ok');\n        if(jobBuilds) {\n          resolve(jobBuilds.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function compressBuild(build) {\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        delete item.fullStats;\n      });\n    }\n    \n    var stringifiedData = JSON.stringify(build);\n    return LZString.compressToUTF16(stringifiedData);\n  }\n  \n  function decompressBuild(compressedBuild) {\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\n    var build = JSON.parse(stringifiedData);\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        item.fullStats = item.stats;\n        \n        if(item.enchantmentStats != null && item.enchantmentStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\n        }\n        \n        if(item.sparkStats != null && item.sparkStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\n        }\n      });\n    }\n    \n    return build;\n  }\n  \n  function saveBuild(buildName, build) {\n    var user = service.getUser();\n    var actions = [];\n    if(user) {\n      build = angular.copy(build);\n      deleteNullProperties(build, true);\n      // console.log('saving', build);\n      actions.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\n      );\n      \n      if(build.job && build.job.id) {\n        console.log('saving build');\n          \n        var data = {};\n        if(build.playerLevel) {\n          data.lev = build.playerLevel;\n        }\n        if(build.region) {\n          data.region = build.region;\n        }\n        if(build.guild) {\n          data.guild = build.guild;\n        }\n        if(build.about) {\n          data.about = build.about;\n        }\n        \n        deleteNullProperties(data, true);\n          \n        actions.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\n        );\n      }\n    }\n    return $q.all(actions);\n  }\n  \n  function deleteNullProperties(test, recurse) {\n    for (var i in test) {\n        if (test[i] === undefined) {\n            delete test[i];\n        } else if (recurse && typeof test[i] === 'object') {\n            deleteNullProperties(test[i], recurse);\n        }\n    }\n  }\n  \n  function signOut() {\n    var auth = firebase.auth();\n    return $q(function(resolve, reject) {\n      auth.signOut().then(function() {\n        resolve();\n      }, function(error) {\n        reject();\n      });\n    });\n  }\n  \n  function deleteAccount(builds) {\n    var auth = firebase.auth();\n    var user = service.getUser();\n    \n    return $q(function(resolve, reject) {\n      \n      var pList = [\n        firebase.database().ref('builds/' + user.uid).remove(),\n        firebase.database().ref('profile/' + user.uid).remove(),\n        firebase.database().ref('private/' + user.uid).remove()];\n        \n      var jobIds = [];\n      for(var buildName in builds) {\n        if(builds[buildName].job) {\n          jobIds.push(builds[buildName].job.id)\n        }\n      }\n      \n      jobIds = _.uniq(jobIds);\n      _.each(jobIds, function(id) {\n        pList.push(\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\n        )\n      });\n        \n      $q.all(pList).then(function() {\n        console.log('deleted data');\n        user.delete().then(function() {\n          console.log('deleted user');\n          auth.signOut().then(function() {\n            console.log('signed out');\n            resolve();\n          }, function(error) {\n            reject();\n          });\n        });\n      });\n    });\n  }\n  \n  function deleteBuild(buildName, build) {\n    \n    var pList = [];\n    var user = service.getUser();\n    if(user) {\n      pList.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\n      \n      if(build.job) {\n        pList.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\n      }\n    }\n    \n    return $q.all(pList);\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            if(build.items) {\n              for(var i=0;i<build.items.length;++i) {\n                if(build.items[i].exchangeType == exId) {\n                  numExchange++;\n                }\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality high grade' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            // todo: change this to use the name id\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n              \n            if(id == 999) {\n              return index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality high grade epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n            if(id == 999) {\n              return item.rank.id == 3 && index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n              case 1313: // Jakard's Demise\n              case 2032: // Sharing Goddess's Grief\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'expedition plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      {region: 'ina', name: 'indonesian files from gemscool', url : 'https://inafiles-da491.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        angular.forEach(this.translationResettingEvents, function(event, index) {\n          event();\n        });\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation != null) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      this.setCurrentBuild(buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(updatedItems.length == 0) {\n          delete items[groupName];\n          this.setCurrentBuild(null);\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    currentBuild: null,\n    getCurrentBuild: function() {\n      if(!this.currentBuild) {\n        this.currentBuild = localStorage.getItem('currentGroup');\n        if(this.currentBuild) {\n          var savedItems = this.getSavedItems();\n          if(!(this.currentBuild in savedItems)) {\n            localStorage.removeItem('currentGroup');\n            this.currentBuild = null;\n          }\n        }\n      }\n      \n      return this.currentBuild;\n    },\n    \n    setCurrentBuild: function(buildName) {\n      this.currentBuild = buildName;\n      localStorage.setItem('currentGroup', buildName);\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        var setStats = [];\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null) {\n          \n          if(value.fullStats != null) {\n            stats = stats.concat(value.fullStats);\n          }\n          else {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      var itemCrit = dupeStat(1012);\n      \n      var critChance = Math.min(0.89, (crit.max / Number(group.enemyStatCaps.Ccritical)) + itemCrit.max);\n      retVal.push({id: 1012, max: critChance})\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.enemyStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats != null && build.heroStats.length > 0) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location != null && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, dps: true, pc: 50, skPc: 4050, searchable: true },\n      1  : {id: 1, name: 'agi', display: toNoDec, dps: true, pc: 51, skPc: 4051, searchable: true },\n      2  : {id: 2, name: 'int', display: toNoDec, dps: true, pc: 52, skPc: 4052, searchable: true },\n      3  : {id: 3, name: 'vit', display: toNoDec, def: true, pc: 53, skPc: 4053, searchable: true },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, dps: true, pc: 54, searchable: true },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, dps: true, pc: 56, searchable: true },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'pdef', display: inThousands, def: true, pc: 58, searchable: true },\n      9  : {id: 9, name: 'mdef', display: inThousands, def: true, pc: 59, searchable: true },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, dps: true, pc: 62, searchable: true },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, dps: true, searchable: true },\n      17 : {id: 17, name: 'ice%', display: toPercent, dps: true, searchable: true },\n      18 : {id: 18, name: 'light%', display: toPercent, dps: true, searchable: true },\n      19 : {id: 19, name: 'dark%', display: toPercent, dps: true, searchable: true },\n      20 : {id: 20, name: 'fire def', display: toPercent, def: true, searchable: true },\n      21 : {id: 21, name: 'ice def', display: toPercent, def: true, searchable: true },\n      22 : {id: 22, name: 'light def', display: toPercent, def: true, searchable: true },\n      23 : {id: 23, name: 'dark def', display: toPercent, def: true, searchable: true },\n      25 : {id: 25, name: 'hp', display: inThousands, def: true, pc: 75, skPc: 4075, searchable: true },\n      26 : {id: 26, name: 'mp', display: inThousands, def: true, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, dps: true, searchable: true },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, dps: true, pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, dps: true, pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent, dps: true },\n      51 : {id: 51, name: 'agi%', display: toPercent, dps: true },\n      52 : {id: 52, name: 'int%', display: toPercent, dps: true },\n      53 : {id: 53, name: 'vit%', display: toPercent, def: true },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55, dps: true },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57, dps: true },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'pdef%', display: toPercent, def: true },\n      59 : {id: 59, name: 'mdef%', display: toPercent, def: true },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true, def: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true, def: true },\n      62 : {id: 62, name: 'crit%', display: toPercent, dps: true },\n      63 : {id: 63, name: 'crit resist%', display: toPercent, def: true },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true, def: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true, def: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true, def: true },\n      75 : {id: 75, name: 'hp%', display: toPercent, def: true },\n      76 : {id: 76, name: 'mp%', display: toPercent, def: true },\n      77 : {id: 77, name: 'mp recover%', display: toPercent, def: true },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true, def: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true, dps: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true, dps: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, dps: true, pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true, dps: true },\n      105: {id: 104, name: 'pvp dmg', display: inThousands, noCustom: true, dps: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true, def: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      \n      1008: {id: 1008, name: 'pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent },\n      3001: {id: 3001, name: 'skPDmg%', display: toPercent },\n      3002: {id: 3002, name: 'skMDmg%', display: toPercent },\n      \n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true, hide: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands },\n      4050: {id: 4050, name: 'skStr%', display: toPercent },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent },\n      4052: {id: 4052, name: 'skInt%', display: toPercent },\n      4053: {id: 4053, name: 'skVit%', display: toPercent },\n      4075: {id: 4075, name: 'skHp%', display: toPercent },\n      4076: {id: 4076, name: 'skMp%', display: toPercent },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      // 134 : { id: 134, name: 'p dmg reduction%' },\n      // 135 : { id: 135, name: 'm dmg reduction%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}
=======
{"version":3,"sources":["routes.js","about/about.js","filters/filters.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","nav/export.js","nav/nav.js","nav/setup.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","region/region.js","search/custom-items.js","search/item-search.js","search/skill-search.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","widgets/dnsim-string-to-percent.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","filter","input","Math","round","$stateful","$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset","tryInit","vm","reloaded","allLoaded","files","getDntFiles","build","forEach","columns","fileName","isLoaded","newItems","reloadGroup","buildName","updatedSavedItems","items","onChange","progress","this","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","job","damageType","element","secondaryElement","enemyStatCaps","playerStatCaps","conversions","baseStats","heroStats","init","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","directive","scope","bindToController","controllerAs","item","$routeParams","setupBuilds","savedItems","getSavedItems","buildNames","Object","keys","sort","builds","i","length","push","name","groupName","currentGroup","saveBuildSelection","anyItems","createGroup","handleChange","toggleGroup","url","publish","search","stats","getBuildStats","itemsByCategory","getItemsByCategory","getSaveDate","group","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","jobs","itemColumnsToLoad","character","saveGroup","calcStatPercent","newVal","origVal","scrollTo","groupNames","getCurrentBuild","getGroupCalcStats","groupCalcStats","getCalculatedStats","getBuild","pickup","index","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","mergeStats","nextGroup","uptoItem","updateRows","prevGroup","foundGroup","headers","summaryStatIds","id","summaryDisplay","pcIndexes","rows","typeName","pcIndex","enchantmentNum","rowIndex","makeFakeCells","data","makeCell","num","click","col","move","swapEnchantmentNumber","setTalisman","splice","replaceAffectAmount","newEnhancementNum","extraStats","stat","max","enchantmentStats","fullStats","getReplaceAffectAmount","statId","itemIndex","initReplaceAffects","item2","fullStats1","fullStats2","gItem","newStats","origStats","getStat","getStatName","retVal","eleId","elements","len","save","selectedCategory","localStorage","category","byName","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","value","setItem","allowMoreItems","maxCat","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","sparkTypeId","increasingGemSlots","number","numItems","cat","numItemText","removeItem","newItemList","server","newGroup","oldGroupName","damageTypes","getFinalJobs","allJobs","finalJobs","j","getBaseJobName","bJob","newJobs","key","setHeroStats","setJob","getStatCap","colName","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","datas","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","anyLoading","cancel","reloadItem","saveItem","reset","start","hasOptions","back","pop","testOptions","$scope","region","getById","setLocationByName","g","e","p","h","d","t","s","itemString","split","itemStr","decodeItem","isLoading","newBuildName","clearGroup","addAffectAmount","groupItems","$watch","getAddAffectAmount","initAddAffects","getGroupItems","numMatches","str","itemSplit","indexOf","exchangeType","itemSource","a","b","hasMaxExchangable","maxExchange","addToGroup","replace","replaceItem","statMap","_","newValue","oldValue","anyChange","Number","found","each","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","setEnchantment","EnchantLevel","getStats","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","find","showMaterials","materials","itemId","itemCount","translate","NameID","NameIDParam","material","icon","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","msg","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkDnt","amount","itemFactory","typeId","console","log","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","getCharmItems","TypeParam1","getPouchItems","boxType","f","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Disjointamount","getPlates","plateFile","r","row","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","initTransfers","transfers","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","getJobName","getAllJobs","needJobClass","jobName","preInitItem","anyToLoad","setFullStats","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","getDescription","description","mainDnt","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","dntLocation","encodeItem","copy","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","noLocationMenu","normalMenu","buildAction","withBuildMenu","isSearch","startedLoading","tlocation","noRegion","fireAction","action","getActions","menu","currentBuild","extraCss","$route","dntInit","translationsStatus","progressTranslations","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","buildSearch","onlineService","getClassBuilds","then","jobBuilds","maxDisplay","totalNumResults","jobId","showMoreResults","extra","allResults","getFilteredBuilds","uid","results","result","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","openServer","load","user","getUser","handleError","err","show","login","saveProfile","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","openLocal","getBuildLimit","maxBuilds","getNumStoredBuilds","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","copyLocally","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","customItemCtrl","customItems","currentResults","nameSearch","getResults","getNewStatName","createCustomItem","jobInit","lastJobNumber","byPath","catName","minLevel","maxLevel","grades","searchable","savedSearchStatId","navigate","hideLevel","hideJob","rankChecked","checkedRank","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideRank","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","skillSearchCtrl","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","translationsInit","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","boxeContents","initBoxes","box","numBoxes","nameId","nameParam","chooseClass","restrict","onSetJob","chooseClassController","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","collapse","dnsimCategoryLinksController","collapsed","setCategory","dnsimItemIcon","link","attrs","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","openItem","dnsimJobIcon","dnsimJobIconController","JobIcon","dnsimLoading","transclude","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","display","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","hasStartedLoading","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","searchType","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","deleteNullProperties","set","compressBuild","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","expedition plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","setCurrentBuild","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","itemCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","dps","1","2","3","4","5","6","7","8","9","10","noCustom","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","105","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items/', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/build/:groupName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:groupName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      reloadOnSearch: false,\n    }).\n    \n    when('/search/:itemType?', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    \n    when('/item/:region?/:i*', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/profile/:uid', {\n      templateUrl: 'ui/online/profile.html',\n      controller: 'ProfileCtrl as ctrl',\n    }).\n    \n    when('/published/:uid/:buildName*', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/build-search/:jobId?', {\n      templateUrl: 'ui/online/build-search.html',\n      controller: 'BuildSearchCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n})();","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/build/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$routeParams','$timeout','saveHelper',\n  function($window,$location,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('groupName' in $routeParams) {\n      if($routeParams.groupName != this.currentGroup) {\n        this.currentGroup = $routeParams.groupName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/build/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      // console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/build/' + buildName);\n    }\n    \n    this.publish = function() {\n      $location.url('/publish');\n    }\n    \n    this.search = function() {\n      $location.url('/build-search');\n    }\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    // console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/build/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\n    if(vm.category.name in itemsByCat) {\n      return itemsByCat[vm.category.name];\n    }\n    else {\n      return [];\n    }\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.onChange();\n  }\n  \n  this.removeItem = function(item) {\n    item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n\n    vm.build.items = newItemList;\n    vm.stats = statHelper.getBuildStats(vm.build);\n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.onChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange',\n      server: '=server'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('groupName' in $routeParams) {\n      this.groupName = $routeParams.groupName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function() {\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/build/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      // console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      // console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/build/' + newBuildName);\n    }\n  }]\n);\n","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory','$scope',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory,$scope) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    vm.addAffectAmount = null;\n    vm.replaceAffectAmount = {};\n\n    vm.groupItems = null;\n    vm.groupCalcStats = null\n  }\n\n  $scope.$watch('editCtrl.item', function() {\n    // console.log('item changed');\n    vm.clearGroup();\n  });\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    // console.log('add affect: ', this.addAffectAmount[stat], this.item);\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    // console.log('initialising add affects ');\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = [];\n    if(group.items) {\n      newItems = group.items.concat([vm.item]);\n    }\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues','$scope',\nfunction(hCodeValues,$scope) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n\n  this.statMap = {};\n  \n  // console.log(vm.item.stats);\n  _.forEach(vm.item.stats, function(stat) {\n    // console.log('got stat', stat.id);\n    vm.statMap[stat.id] = stat.max;\n  });\n  \n  for(var statId in hCodeValues.stats) {\n    $scope.$watch('editCtrl.statMap[' + statId + ']', function(newValue, oldValue) { \n\n      if(newValue != oldValue) {\n        // console.log(statId);\n        // console.log('watch got stat value', newValue);\n\n        var anyChange = false;\n        var newStats = [];\n        for(var statId in vm.statMap) {\n\n          if(!vm.statMap[statId] || !Number(vm.statMap[statId])) {\n            _.each(vm.item.stats, function(stat) { \n              if(stat.id == statId) {\n                anyChange = true;\n              }\n            });\n          }\n          else {\n            newStats.push({\n              id: Number(statId),\n              max: Number(vm.statMap[statId])\n            });\n\n            var found = false;\n            _.each(vm.item.stats, function(stat) {\n              if(stat.id == statId) {\n                found = true;\n                // console.log('comparing', stat.max, vm.statMap[statId]);\n                if(!(statId in vm.statMap) || stat.max != vm.statMap[statId]) {\n                  anyChange = true;\n                }\n              } \n            });\n\n            if(!found) {\n              anyChange = true;\n            }\n          }\n        }\n\n        if(anyChange) {\n          // console.log('GOT CHANGES!', newStats);\n          vm.item.stats = newStats;\n          vm.onChange();\n        }\n      }\n    });\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    //console.log('init contents');\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        vm.getPouchItems(d.TypeParam1);\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType) {\n    for(var f=0;f<pouchFileNames.length;++f) {\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\n    }\n  }\n  \n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            // console.log('adding item ' + pouchItem);\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\n              // console.log('found item ' + basicItem.name);\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: basicItem\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n      \n      //console.log('box: ' + boxType);\n\n      var charmData = dntData.getData(charmFiles[i]);\n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [transferFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n    vm.matchingTransfers = [];\n    \n    for(var i=0;i<transfers.length;++i) {\n      var t = transfers[i];\n      if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n        \n        var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n        var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n        \n        vm.matchingTransfers.push({\n          level: t.ResultLevel,\n          enchantmentNum: t.ResultEnchantLevel,\n          gold: t.NeedCoin/100/100,\n          rank: hCodeValues.rankNames[t.ResultRank],\n          numItem1: t.NeedItemCount1,\n          item1: itemFactory.createBasicItem(item1s[0]),\n          numItem2: t.NeedItemCount2,\n          item2: itemFactory.createBasicItem(item2s[0]),\n        });\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ItemCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory','$timeout',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory,$timeout) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  // console.log('search string: ', $routeParams.i);\n  $scope.item = exportLinkHelper.decodeItem($routeParams.i);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    // console.log('changes');\n    if($scope.item.itemSource != 'custom') {\n      $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\n    }\n    else {\n      setFullStats();\n      $scope.item = angular.copy($scope.item);\n    }\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    $scope.preInitItem = $scope.item;\n    $scope.item = null;\n  \n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.preInitItem), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.preInitItem);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    // full stats are cleared when publishing builds\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory','saveHelper',\n  function($scope,$location,translations,region,itemCategory,saveHelper) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n    \n    var buildAction = {path: 'build', name:'build', icon: 'wrench'};\n    \n    var withBuildMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      buildAction,\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.fireAction = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          $location.path('/' + action.path + '/' + cat);\n        }\n        else {\n          $location.path('/' + action.path);\n        }\n      }\n      else {\n          $location.path('/' + action.path);\n      }\n    }\n      \n    $scope.getActions = function() {\n      console.log('getting actions');\n      var menu = null;\n      \n      var currentBuild = saveHelper.getCurrentBuild();\n      if(currentBuild) {\n        var savedItems = saveHelper.getSavedItems();\n        if(!(currentBuild in savedItems)) {\n          currentBuild = null;\n        }\n      }\n\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(currentBuild && currentBuild != 'null') {\n        menu = withBuildMenu;\n        buildAction.path = 'build/' + currentBuild;\n        buildAction.name = currentBuild;\n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          if(value.path != 'builds' || $location.path() == '/builds') {\n            value.extraCss = 'active';\n          }\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","(function () {\n'use strict';\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\n\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.maxDisplay = 15;\n  vm.totalNumResults = 0;\n  \n  jobs.init(null, function() {\n    if($routeParams.jobId) {\n      vm.job = jobs.getById($routeParams.jobId);\n      getClassBuilds();\n    } \n  })\n  \n  this.setJob = function() {\n    $timeout(function() {\n      $location.path('/build-search/' + vm.job.id);\n    });\n  }\n  \n  this.showMoreResults = function(extra) {\n    vm.maxDisplay = vm.totalNumResults + extra;\n    vm.totalNumResults = 0;\n  }\n  \n  vm.allResults = null;\n  vm.getFilteredBuilds = function() {\n    \n    // init\n    if(vm.allResults == null) {\n      vm.allResults = [];\n      for(var uid in vm.jobBuilds) {\n        for(var buildName in vm.jobBuilds[uid]) {\n          vm.allResults.push({\n            uid: uid,\n            name: buildName,\n            data: vm.jobBuilds[uid][buildName]\n          });\n        }\n      }\n    }\n    \n    var results = [];\n    for(var i=0;i<vm.allResults.length;++i) {\n      \n      var result = vm.allResults[i];\n      if(vm.filter && vm.filter.length > 0) {\n        var f = vm.filter.toUpperCase();\n        if(result.name.toUpperCase().indexOf(f) == -1) {\n          if(!result.data.guild ||\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\n\n            continue;\n          }\n        }\n      }\n      \n      results.push(result);\n\n      if(results.length >= vm.maxDisplay) {\n        break;\n      }\n    }\n    \n    vm.totalNumResults = results.length;\n    return results;\n  }\n  \n  function getClassBuilds() {\n    if(vm.job) {\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\n        if(builds) {\n          // console.log('got builds', builds);\n          vm.jobBuilds = builds;\n        }\n        else {\n          // console.log('no builds');\n          vm.jobBuilds = {};\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\n\nfunction profile($location, $routeParams, onlineService) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  \n  getSavedBuilds();\n  getProfile();\n  \n  function getSavedBuilds() {\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\n      if(builds) {\n        vm.storedBuilds = builds;\n      }\n      else {\n        vm.storedBuilds = {};\n      }\n    });\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.uid + '/' + buildName);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n    \n    $location.path('/build/' + newGroupName);\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\n\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.show = $routeParams.show;\n  \n  onlineService.login().then(function(user) {\n    getSavedBuilds();\n    getProfile();\n  \n    vm.builds = saveHelper.getSavedItems();\n  });\n  \n  function getSavedBuilds() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\n        if(builds) {\n          vm.storedBuilds = builds;\n        }\n        else {\n          vm.storedBuilds = {};\n        }\n      });\n    }\n  }\n  \n  function getProfile() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getProfile(user.uid).then(function(profile) {\n        if(profile) {\n          vm.profile = profile;\n        }\n        else {\n          vm.profile = {};\n        }\n      });\n    }\n  }\n  \n  this.saveProfile = function() {\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\n  }\n  \n  this.getUser = function() {\n    return onlineService.getUser();\n  }\n  \n  this.save = function(buildName, build) {\n    build.lastUpdate = (new Date()).getTime();\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\n    vm.publishBuild = null;\n  }\n  \n  this.startPublish = function(buildName) {\n    if(buildName in vm.storedBuilds) {\n      if(!vm.builds[buildName].region) {\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\n      }\n      \n      if(!vm.builds[buildName].about) {\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\n      }\n      \n      if(!vm.builds[buildName].guild) {\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\n      }\n    }\n    \n    if(!vm.builds[buildName].region) {\n      vm.builds[buildName].region = region.dntLocation.region;\n    }\n    \n    vm.publishBuild = buildName;\n  }\n  \n  function handleError(err) {\n    console.log(err);\n  }\n  \n  this.deleteAccount = function() {\n    onlineService.deleteAccount(vm.storedBuilds);\n  }\n  \n  this.openLocal = function(buildName) {\n    $location.path('/build/' + buildName);\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.getUser().uid + '/' + buildName);\n  }\n  \n  this.getBuildLimit = function() {\n    if(vm.profile && vm.profile.maxBuilds) {\n      return vm.profile.maxBuilds;\n    }\n    else {\n      return 15;\n    }\n  }\n  \n  this.getNumStoredBuilds = function() {\n    return _.size(vm.storedBuilds);\n  }\n  \n  this.getNumBuilds = function() {\n    return _.size(vm.builds);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  this.signOut = function() {\n    onlineService.signOut();\n  }\n  \n  vm.deleteLocal = function(buildName) {\n    vm.localToDelete = buildName;\n  }\n  \n  vm.getAllBuildNames = function() {\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\n    return _.uniq(allKeys.sort(), true);\n  }\n  \n  vm.reallyDeleteLocal = function(buildName) {\n    saveHelper.updatedSavedItems(buildName, []);\n    vm.localToDelete = null;\n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  vm.deleteServer = function(buildName) {\n    vm.serverToDelete = buildName;\n  }\n  \n  vm.reallyDeleteServer = function(buildName) {\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\n    vm.serverToDelete = null;\n  }\n  \n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\n\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  vm.buildName = $routeParams.buildName;\n  \n  getBuild();\n  getProfile();\n  \n  vm.copyLocally = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n      \n    $location.path('/build/' + newGroupName);\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  function getBuild() {\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\n      if(build) {\n        vm.build = build;\n        vm.stats = statHelper.getBuildStats(build);\n      }\n      else {\n        vm.build = {};\n      }\n    });\n  }\n}\n\n})();","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n      \n    $scope.region = region;\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimCustomItems', function() {\n  return {\n    scope: {},\n    bindToController: {\n    },\n    controller: ['$window','saveHelper','$location','hCodeValues','itemCategory','$timeout', customItemCtrl],\n    controllerAs: 'customItems',\n    templateUrl: 'ui/search/custom-items.html'\n  };\n});\n\nfunction customItemCtrl($window,saveHelper,$location,hCodeValues,itemCategory,$timeout) {\n  'use strict';\n\n  var vm = this;\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}\n\n})();","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  $scope.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\n  if(!$scope.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     $scope.itemCategory = itemCategory.byName(catName);\n     if($scope.itemCategory) {\n       // console.log('moving');\n       $location.path($scope.itemCategory.path);\n     }\n     return;\n  }\n  \n  $window.document.title = 'DN Gear Sim | ' + $scope.itemCategory.name.toUpperCase();\n  \n  $scope.job = {id: -1, name: ''};\n  $scope.jobs = [$scope.job];\n  $scope.allJobs = [];\n  $scope.minLevel = 1;\n  $scope.maxLevel = 99;\n  $scope.maxDisplay = 10;\n  $scope.totalNumResults = 0;\n  $scope.grades = hCodeValues.rankNames;\n  $scope.stat = {id:-1, name:''};\n  $scope.stats = [$scope.stat];\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.searchable) {\n      $scope.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    $scope.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    $scope.maxLevel = maxLevel;\n  }\n  \n  $scope.nameSearch = localStorage.getItem('nameSearch');\n  if($scope.nameSearch == null) {\n    $scope.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    $scope.stat = hCodeValues.stats[savedSearchStatId];\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  $scope.navigate = function() {\n    var catName = localStorage.getItem('selectedItemCategory');\n    if(catName) {\n      $scope.itemCategory = itemCategory.byName(catName);\n      if($scope.itemCategory) {\n        // console.log('navigating to ', $scope.itemCategory.path);\n        $location.path($scope.itemCategory.path);\n      }\n    }\n  }\n\n  $scope.save = function() {\n    if(!$scope.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', $scope.minLevel);\n      localStorage.setItem('maxLevel', $scope.maxLevel);\n    }\n    \n    if(!$scope.itemCategory.hideJob) {\n      if($scope.job != null) {\n        localStorage.setItem('jobNumber', $scope.job.id);\n      }\n    }\n  \n    if($scope.stat != null) {\n      localStorage.setItem('searchStat', $scope.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', $scope.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init($scope.itemCategory.name, $timeout);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, $scope.jobs[0]);\n      $scope.jobs = newJobs;\n      $scope.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            $scope.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  $scope.rankChecked = hCodeValues.checkedRank;\n  \n  $scope.getResults = function() {\n    // console.log('getting items');\n    var allItems = itemCategory.getItems($scope.itemCategory.name);\n    if(allItems == null) {\n      // console.log('no items');\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n    // console.log('got ', allItems);\n    \n    $scope.save();\n    \n    var start = new Date().getTime();\n          \n    var pcStatId = -1;\n    if('pc' in $scope.stat) {\n      pcStatId = $scope.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<$scope.maxDisplay || $scope.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e != null) {\n        \n        if(!$scope.itemCategory.hideLevel) {\n          if(e.levelLimit < $scope.minLevel || e.levelLimit > $scope.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideRank) {\n          if(e.rank != null && !$scope.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideJob) {\n          if($scope.job != null && $scope.job.id > 0) {\n            if(!$scope.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != $scope.itemCategory.name) {\n          continue;\n        }\n        // console.log('name filter', $scope.nameSearch); \n        \n        if($scope.nameSearch != '') {\n          // console.log('filtering on name');\n          var nameSearches = $scope.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [$scope.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if($scope.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s]\n            if(stat.id == $scope.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if($scope.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, $scope.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    $scope.totalNumResults = newResults.length;\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    \n    return newResults;\n  };\n  \n  $scope.showMoreResults = function(extra) {\n    $scope.maxDisplay = $scope.totalNumResults + extra;\n    $scope.totalNumResults = 0;\n  }\n  \n}]);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimSkillSearch', function() {\n  return {\n    scope: {},\n    bindToController: {\n      job: '=job',\n      jobs: '=jobs',\n    },\n    controller: ['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues','itemCategory','$location', skillSearchCtrl],\n    controllerAs: 'skillSearch',\n    templateUrl: 'ui/search/skill-search.html'\n  };\n});\n\nfunction skillSearchCtrl($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues,itemCategory,$location) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.allJobs = [];\n  this.maxDisplay = 60;\n  this.currentResults = 0;\n  this.dntName = '';\n  this.skills = [];\n  this.loadedJobId = -1;\n\n  this.itemCategory = itemCategory.byName('skills');\n\n  this.nameSearch = localStorage.getItem('nameSearch');\n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n\n  var classFactories = [];\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  this.navigate = function() {\n    $timeout(function() {\n      if(vm.itemCategory) {\n        $location.path(vm.itemCategory.path);\n      }\n    });\n  }\n  \n  this.isLoading = function() {\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { $timeout(translationsInit); } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName != null) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() {setupSkills(baseJobNames, vm.job);} ) });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n        return;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  this.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  this.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    \n    if(vm.job != null) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills && (curDisplay<vm.maxDisplay);++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(nameSearches.length == 0) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n      curDisplay++;\n    }\n    vm.currentResults = Math.min(curDisplay, vm.maxDisplay);\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}\n\n})();","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    this.boxes = null;\n    this.boxeContents = [];\n    this.maxDisplay = 10;\n    this.currentResults = 0;\n\n    this.nameSearch = localStorage.getItem('itemNameSearch');\n    if(this.nameSearch == null) {\n      this.nameSearch = '';\n    }\n    \n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    this.initBoxes = function() {\n      // console.log('init boxes');\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: vm.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n      }\n    }\n    \n    this.getResults = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return;\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n  \n    this.showMoreResults = function(extra) {\n      vm.maxDisplay = vm.totalNumResults + extra;\n      vm.totalNumResults = 0;\n    }\n    \n    this.translate = function(nameId, nameParam) {\n      return translations.translate(nameId, nameParam);\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\n\nfunction chooseClass() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      job: '=job',\n      onSetJob: '&onSetJob'\n    },\n    templateUrl: 'ui/widgets/choose-class.html',\n    controllerAs: 'ctrl',\n    controller: [\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \n      chooseClassController],\n  };\n}\n\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    if(job) {\n      this.onSetJob();\n    }\n  }\n  \n  \n  jobs.init(reportProgress, $timeout);\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      collapse: '=collapse',\n      cat: '=cat',\n      onChange: '&onChange'\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    controller: ['itemCategory', dnsimCategoryLinksController],\n    controllerAs: 'ctrl',\n  };\n};\n\nfunction dnsimCategoryLinksController(itemCategory) {\n\n  var vm = this;\n\n  vm.categories = itemCategory.categories;\n  vm.collapsed = true;\n\n  vm.setCategory = function(action) {\n    // console.log('setting cat', action);\n    vm.cat = action;\n    localStorage.setItem('selectedItemCategory', action.name);\n    \n    if(vm.collapse) {\n      vm.collapsed = !vm.collapsed;\n    }\n\n    if(vm.onChange) {\n      vm.onChange();\n    }\n  }\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n      \n      $scope.openItem = function() {\n        if(!$scope.noClick) {\n          $location.path($scope.itemLink);\n        }\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', [dnsimJobIcon]);\n\nfunction dnsimJobIcon() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    controller: dnsimJobIconController,\n    controllerAs: 'ctrl'\n  }\n}\n\nfunction dnsimJobIconController() {\n\n  this.getIconXPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return ((this.item.d.JobIcon % 9) * 44) + 5;\n    }\n    return 0;\n  }\n  \n  this.getIconYPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return (Math.floor(this.item.d.JobIcon / 9) * 44) + 5;\n    }\n    return 0;\n  }\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.numLoading = 0;\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if(!$scope.filter && 'hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToPercent', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + (value/100.0);\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10)*100;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h != null) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p != null) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation != null && \n              this.dntLocation.url != null &&\n              this.dntLocation.url.length > 0) {\n\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n  'use strict';\n  \n  return {\n    \n    encodeItem: function(item, small) {\n      if(item != null) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C'\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n          if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr != null) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString != null && itemString.length > 0) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = '#/view-group/' + region.dntLocation.region + '/?';\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var longUrl = window.location.href.split(\"#\")[0] + path;\n      var data = { longUrl: longUrl };\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(ds.length == 0) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(ps.length == 0) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(ps.length == 0) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(ps.length == 0) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem != null) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true,},\n      {path: 'search/skills', name:'skills', searchType: 'skills'},\n      {path: 'search/custom', name:'custom', searchType: 'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal != null) {\n            if(source.items == null && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items != null) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      else if(item.itemType == cat.name) {\n        return true;\n      }\n      else if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n        \n        return false;\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n      else {\n        return false;\n      }\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items != null) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item != null) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item != null && !(item.typeName in itemMap)) {\n            console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 29 &&\n        dType != 114 &&\n        dType != 79 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 24 &&\n        dType != 182 &&\n        dType != 78 &&\n        dType != 20 &&\n        dType != 46 &&\n        dType != 9 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(potentials.length == 0 && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var totalRatio = 0;\n          angular.forEach(potentials, function(value, key) {\n            totalRatio += value.PotentialRatio;\n          });\n          \n          var numPotentials = potentials.length;\n          if(numPotentials == 0) {\n            itemType.items.push(this.createItem(itemType.name, d, null, totalRatio));\n          }\n          else {\n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(this.createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p != null) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p != null) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio == null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p != null && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.lzjson', \n        partsDnt: 'partstable_common2016.lzjson', \n        weaponDnt: 'weapontable_common2016.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items != null) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs != null) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      \n      var numRows = data.length;\n      for(var r=0;r<numRows;++r) {\n        if(data[r].id == id) {\n          return data[r];\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs != null) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\n\nfunction onlineService($window, $q, hCodeValues) {\n  console.log('setup online service');\n  \n  var service = {\n    login: login,\n    getUser: function() {\n      return firebase.auth().currentUser;\n    },\n    signOut: signOut,\n    deleteAccount: deleteAccount,\n    \n    getUserBuilds: getUserBuilds,\n    deleteBuild: deleteBuild,\n    saveBuild: saveBuild,\n    getBuild: getBuild,\n    getClassBuilds: getClassBuilds,\n    \n    getProfile: getProfile,\n    saveProfile: saveProfile,\n  };\n  \n  init();\n  \n  return service;\n  \n  function init() {\n    console.log('init');\n    firebase.initializeApp({\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\n      authDomain: \"dngearsim.firebaseapp.com\",\n      databaseURL: \"https://dngearsim.firebaseio.com\",\n      storageBucket: \"dngearsim.appspot.com\",\n    });\n  }\n  \n  function login() {\n    return $q(function(resolve, reject) {\n      var auth = firebase.auth();\n        \n      auth.onAuthStateChanged(function(user) {\n        if(user == null) {\n          console.log('redirecting');\n          $window.location.href = 'login.html';\n        }\n        else {\n          console.log('logged in');\n          resolve(user);\n        }\n      });\n    });\n  }\n  \n  function getProfile(uid) {\n    console.log('get profile');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(storedProfile.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getBuild(uid, buildName) {\n    console.log('get build');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(decompressBuild(storedProfile.val()));\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function saveProfile(profile) {\n    return $q(function(resolve, reject) {\n      var user = service.getUser();\n      if(user) {\n        profile = angular.copy(profile);\n        deleteNullProperties(profile, true);\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\n      }\n    });\n  }\n  \n  function getUserBuilds(uid) {\n    console.log('get builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds');\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\n        if(storedBuilds) {\n          var retVal = {};\n          var val = storedBuilds.val();\n          for(var buildName in val) {\n            retVal[buildName] = decompressBuild(val[buildName]);\n          }\n          resolve(retVal);\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getClassBuilds(job) {\n    console.log('get class builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds', job.id);\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\n        console.log('ok');\n        if(jobBuilds) {\n          resolve(jobBuilds.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function compressBuild(build) {\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        delete item.fullStats;\n      });\n    }\n    \n    var stringifiedData = JSON.stringify(build);\n    return LZString.compressToUTF16(stringifiedData);\n  }\n  \n  function decompressBuild(compressedBuild) {\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\n    var build = JSON.parse(stringifiedData);\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        item.fullStats = item.stats;\n        \n        if(item.enchantmentStats != null && item.enchantmentStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\n        }\n        \n        if(item.sparkStats != null && item.sparkStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\n        }\n      });\n    }\n    \n    return build;\n  }\n  \n  function saveBuild(buildName, build) {\n    var user = service.getUser();\n    var actions = [];\n    if(user) {\n      build = angular.copy(build);\n      deleteNullProperties(build, true);\n      // console.log('saving', build);\n      actions.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\n      );\n      \n      if(build.job && build.job.id) {\n        console.log('saving build');\n          \n        var data = {};\n        if(build.playerLevel) {\n          data.lev = build.playerLevel;\n        }\n        if(build.region) {\n          data.region = build.region;\n        }\n        if(build.guild) {\n          data.guild = build.guild;\n        }\n        if(build.about) {\n          data.about = build.about;\n        }\n        \n        deleteNullProperties(data, true);\n          \n        actions.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\n        );\n      }\n    }\n    return $q.all(actions);\n  }\n  \n  function deleteNullProperties(test, recurse) {\n    for (var i in test) {\n        if (test[i] === undefined) {\n            delete test[i];\n        } else if (recurse && typeof test[i] === 'object') {\n            deleteNullProperties(test[i], recurse);\n        }\n    }\n  }\n  \n  function signOut() {\n    var auth = firebase.auth();\n    return $q(function(resolve, reject) {\n      auth.signOut().then(function() {\n        resolve();\n      }, function(error) {\n        reject();\n      });\n    });\n  }\n  \n  function deleteAccount(builds) {\n    var auth = firebase.auth();\n    var user = service.getUser();\n    \n    return $q(function(resolve, reject) {\n      \n      var pList = [\n        firebase.database().ref('builds/' + user.uid).remove(),\n        firebase.database().ref('profile/' + user.uid).remove(),\n        firebase.database().ref('private/' + user.uid).remove()];\n        \n      var jobIds = [];\n      for(var buildName in builds) {\n        if(builds[buildName].job) {\n          jobIds.push(builds[buildName].job.id)\n        }\n      }\n      \n      jobIds = _.uniq(jobIds);\n      _.each(jobIds, function(id) {\n        pList.push(\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\n        )\n      });\n        \n      $q.all(pList).then(function() {\n        console.log('deleted data');\n        user.delete().then(function() {\n          console.log('deleted user');\n          auth.signOut().then(function() {\n            console.log('signed out');\n            resolve();\n          }, function(error) {\n            reject();\n          });\n        });\n      });\n    });\n  }\n  \n  function deleteBuild(buildName, build) {\n    \n    var pList = [];\n    var user = service.getUser();\n    if(user) {\n      pList.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\n      \n      if(build.job) {\n        pList.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\n      }\n    }\n    \n    return $q.all(pList);\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            if(build.items) {\n              for(var i=0;i<build.items.length;++i) {\n                if(build.items[i].exchangeType == exId) {\n                  numExchange++;\n                }\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality high grade' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            // todo: change this to use the name id\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n              \n            if(id == 999) {\n              return index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality high grade epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n            if(id == 999) {\n              return item.rank.id == 3 && index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n              case 1313: // Jakard's Demise\n              case 2032: // Sharing Goddess's Grief\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'expedition plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      {region: 'ina', name: 'indonesian files from gemscool', url : 'https://inafiles-da491.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        angular.forEach(this.translationResettingEvents, function(event, index) {\n          event();\n        });\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation != null) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      this.setCurrentBuild(buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(updatedItems.length == 0) {\n          delete items[groupName];\n          this.setCurrentBuild(null);\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    currentBuild: null,\n    getCurrentBuild: function() {\n      if(!this.currentBuild) {\n        this.currentBuild = localStorage.getItem('currentGroup');\n        if(this.currentBuild) {\n          var savedItems = this.getSavedItems();\n          if(!(this.currentBuild in savedItems)) {\n            localStorage.removeItem('currentGroup');\n            this.currentBuild = null;\n          }\n        }\n      }\n      \n      return this.currentBuild;\n    },\n    \n    setCurrentBuild: function(buildName) {\n      this.currentBuild = buildName;\n      localStorage.setItem('currentGroup', buildName);\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        var setStats = [];\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null) {\n          \n          if(value.fullStats != null) {\n            stats = stats.concat(value.fullStats);\n          }\n          else {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      var itemCrit = dupeStat(1012);\n      \n      var critChance = Math.min(0.89, (crit.max / Number(group.enemyStatCaps.Ccritical)) + itemCrit.max);\n      retVal.push({id: 1012, max: critChance})\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.enemyStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats != null && build.heroStats.length > 0) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location != null && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, dps: true, pc: 50, skPc: 4050, searchable: true },\n      1  : {id: 1, name: 'agi', display: toNoDec, dps: true, pc: 51, skPc: 4051, searchable: true },\n      2  : {id: 2, name: 'int', display: toNoDec, dps: true, pc: 52, skPc: 4052, searchable: true },\n      3  : {id: 3, name: 'vit', display: toNoDec, def: true, pc: 53, skPc: 4053, searchable: true },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, dps: true, pc: 54, searchable: true },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, dps: true, pc: 56, searchable: true },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'pdef', display: inThousands, def: true, pc: 58, searchable: true },\n      9  : {id: 9, name: 'mdef', display: inThousands, def: true, pc: 59, searchable: true },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, dps: true, pc: 62, searchable: true },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, dps: true, searchable: true },\n      17 : {id: 17, name: 'ice%', display: toPercent, dps: true, searchable: true },\n      18 : {id: 18, name: 'light%', display: toPercent, dps: true, searchable: true },\n      19 : {id: 19, name: 'dark%', display: toPercent, dps: true, searchable: true },\n      20 : {id: 20, name: 'fire def', display: toPercent, def: true, searchable: true },\n      21 : {id: 21, name: 'ice def', display: toPercent, def: true, searchable: true },\n      22 : {id: 22, name: 'light def', display: toPercent, def: true, searchable: true },\n      23 : {id: 23, name: 'dark def', display: toPercent, def: true, searchable: true },\n      25 : {id: 25, name: 'hp', display: inThousands, def: true, pc: 75, skPc: 4075, searchable: true },\n      26 : {id: 26, name: 'mp', display: inThousands, def: true, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, dps: true, searchable: true },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, dps: true, pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, dps: true, pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent, dps: true },\n      51 : {id: 51, name: 'agi%', display: toPercent, dps: true },\n      52 : {id: 52, name: 'int%', display: toPercent, dps: true },\n      53 : {id: 53, name: 'vit%', display: toPercent, def: true },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55, dps: true },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57, dps: true },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'pdef%', display: toPercent, def: true },\n      59 : {id: 59, name: 'mdef%', display: toPercent, def: true },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true, def: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true, def: true },\n      62 : {id: 62, name: 'crit%', display: toPercent, dps: true },\n      63 : {id: 63, name: 'crit resist%', display: toPercent, def: true },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true, def: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true, def: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true, def: true },\n      75 : {id: 75, name: 'hp%', display: toPercent, def: true },\n      76 : {id: 76, name: 'mp%', display: toPercent, def: true },\n      77 : {id: 77, name: 'mp recover%', display: toPercent, def: true },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true, def: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true, dps: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true, dps: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, dps: true, pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true, dps: true },\n      105: {id: 104, name: 'pvp dmg', display: inThousands, noCustom: true, dps: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true, def: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      \n      1008: {id: 1008, name: 'pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent },\n      3001: {id: 3001, name: 'skPDmg%', display: toPercent },\n      3002: {id: 3002, name: 'skMDmg%', display: toPercent },\n      \n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true, hide: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands },\n      4050: {id: 4050, name: 'skStr%', display: toPercent },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent },\n      4052: {id: 4052, name: 'skInt%', display: toPercent },\n      4053: {id: 4053, name: 'skVit%', display: toPercent },\n      4075: {id: 4075, name: 'skHp%', display: toPercent },\n      4076: {id: 4076, name: 'skMp%', display: toPercent },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      // 134 : { id: 134, name: 'p dmg reduction%' },\n      // 135 : { id: 135, name: 'm dmg reduction%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}
>>>>>>> Stashed changes
=======
{"version":3,"sources":["routes.js","about/about.js","filters/filters.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","nav/export.js","nav/nav.js","nav/setup.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","region/region.js","search/custom-items.js","search/item-search.js","search/skill-search.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","widgets/dnsim-string-to-percent.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","filter","input","Math","round","$stateful","$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset","tryInit","vm","reloaded","allLoaded","files","getDntFiles","build","forEach","columns","fileName","isLoaded","newItems","reloadGroup","buildName","updatedSavedItems","items","onChange","progress","this","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","job","damageType","element","secondaryElement","enemyStatCaps","playerStatCaps","conversions","baseStats","heroStats","init","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","directive","scope","bindToController","controllerAs","item","$routeParams","setupBuilds","savedItems","getSavedItems","buildNames","Object","keys","sort","builds","i","length","push","name","groupName","currentGroup","saveBuildSelection","anyItems","createGroup","handleChange","toggleGroup","url","publish","search","stats","getBuildStats","itemsByCategory","getItemsByCategory","getSaveDate","group","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","jobs","itemColumnsToLoad","character","saveGroup","calcStatPercent","newVal","origVal","scrollTo","groupNames","getCurrentBuild","getGroupCalcStats","groupCalcStats","getCalculatedStats","getBuild","pickup","index","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","mergeStats","nextGroup","uptoItem","updateRows","prevGroup","foundGroup","headers","summaryStatIds","id","summaryDisplay","pcIndexes","rows","typeName","pcIndex","enchantmentNum","rowIndex","makeFakeCells","data","makeCell","num","click","col","move","swapEnchantmentNumber","setTalisman","splice","replaceAffectAmount","newEnhancementNum","extraStats","stat","max","enchantmentStats","fullStats","getReplaceAffectAmount","statId","itemIndex","initReplaceAffects","item2","fullStats1","fullStats2","gItem","newStats","origStats","getStat","getStatName","retVal","eleId","elements","len","save","selectedCategory","localStorage","category","byName","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","value","setItem","allowMoreItems","maxCat","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","sparkTypeId","increasingGemSlots","number","numItems","cat","numItemText","removeItem","newItemList","server","newGroup","oldGroupName","damageTypes","getFinalJobs","allJobs","finalJobs","j","getBaseJobName","bJob","newJobs","key","setHeroStats","setJob","getStatCap","colName","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","datas","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","anyLoading","cancel","reloadItem","saveItem","reset","start","hasOptions","back","pop","testOptions","$scope","region","getById","setLocationByName","g","e","p","h","d","t","s","itemString","split","itemStr","decodeItem","isLoading","newBuildName","clearGroup","addAffectAmount","groupItems","$watch","getAddAffectAmount","initAddAffects","getGroupItems","numMatches","str","itemSplit","indexOf","exchangeType","itemSource","a","b","hasMaxExchangable","maxExchange","addToGroup","replace","replaceItem","statMap","_","newValue","oldValue","anyChange","Number","found","each","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","setEnchantment","EnchantLevel","getStats","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","find","showMaterials","materials","itemId","itemCount","translate","NameID","NameIDParam","material","icon","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","msg","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkDnt","amount","itemFactory","typeId","console","log","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","getCharmItems","TypeParam1","getPouchItems","boxType","f","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Disjointamount","getPlates","plateFile","r","row","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","initTransfers","transfers","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","getJobName","getAllJobs","needJobClass","jobName","preInitItem","anyToLoad","setFullStats","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","getDescription","description","mainDnt","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","dntLocation","encodeItem","copy","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","noLocationMenu","normalMenu","buildAction","withBuildMenu","isSearch","startedLoading","tlocation","noRegion","fireAction","action","getActions","menu","currentBuild","extraCss","$route","dntInit","translationsStatus","progressTranslations","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","buildSearch","onlineService","getClassBuilds","then","jobBuilds","maxDisplay","totalNumResults","jobId","showMoreResults","extra","allResults","getFilteredBuilds","uid","results","result","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","openServer","load","user","getUser","handleError","err","show","login","saveProfile","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","openLocal","getBuildLimit","maxBuilds","getNumStoredBuilds","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","copyLocally","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","customItemCtrl","customItems","currentResults","nameSearch","getResults","getNewStatName","createCustomItem","jobInit","lastJobNumber","byPath","catName","minLevel","maxLevel","grades","searchable","savedSearchStatId","navigate","hideLevel","hideJob","rankChecked","checkedRank","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideRank","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","skillSearchCtrl","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","translationsInit","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","boxeContents","initBoxes","box","numBoxes","nameId","nameParam","chooseClass","restrict","onSetJob","chooseClassController","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","collapse","dnsimCategoryLinksController","collapsed","setCategory","dnsimItemIcon","link","attrs","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","openItem","dnsimJobIcon","dnsimJobIconController","JobIcon","dnsimLoading","transclude","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","display","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","hasStartedLoading","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","searchType","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","deleteNullProperties","set","compressBuild","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","expedition plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","setCurrentBuild","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","itemCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","dps","1","2","3","4","5","6","7","8","9","10","noCustom","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","105","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items/', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/build/:groupName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:groupName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      reloadOnSearch: false,\n    }).\n    \n    when('/search/:itemType?', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    \n    when('/item/:region?/:i*', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/profile/:uid', {\n      templateUrl: 'ui/online/profile.html',\n      controller: 'ProfileCtrl as ctrl',\n    }).\n    \n    when('/published/:uid/:buildName*', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/build-search/:jobId?', {\n      templateUrl: 'ui/online/build-search.html',\n      controller: 'BuildSearchCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n})();","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/build/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$routeParams','$timeout','saveHelper',\n  function($window,$location,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('groupName' in $routeParams) {\n      if($routeParams.groupName != this.currentGroup) {\n        this.currentGroup = $routeParams.groupName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/build/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      // console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/build/' + buildName);\n    }\n    \n    this.publish = function() {\n      $location.url('/publish');\n    }\n    \n    this.search = function() {\n      $location.url('/build-search');\n    }\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    // console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/build/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\n    if(vm.category.name in itemsByCat) {\n      return itemsByCat[vm.category.name];\n    }\n    else {\n      return [];\n    }\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.onChange();\n  }\n  \n  this.removeItem = function(item) {\n    item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n\n    vm.build.items = newItemList;\n    vm.stats = statHelper.getBuildStats(vm.build);\n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.onChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange',\n      server: '=server'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('groupName' in $routeParams) {\n      this.groupName = $routeParams.groupName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function() {\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/build/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      // console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      // console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/build/' + newBuildName);\n    }\n  }]\n);\n","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory','$scope',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory,$scope) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = saveHelper.getCurrentBuild();\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    vm.addAffectAmount = null;\n    vm.replaceAffectAmount = {};\n\n    vm.groupItems = null;\n    vm.groupCalcStats = null\n  }\n\n  $scope.$watch('editCtrl.item', function() {\n    // console.log('item changed');\n    vm.clearGroup();\n  });\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    // console.log('add affect: ', this.addAffectAmount[stat], this.item);\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    // console.log('initialising add affects ');\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = [];\n    if(group.items) {\n      newItems = group.items.concat([vm.item]);\n    }\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues','$scope',\nfunction(hCodeValues,$scope) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n\n  this.statMap = {};\n  \n  // console.log(vm.item.stats);\n  _.forEach(vm.item.stats, function(stat) {\n    // console.log('got stat', stat.id);\n    vm.statMap[stat.id] = stat.max;\n  });\n  \n  for(var statId in hCodeValues.stats) {\n    $scope.$watch('editCtrl.statMap[' + statId + ']', function(newValue, oldValue) { \n\n      if(newValue != oldValue) {\n        // console.log(statId);\n        // console.log('watch got stat value', newValue);\n\n        var anyChange = false;\n        var newStats = [];\n        for(var statId in vm.statMap) {\n\n          if(!vm.statMap[statId] || !Number(vm.statMap[statId])) {\n            _.each(vm.item.stats, function(stat) { \n              if(stat.id == statId) {\n                anyChange = true;\n              }\n            });\n          }\n          else {\n            newStats.push({\n              id: Number(statId),\n              max: Number(vm.statMap[statId])\n            });\n\n            var found = false;\n            _.each(vm.item.stats, function(stat) {\n              if(stat.id == statId) {\n                found = true;\n                // console.log('comparing', stat.max, vm.statMap[statId]);\n                if(!(statId in vm.statMap) || stat.max != vm.statMap[statId]) {\n                  anyChange = true;\n                }\n              } \n            });\n\n            if(!found) {\n              anyChange = true;\n            }\n          }\n        }\n\n        if(anyChange) {\n          // console.log('GOT CHANGES!', newStats);\n          vm.item.stats = newStats;\n          vm.onChange();\n        }\n      }\n    });\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    //console.log('init contents');\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        vm.getPouchItems(d.TypeParam1);\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType) {\n    for(var f=0;f<pouchFileNames.length;++f) {\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\n    }\n  }\n  \n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            // console.log('adding item ' + pouchItem);\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\n              // console.log('found item ' + basicItem.name);\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: basicItem\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n      \n      //console.log('box: ' + boxType);\n\n      var charmData = dntData.getData(charmFiles[i]);\n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [transferFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n    vm.matchingTransfers = [];\n    \n    for(var i=0;i<transfers.length;++i) {\n      var t = transfers[i];\n      if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n        \n        var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n        var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n        \n        vm.matchingTransfers.push({\n          level: t.ResultLevel,\n          enchantmentNum: t.ResultEnchantLevel,\n          gold: t.NeedCoin/100/100,\n          rank: hCodeValues.rankNames[t.ResultRank],\n          numItem1: t.NeedItemCount1,\n          item1: itemFactory.createBasicItem(item1s[0]),\n          numItem2: t.NeedItemCount2,\n          item2: itemFactory.createBasicItem(item2s[0]),\n        });\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ItemCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory','$timeout',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory,$timeout) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  // console.log('search string: ', $routeParams.i);\n  $scope.item = exportLinkHelper.decodeItem($routeParams.i);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    // console.log('changes');\n    if($scope.item.itemSource != 'custom') {\n      $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\n    }\n    else {\n      setFullStats();\n      $scope.item = angular.copy($scope.item);\n    }\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    $scope.preInitItem = $scope.item;\n    $scope.item = null;\n  \n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.preInitItem), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.preInitItem);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    // full stats are cleared when publishing builds\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory','saveHelper',\n  function($scope,$location,translations,region,itemCategory,saveHelper) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n    \n    var buildAction = {path: 'build', name:'build', icon: 'wrench'};\n    \n    var withBuildMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      buildAction,\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.fireAction = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          $location.path('/' + action.path + '/' + cat);\n        }\n        else {\n          $location.path('/' + action.path);\n        }\n      }\n      else {\n          $location.path('/' + action.path);\n      }\n    }\n      \n    $scope.getActions = function() {\n      console.log('getting actions');\n      var menu = null;\n      \n      var currentBuild = saveHelper.getCurrentBuild();\n      if(currentBuild) {\n        var savedItems = saveHelper.getSavedItems();\n        if(!(currentBuild in savedItems)) {\n          currentBuild = null;\n        }\n      }\n\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(currentBuild && currentBuild != 'null') {\n        menu = withBuildMenu;\n        buildAction.path = 'build/' + currentBuild;\n        buildAction.name = currentBuild;\n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          if(value.path != 'builds' || $location.path() == '/builds') {\n            value.extraCss = 'active';\n          }\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","(function () {\n'use strict';\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\n\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.maxDisplay = 15;\n  vm.totalNumResults = 0;\n  \n  jobs.init(null, function() {\n    if($routeParams.jobId) {\n      vm.job = jobs.getById($routeParams.jobId);\n      getClassBuilds();\n    } \n  })\n  \n  this.setJob = function() {\n    $timeout(function() {\n      $location.path('/build-search/' + vm.job.id);\n    });\n  }\n  \n  this.showMoreResults = function(extra) {\n    vm.maxDisplay = vm.totalNumResults + extra;\n    vm.totalNumResults = 0;\n  }\n  \n  vm.allResults = null;\n  vm.getFilteredBuilds = function() {\n    \n    // init\n    if(vm.allResults == null) {\n      vm.allResults = [];\n      for(var uid in vm.jobBuilds) {\n        for(var buildName in vm.jobBuilds[uid]) {\n          vm.allResults.push({\n            uid: uid,\n            name: buildName,\n            data: vm.jobBuilds[uid][buildName]\n          });\n        }\n      }\n    }\n    \n    var results = [];\n    for(var i=0;i<vm.allResults.length;++i) {\n      \n      var result = vm.allResults[i];\n      if(vm.filter && vm.filter.length > 0) {\n        var f = vm.filter.toUpperCase();\n        if(result.name.toUpperCase().indexOf(f) == -1) {\n          if(!result.data.guild ||\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\n\n            continue;\n          }\n        }\n      }\n      \n      results.push(result);\n\n      if(results.length >= vm.maxDisplay) {\n        break;\n      }\n    }\n    \n    vm.totalNumResults = results.length;\n    return results;\n  }\n  \n  function getClassBuilds() {\n    if(vm.job) {\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\n        if(builds) {\n          // console.log('got builds', builds);\n          vm.jobBuilds = builds;\n        }\n        else {\n          // console.log('no builds');\n          vm.jobBuilds = {};\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\n\nfunction profile($location, $routeParams, onlineService) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  \n  getSavedBuilds();\n  getProfile();\n  \n  function getSavedBuilds() {\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\n      if(builds) {\n        vm.storedBuilds = builds;\n      }\n      else {\n        vm.storedBuilds = {};\n      }\n    });\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.uid + '/' + buildName);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n    \n    $location.path('/build/' + newGroupName);\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\n\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.show = $routeParams.show;\n  \n  onlineService.login().then(function(user) {\n    getSavedBuilds();\n    getProfile();\n  \n    vm.builds = saveHelper.getSavedItems();\n  });\n  \n  function getSavedBuilds() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\n        if(builds) {\n          vm.storedBuilds = builds;\n        }\n        else {\n          vm.storedBuilds = {};\n        }\n      });\n    }\n  }\n  \n  function getProfile() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getProfile(user.uid).then(function(profile) {\n        if(profile) {\n          vm.profile = profile;\n        }\n        else {\n          vm.profile = {};\n        }\n      });\n    }\n  }\n  \n  this.saveProfile = function() {\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\n  }\n  \n  this.getUser = function() {\n    return onlineService.getUser();\n  }\n  \n  this.save = function(buildName, build) {\n    build.lastUpdate = (new Date()).getTime();\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\n    vm.publishBuild = null;\n  }\n  \n  this.startPublish = function(buildName) {\n    if(buildName in vm.storedBuilds) {\n      if(!vm.builds[buildName].region) {\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\n      }\n      \n      if(!vm.builds[buildName].about) {\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\n      }\n      \n      if(!vm.builds[buildName].guild) {\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\n      }\n    }\n    \n    if(!vm.builds[buildName].region) {\n      vm.builds[buildName].region = region.dntLocation.region;\n    }\n    \n    vm.publishBuild = buildName;\n  }\n  \n  function handleError(err) {\n    console.log(err);\n  }\n  \n  this.deleteAccount = function() {\n    onlineService.deleteAccount(vm.storedBuilds);\n  }\n  \n  this.openLocal = function(buildName) {\n    $location.path('/build/' + buildName);\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.getUser().uid + '/' + buildName);\n  }\n  \n  this.getBuildLimit = function() {\n    if(vm.profile && vm.profile.maxBuilds) {\n      return vm.profile.maxBuilds;\n    }\n    else {\n      return 15;\n    }\n  }\n  \n  this.getNumStoredBuilds = function() {\n    return _.size(vm.storedBuilds);\n  }\n  \n  this.getNumBuilds = function() {\n    return _.size(vm.builds);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  this.signOut = function() {\n    onlineService.signOut();\n  }\n  \n  vm.deleteLocal = function(buildName) {\n    vm.localToDelete = buildName;\n  }\n  \n  vm.getAllBuildNames = function() {\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\n    return _.uniq(allKeys.sort(), true);\n  }\n  \n  vm.reallyDeleteLocal = function(buildName) {\n    saveHelper.updatedSavedItems(buildName, []);\n    vm.localToDelete = null;\n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  vm.deleteServer = function(buildName) {\n    vm.serverToDelete = buildName;\n  }\n  \n  vm.reallyDeleteServer = function(buildName) {\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\n    vm.serverToDelete = null;\n  }\n  \n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\n\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  vm.buildName = $routeParams.buildName;\n  \n  getBuild();\n  getProfile();\n  \n  vm.copyLocally = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n      \n    $location.path('/build/' + newGroupName);\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  function getBuild() {\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\n      if(build) {\n        vm.build = build;\n        vm.stats = statHelper.getBuildStats(build);\n      }\n      else {\n        vm.build = {};\n      }\n    });\n  }\n}\n\n})();","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n      \n    $scope.region = region;\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimCustomItems', function() {\n  return {\n    scope: {},\n    bindToController: {\n    },\n    controller: ['$window','saveHelper','$location','hCodeValues','itemCategory','$timeout', customItemCtrl],\n    controllerAs: 'customItems',\n    templateUrl: 'ui/search/custom-items.html'\n  };\n});\n\nfunction customItemCtrl($window,saveHelper,$location,hCodeValues,itemCategory,$timeout) {\n  'use strict';\n\n  var vm = this;\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}\n\n})();","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  $scope.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\n  if(!$scope.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     $scope.itemCategory = itemCategory.byName(catName);\n     if($scope.itemCategory) {\n       // console.log('moving');\n       $location.path($scope.itemCategory.path);\n     }\n     return;\n  }\n  \n  $window.document.title = 'DN Gear Sim | ' + $scope.itemCategory.name.toUpperCase();\n  \n  $scope.job = {id: -1, name: ''};\n  $scope.jobs = [$scope.job];\n  $scope.allJobs = [];\n  $scope.minLevel = 1;\n  $scope.maxLevel = 99;\n  $scope.maxDisplay = 10;\n  $scope.totalNumResults = 0;\n  $scope.grades = hCodeValues.rankNames;\n  $scope.stat = {id:-1, name:''};\n  $scope.stats = [$scope.stat];\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.searchable) {\n      $scope.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    $scope.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    $scope.maxLevel = maxLevel;\n  }\n  \n  $scope.nameSearch = localStorage.getItem('nameSearch');\n  if($scope.nameSearch == null) {\n    $scope.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    $scope.stat = hCodeValues.stats[savedSearchStatId];\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  $scope.navigate = function() {\n    var catName = localStorage.getItem('selectedItemCategory');\n    if(catName) {\n      $scope.itemCategory = itemCategory.byName(catName);\n      if($scope.itemCategory) {\n        // console.log('navigating to ', $scope.itemCategory.path);\n        $location.path($scope.itemCategory.path);\n      }\n    }\n  }\n\n  $scope.save = function() {\n    if(!$scope.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', $scope.minLevel);\n      localStorage.setItem('maxLevel', $scope.maxLevel);\n    }\n    \n    if(!$scope.itemCategory.hideJob) {\n      if($scope.job != null) {\n        localStorage.setItem('jobNumber', $scope.job.id);\n      }\n    }\n  \n    if($scope.stat != null) {\n      localStorage.setItem('searchStat', $scope.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', $scope.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init($scope.itemCategory.name, $timeout);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, $scope.jobs[0]);\n      $scope.jobs = newJobs;\n      $scope.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            $scope.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  $scope.rankChecked = hCodeValues.checkedRank;\n  \n  $scope.getResults = function() {\n    // console.log('getting items');\n    var allItems = itemCategory.getItems($scope.itemCategory.name);\n    if(allItems == null) {\n      // console.log('no items');\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n    // console.log('got ', allItems);\n    \n    $scope.save();\n    \n    var start = new Date().getTime();\n          \n    var pcStatId = -1;\n    if('pc' in $scope.stat) {\n      pcStatId = $scope.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<$scope.maxDisplay || $scope.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e != null) {\n        \n        if(!$scope.itemCategory.hideLevel) {\n          if(e.levelLimit < $scope.minLevel || e.levelLimit > $scope.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideRank) {\n          if(e.rank != null && !$scope.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideJob) {\n          if($scope.job != null && $scope.job.id > 0) {\n            if(!$scope.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != $scope.itemCategory.name) {\n          continue;\n        }\n        // console.log('name filter', $scope.nameSearch); \n        \n        if($scope.nameSearch != '') {\n          // console.log('filtering on name');\n          var nameSearches = $scope.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [$scope.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if($scope.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s]\n            if(stat.id == $scope.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if($scope.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, $scope.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    $scope.totalNumResults = newResults.length;\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    \n    return newResults;\n  };\n  \n  $scope.showMoreResults = function(extra) {\n    $scope.maxDisplay = $scope.totalNumResults + extra;\n    $scope.totalNumResults = 0;\n  }\n  \n}]);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dngearsimSkillSearch', function() {\n  return {\n    scope: {},\n    bindToController: {\n      job: '=job',\n      jobs: '=jobs',\n    },\n    controller: ['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues','itemCategory','$location', skillSearchCtrl],\n    controllerAs: 'skillSearch',\n    templateUrl: 'ui/search/skill-search.html'\n  };\n});\n\nfunction skillSearchCtrl($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues,itemCategory,$location) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.allJobs = [];\n  this.maxDisplay = 60;\n  this.currentResults = 0;\n  this.dntName = '';\n  this.skills = [];\n  this.loadedJobId = -1;\n\n  this.itemCategory = itemCategory.byName('skills');\n\n  this.nameSearch = localStorage.getItem('nameSearch');\n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n\n  var classFactories = [];\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  this.navigate = function() {\n    $timeout(function() {\n      if(vm.itemCategory) {\n        $location.path(vm.itemCategory.path);\n      }\n    });\n  }\n  \n  this.isLoading = function() {\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { $timeout(translationsInit); } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName != null) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() {setupSkills(baseJobNames, vm.job);} ) });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n        return;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  this.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  this.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    \n    if(vm.job != null) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills && (curDisplay<vm.maxDisplay);++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(nameSearches.length == 0) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n      curDisplay++;\n    }\n    vm.currentResults = Math.min(curDisplay, vm.maxDisplay);\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}\n\n})();","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    this.boxes = null;\n    this.boxeContents = [];\n    this.maxDisplay = 10;\n    this.currentResults = 0;\n\n    this.nameSearch = localStorage.getItem('itemNameSearch');\n    if(this.nameSearch == null) {\n      this.nameSearch = '';\n    }\n    \n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    this.initBoxes = function() {\n      // console.log('init boxes');\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: vm.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n      }\n    }\n    \n    this.getResults = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return;\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n  \n    this.showMoreResults = function(extra) {\n      vm.maxDisplay = vm.totalNumResults + extra;\n      vm.totalNumResults = 0;\n    }\n    \n    this.translate = function(nameId, nameParam) {\n      return translations.translate(nameId, nameParam);\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\n\nfunction chooseClass() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      job: '=job',\n      onSetJob: '&onSetJob'\n    },\n    templateUrl: 'ui/widgets/choose-class.html',\n    controllerAs: 'ctrl',\n    controller: [\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \n      chooseClassController],\n  };\n}\n\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    if(job) {\n      this.onSetJob();\n    }\n  }\n  \n  \n  jobs.init(reportProgress, $timeout);\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      collapse: '=collapse',\n      cat: '=cat',\n      onChange: '&onChange'\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    controller: ['itemCategory', dnsimCategoryLinksController],\n    controllerAs: 'ctrl',\n  };\n};\n\nfunction dnsimCategoryLinksController(itemCategory) {\n\n  var vm = this;\n\n  vm.categories = itemCategory.categories;\n  vm.collapsed = true;\n\n  vm.setCategory = function(action) {\n    // console.log('setting cat', action);\n    vm.cat = action;\n    localStorage.setItem('selectedItemCategory', action.name);\n    \n    if(vm.collapse) {\n      vm.collapsed = !vm.collapsed;\n    }\n\n    if(vm.onChange) {\n      vm.onChange();\n    }\n  }\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n      \n      $scope.openItem = function() {\n        if(!$scope.noClick) {\n          $location.path($scope.itemLink);\n        }\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', [dnsimJobIcon]);\n\nfunction dnsimJobIcon() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    controller: dnsimJobIconController,\n    controllerAs: 'ctrl'\n  }\n}\n\nfunction dnsimJobIconController() {\n\n  this.getIconXPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return ((this.item.d.JobIcon % 9) * 44) + 5;\n    }\n    return 0;\n  }\n  \n  this.getIconYPostion = function() {\n    if(this.item && this.item.d && this.item.d.JobIcon > 0) {\n      return (Math.floor(this.item.d.JobIcon / 9) * 44) + 5;\n    }\n    return 0;\n  }\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.numLoading = 0;\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if(!$scope.filter && 'hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToPercent', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + (value/100.0);\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10)*100;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h != null) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p != null) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation != null && \n              this.dntLocation.url != null &&\n              this.dntLocation.url.length > 0) {\n\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n  'use strict';\n  \n  return {\n    \n    encodeItem: function(item, small) {\n      if(item != null) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C'\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n          if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr != null) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString != null && itemString.length > 0) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = '#/view-group/' + region.dntLocation.region + '/?';\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var longUrl = window.location.href.split(\"#\")[0] + path;\n      var data = { longUrl: longUrl };\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(ds.length == 0) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(ps.length == 0) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(ps.length == 0) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(ps.length == 0) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem != null) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true,},\n      {path: 'search/skills', name:'skills', searchType: 'skills'},\n      {path: 'search/custom', name:'custom', searchType: 'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal != null) {\n            if(source.items == null && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items != null) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      else if(item.itemType == cat.name) {\n        return true;\n      }\n      else if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n        \n        return false;\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n      else {\n        return false;\n      }\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items != null) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item != null) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item != null && !(item.typeName in itemMap)) {\n            console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 29 &&\n        dType != 114 &&\n        dType != 79 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 24 &&\n        dType != 182 &&\n        dType != 78 &&\n        dType != 20 &&\n        dType != 46 &&\n        dType != 9 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(potentials.length == 0 && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var totalRatio = 0;\n          angular.forEach(potentials, function(value, key) {\n            totalRatio += value.PotentialRatio;\n          });\n          \n          var numPotentials = potentials.length;\n          if(numPotentials == 0) {\n            itemType.items.push(this.createItem(itemType.name, d, null, totalRatio));\n          }\n          else {\n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(this.createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p != null) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p != null) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio == null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p != null && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.lzjson', \n        partsDnt: 'partstable_common2016.lzjson', \n        weaponDnt: 'weapontable_common2016.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items != null) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs != null) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      \n      var numRows = data.length;\n      for(var r=0;r<numRows;++r) {\n        if(data[r].id == id) {\n          return data[r];\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs != null) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\n\nfunction onlineService($window, $q, hCodeValues) {\n  console.log('setup online service');\n  \n  var service = {\n    login: login,\n    getUser: function() {\n      return firebase.auth().currentUser;\n    },\n    signOut: signOut,\n    deleteAccount: deleteAccount,\n    \n    getUserBuilds: getUserBuilds,\n    deleteBuild: deleteBuild,\n    saveBuild: saveBuild,\n    getBuild: getBuild,\n    getClassBuilds: getClassBuilds,\n    \n    getProfile: getProfile,\n    saveProfile: saveProfile,\n  };\n  \n  init();\n  \n  return service;\n  \n  function init() {\n    console.log('init');\n    firebase.initializeApp({\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\n      authDomain: \"dngearsim.firebaseapp.com\",\n      databaseURL: \"https://dngearsim.firebaseio.com\",\n      storageBucket: \"dngearsim.appspot.com\",\n    });\n  }\n  \n  function login() {\n    return $q(function(resolve, reject) {\n      var auth = firebase.auth();\n        \n      auth.onAuthStateChanged(function(user) {\n        if(user == null) {\n          console.log('redirecting');\n          $window.location.href = 'login.html';\n        }\n        else {\n          console.log('logged in');\n          resolve(user);\n        }\n      });\n    });\n  }\n  \n  function getProfile(uid) {\n    console.log('get profile');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(storedProfile.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getBuild(uid, buildName) {\n    console.log('get build');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(decompressBuild(storedProfile.val()));\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function saveProfile(profile) {\n    return $q(function(resolve, reject) {\n      var user = service.getUser();\n      if(user) {\n        profile = angular.copy(profile);\n        deleteNullProperties(profile, true);\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\n      }\n    });\n  }\n  \n  function getUserBuilds(uid) {\n    console.log('get builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds');\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\n        if(storedBuilds) {\n          var retVal = {};\n          var val = storedBuilds.val();\n          for(var buildName in val) {\n            retVal[buildName] = decompressBuild(val[buildName]);\n          }\n          resolve(retVal);\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getClassBuilds(job) {\n    console.log('get class builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds', job.id);\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\n        console.log('ok');\n        if(jobBuilds) {\n          resolve(jobBuilds.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function compressBuild(build) {\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        delete item.fullStats;\n      });\n    }\n    \n    var stringifiedData = JSON.stringify(build);\n    return LZString.compressToUTF16(stringifiedData);\n  }\n  \n  function decompressBuild(compressedBuild) {\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\n    var build = JSON.parse(stringifiedData);\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        item.fullStats = item.stats;\n        \n        if(item.enchantmentStats != null && item.enchantmentStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\n        }\n        \n        if(item.sparkStats != null && item.sparkStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\n        }\n      });\n    }\n    \n    return build;\n  }\n  \n  function saveBuild(buildName, build) {\n    var user = service.getUser();\n    var actions = [];\n    if(user) {\n      build = angular.copy(build);\n      deleteNullProperties(build, true);\n      // console.log('saving', build);\n      actions.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\n      );\n      \n      if(build.job && build.job.id) {\n        console.log('saving build');\n          \n        var data = {};\n        if(build.playerLevel) {\n          data.lev = build.playerLevel;\n        }\n        if(build.region) {\n          data.region = build.region;\n        }\n        if(build.guild) {\n          data.guild = build.guild;\n        }\n        if(build.about) {\n          data.about = build.about;\n        }\n        \n        deleteNullProperties(data, true);\n          \n        actions.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\n        );\n      }\n    }\n    return $q.all(actions);\n  }\n  \n  function deleteNullProperties(test, recurse) {\n    for (var i in test) {\n        if (test[i] === undefined) {\n            delete test[i];\n        } else if (recurse && typeof test[i] === 'object') {\n            deleteNullProperties(test[i], recurse);\n        }\n    }\n  }\n  \n  function signOut() {\n    var auth = firebase.auth();\n    return $q(function(resolve, reject) {\n      auth.signOut().then(function() {\n        resolve();\n      }, function(error) {\n        reject();\n      });\n    });\n  }\n  \n  function deleteAccount(builds) {\n    var auth = firebase.auth();\n    var user = service.getUser();\n    \n    return $q(function(resolve, reject) {\n      \n      var pList = [\n        firebase.database().ref('builds/' + user.uid).remove(),\n        firebase.database().ref('profile/' + user.uid).remove(),\n        firebase.database().ref('private/' + user.uid).remove()];\n        \n      var jobIds = [];\n      for(var buildName in builds) {\n        if(builds[buildName].job) {\n          jobIds.push(builds[buildName].job.id)\n        }\n      }\n      \n      jobIds = _.uniq(jobIds);\n      _.each(jobIds, function(id) {\n        pList.push(\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\n        )\n      });\n        \n      $q.all(pList).then(function() {\n        console.log('deleted data');\n        user.delete().then(function() {\n          console.log('deleted user');\n          auth.signOut().then(function() {\n            console.log('signed out');\n            resolve();\n          }, function(error) {\n            reject();\n          });\n        });\n      });\n    });\n  }\n  \n  function deleteBuild(buildName, build) {\n    \n    var pList = [];\n    var user = service.getUser();\n    if(user) {\n      pList.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\n      \n      if(build.job) {\n        pList.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\n      }\n    }\n    \n    return $q.all(pList);\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            if(build.items) {\n              for(var i=0;i<build.items.length;++i) {\n                if(build.items[i].exchangeType == exId) {\n                  numExchange++;\n                }\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality high grade' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            // todo: change this to use the name id\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n              \n            if(id == 999) {\n              return index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality high grade epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n            if(id == 999) {\n              return item.rank.id == 3 && index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n              case 1313: // Jakard's Demise\n              case 2032: // Sharing Goddess's Grief\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'expedition plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      {region: 'ina', name: 'indonesian files from gemscool', url : 'https://inafiles-da491.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        angular.forEach(this.translationResettingEvents, function(event, index) {\n          event();\n        });\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation != null) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      this.setCurrentBuild(buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(updatedItems.length == 0) {\n          delete items[groupName];\n          this.setCurrentBuild(null);\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    currentBuild: null,\n    getCurrentBuild: function() {\n      if(!this.currentBuild) {\n        this.currentBuild = localStorage.getItem('currentGroup');\n        if(this.currentBuild) {\n          var savedItems = this.getSavedItems();\n          if(!(this.currentBuild in savedItems)) {\n            localStorage.removeItem('currentGroup');\n            this.currentBuild = null;\n          }\n        }\n      }\n      \n      return this.currentBuild;\n    },\n    \n    setCurrentBuild: function(buildName) {\n      this.currentBuild = buildName;\n      localStorage.setItem('currentGroup', buildName);\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        var setStats = [];\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null) {\n          \n          if(value.fullStats != null) {\n            stats = stats.concat(value.fullStats);\n          }\n          else {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      var itemCrit = dupeStat(1012);\n      \n      var critChance = Math.min(0.89, (crit.max / Number(group.enemyStatCaps.Ccritical)) + itemCrit.max);\n      retVal.push({id: 1012, max: critChance})\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.enemyStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats != null && build.heroStats.length > 0) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location != null && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, dps: true, pc: 50, skPc: 4050, searchable: true },\n      1  : {id: 1, name: 'agi', display: toNoDec, dps: true, pc: 51, skPc: 4051, searchable: true },\n      2  : {id: 2, name: 'int', display: toNoDec, dps: true, pc: 52, skPc: 4052, searchable: true },\n      3  : {id: 3, name: 'vit', display: toNoDec, def: true, pc: 53, skPc: 4053, searchable: true },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, dps: true, pc: 54, searchable: true },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, dps: true, pc: 56, searchable: true },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'pdef', display: inThousands, def: true, pc: 58, searchable: true },\n      9  : {id: 9, name: 'mdef', display: inThousands, def: true, pc: 59, searchable: true },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, dps: true, pc: 62, searchable: true },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, dps: true, searchable: true },\n      17 : {id: 17, name: 'ice%', display: toPercent, dps: true, searchable: true },\n      18 : {id: 18, name: 'light%', display: toPercent, dps: true, searchable: true },\n      19 : {id: 19, name: 'dark%', display: toPercent, dps: true, searchable: true },\n      20 : {id: 20, name: 'fire def', display: toPercent, def: true, searchable: true },\n      21 : {id: 21, name: 'ice def', display: toPercent, def: true, searchable: true },\n      22 : {id: 22, name: 'light def', display: toPercent, def: true, searchable: true },\n      23 : {id: 23, name: 'dark def', display: toPercent, def: true, searchable: true },\n      25 : {id: 25, name: 'hp', display: inThousands, def: true, pc: 75, skPc: 4075, searchable: true },\n      26 : {id: 26, name: 'mp', display: inThousands, def: true, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, dps: true, searchable: true },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, dps: true, pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, dps: true, pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent, dps: true },\n      51 : {id: 51, name: 'agi%', display: toPercent, dps: true },\n      52 : {id: 52, name: 'int%', display: toPercent, dps: true },\n      53 : {id: 53, name: 'vit%', display: toPercent, def: true },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55, dps: true },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57, dps: true },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'pdef%', display: toPercent, def: true },\n      59 : {id: 59, name: 'mdef%', display: toPercent, def: true },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true, def: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true, def: true },\n      62 : {id: 62, name: 'crit%', display: toPercent, dps: true },\n      63 : {id: 63, name: 'crit resist%', display: toPercent, def: true },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true, def: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true, def: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true, def: true },\n      75 : {id: 75, name: 'hp%', display: toPercent, def: true },\n      76 : {id: 76, name: 'mp%', display: toPercent, def: true },\n      77 : {id: 77, name: 'mp recover%', display: toPercent, def: true },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true, def: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true, dps: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true, dps: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, dps: true, pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true, dps: true },\n      105: {id: 104, name: 'pvp dmg', display: inThousands, noCustom: true, dps: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true, def: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true, hide: true },\n      \n      1008: {id: 1008, name: 'pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true, hide: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent },\n      3001: {id: 3001, name: 'skPDmg%', display: toPercent },\n      3002: {id: 3002, name: 'skMDmg%', display: toPercent },\n      \n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true, hide: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands },\n      4050: {id: 4050, name: 'skStr%', display: toPercent },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent },\n      4052: {id: 4052, name: 'skInt%', display: toPercent },\n      4053: {id: 4053, name: 'skVit%', display: toPercent },\n      4075: {id: 4075, name: 'skHp%', display: toPercent },\n      4076: {id: 4076, name: 'skMp%', display: toPercent },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      // 134 : { id: 134, name: 'p dmg reduction%' },\n      // 135 : { id: 135, name: 'm dmg reduction%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}
>>>>>>> Stashed changes
