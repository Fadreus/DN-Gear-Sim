{"version":3,"sources":["routes.js","about/about.js","filters/filters.js","builds/build-actions.js","builds/build-item.js","builds/build-list.js","builds/build-stats.js","builds/build-summary.js","builds/build-talismans.js","builds/build.js","builds/delete-build.js","builds/edit-build.js","builds/quick-add.js","builds/view-group.js","nav/export.js","nav/nav.js","nav/setup.js","region/region.js","online/build-search.js","online/profile.js","online/publish.js","online/published.js","item/group-assignment.js","item/item-edit-custom.js","item/item-edit-enchantment.js","item/item-edit-potential.js","item/item-edit-skill.js","item/item-edit-spark.js","item/item-edit-talisman.js","item/item-view-box.js","item/item-view-craft.js","item/item-view-extraction.js","item/item-view-plate.js","item/item-view-set.js","item/item-view-shop.js","item/item-view-transfer.js","item/item.js","search/custom-items.js","search/item-search.js","search/skill-search.js","secrets/items.js","widgets/choose-class.js","widgets/dnsim-category-links.js","widgets/dnsim-item-icon.js","widgets/dnsim-item-link.js","widgets/dnsim-job-icon.js","widgets/dnsim-loading.js","widgets/dnsim-select-all-on-click.js","widgets/dnsim-stats.js","widgets/dnsim-string-to-number.js","characterService.js","columnsToLoadService.js","dntDataService.js","dntInitService.js","dntResetService.js","exportLinkServices.js","groupServices.js","itemCategoryService.js","itemFactoryService.js","itemSourceService.js","jobService.js","onlineService.js","quickAddService.js","regionService.js","saveService.js","statService.js","translationService.js","valueServices.js"],"names":["config","$routeProvider","when","templateUrl","controller","redirectTo","reloadOnSearch","otherwise","angular","module","$window","document","body","className","title","filter","input","Math","round","$stateful","$timeout","$location","hCodeValues","statHelper","itemCategory","saveHelper","exportLinkHelper","groupHelper","translations","dntData","dntReset","tryInit","vm","reloaded","allLoaded","files","getDntFiles","build","forEach","columns","fileName","isLoaded","newItems","reloadGroup","buildName","updatedSavedItems","items","onChange","progress","this","deleteGroup","path","editGroup","copyGroup","newGroupName","importGroup","renameSavedGroup","enemyLevel","playerLevel","heroLevel","job","damageType","element","secondaryElement","enemyStatCaps","playerStatCaps","conversions","baseStats","heroStats","init","createShortUrl","setShortUrl","longUrl","createGroupLink","shortUrl","sessionStorage","getItem","directive","scope","bindToController","controllerAs","item","$anchorScroll","$routeParams","currentGroup","localStorage","setupBuilds","savedItems","getSavedItems","buildNames","Object","keys","sort","builds","i","length","push","name","groupName","saveBuildSelection","anyItems","createGroup","handleChange","console","log","toggleGroup","url","publish","search","stats","getBuildStats","itemsByCategory","getItemsByCategory","getSaveDate","group","lastUpdate","Date","toLocaleDateString","getSaveTime","toLocaleTimeString","getBuildSummary","summary","itemsByType","type","jobs","itemColumnsToLoad","character","saveGroup","calcStatPercent","newVal","origVal","scrollTo","groupNames","getGroupCalcStats","groupCalcStats","getCalculatedStats","getBuild","pickup","index","selectedIndex","replaceHPAffectAmount","replaceMDmgAffectAmount","replacePDmgAffectAmount","replaceAvgDmgAffectAmount","nakedStats","getNakedStats","combinedStats","getCombinedStats","setStats","getSetStats","allStats","concat","mergeStats","nextGroup","uptoItem","updateRows","prevGroup","foundGroup","headers","summaryStatIds","id","summaryDisplay","pcIndexes","rows","typeName","pcIndex","enchantmentNum","rowIndex","makeFakeCells","data","makeCell","num","click","col","move","swapEnchantmentNumber","setTalisman","splice","replaceAffectAmount","newEnhancementNum","extraStats","stat","max","enchantmentStats","fullStats","getReplaceAffectAmount","statId","itemIndex","initReplaceAffects","item2","fullStats1","fullStats2","gItem","newStats","origStats","getStat","getStatName","retVal","eleId","elements","len","save","selectedCategory","category","byName","getCategoryItems","itemsByCat","getCategories","categories","setSelectedCategory","value","setItem","allowMoreItems","maxCat","getItemCount","itemCountText","allItems","numOffensiveSlots","numOffensiveGems","offensiveGemSlots","totalIncreasingGems","numIncreasingSlots","numIncreasingGems","gemType","sparkTypeId","increasingGemSlots","number","numItems","cat","numItemText","removeItem","newItemList","server","newGroup","oldGroupName","damageTypes","getFinalJobs","allJobs","finalJobs","j","getBaseJobName","bJob","newJobs","key","setHeroStats","setJob","getStatCap","colName","useLevel","getStatCaps","getJobConversion","getConversions","getJobBaseStat","getBaseStats","invalidGroupName","ok","getHeroStats","getElementById","focus","setSelectionRange","quickAdd","startedForCat","stepNumber","datas","options","setOptions","hasStarted","getOptions","selectOption","createData","isValidStepNumber","newItem","dntFiles","tryToAddItem","anyLoading","cancel","reloadItem","saveItem","reset","start","hasOptions","back","pop","testOptions","$scope","region","getById","setLocationByName","g","e","p","h","d","t","s","itemString","split","itemStr","decodeItem","isLoading","newBuildName","rawSavedData","exportData","JSON","stringify","LZString","compressToUTF16","aboutAction","icon","noLocationMenu","normalMenu","isSearch","indexOf","startedLoading","tlocation","noRegion","dntLocation","fireAction","action","getActions","menu","extraCss","$route","dntInit","translationsStatus","progressTranslations","translate","msg","testResults","translationResults","advancedSetup","hostedFiles","noLocation","sessionLocation","alternativeFiles","location","setLocation","saveLocation","existingFile","resetSessionData","clear","hash","reload","loadUiString","setCustomUrl","testLocation","getDntLocation","getTlocation","getHostedFiles","getWorldName","setTLocation","edit","updateParams","buildSearch","onlineService","getClassBuilds","then","jobBuilds","maxDisplay","totalNumResults","jobId","showMoreResults","extra","allResults","getFilteredBuilds","uid","results","result","f","toUpperCase","guild","profile","getSavedBuilds","getUserBuilds","storedBuilds","getProfile","openServer","load","user","getUser","handleError","err","show","login","saveProfile","getTime","saveBuild","publishBuild","startPublish","about","deleteAccount","openLocal","getBuildLimit","maxBuilds","getNumStoredBuilds","_","size","getNumBuilds","signOut","deleteLocal","localToDelete","getAllBuildNames","allKeys","uniq","reallyDeleteLocal","deleteServer","serverToDelete","reallyDeleteServer","deleteBuild","published","copyLocally","clearGroup","addAffectAmount","groupItems","getAddAffectAmount","initAddAffects","getGroupItems","numMatches","str","itemSplit","exchangeType","itemSource","a","b","hasMaxExchangable","maxExchange","addToGroup","replace","replaceItem","newStatVal","dropdownStats","noCustom","getStats","newStat","addStat","removeStat","getNewStatName","getNewStatDisplayValue","getStatDisplayValue","display","itemType","enchantments","enchantment","enchantmentAfter","enchantmentCost","enhancementOptions","setEnchantment","EnchantLevel","NeedCoin","isMaxEnchantLevel","setEnchantmentNum","enhancementOption","nextEnchantment","getOption","prevEnchantment","getEnchantments","enchantmentId","enchantDnt","eid","find","showMaterials","materials","itemId","itemCount","NameID","NameIDParam","material","IconImageIndex","rank","Rank","levelLimit","LevelLimit","getPotentialStats","pStats","emptyStatId","potentials","sIndex","hide","potential","changingPotentials","potentialStats","pid","getPotentials","potentialDnt","PotentialID","potentialDntEx","nextPotential","prevPotential","changePotential","isFirstPotential","isLastPotential","reportProgress","initSkills","dntFile","baseJobName","pve","skillData","isMaxSkillLevel","getPotentialIndex","potentialIndex","sparkId","sparks","spark","nextSpark","sparkStats","isMoreSparks","isFirstSpark","prevSpark","removeSpark","getSparks","sid","sparkDnt","amount","itemFactory","typeId","pouchFileNames","allItemFileName","charmItemtable","commonCharmItemtable","initBoxContents","getCharmItems","TypeParam1","getPouchItems","boxType","getPouchItemsFromFile","pouchFileName","pouchData","gold","GoldMin","isGroup","pouchItem","pouchItemCount","itemds","basicItem","createBasicItem","count","charmFiles","charmData","getData","c","cd","CharmNum","Look","ItemID","Count","Gold","crafts","cFiles","initCrafts","initCraft","newCrafts","found","k","fCrafts","craft","Cost","itemColName","qtyColName","extractFileName","initExtract","disjoint","getItemData","DisjointDrop1","EnchantID","DisjointDrop","getItems","getGold","Number","Disjointamount","getPlates","plateFile","r","row","itemData","allFiles","initSets","getSetItems","setId","getCombinedCosts","shops","item1s","PurchaseItem1","item2s","PurchaseItem2","shopCost","shopName","ShopID","tabName","TabNameID","nightmarePoints","ladderPoints","item1","numItem1","numItem2","shopNames","PurchaseType1","PurchaseItemValue1","PurchaseType2","PurchaseItemValue2","shopCosts","cShopFileName","cSysShopFileName","cCashShopFileName","initShops","newShopCosts","matchingTransfers","transferFileName","initTransfers","transfers","NeedItemID1","NeedItemID2","level","ResultLevel","ResultEnchantLevel","rankNames","ResultRank","NeedItemCount1","NeedItemCount2","getJobName","getAllJobs","needJobClass","jobName","anyToLoad","setFullStats","canExtract","Type","canTransfer","isInSet","isPlate","canUse","detail","hasContents","getDescription","description","mainDnt","DescriptionID","DescriptionIDParam","getExchangeType","exchangeDnt","exchange","toLowerCase","setDetail","getServerStorage","IsCash","AbleWStorage","encodeItem","customItems","currentResults","nameSearch","getResults","createCustomItem","jobInit","lastJobNumber","byPath","catName","minLevel","maxLevel","grades","savedSearchStatId","hideLevel","hideJob","rankChecked","checkedRank","pcStatId","pc","statVals","newResults","numEquip","curDisplay","hideRank","isClassJob","initItem","nameSearches","allMatch","ns","statFound","statVal","min","value1","value2","statResults","getDntName","baseClassName","getSkills","loadedJobId","skills","baseJobNames","baseName","dntName","setupSkills","allReady","numSkills","EffectClass1","EffectClass2","EffectClass3","EffectClass4","EffectClass5","EffectClass6","NeedJob","hasStartedLoading","translationsInit","itemLinkClosed","saveCustomItems","getCustomItems","toString","boxes","boxeContents","initBoxes","box","numBoxes","nameId","nameParam","chooseClass","restrict","onSetJob","chooseClassController","getBaseJobs","englishName","EnglishName","dnsimCategoryLinks","link","attrs","setCategory","dnsimItemIcon","$watch","newValue","oldValue","iconImage","getIcon","prefix","fileIndex","floor","getIconXPostion","getIconYPostion","dnsimItemLink","noClick","itemLink","openItem","dnsimJobIcon","JobIcon","dnsimLoading","transclude","$on","setLoadCount","loadError","numLoading","n","totalToLoad","dnsimSelectAllOnClick","hasSelectedAll","on","$event","selectionStart","selectionEnd","select","dnsimStats","altStats","separator","showStats","append","text","newElement","clone","css","originalDisplay","html","lastElement","after","addedElements","remove","first","output","def","sep","needSetNum","combineWith","stat2","key2","dnsimStringToNumber","require","ngModel","$parsers","$formatters","parseFloat","jobConversions","statCaps","jobBaseStats","heroLevels","heroLevelPotentials","complete","jobConversionColsToLoad","statCapColsToLoad","jobBaseStatColsToLoad","findFast","getRow","pIndex","HeroLevelAbilityID","factory","TypeParam2","TypeParam3","NeedJobClass","State1","StateValue1","State1_Max","State1_GenProb","State2","StateValue2","State2_Max","State3","StateValue3","State3_Max","State4","StateValue4","State4_Max","State5","StateValue5","State5_Max","State6","StateValue6","State6_Max","State7","StateValue7","State7_Max","State8","StateValue8","State8_Max","State9","StateValue9","State9_Max","State10","StateValue10","State10_Max","SkillID","dragonjeweltype","ExchangeType","partsDnt","SetItemID","EnchantRatio","BreakRatio","MinDown","MaxDown","NeedItemID3","NeedItemCount3","NeedItemID4","NeedItemCount4","NeedItemID5","NeedItemCount5","ProtectItemCount","State1Value","State2Value","State3Value","State4Value","State5Value","State6Value","State7Value","State8Value","State9Value","State10Value","PotentialNo","PotentialRatio","State11","State11Value","State12","State12Value","State13","State13Value","State14","State14Value","State15","State15Value","State16","State16Value","gemDnt","setDnt","jobsDnt","JobName","JobNumber","BaseClass","ParentJob","Strength","Agility","Intelligence","Stamina","AggroperPvE","BaseMP","Cbase","Cdefense","Ccritical","Cfinaldamage","CcriticalDamage","HP","StrengthAttack","AgilityAttack","IntelligenceAttack","PhysicalDefense","MagicDefense","Critical","CriticalResistance","Stiff","StiffResistance","Stun","StunResistance","MoveSpeed","MoveSpeedRevision","DownDelay","ElementAttack","ElementDefense","ElementDefenseMin","ElementDefenseMax","StrengthIntelligenceToCriticalDamage","$rootScope","createLoader","file","colsToLoad","loader","reader","DntReader","loaded","progressCallback","completeCallbacks","$broadcast","loadDntFromServerFile","loaders","findIndexes","Array","numRows","column","numResults","colIndex","columnIndexes","findIndex","val","resetAll","getNumRows","lookupValue","columnName","columnNames","convertData","getValue","initFactory","allFactories","prop","newFactory","source","$http","small","itemTypeName","itemBit","bitIndex","charAt","parseInt","substr","statString","statBit","statBitIndex","splitStat","itemStrings","self","encodeURI","join","window","href","post","success","status","error","skillDnt","pv","skillLevelDnt","skillLevelDatas","skillLevelVals","SkillIndex","SkillLevel","SkillExplanationID","SkillExplanationIDParam","getSkillStats","ds","totalRatio","ps","createItem","setItemCategory","usePartDnt","parts","sets","DragonJewelSlot1","DragonJewelSlot2","DragonJewelSlot3","DragonJewelSlot4","weaponDnt","allDntFiles","key1","sourceType","limitExchange","sourceName","loading","loadItems","catItems","isItemForCat","rawData","gemTypes","gem","itemMap","types","sorted","enh1","enh2","localeCompare","typeError","itemSourceName","potentialRatio","dType","dLevelLimit","dRank","minRank","dState1_GenProb","dStateValue1","dTypeParam1","exists","numPotentials","q","potentialsMatch","end","time","p1","p2","state1Col","state2Col","val1Col","val2Col","skillId","iconIndex","getPotentialRatio","ratio","doComplete","itemSources","tech","tman","plate","eq","rbeq","pvpeq","c2016","c2015","c2014","cash","event","xtras","alljobs","baseJobs","createJob","parentJob","parentJobData","$q","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","resolve","reject","auth","onAuthStateChanged","database","ref","once","storedProfile","decompressBuild","service","copy","deleteNullProperties","set","compressBuild","each","stringifiedData","compressedBuild","decompressFromUTF16","parse","actions","lev","all","test","recurse","undefined","pList","jobIds","currentUser","isItemStep","alterItem","findData","maxItems","addItem","matchesItem","stepDefs","exchangeStep","exchanges","exId","numExchange","exName","accExchangeStep","sixtyLevelStep","allLevelStep","cashRankStep","techRankStep","talismanRankStep","gemRankStep","otherRankStep","equipRankStep","enhanceTalismanStep","titleStep","allTitles","usefulTitles","enhanceStep","itemStep","techSkillStep","itemNameStep","itemNames","itemNamesList","distinctItemNameStep","numStatsStep","numStats","customStep","categorySteps","titles","weapons","armour","accessories","offensive gems","increasing gems","enhancement plates","expedition plates","talisman","costume","techs","custom","stepName","getStepName","step","dntLocationRegion","hostedFile","lastTFile","newFiles","locationName","newLocation","translationResettingEvents","groups","isArray","updatedItems","getUniqueGroupName","existingGroups","groupNameIndex","lastIndexOf","startIndex","foundIndex","originalName","ex","getHiddenTypes","saveHiddenTypes","getPc","statDef","statLookup","getSkillPc","skPc","applyPc","dupeStat","addAvgDamageStat","nonEleDamage","critChance","critDamagePc","fdPc","avgDmg","elementStat","dmgStat","secElementId","priElementId","secondaryElementStat","secAvgDmg","agi","int","vit","hp","defpc","mdef","mdefpc","aPwr","extraPdmg","extraPdmgMod","paPwr","intToPdmg","minPdmg","maxPdmg","extraMdmg","extraMdmgMod","maPwr","strToMdmg","minMdmg","maxMdmg","crit","skCrit","cDmg","fd","maxFd","pow","firePc","icePc","lightPc","darkPc","pdefEqHp","mdefEqHp","eqHp","effects","stillCols","valColName","effectId","map","skillEffectMapping","getVals","vals","mapTo","effect","calculatedStats","dnTranslations","DnTranslations","tFile","completeCallback","sizeLimit","loadDefaultFile","loadFromSession","idParam","params","toNoDec","inThousands","toPercent","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","25","26","29","32","33","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","74","75","76","77","81","101","102","103","104","107","1001","1004","1006","1008","1009","1012","1029","1103","2001","2004","2006","2008","2009","3000","3001","3002","3008","4012","4050","4051","4052","4053","4075","4076","10164","10165","28001","28002","28003","28004","28005","28006","28007","28008","28009","29001","29002","29003","29004","29005","29006","29007","29008","29009","5001","5002","5003","5004","5005","5006","5007","5008","5009","5101","5102","5103","5104","5105","5106","5107","5108","5109","59001","52001","52002","52003","52004","52005","52006","52007","52008","52009","24","27","28","89001","88001","88002","88003","88004","88005","88006","88007","88008","88009","66001","35006","14051","14052","14053","14054","14055","14056","14057","14058","14059","40011","40012","40013","40014","40015","40016","40017","40018","40001","40002","91001","45001","typeNames","38","90","132","139","34","35","36","37","39","87","88","89","134","185","251","164","165","222","useMax","useStateXVal","mightHaveSets","currentState","stateProp","stateId","currentData","setupStat","stats1","stats2","add","statMap"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\n'use strict';\n\nangular.module('dnsim').config(['$routeProvider', config]);\n\nfunction config($routeProvider) {\n\n  $routeProvider.\n  \n    when('/about', {\n      templateUrl: 'ui/about/about.html',\n      controller: 'AboutCtrl as about'\n    }).\n    \n    when('/setup', {\n      templateUrl: 'ui/nav/setup.html',\n      controller: 'SetupCtrl'\n    }).\n    when('/test', {\n      templateUrl: 'ui/nav/test.html',\n      controller: 'TestCtrl'\n    }).\n    \n    when('/items/', {\n      templateUrl: 'ui/secrets/items.html',\n      controller: 'ItemsCtrl as items'\n    }).\n    \n    when('/', {\n      redirectTo: '/builds'\n    }).\n    when('/saved', {\n      redirectTo: '/builds'\n    }).\n    when('/saved/:groupName*', {\n      redirectTo: '/builds/:groupName'\n    }).\n    when('/builds', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/builds/:groupName*', {\n      templateUrl: 'ui/builds/build-list.html',\n      controller: 'BuildListCtrl as buildList'\n    }).\n    when('/view-group/:region?', {\n      templateUrl: 'ui/builds/view-group.html',\n      controller: 'ViewGroupCtrl'\n    }).\n    when('/edit-build/:groupName*', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/new-build', {\n      templateUrl: 'ui/builds/edit-build.html',\n      controller: 'EditBuildCtrl as editGroup',\n      reloadOnSearch: false,\n    }).\n    when('/delete-build/:name*', {\n      templateUrl: 'ui/builds/delete-build.html',\n      controller: 'DeleteBuildCtrl as deleteBuild',\n      reloadOnSearch: false,\n    }).\n    \n    when('/item-search', {\n      redirectTo: '/search'\n    }).\n    when('/item-search/:itemType', {\n      redirectTo: '/search/:itemType'\n    }).\n    \n    when('/search', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    when('/search/custom', {\n      templateUrl: 'ui/search/custom-items.html',\n      controller: 'CustomItemCtrl as customItems'\n    }).\n    when('/search/skills', {\n      templateUrl: 'ui/search/skill-search.html',\n      controller: 'SkillSearchCtrl as skillSearch'\n    }).\n    when('/search/:itemType*', {\n      templateUrl: 'ui/search/item-search.html',\n      controller: 'ItemSearchCtrl'\n    }).\n    \n    when('/item/:region?/:itemString*', {\n      templateUrl: 'ui/item/item.html',\n      controller: 'ItemCtrl',\n      reloadOnSearch: false,\n    }).\n    \n    when('/export', {\n      templateUrl: 'ui/nav/export.html',\n      controller: 'ExportCtrl',\n    }).\n    \n    when('/talismans', {\n      templateUrl: 'ui/builds/build-talismans.html',\n      controller: 'BuildTalismansCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/publish', {\n      templateUrl: 'ui/online/publish.html',\n      controller: 'PublishCtrl as ctrl',\n    }).\n    \n    when('/profile/:uid', {\n      templateUrl: 'ui/online/profile.html',\n      controller: 'ProfileCtrl as ctrl',\n    }).\n    \n    when('/published/:uid/:buildName*', {\n      templateUrl: 'ui/online/published.html',\n      controller: 'PublishedCtrl as ctrl',\n    }).\n    \n    when('/build-search/:jobId?', {\n      templateUrl: 'ui/online/build-search.html',\n      controller: 'BuildSearchCtrl as ctrl',\n    }).\n    \n    otherwise({\n      redirectTo: '/builds'\n    });\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim')\n.controller('AboutCtrl', \n  ['$window',\n  function($window) {\n    'use strict';\n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim';\n  }]\n);\n})();","angular.module('dnsim').filter('percentage', [function() {\n  'use strict';\n\n  function filter(input) {\n    if(typeof input == 'number') {\n      return (Math.round(input * 100 * 100) / 100) + '%';\n    }\n    else {\n      return input;\n    }\n  }\n  filter.$stateful = false;\n\n  return filter;\n}])","angular.module('dnsim').controller('buildActionsCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper','exportLinkHelper','groupHelper','translations','dntData','dntReset',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper,exportLinkHelper,groupHelper,translations,dntData,dntReset) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.deleteGroup = function() {\n    $location.path('/delete-build/' + vm.buildName);\n  }\n  \n  this.editGroup = function() {\n    $location.path('/edit-build/' + vm.buildName)\n  }\n  \n  this.copyGroup = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n    \n    $location.path('/builds/' + newGroupName);\n  }\n  \n  this.reloaded = false;\n  this.reloadGroup = function() {\n    dntReset();\n    vm.reloaded = false;\n    \n    translations.init(progress, tryInit);\n\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      dntData.init(fileName, columns, progress, tryInit);\n    });\n    \n    vm.onChange();\n  }\n\n  function tryInit() {\n    if(vm.reloaded) {\n      return;\n    }\n    \n    var allLoaded = true;\n    var files = groupHelper.getDntFiles(vm.build);\n    angular.forEach(files, function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        allLoaded = false;\n        return;\n      }\n    });\n    \n    if(allLoaded && translations.isLoaded()) {\n      var newItems = groupHelper.reloadGroup(vm.buildName, vm.build);\n      saveHelper.updatedSavedItems(vm.buildName, newItems);\n      vm.build.items = newItems;\n      \n      vm.reloaded = true;\n      $timeout(vm.onChange);\n    }\n  }\n  \n  function progress() {\n  }\n  \n  this.createShortUrl = function() {\n    exportLinkHelper.createShortUrl(vm.buildName, vm.build);\n  }\n    \n  this.setShortUrl = function() {\n    if(vm.build) {\n      var longUrl = exportLinkHelper.createGroupLink(vm.buildName, vm.build);\n      vm.build.shortUrl = sessionStorage.getItem(longUrl);\n    }\n  }\n  \n  this.setShortUrl();\n}])\n.directive('dngearsimBuildActions', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildActionsCtrl',\n    controllerAs: 'buildActions',\n    templateUrl: 'ui/builds/build-actions.html'\n  };\n});","angular.module('dnsim').controller('buildItemCtrl',\n\n['$timeout','statHelper','saveHelper',\nfunction($timeout,statHelper,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n}])\n.directive('dngearsimBuildItem', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange'\n    },\n    controller: 'buildItemCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/builds/build-item.html'\n  };\n});","angular.module('dnsim').controller('BuildListCtrl', \n  [ '$window','$location','$anchorScroll','$routeParams','$timeout','saveHelper',\n  function($window,$location,$anchorScroll,$routeParams,$timeout,saveHelper) {\n    'use strict';\n    \n    var vm = this;\n    document.body.className = 'saved-back';\n    this.currentGroup = localStorage.getItem('currentGroup');\n    this.setupBuilds = function() {\n      vm.savedItems = saveHelper.getSavedItems();\n      vm.buildNames = Object.keys(vm.savedItems).sort();\n      vm.builds = [];\n      for(var i=0;i<vm.buildNames.length;++i) {\n        vm.builds.push({\n          name: vm.buildNames[i],\n          build: vm.savedItems[vm.buildNames[i]],\n        });\n      }\n    }\n    this.setupBuilds();\n    \n    if('groupName' in $routeParams) {\n      if($routeParams.groupName != this.currentGroup) {\n        this.currentGroup = $routeParams.groupName;\n        saveHelper.saveBuildSelection(this.currentGroup, this.savedItems);\n      }\n    }\n    else if(this.currentGroup && this.currentGroup in this.savedItems) {\n      $location.path('/builds/' + this.currentGroup);\n    }\n    else {\n      this.currentGroup = null;\n    }\n    \n    if(this.currentGroup) {\n      $window.document.title = 'DN Gear Sim | ' + this.currentGroup;\n    }\n    else {\n      $window.document.title = 'DN Gear Sim | BUILDS';\n    }\n\n    this.anyItems = function() {\n      return Object.keys(this.savedItems).length > 0;\n    }\n\n    this.createGroup = function() {\n      $location.path('/new-build');\n    }\n    \n    this.handleChange = function() {\n      vm.setupBuilds();\n      $timeout();\n      console.log('change');\n    }\n  \n    this.toggleGroup = function(buildName) {\n      saveHelper.saveBuildSelection(buildName, this.savedItems);\n      $location.url('/builds/' + buildName);\n    }\n    \n    this.publish = function() {\n      $location.url('/publish');\n    }\n    \n    this.search = function() {\n      $location.url('/build-search');\n    }\n    \n    $timeout(function() {\n      $anchorScroll('/builds/' + vm.currentGroup);\n    });\n  }]\n);\n","angular.module('dnsim').controller('buildStatsCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n}])\n.directive('dngearsimBuildStats', function() {\n  return {\n    scope: true,\n    bindToController: {\n      stats: '=stats',\n      build: '=build',\n    },\n    controller: 'buildStatsCtrl',\n    controllerAs: 'statsCtrl',\n    templateUrl: 'ui/builds/build-stats.html'\n  };\n});","angular.module('dnsim').controller('buildSummaryCtrl',\n\n['$routeParams','$location','hCodeValues','statHelper','itemCategory',\nfunction($routeParams,$location,hCodeValues,statHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  this.itemsByCategory = itemCategory.getItemsByCategory(this.build.items);\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.getBuildSummary = function(group) {\n    var summary = '';\n    \n    var typeCounts = {};\n    var cashItems = 0;\n    var titles = 0;\n    angular.forEach(vm.itemsByCategory, function(itemsByType, type) {\n      if(itemsByType.length > 0) {\n        if(summary.length > 0) {\n          summary += ', ';\n        }\n        summary += itemsByType.length + ' ' + type;\n      }\n    });\n    \n    return summary;\n  }\n}])\n.directive('dngearsimBuildSummary', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build'\n    },\n    controller: 'buildSummaryCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build-summary.html'\n  };\n});","angular.module('dnsim').controller('BuildTalismansCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','statHelper','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,statHelper,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | TALISMANS';\n  $window.scrollTo(0, 0);\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = localStorage.getItem('currentGroup');\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    console.log('cannot find build');\n    return;\n  }\n  \n  this.getGroupCalcStats = function() {\n    if(this.groupCalcStats == null) {\n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.pickup = function(index) {\n    vm.selectedIndex = index;\n    \n    vm.replaceHPAffectAmount = [];\n    vm.replaceMDmgAffectAmount = [];\n    vm.replacePDmgAffectAmount = [];\n    vm.replaceAvgDmgAffectAmount = [];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    vm.groupCalcStats = null;\n    saveGroup();\n    vm.savedItems = saveHelper.getSavedItems();\n    vm.updateRows();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n  this.headers = [\n    '+100%',\n    '+75%',\n    '+25%',\n    '+0%',\n    ];\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n  \n  this.pcIndexes = {};\n  this.pcIndexes['100'] = 0;\n  this.pcIndexes['75'] = 1;\n  this.pcIndexes['25'] = 2;\n  this.pcIndexes['0'] = 3;\n  \n  this.selectedIndex = -1;\n  \n  this.rows = [];\n  \n  this.updateRows = function() {\n    vm.rows = [];\n        \n    angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n      if(item.typeName == 'talisman') {\n        var pcIndex = vm.pcIndexes[item.enchantmentNum];\n        if(!pcIndex && pcIndex != 0) {\n          pcIndex = 3;\n        }\n        \n        var rowIndex = 0;\n        for(;;) {\n          if(!vm.rows[rowIndex]) {\n            vm.rows[rowIndex] = vm.makeFakeCells();\n          }\n          \n          if(vm.rows[rowIndex][pcIndex].index < 0) {\n            if(!item.enchantmentNum) {\n              item.enchantmentNum = 0;\n            }\n            \n            var data = vm.makeCell(item, index);\n            vm.rows[rowIndex][pcIndex] = data;\n            break;\n          }\n          else {\n            rowIndex++;\n          }\n        }\n      }\n      \n    });\n    \n    if(vm.rows.length < 3) {\n      vm.rows[vm.rows.length+1] = vm.makeFakeCells();\n    }\n  }\n  \n  this.makeFakeCells = function(num) {\n    return [vm.makeCell({enchantmentNum:100},-1),vm.makeCell({enchantmentNum:75},-2),vm.makeCell({enchantmentNum:25},-3),vm.makeCell({enchantmentNum:0},-4)];\n  }\n  \n  this.makeCell = function(item, index) {\n    return { item: item, index: index };\n  }\n  \n  this.click = function(col) {\n    if(vm.selectedIndex == -1) {\n      if(col.index >= 0) {\n        vm.pickup(col.index);\n      }\n    }\n    else {\n      vm.move(col);\n    }\n  }\n  \n  this.move = function(col) {\n    \n    var items = vm.savedItems[vm.groupName].items;\n    if(col.index >= 0) {\n      var swapEnchantmentNumber = col.item.enchantmentNum;\n      \n      vm.setTalisman(col.item, items[vm.selectedIndex].enchantmentNum);\n      vm.setTalisman(items[vm.selectedIndex], swapEnchantmentNumber);\n      items[col.index] = items[vm.selectedIndex];\n      items[vm.selectedIndex] = col.item;\n    }\n    else {\n      var item = items[vm.selectedIndex];\n      vm.setTalisman(item, col.item.enchantmentNum);\n      items.splice(vm.selectedIndex, 1);\n      items.push(item);\n    }\n\n    vm.groupCalcStats = null;\n    vm.selectedIndex = -1;\n    vm.updateRows();\n    vm.replaceAffectAmount = {};\n    $timeout();\n  }\n  \n  this.setTalisman = function(item, newEnhancementNum) {\n    var extraStats = [];\n    angular.forEach(item.stats, function(stat, index) {\n      if(newEnhancementNum) {\n        extraStats.push({id: stat.id, max: stat.max * (newEnhancementNum/100)});\n      }\n    });\n    \n    item.enchantmentStats = extraStats;\n    item.enchantmentNum = newEnhancementNum;\n    \n    item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.stats);\n  }\n  \n    \n  this.replaceAffectAmount = {};\n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    if(this.replaceAffectAmount[itemIndex]) {\n      return this.replaceAffectAmount[itemIndex][statId];\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex] || vm.selectedIndex == -1) {\n      return;\n    }\n    this.replaceAffectAmount[itemIndex] = {};\n    \n    var group = vm.savedItems[vm.groupName];\n    var item2 = group.items[vm.selectedIndex];\n    \n    var extraStats = [];\n    var fullStats1 = [];\n    if(item.stats) {\n      angular.forEach(item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (item2.enchantmentNum/100)});\n      });\n      fullStats1 = hCodeValues.mergeStats(extraStats, item.stats);\n    }\n    \n    extraStats = [];\n    angular.forEach(item2.stats, function(stat, index) {\n      extraStats.push({id: stat.id, max: stat.max * (item.enchantmentNum/100)});\n    });\n    var fullStats2 = hCodeValues.mergeStats(extraStats, item2.stats);\n\n    var newItems = [{stats: fullStats1}, {stats: fullStats2}];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem && item2 !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.save = function() {\n    saveHelper.updatedSavedItems(vm.groupName, vm.savedItems[vm.groupName].items);\n    $location.path('/builds/' + vm.groupName);\n  }\n  \n  this.updateRows();\n  \n}]); ","angular.module('dnsim').controller('buildCtrl',\n\n['$timeout','$location','hCodeValues','statHelper','itemCategory','saveHelper',\nfunction($timeout,$location,hCodeValues,statHelper,itemCategory,saveHelper) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.stats = statHelper.getBuildStats(this.build);\n  \n  var selectedCategory = localStorage.getItem('selectedItemCategory');\n  this.category = itemCategory.byName(selectedCategory);\n  if(!this.category) {\n    selectedCategory = 'titles';\n    this.category = itemCategory.byName('titles');\n  }\n  \n  this.getCategoryItems = function() {\n    var itemsByCat = itemCategory.getItemsByCategory(this.build.items);\n    if(vm.category.name in itemsByCat) {\n      return itemsByCat[vm.category.name];\n    }\n    else {\n      return [];\n    }\n  }\n  \n  this.getCategories = function() {\n    return itemCategory.categories;\n  }\n    \n  this.setSelectedCategory = function(value) {\n    this.category = itemCategory.byName(value);\n    localStorage.setItem('selectedItemCategory', value);\n  }\n\n  this.toggleGroup = function() {\n    localStorage.setItem('currentGroup', null);\n    $location.url('/builds');\n  }\n  \n  this.getSaveDate = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleDateString();\n    }\n  }\n  \n  this.getSaveTime = function(group) {\n    if(vm.build.lastUpdate > 0) {\n      var lastUpdate = new Date(vm.build.lastUpdate);\n      return lastUpdate.toLocaleTimeString();\n    }\n  }\n  \n  this.allowMoreItems = function() {\n    return !vm.category.maxCat || this.getCategoryItems().length < vm.category.maxCat;\n  }\n  \n  this.getItemCount = function() {\n    var itemCountText = '';\n    var allItems = vm.build.items;\n    \n    if(vm.category.name == 'offensive gems') {\n      var numOffensiveSlots = 0;\n      var numOffensiveGems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          numOffensiveGems++;\n        }\n        else if(item.offensiveGemSlots) {\n          numOffensiveSlots += item.offensiveGemSlots;\n        }\n      });\n      \n      itemCountText = numOffensiveGems + ' / ' + numOffensiveSlots;\n    }\n    else if(vm.category.name == 'increasing gems') {\n      \n      var totalIncreasingGems = 0;\n      var numIncreasingSlots = 0;\n      var numIncreasingGems = {};\n      angular.forEach(allItems, function(item, index) {\n        if(item.typeName == vm.category.name) {\n          var gemType = item.sparkTypeId;\n          if(!gemType) {\n            gemType = 0;\n          }\n          \n          if(!(gemType in numIncreasingGems)) {\n            numIncreasingGems[gemType] = 0;\n          }\n          numIncreasingGems[gemType]++;\n          totalIncreasingGems++;\n        }\n        else if(item.increasingGemSlots) {\n          numIncreasingSlots += item.increasingGemSlots;\n        }\n      });\n      \n      itemCountText = ''\n      angular.forEach(numIncreasingGems, function(number, gemType) {\n        if(itemCountText.length > 0) {\n          itemCountText += '+';\n        }\n        itemCountText += number;\n      });\n      \n      itemCountText = totalIncreasingGems + ' (' + itemCountText + ') / ' + numIncreasingSlots;\n    }\n    else {\n      var numItems = 0;\n      angular.forEach(allItems, function(item, index) {\n        if(item && item.typeName == vm.category.name) {\n          numItems++;\n        }\n      });\n      \n      itemCountText = numItems;\n      var cat = itemCategory.byName(vm.category.name);\n      if(cat && 'numItemText' in cat) {\n        itemCountText += ' / ' + cat.numItemText;\n      }\n    }\n    \n    return itemCountText + ' ' + vm.category.name;\n  }\n  \n  this.handleChange = function() {\n    vm.onChange();\n  }\n  \n  this.removeItem = function(item) {\n    item.removeItem = true;\n    var newItemList = [];\n    angular.forEach(vm.build.items, function(gItem, index) {\n      if(gItem && !gItem.removeItem) {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.buildName, newItemList);\n    vm.onChange();\n  }\n  \n}])\n.directive('dngearsimBuild', function() {\n  return {\n    scope: true,\n    bindToController: {\n      buildName: '=buildName',\n      build: '=build',\n      onChange: '&onChange',\n      server: '=server'\n    },\n    controller: 'buildCtrl',\n    controllerAs: 'buildCtrl',\n    templateUrl: 'ui/builds/build.html'\n  };\n});","angular.module('dnsim').controller('DeleteBuildCtrl',\n\n['$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad',\nfunction($location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad) {\n  'use strict';\n  \n  var vm = this;\n  this.newGroup = true;\n  if('name' in $routeParams) {\n      this.name = $routeParams.name;\n  }\n  \n  this.delete = function() {\n    saveHelper.updatedSavedItems(this.name, []);\n    $location.path('/builds/');\n  }\n    \n}]); ","angular.module('dnsim').controller('EditBuildCtrl',\n\n['$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character',\nfunction($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  'use strict';\n  \n  var vm = this;\n  this.savedItems = saveHelper.getSavedItems();\n  this.group = {};\n  this.newGroup = true;\n  if('groupName' in $routeParams) {\n      this.groupName = $routeParams.groupName;\n      if(this.groupName in this.savedItems) {\n        this.group = this.savedItems[this.groupName];\n        this.newGroup = false;\n      }\n  }\n  else {\n    this.groupName = '';\n  }\n  this.oldGroupName = this.groupName;\n  this.heroStats = [];\n  this.elements = hCodeValues.elements;\n  this.damageTypes = hCodeValues.damageTypes;\n  \n  if(this.group.damageType) {\n    this.damageType = this.group.damageType;\n  }\n  else {\n    this.damageType = hCodeValues.damageTypes[0];\n  }\n    \n  if(this.group.element) {\n    this.element = this.group.element;\n  }\n  else {\n    this.element = hCodeValues.elements[0];\n  }\n    \n  if(this.group.secondaryElement) {\n    this.secondaryElement = this.group.secondaryElement;\n  }\n  else {\n    this.secondaryElement = hCodeValues.elements[0];\n  }\n\n  if(this.group.enemyLevel) {\n    this.enemyLevel = this.group.enemyLevel;\n  }\n  else {\n    this.enemyLevel = 90;\n  }\n  \n  if(this.group.playerLevel) {\n    this.playerLevel = this.group.playerLevel;\n  }\n  else {\n    this.playerLevel = 90;\n  }\n  \n  if(this.group.heroLevel && this.group.heroLevel > 0) {\n    this.heroLevel = this.group.heroLevel;\n  }\n  else {\n    this.heroLevel = 1;\n  }\n  \n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.init = function(vm) {\n    var newJobs = jobs.getFinalJobs();\n    if(newJobs.length > 0) {\n      $timeout( function() {\n        \n        if('job' in vm.group) {\n          angular.forEach(newJobs, function(value, key) {\n            if(value.id == vm.group.job.id) {\n              vm.job = value;\n            }\n          });\n        }\n        \n        vm.setHeroStats();\n      });\n    }\n  }\n  \n  this.setJob = function() {\n    $window.scrollTo(0, 0);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  character.init(function() { vm.init(vm) });\n  \n  this.getStatCap = function(colName, useLevel) {\n    return character.getStatCaps(useLevel)[colName];\n  }\n  this.getJobConversion = function(colName) {\n    return character.getConversions(this.job.id)[colName];\n  }\n  this.getJobBaseStat = function(colName) {\n    return character.getBaseStats(this.playerLevel, this.job.id)[colName];\n  }\n  \n  this.invalidGroupName = function() {\n    if(!this.groupName) {\n      return true;\n    }\n    \n    if(this.groupName in this.savedItems) {\n      if(this.newGroup || this.groupName != this.oldGroupName) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  this.ok = function() {\n    var enemyStatCaps = character.getStatCaps(this.enemyLevel);\n    var playerStatCaps = character.getStatCaps(this.playerLevel);\n    var conversions = character.getConversions(this.job.id);\n    var baseStats = character.getBaseStats(this.playerLevel, this.job.id);\n    var heroStats = character.getHeroStats(this.heroLevel);\n    \n    if(this.newGroup) {\n      this.oldGroupName = this.groupName;\n      saveHelper.importGroup(this.groupName, []);\n    }\n    \n    saveHelper.renameSavedGroup(\n      this.oldGroupName, \n      this.groupName,\n      this.enemyLevel,\n      this.playerLevel,\n      this.heroLevel,\n      this.job,\n      this.damageType,\n      this.element,\n      this.secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats);\n    \n    $location.path('/builds/' + this.groupName);\n  }\n  \n  this.setHeroStats = function() {\n    this.heroStats = character.getHeroStats(this.heroLevel);\n    // console.log('got ' + this.heroStats.length + ' hero stats');\n  }\n  \n  $timeout(function() {\n    var input = document.getElementById('groupNameInput');\n    if(input) {\n      input.focus();\n      input.setSelectionRange(0, 9999);\n    }\n  });\n}]); ","angular.module('dnsim').controller('quickAddCtrl',\n\n['$timeout','statHelper','saveHelper','quickAdd','itemCategory','jobs','dntData','exportLinkHelper',\nfunction($timeout,statHelper,saveHelper,quickAdd,itemCategory,jobs,dntData,exportLinkHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.startedForCat = '';\n  vm.stepNumber = 0;\n  vm.datas = [];\n  vm.options = [];\n  \n  this.setOptions = function() {\n    if(vm.hasStarted()) {\n      vm.options = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      if(vm.options.length == 1) {\n        vm.selectOption(vm.options[0]);\n      }\n    }\n  }\n  \n  this.selectOption = function(value) {\n    var data = quickAdd.createData(value, vm.category, vm.stepNumber)\n    vm.datas.push(data);\n    vm.stepNumber++;\n    if(!quickAdd.isValidStepNumber(vm.category, vm.stepNumber)) {\n      \n      var newItem = quickAdd.getItem(vm.datas);\n      var dntFiles = exportLinkHelper.getDntFiles(newItem);\n      angular.forEach(dntFiles, function(columns, fileName) {\n        dntData.init(fileName, columns, function() {}, function() { vm.tryToAddItem(dntFiles, newItem) });\n      });\n      vm.tryToAddItem(dntFiles, newItem);\n    }\n    else {\n      vm.setOptions();\n      console.log('setup next step');\n    }\n  }\n  \n  this.tryToAddItem = function(dntFiles, item) {\n    if(!dntData.anyLoading()) {\n      \n      var allLoaded = true;\n      angular.forEach(dntFiles, function(columns, fileName) {\n        if(!dntData.isLoaded(fileName)) {\n          allLoaded = false;\n        }\n      });\n      \n      if(allLoaded) {\n        if(vm.datas.length > 0) {\n          vm.cancel();\n          var newItem = exportLinkHelper.reloadItem(item);\n          saveHelper.saveItem(vm.buildName, newItem);\n          vm.onChange();\n        }\n      }\n    }\n  }\n  \n  this.reset = function() {\n    vm.stepNumber = 0;\n    vm.datas = [];\n    $timeout(function() {\n      vm.setOptions();\n    });\n  }\n  \n  this.hasStarted = function() {\n    return vm.startedForCat == vm.category.name;\n  }\n  \n  this.start = function() {\n    vm.startedForCat = vm.category.name;\n    \n    jobs.init(function() {}, vm.reset);\n    dntData.init('exchange.lzjson', null, function() {}, vm.reset);\n    itemCategory.init(vm.category.name, vm.reset);\n  }\n  \n  this.hasOptions = function() {\n    return quickAdd.hasOptions(vm.category, vm.build, []);\n  }\n  \n  this.cancel = function() {\n    vm.startedForCat = '';\n    vm.reset();\n  }\n  \n  this.back = function() {\n    if(vm.stepNumber == 0) {\n      vm.cancel();\n    }\n    else {\n      do {\n        vm.stepNumber--;\n        vm.datas.pop();\n        \n        var testOptions = quickAdd.getOptions(vm.category, vm.build, vm.datas);\n      } while(testOptions.length <= 1 && vm.stepNumber > 0);\n      \n      vm.setOptions();\n    }\n  }\n  \n}])\n.directive('dngearsimQuickAdd', function() {\n  return {\n    scope: true,\n    bindToController: {\n      category: '=category',\n      build: '=build',\n      buildName: '=buildName',\n      onChange: '&onChange',\n    },\n    controller: 'quickAddCtrl',\n    controllerAs: 'quickAdd',\n    templateUrl: 'ui/builds/quick-add.html'\n  };\n});","angular.module('dnsim').controller('ViewGroupCtrl', \n  ['$scope','$window','region','$location','$routeParams','saveHelper','dntData','$timeout','translations','dntReset','exportLinkHelper','groupHelper','jobs','character','statHelper','hCodeValues',\n  function($scope,$window,region,$location,$routeParams,saveHelper,dntData,$timeout,translations,dntReset,exportLinkHelper,groupHelper,jobs,character,statHelper,hCodeValues) {\n    'use strict';\n  \n    document.body.className = 'saved-back';\n    $window.document.title = 'DN Gear Sim';\n    \n    region.setLocationByName($routeParams.region);\n    \n    $scope.buildName = '';\n    $scope.build = {};\n    \n\n    if('g' in $routeParams && 'i' in $routeParams) {\n      $scope.buildName = $routeParams.g;\n      \n      $scope.enemyLevel = $routeParams.e;\n      $scope.playerLevel = $routeParams.p;\n      $scope.heroLevel = $routeParams.h;\n      $scope.job = { id: $routeParams.j };\n      $scope.damageType = hCodeValues.damageTypes[$routeParams.d];\n      $scope.element = hCodeValues.elements[$routeParams.t];\n      $scope.secondaryElement = hCodeValues.elements[$routeParams.s];\n        \n      var items = [];\n      \n      var itemString = $routeParams.i;\n      \n      angular.forEach(itemString.split(','), function(itemStr, index) {\n        var item = exportLinkHelper.decodeItem(itemStr);\n        \n        if(item.id > 0) {\n          items.push(item);\n        }\n      });\n\n      $scope.build = {};\n      $scope.savedItems = {};\n      $scope.savedItems[$scope.buildName] = $scope.build;\n      $scope.build.items = items;\n      $scope.isLoading = true;\n      \n      angular.forEach(groupHelper.getDntFiles($scope.build), function(columns, fileName) {\n        dntData.init(fileName, columns, progress, tryInit);\n      });\n      \n      translations.init(progress, tryInit);\n      jobs.init(progress, tryInit);\n      character.init(tryInit);\n      \n      $timeout();\n    }\n    \n    $scope.anyItems = Object.keys($scope.savedItems).length > 0;\n    \n    function tryInit() {\n      \n      if(dntData.anyLoading() || !translations.isLoaded() || !jobs.isLoaded()) {\n        return;\n      }\n      \n      $timeout(function() {\n        var groupName = $scope.buildName;\n        var group = $scope.build;\n        \n        $scope.job = jobs.getById($scope.job.id);\n        \n        $scope.enemyStatCaps = character.getStatCaps($scope.enemyLevel);\n        $scope.playerStatCaps = character.getStatCaps($scope.playerLevel);\n        if($scope.job) {\n          $scope.conversions = character.getConversions($scope.job.id);\n          $scope.baseStats = character.getBaseStats($scope.playerLevel, $scope.job.id);\n        }\n        $scope.heroStats = character.getHeroStats($scope.heroLevel);\n        \n        var newItems = groupHelper.reloadGroup(groupName, group);\n        dntReset();\n      \n        $scope.savedItems = {};\n        $scope.build = {\n          items: newItems,\n          lastUpdate: group.lastUpdate,\n\n          enemyLevel: $scope.enemyLevel,\n          playerLevel: $scope.playerLevel,\n          heroLevel: $scope.heroLevel,\n          job: $scope.job,\n          damageType: $scope.damageType,\n          element: $scope.element,\n          secondaryElement: $scope.secondaryElement,\n          enemyStatCaps: $scope.enemyStatCaps,\n          playerStatCaps: $scope.playerStatCaps,\n          conversions: $scope.conversions,\n          baseStats: $scope.baseStats,\n          heroStats: $scope.heroStats,\n        };\n        $scope.savedItems[groupName] = $scope.build;\n        $scope.stats = statHelper.getBuildStats($scope.build);\n        \n        var longUrl = exportLinkHelper.createGroupLink($scope.buildName, $scope.build);\n        $scope.build.shortUrl = sessionStorage.getItem(longUrl);\n      });\n    }\n    \n    function progress() {\n    }\n    \n    $scope.copyGroup = function() {\n      var newBuildName = saveHelper.importGroup($scope.buildName, $scope.build.items);\n      console.log('copying in as ' + newBuildName);\n      \n      saveHelper.renameSavedGroup(\n        newBuildName, \n        newBuildName,\n        $scope.enemyLevel,\n        $scope.playerLevel,\n        $scope.heroLevel,\n        $scope.job,\n        $scope.damageType,\n        $scope.element,\n        $scope.secondaryElement,\n        $scope.enemyStatCaps, $scope.playerStatCaps, $scope.conversions, $scope.baseStats, $scope.heroStats);\n      \n      $location.url('/builds/' + newBuildName);\n    }\n  }]\n);\n","angular.module('dnsim').controller('ExportCtrl', \n  ['$scope','$window','saveHelper',\n   function($scope, $window, saveHelper) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | EXPORT';\n  \n  var rawSavedData = saveHelper.getSavedItems();\n  $scope.exportData = JSON.stringify(rawSavedData, null, 1);\n  \n  $scope.save = function() {\n    localStorage.setItem('savedItems', LZString.compressToUTF16($scope.exportData));\n  }\n}]);\n","angular.module('dnsim').controller('NavCtrl', \n  ['$scope','$location','translations','region','itemCategory',\n  function($scope,$location,translations,region,itemCategory) {\n    'use strict';\n\n    var aboutAction = { path: 'about', name: '', icon: 'question-sign' }\n    \n    var noMenu = [];\n    var noLocationMenu = [aboutAction];\n    var normalMenu = [\n      {path: 'builds', name:'builds', icon: 'wrench'},\n      {path: 'search', name:'gear', icon: 'search'},\n      {path: 'items', name:'items', icon: 'search'},\n      aboutAction,\n      ];\n      \n    region.init();\n  \n    $scope.isSearch = function() {\n      return $location.path().indexOf('/search') == 0;\n    }\n\n    $scope.isLoading = function() {\n      return translations.startedLoading && \n            !translations.isLoaded() &&\n            region.tlocation != null &&\n            region.tlocation.url != '' &&\n            !$scope.noRegion();\n    }\n    \n    $scope.noRegion = function() {\n      return region.dntLocation == null;\n    }\n    \n    $scope.fireAction = function(action) {\n      if(action.name == 'search') {\n        var cat = localStorage.getItem('selectedItemCategory', action.name);\n        if(cat) {\n          $location.path('/' + action.path + '/' + cat);\n        }\n        else {\n          $location.path('/' + action.path);\n        }\n      }\n      else {\n          $location.path('/' + action.path);\n      }\n    }\n      \n    $scope.getActions = function() {\n      var menu = null;\n      if(region.dntLocation != null && region.dntLocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if(region.tlocation != null && region.tlocation.url == '') {\n        menu = noLocationMenu; \n      }\n      else if($location.path() == '/view-group' || region.dntLocation == null) {\n        menu = normalMenu;\n      }\n      else {\n        menu = normalMenu;\n      }\n      \n      angular.forEach(menu, function(value, key) {\n        delete value.extraCss;\n        if($location.path().length == 1) {\n          if(value.path.length == 1) {\n            value.extraCss = 'active';\n          }\n        }\n        else if(value.path.length > 1 && $location.path().indexOf('/' + value.path) == 0) {\n          value.extraCss = 'active';\n        }\n      });\n      \n      return menu;\n    };\n  }\n])\n.directive('dngearsimNav', function() {\n  return {\n    templateUrl: 'ui/nav/nav.html'\n  };\n});","angular.module('dnsim').controller('SetupCtrl', \n  ['$scope','$window','$route','$timeout','translations','dntInit','dntReset','region',\n   function($scope, $window, $route, $timeout, translations, dntInit, dntReset, region) {\n  'use strict';\n     \n  document.body.className = 'default-back';\n  $window.document.title = 'DN Gear Sim | SETUP';\n  \n  $scope.advancedSetup = false;\n  $scope.isLoading = translations.startedLoading && !translations.isLoaded();\n  $scope.translationResults = [];\n  $scope.hostedFiles = region.hostedFiles;\n  \n  var noLocation = '';\n  var sessionLocation = region.alternativeFiles.url;\n  if(sessionLocation == null) {\n    sessionLocation = noLocation;\n  }\n  \n  $scope.location = sessionLocation;\n  if($scope.location == noLocation) {\n    $scope.testResults = ['No location set'];\n  }\n  else {\n    $scope.testResults = ['Using location ' + $scope.location];\n  }\n  \n  $scope.setLocation = function(url) {\n    $scope.location = url;\n    $scope.isLoading = true;\n    $scope.saveLocation();\n    dntReset();\n\n    $scope.translationResults = [];\n    var existingFile = localStorage.getItem('UIStrings_file');\n    if(existingFile == null || existingFile.indexOf(url) == -1) {\n      sessionStorage.removeItem('UIStrings');\n    }\n    translations.reset();\n    translations.location = url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  $scope.resetSessionData = function() {\n    $scope.testResults = ['session data reset.. reloading page'];\n    region.tlocation = null;\n    region.dntLocation = null;\n    translations.reset();\n    sessionStorage.clear();\n    localStorage.clear();\n    this.saveLocation();\n    $timeout(function() {   \n      location.hash = '';\n      location.reload(true);\n    });\n  }\n  \n  $scope.loadUiString = function() {\n    $scope.translationResults = [];\n    sessionStorage.removeItem('UIStrings');\n    dntReset();\n    translations.reset();\n    translations.location = region.tlocation.url;\n    translations.init(progressTranslations, translationsStatus);\n  }\n  \n  function translationsStatus() {\n    progressTranslations('current translations contain words like ' + translations.translate(329) + ', ' + translations.translate(323) + ' and ' + translations.translate(335));\n    $scope.isLoading = false;\n  }\n  \n  function progress(msg) {\n    $timeout(\n      function() {\n        if($scope.testResults != null) {\n          $scope.testResults.push(msg);\n        }\n      });\n  }\n  \n  function progressTranslations(msg) {\n    $timeout(\n      function() {\n        if($scope.translationResults != null) {\n          $scope.translationResults.push(msg);\n        }\n      });\n  }\n  \n  $scope.saveLocation = function() {\n    dntReset();\n    if($scope.location != noLocation) {\n      region.setCustomUrl($scope.location);\n      \n      region.init();\n      if(region.alternativeFiles.region == region.tlocation.region) {\n        translations.reset();\n        translations.init(progressTranslations, translationsStatus);\n      }\n      $scope.testResults = [\n        'Location saved',\n        'Using location ' + $scope.location];\n    }\n  }\n  \n  $scope.testLocation = function() {\n    if($scope.location != noLocation) {\n      $scope.testResults = [\n        'Using location ' + $scope.location,\n        'Loading all data used by the app'];\n\n      translations.init(progress, function () {\n        dntInit(progress);\n      });\n    }\n  }\n}]);\n","angular.module('dnsim').controller('RegionCtrl', \n  ['$scope','$timeout','$route','$routeParams','$location','translations','region',\n  function($scope,$timeout,$route,$routeParams,$location,translations,region) {\n    'use strict';\n\n    region.init();\n    translations.init(\n      function(msg) { \n        // console.log(msg);\n      }, \n      function() {\n        $timeout();\n      });\n    \n    $scope.getDntLocation = function() {\n      return region.dntLocation;\n    }\n    $scope.getTlocation = function() {\n      return region.tlocation;\n    }\n     \n    $scope.getHostedFiles = function() {\n      // console.log('getting hosted files');\n      return region.hostedFiles;\n    }\n    \n    $scope.getWorldName = function() {\n      if(translations.isLoaded()) {\n        return translations.translate(10169);\n      }\n      else {\n        return '';\n      }\n    }\n    \n    $scope.setTLocation = function(location) {\n      region.setTLocation(location);\n      $scope.edit = false;\n    }\n    \n    $scope.setLocation = function(location) {\n      if($routeParams.region) {\n        $routeParams.region = location.region;\n        $route.updateParams($routeParams);\n      }\n      else {\n        region.setLocation(location);\n      }\n      $scope.edit = !$scope.edit;\n    }\n  }\n])\n.directive('dngearsimRegion', function() {\n  return {\n    templateUrl: 'ui/region/region.html'\n  };\n});","(function () {\n'use strict';\nangular.module('dnsim').controller('BuildSearchCtrl', ['$routeParams','$location','$timeout','onlineService','jobs', buildSearch]);\n\nfunction buildSearch($routeParams,$location,$timeout,onlineService,jobs) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.maxDisplay = 15;\n  vm.totalNumResults = 0;\n  \n  jobs.init(null, function() {\n    if($routeParams.jobId) {\n      vm.job = jobs.getById($routeParams.jobId);\n      getClassBuilds();\n    } \n  })\n  \n  this.setJob = function() {\n    $timeout(function() {\n      $location.path('/build-search/' + vm.job.id);\n    });\n  }\n  \n  this.showMoreResults = function(extra) {\n    vm.maxDisplay = vm.totalNumResults + extra;\n    vm.totalNumResults = 0;\n  }\n  \n  vm.allResults = null;\n  vm.getFilteredBuilds = function() {\n    \n    // init\n    if(vm.allResults == null) {\n      vm.allResults = [];\n      for(var uid in vm.jobBuilds) {\n        for(var buildName in vm.jobBuilds[uid]) {\n          vm.allResults.push({\n            uid: uid,\n            name: buildName,\n            data: vm.jobBuilds[uid][buildName]\n          });\n        }\n      }\n    }\n    \n    var results = [];\n    for(var i=0;i<vm.allResults.length;++i) {\n      \n      var result = vm.allResults[i];\n      if(vm.filter && vm.filter.length > 0) {\n        var f = vm.filter.toUpperCase();\n        if(result.name.toUpperCase().indexOf(f) == -1) {\n          if(!result.data.guild ||\n             result.data.guild.toUpperCase().indexOf(f) == -1) {\n\n            continue;\n          }\n        }\n      }\n      \n      results.push(result);\n\n      if(results.length >= vm.maxDisplay) {\n        break;\n      }\n    }\n    \n    vm.totalNumResults = results.length;\n    return results;\n  }\n  \n  function getClassBuilds() {\n    if(vm.job) {\n      onlineService.getClassBuilds(vm.job).then(function(builds) {\n        if(builds) {\n          console.log('got builds', builds);\n          vm.jobBuilds = builds;\n        }\n        else {\n          console.log('no builds');\n          vm.jobBuilds = {};\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('ProfileCtrl', ['$location', '$routeParams', 'onlineService', profile]);\n\nfunction profile($location, $routeParams, onlineService) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  \n  getSavedBuilds();\n  getProfile();\n  \n  function getSavedBuilds() {\n    onlineService.getUserBuilds(vm.uid).then(function(builds) {\n      if(builds) {\n        vm.storedBuilds = builds;\n      }\n      else {\n        vm.storedBuilds = {};\n      }\n    });\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.uid + '/' + buildName);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n    \n    $location.path('/builds/' + newGroupName);\n  }\n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishCtrl', ['$location', 'saveHelper', 'onlineService', '$routeParams', 'region', publish]);\n\nfunction publish($location, saveHelper, onlineService, $routeParams, region) {\n  'use strict';\n  \n  var vm = this;\n  \n  vm.show = $routeParams.show;\n  \n  onlineService.login().then(function(user) {\n    getSavedBuilds();\n    getProfile();\n  \n    vm.builds = saveHelper.getSavedItems();\n  });\n  \n  function getSavedBuilds() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getUserBuilds(user.uid).then(function(builds) {\n        if(builds) {\n          vm.storedBuilds = builds;\n        }\n        else {\n          vm.storedBuilds = {};\n        }\n      });\n    }\n  }\n  \n  function getProfile() {\n    var user = vm.getUser();\n    if(user) {\n      onlineService.getProfile(user.uid).then(function(profile) {\n        if(profile) {\n          vm.profile = profile;\n        }\n        else {\n          vm.profile = {};\n        }\n      });\n    }\n  }\n  \n  this.saveProfile = function() {\n    onlineService.saveProfile(vm.profile).then(getProfile).catch(handleError);\n  }\n  \n  this.getUser = function() {\n    return onlineService.getUser();\n  }\n  \n  this.save = function(buildName, build) {\n    build.lastUpdate = (new Date()).getTime();\n    onlineService.saveBuild(buildName, build).then(getSavedBuilds).catch(handleError);\n    vm.publishBuild = null;\n  }\n  \n  this.startPublish = function(buildName) {\n    if(buildName in vm.storedBuilds) {\n      if(!vm.builds[buildName].region) {\n        vm.builds[buildName].region = vm.storedBuilds[buildName].region;\n      }\n      \n      if(!vm.builds[buildName].about) {\n        vm.builds[buildName].about = vm.storedBuilds[buildName].about;\n      }\n      \n      if(!vm.builds[buildName].guild) {\n        vm.builds[buildName].guild = vm.storedBuilds[buildName].guild;\n      }\n    }\n    \n    if(!vm.builds[buildName].region) {\n      vm.builds[buildName].region = region.dntLocation.region;\n    }\n    \n    vm.publishBuild = buildName;\n  }\n  \n  function handleError(err) {\n    console.log(err);\n  }\n  \n  this.deleteAccount = function() {\n    onlineService.deleteAccount(vm.storedBuilds);\n  }\n  \n  this.openLocal = function(buildName) {\n    $location.path('/builds/' + buildName);\n  }\n  \n  this.openServer = function(buildName) {\n    $location.path('/published/' + vm.getUser().uid + '/' + buildName);\n  }\n  \n  this.getBuildLimit = function() {\n    if(vm.profile && vm.profile.maxBuilds) {\n      return vm.profile.maxBuilds;\n    }\n    else {\n      return 15;\n    }\n  }\n  \n  this.getNumStoredBuilds = function() {\n    return _.size(vm.storedBuilds);\n  }\n  \n  this.getNumBuilds = function() {\n    return _.size(vm.builds);\n  }\n  \n  this.load = function(buildName, build) {\n\n    var newGroupName = saveHelper.importGroup(buildName, build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      build.enemyLevel,\n      build.playerLevel,\n      build.heroLevel,\n      build.job,\n      build.damageType,\n      build.element,\n      build.secondaryElement,\n      build.enemyStatCaps, \n      build.playerStatCaps, \n      build.conversions, \n      build.baseStats, \n      build.heroStats);\n      \n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  this.signOut = function() {\n    onlineService.signOut();\n  }\n  \n  vm.deleteLocal = function(buildName) {\n    vm.localToDelete = buildName;\n  }\n  \n  vm.getAllBuildNames = function() {\n    var allKeys = _.keys(vm.builds).concat(_.keys(vm.storedBuilds));\n    return _.uniq(allKeys.sort(), true);\n  }\n  \n  vm.reallyDeleteLocal = function(buildName) {\n    saveHelper.updatedSavedItems(buildName, []);\n    vm.localToDelete = null;\n    vm.builds = saveHelper.getSavedItems();\n  }\n  \n  vm.deleteServer = function(buildName) {\n    vm.serverToDelete = buildName;\n  }\n  \n  vm.reallyDeleteServer = function(buildName) {\n    onlineService.deleteBuild(buildName, vm.storedBuilds[buildName]).then(getSavedBuilds);\n    vm.serverToDelete = null;\n  }\n  \n}\n\n})();","(function () {\n'use strict';\nangular.module('dnsim').controller('PublishedCtrl', ['onlineService', '$location', '$routeParams', 'saveHelper', 'statHelper', published]);\n\nfunction published(onlineService, $location, $routeParams, saveHelper, statHelper) {\n  'use strict';\n  \n  var vm = this;\n  vm.uid = $routeParams.uid;\n  vm.buildName = $routeParams.buildName;\n  \n  getBuild();\n  getProfile();\n  \n  vm.copyLocally = function() {\n    var newGroupName = saveHelper.importGroup(vm.buildName, vm.build.items);\n    \n    saveHelper.renameSavedGroup(\n      newGroupName, \n      newGroupName,\n      vm.build.enemyLevel,\n      vm.build.playerLevel,\n      vm.build.heroLevel,\n      vm.build.job,\n      vm.build.damageType,\n      vm.build.element,\n      vm.build.secondaryElement,\n      vm.build.enemyStatCaps, \n      vm.build.playerStatCaps, \n      vm.build.conversions, \n      vm.build.baseStats, \n      vm.build.heroStats);\n      \n    $location.path('/builds/' + newGroupName);\n  }\n  \n  function getProfile() {\n    onlineService.getProfile(vm.uid).then(function(profile) {\n      if(profile) {\n        vm.profile = profile;\n      }\n      else {\n        vm.profile = {};\n      }\n    });\n  }\n  \n  function getBuild() {\n    onlineService.getBuild(vm.uid, vm.buildName).then(function(build) {\n      if(build) {\n        vm.build = build;\n        vm.stats = statHelper.getBuildStats(build);\n      }\n      else {\n        vm.build = {};\n      }\n    });\n  }\n}\n\n})();","angular.module('dnsim').controller('groupAssignmentCtrl',\n\n['hCodeValues','statHelper','saveHelper','itemCategory',\nfunction(hCodeValues,statHelper,saveHelper,itemCategory) {\n  'use strict';\n  \n  var vm = this;\n  \n  this.savedItems = saveHelper.getSavedItems();\n  this.groupNames = Object.keys(this.savedItems);\n  if(!this.groupNames) {\n    this.groupNames = [];\n  }\n  if(this.groupNames.length > 0) {\n    this.groupName = localStorage.getItem('currentGroup');\n  }\n  else {\n    this.groupName = null;\n  }\n  \n  if(!this.groupName || !(this.groupName in this.savedItems)) {\n    if(this.groupNames.length > 0) {\n      this.groupName = this.groupNames[0];\n    }\n  }\n  \n  if(!this.groupName) {\n    return;\n  }\n  \n  this.summaryStatIds = [];\n  for(var id in hCodeValues.stats) {\n    if(hCodeValues.stats[id].summaryDisplay) {\n      this.summaryStatIds.push(id);\n    }\n  }\n    \n  this.clearGroup = function() {\n    this.addAffectAmount = null;\n    this.replaceAffectAmount = {};\n\n    this.groupItems = null;\n    this.groupCalcStats = null\n  }\n  this.clearGroup();\n  \n  this.getAddAffectAmount = function(stat) {\n    this.initAddAffects();\n    return this.addAffectAmount[stat];\n  }\n  \n  this.getReplaceAffectAmount = function(statId, itemIndex, item) {\n    this.initReplaceAffects(itemIndex, item);\n    return this.replaceAffectAmount[itemIndex][statId];\n  }\n  \n  this.getGroupCalcStats = function() {\n    \n    if(this.groupCalcStats == null) {\n      \n      var group = vm.savedItems[vm.groupName];\n      if(group) {\n        this.groupCalcStats = this.getCalculatedStats(group, group.items);\n      }\n    }\n    \n    return this.groupCalcStats;\n  }\n  \n  this.getBuild = function() {\n    return vm.savedItems[vm.groupName];\n  }\n  \n  this.getCalculatedStats = function(group, items) {\n    var nakedStats = statHelper.getNakedStats(group);\n    var combinedStats = statHelper.getCombinedStats(items);\n    var setStats = statHelper.getSetStats(items);\n    var allStats = nakedStats.concat(combinedStats).concat(setStats);\n    if(group.heroStats != null && group.heroStats.length > 0) {\n      allStats = allStats.concat(group.heroStats);\n    }\n    allStats = hCodeValues.mergeStats(allStats);\n    \n    return statHelper.getCalculatedStats(group, allStats);\n  }\n  \n  this.initAddAffects = function() {\n    \n    if(vm.addAffectAmount) {\n      return;\n    }\n    \n    var origStats = vm.getGroupCalcStats();\n    var group = vm.savedItems[vm.groupName];\n    var newItems = [];\n    if(group.items) {\n      newItems = group.items.concat([vm.item]);\n    }\n    var newStats = vm.getCalculatedStats(group, newItems);\n    \n    this.addAffectAmount = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.addAffectAmount[id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  this.initReplaceAffects = function(itemIndex, item) {\n    if(vm.replaceAffectAmount[itemIndex]) {\n      return;\n    }\n    \n    var group = vm.savedItems[vm.groupName];\n    var newItems = [vm.item];\n    angular.forEach(group.items, function(gItem , index) {\n      if(item !== gItem) {\n        newItems.push(gItem);\n      }\n    });\n    \n    var newStats = vm.getCalculatedStats(group, newItems);\n    var origStats = vm.getGroupCalcStats();\n    \n    this.replaceAffectAmount[itemIndex] = {};\n    for(var id in hCodeValues.stats) {\n      if(hCodeValues.stats[id].summaryDisplay) {\n        vm.replaceAffectAmount[itemIndex][id] = calcStatPercent(vm.getStat(id, newStats).max, vm.getStat(id, origStats).max);\n      }\n    }\n  }\n  \n  function calcStatPercent(newVal, origVal) {\n    if(newVal && origVal) {\n      // console.log('orig: ' + origVal + ',new: ' + newVal);\n      return Math.round(10000 * (1 - (origVal / newVal))) / 100;\n    }\n    else {\n      return 0;\n    }\n  }\n  \n  this.getStat = function(id, stats) {\n    var len = stats.length;\n    for(var i=0;i<len;++i) {\n      if(stats[i].id == id) {\n        return stats[i];\n      }\n    }\n    return {id: id, max:0};\n  }\n  \n  this.getStatName = function(id) {\n    var retVal = '';\n    if(hCodeValues.stats[id].element == 'primary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].element) {\n        eleId = vm.savedItems[vm.groupName].element.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    else if(hCodeValues.stats[id].element == 'secondary') {\n      var eleId = 0;\n      if(vm.savedItems[vm.groupName].secondaryElement) {\n        eleId = vm.savedItems[vm.groupName].secondaryElement.id;\n      }\n      retVal += hCodeValues.elements[eleId].name;\n    }\n    return retVal + ' ' + hCodeValues.stats[id].name;\n  }\n  \n  this.getGroupItems = function() {\n\n    var itemSplit;\n    function numMatches(str) {\n      if(str) {\n        var numMatches = 0;\n        for(var i=0;i<itemSplit.length;++i) {\n          if(str.indexOf(itemSplit[i]) > 0) {\n            numMatches++;\n          }\n        }\n        return numMatches;\n      }\n      else {\n        return -1;\n      }\n    }\n    \n    if(vm.groupItems == null && vm.groupName && vm.groupName in vm.savedItems && vm.item && vm.item.typeName) {\n      vm.groupItems = [];\n      \n      var items = [];\n      angular.forEach(vm.savedItems[vm.groupName].items, function(item, index) {\n        if(item.exchangeType && item.itemSource != 'gem' && item.itemSource != 'plate') {\n          if(item.exchangeType == vm.item.exchangeType) {\n            items.push(item);\n          }\n        }\n        else if(item.typeName == vm.item.typeName) {\n          items.push(item);\n        }\n      });\n      \n      if(vm.item.name) {\n        itemSplit = vm.item.name.split(' ');\n      }\n      items.sort(function(a,b) {\n        return numMatches(b.name)-numMatches(a.name);\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name == vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n      \n      angular.forEach(items, function(item, index) {\n        if(item.name != vm.item.name) {\n          vm.groupItems.push(item);\n        }\n      });\n    }\n    return vm.groupItems;\n  }\n  \n  this.hasMaxExchangable = function() {\n    var cat = itemCategory.byName(this.item.typeName);\n    var items = this.getGroupItems();\n    \n    if(cat && cat.maxCat) {\n      if(items.length >= cat.maxCat) {\n        return true;\n      }\n    }\n    \n    if(cat && cat.maxExchange) {\n      if(items.length >= cat.maxExchange) {\n        for(var i=0;i<items.length;++i) {\n          if(!items[i].exchangeType) {\n            return false;\n          }\n        }\n        // console.log('maxexchange reached ' + items.length + '>=' + cat.maxExchange + ' for ' + cat.name);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  this.nextGroup = function() {\n    \n    var uptoItem = false;\n    var nextGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(uptoItem) {\n        if(nextGroup == null) {\n          nextGroup = groupName;\n        }\n      }\n      if(groupName == vm.groupName) {\n        uptoItem = true;\n      }\n    });\n    \n    if(nextGroup == null) {\n      nextGroup = vm.groupNames[0];\n    }\n    \n    vm.groupName = nextGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.prevGroup = function() {\n    \n    var foundGroup = false;\n    var prevGroup = null;\n    angular.forEach(vm.groupNames, function(groupName, index) {\n      if(groupName == vm.groupName) {\n        foundGroup = true;\n      }\n      \n      if(!foundGroup) {\n        prevGroup = groupName;\n      }\n    });\n    \n    if(prevGroup == null) {\n      prevGroup = vm.groupNames[vm.groupNames.length-1];\n    }\n    \n    vm.groupName = prevGroup;\n    saveGroup();\n    vm.clearGroup();\n  }\n  \n  this.addToGroup = function() {\n    saveHelper.saveItem(vm.groupName, vm.item);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  this.replace = function(item) {\n    item.replaceItem = true;\n    var newItemList = [];\n    angular.forEach(vm.savedItems[vm.groupName].items, function(gItem, index) {\n      if(gItem.replaceItem) {\n        // console.log('found replace item');\n        newItemList.push(vm.item);\n      }\n      else {\n        newItemList.push(gItem);\n      }\n    });\n    \n    saveHelper.updatedSavedItems(vm.groupName, newItemList);\n    this.savedItems = saveHelper.getSavedItems();\n    vm.clearGroup();\n  }\n  \n  function saveGroup() {\n    saveHelper.saveBuildSelection(vm.groupName, vm.savedItems);\n  }\n  \n}])\n.directive('dngearsimGroupAssignment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'groupAssignmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/group-assignment.html'\n  };\n});","angular.module('dnsim').controller('itemEditCustomCtrl',\n\n['hCodeValues',\nfunction(hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'custom') {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.stat = {id:-1, name:''};\n  this.newStatVal = 0;\n\n  this.dropdownStats = [];\n  for(var id in hCodeValues.stats) {\n    if(!hCodeValues.stats[id].noCustom) {\n      this.dropdownStats.push(hCodeValues.stats[id]);\n    }\n  }\n  this.dropdownStats.sort()\n\n  this.getStats = function() {\n    return this.dropdownStats;\n  }\n  \n  this.newStat = function() {\n    return {id:this.stat.id,max:this.newStatVal};\n  }\n  \n  this.addStat = function() {\n    if(this.stat.id > -1) {\n      if(!this.item.stats) {\n        this.item.stats = [];\n      }\n       \n      this.item.stats.push(this.newStat());\n      this.onChange();\n    }\n  }\n  \n  this.removeStat = function(stat) {\n    var i = this.item.stats.indexOf(stat);\n    if(i != -1) {\n    \tthis.item.stats.splice(i, 1);\n      this.onChange();\n    }\n  }\n  \n  this.getNewStatName = function() {\n    return this.getStatName(this.newStat());\n  }\n  \n  this.getNewStatDisplayValue = function() {\n    return this.getStatDisplayValue(this.newStat());\n  }\n  \n  this.getStatName = function(stat) {\n    if(stat.id in hCodeValues.stats) {\n      return hCodeValues.stats[stat.id].name;\n    }\n  }\n  \n  this.getStatDisplayValue = function(stat) {\n    if(stat.id in hCodeValues.stats) {\n      return hCodeValues.stats[stat.id].display(stat);\n    }\n  }\n  \n}])\n.directive('dngearsimItemEditCustom', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditCustomCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-custom.html'\n  };\n});","angular.module('dnsim').controller('itemEditEnchantmentCtrl',\n\n['dntData','hCodeValues','items','$timeout','translations',\nfunction(dntData,hCodeValues,items,$timeout,translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !('enchantDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  vm.enchantments = null;\n  vm.enchantment = null;\n  vm.enchantmentAfter = null;\n  vm.enchantmentCost = '';\n  vm.enhancementOptions = [];\n  if(vm.item.enchantmentStats == null) {\n    vm.item.enchantmentStats = [];\n  }\n  \n  this.setEnchantment = function() {\n    vm.item.enchantmentStats = [];\n\n    if(vm.enchantments && vm.enchantments.length > 0) {\n\n      if(typeof vm.item.enchantmentNum != 'number') {\n        vm.item.enchantmentNum = 6;\n        vm.onChange();\n      }\n      \n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum == vm.enchantments[i].EnchantLevel) {\n          vm.enchantment = vm.enchantments[i];\n          \n          vm.item.enchantmentStats = hCodeValues.getStats(vm.enchantment);\n        }\n        else if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          vm.enchantmentAfter = vm.enchantments[i];\n          if(vm.enchantmentAfter.NeedCoin < 10000) {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 1000)/10 + 'g';\n          }\n          else {\n            vm.enchantmentCost = Math.round(vm.enchantmentAfter.NeedCoin / 10000) + 'g';\n          }\n        }\n      }\n    }\n  }\n  \n  this.isMaxEnchantLevel = function() {\n\n    if(vm.enchantments != null &&\n      vm.enchantments.length > 0 &&\n      typeof vm.item.enchantmentNum == 'number') {\n\n      for(var i=0;i<vm.enchantments.length;++i) {\n        if(vm.item.enchantmentNum + 1 == vm.enchantments[i].EnchantLevel) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  \n  this.setEnchantmentNum = function(enhancementOption) {\n    vm.item.enchantmentNum = enhancementOption;\n    vm.enhancementOptions = [];\n    vm.setEnchantment();\n    vm.onChange();\n  }\n  \n  this.nextEnchantment = function() {\n    for(var i=vm.item.enchantmentNum;i==0||vm.enchantments[i-1];++i) {\n      if(i == 0) {\n        vm.enhancementOptions.push({number: 0});\n      }\n      else {\n        vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n      }\n    }\n  }\n  \n  this.prevEnchantment = function() {\n    vm.enhancementOptions = [];\n    for(var i=vm.item.enchantmentNum;i>0;--i) {\n      vm.enhancementOptions.push(vm.getOption(vm.enchantments[i-1]));\n    }\n    \n    vm.enhancementOptions.push({number: 0});\n  }\n  \n  this.getOption = function(enchantment) {\n    return {\n      number: enchantment.EnchantLevel,\n      stats: hCodeValues.getStats(enchantment)\n    };\n  }\n  \n  this.getEnchantments = function() {\n    if(!vm.enchantments && vm.item && vm.item.enchantmentId) {\n      if(dntData.isLoaded(vm.itemType.enchantDnt)) {\n        var eid = vm.item.enchantmentId;\n        vm.enchantments = dntData.find(vm.itemType.enchantDnt, 'EnchantID', eid);\n        vm.setEnchantment();\n      }\n    }\n    \n    return vm.enchantments;\n  }\n  \n  var fileName = 'all-items.lzjson';\n  \n  this.showMaterials = function() {\n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        \n        if(!vm.enchantmentAfter) {\n          return;\n        }\n        \n        vm.materials = [];\n        for(var i=1;i<=5;++i) {\n          var itemId = vm.enchantmentAfter['NeedItemID' + i];\n          var itemCount = vm.enchantmentAfter['NeedItemCount' + i];\n          if(itemId > 0 && itemCount > 0) {\n            \n            var items = dntData.find(fileName, 'id', itemId);\n            if(items.length == 0) {\n              vm.materials.push({num: itemCount, name: 'unknown (' + itemId + ')'});\n            }\n            else {\n              var item = items[0];\n              var name = translations.translate(item.NameID, item.NameIDParam);\n              \n              if(item) {\n                var material = {\n                  num: itemCount,\n                  icon: item.IconImageIndex,\n                  rank: item.Rank,\n                  levelLimit: item.LevelLimit,\n                  name: name\n                };\n                vm.materials.push(material);\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n  \n  if(dntData.isLoaded(fileName)) {\n    this.showMaterials();\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditEnchantment', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditEnchantmentCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-enchantment.html'\n  };\n});","angular.module('dnsim').controller('itemEditPotentialCtrl',\n\n['dntData','items','hCodeValues',\nfunction(dntData,items,hCodeValues) {\n  'use strict';\n  \n  this.potentials = null;\n  this.potential = null;\n  this.changingPotentials = false;\n  this.potentialStats = {};\n  \n  if(this.item == null) return;\n  \n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  if(!this.itemType || !this.item.pid || !('potentialDnt' in this.itemType)) {\n    return;\n  }\n  \n  var vm = this;\n  \n  this.getPotentials = function() {\n    if(!vm.potentials) {\n      if(vm.item && vm.item.pid && 'potentialDnt' in vm.itemType) {\n        var potentials = dntData.find(vm.itemType.potentialDnt, 'id', vm.item.pid);\n        \n        if(potentials.length == 1) {\n          vm.potential = potentials[0];\n          vm.potentials = dntData.find(vm.itemType.potentialDnt, 'PotentialID', vm.potential.PotentialID);\n          vm.potentialStats = getPotentialStats(vm.potentials);\n        }\n        else if('potentialDntEx' in vm.itemType) {\n          potentials = dntData.find(vm.itemType.potentialDntEx, 'id', vm.item.pid);\n        \n          if(potentials.length == 1) {\n            vm.potential = potentials[0];\n            vm.potentials = dntData.find(vm.itemType.potentialDntEx, 'PotentialID', vm.potential.PotentialID);\n            vm.potentialStats = getPotentialStats(vm.potentials);\n          }\n        }\n      }\n    }\n    \n    return vm.potentials;\n  }\n  \n  this.nextPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i+1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n  \n  this.prevPotential = function() {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(vm.potential.id == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i-1];\n        vm.item.pid = vm.potential.id;\n        vm.onChange();\n        this.changingPotentials = true;\n        return;\n      }\n    }\n  }\n    \n  this.changePotential = function(pid) {\n    for(var i=0;i<vm.potentials.length;++i) {\n      if(pid == vm.potentials[i].id) {\n        vm.potential = vm.potentials[i];\n        vm.item.pid = vm.potential.id;\n        vm.changingPotentials = false;\n        vm.onChange();\n        return;\n      }\n    }\n  }\n  \n  this.isFirstPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[0].id;\n  }\n  \n  this.isLastPotential = function() {\n    this.getPotentials();\n    return !vm.potentials || vm.potentials.length <= 1 || !vm.potential || vm.potential.id == vm.potentials[vm.potentials.length-1].id;\n  }\n  \n  function getPotentialStats() {\n    var pStats = {};\n    var emptyStatId = null;\n    \n    if(vm.potentials != null) {\n      angular.forEach(vm.potentials, function(p, index) {\n        var stats = [];\n        angular.forEach(hCodeValues.getStats(p), function(stat, sIndex) {\n          if(!hCodeValues.stats[stat.id].hide) {\n            stats.push(stat);\n          }\n        });\n        \n        if(stats.length > 0) {\n          pStats[p.id] = stats;\n        }\n        else if(!emptyStatId) {\n          pStats[p.id] = [];\n          emptyStatId = p.id;\n        }\n      });\n    }\n    \n    return pStats;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditPotential', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditPotentialCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-potential.html'\n  };\n});","angular.module('dnsim').controller('itemEditSkillCtrl',\n\n['$timeout','dntData','statHelper',\nfunction($timeout,dntData,statHelper) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'skills') {\n    return;\n  }\n  \n  if(!this.item.enchantmentNum) {\n    this.item.enchantmentNum = 1;\n  }\n  \n  var vm = this;\n  \n  this.initSkills = function() {\n    var dntFile = 'skillleveltable_character' + vm.item.baseJobName + vm.item.pve + '.lzjson';\n    dntData.init(dntFile, null, reportProgress, function() { $timeout(function() {\n      vm.skillData = dntData.find(dntFile, 'SkillIndex', vm.item.id);\n    })});\n  }\n  \n  this.nextEnchantment = function() {\n    if(this.skillData && this.item.enchantmentNum < this.skillData.length) {\n      this.item.enchantmentNum++;\n      vm.onChange();\n    }\n  }\n  \n  this.isMaxSkillLevel = function() {\n    return this.skillData && this.item && this.item.enchantmentNum >= this.skillData.length;\n  }\n  \n  this.prevEnchantment = function() {\n    if(this.item.enchantmentNum > 0) {\n      this.item.enchantmentNum--;\n    }\n    else {\n      this.item.enchantmentNum = 0;\n    }\n\n    vm.onChange();\n  }\n  \n  this.initSkills();\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}])\n.directive('dngearsimItemEditSkill', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSkillCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-skill.html'\n  };\n});","angular.module('dnsim').controller('itemEditSparkCtrl',\n\n['dntData','hCodeValues','items',\nfunction(dntData,hCodeValues,items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if('itemSource' in this.item) {\n    this.itemType = items[this.item.itemSource];\n  }\n  \n  this.sparks = null;\n  var vm = this;\n\n  this.nextSpark = function() {\n    var index = getPotentialIndex();\n    index++;\n    if(index >= vm.sparks.length) {\n      index = 0;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.isMoreSparks = function() {\n    return vm.sparks != null && getPotentialIndex() >= vm.sparks.length-1;\n  }\n  \n  this.isFirstSpark = function() {\n    return getPotentialIndex() == 0;\n  }\n  \n  this.prevSpark = function() {\n    var index = getPotentialIndex();\n    index--;\n    if(index < 0) {\n      index = vm.sparks.length-1;\n    }\n    var spark = vm.sparks[index]; \n    vm.item.sparkId = spark.id;\n    vm.item.sparkStats = hCodeValues.getStats(spark);\n    vm.onChange();\n  }\n  \n  this.removeSpark = function() {\n    vm.item.sparkId = null;\n    vm.item.sparkStats = null;\n    vm.onChange();\n  }\n  \n  this.getSparks = function() {\n    if(vm.item == null) return null;\n    if(vm.sparks == null) {\n      var sid = vm.item.sparkTypeId;\n      if(sid) {\n        if(dntData.isLoaded(vm.itemType.sparkDnt)) {\n          vm.sparks = dntData.find(vm.itemType.sparkDnt, 'PotentialID', sid);\n        }\n      }\n    }\n    \n    return vm.sparks;\n  }\n\n  function getPotentialIndex() {\n    var potentialIndex = -1;\n    if(vm.item.sparkId > 0) {\n      angular.forEach(vm.sparks, function(spark, index) {\n        if(spark.id == vm.item.sparkId) {\n          potentialIndex = index;\n          return;\n        }\n      });\n    }\n      \n    return potentialIndex;\n  }\n\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n}])\n.directive('dngearsimItemEditSpark', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditSparkCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-spark.html'\n  };\n});","angular.module('dnsim').controller('itemEditTalismanCtrl',\n\n[function() {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.itemSource != 'tman') {\n    return;\n  }\n  \n  this.setTalisman = function(amount) {\n    if(amount == 0) {\n      this.item.enchantmentNum = null;\n      this.item.enchantmentStats = [];\n    }\n    else {\n      this.item.enchantmentNum = amount;\n      \n      var extraStats = [];\n      angular.forEach(this.item.stats, function(stat, index) {\n        extraStats.push({id: stat.id, max: stat.max * (amount/100)});\n      });\n      \n      this.item.enchantmentStats = extraStats;\n    }\n    this.onChange();\n  }\n\n}])\n.directive('dngearsimItemEditTalisman', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n      onChange: '&onChange',\n    },\n    controller: 'itemEditTalismanCtrl',\n    controllerAs: 'editCtrl',\n    templateUrl: 'ui/item/item-edit-talisman.html'\n  };\n});","angular.module('dnsim').controller('itemViewBoxCtrl',\n\n['$timeout','dntData','itemFactory',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  if(this.item.typeId != 46 && this.item.typeId != 8 && this.item.typeId != 112) {\n    console.log('not box item type ' + this.item.typeId);\n    return;\n  }\n  \n  var vm = this;\n  \n  var pouchFileNames = [\n    'itemdroptable.lzjson',\n    'itemdroptable_abyss.lzjson',\n    'itemdroptable_apprentice.lzjson',\n    'itemdroptable_cook.lzjson',\n    'itemdroptable_darklair.lzjson',\n    'itemdroptable_dimension.lzjson',\n    'itemdroptable_disjoint.lzjson',\n    'itemdroptable_dnexpedition.lzjson',\n    'itemdroptable_event.lzjson',\n    'itemdroptable_farm.lzjson',\n    'itemdroptable_fishing.lzjson',\n    'itemdroptable_guildwar.lzjson',\n    'itemdroptable_item.lzjson',\n    'itemdroptable_monsteritem.lzjson',\n    'itemdroptable_propdrop.lzjson',\n    'itemdroptable_pvp.lzjson',\n    'itemdroptable_randomcompound.lzjson',\n    'itemdroptable_stageclear.lzjson',\n    'itemdroptable_themepark.lzjson',\n    'itemdroptable_union.lzjson']\n  \n  var allItemFileName = 'all-items.lzjson';\n  var charmItemtable = 'charmitemtable.lzjson';\n  var commonCharmItemtable = 'charmitemtable_common.lzjson';\n  \n  var files;\n  if(this.item.typeId == 46 || this.item.typeId == 112) {\n    files = [allItemFileName, charmItemtable, commonCharmItemtable];\n  }\n  else if (this.item.typeId == 8) {\n    files = [allItemFileName].concat(pouchFileNames);\n  }\n\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxContents();\n      });\n    });\n  }\n  \n  this.initBoxContents = function() {\n    //console.log('init contents');\n\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var datas = dntData.find(this.item.fileName + '.lzjson', 'id', this.item.id);\n    if(datas.length > 0) {\n      var d = datas[0];\n      vm.items = [];\n      \n      \n      if(vm.item.typeId == 46 || vm.item.typeId == 112) {\n        vm.getCharmItems(d.TypeParam1);\n      }\n      else if (vm.item.typeId == 8) {\n        vm.getPouchItems(d.TypeParam1);\n      }\n      \n    }\n  }\n  \n  this.getPouchItems = function(boxType) {\n    for(var f=0;f<pouchFileNames.length;++f) {\n      vm.getPouchItemsFromFile(boxType, pouchFileNames[f]);\n    }\n  }\n  \n  this.getPouchItemsFromFile = function(boxType, pouchFileName) {\n    \n    var pouchData = dntData.find(pouchFileName, 'id', boxType);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getPouchItems(pouchItem, pouchFileName);\n          }\n          else {\n            // console.log('adding item ' + pouchItem);\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              var basicItem = itemFactory.createBasicItem(itemds[0]);\n              // console.log('found item ' + basicItem.name);\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: basicItem\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n  \n  this.getCharmItems = function(boxType) {\n    var charmFiles = [charmItemtable, commonCharmItemtable];\n    for(var i=0;i<charmFiles.length;++i) {\n      \n      //console.log('box: ' + boxType);\n\n      var charmData = dntData.getData(charmFiles[i]);\n      for(var c=0;c<charmData.length;++c) {\n        var cd = charmData[c];\n        if(cd.CharmNum == boxType && cd.Look) {\n          \n          var itemds = dntData.find(allItemFileName, 'id', cd.ItemID);\n          if(itemds.length > 0) {\n            vm.items.push({\n              count: cd.Count,\n              gold: cd.Gold,\n              item: itemFactory.createBasicItem(itemds[0])\n            });\n          }\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewBox', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewBoxCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-box.html'\n  };\n});","angular.module('dnsim').controller('itemViewCraftCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.crafts = [];\n\n  var cFiles = [\n    'itemcompoundtable.lzjson',\n    'itemcompoundtable_custom.lzjson',\n    'itemcompoundtable_glyph.lzjson',\n    'itemcompoundtable_jewel.lzjson',\n    'itemcompoundtable_renewal.lzjson',\n    'itemcompoundtable_set.lzjson'];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = cFiles.concat([allItemFileName]);\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initCrafts();\n      });\n    });\n  }\n  \n  this.initCrafts = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.crafts = [];\n    for(var i=0;i<cFiles.length;++i) {\n      vm.initCraft(cFiles[i]);\n    }\n    \n    var newCrafts = [];\n    for(var i=0;i<vm.crafts.length;++i) {\n      var found = false;\n      for(var j=0;j<newCrafts.length;++j) {\n        if(vm.crafts[i].gold == newCrafts[j].gold &&\n          vm.crafts[i].items.length == newCrafts[j].items.length) {\n            \n            found = true;\n            for(var k=0;k<vm.crafts[i].items.length;++k) {\n              if(vm.crafts[i].items[k].item.id != newCrafts[j].items[k].item.id ||\n                vm.crafts[i].items[k].num != newCrafts[j].items[k].num) {\n                  found = false;\n              }\n            }\n        }\n      }\n      \n      if(!found) {\n        newCrafts.push(vm.crafts[i]);\n      }\n    }\n    \n    vm.crafts = newCrafts;\n  }\n\n  this.initCraft = function(fileName) {\n    var fCrafts = dntData.find(fileName, 'SuccessItemID1', vm.item.id);\n    \n    for(var i=0;i<fCrafts.length;++i) {\n      var c = fCrafts[i];\n      \n      var craft = {\n        id: c.id,\n        fileName: fileName.replace('.lzjson', ''),\n        gold: c.Cost/100/100,\n        items: [],\n      };\n      \n      var j=0;\n      for(;;) {\n        j++;\n        var itemColName = 'Slot' + j +'Id';\n        var qtyColName = 'Slot' + j +'Num';\n        if(!(itemColName in c)) {\n          break;\n        }\n\n        var items = dntData.find(allItemFileName, 'id', c[itemColName]);\n        if(items.length > 0) {\n          craft.items.push({\n            item: itemFactory.createBasicItem(items[0]),\n            num: c[qtyColName],\n          });\n        }\n      }\n      \n      vm.crafts.push(craft);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewCraft', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewCraftCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-craft.html'\n  };\n});","angular.module('dnsim').controller('itemViewExtractionCtrl',\n\n['$timeout','dntData','itemFactory','items',\n  function($timeout, dntData, itemFactory, items) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  \n  var extractFileName = 'itemdroptable_disjoint.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [extractFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initExtract();\n      });\n    });\n  }\n  \n  this.initExtract = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    var disjoint;\n    var d = itemFactory.getItemData(vm.item);\n    if(d && d.DisjointDrop1 > 0) {\n      disjoint = d.DisjointDrop1;\n    }\n    \n    var itemType = items[vm.item.itemSource];\n    \n    if(itemType && d.EnchantID) {\n      var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', d.EnchantID);\n      for(var i=0;i<enchantments.length;++i) {\n        if(enchantments[i].EnchantLevel == vm.item.enchantmentNum) {\n          disjoint = enchantments[i].DisjointDrop;\n          break;\n        }\n      }\n    }\n    \n    vm.items = [];\n    if(disjoint) {\n      vm.getItems(disjoint);\n    }\n  }\n  \n  this.getGold = function() {\n    var d = itemFactory.getItemData(this.item);\n    return Number(d.Disjointamount)/100/100;\n  }\n  \n  this.getItems = function(disjoint) {\n    // console.log('checking ' + pouchFileName + ' for ' + boxType);\n    \n    var pouchData = dntData.find(extractFileName, 'id', disjoint);\n    if(pouchData.length == 0) {\n    }\n    else {\n      var gold = pouchData[0].GoldMin;\n\n      var itemIndex = 0;\n      do {\n        itemIndex++;\n        var isGroup = pouchData[0]['IsGroup' + itemIndex];\n        var pouchItem = pouchData[0]['Item' + itemIndex + 'Index'];\n        var pouchItemCount = pouchData[0]['Item' + itemIndex + 'Info'];\n        //console.log('pouch contains ' + pouchItem);\n        if(pouchItem) {\n          if(isGroup) {\n            vm.getItems(pouchItem);\n          }\n          else {\n            var itemds = dntData.find(allItemFileName, 'id', pouchItem);\n            if(itemds.length > 0) {\n              //console.log('found item ');\n  \n              vm.items.push({\n                count: pouchItemCount,\n                gold: gold,\n                item: itemFactory.createBasicItem(itemds[0]),\n              });\n            }\n          }\n        }\n      } while(pouchItem);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewExtraction', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewExtractionCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-extraction.html'\n  };\n});","angular.module('dnsim').controller('itemViewPlateCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var plateFile = 'platetable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = [plateFile,allItemFileName];\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    getPlates();\n  }\n  \n  function getPlates() {\n    var rows = dntData.find(plateFile, 'ItemID', vm.item.id);\n    for(var r=0;r<rows.length;++r) {\n      var row = rows[r];\n      var col=0;\n      for(;;) {\n        col++;\n        var colName = 'CompoundTableIndex' + col;\n        if(!(colName in row)) {\n          break;\n        }\n\n        var itemData = dntData.find(allItemFileName, 'id', row[colName]);\n        if(itemData.length > 0) {\n          vm.items.push(itemFactory.createBasicItem(itemData[0]));\n        }\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewPlate', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewPlateCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-plate.html'\n  };\n});","angular.module('dnsim').controller('itemViewSetCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.items = [];\n  \n  var files = [\n  'partstable.optimised.lzjson',\n  'partstable_cash.optimised.lzjson',\n  'partstable_common2014.optimised.lzjson',\n  'partstable_common2015.optimised.lzjson',\n  'partstable_common2016.lzjson',\n  'partstable_commoncash.lzjson',\n  'partstable_equipment.optimised.lzjson',\n  'partstable_event.lzjson',\n  'partstable_guild.lzjson',\n  'partstable_pvp.optimised.lzjson',\n  'partstable_reboot.optimised.lzjson',\n  'partstable_skilllevelup.lzjson',\n  'weapontable.optimised.lzjson',\n  'weapontable_cash.optimised.lzjson',\n  'weapontable_common2014.optimised.lzjson',\n  'weapontable_common2015.optimised.lzjson',\n  'weapontable_common2016.lzjson',\n  'weapontable_commoncash.lzjson',\n  'weapontable_equipment.optimised.lzjson',\n  'weapontable_event.lzjson',\n  'weapontable_guild.lzjson',\n  'weapontable_pvp.optimised.lzjson',\n  'weapontable_reboot.optimised.lzjson',\n  //'weapontable_skilllevelup.lzjson'\n  ];\n  \n  var allItemFileName = 'all-items.lzjson';\n  \n  var allFiles = files.concat([allItemFileName]);\n  for(var i=0;i<allFiles.length;++i) {\n    dntData.init(allFiles[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initSets();\n      });\n    });\n  }\n  \n  this.initSets = function() {\n    for(var i=0;i<allFiles.length;++i) {\n      if(!dntData.isLoaded(allFiles[i])) {\n        return;\n      }\n    }\n    \n    vm.items = [];\n    for(var i=0;i<files.length;++i) {\n      getSetItems(files[i]);\n    }\n  }\n  \n  function getSetItems(fileName) {\n    var rows = dntData.find(fileName, 'SetItemID', vm.item.setId);\n    for(var r=0;r<rows.length;++r) {\n      var itemData = dntData.find(allItemFileName, 'id', rows[r].id);\n      if(itemData.length > 0) {\n        vm.items.push(itemFactory.createBasicItem(itemData[0]));\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewSet', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewSetCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-set.html'\n  };\n});","angular.module('dnsim').controller('itemViewShopCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues','translations',\n  function($timeout, dntData, itemFactory, hCodeValues, translations) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.shopCosts = [];\n  \n  var cShopFileName = 'combinedshoptable.lzjson';\n  var cSysShopFileName = 'combinedshoptable_system.lzjson';\n  var cCashShopFileName = 'combinedshoptable_cash.lzjson';\n  // var shopFileName = 'shoptable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [cCashShopFileName,cSysShopFileName,cShopFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initShops();\n      });\n    });\n  }\n  \n  this.initShops = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n    \n    vm.shopCosts = [];\n    getCombinedCosts(cShopFileName);\n    getCombinedCosts(cSysShopFileName);\n    getCombinedCosts(cCashShopFileName);\n    // getShopCosts();\n    \n    var newShopCosts = [];\n    for(var i=0;i<vm.shopCosts.length;++i) {\n      var found = false;\n      for(var j=0;j<newShopCosts.length;++j) {\n        if(vm.shopCosts[i].tabName == newShopCosts[j].tabName &&\n          vm.shopCosts[i].gold == newShopCosts[j].gold &&\n          vm.shopCosts[i].item1.id == newShopCosts[j].item1.id &&\n          vm.shopCosts[i].numItem1.id == newShopCosts[j].numItem1.id &&\n          vm.shopCosts[i].item2.id == newShopCosts[j].item2.id &&\n          vm.shopCosts[i].numItem2.id == newShopCosts[j].numItem2.id) {\n            found = true;\n            break;\n        }\n      }\n      \n      if(!found) {\n        newShopCosts.push(vm.shopCosts[i]);\n      }\n    }\n    \n    vm.shopCosts = newShopCosts;\n  }\n  \n  /*\n  function getShopCosts() {\n    var shops = dntData.getData(shopFileName);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n      \n      var c = 0;\n      for(;;) {\n        ++c;\n        \n        var colName = 'itemIndex' + c;\n        if(!(colName in s)) {\n          break;\n        }\n        \n        var itemId = s[colName];\n        if(!itemId) {\n          break;\n        }\n        \n        if(itemId == vm.item.id) {\n          s = {\n            shopName: s.ShopID,\n            tabName: translations.translate(s.TabNameID),\n            gold: s['Quantity' + c],\n          };\n          \n      \n          if(s.shopName in hCodeValues.shopNames) {\n            s.shopName = hCodeValues.shopNames[s.shopName];\n          }\n      \n          if(!s.shopName) {\n            s.shopName = s.ShopId;\n          }\n          vm.shopCosts.push(s);\n        }\n      }\n    }\n  }*/\n\n  function getCombinedCosts(fileName) {\n    var shops = dntData.find(fileName, 'itemindex', vm.item.id);\n    \n    for(var i=0;i<shops.length;++i) {\n      var s = shops[i];\n        \n      var item1s = dntData.find(allItemFileName, 'id', s.PurchaseItem1);\n      var item2s = dntData.find(allItemFileName, 'id', s.PurchaseItem2);\n      \n      var shopCost = {\n        shopName: s.ShopID,\n        tabName: translations.translate(s.TabNameID),\n        gold: 0,\n        nightmarePoints: 0,\n        ladderPoints: 0,\n        item1: itemFactory.createBasicItem(item1s[0]),\n        item2: itemFactory.createBasicItem(item2s[0]),\n        numItem1: 0,\n        numItem2: 0,\n      };\n      \n      if(shopCost.shopName in hCodeValues.shopNames) {\n        shopCost.shopName = hCodeValues.shopNames[shopCost.shopName];\n      }\n      \n      if(s.PurchaseType1 == 1) {\n        shopCost.gold += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue1;\n      }\n      else if(s.PurchaseType1 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue1;\n      }\n      else {\n        shopCost.numItem1 = s.PurchaseItemValue1;\n      }\n      \n      if(s.PurchaseType2 == 1) {\n        shopCost.gold += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 3) {\n        shopCost.ladderPoints += s.PurchaseItemValue2;\n      }\n      else if(s.PurchaseType2 == 8) {\n        shopCost.nightmarePoints += s.PurchaseItemValue2;\n      }\n      else {\n        shopCost.numItem2 = s.PurchaseItemValue2;\n      }\n      \n      shopCost.gold = shopCost.gold/100/100;\n      \n      vm.shopCosts.push(shopCost);\n    }\n  }\n\n}])\n.directive('dngearsimItemViewShop', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewShopCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-shop.html'\n  };\n});","angular.module('dnsim').controller('itemViewTransferCtrl',\n\n['$timeout','dntData','itemFactory','hCodeValues',\n  function($timeout, dntData, itemFactory, hCodeValues) {\n  'use strict';\n  \n  if(this.item == null) return;\n  \n  var vm = this;\n  vm.matchingTransfers = [];\n  \n  var transferFileName = 'enchanttransfertable.lzjson';\n  var allItemFileName = 'all-items.lzjson';\n  \n  var files = [transferFileName,allItemFileName];\n  for(var i=0;i<files.length;++i) {\n    dntData.init(files[i], null, function() {}, function() {\n      $timeout(function() {\n        vm.initTransfers();\n      });\n    });\n  }\n  \n  this.initTransfers = function() {\n    for(var i=0;i<files.length;++i) {\n      if(!dntData.isLoaded(files[i])) {\n        return;\n      }\n    }\n\n    var transfers = dntData.find(transferFileName, 'EnchantLevel', vm.item.enchantmentNum);\n    vm.matchingTransfers = [];\n    \n    for(var i=0;i<transfers.length;++i) {\n      var t = transfers[i];\n      if(t.Rank == vm.item.rank.id && t.LevelLimit == vm.item.levelLimit) {\n        \n        var item1s = dntData.find(allItemFileName, 'id', t.NeedItemID1);\n        var item2s = dntData.find(allItemFileName, 'id', t.NeedItemID2);\n        \n        vm.matchingTransfers.push({\n          level: t.ResultLevel,\n          enchantmentNum: t.ResultEnchantLevel,\n          gold: t.NeedCoin/100/100,\n          rank: hCodeValues.rankNames[t.ResultRank],\n          numItem1: t.NeedItemCount1,\n          item1: itemFactory.createBasicItem(item1s[0]),\n          numItem2: t.NeedItemCount2,\n          item2: itemFactory.createBasicItem(item2s[0]),\n        });\n      }\n    }\n  }\n\n}])\n.directive('dngearsimItemViewTransfer', function() {\n  return {\n    scope: true,\n    bindToController: {\n      item: '=item',\n    },\n    controller: 'itemViewTransferCtrl',\n    controllerAs: 'ctrl',\n    templateUrl: 'ui/item/item-view-transfer.html'\n  };\n});","angular.module('dnsim').controller('ItemCtrl',\n['$scope','$window','dntData','hCodeValues','items','jobs','exportLinkHelper','$routeParams','translations','$location','region','itemFactory',\nfunction($scope,$window,dntData,hCodeValues,items,jobs,exportLinkHelper,$routeParams,translations,$location,region,itemFactory) {\n  'use strict';\n  \n  region.setLocationByName($routeParams.region);\n  \n  $window.scrollTo(0, 0);\n  \n  $scope.jobName = null;\n  $scope.item = exportLinkHelper.decodeItem($routeParams.itemString);\n  if('itemSource' in $scope.item) {\n    $scope.itemType = items[$scope.item.itemSource];\n  }\n  \n  $scope.item.setStats = null;\n  $scope.item.setId = null;\n  $scope.detail = null;\n  \n  $scope.getDescription = function() {\n    if($scope.item.description) {\n      return $scope.item.description;\n    }\n    else if($scope.itemType &&\n      $scope.itemType.name == 'title' &&\n      translations.isLoaded() &&\n      dntData.isLoaded($scope.itemType.mainDnt)) {\n\n      var itemData = dntData.find($scope.itemType.mainDnt, 'id', $scope.item.id);\n      if(itemData && itemData.length > 0 && itemData[0].DescriptionID > 0) {\n        return translations.translate(itemData[0].DescriptionID, itemData[0].DescriptionIDParam);\n      }\n    }\n    return '';\n  }\n  \n  $scope.getExchangeType = function() {\n    // console.log('getting exchange');\n    var exchangeDnt = 'exchange.lzjson';\n    if(translations.isLoaded() &&\n      dntData.isLoaded(exchangeDnt) &&\n      $scope.item.exchangeType > 0) {\n        \n      // console.log('finding exchange ' + $scope.item.exchangeType);\n\n      var exchange = dntData.find(exchangeDnt, 'ExchangeType', $scope.item.exchangeType);\n      // console.log('got ' + exchange.length);\n      if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n        // console.log('exchange name: ' + exchange[0].NameID);\n        return translations.translate(exchange[0].NameID).toLowerCase();\n      }\n    }\n    return '';\n  }\n  \n  $scope.setDetail = function(detail) {\n    $scope.detail = detail;\n  }\n  \n  $scope.getServerStorage = function() {\n    var itemData = itemFactory.getItemData($scope.item);\n    if(itemData && 'AbleWStorage' in itemData && 'IsCash' in itemData && itemData.IsCash == 0) {\n      if(itemData.AbleWStorage == 1) {\n        return 'can put in server storage';\n      }\n      else if(itemData.AbleWStorage == 0) {\n        return 'not transferable';\n      }\n    }\n    return '';\n  }\n  \n  $scope.handleChange = function() {\n    $location.path('/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item));\n    $location.replace();\n  }\n  \n  function getJobName() {\n    var retVal = '';\n    var allJobs = jobs.getAllJobs();\n    angular.forEach(allJobs, function(job, index) {\n      if(job.id == $scope.item.needJobClass) {\n        $scope.jobName = job.name;\n        return;\n      }\n    });\n  }\n  \n  function init() {\n    var anyToLoad = false;\n    \n    angular.forEach(exportLinkHelper.getDntFiles($scope.item), function(columns, fileName) {\n      if(!dntData.isLoaded(fileName)) {\n        dntData.init(fileName, columns, reportProgress, function() { tryInit() });\n        anyToLoad = true;\n      }\n    });\n    \n    if(!translations.isLoaded()) {\n      translations.init(reportProgress,function() { tryInit() });\n      anyToLoad = true;\n    }\n    \n    if(!jobs.isLoaded()) {\n      jobs.init(reportProgress, function() { tryInit(); });\n      anyToLoad = true;\n    }\n    \n    if(!anyToLoad) {\n      tryInit();\n    }\n  }\n  init();\n  \n  function tryInit() {\n    if(!dntData.anyLoading() && translations.isLoaded() && jobs.isLoaded()) {\n      $scope.item = exportLinkHelper.reloadItem($scope.item);\n      if($scope.item == null) {\n        return;\n      }\n      \n      setFullStats();\n      $window.document.title = 'DN Gear Sim | ' + $scope.item.name;\n      if($scope.item.itemSource != 'custom') {\n      \n        if($scope.item.typeName == 'skills') {\n          if(!$scope.item.pve || $scope.item.pve != 'pvp') {\n            $scope.item.pve = 'pve';\n          }\n          else {\n            $scope.item.pve = 'pvp';\n          }\n        }\n    \n        if($scope.item.needJobClass > 0) {\n          getJobName();\n        }\n      }\n      \n      var itemData = itemFactory.getItemData($scope.item);\n      if(itemData.DisjointDrop1 > 0) {\n        $scope.canExtract = true;\n      }\n      \n      if((itemData.Type == 0 || itemData.Type == 1) && $scope.item.enchantmentNum > 0) {\n        $scope.canTransfer = true;\n      }\n      \n      if($scope.item.setId) {\n        $scope.isInSet = true;\n      }\n      \n      if($scope.item.typeId == 5) {\n        $scope.isPlate = true;\n      }\n      \n      if($scope.item.typeName != null) {\n        $scope.canUse = true;\n        $scope.detail = 'use';\n      }\n      else if($scope.item.typeId == 46 || $scope.item.typeId == 8 || $scope.item.typeId == 112) {\n        $scope.hasContents = true;\n        $scope.detail = 'contents';\n      }\n      else if($scope.canExtract) {\n        $scope.detail = 'extract';\n      }\n      else if($scope.canTransfer) {\n        $scope.detail = 'transfer';\n      }\n      else if($scope.isPlate) {\n        $scope.detail = 'plate';\n      }\n      else {\n        $scope.detail = 'shops';\n      }\n    }\n  }\n\n  \n  function setFullStats() {\n    // full stats are cleared when publishing builds\n    $scope.item.fullStats = $scope.item.stats;\n    \n    if($scope.item.enchantmentStats != null && $scope.item.enchantmentStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.enchantmentStats, $scope.item.fullStats);\n    }\n    \n    if($scope.item.sparkStats != null && $scope.item.sparkStats.length > 0) {\n      $scope.item.fullStats = hCodeValues.mergeStats($scope.item.sparkStats, $scope.item.fullStats);\n    }\n  }\n  \n  function reportProgress(msg) {\n    // $scope.progress += '|' + msg;\n    // console.log('progress: ' + msg);\n  }\n}]);","angular.module('dnsim').controller('CustomItemCtrl',\n\n['$window','saveHelper','$location','hCodeValues',\nfunction($window,saveHelper,$location,hCodeValues) {\n  'use strict';\n  \n  document.body.className = 'search-back';\n  $window.document.title = 'DN Gear Sim | CUSTOM ITEMS';\n  \n  this.customItems = hCodeValues.customItems;\n  \n  this.maxDisplay = 10;\n  this.currentResults = 0;\n  \n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n  \n  this.getResults = function() {\n    return this.customItems;\n  }\n  \n  this.getNewStatName = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      return 'unnamed custom item';\n    }\n    else {\n      return this.nameSearch;\n    }\n  }\n  \n  this.createCustomItem = function() {\n    if(this.nameSearch == '' || this.nameSearch == null) {\n      this.nameSearch = this.getNewStatName();\n    }\n    $location.path('/item/_custom:.' + this.nameSearch);\n  }\n}]);","angular.module('dnsim').controller('ItemSearchCtrl',\n['$scope','$window','$routeParams','$timeout','$location',\n'translations',\n'itemCategory',\n'jobs',\n'hCodeValues',\n'itemFactory',\n'region',\n'saveHelper',\nfunction(\n  $scope,$window,$routeParams,$timeout,$location,\n  translations,\n  itemCategory,\n  jobs,\n  hCodeValues,\n  itemFactory,\n  region,\n  saveHelper) {\n  'use strict';\n  \n  $scope.itemCategory = itemCategory.byPath('search/' + $routeParams.itemType);\n  if(!$scope.itemCategory) {\n     var catName = localStorage.getItem('selectedItemCategory');\n     if(!catName) {\n       catName = 'titles';\n     }\n     \n     var cat = itemCategory.byName(catName);\n     if(cat) {\n       $location.path(cat.path);\n     }\n     return;\n  }\n\n  document.body.className = 'search-back';\n  $window.document.title = 'DN Gear Sim | ' + $scope.itemCategory.name.toUpperCase();\n  \n  $scope.job = {id: -1, name: ''};\n  $scope.jobs = [$scope.job];\n  $scope.allJobs = [];\n  $scope.minLevel = 1;\n  $scope.maxLevel = 99;\n  $scope.maxDisplay = 10;\n  $scope.totalNumResults = 0;\n  $scope.grades = hCodeValues.rankNames;\n  $scope.stat = {id:-1, name:''};\n  $scope.stats = [$scope.stat];\n  \n  angular.forEach(hCodeValues.stats, function(stat, statId) {\n    if(stat.type) {\n      $scope.stats.push(stat);\n    }\n  });\n  \n  var minLevel = Number(localStorage.getItem('minLevel'));\n  if(minLevel > 0 && minLevel < 100) {\n    $scope.minLevel = minLevel;\n  }\n  var maxLevel = Number(localStorage.getItem('maxLevel'));\n  if(maxLevel > 0 && maxLevel < 100) {\n    $scope.maxLevel = maxLevel;\n  }\n  \n  $scope.nameSearch = localStorage.getItem('nameSearch');\n  if($scope.nameSearch == null) {\n    $scope.nameSearch = '';\n  }\n  \n  var savedSearchStatId = localStorage.getItem('searchStat');\n  if(savedSearchStatId > -1 && savedSearchStatId in hCodeValues.stats) {\n    $scope.stat = hCodeValues.stats[savedSearchStatId];\n  }\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n\n  $scope.save = function() {\n    if(!$scope.itemCategory.hideLevel) {\n      localStorage.setItem('minLevel', $scope.minLevel);\n      localStorage.setItem('maxLevel', $scope.maxLevel);\n    }\n    \n    if(!$scope.itemCategory.hideJob) {\n      if($scope.job != null) {\n        localStorage.setItem('jobNumber', $scope.job.id);\n      }\n    }\n  \n    if($scope.stat != null) {\n      localStorage.setItem('searchStat', $scope.stat.id);\n    }\n\n    localStorage.setItem('nameSearch', $scope.nameSearch);\n  };\n  \n  function init() {\n    // console.log('translations loaded');\n    if(jobs.isLoaded()) {\n      jobInit();\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n\n    itemCategory.init($scope.itemCategory.name, $timeout);\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    // console.log('called the job init func');\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      // console.log('trying to init jobs');\n      // console.log('job dropdown should be set');\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, $scope.jobs[0]);\n      $scope.jobs = newJobs;\n      $scope.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            $scope.job = value;\n            return;\n          }\n        });\n      }\n    }\n  }\n  \n  $scope.rankChecked = hCodeValues.checkedRank;\n  \n  $scope.getResults = function() {\n    var allItems = itemCategory.getItems($scope.itemCategory.name);\n    if(allItems == null) {\n      return null;\n    }\n    \n    allItems = allItems.sort(function(item1, item2) {\n        return (item2.levelLimit - item1.levelLimit);\n      });\n    \n    $scope.save();\n    \n    var start = new Date().getTime();\n          \n    var pcStatId = -1;\n    if('pc' in $scope.stat) {\n      pcStatId = $scope.stat.pc;\n    }\n  \n    var statVals = [];\n    var newResults = [];\n    var numEquip = allItems.length;\n    var curDisplay = 0;\n    for(var i=0;i<numEquip && (curDisplay<$scope.maxDisplay || $scope.stat.id >= 0);++i) {\n      var e = allItems[i];\n      if(e != null) {\n        \n        if(!$scope.itemCategory.hideLevel) {\n          if(e.levelLimit < $scope.minLevel || e.levelLimit > $scope.maxLevel) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideRank) {\n          if(e.rank != null && !$scope.rankChecked[e.rank.id]) {\n            continue;\n          }\n        }\n          \n        if(!$scope.itemCategory.hideJob) {\n          if($scope.job != null && $scope.job.id > 0) {\n            if(!$scope.job.isClassJob(e.needJobClass)) {\n              continue;\n            }\n          }\n        }\n        \n        itemFactory.initItem(e);\n        if(e.typeName != $scope.itemCategory.name) {\n          continue;\n        }\n        \n        if($scope.nameSearch != '') {\n          var nameSearches = $scope.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [$scope.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name.toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        if($scope.stat.id >= 0) {\n          var statFound = false;\n          \n          var statVal = {};\n          for(var s=0;s<e.stats.length;++s) {\n            var stat = e.stats[s]\n            if(stat.id == $scope.stat.id) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n              break;\n            }\n            else if(stat.id == pcStatId) {\n              statFound = true;\n              statVal.i = curDisplay;\n              statVal.s = Number(stat.max);\n            }\n          }\n          \n          if(!statFound) {\n            continue;\n          }\n          else {\n            statVals.push(statVal);\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n    }\n    \n    if($scope.stat.id >= 0) {\n      \n      var currentResults = Math.min(curDisplay, $scope.maxDisplay);\n      \n      statVals = statVals.sort(function(value1, value2) {\n        return value2.s - value1.s;\n      });\n      \n      var statResults = [];\n      for(var i=0;i<currentResults;++i) {\n        statResults.push(newResults[statVals[i].i]);\n      }\n      newResults = statResults;\n    }\n    \n    $scope.totalNumResults = newResults.length;\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    \n    return newResults;\n  };\n  \n  $scope.showMoreResults = function(extra) {\n    $scope.maxDisplay = $scope.totalNumResults + extra;\n    $scope.totalNumResults = 0;\n  }\n  \n}]);\n","angular.module('dnsim').controller('SkillSearchCtrl',\n\n['$window','$timeout','saveHelper','region','jobs','translations','dntData','hCodeValues',\nfunction($window,$timeout,saveHelper, region, jobs, translations,dntData,hCodeValues) {\n  'use strict';\n  \n  $window.document.title = 'DN Gear Sim | SKILLS';\n  \n  var vm = this;\n  document.body.className = 'search-back';\n  \n  this.job = {id: -1, d:{}, name: ''};\n  this.jobs = [this.job];\n  this.allJobs = [];\n  this.maxDisplay = 60;\n  this.currentResults = 0;\n  this.dntName = '';\n  this.skills = [];\n  this.loadedJobId = -1;\n\n  this.nameSearch = localStorage.getItem('nameSearch');\n  if(this.nameSearch == null) {\n    this.nameSearch = '';\n  }\n\n  var classFactories = [];\n  \n  region.init();\n  if(translations.isLoaded()) {\n    init();\n  }\n  else {\n    translations.init(reportProgress, function() { $timeout(init); } );\n  }\n  \n  this.isLoading = function() {\n    if(!jobs.isLoaded()) {\n      // console.log('jobs not loaded');\n      if(!jobs.hasStartedLoading()) {\n        init();\n      }\n      return true;      \n    }\n    \n    if(!translations.isLoaded()) {\n      // console.log('transations not loaded');\n      if(!translations.startedLoading) {\n        translations.init(reportProgress, function() { $timeout(translationsInit); } );\n      }\n\n      return true;\n    }\n    \n    var baseName = jobs.getBaseJobName(vm.job);\n    var dntName = getDntName(baseName);\n    if(dntName != null) {\n      if(!dntData.isLoaded(dntName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  \n  function getDntName(baseClassName) {\n    // console.log('got base class :' + baseClassName);\n    if(baseClassName != null) {\n      return 'skilltable_character' + baseClassName.toLowerCase() + '.lzjson';\n    }\n    else {\n      return null;\n    }\n  }\n\n  function getSkills() {\n    // console.log('getting skills for ' + vm.job.name);\n    if(vm.loadedJobId == vm.job.id) {\n      return vm.skills;\n    }\n    else {\n      \n      var baseJobNames = [];\n      if(vm.job.id >= 0) {\n        var baseName = jobs.getBaseJobName(vm.job);\n        baseJobNames.push(baseName);\n      }\n\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n        if(dntName) {\n          if(!dntData.isLoaded(dntName)) {\n            // console.log('loading skills for ' + baseName);\n            dntData.init(dntName, null, reportProgress, function() { $timeout(function() {setupSkills(baseJobNames, vm.job);} ) });\n          }\n          else {\n            setupSkills(baseJobNames, vm.job);\n          }\n        }\n      });\n    }\n  }\n  \n  function setupSkills(baseJobNames, job) {\n    \n    vm.skills = [];\n    var allReady = true;\n    angular.forEach(baseJobNames, function(baseName, index) {\n      var dntName = getDntName(baseName);\n      if(!dntData.isLoaded(dntName)) {\n        allReady = false;\n        return;\n      }\n    });\n    \n    if(allReady) {\n      angular.forEach(baseJobNames, function(baseName, index) {\n        var dntName = getDntName(baseName);\n      \n        var skills = dntData.getData(dntName);\n        var numSkills = skills.length;\n        for(var s=0;s<numSkills;++s) {\n          if(skills[s].NameID == 0) {\n            continue;\n          }\n          \n          if(skills[s].EffectClass1 > 0 || \n             skills[s].EffectClass2 > 0 || \n             skills[s].EffectClass3 > 0 || \n             skills[s].EffectClass4 > 0 ||\n             skills[s].EffectClass5 > 0 ||  \n             skills[s].EffectClass6 > 0) {\n               \n            var newItem = {d: skills[s]};\n            \n            newItem.id = skills[s].id;\n            newItem.typeName = 'skills';\n            newItem.itemSource = 'skills';\n            newItem.name = translations.translate(skills[s].NameID, skills[s].NameIDParam);\n            newItem.needJobClass = skills[s].NeedJob;\n            newItem.rank = hCodeValues.rankNames[0];\n            newItem.baseJobName = baseName.toLowerCase();\n            newItem.icon = skills[s].IconImageIndex;\n            \n            vm.skills.push(newItem);\n          }\n        }\n      });\n  \n      vm.loadedJobId = job.id;\n    }\n  }\n  \n  this.itemLinkClosed = function() {\n    saveHelper.saveCustomItems(vm.customItems);\n    vm.customItems = saveHelper.getCustomItems();\n  }\n  \n  this.getResults = function() {\n    \n    var skills = getSkills();\n    if(skills == null) {\n      return [];\n    }\n    \n    \n    if(vm.job != null) {\n      localStorage.setItem('jobNumber', vm.job.id);\n    }\n    localStorage.setItem('nameSearch', vm.nameSearch);\n\n    var newResults = [];\n    var numSkills = skills.length;\n    var curDisplay = 0;\n    for(var i=0;i<numSkills && (curDisplay<vm.maxDisplay);++i) {\n      var e = skills[i];\n      \n      if(vm.nameSearch != '') {\n        var nameSearches = vm.nameSearch.split(' ');\n        if(nameSearches.length == 0) {\n          nameSearches = [vm.nameSearch];\n        }\n        var allMatch = true;\n        for(var ns=0;ns<nameSearches.length;++ns) {\n          if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n            allMatch = false;\n            break;\n          }\n        }\n        \n        if(!allMatch) {\n          continue;\n        }\n      }\n      \n      if(vm.job.id >= 0 && !vm.job.isClassJob(e.needJobClass)) {\n        continue;\n      }\n      \n      newResults.push(e);\n      curDisplay++;\n    }\n    vm.currentResults = Math.min(curDisplay, vm.maxDisplay);\n    return newResults;\n  }\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n  \n  function jobInit() {\n    if(translations.isLoaded() && jobs.isLoaded()) {\n      var newJobs = jobs.getFinalJobs();\n\n      newJobs.splice(0, 0, vm.jobs[0]);\n      vm.jobs = newJobs;\n      vm.allJobs = jobs.getAllJobs();\n      \n      var lastJobNumber = Number(localStorage.getItem('jobNumber'));\n      if(lastJobNumber != null) {\n        angular.forEach(newJobs, function(value, key) {\n          if(value.id == lastJobNumber) {\n            vm.job = value;\n            return;\n          }\n        });\n      }\n      \n      vm.getResults();\n    }\n  }\n  \n  function init() {\n    // console.log('skill init');\n    if(jobs.isLoaded()) {\n      $timeout(jobInit);\n    }\n    else {\n      jobs.init(reportProgress, function() { $timeout(jobInit); } );\n    }\n  }\n}]);","angular.module('dnsim')\n.controller('ItemsCtrl', \n  ['$window','$timeout','hCodeValues','region','translations','dntData',\n  function($window, $timeout, hCodeValues, region, translations, dntData) {\n    \n    'use strict';\n    \n    var vm = this;\n    \n    this.boxes = null;\n    this.boxeContents = [];\n    this.maxDisplay = 10;\n    this.currentResults = 0;\n\n    this.nameSearch = localStorage.getItem('itemNameSearch');\n    if(this.nameSearch == null) {\n      this.nameSearch = '';\n    }\n    \n    document.body.className = 'default-back';\n    $window.document.title = 'DN Gear Sim | ITEM SEARCH';\n    \n    var fileName = 'all-items.lzjson';\n    \n    dntData.init(fileName, null, function() {}, function() {\n      $timeout(function() {\n        vm.initBoxes();\n      });\n    });\n    \n    this.initBoxes = function() {\n      // console.log('init boxes');\n      if(dntData.isLoaded(fileName) && translations.isLoaded()) {\n        vm.boxes = [];\n        \n        var datas = dntData.getData(fileName);\n        // console.log(datas.length + ' boxes');\n        for(var i=0;i<datas.length;++i) {\n          var data = datas[i];\n          if(data.NameID > 0) {\n            var box = {\n              id: data.id,\n              name: vm.translate(data.NameID, data.NameIDParam),\n              rank: hCodeValues.rankNames[data.Rank],\n              icon: data.IconImageIndex,\n              levelLimit: data.LevelLimit,\n              fileName: data.fileName,\n            }\n            vm.boxes.push(box);\n          }\n        }\n      }\n    }\n    \n    this.getResults = function() {\n      localStorage.setItem('itemNameSearch', vm.nameSearch);\n      if(vm.boxes == null) {\n        vm.initBoxes();\n      }\n      \n      if(vm.boxes == null) {\n        return;\n      }\n  \n      var newResults = [];\n      var numBoxes = vm.boxes.length;\n      var curDisplay = 0;\n      for(var i=0;i<numBoxes && (curDisplay<vm.maxDisplay);++i) {\n        var e = vm.boxes[i];\n\n        if(vm.nameSearch != '') {\n          var nameSearches = vm.nameSearch.split(' ');\n          if(nameSearches.length == 0) {\n            nameSearches = [vm.nameSearch];\n          }\n          var allMatch = true;\n          for(var ns=0;ns<nameSearches.length;++ns) {\n            if(e.name && e.name.toString().toUpperCase().indexOf(nameSearches[ns].toUpperCase()) == -1) {\n              allMatch = false;\n              break;\n            }\n          }\n          \n          if(!allMatch) {\n            continue;\n          }\n        }\n        \n        newResults.push(e);\n        curDisplay++;\n      }\n      \n      vm.totalNumResults = newResults.length;\n      return newResults;\n    }\n  \n    this.showMoreResults = function(extra) {\n      vm.maxDisplay = vm.totalNumResults + extra;\n      vm.totalNumResults = 0;\n    }\n    \n    this.translate = function(nameId, nameParam) {\n      return translations.translate(nameId, nameParam);\n    }\n  }]\n);\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimChooseClass', chooseClass);\n\nfunction chooseClass() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      job: '=job',\n      onSetJob: '&onSetJob'\n    },\n    templateUrl: 'ui/widgets/choose-class.html',\n    controllerAs: 'ctrl',\n    controller: [\n      '$window','$location','$routeParams','$timeout','saveHelper','dntData','jobs','hCodeValues','itemColumnsToLoad','character', \n      chooseClassController],\n  };\n}\n\nfunction chooseClassController($window,$location,$routeParams,$timeout,saveHelper,dntData,jobs,hCodeValues,itemColumnsToLoad,character) {\n  this.getFinalJobs = function() {\n    var allJobs = jobs.getFinalJobs();\n    var finalJobs = [];\n    for(var j=0;j<allJobs.length;++j) {\n      if(jobs.getBaseJobName(allJobs[j]) == this.bJob) {\n        finalJobs.push(allJobs[j]);\n      }\n    }\n    return finalJobs;\n  }\n  \n  this.getBaseJobs = function() {\n    return jobs.getBaseJobs();\n  }\n  \n  this.getJobName = function(englishName) {\n    var allJobs = jobs.getAllJobs();\n    for(var j=0;j<allJobs.length;++j) {\n      if(allJobs[j].d.EnglishName == englishName) {\n        return allJobs[j].name;\n      }\n    }\n  }\n  \n  this.setJob = function(job) {\n    this.job = job;\n    if(job) {\n      this.onSetJob();\n    }\n  }\n  \n  \n  jobs.init(reportProgress, $timeout);\n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimCategoryLinks', ['itemCategory','$location', dnsimCategoryLinks]);\n\nfunction dnsimCategoryLinks(itemCategory,$location) {\n  return {\n    restrict: 'E',\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-category-links.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.categories = itemCategory.categories;\n      \n      $scope.setCategory = function(action) {\n        localStorage.setItem('selectedItemCategory', action.name);\n        $location.path('/' + action.path);\n      }\n\n      angular.forEach($scope.categories, function(value, key) {\n        if($location.path() == '/' + value.path) {\n          value.extraCss = 'active';\n        }\n        else {\n          value.extraCss = 'search-default';\n        }\n      });\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemIcon', ['exportLinkHelper','$location','region', dnsimItemIcon]);\n\nfunction dnsimItemIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-icon.html',\n    link: function($scope, element, attrs) {\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.iconImage = $scope.getIcon();\n        }\n      });\n      \n      $scope.getIcon = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          var fileIndex = Math.floor($scope.item.icon/200 + 1);\n          \n          var prefix;\n          if($scope.item.typeName == 'skills') {\n            prefix = 'skillicon';\n          }\n          else {\n            prefix = 'itemicon';\n          }\n          \n          if(fileIndex > 9) {\n            return prefix + fileIndex + '.png';\n          }\n          else {\n            return prefix + '0' + fileIndex + '.png';\n          }\n        }\n        return null;\n      }\n      \n      $scope.iconImage = $scope.getIcon();\n      \n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (($scope.item.icon % 10) * 40) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.icon > 0) {\n          return (Math.floor(($scope.item.icon % 200) / 10) * 40) + 4;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n  \nangular.module('dnsim').directive('dnsimItemLink', ['exportLinkHelper','$location','region', dnsimItemLink]);\n\nfunction dnsimItemLink(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n      noClick: '=noClick',\n    },\n    templateUrl: 'ui/widgets/dnsim-item-link.html',\n    link: function($scope, element, attrs) {\n      $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n      \n      $scope.$watch('item', function(newValue, oldValue) {\n        if (newValue) {\n          $scope.itemLink = '/item/' + region.dntLocation.region + '/' + exportLinkHelper.encodeItem($scope.item);\n        }\n      });\n      \n      $scope.openItem = function() {\n        if(!$scope.noClick) {\n          $location.path($scope.itemLink);\n        }\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimJobIcon', ['exportLinkHelper','$location','region', dnsimJobIcon]);\n\nfunction dnsimJobIcon(exportLinkHelper,$location,region) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=item',\n    },\n    templateUrl: 'ui/widgets/dnsim-job-icon.html',\n    link: function($scope, element, attrs) {\n\n      $scope.getIconXPostion = function() {\n        if($scope.item && $scope.item.d && $scope.item.d.JobIcon > 0) {\n          return (($scope.item.d.JobIcon % 9) * 44) + 5;\n        }\n        return 0;\n      }\n      \n      $scope.getIconYPostion = function() {\n        if($scope.item && $scope.item.d && $scope.item.d.JobIcon > 0) {\n          return (Math.floor($scope.item.d.JobIcon / 9) * 44) + 5;\n        }\n        return 0;\n      }\n    },\n  };\n}\n\n})();\n","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimLoading', ['dntData','translations','$timeout', dnsimLoading]);\n\nfunction dnsimLoading(dntData, translations, $timeout) {\n  'use strict';\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n    },\n    templateUrl: 'ui/widgets/dnsim-loading.html',\n    link: function($scope, element, attrs) {\n      $scope.$on('TRANSLATION_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_EVENT', function() {\n        $scope.setLoadCount();\n      });\n      \n      $scope.$on('DNTDATA_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n      \n      $scope.$on('TRANSLATION_LOAD_ERROR', function() {\n        $timeout(function() {\n          $scope.loadError = true;\n        });\n      });\n\n      $scope.numLoading = 0;\n      $scope.setLoadCount = function() {\n        var n = dntData.anyLoading();\n        if(!translations.isLoaded())\n        {\n          n++;\n        }\n        \n        $timeout(function() {\n          if($scope.numLoading < n || !$scope.totalToLoad) {\n            $scope.totalToLoad = n;\n          }\n          $scope.numLoading = n;\n        });\n      }\n      \n      $scope.setLoadCount();\n      $scope.loadError = false;\n    },\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimSelectAllOnClick', [dnsimSelectAllOnClick]);\n\nfunction dnsimSelectAllOnClick() {\n  'use strict';\n  return {\n    restrict: 'A',\n    link: function(scope, element, attrs) {\n      var hasSelectedAll = false;\n      element.on('click', function($event) {\n        if (!hasSelectedAll) {\n          try {\n            //IOs, Safari, thows exception on Chrome etc\n            this.selectionStart = 0;\n            this.selectionEnd = this.value.length + 1;\n            hasSelectedAll = true;\n          } catch (err) {\n            //Non IOs option if not supported, e.g. Chrome\n            this.select();\n            hasSelectedAll = true;\n          }\n        }\n      });\n      //On blur reset hasSelectedAll to allow full select\n      element.on('blur', function($event) {\n        hasSelectedAll = false;\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStats', ['hCodeValues',dnsimStats]);\n\nfunction dnsimStats(hCodeValues) {\n  return {\n    restrict: 'A',\n    scope: {\n      stats: '=stats',\n      build: '=build',\n      altStats: '=altStats',\n      separator: '=separator',\n      filter: '=filter',\n    },\n    link: function($scope, element, attrs) {\n      \n      var sep;\n      if(!$scope.separator) {\n        sep = '';\n      }\n      else {\n        sep = '&nbsp;' + $scope.separator + ' ';\n      }\n      \n      var addedElements = [];\n      var originalDisplay = element.css('display');\n      \n      function showStats() {\n        element.css('display', 'none' );\n        var stats = $scope.stats;\n        if(!stats) {\n          stats = $scope.altStats;\n        }\n        \n        angular.forEach(addedElements, function(value, key) {\n          value.remove();\n        });\n        \n        var first = true;\n        var lastElement = element;\n        \n        function append(text) {\n          var newElement = element.clone();\n          newElement.css('display', originalDisplay);\n          newElement.html(text);\n          \n          lastElement.after(newElement);\n          lastElement = newElement;\n          addedElements.push(newElement);\n        }\n        \n        angular.forEach(stats, function(stat, key) {\n          var output = '';\n          \n          if(stat.id in hCodeValues.stats) {\n            \n            var def = hCodeValues.stats[stat.id];\n            if('hide' in def && def.hide) {\n              return;\n            }\n            \n            if($scope.filter && !def[$scope.filter]) {\n              return;\n            }\n            \n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '&nbsp;';\n            }\n            \n            if($scope.build) {\n              if(def.element == 'primary') {\n                var eleId = 0;\n                if($scope.build.element) {\n                  eleId = $scope.build.element.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n              else if(def.element == 'secondary') {\n                var eleId = 0;\n                if($scope.build.secondaryElement) {\n                  eleId = $scope.build.secondaryElement.id;\n                }\n                output += hCodeValues.elements[eleId].name + '&nbsp;';\n              }\n            }\n            \n            output += def.name+':&nbsp;'+def.display(stat);\n            if(def.combineWith > 0) {\n              angular.forEach(stats, function(stat2, key2) {\n                if(stat2.id == def.combineWith) {\n                  if(stat2.max != stat.max) {\n                    output += '-' + def.display(stat2);\n                  }\n                  return;\n                }\n              });\n            }\n          }\n          else {\n            if(!first) {\n              output += sep;\n            }\n            first = false;\n          \n            if('needSetNum' in stat) {\n              output += stat.needSetNum + '-Increases&nbsp;';\n            }\n            \n            output += stat.id+':&nbsp;'+stat.max;\n          }\n          \n          append(output);\n        });\n      }\n        \n      $scope.$watch('stats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n      \n      $scope.$watch('altStats', function(newValue, oldValue) {\n        if (newValue) {\n          showStats();\n        }\n      });\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').directive('dnsimStringToNumber', dnsimStringToNumber);\n\nfunction dnsimStringToNumber() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attrs, ngModel) {\n      ngModel.$parsers.push(function(value) {\n        return '' + value;\n      });\n      ngModel.$formatters.push(function(value) {\n        return parseFloat(value, 10);\n      });\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('character',['dntData','itemColumnsToLoad','jobs','hCodeValues',character]);\nfunction character(dntData,itemColumnsToLoad,jobs,hCodeValues) {\n\n  var jobConversions = 'rebootplayerweighttable.lzjson';\n  var statCaps = 'playercommonleveltable.lzjson';\n  var jobBaseStats = 'playerleveltable.lzjson';\n\n  var heroLevels = 'heroleveltable.lzjson';\n  var heroLevelPotentials = 'potentialtable_herolevel.lzjson';\n  \n  function reportProgress(msg) {\n    // console.log('progress: ' + msg);\n  }\n\n  return {\n    init: function(complete) {\n      jobs.init(reportProgress, complete);\n      dntData.init(jobConversions, itemColumnsToLoad.jobConversionColsToLoad, reportProgress, complete);\n      dntData.init(statCaps, itemColumnsToLoad.statCapColsToLoad, reportProgress, complete);\n      dntData.init(jobBaseStats, itemColumnsToLoad.jobBaseStatColsToLoad, reportProgress, complete);\n      dntData.init(heroLevels, null, reportProgress, complete);\n      dntData.init(heroLevelPotentials, null, reportProgress, complete);\n    },\n    \n    getHeroStats: function(heroLevel) {\n      var heroStats = [];\n      if(heroLevel > 0) {\n        var index = dntData.findFast(heroLevels, 'id', heroLevel);\n        if(index.length == 1) {\n          var h = dntData.getRow(heroLevels, index[0]);\n          if(h != null) {\n            var pIndex = dntData.findFast(heroLevelPotentials, 'PotentialID', h.HeroLevelAbilityID);\n            if(pIndex.length == 1) {\n              var p = dntData.getRow(heroLevelPotentials, pIndex[0]);\n              if(p != null) {\n                heroStats = hCodeValues.getStats(p);\n              }\n            }\n          }\n        }\n      }\n      return heroStats;\n    },\n    \n    getStatCaps: function(level) {\n      if(level > 0) {\n        var index = dntData.findFast(statCaps, 'id', level);\n        if(index.length == 1) {\n          return dntData.getRow(statCaps, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getConversions: function(jobId) {\n      if(jobId > 0) {\n        var index = dntData.findFast(jobConversions, 'id', jobId);\n        if(index.length == 1) {\n          return dntData.getRow(jobConversions, index[0]);\n        }\n      }\n      \n      return {};\n    },\n    \n    getBaseStats: function(level, jobId) {\n      if(level > 0 && jobId > 0) {\n        var index = dntData.findFast(jobBaseStats, 'id', (Number(jobId) * 100) + Number(level) - 100);\n        if(index.length == 1) {\n          return dntData.getRow(jobBaseStats, index[0]);\n        }\n      }\n      \n      return {};\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemColumnsToLoad',[itemColumnsToLoad]);\nfunction itemColumnsToLoad() {\n  return {\n    mainDnt: {\n      NameID: true, DescriptionID: true, NameIDParam: true, DescriptionIDParam: true,\n      Type: true,TypeParam1: true,TypeParam2: true, TypeParam3: true, LevelLimit: true, NeedJobClass: true, Rank: true,\n      State1: true, StateValue1: true, State1_Max: true, State1_GenProb: true,\n      State2: true, StateValue2: true, State2_Max: true,\n      State3: true, StateValue3: true, State3_Max: true,\n      State4: true, StateValue4: true, State4_Max: true,\n      State5: true, StateValue5: true, State5_Max: true,\n      State6: true, StateValue6: true, State6_Max: true,\n      State7: true, StateValue7: true, State7_Max: true,\n      State8: true, StateValue8: true, State8_Max: true,\n      State9: true, StateValue9: true, State9_Max: true,\n      State10: true,StateValue10: true,State10_Max: true,\n      EnchantID: true,\n      SkillID: true,\n      dragonjeweltype: true, AbleWStorage: true, ExchangeType:true, IconImageIndex: true, IsCash: true, DisjointDrop1: true, Disjointamount: true\n    },\n    partsDnt: {\n      SetItemID: true\n    },\n    enchantDnt: {\n      EnchantID: true,EnchantLevel: true,EnchantRatio: true,BreakRatio: true,MinDown: true,MaxDown: true,NeedCoin: true,\n      DisjointDrop: true,\n      NeedItemID1: true,NeedItemCount1: true,NeedItemID2: true,NeedItemCount2: true,NeedItemID3: true,NeedItemCount3: true,NeedItemID4: true,NeedItemCount4: true,NeedItemID5: true,NeedItemCount5: true,ProtectItemCount: true,\n      State1: true,State1Value: true,State2: true,State2Value: true,State3: true,State3Value: true,State4: true,State4Value: true,State5: true,State5Value: true,State6: true,State6Value: true,State7: true,State7Value: true,State8: true,State8Value: true,State9: true,State9Value: true,State10: true,State10Value: true\n    },\n    potentialDnt : {\n      PotentialID: true, PotentialNo: true,PotentialRatio: true,\n      State1: true,State1Value: true,\n      State2: true,State2Value: true,\n      State3: true,State3Value: true,\n      State4: true,State4Value: true,\n      State5: true,State5Value: true,\n      State6: true,State6Value: true,\n      State7: true,State7Value: true,\n      State8: true,State8Value: true,\n      State9: true,State9Value: true,\n      State10: true,State10Value: true,\n      State11: true,State11Value: true,\n      State12: true,State12Value: true,\n      State13: true,State13Value: true,\n      State14: true,State14Value: true,\n      State15: true,State15Value: true,\n      State16: true,State16Value: true\n    },\n    gemDnt: {\n      Type: true\n    },\n    setDnt : null,\n    sparkDnt: null,\n    jobsDnt: {\n      JobName: true,JobNumber: true,BaseClass: true,ParentJob: true, EnglishName: true, JobIcon: true\n    },\n    jobBaseStatColsToLoad: {\n      Strength:true,Agility:true,Intelligence:true,Stamina:true,AggroperPvE:true,BaseMP:true\n    },\n    statCapColsToLoad: {\n      Cbase: true,\n      Cdefense: true,\n      Ccritical: true,\n      Cfinaldamage: true,\n      CcriticalDamage: true,\n    },\n    jobConversionColsToLoad: {\n      HP: true,StrengthAttack: true,AgilityAttack: true,IntelligenceAttack: true,PhysicalDefense: true,MagicDefense: true,Critical: true,CriticalResistance: true,Stiff: true,StiffResistance: true,Stun: true,StunResistance: true,MoveSpeed: true,MoveSpeedRevision: true,DownDelay: true,ElementAttack: true,ElementDefense: true,ElementDefenseMin: true,ElementDefenseMax: true,StrengthIntelligenceToCriticalDamage: true\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntData', ['$rootScope','$timeout',dntData]);\n\nfunction dntData($rootScope,$timeout) {\n  \n  function createLoader(dntLocation, file, colsToLoad) {\n\n    var loader = {\n      reader: new DntReader(),\n      \n      loaded: false,\n      startedLoading: false,\n      \n      file: file,\n      \n      dntLocation: dntLocation,\n      progressCallback: null,\n      completeCallbacks : [],\n      \n      init: function(progress, complete) {\n        \n        if(this.loaded) {\n          complete();\n        }\n        else {\n          this.progressCallback = progress;\n          this.completeCallbacks.push(complete);\n          \n          if(!this.startedLoading) {\n            this.startedLoading = true;\n            var t = this;\n            \n            this.reader.colsToLoad = colsToLoad;\n            \n            if(this.dntLocation != null && \n              this.dntLocation.url != null &&\n              this.dntLocation.url.length > 0) {\n\n              $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n\n              $timeout(function() {\n                t.reader.loadDntFromServerFile(\n                  t.dntLocation.url + '/' + file,\n                  function(msg) { if(t.progressCallback != null) t.progressCallback(msg) }, \n                  function(result, fileName) {\n                    // console.info('dnt loading complete : ' + file);\n                    t.loaded = true;\n                    \n                    angular.forEach(t.completeCallbacks, function(value, key) {\n                      value();\n                    });\n                    t.completeCallbacks = [];\n                    $rootScope.$broadcast('DNTDATA_LOAD_EVENT');\n                  },\n                  function(msg) {\n                    $rootScope.$broadcast('DNTDATA_LOAD_ERROR');\n                    t.startedLoading = false;\n                    t.loaded = false;\n                  }  );\n              });\n            }\n            else {\n              // console.log(\"dnt location not set!\");\n            }\n          }\n        }\n      },\n      \n      reset: function() {\n        this.reader = new DntReader();\n        this.loaded = false;\n        this.startedLoading = false;\n      }\n    }\n  \n    return loader;\n  };\n  \n  return {\n    loaders : {},\n    findIndexes : {},\n    dntLocation : null,\n    \n    setLocation: function(location) {\n      this.dntLocation = location;\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        if(value.dntLocation != location) {\n          value.dntLocation = location;\n          t.reset(key);\n        }\n      });\n    },\n    \n    init : function (fileName, colsToLoad, progress, complete) {\n      if(!(fileName in this.loaders)) {\n        if(fileName.length > 0) {\n          this.loaders[fileName] = createLoader(this.dntLocation, fileName, colsToLoad);\n        }\n      }\n      this.loaders[fileName].init(progress, complete);\n    },\n    getData : function (fileName) {\n      if(this.isLoaded(fileName)) {\n        var reader = this.loaders[fileName].reader;\n        var retVal = new Array(reader.numRows);\n        for(var i=0;i<reader.numRows;++i) {\n          retVal[i] = reader.getRow(i);\n        }\n        \n        return retVal;\n      }\n      else {\n        return [];\n      }\n    },\n    find : function(fileName, column, value) {\n      var results = this.findFast(fileName, column, value);\n      var retVal = [];\n      var numResults = results.length;\n      for(var i=0;i<numResults;++i) {\n        retVal.push(this.getRow(fileName, results[i]));\n      }\n      \n      return retVal;\n    },\n    findFast : function(fileName, column, value) {\n      \n      if(this.isLoaded(fileName)) {\n        if(!(fileName in this.findIndexes)){\n          this.findIndexes[fileName] = {};\n        }\n        \n        var reader = this.loaders[fileName].reader;\n        var colIndex = reader.columnIndexes[column];\n        \n        var findIndex = this.findIndexes[fileName];\n        \n        if(!(column in findIndex)) {\n          var index = {}\n          findIndex[column] = index;\n          \n          var results = [];\n          \n          var data = reader.data;\n          var len = data.length;\n          for(var r=0;r<len;++r) {\n            var d = data[r];\n            var val = d[colIndex];\n\n            if(!(val in index)) {\n              index[val] = [r];\n            }\n            else {\n              index[val].push(r);\n            }\n          }\n        }\n        \n        if(value in findIndex[column]) {\n          return findIndex[column][value];\n        }\n        else {\n          return [];\n        }\n      }\n      \n      return [];\n    },\n    isLoaded : function(fileName) {\n      return fileName in this.loaders && this.loaders[fileName].loaded;\n    },\n    hasStartedLoading : function(fileName) {\n      return this.isLoaded(fileName) || (fileName in this.loaders && this.loaders[fileName].startedLoading);\n    },\n    reset : function(fileName) {\n      if(fileName in this.loaders) {\n        this.loaders[fileName].reset();\n        delete this.loaders[fileName];\n        delete this.findIndexes[fileName];\n      }\n    },\n    resetAll : function() {\n      var t = this;\n      angular.forEach(this.loaders, function(value, key) {\n        t.reset(key);\n      });\n    },\n    anyLoading : function() {\n      var t = this;\n      var found = 0;\n      angular.forEach(this.loaders, function(value, key) {\n        if(!value.loaded && value.startedLoading) {\n          found++;\n        }\n      });\n      \n      return found;\n    },\n    getNumRows : function(fileName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.numRows;\n      }\n      else {\n        return 0;\n      }\n    },\n    getRow : function(fileName, index) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getRow(index);\n      }\n      else {\n        return {};\n      }\n    },\n    lookupValue: function(fileName, data, columnName) {\n      if(this.isLoaded(fileName)) {\n        return data[this.loaders[fileName].reader.columnNames[columnName]];\n      }\n      else {\n        return null;\n      }\n    },\n    convertData: function(fileName, data) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.convertData(data);\n      }\n      else {\n        return null;\n      }\n    },\n    getValue : function(fileName, index, columnName) {\n      if(this.isLoaded(fileName)) {\n        return this.loaders[fileName].reader.getValue(index, columnName);\n      }\n      else {\n        return null;\n      }\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntInit', ['items','jobs','dntData','itemFactory',dntInit]);\nfunction dntInit(items,jobs,dntData,itemFactory) {\n  return function(progress) {\n    \n    progress('starting init');\n    \n    var allFactories = [jobs];\n    \n    var dntFiles = {};\n    angular.forEach(items, function(item, key) {\n      if(key != 'all') {\n        angular.forEach(item, function(value, prop) {\n          if(prop.indexOf('Dnt') == prop.length-3) {\n            var newFactory = { \n              init: function(progress, complete) {\n                dntData.init(value, null, progress, complete);\n              },\n              isLoaded: function() {\n                return dntData.isLoaded(value);\n              },\n              fileName: value,\n            };\n            \n            allFactories.push(newFactory);\n          }\n        });\n      }\n    });\n    \n    function initFactory(index) {\n    \n      if(index < allFactories.length) {\n        allFactories[index].init(progress, function() { \n          if(allFactories[index].isLoaded()) {\n            if('fileName' in allFactories[index]) {\n              progress('dnt loaded: ' + allFactories[index].fileName);\n            }\n            initFactory(index+1);\n          }\n        });\n      }\n      else {\n        progress('Full initialise complete');\n      }\n    }\n    \n    initFactory(0);\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('dntReset',['items','jobs','dntData',dntReset]);\nfunction dntReset(items, jobs, dntData) {\n  return function() {\n    \n    angular.forEach(items, function(source, name) {\n      source.reset();\n    });\n    \n    jobs.reset();\n    dntData.resetAll();\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('exportLinkHelper', \n['$http','items','dntData','itemFactory','hCodeValues','itemColumnsToLoad','statHelper','translations','itemCategory','region',exportLinkHelper]);\nfunction exportLinkHelper($http,items,dntData,itemFactory,hCodeValues,itemColumnsToLoad,statHelper,translations,itemCategory,region) {\n  'use strict';\n  \n  return {\n    \n    encodeItem: function(item, small) {\n      if(item != null) {\n        var itemString;\n\n        if(item.typeName == 'custom')  {\n          itemString = '_custom';\n          angular.forEach(item.stats, function(stat, index) {\n            if(index > 0) {\n              itemString += '|';\n            }\n            else {\n              itemString += ':C'\n            }\n            itemString += stat.id.toString(36) + '=' + stat.max;\n          });\n        }\n        else if(item.id) {\n          itemString = 'I' + item.id.toString(36) + ':_';\n          if('itemSource' in item) {\n            itemString += item.itemSource;\n          }\n          else if('itemTypeName' in item) {\n            // this is to support groups saved with the old property name\n            itemString += item.itemTypeName;\n          }\n        \n          if(item.enchantmentNum || item.enchantmentNum == 0) {\n            itemString += ':E' + item.enchantmentNum.toString(36);\n          }\n          if(item.pid > 0) {\n            itemString += ':P' + item.pid.toString(36);\n          }\n          // if(item.setId > 0) {\n            // itemString += ':S' + item.setId.toString(36);\n          // }\n          if(item.sparkId > 0) {\n            itemString += ':H' + item.sparkId.toString(36);\n          }\n          if(item.typeName == 'skills') {\n            itemString += ':J' + item.baseJobName;\n          }\n          if(item.pve) {\n            itemString += ':V' + item.pve;\n          }\n          if(item.fileName) {\n            itemString += ':F' + item.fileName;\n          }\n        }\n        \n        if(item.name && !small) {\n          itemString += ':.' + item.name.replace(/ /g, '-').replace(/\\//g, ' ');\n        }\n\n        return itemString;\n      }\n      \n      return '';\n    },\n    \n    decodeItem: function(itemStr) {\n      var item = {};\n      \n      if(itemStr != null) {\n        angular.forEach(itemStr.split(':'), function(itemBit, bitIndex) {\n          if(itemBit.charAt(0) == 'I') {\n            item.id = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'E') {\n            item.enchantmentNum = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'P') {\n            item.pid = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'S') {\n            item.setId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'H') {\n            item.sparkId = parseInt(itemBit.substr(1), 36);\n          }\n          else if(itemBit.charAt(0) == 'J') {\n            item.baseJobName = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == 'V') {\n            item.pve = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '_') {\n            item.itemSource = itemBit.substr(1);\n          }\n          else if(itemBit.charAt(0) == '.') {\n            item.name = itemBit.substr(1).replace('-', ' ');\n          }\n          else if(itemBit.charAt(0) == 'C') {\n            item.stats = [];\n            var statString = itemBit.substr(1);\n            angular.forEach(statString.split('|'), function(statBit, statBitIndex) {\n              var splitStat = statBit.split('=');\n              item.stats.push({\n                id: parseInt(splitStat[0], 36),\n                max: Number(splitStat[1])\n              });\n            });\n          }\n          else if(itemBit.charAt(0) == 'F') {\n            \n            item.fileName = itemBit.substr(1);\n            angular.forEach(items, function(itemSource, key) {\n              if(itemSource.mainDnt && itemSource.mainDnt.indexOf(item.fileName + '.') == 0) {\n                item.itemSource = key;\n              }\n            });\n          }\n        });\n      }\n      \n      return item;\n    },\n    \n    createGroupLink: function(groupName, group) {\n      var itemStrings = [];\n      var self = this;\n      \n      if(group == null) {\n        return '';\n      }\n      \n      angular.forEach(group.items, function(item, key) {\n        var itemString = self.encodeItem(item, true);  \n        if(itemString != null && itemString.length > 0) {\n          itemStrings.push(itemString);\n        }\n      });\n  \n      var retVal = '#/view-group/' + region.dntLocation.region + '/?';\n      \n      \n      if(group.enemyLevel) {\n        retVal += '&e=' + group.enemyLevel;\n      }\n      if(group.playerLevel) {\n        retVal += '&p=' + group.playerLevel;\n      }\n      if(group.heroLevel) {\n        retVal += '&h=' + group.heroLevel;\n      }\n      if(group.job && group.job.id) {\n        retVal += '&j=' + group.job.id;\n      }\n      if(group.damageType && group.damageType.id) {\n        retVal += '&d=' + group.damageType.id;\n      }\n      if(group.element && group.element.id) {\n        retVal += '&t=' + group.element.id;\n      }\n      if(group.secondaryElement && group.secondaryElement.id) {\n        retVal += '&s=' + group.secondaryElement.id;\n      }\n      retVal += '&g=' + encodeURI(groupName) + '&i=' + itemStrings.join(',');\n      return retVal\n    },\n\n    createShortUrl: function(groupName, group) {\n      \n      var path = this.createGroupLink(groupName, group);\n      var longUrl = window.location.href.split(\"#\")[0] + path;\n      var data = { longUrl: longUrl };\n      \n    \t$http.post(\n    \t  'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyD5t5o7ZcSAvM-xMwc14ft2BA-MKQA7LMo', data).success(\n    \t    function(data,status,headers,config){\n        \t\tgroup.shortUrl = data.id;\n    \t      sessionStorage.setItem(path, data.id);\n        \t}).\n        \terror(function(data,status,headers,config){\n        \t\t// console.log(data);\n        \t\t// console.log(status);\n        \t\t// console.log(headers);\n        \t\t// console.log(config);\n        \t});\n    },\n    \n    reloadItem: function(item) {\n\n      if(item == null) {\n        // console.log('cannot reload null item');\n        return;\n      }\n      \n      // support for old property name\n      if('itemTypeName' in item && !item.itemSource) {\n        item.itemSource = item.itemTypeName;\n      }\n      \n      // console.log('checking ' + item.itemSource)\n      if(item.itemSource == 'rbTech') {\n        item.itemSource = 'tech';\n        console.log('changed to ' + item.itemSource)\n      }\n      \n      if(item.itemSource == 'custom' || item.typeName == 'custom') {\n        item.typeName = 'custom';\n        return item;\n      }\n      else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n        \n        if(!item.enchantmentNum) {\n          item.enchantmentNum = 1;\n        }\n        \n        var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n        var pv = 'pve';\n        if(item.pve == 'pvp') {\n          pv = 'pvp';\n        }\n        var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + pv + '.lzjson';\n        \n        var skillData = dntData.find(skillDnt, 'id', item.id)[0];\n        var skillLevelDatas = dntData.getData(skillLevelDnt);\n\n        var skillLevelVals = {};\n        angular.forEach(skillLevelDatas, function(value, index) {\n          if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n            skillLevelVals = value;\n            return;\n          }\n        });\n        \n        var newItem = {\n          id: item.id,\n          itemSource: item.itemSource,\n          typeName: item.itemSource,\n          needJobClass: skillData.NeedJob,\n          baseJobName: item.baseJobName,\n          rank: hCodeValues.rankNames[0],\n          enchantmentNum: item.enchantmentNum,\n          name: translations.translate(skillData.NameID, skillData.NameIDParam),\n          description: translations.translate(skillLevelVals.SkillExplanationID, skillLevelVals.SkillExplanationIDParam),\n          icon: skillData.IconImageIndex,\n          pve: item.pve,\n        };\n        \n        newItem.stats = statHelper.getSkillStats(newItem, skillData, skillLevelDatas);\n        return newItem;\n      }\n      else if(item.itemSource in items) {\n        \n        var itemType = items[item.itemSource];\n        var ds = dntData.find(itemType.mainDnt, 'id', item.id);\n        if(ds.length == 0) {\n          console.log('item ' + item.id + ' not found in ' + itemType.mainDnt);\n        }\n        else {\n          var d = ds[0];\n        \n          var totalRatio = 0;\n          var p = null;\n          \n          var ps = dntData.find(itemType.potentialDnt, 'id', item.pid);\n          if(ps.length == 0) {\n            ps = dntData.find(itemType.potentialDnt, 'PotentialID', d.TypeParam1);\n          }\n          \n          if(ps.length == 0) {\n            var ps = dntData.find(itemType.potentialDntEx, 'id', item.pid);\n            if(ps.length == 0) {\n              ps = dntData.find(itemType.potentialDntEx, 'PotentialID', d.TypeParam1);\n            }\n          }\n          \n          if(ps.length > 0) {\n            p = ps[0];\n            \n            if(p.PotentialID != d.TypeParam1) {\n              // this happened one time\n              // not sure how but it corrupted the stats\n              p = null;\n            console.log('bad potential');\n            }\n            else {\n              var potentials = dntData.find(itemType.potentialDnt, 'PotentialID', p.PotentialID);\n              angular.forEach(potentials, function(value, key) {\n                totalRatio += value.PotentialRatio;\n              });\n            }\n          }\n          \n          var newItem = itemFactory.createItem(itemType.name, d, p, totalRatio);\n          itemFactory.initItem(newItem);\n          itemCategory.setItemCategory(newItem, d);\n\n          var usePartDnt = null;\n          if(newItem.typeName != 'weapons' && newItem.typeId != 0) {\n            usePartDnt = 'partsDnt';\n          }\n          else {\n            usePartDnt = 'weaponDnt';\n          }\n      \n          if(usePartDnt) {\n            if(dntData.isLoaded(itemType[usePartDnt]) && dntData.isLoaded(itemType.setDnt)) {\n              newItem.setStats = [];\n              var parts = dntData.find(itemType[usePartDnt], 'id', item.id);\n              if(parts.length > 0) {\n                newItem.setId = parts[0].SetItemID;\n                var sets = dntData.find(itemType.setDnt, 'id', parts[0].SetItemID);\n                if(sets.length > 0) {\n                  newItem.setStats = hCodeValues.getStats(sets[0]);\n                }\n              }\n            }\n          }\n\n          newItem.fullStats = newItem.stats;\n          if(item.enchantmentNum >= 0) {\n            newItem.enchantmentNum = item.enchantmentNum;\n            \n            if(newItem.typeName == 'skills') {\n              \n            }\n            else if(newItem.typeName == 'talisman') {\n              var extraStats = [];\n              angular.forEach(newItem.stats, function(stat, index) {\n                extraStats.push({id: stat.id, max: stat.max * (newItem.enchantmentNum/100)});\n              });\n              \n              newItem.enchantmentStats = extraStats;\n              newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n            }\n            else {\n              var enchantments = dntData.find(itemType.enchantDnt, 'EnchantID', newItem.enchantmentId);\n              angular.forEach(enchantments, function(enchantment, index) {\n                if(enchantment.EnchantLevel == newItem.enchantmentNum) {\n                  newItem.enchantmentStats = hCodeValues.getStats(enchantment);\n                  newItem.fullStats = hCodeValues.mergeStats(newItem.enchantmentStats, newItem.stats);\n                  return;\n                }\n              });\n            }\n          }\n          \n          if(item.sparkId > 0) {\n            newItem.sparkId = item.sparkId;\n            var sparks = dntData.find(itemType.sparkDnt, 'id', item.sparkId);\n            if(sparks.length > 0) {\n              newItem.sparkStats = hCodeValues.getStats(sparks[0]);\n              newItem.fullStats = hCodeValues.mergeStats(newItem.fullStats, newItem.sparkStats);\n            }\n          }\n          else if(d.dragonjeweltype) {\n            newItem.offensiveGemSlots = 0;\n            newItem.increasingGemSlots = 0;\n            var itemData = dntData.find('dragonjewelslottable.lzjson', 'DragonJewelID', d.dragonjeweltype);\n            if(itemData && itemData.length > 0) {\n              if(itemData[0].DragonJewelSlot1 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 1) newItem.offensiveGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 1) newItem.offensiveGemSlots++;\n              \n              if(itemData[0].DragonJewelSlot1 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot2 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot3 == 2) newItem.increasingGemSlots++;\n              if(itemData[0].DragonJewelSlot4 == 2) newItem.increasingGemSlots++;\n            }\n          }\n          \n          return newItem;\n        }\n      }\n      \n      if(item.fileName) {\n        var datas = dntData.find(item.fileName + '.lzjson', 'id', item.id);\n        if(datas.length > 0) {\n          var d = datas[0];\n          var newItem = {\n            id: item.id,\n            data: d,\n            levelLimit : d.LevelLimit,\n            needJobClass : d.NeedJobClass,\n            typeId : d.Type,\n            exchangeType: d.ExchangeType,\n            rank : hCodeValues.rankNames[d.Rank],\n            fileName: item.fileName,\n            description: translations.translate(d.DescriptionID, d.DescriptionIDParam),\n          };\n          \n          itemFactory.initItem(newItem);\n          return newItem;\n        }\n        else {\n          return {name: 'unknown item'};\n        }\n      }\n      else {\n        return {name: 'unknown item source: ' + item.itemSource};\n      }\n    },\n    \n    getDntFiles: function(item) {\n\n      var dntFiles = {};\n\n      if(item == null) {\n      }\n      else {\n        if(!item.itemSource && item.itemTypeName in items) {\n          item.itemSource = item.itemTypeName;\n        }\n        \n        if(item.itemSource == 'rbTech') {\n          item.itemSource = 'tech';\n        }\n        \n        if(item.itemSource in items) {\n          var itemType = items[item.itemSource];\n          \n          dntFiles['exchange.lzjson'] = null;\n          dntFiles['dragonjewelslottable.lzjson'] = null;\n  \n          dntFiles[itemType.mainDnt] = itemColumnsToLoad.mainDnt;\n          if('potentialDnt' in itemType) {\n            dntFiles[itemType.potentialDnt] = itemColumnsToLoad.potentialDnt;\n          }\n          if('potentialDntEx' in itemType) {\n            dntFiles[itemType.potentialDntEx] = itemColumnsToLoad.potentialDnt;\n          }\n          \n          if('enchantDnt' in itemType) {\n            dntFiles[itemType.enchantDnt] = itemColumnsToLoad.enchantDnt;\n          }\n          \n          if('weaponDnt' in itemType) {\n            dntFiles[itemType.weaponDnt] = itemColumnsToLoad.weaponDnt;\n          }\n          \n          if('partsDnt' in itemType) {\n            dntFiles[itemType.partsDnt] = itemColumnsToLoad.partsDnt;\n          }\n          \n          if('setDnt' in itemType) {\n            dntFiles[itemType.setDnt] = itemColumnsToLoad.setDnt;\n          }\n          \n          if('gemDnt' in itemType) {\n            dntFiles[itemType.gemDnt] = itemColumnsToLoad.gemDnt;\n          }\n          \n          if('sparkDnt' in itemType) {\n            dntFiles[itemType.sparkDnt] = itemColumnsToLoad.sparkDnt;\n          }\n        }\n        else if(item.itemSource == 'skills' || item.typeName == 'skills') {\n            var skillDnt = 'skilltable_character' + item.baseJobName + '.lzjson';\n            dntFiles[skillDnt] = null;\n            var skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pve' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n            skillLevelDnt = 'skillleveltable_character' + item.baseJobName + 'pvp' + '.lzjson';\n            dntFiles[skillLevelDnt] = null;\n        }\n        else if(item.typeName == 'custom') {\n        }\n        \n        if(item.fileName) {\n          dntFiles[item.fileName + '.lzjson'] = null;\n        }\n      }\n      \n      return dntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('groupHelper', ['exportLinkHelper',groupHelper]);\nfunction groupHelper(exportLinkHelper) {\n  'use strict';\n  \n  return {\n    reloadGroup: function(groupName, group) {\n      var newItems = [];\n      angular.forEach(group.items, function(item, key) {\n        var newItem = exportLinkHelper.reloadItem(item);\n        if(newItem != null) {\n          newItems.push(newItem);\n        }\n      });\n      \n      return newItems;\n    },\n    \n    getDntFiles: function(group) {\n\n      var allDntFiles = {};\n      angular.forEach(group.items, function(item, key1) {\n        \n        var dntFiles = exportLinkHelper.getDntFiles(item);\n\n        angular.forEach(dntFiles, function(value, key) {\n          allDntFiles[key] = value;\n        });\n      });\n      \n      return allDntFiles;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemCategory',\n['itemFactory','items','dntData',itemCategory]);\nfunction itemCategory(itemFactory,items,dntData) {\n\n  return {\n    categories: [\n      {path: 'search/titles', name:'titles', sourceType: 'titles', hideRank: true, hideJob: true, hideLevel: true, numItemText: '1', maxCat: 1},\n      {path: 'search/weapons', name:'weapons', sourceType: 'equipment', numItemText: '2', maxExchange: 1, maxCat: 2, limitExchange: [1,2]},\n      {path: 'search/armour', name:'armour', sourceType: 'equipment', numItemText: '5', maxExchange: 1, maxCat: 5, limitExchange: [3,4,5,6,7]},\n      {path: 'search/accessories', name:'accessories', sourceType: 'equipment', hideJob: true, maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/techs', name:'techs', sourceType: 'techs', maxCat: 4, maxExchange: 2, limitExchange: [8,9,10]},\n      {path: 'search/offensive-gems', name:'offensive gems', sourceType: 'gems', hideJob: true, maxCat: 4, maxExchange: 4, limitExchange: [54]},\n      {path: 'search/increasing-gems', name:'increasing gems', sourceType: 'gems', hideJob: true, maxCat: 14, maxExchange: 14, limitExchange: [54]},\n      {path: 'search/enhancement-plates', name:'enhancement plates', sourceType: 'plates', hideJob: true, numItemText: '8+3', maxCat: 11, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/expedition-plates', name:'expedition plates', sourceType: 'plates', hideRank: true, hideJob: true, numItemText: '4', maxCat: 4, maxExchange: 15, limitExchange: [33]},\n      {path: 'search/talisman', name:'talisman', sourceType: 'talisman', hideJob: true, numItemText: '8+4', maxCat: 12, maxExchange: 12, limitExchange: [52,53]},\n      {path: 'search/costume', name:'costume', sourceType: 'cash', numItemText: '7', maxCat: 7, maxExchange: 1, limitExchange: [16,17,18,19,20,21,22]},\n      {path: 'search/cash', name:'cash', sourceType: 'cash', numItemText: '8', maxCat: 8, maxExchange: 2, hideJob: true, limitExchange: [23,24,25,26,27,28,29]},\n      {path: 'search/extras', name:'extras', sourceType: 'xtras', limitExchange: [47], hideJob: true,},\n      {path: 'search/skills', name:'skills'},\n      {path: 'search/custom', name:'custom'},\n      ],\n      \n    byName: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.name == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n      \n    byPath: function(name) {\n      var retVal = null;\n      angular.forEach(this.categories, function(category, index) {\n        if(category.path == name) {\n          retVal = category;\n        }\n      });\n      \n      return retVal;\n    },\n    \n    getItems: function(name) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        var retVal = [];\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType && retVal != null) {\n            if(source.items == null && !source.loading) {\n              itemFactory.loadItems(source);\n            }\n            \n            if(source.items != null) {\n              retVal = retVal.concat(source.items);\n            }\n            else {\n              retVal = null; // if any are null just return null\n            }\n          }\n        });\n        \n        var catItems = [];\n        if(retVal) {\n          var vm = this;\n          angular.forEach(retVal, function(item, index) {\n            if(item.typeName == cat.name ||\n              vm.isItemForCat(cat, item, item.data)) {\n\n              item.typeName = name;\n              catItems.push(item);\n            }\n          });\n        }\n        \n        return catItems;\n      }\n      else {\n        return null;\n      }\n    },\n    \n    isItemForCat: function(cat, item, rawData) {\n      \n      if(item.itemSource in items && items[item.itemSource].type != cat.sourceType) {\n        return false;\n      }\n      else if(item.itemType == cat.name) {\n        return true;\n      }\n      else if(cat.limitExchange) {\n        \n        for(var i=0;i<cat.limitExchange.length;++i) {\n          if(cat.limitExchange[i] == item.exchangeType || (rawData && cat.limitExchange[i] == rawData.ExchangeType)) {\n            \n            if(item.itemSource == 'plate') {\n              if((item.rawData && rawData.Rank == 4) || (item.rank && item.rank.id == 4)) {\n                return cat.name == 'expedition plates';\n              }\n              else {\n                return cat.name == 'enhancement plates';\n              }\n            }\n            else if(item.itemSource == 'gem') {\n              var gemTypes = dntData.find(items.gem.gemDnt, 'id', item.id);\n              if(gemTypes.length > 0) {\n                \n                if(gemTypes[0].Type == 1) {\n                  return cat.name == 'offensive gems';\n                }\n                else if(gemTypes[0].Type == 2) {\n                  return cat.name == 'increasing gems';\n                }\n                else {\n                  return false;\n                }\n              }\n            }\n            \n            return true;\n          }\n        }\n        \n        return false;\n      }\n      else if(item.itemSource in items) {\n        return items[item.itemSource].type == cat.sourceType;\n      }\n      else {\n        return false;\n      }\n    },\n    \n    init: function(name, complete) {\n      var cat = this.byName(name);\n      if(cat && 'sourceType' in cat) {\n        angular.forEach(items, function(source, sourceName) {\n          if(source.type == cat.sourceType) {\n            source.init(function() {}, complete);\n          }\n        });\n      }\n    },\n    \n    setItemCategory: function (item, rawData) {\n      var vm = this;\n      \n      angular.forEach(this.categories, function(cat, index) {\n        if(vm.isItemForCat(cat, item, rawData)) {\n          item.typeName = cat.name;\n        }\n      });\n    },\n    \n    getItemsByCategory: function(items) {\n      var itemMap = {};\n      if(items != null) {\n        var types = {};\n        angular.forEach(items, function(item, index) {\n          if(item != null) {\n            if(!(item.typeName in types)) {\n              types[item.typeName] = [];\n            }\n            types[item.typeName].push(item);\n          }\n        });\n        \n        angular.forEach(this.categories, function(category, index) {\n\n          if(category.name in types) {\n            \n            var sorted = types[category.name].sort(function(item1, item2) {\n              if(category.name == 'talisman') {\n                \n                var enh1 = item1.enchantmentNum;\n                if(!enh1) enh1 = 0;\n                var enh2 = item2.enchantmentNum;\n                if(!enh2) enh1 = 0;\n                \n                if(enh1 != enh2) {\n                  return enh2 - enh1;\n                }\n              }\n              else if(item1.itemSource == 'gem' || item1.itemSource == 'plate') {\n                return item2.levelLimit - item1.levelLimit;\n              }\n              else if('exchangeType' in item1 && 'exchangeType' in item2) {\n                return item1.exchangeType - item2.exchangeType;\n              }\n              \n              return item1.name.localeCompare(item2.name);\n            });\n            itemMap[category.name] = sorted;\n          }\n          else {\n            itemMap[category.name] = [];\n          }\n        });\n        \n        angular.forEach(items, function(item, index) {\n          if(item != null && !(item.typeName in itemMap)) {\n            console.log('we dont know ' + item.typeName + ' anymore')\n            itemMap.typeError = true;\n          }\n        });\n      }\n      return itemMap;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('itemFactory',\n['translations','dntData','hCodeValues','items',itemFactory]);\n\nfunction itemFactory(translations,dntData,hCodeValues,items) {\n  \n  return {\n    loadItems: loadItems,\n    initItem: initItem,\n    createItem: createItem,\n    getItemData: getItemData,\n    createBasicItem: createBasicItem,\n  };\n  \n  function createItem(itemSourceName, d, p, totalRatio) {\n    \n    // data and potential are used to initialise name and stats\n    // this is only done when needed\n    // they are then removed from the object\n    return {\n      data : d,\n      potential : p,\n      id: d.id,\n      totalRatio: totalRatio,\n      itemSource : itemSourceName,\n      levelLimit : d.LevelLimit,\n      needJobClass : d.NeedJobClass,\n      typeId : d.Type,\n      exchangeType: d.ExchangeType,\n      rank : hCodeValues.rankNames[d.Rank],\n      pid: null,\n      name : null,\n      stats : null,\n      potentialRatio : null,\n      typeName : null,\n      sparkId: null,\n    };\n  };\n  \n  function loadItems(itemType) {\n    \n    if(!dntData.isLoaded(itemType.mainDnt)) {\n      return null;\n    }\n    \n    if(!translations.isLoaded()) {\n      return null;\n    }\n    \n    if('potentialDnt' in itemType && !dntData.isLoaded(itemType.potentialDnt)) {\n      return null;\n    }\n    \n    if('potentialDntEx' in itemType && !dntData.isLoaded(itemType.potentialDntEx)) {\n      return null;\n    }\n    \n    var start = new Date().getTime();\n    \n    itemType.items = [];\n    var numRows = dntData.getNumRows(itemType.mainDnt);\n    for(var r=0;r<numRows;++r) {\n      var dType = dntData.getValue(itemType.mainDnt, r, 'Type');\n      var dLevelLimit = dntData.getValue(itemType.mainDnt, r, 'LevelLimit');\n      var dRank = dntData.getValue(itemType.mainDnt, r, 'Rank');\n      \n      // skip certain types like pouches, res scrolls, etc\n      if(dType != 8 &&\n        dType != 29 &&\n        dType != 114 &&\n        dType != 79 &&\n        dType != 174 &&\n        dType != 130 &&\n        dType != 24 &&\n        dType != 182 &&\n        dType != 78 &&\n        dType != 20 &&\n        dType != 46 &&\n        dType != 9 &&\n        (!itemType.minLevel || dLevelLimit >= itemType.minLevel) &&\n        (!itemType.maxLevel || dLevelLimit <= itemType.maxLevel) &&\n        (!itemType.minRank || dRank >= itemType.minRank)) {\n\n        var dState1_GenProb = dntData.getValue(itemType.mainDnt, r, 'State1_GenProb');\n        var dStateValue1 = dntData.getValue(itemType.mainDnt, r, 'StateValue1');\n        var dTypeParam1 = dntData.getValue(itemType.mainDnt, r, 'TypeParam1');\n          \n        // skip items with no data\n        if(dState1_GenProb > 0 || dStateValue1 > 0 || dTypeParam1 > 0) {\n          var d = dntData.getRow(itemType.mainDnt, r);\n          \n          if(itemType.type == 'techs') {\n            var exists = false;\n            for(var i=0;i<itemType.items.length;++i) {\n              if(itemType.items[i].needJobClass == d.NeedJobClass &&\n                itemType.items[i].levelLimit == d.LevelLimit &&\n                itemType.items[i].potential && itemType.items[i].potential.PotentialID == dTypeParam1) {\n                  exists = true;\n                  break;\n                }\n            }\n            \n            if(exists) {\n              continue;\n            }\n          }\n          \n          var potentials = [];\n          if(dTypeParam1 > 0 && 'potentialDnt' in itemType) {\n            potentials = dntData.find(itemType.potentialDnt, 'PotentialID', dTypeParam1);\n            \n            if(potentials.length == 0 && 'potentialDntEx' in itemType) {\n              potentials = dntData.find(itemType.potentialDntEx, 'PotentialID', dTypeParam1);\n            }\n          }\n          \n          var totalRatio = 0;\n          angular.forEach(potentials, function(value, key) {\n            totalRatio += value.PotentialRatio;\n          });\n          \n          var numPotentials = potentials.length;\n          if(numPotentials == 0) {\n            itemType.items.push(this.createItem(itemType.name, d, null, totalRatio));\n          }\n          else {\n            for(var p=0;p<numPotentials;++p) {\n              \n              var found = false;\n              for(var q=0;q<p;++q) {\n                if(potentialsMatch(potentials[p], potentials[q])) {\n                  found = true;\n                  break;\n                }\n              }\n              \n              if(!found) {\n                for(var q=p+1;q<numPotentials;++q) {\n                  if(potentialsMatch(potentials[p], potentials[q])) {\n                    potentials[p].PotentialRatio += potentials[q].PotentialRatio;\n                  }\n                }\n                \n                itemType.items.push(this.createItem(itemType.name, d, potentials[p], totalRatio));\n              }\n            }\n          }\n        }\n      }\n    }\n            \n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('item init time: ' + time/1000 + 's for ' + itemType.name);\n  }\n  \n  function potentialsMatch(p1, p2) {\n    \n    var i = 1;\n    var j = 1;\n    for(;;) {\n      var state1Col = 'State' + i;\n      var state2Col = 'State' + j;\n      \n      if(p1[state1Col] == 107) {\n        i++;\n        state1Col = 'State' + i;\n      }\n      if(p2[state2Col] == 107) {\n        j++;\n        state2Col = 'State' + j;\n      }\n      \n      if(!(state1Col in p1 || state2Col in p2)) {\n        return true;\n      }\n      \n      if(!(state1Col in p1)) {\n        return false;\n      }\n      if(!(state2Col in p2)) {\n        return false;\n      }\n      \n      if(p1[state1Col] == -1 && p2[state2Col] == -1) {\n        return true;\n      }\n      \n      if(!(p1[state1Col] >= 0 || p2[state2Col] >= 0)) {\n        return true;\n      }\n      \n      if(p1[state1Col] != p2[state2Col]) {\n        return false;\n      }\n      \n      var val1Col = 'State' + i + 'Value';\n      var val2Col = 'State' + j + 'Value';\n      if(p1[val1Col] != p2[val2Col]) {\n        return false;\n      }\n      \n      ++i;\n    }\n  }\n  \n  function initItem(item) {\n    \n    if(item.data) {\n      var d = item.data;\n      var p = item.potential;\n  \n      if(item.name == null) {\n        item.name = translations.translate(d.NameID, d.NameIDParam);\n      }\n      \n      if(!item.sparkTypeId && d.TypeParam2 > 0) {\n        item.sparkTypeId = d.TypeParam2;\n      }\n      \n      if(item.stats == null) {\n        var stats = hCodeValues.getStats(d);\n        if(p != null) {\n          var potentialStats = hCodeValues.getStats(p);\n          stats = hCodeValues.mergeStats(stats, potentialStats);\n        }\n        \n        item.stats = stats;\n      }\n      \n      if(d.SkillID && !item.skillId) {\n        item.skillId = d.SkillID;\n      }\n      \n      if(item.iconIndex == null) {\n        item.icon = d.IconImageIndex;\n        if(!item.icon && item.itemSource == 'title') {\n          item.icon = 12417;\n        }\n      }\n      \n      if(d.EnchantID && !item.enchantmentId) {\n        item.enchantmentId = d.EnchantID;\n      }\n      \n      if(p != null) {\n        item.pid = p.id;\n      \n        if(item.potentialRatio == null) {\n          item.potentialRatio = getPotentialRatio(p, item.totalRatio);\n        }\n      }\n      \n      delete item.data;\n      delete item.potential;\n    }\n  }\n  \n  function getPotentialRatio(p, totalRatio) {\n    \n    if(p != null && p.PotentialRatio > 0 && totalRatio != 0) {\n      var ratio = Math.round(p.PotentialRatio/totalRatio*100*100)/100;\n      if(ratio != 100) {\n        return ratio + '%';\n      }\n    }\n\n    return null;\n  }\n  \n  function getItemData(item) {\n    \n    var fileName = null;\n    var itemType = items[item.itemSource];\n    \n    if(item.fileName && dntData.isLoaded(item.fileName + '.optimised.lzjson')) {\n      fileName = item.fileName + '.optimised.lzjson';\n    }\n    else if(item.fileName && dntData.isLoaded(item.fileName + '.lzjson')) {\n      fileName = item.fileName + '.lzjson';\n    }\n    else if(itemType && dntData.isLoaded(itemType.mainDnt)) {\n      fileName = itemType.mainDnt\n    }\n\n    if(fileName) {\n      var itemData = dntData.find(fileName, 'id', item.id);\n      if(itemData && itemData.length > 0) {\n        return itemData[0];\n      }\n    }\n    \n    return [];\n  }\n  \n  function createBasicItem(d) {\n    if(!d) {\n      return [];\n    }\n    return {\n      id: d.id,\n      name: translations.translate(d.NameID, d.NameIDParam),\n      rank: hCodeValues.rankNames[d.Rank],\n      icon: d.IconImageIndex,\n      levelLimit : d.LevelLimit,\n      fileName: d.fileName,\n    };\n  }\n}\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('items',\n['translations','dntData','itemColumnsToLoad',items]);\nfunction items(translations,dntData,itemColumnsToLoad) {\n  \n  var itemSources = {\n    \n      title : {\n        mainDnt: 'appellationtable.optimised.lzjson', \n        type: 'titles', \n        minLevel: 0, \n        minRank: 0 },\n      // wspr: { mainDnt: 'itemtable_source.dnt', type: 'wellspring', minLevel: 24 },\n      \n      tech: { \n        mainDnt: 'itemtable_skilllevelup.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        type: 'techs', \n        minLevel: 24,\n        minRank: 0},\n      \n      tman: { \n        mainDnt: 'itemtable_talisman.optimised.lzjson', \n        type: 'talisman', \n        potentialDnt: 'potentialtable_talismanitem.optimised.lzjson',\n        minLevel: 24,\n        minRank: 0 },\n      \n      gem: { \n        mainDnt: 'itemtable_dragonjewel.optimised.lzjson', \n        potentialDnt: 'potentialtable_dragonjewel.optimised.lzjson',\n        potentialDntEx: 'potentialtable_reboot.optimised.lzjson',\n        enchantDnt: 'enchanttable_dragonjewel.optimised.lzjson', \n        gemDnt: 'dragonjeweltable.optimised.lzjson',\n        type: 'gems',\n        minLevel: 24,\n        minRank: 3},\n      \n      plate: { \n        mainDnt : 'itemtable_glyph.optimised.lzjson', \n        potentialDnt: 'potentialtable_glyph.optimised.lzjson',\n        type: 'plates',\n        minLevel: 16,\n        minRank: 2 },\n\n      items: {\n        mainDnt: 'itemtable.optimised.lzjson', \n        partsDnt: 'partstable.optimised.lzjson', \n        weaponDnt: 'weapontable.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 80,\n        minRank: 3 },\n      eq: {\n        mainDnt: 'itemtable_equipment.optimised.lzjson', \n        partsDnt: 'partstable_equipment.optimised.lzjson', \n        weaponDnt: 'weapontable_equipment.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        potentialDnt: 'potentialtable.optimised.lzjson',\n        sparkDnt: 'potentialtable_potentialjewel.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      rbeq: { \n        mainDnt: 'itemtable_reboot.optimised.lzjson', \n        partsDnt: 'partstable_reboot.optimised.lzjson', \n        weaponDnt: 'weapontable_reboot.optimised.lzjson', \n        enchantDnt: 'enchanttable_reboot.optimised.lzjson', \n        potentialDnt: 'potentialtable_reboot.optimised.lzjson',\n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n      pvpeq: { \n        mainDnt: 'itemtable_pvp.optimised.lzjson',\n        partsDnt: 'partstable_pvp.optimised.lzjson', \n        weaponDnt: 'weapontable_pvp.optimised.lzjson', \n        enchantDnt: 'enchanttable.optimised.lzjson', \n        setDnt: 'setitemtable.optimised.lzjson',\n        type: 'equipment',\n        minLevel: 24,\n        minRank: 3 },\n\n      c2016: { \n        mainDnt: 'itemtable_common2016.lzjson', \n        partsDnt: 'partstable_common2016.lzjson', \n        weaponDnt: 'weapontable_common2016.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2015: { \n        mainDnt: 'itemtable_common2015.optimised.lzjson', \n        partsDnt: 'partstable_common2015.optimised.lzjson', \n        weaponDnt: 'weapontable_common2015.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      c2014: { \n        mainDnt: 'itemtable_common2014.optimised.lzjson', \n        partsDnt: 'partstable_common2014.optimised.lzjson', \n        weaponDnt: 'weapontable_common2014.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      cash: { \n        mainDnt: 'itemtable_cash.optimised.lzjson', \n        partsDnt: 'partstable_cash.optimised.lzjson', \n        weaponDnt: 'weapontable_cash.optimised.lzjson', \n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      event: {\n        mainDnt: 'itemtable_event.optimised.lzjson',\n        partsDnt: 'partstable_event.optimised.lzjson',\n        weaponDnt: 'weapontable_event.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'cash',\n        minLevel: 0,\n        minRank: 0 },\n      xtras: {\n        mainDnt: 'itemtable_vehicle.optimised.lzjson',\n        partsDnt: 'vehiclepartstable.optimised.lzjson',\n        setDnt: 'setitemtable_cash.optimised.lzjson',\n        type: 'xtras',\n        minLevel: 0,\n        minRank: 0 },\n    };\n    \n    // now that the sources are set up add some methods on them for initialisation\n    // each source will store the items from that source for reuse by searches\n    angular.forEach(itemSources, function(itemSource, key) {\n      itemSource.name = key;\n      itemSource.loading = false;\n      itemSource.items = null;\n      itemSource.init = init; // decalared below\n      itemSource.reset = function() {\n        itemSource.items = null;\n        itemSource.loading = false;\n      };\n    });\n\n    return itemSources;\n  \n  \n    function init(progress, complete) {\n      var itemSource = this;\n      itemSource.loading = true;\n  \n      if(itemSource.items != null) {\n        complete();\n      }\n      else {\n        \n        translations.init(progress, function() { doComplete(itemSource, complete) });\n        dntData.init(itemSource.mainDnt, itemColumnsToLoad.mainDnt, progress, function() { doComplete(itemSource, complete) });\n        if('potentialDnt' in itemSource) {\n          dntData.init(itemSource.potentialDnt, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('potentialDntEx' in itemSource) {\n          dntData.init(itemSource.potentialDntEx, itemColumnsToLoad.potentialDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n        if('gemDnt' in itemSource) {\n          dntData.init(itemSource.gemDnt, itemColumnsToLoad.gemDnt, progress, function() { doComplete(itemSource, complete) });\n        }\n  \n        doComplete(itemSource, complete);\n      }\n    }\n    \n    function doComplete(itemSource, complete) {\n      if(translations.isLoaded() && \n      dntData.isLoaded(itemSource.mainDnt) && \n      (!('potentialDnt' in itemSource) || dntData.isLoaded(itemSource.potentialDnt)) &&\n      (!('potentialDntEx' in itemSource) || dntData.isLoaded(itemSource.potentialDntEx)) &&\n      (!('gemDnt' in itemSource) || dntData.isLoaded(itemSource.gemDnt))\n      ) {\n        complete();\n        itemSource.loading = false;\n      }\n    }\n  };\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('jobs', ['dntData', 'translations', 'itemColumnsToLoad', jobs]);\nfunction jobs(dntData, translations, itemColumnsToLoad) {\n  \n  var fileName ='jobtable.lzjson';\n  var colsToLoad = itemColumnsToLoad.jobsDnt;\n  \n  return {\n    fileName : fileName,\n    allJobs : null,\n    \n    isLoaded : function() {\n      return dntData.isLoaded(fileName);\n    },\n    \n    hasStartedLoading: function() {\n      return dntData.hasStartedLoading(fileName);\n    },\n    \n    init : function(progress, complete) {\n      dntData.init(fileName, colsToLoad, progress, function() {\n        complete();\n        });\n    },\n\n    reset : function() {\n      this.allJobs = null;\n      dntData.reset(fileName);\n    },\n    \n    getFinalJobs : function () {\n      var jobs = [];\n      var alljobs = this.getAllJobs();\n      if(alljobs != null) {\n        var numRows = alljobs.length;\n        for(var r=0;r<numRows;++r) {\n          if(alljobs[r].d.JobNumber == 2 && alljobs[r].d.JobIcon > 0) {\n            jobs.push(alljobs[r]);\n          }\n        }\n      }\n      \n      return jobs;\n    },\n    \n    getBaseJobs : function () {\n      var retVal=[];\n      var baseJobs = {};\n\n      var self = this;\n      angular.forEach(this.getFinalJobs(), function(job, key) {\n        baseJobs[self.getBaseJobName(job)] = job;\n      });\n\n      angular.forEach(baseJobs, function(job, jobName) {\n        retVal.push(jobName);\n      });\n\n      return retVal;\n    },\n    \n    getAllJobs : function () {\n      if(this.allJobs == null && this.isLoaded() && translations.isLoaded()) {\n        var jobs = [];\n        var data = dntData.getData(fileName);\n        var numRows = data.length;\n        for(var r=0;r<numRows;++r) {\n          jobs[jobs.length] = this.createJob(data[r]);\n        }\n        \n        this.allJobs = jobs;\n      }\n      return this.allJobs;\n    },\n    \n    getById: function(id) {\n      var data = this.getAllJobs();\n      \n      var numRows = data.length;\n      for(var r=0;r<numRows;++r) {\n        if(data[r].id == id) {\n          return data[r];\n        }\n      }\n    },\n    \n    createJob : function(d) {\n      var t = this;\n      return {\n          d : d,\n          id : d.id,\n          name : translations.translate(d.JobName),\n          isClassJob : function(c) {\n            return t.isClassJob(d, c);\n          }\n        };\n    },\n    \n    isClassJob : function (d, c) {\n      if(c == 0) return true;\n      if(d.id == c) {\n        return true;\n      }\n      \n      var parentJob = d.ParentJob;\n      \n      if(!parentJob) return false;\n      if(parentJob == c) return true;\n\n      var parentJobData = this.getById(parentJob);\n      if(parentJobData) {\n        return this.isClassJob(parentJobData.d, c);\n      }\n      \n      return false;\n    },\n    \n    getBaseJobName : function(job) {\n      if(this.isLoaded()) {\n        var alljobs = this.getAllJobs();\n        if(alljobs != null) {\n          var numRows = alljobs.length;\n          for(var r=0;r<numRows;++r) {\n            if(alljobs[r].id == (job.d.BaseClass+1) && alljobs[r].d.EnglishName) {\n              return alljobs[r].d.EnglishName;\n            }\n          }\n        }\n      }\n      \n      return null;\n    },\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('onlineService', ['$window','$q','hCodeValues',onlineService]);\n\nfunction onlineService($window, $q, hCodeValues) {\n  console.log('setup online service');\n  \n  var service = {\n    login: login,\n    getUser: function() {\n      return firebase.auth().currentUser;\n    },\n    signOut: signOut,\n    deleteAccount: deleteAccount,\n    \n    getUserBuilds: getUserBuilds,\n    deleteBuild: deleteBuild,\n    saveBuild: saveBuild,\n    getBuild: getBuild,\n    getClassBuilds: getClassBuilds,\n    \n    getProfile: getProfile,\n    saveProfile: saveProfile,\n  };\n  \n  init();\n  \n  return service;\n  \n  function init() {\n    console.log('init');\n    firebase.initializeApp({\n      apiKey: \"AIzaSyC-Mckgho1xAI2SQzsKnpsr2ObDKOhdSrE\",\n      authDomain: \"dngearsim.firebaseapp.com\",\n      databaseURL: \"https://dngearsim.firebaseio.com\",\n      storageBucket: \"dngearsim.appspot.com\",\n    });\n  }\n  \n  function login() {\n    return $q(function(resolve, reject) {\n      var auth = firebase.auth();\n        \n      auth.onAuthStateChanged(function(user) {\n        if(user == null) {\n          console.log('redirecting');\n          $window.location.href = 'login.html';\n        }\n        else {\n          console.log('logged in');\n          resolve(user);\n        }\n      });\n    });\n  }\n  \n  function getProfile(uid) {\n    console.log('get profile');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('profile/' + uid).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(storedProfile.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getBuild(uid, buildName) {\n    console.log('get build');\n    return $q(function(resolve, reject) {\n      firebase.database().ref('builds/' + uid + '/' + buildName).once('value', function(storedProfile) {\n        if(storedProfile) {\n          resolve(decompressBuild(storedProfile.val()));\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function saveProfile(profile) {\n    return $q(function(resolve, reject) {\n      var user = service.getUser();\n      if(user) {\n        profile = angular.copy(profile);\n        deleteNullProperties(profile, true);\n        firebase.database().ref('profile/' + user.uid).set(profile).then(resolve);\n      }\n    });\n  }\n  \n  function getUserBuilds(uid) {\n    console.log('get builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds');\n      firebase.database().ref('builds/' + uid).once('value', function(storedBuilds) {\n        if(storedBuilds) {\n          var retVal = {};\n          var val = storedBuilds.val();\n          for(var buildName in val) {\n            retVal[buildName] = decompressBuild(val[buildName]);\n          }\n          resolve(retVal);\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function getClassBuilds(job) {\n    console.log('get class builds');\n    return $q(function(resolve, reject) {\n      console.log('getting builds', job.id);\n      firebase.database().ref('job-builds/' + job.id).once('value', function(jobBuilds) {\n        console.log('ok');\n        if(jobBuilds) {\n          resolve(jobBuilds.val());\n        }\n        else {\n          resolve({});\n        }\n      });\n    });\n  }\n  \n  function compressBuild(build) {\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        delete item.fullStats;\n      });\n    }\n    \n    var stringifiedData = JSON.stringify(build);\n    return LZString.compressToUTF16(stringifiedData);\n  }\n  \n  function decompressBuild(compressedBuild) {\n    var stringifiedData = LZString.decompressFromUTF16(compressedBuild);\n    var build = JSON.parse(stringifiedData);\n    \n    if(build.items) {\n      _.each(build.items, function(item) {\n        item.fullStats = item.stats;\n        \n        if(item.enchantmentStats != null && item.enchantmentStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.enchantmentStats, item.fullStats);\n        }\n        \n        if(item.sparkStats != null && item.sparkStats.length > 0) {\n          item.fullStats = hCodeValues.mergeStats(item.sparkStats, item.fullStats);\n        }\n      });\n    }\n    \n    return build;\n  }\n  \n  function saveBuild(buildName, build) {\n    var user = service.getUser();\n    var actions = [];\n    if(user) {\n      build = angular.copy(build);\n      deleteNullProperties(build, true);\n      // console.log('saving', build);\n      actions.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).set(compressBuild(build))\n      );\n      \n      if(build.job && build.job.id) {\n        console.log('saving build');\n          \n        var data = {};\n        if(build.playerLevel) {\n          data.lev = build.playerLevel;\n        }\n        if(build.region) {\n          data.region = build.region;\n        }\n        if(build.guild) {\n          data.guild = build.guild;\n        }\n        if(build.about) {\n          data.about = build.about;\n        }\n        \n        deleteNullProperties(data, true);\n          \n        actions.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid + '/' + buildName).set(data)\n        );\n      }\n    }\n    return $q.all(actions);\n  }\n  \n  function deleteNullProperties(test, recurse) {\n    for (var i in test) {\n        if (test[i] === undefined) {\n            delete test[i];\n        } else if (recurse && typeof test[i] === 'object') {\n            deleteNullProperties(test[i], recurse);\n        }\n    }\n  }\n  \n  function signOut() {\n    var auth = firebase.auth();\n    return $q(function(resolve, reject) {\n      auth.signOut().then(function() {\n        resolve();\n      }, function(error) {\n        reject();\n      });\n    });\n  }\n  \n  function deleteAccount(builds) {\n    var auth = firebase.auth();\n    var user = service.getUser();\n    \n    return $q(function(resolve, reject) {\n      \n      var pList = [\n        firebase.database().ref('builds/' + user.uid).remove(),\n        firebase.database().ref('profile/' + user.uid).remove(),\n        firebase.database().ref('private/' + user.uid).remove()];\n        \n      var jobIds = [];\n      for(var buildName in builds) {\n        if(builds[buildName].job) {\n          jobIds.push(builds[buildName].job.id)\n        }\n      }\n      \n      jobIds = _.uniq(jobIds);\n      _.each(jobIds, function(id) {\n        pList.push(\n          firebase.database().ref('job-builds/' + id + '/' + user.uid).remove()\n        )\n      });\n        \n      $q.all(pList).then(function() {\n        console.log('deleted data');\n        user.delete().then(function() {\n          console.log('deleted user');\n          auth.signOut().then(function() {\n            console.log('signed out');\n            resolve();\n          }, function(error) {\n            reject();\n          });\n        });\n      });\n    });\n  }\n  \n  function deleteBuild(buildName, build) {\n    \n    var pList = [];\n    var user = service.getUser();\n    if(user) {\n      pList.push(\n        firebase.database().ref('builds/' + user.uid + '/' + buildName).remove());\n      \n      if(build.job) {\n        pList.push(\n          firebase.database().ref('job-builds/' + build.job.id + '/' + user.uid).remove());\n      }\n    }\n    \n    return $q.all(pList);\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('quickAdd', ['dntData', 'translations', 'itemColumnsToLoad', 'itemCategory','itemFactory','jobs','hCodeValues', quickAdd]);\nfunction quickAdd(dntData, translations, itemColumnsToLoad, itemCategory,itemFactory,jobs,hCodeValues) {\n\n  return {\n    stepDefs: {\n      exchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            if(build.items) {\n              for(var i=0;i<build.items.length;++i) {\n                if(build.items[i].exchangeType == exId) {\n                  numExchange++;\n                }\n              }\n            }\n            \n            if(numExchange >= category.maxExchange) {\n              continue;\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            var exName = '';\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n            }\n            exchanges.push({id: exId, name: exName.toLowerCase()});\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      accExchangeStep: {\n        name: 'type',\n        getOptions: function(category, build, datas) {\n          \n          var exchanges = [];\n          \n          for(var e=0;e<category.limitExchange.length;++e) {\n            var exId = category.limitExchange[e];\n            \n            var numExchange = 0;\n            for(var i=0;i<build.items.length;++i) {\n              if(build.items[i] && build.items[i].exchangeType == exId) {\n                numExchange++;\n              }\n            }\n            \n            if(exId == 10 || exId == 25) {\n              if(numExchange >= 2) {\n                continue;\n              }\n            }\n            else {\n              if(numExchange >= 1) {\n                continue;\n              }\n            }\n            \n            var exchange = dntData.find('exchange.lzjson','ExchangeType',exId);\n            if(exchange && exchange.length > 0 && exchange[0].NameID > 0) {\n              var exName = translations.translate(exchange[0].NameID).toLowerCase();\n              \n              exchanges.push({id: exId, name: exName.toLowerCase()});\n            }\n          }\n          \n          return exchanges;\n        },\n        matchesItem: function(id, item) {\n          return item.exchangeType == id;\n        }\n      },\n      sixtyLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      allLevelStep: {\n        name: 'level',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 93, name: 'level 93' },\n          { id: 90, name: 'level 90' },\n          { id: 80, name: 'level 80' },\n          { id: 70, name: 'level 70' }, \n          { id: 60, name: 'level 60' }, \n          { id: 50, name: 'level 50' }, \n          { id: 40, name: 'level 40' }, \n          { id: 32, name: 'level 32' }, \n          { id: 24, name: 'level 24' }, \n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.levelLimit == id;\n        }\n      },\n      cashRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      techRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      talismanRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 2, name: 'rare' },\n          { id: 999, name: 'quality high grade' },\n          { id: 1, name: 'magic' },\n          { id: 0, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            // todo: change this to use the name id\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n              \n            if(id == 999) {\n              return index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      gemRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 999, name: 'quality high grade epic' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          itemFactory.initItem(item);\n          if(item.name) {\n            var index = Math.max(\n              item.name.indexOf('Quality'),\n              item.name.indexOf('High Grade'));\n            if(id == 999) {\n              return item.rank.id == 3 && index == 0;\n            }\n            else {\n              return item.rank.id == id && index != 0;\n            }\n          }\n          return false;\n        }\n      },\n      otherRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 3, name: 'epic' },\n          { id: 2, name: 'rare' },\n          { id: 1, name: 'normal' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      equipRankStep: {\n        name: 'rank',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 5, name: 'legendary' },\n          { id: 4, name: 'unique' },\n          { id: 3, name: 'epic' },\n          ];\n        },\n        matchesItem: function(id, item) {\n          return item.rank.id == id;\n        }\n      },\n      enhanceTalismanStep: {\n        name: 'slot',\n        getOptions: function(category, build, datas) {\n          \n          return [\n          { id: 100, name: '+100% slot' },\n          { id: 75, name: '+75% slot' },\n          { id: 25, name: '+25% slot' },\n          { id: 0, name: '+0% slot' },\n          ];\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      titleStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          var allTitles = findData(category, build, datas, 9999);\n          var usefulTitles = [];\n          for(var i=0;i<allTitles.length;++i) {\n            switch(allTitles[i].id) {\n              case 1975: // Manticore Expert\n              case 1973: // Returned\n              case 1008: // Dark Knight\n              // case 339: // Cow Wrangler\n              case 230: // Miraculous\n              case 279: // Provoking\n              // case 1280: // Dragon Tamer\n              case 1313: // Jakard's Demise\n              case 2032: // Sharing Goddess's Grief\n                usefulTitles.push(allTitles[i]);\n            }\n          }\n          \n          return usefulTitles;\n        },\n        hasOptions: function(category, build, datas) {\n          return true;\n        },\n        isItemStep: true,\n      },\n      enhanceStep: {\n        name: 'enhance',\n        getOptions: function(category, build, datas) {\n          \n          var item = getItem(datas);\n          if(item && item.enchantmentId) {\n            return [\n            { id: 14, name: 'enhance to +14' },\n            { id: 13, name: 'enhance to +13' },\n            { id: 12, name: 'enhance to +12' },\n            { id: 11, name: 'enhance to +11' },\n            { id: 10, name: 'enhance to +10' },\n            { id: 9, name: 'enhance to +9' },\n            { id: 8, name: 'enhance to +8' },\n            { id: 7, name: 'enhance to +7' },\n            { id: 6, name: 'enhance to +6' },\n            { id: 5, name: 'enhance to +5' },\n            { id: 4, name: 'enhance to +4' },\n            { id: 3, name: 'enhance to +3' },\n            { id: 2, name: 'enhance to +2' },\n            { id: 1, name: 'enhance to +1' },\n            { id: 0, name: 'not enhanced' },\n            ]\n          }\n          else {\n            return [{ id: 0, name: 'not enhanced' }];\n          }\n        },\n        alterItem: function(id, item) {\n          item.enchantmentNum = id;\n        }\n      },\n      itemStep: {\n        name: 'select',\n        getOptions: function(category, build, datas) {\n          return findData(category, build, datas);\n        },\n        isItemStep: true,\n      },\n      techSkillStep: {\n        name: 'skill',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas, 1);\n          \n          // eventually show all the skills\n          // but for now\n          if(items.length > 0) {\n            return [{id: items[0].skillId, name: items[0].skillId}];\n          }\n          else {\n            return [];\n          }\n        },\n        matchesItem: function(id, item) {\n          return item.skillId == id;\n        }\n      },\n      itemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      distinctItemNameStep: {\n        name: 'item',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var itemNames = {};\n          var itemNamesList = [];\n          \n          for(var i=0;i<build.items.length;++i) {\n            var item = build.items[i];\n            itemNames[item.name] = true;\n          }\n          \n          for(var i=0;i<items.length;++i) {\n            var name = items[i].name;\n            if(!(name in itemNames)) {\n              itemNames[name] = true;\n              itemNamesList.push({\n                id: name,\n                name: name,\n              });\n            }\n          }\n          \n          return itemNamesList;\n        },\n        matchesItem: function(id, item) {\n          return item.name == id;\n        },\n        isItemStep: true,\n      },\n      numStatsStep: {\n        name: 'Num Stats',\n        getOptions: function(category, build, datas) {\n          var items = findData(category, build, datas);\n          var numStats = {};\n          \n          for(var i=0;i<items.length;++i) {\n            var len = 0;\n            for(var j=0;j<items[i].stats.length;++j) {\n              var stat = hCodeValues.stats[items[i].stats[j].id];\n              if(stat && !stat.hide) {\n                len++;\n              }\n            }\n            numStats[len + 'x stats'] = len;\n          }\n          \n          var retVal = [];\n          for(var val in numStats) {\n            retVal.push({\n              id: numStats[val],\n              name: val,\n            });\n          }\n          \n          retVal = retVal.sort(function(a, b) {\n              return a.id - b.id;\n            });\n          \n          return retVal;\n        },\n        matchesItem: function(id, item) {\n          var len = 0;\n          for(var j=0;j<item.stats.length;++j) {\n            var stat = hCodeValues.stats[item.stats[j].id];\n            if(stat && !stat.hide) {\n              len++;\n            }\n          }\n            \n          return len == id;\n        },\n        isItemStep: true,\n      },\n      customStep: {\n        name: 'misc',\n        getOptions: function(category, build, datas) {\n          return hCodeValues.customItems;\n        },\n        isItemStep: true,\n      },\n    },\n    // end of step defs\n    \n    categorySteps: {\n      titles: ['titleStep'],\n      weapons: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      armour: ['exchangeStep','sixtyLevelStep','equipRankStep','itemStep','enhanceStep'],\n      accessories: ['accExchangeStep','allLevelStep','equipRankStep','itemNameStep','itemStep'],\n      'offensive gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'increasing gems': ['sixtyLevelStep','gemRankStep','itemNameStep','numStatsStep','itemStep','enhanceStep'],\n      'enhancement plates': ['allLevelStep','otherRankStep','distinctItemNameStep','numStatsStep','itemStep'],\n      'expedition plates': ['sixtyLevelStep','distinctItemNameStep','numStatsStep','itemStep'],\n      talisman: ['sixtyLevelStep','talismanRankStep','distinctItemNameStep','numStatsStep','itemStep','enhanceTalismanStep'],\n      costume: ['exchangeStep','otherRankStep','itemNameStep','itemStep'],\n      cash: ['accExchangeStep','cashRankStep','itemNameStep','itemStep'],\n      techs: ['exchangeStep','allLevelStep','techRankStep','techSkillStep','itemStep'],\n      custom: ['customStep'],\n    },\n    getOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        return this.stepDefs[stepName].getOptions(category, build, datas);\n      }\n      else {\n        return [];\n      }\n    },\n    hasOptions: function(category, build, datas) {\n      if(category.name in this.categorySteps) {\n        var stepName = this.getStepName(category, datas.length);\n        if(this.stepDefs[stepName].hasOptions) {\n          return this.stepDefs[stepName].hasOptions(category, build, datas);\n        }\n        else {\n          return this.stepDefs[stepName].getOptions(category, build, datas).length > 0;\n        }\n      }\n      else {\n        return false;\n      }\n    },\n    isValidStepNumber: function(category, stepNumber) {\n      return this.categorySteps[category.name].length > stepNumber;\n    },\n    createData: function(value, category, stepNumber) {\n      var stepName = this.getStepName(category, stepNumber);\n      var def = this.stepDefs[stepName];\n      \n      return {\n        step: stepName,\n        value: value,\n        def: def,\n        matchesItem: function(item) {\n          return def.matchesItem(value.id, item);\n        }\n      };\n    },\n    getItem: getItem,\n    getStepName: function(category, stepNumber) {\n      return this.categorySteps[category.name][stepNumber];\n    }\n  }\n  \n  function getItem(datas) {\n    var item = null;\n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.isItemStep) {\n        item = datas[d].value;\n      }\n    }\n    \n    for(var d=0;d<datas.length;++d) {\n      if(datas[d].def.alterItem) {\n        datas[d].def.alterItem(datas[d].value.id, item);\n      }\n    }\n    \n    return item;\n  }\n  \n  function findData(category, build, datas, maxItems) {\n    if(!maxItems) {\n      maxItems = 9999;\n    }\n    \n    var allItems = itemCategory.getItems(category.name);\n    var retVal = [];\n    // console.log('looking at ' + allItems.length + ' items');\n    var numItems = allItems.length;\n    \n    for(var i=0;i<numItems;++i) {\n      \n      var item = allItems[i];\n      \n      if(build.job.id > 0 && item.needJobClass > 0 && !jobs.isClassJob(build.job.d, item.needJobClass)) {\n        continue;\n      }\n      itemFactory.initItem(item);\n      \n      var addItem = true;\n      for(var d=0;d<datas.length;++d) {\n        if(datas[d].matchesItem && !datas[d].matchesItem(item)) {\n          addItem = false;\n          break;\n        }\n      }\n      \n      if(addItem) {\n        retVal.push(item);\n      }\n      \n      if(retVal.length >= maxItems) {\n        break;\n      }\n    }\n    \n    retVal = retVal.sort(function(item1, item2) {\n      return item1.name.localeCompare(item2.name);\n    });\n    \n    // console.log('found ' + retVal.length + ' items');\n    return retVal;\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('region', ['translations','dntReset','dntData','$route',region]);\nfunction region(translations,dntReset,dntData,$route) {\n  \n  var alternativeFiles = {region: 'ALT', name: 'Alternative user specified files', url : ''};\n  var hostedFiles =[\n      {region: 'na', name: 'english files from nexon north america', url : 'https://dnna.firebaseapp.com'},\n      {region: 'kdn', name: 'korean files from pupu', url : 'https://kdnfiles.firebaseapp.com'},\n      {region: 'cdn', name: 'chinese files from shanda', url : 'https://cdnfiles.firebaseapp.com'},\n      {region: 'sea', name: 'south east asia - english files from cherry credits', url : 'https://seadnfiles.firebaseapp.com'},\n      {region: 'eu', name: 'europe - english files from cherry credits', url : 'https://eufiles.firebaseapp.com'},\n      // {region: 'ina', name: 'indonesian files from gemscool', url : 'https://dnina.firebaseapp.com'},\n    ];\n  \n  var dntLocationRegion = localStorage.getItem('lastDNTRegion');\n  var dntLocation = hostedFiles[0];\n  if(dntLocationRegion != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region == dntLocationRegion) {\n        dntLocation = hostedFile;\n      }\n    });\n  }\n\n  var lastTFile = localStorage.getItem('UIStrings_file');\n  var tlocation = null;\n  if(lastTFile != null) {\n    angular.forEach(hostedFiles, function(hostedFile, index) {\n      if(hostedFile.region != alternativeFiles.region && lastTFile.indexOf(hostedFile.url) > -1) {\n        tlocation = hostedFile;\n        return;\n      }\n    });\n  }\n  \n  if(tlocation == null) {\n    tlocation = dntLocation;\n  }\n\n  return {\n    hostedFiles : hostedFiles,\n    alternativeFiles : alternativeFiles,\n    dntLocation : dntLocation,\n    tlocation : tlocation,\n    \n    setCustomUrl: function(url) {\n      // console.log('setting custom location');\n      this.alternativeFiles.url = url;\n\n      var newFiles = [];\n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region != alternativeFiles.region) {\n          newFiles.push(hostedFile);\n        }\n      });\n  \n      newFiles.push(alternativeFiles);\n      hostedFiles = newFiles;\n      this.hostedFiles = newFiles;\n    },\n    \n    setLocationByName: function(locationName) {\n      var newLocation = null;\n      \n      angular.forEach(hostedFiles, function(hostedFile, index) {\n        if(hostedFile.region == locationName) {\n          newLocation = hostedFile;\n        }\n      });\n        \n      this.setLocation(newLocation);\n    },\n    \n    setLocation: function(location) {\n      if(location && location != this.dntLocation) {\n        this.dntLocation = location;\n        dntReset();\n        localStorage.setItem('lastDNTRegion', location.region);\n        dntReset();\n        $route.reload();\n      }\n\n      if(this.tlocation == null) {\n        this.setTLocation(location);\n      }\n      \n      this.init();\n      \n      // $route.reload();\n    },\n    \n    setTLocation: function(location) {\n      \n      if(location != this.tlocation) {\n        \n        angular.forEach(this.translationResettingEvents, function(event, index) {\n          event();\n        });\n        \n        this.tlocation = location;\n        sessionStorage.removeItem('UIStrings');\n        localStorage.removeItem('UIStrings_file');\n        dntReset();\n        translations.reset();\n        translations.location = this.tlocation.url;\n        translations.init(function() {}, function() { $route.reload(); });\n        // $route.reload();\n      }\n    },\n    \n    init: function() {\n      if(this.tlocation != null) {\n        translations.location = this.tlocation.url;\n      }\n      dntData.setLocation(this.dntLocation);\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('saveHelper', ['itemCategory',saveHelper]);\nfunction saveHelper(itemCategory) {\n  return {\n    saveItem: function(groupName, item) {\n      var groups = this.getSavedItems();\n      if(groupName in groups && Array.isArray(groups[groupName].items)) {\n        \n        groups[groupName].items.push(item);\n        groups[groupName].lastUpdate = (new Date()).getTime();\n        this.updatedSavedItems(groupName, groups[groupName].items);\n      }\n      else {\n        this.updatedSavedItems(groupName, [item]);\n      }\n      \n      localStorage.setItem('lastSavedGroup', groupName);\n    },\n    \n    saveBuildSelection : function(buildName, builds) {\n      console.log('saving selection');\n      localStorage.setItem('currentGroup', buildName);\n      if(builds && buildName in builds && builds[buildName].job && builds[buildName].job.id) {\n        console.log('also job');\n        localStorage.setItem('jobNumber', builds[buildName].job.id);\n      }\n    },\n    \n    importGroup: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      groupName = this.getUniqueGroupName(groupName, items);\n      this.updatedSavedItems(groupName, updatedItems);\n      return groupName;\n    },\n    \n    getUniqueGroupName: function(groupName, existingGroups) {\n      var groupNameIndex = 0;\n      if(groupName.lastIndexOf(')') == groupName.length-1) {\n        var startIndex = groupName.lastIndexOf('(');\n        if(startIndex > 0) {\n          var foundIndex = Number(groupName.substr(startIndex+1, groupName.length-startIndex-2));\n          if(foundIndex > 0) {\n            groupNameIndex = foundIndex + 1;\n            groupName = groupName.substr(0, startIndex - 1);\n          }\n        }\n      }\n      \n      var originalName = groupName;\n      for(;;) {\n        var groupName = originalName;\n        if(groupNameIndex > 0) {\n          groupName = originalName + ' (' + groupNameIndex + ')';\n        }\n        \n        if(groupName in existingGroups) {\n          groupNameIndex++;\n        }\n        else {\n          break;\n        }\n      }\n      \n      return groupName;\n    },\n    \n    updatedSavedItems: function(groupName, updatedItems) {\n      var items = this.getSavedItems();\n      if(groupName in items) {\n        if(updatedItems.length == 0) {\n          delete items[groupName];\n          // console.log('no items to update');\n        }\n        else {\n          items[groupName].items = updatedItems;\n          items[groupName].lastUpdate = (new Date()).getTime();\n          localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('set group');\n        }\n      }\n      else {\n        items[groupName] = {items : updatedItems, lastUpdate: (new Date()).getTime()};\n        localStorage.setItem('lastSavedGroup', groupName);\n          // console.log('created group');\n      }\n      \n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    renameSavedGroup: function(\n      oldGroupName, newGroupName, enemyLevel, playerLevel, heroLevel, job, damageType, element, secondaryElement,\n      enemyStatCaps, playerStatCaps, conversions, baseStats, heroStats) {\n        \n      var savedItems = this.getSavedItems();\n      \n      if(newGroupName in savedItems || oldGroupName == newGroupName) {\n        // console.log('not changing name');\n        newGroupName = oldGroupName;\n      }\n      else if(oldGroupName in savedItems) {\n        var group = savedItems[oldGroupName];\n        savedItems[newGroupName] = group;\n        delete savedItems[oldGroupName];\n      }\n      \n      savedItems[newGroupName].enemyLevel = enemyLevel;\n      savedItems[newGroupName].playerLevel = playerLevel;\n      savedItems[newGroupName].heroLevel = heroLevel;\n      savedItems[newGroupName].job = job;\n      savedItems[newGroupName].damageType = damageType;\n      savedItems[newGroupName].element = element;\n      savedItems[newGroupName].secondaryElement = secondaryElement;\n      savedItems[newGroupName].enemyStatCaps = enemyStatCaps;\n      savedItems[newGroupName].playerStatCaps = playerStatCaps;\n      savedItems[newGroupName].conversions = conversions;\n      savedItems[newGroupName].baseStats = baseStats;\n      savedItems[newGroupName].heroStats = heroStats;\n      \n      var stringifiedData = JSON.stringify(savedItems);\n      localStorage.setItem('savedItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getSavedItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('savedItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    getCustomItems: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('customItems'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return [];\n    },\n    \n    saveCustomItems: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('customItems', LZString.compressToUTF16(stringifiedData));\n    },\n    \n    getHiddenTypes: function() {\n      try {\n        var stringifiedData = LZString.decompressFromUTF16(localStorage.getItem('hiddenTypes'));\n        var savedItems = JSON.parse(stringifiedData);\n        return savedItems;\n      }\n      catch(ex) {\n      }\n      \n      return {};\n    },\n    \n    saveHiddenTypes: function(items) {\n      var stringifiedData = JSON.stringify(items);\n      // console.log('saving: ' + stringifiedData);\n      localStorage.setItem('hiddenTypes', LZString.compressToUTF16(stringifiedData));\n    }\n  };\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('statHelper', ['hCodeValues',statHelper]);\nfunction statHelper(hCodeValues) {\n\n  return {\n    \n    getSetStats: function(groupItems) {\n      var stats = [];\n      var sets = {};\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null && value.setStats != null) {\n          if(value.setId in sets) {\n            sets[value.setId].numItems++;\n          }\n          else {\n            sets[value.setId] = { numItems : 1, stats : value.setStats };\n          }\n        }\n      });\n      \n      angular.forEach(sets, function(value, key) {\n        var setStats = [];\n        angular.forEach(value.stats, function(stat, index) {\n          if(stat.needSetNum <= value.numItems) {\n            stats.push(stat);\n          }\n        });\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCombinedStats: function(groupItems) {\n      var stats = [];\n      \n      angular.forEach(groupItems, function(value, key) {\n        if(value != null) {\n          \n          if(value.fullStats != null) {\n            stats = stats.concat(value.fullStats);\n          }\n          else {\n            stats = stats.concat(value.stats);\n          }\n        }\n      });\n      \n      return hCodeValues.mergeStats(stats);\n    },\n    \n    getCalculatedStats: function(group, combinedStats) {\n      \n      var retVal = [];\n      var statLookup = {};\n      if(!group.conversions || !group.enemyStatCaps) {\n        return [];\n      }\n      \n      angular.forEach(combinedStats, function(stat, index) {\n        statLookup[stat.id] = stat;\n      });\n      \n      function getPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.pc]) {\n          return Number(statLookup[statDef.pc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function getSkillPc(stat) {\n        var statDef = hCodeValues.stats[stat.id];\n        if(statLookup[statDef.skPc]) {\n          return Number(statLookup[statDef.skPc].max);\n        }\n        else {\n          return 0;\n        }\n      }\n      \n      function applyPc(stat) {\n        stat.max = Math.floor(\n          stat.max * (1+getPc(stat)) * (1+getSkillPc(stat))\n          );\n      }\n      \n      function dupeStat(id) {\n        var stat = statLookup[id];\n        if(stat) {\n          return {id: id, max: Number(stat.max), pc: stat.pc};\n        }\n        else {\n          return {id: id, max: 0, pc: 0};\n        }\n      }\n      \n      function addStat(stat) {\n        if(stat.max > 0) {\n          retVal.push(stat);\n        }\n      }\n      \n      // base stats\n      var str = dupeStat(0);\n      applyPc(str);\n      addStat(str);\n      \n      var agi = dupeStat(1);\n      applyPc(agi);\n      addStat(agi);\n      \n      var int = dupeStat(2);\n      applyPc(int);\n      addStat(int);\n\n      var vit = dupeStat(3);\n      applyPc(vit);\n      addStat(vit);\n\n      // add vit to hp\n      var hp = dupeStat(25);\n      hp.max += (vit.max * Number(group.conversions.HP));\n      applyPc(hp);\n      addStat(hp);\n      \n      // defs\n      var def = dupeStat(8);\n      def.max += (vit.max * Number(group.conversions.PhysicalDefense));\n      applyPc(def);\n      addStat(def);\n      \n      var defpc = dupeStat(1008);\n      // defpc.max = Math.max(0.85, Number(def.max)/Number(group.enemyStatCaps.Cdefense));\n      defpc.max = Math.min(0.85,def.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(defpc);\n      \n      var mdef = dupeStat(9);\n      mdef.max += (int.max * Number(group.conversions.MagicDefense));\n      applyPc(mdef);\n      addStat(mdef);\n      \n      var mdefpc = dupeStat(1009);\n      // mdefpc.max = Math.max(0.85, Number(mdef.max)/Number(group.enemyStatCaps.Cdefense));\n      mdefpc.max = Math.min(0.85,mdef.max/Number(group.enemyStatCaps.Cdefense));\n      addStat(mdefpc);\n      \n      // attack power - like fd but for bufs\n      // this shows as blue damage\n      // i think there are magic and phis variants of this but doesnt matter\n      var aPwr = dupeStat(3000);\n\n      // physical damage\n      if(!group.damageType || group.damageType.id != 2) {\n        var extraPdmg = dupeStat(32);\n        var extraPdmgMod= dupeStat(101);\n        var paPwr = dupeStat(3001);\n        \n        // special stats for zeal\n        var intToPdmg = dupeStat(10164);\n        \n        var minPdmg = dupeStat(4);\n        minPdmg.max += extraPdmg.max;\n        minPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        minPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        minPdmg.max = Math.floor(minPdmg.max*(1+(getPc(minPdmg) + extraPdmgMod.max)));\n        minPdmg.max = Math.floor(minPdmg.max * (1+aPwr.max+paPwr.max));\n        minPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(minPdmg);\n  \n        var maxPdmg = dupeStat(5);\n        maxPdmg.max += extraPdmg.max;\n        maxPdmg.max += Math.floor(str.max*Number(group.conversions.StrengthAttack));\n        maxPdmg.max += Math.floor(agi.max*Number(group.conversions.AgilityAttack));\n        \n        maxPdmg.max = Math.floor(maxPdmg.max*(1+(getPc(maxPdmg) + extraPdmgMod.max)));\n        maxPdmg.max = Math.floor(maxPdmg.max * (1+aPwr.max+paPwr.max));\n        maxPdmg.max += Math.floor(intToPdmg.max * int.max);\n        addStat(maxPdmg);\n      }\n      \n      // magic damage\n      if(!group.damageType || group.damageType.id != 1) {\n        var extraMdmg = dupeStat(33);\n        var extraMdmgMod = dupeStat(102);\n        var maPwr = dupeStat(3002);\n        \n        // special stats for zeal\n        var strToMdmg = dupeStat(10165);\n        \n        var minMdmg = dupeStat(6);\n        minMdmg.max += extraMdmg.max;\n        minMdmg.max += Math.floor(int.max*Number(group.conversions.IntelligenceAttack));\n\n        minMdmg.max = Math.floor(minMdmg.max*(1+(getPc(minMdmg) + extraMdmgMod.max)));\n        minMdmg.max = minMdmg.max * (1+aPwr.max+maPwr.max);\n        minMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(minMdmg);\n        \n        var maxMdmg = dupeStat(7);\n        maxMdmg.max += extraMdmg.max;\n        maxMdmg.max += (int.max*Number(group.conversions.IntelligenceAttack));\n        \n        maxMdmg.max = Math.floor(maxMdmg.max*(1+(getPc(maxMdmg) + extraMdmgMod.max)));\n        maxMdmg.max = maxMdmg.max * (1+aPwr.max+maPwr.max);\n        maxMdmg.max += Math.floor(strToMdmg.max * str.max);\n        addStat(maxMdmg);\n      }\n      \n      \n      // crit chance %\n      var crit = dupeStat(12);\n      crit.max += (agi.max*Number(group.conversions.Critical));\n      applyPc(crit);\n      \n      var skCrit = dupeStat(4012);\n      crit.max += skCrit.max;\n      addStat(crit);\n      \n      var critChance = Math.min(0.89, crit.max / Number(group.enemyStatCaps.Ccritical));\n      retVal.push({id: 1012, max: critChance})\n\n      // crit damage %\n      var cDmg = dupeStat(103);\n      cDmg.max += ((str.max+int.max) * Number(group.conversions.StrengthIntelligenceToCriticalDamage));\n      applyPc(cDmg);\n      addStat(cDmg);\n\n      var critDamagePc = cDmg.max / group.enemyStatCaps.CcriticalDamage;\n      addStat({id: 1103, max: critDamagePc + 2});\n\n      // fd\n      var fd = dupeStat(29);\n      addStat(fd);\n      var maxFd = Number(group.enemyStatCaps.Cfinaldamage);\n      \n      var fdPc = dupeStat(1029);\n      fdPc.max = Math.min(Math.max(0.35*Number(fd.max)/maxFd,Math.pow(Number(fd.max)/maxFd,2.2)),1);\n      addStat(fdPc);\n      \n      // elements\n      var firePc = dupeStat(16);\n      addStat(firePc);\n      \n      var icePc = dupeStat(17);\n      addStat(icePc);\n      \n      var lightPc = dupeStat(18);\n      addStat(lightPc);\n      \n      var darkPc = dupeStat(19);\n      addStat(darkPc);\n      \n      // average damage\n      function addAvgDamageStat(id, min, max) {\n        \n        var nonEleDamage = (min+max)/2;\n        // add crit (assume 25% crit resist - ie. x0.75)\n        nonEleDamage += (critChance * (critDamagePc+1) * nonEleDamage * 0.75);\n        // apply fd\n        nonEleDamage = nonEleDamage * (1 + fdPc.max);\n        \n        // apply element(s)\n        // assume no elemental resist (since probably have resist reduction anyways)\n        var avgDmg = nonEleDamage;\n        if(group.element && group.element.id > 0) {\n          var elementStat = statLookup[hCodeValues.elements[group.element.id].dmgStat];\n          if(elementStat) {\n            avgDmg = avgDmg * (1+Number(elementStat.max));\n          }\n        }\n        addStat({id: id, max: avgDmg});\n        var secElementId = 0;\n        var priElementId = 0;\n        if(group.element) {\n          priElementId = group.element.id;\n        }\n        else {\n          priElementId = 0;\n        }\n        if(group.secondaryElement) {\n          secElementId = group.secondaryElement.id;\n        }\n        else {\n          secElementId = 0;\n        }\n        \n        if(secElementId != priElementId) {\n          if(secElementId > 0) {\n            var secondaryElementStat = statLookup[hCodeValues.elements[group.secondaryElement.id].dmgStat];\n            if(secondaryElementStat) {\n              var secAvgDmg = nonEleDamage * (1+Number(secondaryElementStat.max));\n              addStat({id: id + 1000, max: secAvgDmg});\n            }\n          }\n          else {\n            addStat({id: id + 1000, max: nonEleDamage});\n          }\n        }\n      }\n      \n      // average damages\n      if(!group.damageType || group.damageType.id == 1 || group.damageType.id == 0) {\n        addAvgDamageStat(1004, minPdmg.max, maxPdmg.max);\n      }\n\n      if(!group.damageType || group.damageType.id == 2 || group.damageType.id == 0) {\n        addAvgDamageStat(1006, minMdmg.max, maxMdmg.max);\n      }\n      \n      if(!group.damageType || group.damageType.id == 3) {\n        addAvgDamageStat(1001, minMdmg.max+minPdmg.max, maxMdmg.max+maxPdmg.max);\n      }\n      \n      // Equivalent HP\n      var pdefEqHp = dupeStat(2008);\n      pdefEqHp.max = hp.max / (1-defpc.max);\n      \n      var mdefEqHp = dupeStat(2009);\n      mdefEqHp.max = hp.max / (1-mdefpc.max);\n      \n      var eqHp = dupeStat(3008);\n      eqHp.max = (pdefEqHp.max + mdefEqHp.max) / 2;\n      addStat(eqHp);\n      \n      return retVal;\n    },\n    \n    getNakedStats: function(group) {\n      \n      if(\n        group.baseStats && \n        group.baseStats.Strength > 0) {\n\n        return [\n          {id:0, max:group.baseStats.Strength},\n          {id:1, max:group.baseStats.Agility},\n          {id:2, max:group.baseStats.Intelligence},\n          {id:3, max:group.baseStats.Stamina}\n          ];\n      }\n      else {\n        return [];\n      }\n    },\n    \n    getSkillStats : function (item, data, skillData) {\n\n      var skillLevelVals = null;\n      angular.forEach(skillData, function(value, index) {\n        if(value.SkillIndex == item.id && value.SkillLevel == item.enchantmentNum) {\n          skillLevelVals = value;\n          return;\n        }\n      });\n      \n      if(!skillLevelVals) {\n        return null;\n      }\n      \n      var index = 1;\n      var effects = [];\n      var stillCols = true;\n      \n      while(stillCols) {\n        var colName = 'EffectClass' + index;\n        var valColName = 'EffectClassValue' + index;\n        if(data && colName in data && valColName in skillLevelVals) {\n          if(data[colName] > 0) {\n            \n            var val = skillLevelVals[valColName];\n            \n            // for now add 10k\n            var effectId = data[colName];\n            var map = hCodeValues.skillEffectMapping[effectId];\n            if(map && map.getVals) {\n              var vals = map.getVals(val);\n              for(var i=0;i<vals.length;++i) {\n                effects.push(vals[i]);\n              }\n            }\n            else {\n              var statId;\n              if(map && map.mapTo) {\n                statId = map.mapTo;\n              }\n              else {\n                statId = 10000 + effectId;\n              }\n              \n              if(val > 0) {\n                effects.push({ id: statId, effect: effectId, max: val });\n              }\n              else {\n                if(val.toString().indexOf(';') > 0) {\n                  var vals = val.split(';');\n                  if(vals.length > 0 && vals[0] > 0) {\n                    effects.push({ id: statId, effect: effectId, max: vals[0] });\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          stillCols = false;\n        }\n        \n        index++;\n      }\n      \n      return effects;\n    },\n\n    getBuildStats: function(build) {\n      var stats = {};\n      stats.nakedStats = this.getNakedStats(build);\n      stats.combinedStats = this.getCombinedStats(build.items);\n      stats.setStats = this.getSetStats(build.items);\n      stats.allStats = stats.nakedStats.concat(stats.combinedStats).concat(stats.setStats);\n      if(build.heroStats != null && build.heroStats.length > 0) {\n        stats.heroStats = build.heroStats;\n        stats.allStats = stats.allStats.concat(build.heroStats);\n      }\n      stats.allStats = hCodeValues.mergeStats(stats.allStats);\n      \n      stats.calculatedStats = this.getCalculatedStats(build, stats.allStats);\n      return stats;\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('translations', ['$routeParams', '$rootScope', translations]);\nfunction translations($routeParams, $rootScope) {\n\n  var dnTranslations = new DnTranslations();\n  var tFile = 'uistring.lzjson';\n\n  var completeCallback = [];\n  var progressCallback = [];\n\n  return {\n    \n    reset : function() {\n      dnTranslations = new DnTranslations();\n      dnTranslations.sizeLimit = 100;\n      this.loaded = false;\n      this.startedLoading = false;\n      completeCallback = [];\n      progressCallback = [];\n    },\n    \n    loaded : false,\n    startedLoading : false,\n    \n    location : null,\n  \n    init : function(progress, complete) {\n\n      if(this.isLoaded()) {\n        complete();\n      }\n      else {\n        progressCallback = [];\n        progressCallback.push(progress);\n        completeCallback.push(complete);\n  \n        if(!this.startedLoading) {\n          this.startedLoading = true;\n          var t = this;\n          \n          var fileName = null;\n          if(this.location != null && this.location != '') {\n            fileName = this.location + '/' + tFile;\n            \n            if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n              sessionStorage.removeItem('UIStrings');\n              localStorage.removeItem('UIStrings_file');\n            }\n          }\n          \n          $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n          dnTranslations.loadDefaultFile(\n            fileName, \n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n            }, \n            function() {\n              t.loaded = true;\n              angular.forEach(completeCallback, function(value, key) { value(); });\n              completeCallback = [];\n              $rootScope.$broadcast('TRANSLATION_LOAD_EVENT');\n            },\n            function(msg) {\n              angular.forEach(progressCallback, function(value, key) { value(msg); });\n              $rootScope.$broadcast('TRANSLATION_LOAD_ERROR');\n              t.startedLoading = false;\n              t.loaded = false;\n            }\n          );\n        }\n      }\n    },\n    \n    isLoaded : function() {\n      if(!this.loaded) {\n        var fileName = this.location + '/' + tFile;\n        \n        if(fileName != localStorage.getItem(\"UIStrings_file\")) {\n          sessionStorage.removeItem('UIStrings');\n          localStorage.removeItem('UIStrings_file');\n        }\n\n        this.loaded = dnTranslations.loadFromSession();\n        if(this.loaded) {\n          this.startedLoading = true;\n        }\n      }\n      return this.loaded;\n    },\n    \n    translate : function(id,idParam) {\n      if(this.loaded) {\n        \n        var name;\n        if(!id) {\n          return '';\n        }\n        else {\n          name = dnTranslations.translate(id);\n          \n          if(typeof name != 'string') {\n            return 'm' + name;\n          }\n        }\n        \n        if(idParam) {\n          var params = idParam.split(',');\n          for(var p=0;p<params.length;++p) {\n            var pid = params[p];\n            if(pid.indexOf('{') == 0) {\n              pid = params[p].replace(/\\{|\\}/g,'');\n              pid = dnTranslations.translate(pid);\n            }\n            \n            name = name.replace('{' + p + '}', pid);\n          }\n        }\n\n        return name;\n      }\n      else {\n        return 'm' + id;\n      }\n    }\n  }\n}\n\n})();","(function () {\n'use strict';\n\nangular.module('dnsim').factory('hCodeValues', [hCodeValues]);\nfunction hCodeValues() {\n\n  function toOneDec(stat) {\n    return Math.round(stat.max*10)/10;\n  }\n  function toNoDec(stat) {\n    return Math.floor(stat.max);\n  }\n  function inThousands(stat) {\n    var val = Number(stat.max);\n    if(val < 100) {\n      return val;\n    }\n    else if(val < 100000) {\n      return Math.round(val/100)/10 + 'k';\n    }\n    else if(val < 1000000) {\n      return Math.round(val/1000) + 'k';\n    }\n    else if(val < 10000000) {\n      return Math.round(val/10000)/100 + 'm';\n    }\n    else {\n      return Math.round(val/1000000) + 'm';\n    }\n  }\n  function toPercent(stat) {\n    return (Math.floor(stat.max*100000)/1000) + '%';\n  }\n  \n  return {\n    stats : {\n      0  : {id: 0, name: 'str', display: toNoDec, type: 'dps', pc: 50, skPc: 4050 },\n      1  : {id: 1, name: 'agi', display: toNoDec, type: 'dps', pc: 51, skPc: 4051 },\n      2  : {id: 2, name: 'int', display: toNoDec, type: 'dps', pc: 52, skPc: 4052 },\n      3  : {id: 3, name: 'vit', display: toNoDec, type: 'def', pc: 53, skPc: 4053 },\n      4  : {id: 4, name: 'pdmg', display: toNoDec, combineWith: 5, type: 'dps', pc: 54 },\n      5  : {id: 5, name: 'maxPdmg', display: toNoDec, hide: true, pc: 55 },\n      6  : {id: 6, name: 'mdmg', display: toNoDec, combineWith: 7, type: 'dps', pc: 56 },\n      7  : {id: 7, name: 'maxMdmg', display: toNoDec, hide: true, pc: 57 },\n      8  : {id: 8, name: 'def', display: inThousands, type: 'def', pc: 58 },\n      9  : {id: 9, name: 'mdef', display: inThousands, type: 'def', pc: 59 },\n      10 : {id: 10, name: 'para', display: inThousands, pc: 60, noCustom: true },\n      11 : {id: 11, name: 'para resist', display: inThousands, pc: 61, noCustom: true },\n      12 : {id: 12, name: 'crit', display: toNoDec, type: 'dps', pc: 62 },\n      13 : {id: 13, name: 'crit resist', display: inThousands, pc: 63, noCustom: true },\n      14 : {id: 14, name: 'stun', display: inThousands, pc: 64, noCustom: true },\n      15 : {id: 15, name: 'stun resist', display: inThousands, pc: 65, noCustom: true },\n      16 : {id: 16, name: 'fire%', display: toPercent, type: 'dps' },\n      17 : {id: 17, name: 'ice%', display: toPercent, type: 'dps' },\n      18 : {id: 18, name: 'light%', display: toPercent, type: 'dps' },\n      19 : {id: 19, name: 'dark%', display: toPercent, type: 'dps' },\n      20 : {id: 20, name: 'fire def', display: toPercent, type: 'def' },\n      21 : {id: 21, name: 'ice def', display: toPercent, type: 'def' },\n      22 : {id: 22, name: 'light def', display: toPercent, type: 'def' },\n      23 : {id: 23, name: 'dark def', display: toPercent, type: 'def' },\n      25 : {id: 25, name: 'hp', display: inThousands, type: 'def', pc: 75, skPc: 4075 },\n      26 : {id: 26, name: 'mp', display: inThousands, pc: 76, skPc: 4076 },\n      29 : {id: 29, name: 'fd', display: toNoDec, type: 'dps' },\n      \n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      32 : {id: 32, name: 'pdmg', display: toNoDec, type: 'dps', pc: 54 },\n      33 : {id: 33, name: 'mdmg', display: toNoDec, type: 'dps', pc: 56 },\n      \n      50 : {id: 50, name: 'str%', display: toPercent },\n      51 : {id: 51, name: 'agi%', display: toPercent },\n      52 : {id: 52, name: 'int%', display: toPercent },\n      53 : {id: 53, name: 'vit%', display: toPercent },\n      54 : {id: 54, name: 'pdmg%', display: toPercent, combineWith: 55 },\n      55 : {id: 55, name: 'maxPdmg%', display: toPercent, hide: true },\n      56 : {id: 56, name: 'mdmg%', display: toPercent, combineWith: 57 },\n      57 : {id: 57, name: 'maxMdmg%', display: toPercent, hide: true },\n      58 : {id: 58, name: 'def%', display: toPercent },\n      59 : {id: 59, name: 'mdef%', display: toPercent },\n      60 : {id: 60, name: 'para%', display: toPercent, noCustom: true },\n      61 : {id: 61, name: 'para resist%', display: toPercent, noCustom: true },\n      62 : {id: 62, name: 'crit%', display: toPercent },\n      63 : {id: 63, name: 'crit resist%', display: toPercent },\n      64 : {id: 64, name: 'stun%', display: toPercent, noCustom: true },\n      65 : {id: 65, name: 'stun resist%', display: toPercent, noCustom: true },\n      74 : {id: 74, name: 'move%', display: toPercent, noCustom: true },\n      75 : {id: 75, name: 'hp%', display: toPercent },\n      76 : {id: 76, name: 'mp%', display: toPercent },\n      77 : {id: 77, name: 'mp recover%', display: toPercent },\n      81 : {id: 81, name: 'safe move%', display: toPercent, noCustom: true },\n\n      // these are both min and max\n      // shows with the same name but these are used really just for set bonus I think\n      101 : {id: 101, name: 'pdmg%', display: toPercent, noCustom: true },\n      102 : {id: 102, name: 'mdmg%', display: toPercent, noCustom: true },\n\n      103: {id: 103, name: 'crit dmg', display: toNoDec, type: 'dps', pc: 104 },\n      104: {id: 104, name: 'crit dmg%', display: toPercent, noCustom: true },\n      107: {id: 107, name: 'mp?', display: toNoDec, noCustom: true, hide: true },\n      \n      // stats below here are ones I made up\n      1001: {id: 1001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true },\n      1004: {id: 1004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true },\n      1006: {id: 1006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'primary', noCustom: true },\n      \n      1008: {id: 1008, name: 'calc pdef', display: toPercent, noCustom: true },\n      1009: {id: 1009, name: 'calc mdef', display: toPercent, noCustom: true },\n      \n      1012: {id: 1012, name: 'crit chance', display: toPercent, noCustom: true },\n      1029: {id: 1029, name: 'fd calc', display: toPercent, noCustom: true },\n      1103: {id: 1103, name: 'crit dmg', display: toPercent, noCustom: true },\n      \n      2001: {id: 2001, name: 'dmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true },\n      2004: {id: 2004, name: 'pdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true },\n      2006: {id: 2006, name: 'mdmg', display: inThousands, summaryDisplay: true, element: 'secondary', noCustom: true },\n      \n      2008: {id: 2008, name: 'pdef eqhp', display: inThousands, noCustom: true },\n      2009: {id: 2009, name: 'mdef eqhp', display: inThousands, noCustom: true },\n      \n      3000: {id: 3000, name: 'skDmg%', display: toPercent },\n      3001: {id: 3000, name: 'skPDmg%', display: toPercent },\n      3002: {id: 3000, name: 'skMDmg%', display: toPercent },\n      3008: {id: 3008, name: 'eqhp', display: inThousands, summaryDisplay: true, noCustom: true },\n      \n      4012: {id: 4012, name: 'skCrit', display: inThousands },\n      4050: {id: 4050, name: 'skStr%', display: toPercent },\n      4051: {id: 4051, name: 'skAgi%', display: toPercent },\n      4052: {id: 4052, name: 'skInt%', display: toPercent },\n      4053: {id: 4053, name: 'skVit%', display: toPercent },\n      4075: {id: 4075, name: 'skHp%', display: toPercent },\n      4076: {id: 4076, name: 'skMp%', display: toPercent },\n      \n      // special cases for skills\n      10164: {id: 10164, name: 'intToPdmg', display: toPercent, noCustom: true },\n      10165: {id: 10165, name: 'strToMdmg', display: toPercent, noCustom: true },\n      \n      // items over 10000 are unknown skill effects\n    },\n  \n    rankNames : {\n      0 : { id: 0, name : 'normal' },\n      1 : { id: 1, name : 'magic' },\n      2 : { id: 2, name : 'rare' },\n      3 : { id: 3, name : 'epic' },\n      4 : { id: 4, name : 'unique' },\n      5 : { id: 5, name : 'legendary' },\n    },\n    \n    shopNames : {\n      28001: 'lament',28002: 'lament',28003: 'lament',28004: 'lament',28005: 'lament',28006: 'lament',28007: 'lament',28008: 'lament',28009: 'lament',\n      29001: 'aura',29002: 'aura',29003: 'aura',29004: 'aura',29005: 'aura',29006: 'aura',29007: 'aura',29008: 'aura',29009: 'aura',\n      5001: 'medal',5002: 'medal',5003: 'medal',5004: 'medal',5005: 'medal',5006: 'medal',5007: 'medal',5008: 'medal',5009: 'medal',\n      5101: 'ladder',5102: 'ladder',5103: 'ladder',5104: 'ladder',5105: 'ladder',5106: 'ladder',5107: 'ladder',5108: 'ladder',5109: 'ladder',\n      59001: 'garden bunny',\n      52001 : 'nightmare', 52002 : 'nightmare', 52003 : 'nightmare', 52004 : 'nightmare', 52005 : 'nightmare', 52006 : 'nightmare', 52007 : 'nightmare', 52008 : 'nightmare', 52009 : 'nightmare',\n      21: 'blacksmith', 22: 'blacksmith', 23: 'blacksmith', 24: 'blacksmith', 25: 'blacksmith', 26: 'blacksmith', 27: 'blacksmith', 28: 'blacksmith', 29: 'blacksmith', \n      89001: 'guild master',\n      88001: 'battlefield', 88002: 'battlefield', 88003: 'battlefield', 88004: 'battlefield', 88005: 'battlefield', 88006: 'battlefield', 88007: 'battlefield', 88008: 'battlefield', 88009: 'battlefield', \n      66001: 'erosion',\n      35006: 'plate',\n      14051: 'abyss', 14052: 'abyss', 14053: 'abyss', 14054: 'abyss', 14055: 'abyss', 14056: 'abyss', 14057: 'abyss', 14058: 'abyss', 14059: 'abyss', \n      40011: 'daredevil faire', 40012: 'daredevil faire', 40013: 'daredevil faire', 40014: 'daredevil faire', 40015: 'daredevil faire', 40016: 'daredevil faire', 40017: 'daredevil faire', 40018: 'daredevil faire',\n      40001: 'daredevil faire', 40002: 'daredevil faire', \n      91001: 'wrath',\n      45001: 'farm',\n    },\n    \n    checkedRank : {\n      0 : true,\n      1 : true,\n      2 : true,\n      3 : true,\n      4 : true,\n      5 : true,\n    },\n    \n    typeNames : {\n      0 : 'weapons',\n      1 : 'equipment',\n      5 : 'plates',\n      8 : 'pouch',\n      38 : 'plates',\n      90 : 'welspring',\n      132 : 'talisman',\n      139 : 'gems',\n    },\n    \n    elements : {\n      0 : { id: 0, name: 'non-ele' },\n      1 : { id: 1, name: 'fire', dmgStat: 16 },\n      2 : { id: 2, name: 'ice', dmgStat: 17 },\n      3 : { id: 3, name: 'light', dmgStat: 18 },\n      4 : { id: 4, name: 'dark', dmgStat: 19 },\n    },\n    \n    damageTypes : {\n      0 : { id: 0, name: 'both separate' },\n      1 : { id: 1, name: 'physical' },\n      2 : { id: 2, name: 'magical' },\n      3 : { id: 3, name: 'both combined' },\n    },\n    \n    // note: skills shown on-screen have 1k added to their id\n    skillEffectMapping : {\n      2 : { id: 2, name: 'phyisical attack power', mapTo: 3001 },\n      13 : { id: 13, name: 'mp', mapTo: 26 },\n      25 : { id: 25, name: 'action speed' },\n      29 : { id: 29, name: 'magic attack power', mapTo: 3002 },\n      32 : { id: 32, name: 'fire %', mapTo: 16 },\n      33 : { id: 33, name: 'ice %', mapTo: 17 },\n      34 : { id: 34, name: 'light %', mapTo: 18 },\n      35 : { id: 35, name: 'dark %', mapTo: 19 },\n      36 : { id: 36, name: 'fire def', mapTo: 20 },\n      37 : { id: 37, name: 'ice def', mapTo: 21 },\n      38 : { id: 38, name: 'light def', mapTo: 22 },\n      39 : { id: 39, name: 'dark def', mapTo: 23 },\n      58 : { id: 58, name: 'hp%', mapTo: 4075 },\n      59 : { id: 59, name: 'mp%', mapTo: 4076 },\n      65 : { id: 65, name: 'range' },\n      76 : { id: 76, name: 'movement speed', mapTo: 74 },\n      87 : { id: 87, name: 'str%', mapTo: 4050 },\n      88 : { id: 88, name: 'agi%', mapTo: 4051 },\n      89 : { id: 89, name: 'int%', mapTo: 4052 },\n      90 : { id: 90, name: 'vit%', mapTo: 4053 },\n      134 : { id: 134, name: 'physicial defense%' },\n      185 : { id: 185, name: 'wots attack power', mapTo: 3000 },\n      251 : { id: 251, name: 'critical chance%', mapTo: 1012 },\n      164 : { id: 164, name: 'intToPdmg', mapTo: 10164 },\n      165 : { id: 165, name: 'strToMdmg', mapTo: 10165 },\n      222: {\n        id: 222, \n        name: 'hellfire', \n        getVals: function(val) {\n          if(val.indexOf(';') > 0) {\n            var vals = val.split(';');\n            return [\n              {id: 62, effect: 222, max: Number(vals[0])/100.0},\n              {id: 4012, effect: 222, max: Number(vals[1])},\n              ];\n          }\n          else {\n            return [{id: 62, effect: 222, max: Number(val)/100.0}];\n          }\n        }\n      },\n    },\n    \n    customItems: \n    [\n    {id: 0, typeName:'custom', name: 'wise plate fix', stats: [{id: 52, max:-0.001}]},\n    {id: 0, typeName:'custom', name: 'hp unified', stats: [{id: 4075, max:0.05}]},\n    ],\n  \n    getStats : function(data) {\n\n      var useMax=false;\n      var useStateXVal=false;\n      var mightHaveSets=true;\n      var prop = 'State1_Max';\n      if(prop in data) {\n        useMax = true;\n      }\n      else {\n        prop = 'State1Value';\n        if(prop in data) {\n          useStateXVal = true;\n        }\n      }\n      \n      var currentState = 0;\n      var statVals = [];\n      for(;;) {\n        currentState++;\n        \n        var stateProp = 'State' + currentState;\n        if(!(stateProp in data)) {\n          break;\n        }\n\n        var stateId = data[stateProp];\n        if(stateId == -1) {\n          break;\n        }\n        \n        if(stateId == 107) {\n          // is this mp?\n        }\n        else {\n          \n          var currentData = { id: stateId };\n          \n          var prop;\n        \n          if(useMax) {\n            prop = 'State' + currentState + '_Max';\n            currentData.max = data[prop];\n          }\n          else if(useStateXVal) {\n            prop = 'State' + currentState + 'Value';\n            currentData.max = data[prop];\n          }\n          else {\n            prop = 'StateValue' + currentState;\n            currentData.max = Number(data[prop]);\n          }\n          \n          if(currentData.max > 0 || currentData.max < 0) {\n            if(mightHaveSets) {\n              prop = 'NeedSetNum' + currentState;\n              if(prop in data) {\n                if(data[prop] == 0) {\n                  break;\n                }\n                currentData.needSetNum = data[prop];\n              }\n              else {\n                mightHaveSets = false;\n              }\n            }\n          \n            statVals.push(currentData);\n          }\n        }\n      }\n      \n      return statVals;\n    },\n    \n    setupStat : function(stat, id) {\n      stat.id = Number(id);\n    },\n    \n    mergeStats : function(stats1, stats2) {\n      var statMap = {};\n      \n      var self = this;\n      function add(value) {\n        \n        var amount = Number(value.max);\n        if(self.stats[value.id] && 'pc' in self.stats[value.id]) {\n          amount = Math.floor(amount);\n        }\n        \n        if(value.id in statMap) {\n          statMap[value.id] += amount;\n        }\n        else {\n          statMap[value.id] = amount;\n        }\n      }\n      \n      angular.forEach(stats1, function(value, key) {\n        if(value) {\n          add(value);\n        }\n      });\n      \n      if(stats2) {\n        angular.forEach(stats2, function(value, key) {\n          if(value) {\n            add(value);\n          }\n        });\n      }\n      \n      var newStats = [];\n      \n      for(var key in statMap) {\n        var stat = { max : statMap[key], id: Number(key) };\n        newStats.push(stat);\n      }\n        \n      return newStats;\n    }\n  }\n}\n\n})();"],"sourceRoot":"/source/"}