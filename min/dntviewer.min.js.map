{"version":3,"sources":["simplerreader.js","dntreader.js","dntranslations.js"],"names":["SimplerReader","pFile","startPos","littleEndian","this","pos","file","DataView","readUint16","getUint16","readUint32","getUint32","readInt32","getInt32","readFloat32","floatVal","getFloat32","Math","round","readByte","getUint8","readString","len","String","fromCharCode","strings","Array","c","val","join","length","indexOf","isNaN","Number","skipUint16","skipUint32","skipInt32","skipFloat32","skipByte","skipString","DntReader","unzipBlob","blob","callback","zip","createReader","BlobReader","zipReader","getEntries","entries","getData","BlobWriter","data","close","onerror","message","console","error","columnNames","columnTypes","columnIndexes","numRows","numColumns","fileName","colsToLoad","processFile","arrayBuffer","start","Date","getTime","reader","readFuncs","skipFuncs","colReaders","colIsRead","colIndex","realNumCols","colName","substr","colType","r","id","end","time","log","getRow","index","convertData","d","item","getValue","loadDntFromServerFile","statusFunc","processFileFunc","failFunc","useFileName","toUpperCase","lastIndexOf","loadDntFromServerFileImpl","isLzJson","xhr","XMLHttpRequest","open","responseType","t","e","ontimeout","onload","status","blobv","response","fileReader","FileReader","target","result","readAsArrayBuffer","processLzFile","unZippedData","dntFileName","zipFileName","send","stringifiedData","LZString","decompressFromUTF16","dlData","JSON","parse","DnTranslations","unzipBlobToText","TextWriter","sizeLimit","translate","value","toString","values","split","results","v","stripped","replace","push","process","xmlFileAsString","complete","numItems","parser","DOMParser","xmlData","parseFromString","elements","getElementsByTagName","m","text","textContent","mid","getAttribute","stringify","sessionStorage","setItem","compressToUTF16","ex","stack","loadFromSession","savedData","getItem","loadDefaultFile","fail","localStorage","toLocaleString","baseFileName"],"mappings":"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","file":"dntviewer.min.js","sourcesContent":["function SimplerReader(pFile, startPos, littleEndian) {\r\n// module to track position while reading binary data\r\n'use strict';\r\n  \r\n  this.pos = startPos;\r\n  this.file = new DataView(pFile);\r\n  this.littleEndian = littleEndian;\r\n  \r\n  this.readUint16 = function() {\r\n    this.pos += 2;\r\n    return this.file.getUint16(this.pos-2, this.littleEndian);\r\n  }\r\n  \r\n  this.readUint32 = function() {\r\n    this.pos += 4;\r\n    return this.file.getUint32(this.pos-4, this.littleEndian);\r\n  }\r\n  \r\n  this.readInt32 = function() {\r\n    this.pos += 4;\r\n    return this.file.getInt32(this.pos-4, this.littleEndian);\r\n  }\r\n  \r\n  this.readFloat32 = function() {\r\n    this.pos += 4;\r\n    var floatVal = this.file.getFloat32(this.pos-4, this.littleEndian);\r\n    return Math.round(floatVal*100000)/100000;\r\n  }\r\n  \r\n  this.readByte = function() {\r\n    this.pos += 1;\r\n    return this.file.getUint8(this.pos-1, this.littleEndian);\r\n  }\r\n  \r\n  this.readString = function() {\r\n    var len = this.readUint16();\r\n    if(len === 0) {\r\n      return '';\r\n    }\r\n    else if(len === 1) {\r\n      return String.fromCharCode(this.readByte());\r\n    }\r\n    else {\r\n      \r\n      // var retVal = '';\r\n      var strings = new Array(len);\r\n      for(var c=0;c<len;++c) {\r\n        \r\n        strings[c] = String.fromCharCode(this.readByte());\r\n        // retVal += String.fromCharCode(this.readByte());\r\n      }\r\n      \r\n      var val = strings.join('');\r\n      if(val && val.length > 6 && val.indexOf('.') > 0 && !isNaN(val)) {\r\n        return Math.round(Number(val)*100000)/100000;\r\n      }\r\n\r\n      return val;\r\n    }\r\n  }\r\n  \r\n  this.skipUint16 = function() {\r\n    this.pos += 2;\r\n  }\r\n  \r\n  this.skipUint32 = function() {\r\n    this.pos += 4;\r\n  }\r\n  \r\n  this.skipInt32 = function() {\r\n    this.pos += 4;\r\n  }\r\n  \r\n  this.skipFloat32 = function() {\r\n    this.pos += 4;\r\n  }\r\n  \r\n  this.skipByte = function() {\r\n    this.pos += 1;\r\n  }\r\n  \r\n  this.skipString = function() {\r\n    var len = this.readUint16();\r\n    this.pos += len;\r\n  }\r\n}","function DntReader() {\r\n// module for to allow reading of dnt data from dnt files\r\n// right now this simply loads the whole file into the data property\r\n// data is an array of objects eg [{id: \"123\",NameParam: \"456\"}]\r\n'use strict';\r\n  \r\n  this.data = [];\r\n  this.columnNames = [];\r\n  this.columnTypes = [];\r\n  this.columnIndexes = [];\r\n  this.numRows = 0;\r\n  this.numColumns = 0;\r\n  this.fileName = \"\";\r\n  this.colsToLoad = null;\r\n  \r\n  // function to populate the object with the data in the dnt file\r\n  this.processFile = function(arrayBuffer, fileName) {\r\n    \r\n    var start = new Date().getTime();\r\n    \r\n    this.fileName = fileName;\r\n    \r\n    // not sure if littleEndian should always be true or when it would be false\r\n    var reader = new SimplerReader(arrayBuffer, 4, true);\r\n    \r\n    var readFuncs = [];\r\n    readFuncs[1] = function(reader) { return reader.readString() };\r\n    readFuncs[2] = function(reader) { return reader.readInt32() };\r\n    readFuncs[3] = function(reader) { return reader.readInt32() };\r\n    readFuncs[4] = function(reader) { return reader.readFloat32() };\r\n    readFuncs[5] = function(reader) { return reader.readFloat32() };\r\n    \r\n    var skipFuncs = [];\r\n    skipFuncs[1] = function(reader) { reader.skipString() };\r\n    skipFuncs[2] = function(reader) { reader.skipInt32() };\r\n    skipFuncs[3] = function(reader) { reader.skipInt32() };\r\n    skipFuncs[4] = function(reader) { reader.skipFloat32() };\r\n    skipFuncs[5] = function(reader) { reader.skipFloat32() };\r\n    \r\n    this.numColumns = reader.readUint16() + 1;\r\n    this.numRows = reader.readUint32();\r\n    \r\n    this.data = new Array(this.numRows);\r\n    this.columnNames = new Array(this.numColumns);\r\n    this.columnTypes = new Array(this.numColumns);\r\n    \r\n    this.columnNames[0] = 'id';\r\n    this.columnTypes[0] = 3;\r\n    var colReaders = [];\r\n    var colIsRead = [];\r\n    var colIndex = 1;\r\n    var realNumCols = 0;\r\n    \r\n    for(var c=1;c<this.numColumns;++c) {\r\n      var colName = reader.readString().substr(1);\r\n      var colType = reader.readByte();\r\n      \r\n      if(this.colsToLoad === null || this.colsToLoad[colName]) {\r\n        colIsRead[c] = true;\r\n        colReaders[c] = readFuncs[colType];\r\n\r\n        this.columnNames[colIndex] = colName;\r\n        this.columnTypes[colIndex] = colType;\r\n        colIndex++;\r\n      }\r\n      else {\r\n        colIsRead[c] = false;\r\n        colReaders[c] = skipFuncs[colType];\r\n      }\r\n    }\r\n    realNumCols = colIndex;\r\n    \r\n    for(var r=0;r<this.numRows;++r) {\r\n      \r\n      this.data[r] = new Array(realNumCols);\r\n      this.data[r][0] = reader.readUint32();\r\n      \r\n      colIndex = 1;\r\n      for(var c=1;c<this.numColumns;++c) {\r\n        if(colIsRead[c]) {\r\n          this.data[r][colIndex] = colReaders[c](reader);\r\n          colIndex++;\r\n        }\r\n        else {\r\n          colReaders[c](reader);\r\n        }\r\n      }\r\n    }\r\n    \r\n    this.numColumns = realNumCols;\r\n\r\n    this.columnIndexes = {'id': 0};\r\n    for(var c=1;c<this.numColumns;++c) {\r\n      this.columnIndexes[this.columnNames[c]] = c;\r\n    }\r\n\r\n    var end = new Date().getTime();\r\n    var time = end - start;\r\n    console.log('dnt process time: ' + time/1000 + 's for ' + fileName);\r\n  }\r\n  \r\n  this.getRow = function(index) {\r\n    return this.convertData(this.data[index]);\r\n  }\r\n  \r\n  this.convertData = function(d) {\r\n    var item = {id: d[0]};\r\n\r\n    for(var c=1;c<this.numColumns;++c) {\r\n      if(d[c] != null) {\r\n        item[this.columnNames[c]] = d[c];\r\n      }\r\n    }\r\n    \r\n    return item;\r\n  }\r\n  \r\n  this.getValue = function(index, colName) {\r\n    if(colName in this.columnIndexes) {\r\n      return this.data[index][this.columnIndexes[colName]];\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // function to load in dnt data from a hosted file\r\n  // if the file is not found it will try a zip with the same name\r\n  this.loadDntFromServerFile = function(fileName, statusFunc, processFileFunc, failFunc) {\r\n    var useFileName = fileName;\r\n    if(this.colsToLoad === null && fileName.toUpperCase().lastIndexOf(\".LZJSON\") != fileName.length-7) {\r\n      useFileName = fileName.substr(0,fileName.length-4) + '.lzjson';\r\n    }\r\n    this.loadDntFromServerFileImpl(useFileName, statusFunc, processFileFunc, failFunc);\r\n  }\r\n  \r\n  this.loadDntFromServerFileImpl = function(fileName, statusFunc, processFileFunc, failFunc) {\r\n    \r\n    // console.log(\"about to load\");\r\n    var isLzJson = (fileName.toUpperCase().lastIndexOf(\".LZJSON\") == fileName.length-7);\r\n    \r\n    var xhr = new XMLHttpRequest();\r\n    xhr.open('GET', fileName, true);\r\n    \r\n    if(isLzJson) {\r\n      xhr.responseType = 'text';\r\n    }\r\n    else {\r\n      xhr.responseType = 'blob';\r\n    }\r\n    \r\n    statusFunc('downloading dnt file ' + fileName);\r\n    var start = new Date().getTime();\r\n    \r\n    var t = this;\r\n    \r\n    xhr.onerror = function(e) {\r\n      console.log('what! error ', e);\r\n      failFunc('Cannot load file' + e);\r\n    }\r\n    \r\n    xhr.ontimeout = function(e) {\r\n      console.log('what! timeout ', e);\r\n      failFunc('Timeout loading file' + e);\r\n    }\r\n    \r\n    xhr.onload = function(e) {\r\n      // console.log(\"got status\");\r\n      \r\n      if (this.status === 200) {\r\n        // console.log(\"got 200 status\");\r\n        \r\n        var blobv = this.response;\r\n        if(fileName.toUpperCase().lastIndexOf(\".DNT\") === fileName.length-4) {\r\n          // console.log(\"dnt file\");\r\n          \r\n          var fileReader = new FileReader();\r\n          fileReader.onload = function(e) {\r\n            t.processFile(e.target.result, fileName);\r\n            \r\n            var end = new Date().getTime();\r\n            var time = end - start;\r\n            console.log('dnt time: ' + time/1000 + 's for ' + fileName);\r\n            processFileFunc();\r\n          };\r\n          fileReader.readAsArrayBuffer(blobv);\r\n        }\r\n        else if(isLzJson) {\r\n          t.processLzFile(blobv, fileName);\r\n          \r\n          var end = new Date().getTime();\r\n          var time = end - start;\r\n          console.log('lzjson time: ' + time/1000 + 's for ' + fileName);\r\n          processFileFunc();\r\n        }\r\n        else {\r\n          // console.log(\"zip maybe\");\r\n          statusFunc('unziping compressed dnt file');\r\n          \r\n          // console.log(blobv);\r\n          \r\n          unzipBlob(blobv, function(unZippedData) {\r\n            \r\n            // statusFunc('loading dnt');\r\n            //console.log(\"unzipped: \" + unZippedData.length + \" bytes\");\r\n            \r\n            var fileReader = new FileReader();\r\n            fileReader.onload = function(e) {\r\n              t.processFile(e.target.result, fileName);\r\n            \r\n              var end = new Date().getTime();\r\n              var time = end - start;\r\n              console.log('zip time: ' + time/1000 + 's for ' + fileName);\r\n              processFileFunc();\r\n            };\r\n            fileReader.readAsArrayBuffer(unZippedData);\r\n          });\r\n        }\r\n      }\r\n      else {\r\n        // if we get an error we can try to see if there is a zip version there\r\n        if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\r\n          console.log('trying dnt');\r\n          var dntFileName = fileName.substr(0,fileName.length-7) + '.dnt';\r\n          t.loadDntFromServerFileImpl(dntFileName, statusFunc, processFileFunc, failFunc);\r\n        }\r\n        else if(fileName.toUpperCase().lastIndexOf('.DNT') === fileName.length-4) {\r\n          console.log('trying zip');\r\n          var zipFileName = fileName.substr(0,fileName.length-4) + '.zip';\r\n          t.loadDntFromServerFileImpl(zipFileName, statusFunc, processFileFunc, failFunc);\r\n        }\r\n        else {\r\n          console.log('what! status ' + this.status + '??');\r\n          failFunc(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\r\n        }\r\n      }\r\n    };\r\n    \r\n    xhr.send();\r\n  }\r\n  \r\n  this.processLzFile = function(blobv, fileName) {\r\n    var stringifiedData = LZString.decompressFromUTF16(blobv);\r\n\r\n    var dlData = JSON.parse(stringifiedData);\r\n    \r\n    this.data = dlData.data;\r\n    this.fileName = fileName;\r\n    this.columnNames = dlData.columnNames;\r\n    this.columnTypes = dlData.columnTypes;\r\n    \r\n    this.numRows = this.data.length;\r\n    this.numColumns = dlData.columnNames.length;\r\n    \r\n    this.columnIndexes = {'id': 0};\r\n    for(var c=1;c<this.numColumns;++c) {\r\n      this.columnIndexes[this.columnNames[c]] = c;\r\n    }\r\n  }\r\n  \r\n  function unzipBlob(blob, callback) {\r\n    // use a zip.BlobReader object to read zipped data stored into blob variable\r\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\r\n      // get entries from the zip file\r\n      zipReader.getEntries(function(entries) {\r\n        // get data from the first file\r\n        entries[0].getData(new zip.BlobWriter(), function(data) {\r\n          // close the reader and calls callback function with uncompressed data as parameter\r\n          zipReader.close();\r\n          callback(data);\r\n        });\r\n      });\r\n    }, onerror);\r\n  }\r\n  \r\n  function onerror(message) {\r\n    console.error(message);\r\n  }\r\n}","function DnTranslations() {\r\n  // module used to load uistring.xml files\r\n\r\n  // the data\r\n  this.data = null;\r\n  this.sizeLimit = null;\r\n  \r\n  // function to lookup some string value by its id\r\n  // this will also work with values that have a number\r\n  // of mids enclosed in curly brackets\r\n  this.translate = function(value) {\r\n    if(this.data === null) {\r\n      return value;\r\n    }\r\n    var result = \"\";\r\n    \r\n    if(value === 0 || value === \"\" || value === null) {\r\n      result = value;\r\n    }\r\n    else if(value.toString().indexOf(',') > -1) {\r\n      var values = value.toString().split(',');\r\n      \r\n      var results = []\r\n      for(var v=0;v<values.length;++v) {\r\n        var stripped = values[v].replace(\"{\", \"\").replace(\"}\", \"\");\r\n        results.push(values[v].replace(stripped, this.translate(stripped)));\r\n      }\r\n      \r\n      result = results.join(',');\r\n    }\r\n    else {\r\n      result = this.data[value];\r\n      if(typeof result === 'undefined') {\r\n        if(typeof value === 'string') {\r\n          if(value.indexOf('{') == 0) {\r\n            var stripped = value.replace(\"{\", \"\").replace(\"}\", \"\");\r\n            result = value.replace(stripped, this.translate(stripped));\r\n          }\r\n          else {\r\n            result = value.toString();\r\n          }\r\n        }\r\n        else {\r\n          result = value;\r\n        }\r\n      }\r\n      else if(typeof value === 'string' && result.indexOf('#N/A') == 0) {\r\n        result = '';\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n  \r\n  // function to read in the xml data\r\n  // and store it as an array for fast access\r\n  // once loaded it tries to store the data in UIStrings session storage\r\n  this.process = function(xmlFileAsString, callback, complete) {\r\n    this.data = {}\r\n    var numItems = 0;\r\n    \r\n    // console.log(\"processing:\");\r\n    var parser = new DOMParser();\r\n    var xmlData = parser.parseFromString(xmlFileAsString,\"text/xml\");\r\n    var elements = xmlData.getElementsByTagName(\"message\");\r\n    \r\n    for(var m=0;m<elements.length;++m) {\r\n      var text = elements[m].textContent;\r\n      if(this.sizeLimit === null || text.length < this.sizeLimit) {\r\n        var mid = elements[m].getAttribute(\"mid\");\r\n        this.data[mid] = text;\r\n        numItems++;\r\n      }\r\n    }\r\n  \r\n    try {\r\n      var stringifiedData = JSON.stringify(this.data);\r\n      sessionStorage.setItem('UIStrings', LZString.compressToUTF16(stringifiedData));\r\n      callback('stored ui strings for later');\r\n    }\r\n    catch (ex) {\r\n      console.log('error setting strings ' + ex);\r\n      console.log(ex.stack);\r\n    }\r\n    \r\n    callback('loaded ' + numItems + ' translations');\r\n    complete();\r\n  }\r\n  \r\n  this.loadFromSession = function() {\r\n    try {\r\n      this.data = null;\r\n      \r\n      var savedData = sessionStorage.getItem('UIStrings'); \r\n      if(savedData === null) {\r\n        return false;\r\n      }\r\n      \r\n      var stringifiedData = LZString.decompressFromUTF16(savedData);\r\n      this.data = JSON.parse(stringifiedData);\r\n      console.log('got ui strings from local storage');\r\n      return true;\r\n    }\r\n    catch(ex) {\r\n      console.log('couldnt get ui strings ' + ex);\r\n      // no worries, just load the default\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // function to load xml file from url\r\n  // if the file is not found we look for a zip verison and then unzip it\r\n  // it tries to find the already loaded data in UIStrings session storage\r\n  // and uses this if it can\r\n  this.loadDefaultFile = function(fileName, callback, complete, fail) {\r\n    // console.log(\"about to load\");\r\n    \r\n    this.loadFromSession();\r\n    \r\n    if(this.data != null && typeof this.data === 'object') {\r\n      callback('using uistrings stored in local storage');\r\n      complete();\r\n    }\r\n    else if(fileName === null) {\r\n      callback('Translation location required');\r\n    }\r\n    else {\r\n      console.log('data still not set');\r\n      \r\n      localStorage.setItem('UIStrings_file', fileName);\r\n    \r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open('GET', fileName, true);\r\n      if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\r\n        xhr.responseType = 'blob';\r\n      }\r\n      else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\r\n        xhr.responseType = 'document';\r\n      }\r\n      else {\r\n        xhr.responseType = 'text';\r\n      }\r\n      \r\n      callback('downloading translation file ' + fileName);\r\n      \r\n      var t = this;\r\n      xhr.onerror = function(e) {\r\n        console.log('what! error ', e);\r\n        failFunc('Cannot load file' + e);\r\n      }\r\n      \r\n      xhr.ontimeout = function(e) {\r\n        console.log('what! timeout ', e);\r\n        failFunc('Timeout loading file' + e);\r\n      }\r\n      \r\n      xhr.onload = function(e) {\r\n        \r\n        if (this.status === 200) {\r\n          \r\n          callback('loading translations from ' + fileName);\r\n          var start = new Date().getTime();\r\n          \r\n          var blobv = this.response;\r\n          \r\n          console.log(\"reading zip\");\r\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\r\n            sessionStorage.setItem('UIStrings', blobv);\r\n            t.loadFromSession();\r\n            callback('using lzjson translations');\r\n            complete();\r\n            \r\n            var end = new Date().getTime();\r\n            var time = end - start;\r\n            console.log('translations process time: ' + time/1000 + 's');\r\n          }\r\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\r\n            unzipBlobToText(blobv, function(unZippedData) {\r\n              console.log('got entry data');\r\n              callback('loading xml');\r\n              console.log(\"unzipped: \" + unZippedData.length.toLocaleString() + \" bytes\");\r\n              t.process(unZippedData, callback, complete);\r\n            \r\n            var end = new Date().getTime();\r\n            var time = end - start;\r\n              console.log('translations process time: ' + time/1000 + 's');\r\n            });\r\n          }\r\n          else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\r\n            callback('using xml translations');\r\n            t.process(blobv, callback, complete);\r\n            \r\n            var end = new Date().getTime();\r\n            var time = end - start;\r\n            console.log('translations process time: ' + time/1000 + 's');\r\n          }\r\n          \r\n        }\r\n        else {\r\n          // if we get an error we can try to see if there is a zip version there\r\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\r\n            var baseFileName = fileName.substr(0,fileName.length-7);\r\n            t.loadDefaultFile(baseFileName + '.zip', callback, complete, fail);\r\n          }\r\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\r\n            var baseFileName = fileName.substr(0,fileName.length-4);\r\n            t.loadDefaultFile(baseFileName + '.xml', callback, complete, fail);\r\n          }\r\n          else {\r\n            console.log('what status' + this.status + ' ' + fileName);\r\n            fail(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\r\n          }\r\n        }\r\n      };\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  function unzipBlobToText(blob, callback) {\r\n    // use a zip.BlobReader object to read zipped data stored into blob variable\r\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\r\n      // get entries from the zip file\r\n      zipReader.getEntries(function(entries) {\r\n        // get data from the first file\r\n        entries[0].getData(new zip.TextWriter(\"text/plain\"), function(data) {\r\n          // close the reader and calls callback function with uncompressed data as parameter\r\n          zipReader.close();\r\n          callback(data);\r\n        });\r\n      });\r\n    }, onerror);\r\n  }\r\n  \r\n  function onerror(message) {\r\n    console.error(message);\r\n  }\r\n}\r\n"]}