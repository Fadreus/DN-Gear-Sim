{"version":3,"sources":["simplerreader.js","dntreader.js","dntranslations.js"],"names":["SimplerReader","pFile","startPos","littleEndian","this","pos","file","DataView","readUint16","getUint16","readUint32","getUint32","readInt32","getInt32","readFloat32","floatVal","getFloat32","Math","round","readByte","getUint8","readString","len","String","fromCharCode","strings","Array","c","val","join","length","indexOf","isNaN","Number","skipUint16","skipUint32","skipInt32","skipFloat32","skipByte","skipString","DntReader","unzipBlob","blob","callback","zip","createReader","BlobReader","zipReader","getEntries","entries","getData","BlobWriter","data","close","onerror","message","console","error","columnNames","columnTypes","columnIndexes","numRows","numColumns","fileName","colsToLoad","processFile","arrayBuffer","start","Date","getTime","reader","readFuncs","skipFuncs","colReaders","colIsRead","colIndex","realNumCols","colName","substr","colType","r","id","end","time","log","getRow","index","convertData","d","item","getValue","loadDntFromServerFile","statusFunc","processFileFunc","failFunc","useFileName","toUpperCase","lastIndexOf","loadDntFromServerFileImpl","isLzJson","xhr","XMLHttpRequest","open","responseType","t","onload","e","status","blobv","response","fileReader","FileReader","target","result","readAsArrayBuffer","processLzFile","unZippedData","dntFileName","zipFileName","send","stringifiedData","LZString","decompressFromUTF16","dlData","JSON","parse","DnTranslations","unzipBlobToText","TextWriter","sizeLimit","translate","value","toString","values","split","results","v","stripped","replace","push","process","xmlFileAsString","complete","numItems","parser","DOMParser","xmlData","parseFromString","elements","getElementsByTagName","m","text","textContent","mid","getAttribute","stringify","sessionStorage","setItem","compressToUTF16","ex","stack","loadFromSession","savedData","getItem","loadDefaultFile","fail","localStorage","toLocaleString","baseFileName"],"mappings":"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","file":"dntviewer.min.js","sourcesContent":["function SimplerReader(pFile, startPos, littleEndian) {\n// module to track position while reading binary data\n'use strict';\n  \n  this.pos = startPos;\n  this.file = new DataView(pFile);\n  this.littleEndian = littleEndian;\n  \n  this.readUint16 = function() {\n    this.pos += 2;\n    return this.file.getUint16(this.pos-2, this.littleEndian);\n  }\n  \n  this.readUint32 = function() {\n    this.pos += 4;\n    return this.file.getUint32(this.pos-4, this.littleEndian);\n  }\n  \n  this.readInt32 = function() {\n    this.pos += 4;\n    return this.file.getInt32(this.pos-4, this.littleEndian);\n  }\n  \n  this.readFloat32 = function() {\n    this.pos += 4;\n    var floatVal = this.file.getFloat32(this.pos-4, this.littleEndian);\n    return Math.round(floatVal*100000)/100000;\n  }\n  \n  this.readByte = function() {\n    this.pos += 1;\n    return this.file.getUint8(this.pos-1, this.littleEndian);\n  }\n  \n  this.readString = function() {\n    var len = this.readUint16();\n    if(len === 0) {\n      return '';\n    }\n    else if(len === 1) {\n      return String.fromCharCode(this.readByte());\n    }\n    else {\n      \n      // var retVal = '';\n      var strings = new Array(len);\n      for(var c=0;c<len;++c) {\n        \n        strings[c] = String.fromCharCode(this.readByte());\n        // retVal += String.fromCharCode(this.readByte());\n      }\n      \n      var val = strings.join('');\n      if(val && val.length > 6 && val.indexOf('.') > 0 && !isNaN(val)) {\n        return Math.round(Number(val)*100000)/100000;\n      }\n\n      return val;\n    }\n  }\n  \n  this.skipUint16 = function() {\n    this.pos += 2;\n  }\n  \n  this.skipUint32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipInt32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipFloat32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipByte = function() {\n    this.pos += 1;\n  }\n  \n  this.skipString = function() {\n    var len = this.readUint16();\n    this.pos += len;\n  }\n}","function DntReader() {\n// module for to allow reading of dnt data from dnt files\n// right now this simply loads the whole file into the data property\n// data is an array of objects eg [{id: \"123\",NameParam: \"456\"}]\n'use strict';\n  \n  this.data = [];\n  this.columnNames = [];\n  this.columnTypes = [];\n  this.columnIndexes = [];\n  this.numRows = 0;\n  this.numColumns = 0;\n  this.fileName = \"\";\n  this.colsToLoad = null;\n  \n  // function to populate the object with the data in the dnt file\n  this.processFile = function(arrayBuffer, fileName) {\n    \n    var start = new Date().getTime();\n    \n    this.fileName = fileName;\n    \n    // not sure if littleEndian should always be true or when it would be false\n    var reader = new SimplerReader(arrayBuffer, 4, true);\n    \n    var readFuncs = [];\n    readFuncs[1] = function(reader) { return reader.readString() };\n    readFuncs[2] = function(reader) { return reader.readInt32() };\n    readFuncs[3] = function(reader) { return reader.readInt32() };\n    readFuncs[4] = function(reader) { return reader.readFloat32() };\n    readFuncs[5] = function(reader) { return reader.readFloat32() };\n    \n    var skipFuncs = [];\n    skipFuncs[1] = function(reader) { reader.skipString() };\n    skipFuncs[2] = function(reader) { reader.skipInt32() };\n    skipFuncs[3] = function(reader) { reader.skipInt32() };\n    skipFuncs[4] = function(reader) { reader.skipFloat32() };\n    skipFuncs[5] = function(reader) { reader.skipFloat32() };\n    \n    this.numColumns = reader.readUint16() + 1;\n    this.numRows = reader.readUint32();\n    \n    this.data = new Array(this.numRows);\n    this.columnNames = new Array(this.numColumns);\n    this.columnTypes = new Array(this.numColumns);\n    \n    this.columnNames[0] = 'id';\n    this.columnTypes[0] = 3;\n    var colReaders = [];\n    var colIsRead = [];\n    var colIndex = 1;\n    var realNumCols = 0;\n    \n    for(var c=1;c<this.numColumns;++c) {\n      var colName = reader.readString().substr(1);\n      var colType = reader.readByte();\n      \n      if(this.colsToLoad === null || this.colsToLoad[colName]) {\n        colIsRead[c] = true;\n        colReaders[c] = readFuncs[colType];\n\n        this.columnNames[colIndex] = colName;\n        this.columnTypes[colIndex] = colType;\n        colIndex++;\n      }\n      else {\n        colIsRead[c] = false;\n        colReaders[c] = skipFuncs[colType];\n      }\n    }\n    realNumCols = colIndex;\n    \n    for(var r=0;r<this.numRows;++r) {\n      \n      this.data[r] = new Array(realNumCols);\n      this.data[r][0] = reader.readUint32();\n      \n      colIndex = 1;\n      for(var c=1;c<this.numColumns;++c) {\n        if(colIsRead[c]) {\n          this.data[r][colIndex] = colReaders[c](reader);\n          colIndex++;\n        }\n        else {\n          colReaders[c](reader);\n        }\n      }\n    }\n    \n    this.numColumns = realNumCols;\n\n    this.columnIndexes = {'id': 0};\n    for(var c=1;c<this.numColumns;++c) {\n      this.columnIndexes[this.columnNames[c]] = c;\n    }\n\n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('dnt process time: ' + time/1000 + 's for ' + fileName);\n  }\n  \n  this.getRow = function(index) {\n    return this.convertData(this.data[index]);\n  }\n  \n  this.convertData = function(d) {\n    var item = {id: d[0]};\n\n    for(var c=1;c<this.numColumns;++c) {\n      if(d[c] != null) {\n        item[this.columnNames[c]] = d[c];\n      }\n    }\n    \n    return item;\n  }\n  \n  this.getValue = function(index, colName) {\n    if(colName in this.columnIndexes) {\n      return this.data[index][this.columnIndexes[colName]];\n    }\n    else {\n      return null;\n    }\n  }\n  \n  // function to load in dnt data from a hosted file\n  // if the file is not found it will try a zip with the same name\n  this.loadDntFromServerFile = function(fileName, statusFunc, processFileFunc, failFunc) {\n    var useFileName = fileName;\n    if(this.colsToLoad === null && fileName.toUpperCase().lastIndexOf(\".LZJSON\") != fileName.length-7) {\n      useFileName = fileName.substr(0,fileName.length-4) + '.lzjson';\n    }\n    this.loadDntFromServerFileImpl(useFileName, statusFunc, processFileFunc, failFunc);\n  }\n  \n  this.loadDntFromServerFileImpl = function(fileName, statusFunc, processFileFunc, failFunc) {\n    \n    // console.log(\"about to load\");\n    var isLzJson = (fileName.toUpperCase().lastIndexOf(\".LZJSON\") == fileName.length-7);\n    \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', fileName, true);\n    \n    if(isLzJson) {\n      xhr.responseType = 'text';\n    }\n    else {\n      xhr.responseType = 'blob';\n    }\n    \n    statusFunc('downloading dnt file ' + fileName);\n    var start = new Date().getTime();\n    \n    var t = this;\n    \n    xhr.onload = function(e) {\n      // console.log(\"got status\");\n      \n      if (this.status === 200) {\n        // console.log(\"got 200 status\");\n        \n        var blobv = this.response;\n        if(fileName.toUpperCase().lastIndexOf(\".DNT\") === fileName.length-4) {\n          // console.log(\"dnt file\");\n          \n          var fileReader = new FileReader();\n          fileReader.onload = function(e) {\n            t.processFile(e.target.result, fileName);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('dnt time: ' + time/1000 + 's for ' + fileName);\n            processFileFunc();\n          };\n          fileReader.readAsArrayBuffer(blobv);\n        }\n        else if(isLzJson) {\n          t.processLzFile(blobv, fileName);\n          \n          var end = new Date().getTime();\n          var time = end - start;\n          console.log('lzjson time: ' + time/1000 + 's for ' + fileName);\n          processFileFunc();\n        }\n        else {\n          // console.log(\"zip maybe\");\n          statusFunc('unziping compressed dnt file');\n          \n          // console.log(blobv);\n          \n          unzipBlob(blobv, function(unZippedData) {\n            \n            // statusFunc('loading dnt');\n            //console.log(\"unzipped: \" + unZippedData.length + \" bytes\");\n            \n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n              t.processFile(e.target.result, fileName);\n            \n              var end = new Date().getTime();\n              var time = end - start;\n              console.log('zip time: ' + time/1000 + 's for ' + fileName);\n              processFileFunc();\n            };\n            fileReader.readAsArrayBuffer(unZippedData);\n          });\n        }\n      }\n      else {\n        // if we get an error we can try to see if there is a zip version there\n        if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n          console.log('trying dnt');\n          var dntFileName = fileName.substr(0,fileName.length-7) + '.dnt';\n          t.loadDntFromServerFileImpl(dntFileName, statusFunc, processFileFunc, failFunc);\n        }\n        else if(fileName.toUpperCase().lastIndexOf('.DNT') === fileName.length-4) {\n          console.log('trying zip');\n          var zipFileName = fileName.substr(0,fileName.length-4) + '.zip';\n          t.loadDntFromServerFileImpl(zipFileName, statusFunc, processFileFunc, failFunc);\n        }\n        else {\n          console.log('what! status ' + this.status + '??');\n          failFunc(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\n        }\n      }\n    };\n    \n    xhr.send();\n  }\n  \n  this.processLzFile = function(blobv, fileName) {\n    var stringifiedData = LZString.decompressFromUTF16(blobv);\n\n    var dlData = JSON.parse(stringifiedData);\n    \n    this.data = dlData.data;\n    this.fileName = fileName;\n    this.columnNames = dlData.columnNames;\n    this.columnTypes = dlData.columnTypes;\n    \n    this.numRows = this.data.length;\n    this.numColumns = dlData.columnNames.length;\n    \n    this.columnIndexes = {'id': 0};\n    for(var c=1;c<this.numColumns;++c) {\n      this.columnIndexes[this.columnNames[c]] = c;\n    }\n  }\n  \n  function unzipBlob(blob, callback) {\n    // use a zip.BlobReader object to read zipped data stored into blob variable\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\n      // get entries from the zip file\n      zipReader.getEntries(function(entries) {\n        // get data from the first file\n        entries[0].getData(new zip.BlobWriter(), function(data) {\n          // close the reader and calls callback function with uncompressed data as parameter\n          zipReader.close();\n          callback(data);\n        });\n      });\n    }, onerror);\n  }\n  \n  function onerror(message) {\n    console.error(message);\n  }\n}","function DnTranslations() {\n  // module used to load uistring.xml files\n\n  // the data\n  this.data = null;\n  this.sizeLimit = null;\n  \n  // function to lookup some string value by its id\n  // this will also work with values that have a number\n  // of mids enclosed in curly brackets\n  this.translate = function(value) {\n    if(this.data === null) {\n      return value;\n    }\n    var result = \"\";\n    \n    if(value === 0 || value === \"\" || value === null) {\n      result = value;\n    }\n    else if(value.toString().indexOf(',') > -1) {\n      var values = value.toString().split(',');\n      \n      var results = []\n      for(var v=0;v<values.length;++v) {\n        var stripped = values[v].replace(\"{\", \"\").replace(\"}\", \"\");\n        results.push(values[v].replace(stripped, this.translate(stripped)));\n      }\n      \n      result = results.join(',');\n    }\n    else {\n      result = this.data[value];\n      if(typeof result === 'undefined') {\n        if(typeof value === 'string') {\n          if(value.indexOf('{') == 0) {\n            var stripped = value.replace(\"{\", \"\").replace(\"}\", \"\");\n            result = value.replace(stripped, this.translate(stripped));\n          }\n          else {\n            result = value.toString();\n          }\n        }\n        else {\n          result = value;\n        }\n      }\n      else if(typeof value === 'string' && result.indexOf('#N/A') == 0) {\n        result = '';\n      }\n    }\n    \n    return result;\n  }\n  \n  // function to read in the xml data\n  // and store it as an array for fast access\n  // once loaded it tries to store the data in UIStrings session storage\n  this.process = function(xmlFileAsString, callback, complete) {\n    this.data = {}\n    var numItems = 0;\n    \n    // console.log(\"processing:\");\n    var parser = new DOMParser();\n    var xmlData = parser.parseFromString(xmlFileAsString,\"text/xml\");\n    var elements = xmlData.getElementsByTagName(\"message\");\n    \n    for(var m=0;m<elements.length;++m) {\n      var text = elements[m].textContent;\n      if(this.sizeLimit === null || text.length < this.sizeLimit) {\n        var mid = elements[m].getAttribute(\"mid\");\n        this.data[mid] = text;\n        numItems++;\n      }\n    }\n  \n    try {\n      var stringifiedData = JSON.stringify(this.data);\n      sessionStorage.setItem('UIStrings', LZString.compressToUTF16(stringifiedData));\n      callback('stored ui strings for later');\n    }\n    catch (ex) {\n      console.log('error setting strings ' + ex);\n      console.log(ex.stack);\n    }\n    \n    callback('loaded ' + numItems + ' translations');\n    complete();\n  }\n  \n  this.loadFromSession = function() {\n    try {\n      this.data = null;\n      \n      var savedData = sessionStorage.getItem('UIStrings'); \n      if(savedData === null) {\n        return false;\n      }\n      \n      var stringifiedData = LZString.decompressFromUTF16(savedData);\n      this.data = JSON.parse(stringifiedData);\n      console.log('got ui strings from local storage');\n      return true;\n    }\n    catch(ex) {\n      console.log('couldnt get ui strings ' + ex);\n      // no worries, just load the default\n      return false;\n    }\n  }\n  \n  // function to load xml file from url\n  // if the file is not found we look for a zip verison and then unzip it\n  // it tries to find the already loaded data in UIStrings session storage\n  // and uses this if it can\n  this.loadDefaultFile = function(fileName, callback, complete, fail) {\n    // console.log(\"about to load\");\n    \n    this.loadFromSession();\n    \n    if(this.data != null && typeof this.data === 'object') {\n      callback('using uistrings stored in local storage');\n      complete();\n    }\n    else if(fileName === null) {\n      callback('Translation location required');\n    }\n    else {\n      console.log('data still not set');\n      \n      localStorage.setItem('UIStrings_file', fileName);\n    \n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', fileName, true);\n      if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n        xhr.responseType = 'blob';\n      }\n      else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\n        xhr.responseType = 'document';\n      }\n      else {\n        xhr.responseType = 'text';\n      }\n      \n      callback('downloading translation file ' + fileName);\n      \n      var t = this;\n      \n      xhr.onload = function(e) {\n        \n        if (this.status === 200) {\n          \n          callback('loading translations from ' + fileName);\n          var start = new Date().getTime();\n          \n          var blobv = this.response;\n          \n          console.log(\"reading zip\");\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n            sessionStorage.setItem('UIStrings', blobv);\n            t.loadFromSession();\n            callback('using lzjson translations');\n            complete();\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('translations process time: ' + time/1000 + 's');\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n            unzipBlobToText(blobv, function(unZippedData) {\n              console.log('got entry data');\n              callback('loading xml');\n              console.log(\"unzipped: \" + unZippedData.length.toLocaleString() + \" bytes\");\n              t.process(unZippedData, callback, complete);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n              console.log('translations process time: ' + time/1000 + 's');\n            });\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\n            callback('using xml translations');\n            t.process(blobv, callback, complete);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('translations process time: ' + time/1000 + 's');\n          }\n          \n        }\n        else {\n          // if we get an error we can try to see if there is a zip version there\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n            var baseFileName = fileName.substr(0,fileName.length-7);\n            t.loadDefaultFile(baseFileName + '.zip', callback, complete, fail);\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n            var baseFileName = fileName.substr(0,fileName.length-4);\n            t.loadDefaultFile(baseFileName + '.xml', callback, complete, fail);\n          }\n          else {\n            console.log('what status' + this.status + ' ' + fileName);\n            fail(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\n          }\n        }\n      };\n      \n      xhr.send();\n    }\n  }\n\n  function unzipBlobToText(blob, callback) {\n    // use a zip.BlobReader object to read zipped data stored into blob variable\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\n      // get entries from the zip file\n      zipReader.getEntries(function(entries) {\n        // get data from the first file\n        entries[0].getData(new zip.TextWriter(\"text/plain\"), function(data) {\n          // close the reader and calls callback function with uncompressed data as parameter\n          zipReader.close();\n          callback(data);\n        });\n      });\n    }, onerror);\n  }\n  \n  function onerror(message) {\n    console.error(message);\n  }\n}\n"]}