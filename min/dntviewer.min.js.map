{"version":3,"sources":["simplerreader.js","dntreader.js","dntranslations.js"],"names":["SimplerReader","pFile","startPos","littleEndian","this","pos","file","DataView","readUint16","getUint16","readUint32","getUint32","readInt32","getInt32","readFloat32","getFloat32","round","floatVal","readByte","getUint8","readString","len","String","strings","Array","c","fromCharCode","val","join","isNaN","Math","Number","skipUint16","skipUint32","skipInt32","skipFloat32","skipByte","skipString","DntReader","fileName","zip","createReader","dlData","columnTypes","zipReader","getEntries","data","entries","getData","BlobWriter","callback","columnIndexes","onerror","console","error","message","columnNames","numRows","numColumns","processFile","arrayBuffer","Date","getTime","start","reader","readFuncs","skipFuncs","colIndex","substr","colsToLoad","colName","colReaders","colType","colIsRead","realNumCols","r","id","end","time","getRow","convertData","d","item","getValue","index","loadDntFromServerFile","statusFunc","processFileFunc","failFunc","useFileName","toUpperCase","lastIndexOf","length","loadDntFromServerFileImpl","isLzJson","xhr","XMLHttpRequest","open","responseType","t","e","log","status","blobv","response","FileReader","fileReader","onload","target","result","readAsArrayBuffer","processLzFile","unZippedData","send","stringifiedData","zipFileName","JSON","parse","decompressFromUTF16","DnTranslations","unzipBlobToText","blob","BlobReader","TextWriter","close","sizeLimit","translate","value","toString","indexOf","values","split","results","stripped","v","replace","process","xmlFileAsString","complete","numItems","xmlData","parser","elements","getElementsByTagName","text","textContent","m","mid","getAttribute","sessionStorage","stringify","LZString","setItem","compressToUTF16","ex","stack","loadFromSession","savedData","getItem","loadDefaultFile","fail","_typeof","localStorage","ontimeout","toLocaleString","baseFileName"],"mappings":"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","file":"dntviewer.min.js","sourcesContent":["function SimplerReader(pFile, startPos, littleEndian) {\n// module to track position while reading binary data\n'use strict';\n  \n  this.pos = startPos;\n  this.file = new DataView(pFile);\n  this.littleEndian = littleEndian;\n  \n  this.readUint16 = function() {\n    this.pos += 2;\n    return this.file.getUint16(this.pos-2, this.littleEndian);\n  }\n  \n  this.readUint32 = function() {\n    this.pos += 4;\n    return this.file.getUint32(this.pos-4, this.littleEndian);\n  }\n  \n  this.readInt32 = function() {\n    this.pos += 4;\n    return this.file.getInt32(this.pos-4, this.littleEndian);\n  }\n  \n  this.readFloat32 = function() {\n    this.pos += 4;\n    var floatVal = this.file.getFloat32(this.pos-4, this.littleEndian);\n    return Math.round(floatVal*100000)/100000;\n  }\n  \n  this.readByte = function() {\n    this.pos += 1;\n    return this.file.getUint8(this.pos-1, this.littleEndian);\n  }\n  \n  this.readString = function() {\n    var len = this.readUint16();\n    if(len === 0) {\n      return '';\n    }\n    else if(len === 1) {\n      return String.fromCharCode(this.readByte());\n    }\n    else {\n      \n      // var retVal = '';\n      var strings = new Array(len);\n      for(var c=0;c<len;++c) {\n        \n        strings[c] = String.fromCharCode(this.readByte());\n        // retVal += String.fromCharCode(this.readByte());\n      }\n      \n      var val = strings.join('');\n      if(val && val.length > 6 && val.indexOf('.') > 0 && !isNaN(val)) {\n        return Math.round(Number(val)*100000)/100000;\n      }\n\n      return val;\n    }\n  }\n  \n  this.skipUint16 = function() {\n    this.pos += 2;\n  }\n  \n  this.skipUint32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipInt32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipFloat32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipByte = function() {\n    this.pos += 1;\n  }\n  \n  this.skipString = function() {\n    var len = this.readUint16();\n    this.pos += len;\n  }\n}","function DntReader() {\n// module for to allow reading of dnt data from dnt files\n// right now this simply loads the whole file into the data property\n// data is an array of objects eg [{id: \"123\",NameParam: \"456\"}]\n'use strict';\n  \n  this.data = [];\n  this.columnNames = [];\n  this.columnTypes = [];\n  this.columnIndexes = [];\n  this.numRows = 0;\n  this.numColumns = 0;\n  this.fileName = \"\";\n  this.colsToLoad = null;\n  \n  // function to populate the object with the data in the dnt file\n  this.processFile = function(arrayBuffer, fileName) {\n    \n    var start = new Date().getTime();\n    \n    this.fileName = fileName;\n    \n    // not sure if littleEndian should always be true or when it would be false\n    var reader = new SimplerReader(arrayBuffer, 4, true);\n    \n    var readFuncs = [];\n    readFuncs[1] = function(reader) { return reader.readString() };\n    readFuncs[2] = function(reader) { return reader.readInt32() };\n    readFuncs[3] = function(reader) { return reader.readInt32() };\n    readFuncs[4] = function(reader) { return reader.readFloat32() };\n    readFuncs[5] = function(reader) { return reader.readFloat32() };\n    \n    var skipFuncs = [];\n    skipFuncs[1] = function(reader) { reader.skipString() };\n    skipFuncs[2] = function(reader) { reader.skipInt32() };\n    skipFuncs[3] = function(reader) { reader.skipInt32() };\n    skipFuncs[4] = function(reader) { reader.skipFloat32() };\n    skipFuncs[5] = function(reader) { reader.skipFloat32() };\n    \n    this.numColumns = reader.readUint16() + 1;\n    this.numRows = reader.readUint32();\n    \n    this.data = new Array(this.numRows);\n    this.columnNames = new Array(this.numColumns);\n    this.columnTypes = new Array(this.numColumns);\n    \n    this.columnNames[0] = 'id';\n    this.columnTypes[0] = 3;\n    var colReaders = [];\n    var colIsRead = [];\n    var colIndex = 1;\n    var realNumCols = 0;\n    \n    for(var c=1;c<this.numColumns;++c) {\n      var colName = reader.readString().substr(1);\n      var colType = reader.readByte();\n      \n      if(this.colsToLoad === null || this.colsToLoad[colName]) {\n        colIsRead[c] = true;\n        colReaders[c] = readFuncs[colType];\n\n        this.columnNames[colIndex] = colName;\n        this.columnTypes[colIndex] = colType;\n        colIndex++;\n      }\n      else {\n        colIsRead[c] = false;\n        colReaders[c] = skipFuncs[colType];\n      }\n    }\n    realNumCols = colIndex;\n    \n    for(var r=0;r<this.numRows;++r) {\n      \n      this.data[r] = new Array(realNumCols);\n      this.data[r][0] = reader.readUint32();\n      \n      colIndex = 1;\n      for(var c=1;c<this.numColumns;++c) {\n        if(colIsRead[c]) {\n          this.data[r][colIndex] = colReaders[c](reader);\n          colIndex++;\n        }\n        else {\n          colReaders[c](reader);\n        }\n      }\n    }\n    \n    this.numColumns = realNumCols;\n\n    this.columnIndexes = {'id': 0};\n    for(var c=1;c<this.numColumns;++c) {\n      this.columnIndexes[this.columnNames[c]] = c;\n    }\n\n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('dnt process time: ' + time/1000 + 's for ' + fileName);\n  }\n  \n  this.getRow = function(index) {\n    return this.convertData(this.data[index]);\n  }\n  \n  this.convertData = function(d) {\n    var item = {id: d[0]};\n\n    for(var c=1;c<this.numColumns;++c) {\n      if(d[c] != null) {\n        item[this.columnNames[c]] = d[c];\n      }\n    }\n    \n    return item;\n  }\n  \n  this.getValue = function(index, colName) {\n    if(colName in this.columnIndexes) {\n      return this.data[index][this.columnIndexes[colName]];\n    }\n    else {\n      return null;\n    }\n  }\n  \n  // function to load in dnt data from a hosted file\n  // if the file is not found it will try a zip with the same name\n  this.loadDntFromServerFile = function(fileName, statusFunc, processFileFunc, failFunc) {\n    var useFileName = fileName;\n    if(this.colsToLoad === null && fileName.toUpperCase().lastIndexOf(\".LZJSON\") != fileName.length-7) {\n      useFileName = fileName.substr(0,fileName.length-4) + '.lzjson';\n    }\n    this.loadDntFromServerFileImpl(useFileName, statusFunc, processFileFunc, failFunc);\n  }\n  \n  this.loadDntFromServerFileImpl = function(fileName, statusFunc, processFileFunc, failFunc) {\n    \n    // console.log(\"about to load\");\n    var isLzJson = (fileName.toUpperCase().lastIndexOf(\".LZJSON\") == fileName.length-7);\n    \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', fileName, true);\n    \n    if(isLzJson) {\n      xhr.responseType = 'text';\n    }\n    else {\n      xhr.responseType = 'blob';\n    }\n    \n    statusFunc('downloading dnt file ' + fileName);\n    var start = new Date().getTime();\n    \n    var t = this;\n    \n    xhr.onerror = function(e) {\n      console.log('what! error ', e);\n      failFunc('Cannot load file' + e);\n    }\n    \n    xhr.ontimeout = function(e) {\n      console.log('what! timeout ', e);\n      failFunc('Timeout loading file' + e);\n    }\n    \n    xhr.onload = function(e) {\n      // console.log(\"got status\");\n      \n      if (this.status === 200) {\n        // console.log(\"got 200 status\");\n        \n        var blobv = this.response;\n        if(fileName.toUpperCase().lastIndexOf(\".DNT\") === fileName.length-4) {\n          // console.log(\"dnt file\");\n          \n          var fileReader = new FileReader();\n          fileReader.onload = function(e) {\n            t.processFile(e.target.result, fileName);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('dnt time: ' + time/1000 + 's for ' + fileName);\n            processFileFunc();\n          };\n          fileReader.readAsArrayBuffer(blobv);\n        }\n        else if(isLzJson) {\n          t.processLzFile(blobv, fileName);\n          \n          var end = new Date().getTime();\n          var time = end - start;\n          console.log('lzjson time: ' + time/1000 + 's for ' + fileName);\n          processFileFunc();\n        }\n        else {\n          // console.log(\"zip maybe\");\n          statusFunc('unziping compressed dnt file');\n          \n          // console.log(blobv);\n          \n          unzipBlob(blobv, function(unZippedData) {\n            \n            // statusFunc('loading dnt');\n            //console.log(\"unzipped: \" + unZippedData.length + \" bytes\");\n            \n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n              t.processFile(e.target.result, fileName);\n            \n              var end = new Date().getTime();\n              var time = end - start;\n              console.log('zip time: ' + time/1000 + 's for ' + fileName);\n              processFileFunc();\n            };\n            fileReader.readAsArrayBuffer(unZippedData);\n          });\n        }\n      }\n      else {\n        // if we get an error we can try to see if there is a zip version there\n        if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n          console.log('trying dnt');\n          var dntFileName = fileName.substr(0,fileName.length-7) + '.dnt';\n          t.loadDntFromServerFileImpl(dntFileName, statusFunc, processFileFunc, failFunc);\n        }\n        else if(fileName.toUpperCase().lastIndexOf('.DNT') === fileName.length-4) {\n          console.log('trying zip');\n          var zipFileName = fileName.substr(0,fileName.length-4) + '.zip';\n          t.loadDntFromServerFileImpl(zipFileName, statusFunc, processFileFunc, failFunc);\n        }\n        else {\n          console.log('what! status ' + this.status + '??');\n          failFunc(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\n        }\n      }\n    };\n    \n    xhr.send();\n  }\n  \n  this.processLzFile = function(blobv, fileName) {\n    var stringifiedData = LZString.decompressFromUTF16(blobv);\n\n    var dlData = JSON.parse(stringifiedData);\n    \n    this.data = dlData.data;\n    this.fileName = fileName;\n    this.columnNames = dlData.columnNames;\n    this.columnTypes = dlData.columnTypes;\n    \n    this.numRows = this.data.length;\n    this.numColumns = dlData.columnNames.length;\n    \n    this.columnIndexes = {'id': 0};\n    for(var c=1;c<this.numColumns;++c) {\n      this.columnIndexes[this.columnNames[c]] = c;\n    }\n  }\n  \n  function unzipBlob(blob, callback) {\n    // use a zip.BlobReader object to read zipped data stored into blob variable\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\n      // get entries from the zip file\n      zipReader.getEntries(function(entries) {\n        // get data from the first file\n        entries[0].getData(new zip.BlobWriter(), function(data) {\n          // close the reader and calls callback function with uncompressed data as parameter\n          zipReader.close();\n          callback(data);\n        });\n      });\n    }, onerror);\n  }\n  \n  function onerror(message) {\n    console.error(message);\n  }\n}","function DnTranslations() {\n  // module used to load uistring.xml files\n\n  // the data\n  this.data = null;\n  this.sizeLimit = null;\n  \n  // function to lookup some string value by its id\n  // this will also work with values that have a number\n  // of mids enclosed in curly brackets\n  this.translate = function(value) {\n    if(this.data === null) {\n      return value;\n    }\n    var result = \"\";\n    \n    if(value === 0 || value === \"\" || value === null) {\n      result = value;\n    }\n    else if(value.toString().indexOf(',') > -1) {\n      var values = value.toString().split(',');\n      \n      var results = []\n      for(var v=0;v<values.length;++v) {\n        var stripped = values[v].replace(\"{\", \"\").replace(\"}\", \"\");\n        results.push(values[v].replace(stripped, this.translate(stripped)));\n      }\n      \n      result = results.join(',');\n    }\n    else {\n      result = this.data[value];\n      if(typeof result === 'undefined') {\n        if(typeof value === 'string') {\n          if(value.indexOf('{') == 0) {\n            var stripped = value.replace(\"{\", \"\").replace(\"}\", \"\");\n            result = value.replace(stripped, this.translate(stripped));\n          }\n          else {\n            result = value.toString();\n          }\n        }\n        else {\n          result = value;\n        }\n      }\n      else if(typeof value === 'string' && result.indexOf('#N/A') == 0) {\n        result = '';\n      }\n    }\n    \n    return result;\n  }\n  \n  // function to read in the xml data\n  // and store it as an array for fast access\n  // once loaded it tries to store the data in UIStrings session storage\n  this.process = function(xmlFileAsString, callback, complete) {\n    this.data = {}\n    var numItems = 0;\n    \n    // console.log(\"processing:\");\n    var parser = new DOMParser();\n    var xmlData = parser.parseFromString(xmlFileAsString,\"text/xml\");\n    var elements = xmlData.getElementsByTagName(\"message\");\n    \n    for(var m=0;m<elements.length;++m) {\n      var text = elements[m].textContent;\n      if(this.sizeLimit === null || text.length < this.sizeLimit) {\n        var mid = elements[m].getAttribute(\"mid\");\n        this.data[mid] = text;\n        numItems++;\n      }\n    }\n  \n    try {\n      var stringifiedData = JSON.stringify(this.data);\n      sessionStorage.setItem('UIStrings', LZString.compressToUTF16(stringifiedData));\n      callback('stored ui strings for later');\n    }\n    catch (ex) {\n      console.log('error setting strings ' + ex);\n      console.log(ex.stack);\n    }\n    \n    callback('loaded ' + numItems + ' translations');\n    complete();\n  }\n  \n  this.loadFromSession = function() {\n    try {\n      this.data = null;\n      \n      var savedData = sessionStorage.getItem('UIStrings'); \n      if(savedData === null) {\n        return false;\n      }\n      \n      var stringifiedData = LZString.decompressFromUTF16(savedData);\n      this.data = JSON.parse(stringifiedData);\n      console.log('got ui strings from local storage');\n      return true;\n    }\n    catch(ex) {\n      console.log('couldnt get ui strings ' + ex);\n      // no worries, just load the default\n      return false;\n    }\n  }\n  \n  // function to load xml file from url\n  // if the file is not found we look for a zip verison and then unzip it\n  // it tries to find the already loaded data in UIStrings session storage\n  // and uses this if it can\n  this.loadDefaultFile = function(fileName, callback, complete, fail) {\n    // console.log(\"about to load\");\n    \n    this.loadFromSession();\n    \n    if(this.data != null && typeof this.data === 'object') {\n      callback('using uistrings stored in local storage');\n      complete();\n    }\n    else if(fileName === null) {\n      callback('Translation location required');\n    }\n    else {\n      console.log('data still not set');\n      \n      localStorage.setItem('UIStrings_file', fileName);\n    \n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', fileName, true);\n      if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n        xhr.responseType = 'blob';\n      }\n      else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\n        xhr.responseType = 'document';\n      }\n      else {\n        xhr.responseType = 'text';\n      }\n      \n      callback('downloading translation file ' + fileName);\n      \n      var t = this;\n      xhr.onerror = function(e) {\n        console.log('what! error ', e);\n        failFunc('Cannot load file' + e);\n      }\n      \n      xhr.ontimeout = function(e) {\n        console.log('what! timeout ', e);\n        failFunc('Timeout loading file' + e);\n      }\n      \n      xhr.onload = function(e) {\n        \n        if (this.status === 200) {\n          \n          callback('loading translations from ' + fileName);\n          var start = new Date().getTime();\n          \n          var blobv = this.response;\n          \n          console.log(\"reading zip\");\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n            sessionStorage.setItem('UIStrings', blobv);\n            t.loadFromSession();\n            callback('using lzjson translations');\n            complete();\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('translations process time: ' + time/1000 + 's');\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n            unzipBlobToText(blobv, function(unZippedData) {\n              console.log('got entry data');\n              callback('loading xml');\n              console.log(\"unzipped: \" + unZippedData.length.toLocaleString() + \" bytes\");\n              t.process(unZippedData, callback, complete);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n              console.log('translations process time: ' + time/1000 + 's');\n            });\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\n            callback('using xml translations');\n            t.process(blobv, callback, complete);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('translations process time: ' + time/1000 + 's');\n          }\n          \n        }\n        else {\n          // if we get an error we can try to see if there is a zip version there\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n            var baseFileName = fileName.substr(0,fileName.length-7);\n            t.loadDefaultFile(baseFileName + '.zip', callback, complete, fail);\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n            var baseFileName = fileName.substr(0,fileName.length-4);\n            t.loadDefaultFile(baseFileName + '.xml', callback, complete, fail);\n          }\n          else {\n            console.log('what status' + this.status + ' ' + fileName);\n            fail(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\n          }\n        }\n      };\n      xhr.send();\n    }\n  }\n\n  function unzipBlobToText(blob, callback) {\n    // use a zip.BlobReader object to read zipped data stored into blob variable\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\n      // get entries from the zip file\n      zipReader.getEntries(function(entries) {\n        // get data from the first file\n        entries[0].getData(new zip.TextWriter(\"text/plain\"), function(data) {\n          // close the reader and calls callback function with uncompressed data as parameter\n          zipReader.close();\n          callback(data);\n        });\n      });\n    }, onerror);\n  }\n  \n  function onerror(message) {\n    console.error(message);\n  }\n}\n"]}