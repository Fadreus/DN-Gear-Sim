{"version":3,"sources":["simplerreader.js","dntreader.js","dntranslations.js"],"names":["SimplerReader","pFile","startPos","littleEndian","this","pos","file","DataView","readUint16","getUint16","readUint32","getUint32","readInt32","getInt32","readFloat32","floatVal","getFloat32","Math","round","readByte","getUint8","readString","len","String","fromCharCode","strings","Array","c","val","join","length","indexOf","isNaN","Number","skipUint16","skipUint32","skipInt32","skipFloat32","skipByte","skipString","DntReader","unzipBlob","blob","callback","zip","createReader","BlobReader","zipReader","getEntries","entries","getData","BlobWriter","data","close","onerror","message","console","error","columnNames","columnTypes","columnIndexes","numRows","numColumns","fileName","colsToLoad","processFile","arrayBuffer","start","Date","getTime","reader","readFuncs","skipFuncs","colReaders","colIsRead","colIndex","realNumCols","colName","substr","colType","r","id","end","time","log","getRow","index","convertData","d","item","getValue","loadDntFromServerFile","statusFunc","processFileFunc","failFunc","useFileName","toUpperCase","lastIndexOf","loadDntFromServerFileImpl","isLzJson","isJson","xhr","XMLHttpRequest","open","responseType","t","e","ontimeout","onload","status","blobv","response","fileReader","FileReader","target","result","readAsArrayBuffer","processJsonFile","processLzFile","unZippedData","dntFileName","zipFileName","send","json","dlData","JSON","parse","stringifiedData","LZString","decompressFromUTF16","DnTranslations","unzipBlobToText","TextWriter","sizeLimit","translate","value","toString","values","split","results","v","stripped","replace","push","process","xmlFileAsString","complete","numItems","parser","DOMParser","xmlData","parseFromString","elements","getElementsByTagName","m","text","textContent","mid","getAttribute","stringify","sessionStorage","setItem","compressToUTF16","ex","stack","loadFromSession","savedData","getItem","loadDefaultFile","fail","localStorage","toLocaleString","baseFileName"],"mappings":"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","file":"dntviewer.min.js","sourcesContent":["function SimplerReader(pFile, startPos, littleEndian) {\n// module to track position while reading binary data\n'use strict';\n  \n  this.pos = startPos;\n  this.file = new DataView(pFile);\n  this.littleEndian = littleEndian;\n  \n  this.readUint16 = function() {\n    this.pos += 2;\n    return this.file.getUint16(this.pos-2, this.littleEndian);\n  }\n  \n  this.readUint32 = function() {\n    this.pos += 4;\n    return this.file.getUint32(this.pos-4, this.littleEndian);\n  }\n  \n  this.readInt32 = function() {\n    this.pos += 4;\n    return this.file.getInt32(this.pos-4, this.littleEndian);\n  }\n  \n  this.readFloat32 = function() {\n    this.pos += 4;\n    var floatVal = this.file.getFloat32(this.pos-4, this.littleEndian);\n    return Math.round(floatVal*100000)/100000;\n  }\n  \n  this.readByte = function() {\n    this.pos += 1;\n    return this.file.getUint8(this.pos-1, this.littleEndian);\n  }\n  \n  this.readString = function() {\n    var len = this.readUint16();\n    if(len === 0) {\n      return '';\n    }\n    else if(len === 1) {\n      return String.fromCharCode(this.readByte());\n    }\n    else {\n      \n      // var retVal = '';\n      var strings = new Array(len);\n      for(var c=0;c<len;++c) {\n        \n        strings[c] = String.fromCharCode(this.readByte());\n        // retVal += String.fromCharCode(this.readByte());\n      }\n      \n      var val = strings.join('');\n      if(val && val.length > 6 && val.indexOf('.') > 0 && !isNaN(val)) {\n        return Math.round(Number(val)*100000)/100000;\n      }\n\n      return val;\n    }\n  }\n  \n  this.skipUint16 = function() {\n    this.pos += 2;\n  }\n  \n  this.skipUint32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipInt32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipFloat32 = function() {\n    this.pos += 4;\n  }\n  \n  this.skipByte = function() {\n    this.pos += 1;\n  }\n  \n  this.skipString = function() {\n    var len = this.readUint16();\n    this.pos += len;\n  }\n}","function DntReader() {\n// module for to allow reading of dnt data from dnt files\n// right now this simply loads the whole file into the data property\n// data is an array of objects eg [{id: \"123\",NameParam: \"456\"}]\n'use strict';\n  \n  this.data = [];\n  this.columnNames = [];\n  this.columnTypes = [];\n  this.columnIndexes = [];\n  this.numRows = 0;\n  this.numColumns = 0;\n  this.fileName = \"\";\n  this.colsToLoad = null;\n  \n  // function to populate the object with the data in the dnt file\n  this.processFile = function(arrayBuffer, fileName) {\n    \n    var start = new Date().getTime();\n    \n    this.fileName = fileName;\n    \n    // not sure if littleEndian should always be true or when it would be false\n    var reader = new SimplerReader(arrayBuffer, 4, true);\n    \n    var readFuncs = [];\n    readFuncs[1] = function(reader) { return reader.readString() };\n    readFuncs[2] = function(reader) { return reader.readInt32() };\n    readFuncs[3] = function(reader) { return reader.readInt32() };\n    readFuncs[4] = function(reader) { return reader.readFloat32() };\n    readFuncs[5] = function(reader) { return reader.readFloat32() };\n    \n    var skipFuncs = [];\n    skipFuncs[1] = function(reader) { reader.skipString() };\n    skipFuncs[2] = function(reader) { reader.skipInt32() };\n    skipFuncs[3] = function(reader) { reader.skipInt32() };\n    skipFuncs[4] = function(reader) { reader.skipFloat32() };\n    skipFuncs[5] = function(reader) { reader.skipFloat32() };\n    \n    this.numColumns = reader.readUint16() + 1;\n    this.numRows = reader.readUint32();\n    \n    this.data = new Array(this.numRows);\n    this.columnNames = new Array(this.numColumns);\n    this.columnTypes = new Array(this.numColumns);\n    \n    this.columnNames[0] = 'id';\n    this.columnTypes[0] = 3;\n    var colReaders = [];\n    var colIsRead = [];\n    var colIndex = 1;\n    var realNumCols = 0;\n    \n    for(var c=1;c<this.numColumns;++c) {\n      var colName = reader.readString().substr(1);\n      var colType = reader.readByte();\n      \n      if(this.colsToLoad === null || this.colsToLoad[colName]) {\n        colIsRead[c] = true;\n        colReaders[c] = readFuncs[colType];\n\n        this.columnNames[colIndex] = colName;\n        this.columnTypes[colIndex] = colType;\n        colIndex++;\n      }\n      else {\n        colIsRead[c] = false;\n        colReaders[c] = skipFuncs[colType];\n      }\n    }\n    realNumCols = colIndex;\n    \n    for(var r=0;r<this.numRows;++r) {\n      \n      this.data[r] = new Array(realNumCols);\n      this.data[r][0] = reader.readUint32();\n      \n      colIndex = 1;\n      for(var c=1;c<this.numColumns;++c) {\n        if(colIsRead[c]) {\n          this.data[r][colIndex] = colReaders[c](reader);\n          colIndex++;\n        }\n        else {\n          colReaders[c](reader);\n        }\n      }\n    }\n    \n    this.numColumns = realNumCols;\n\n    this.columnIndexes = {'id': 0};\n    for(var c=1;c<this.numColumns;++c) {\n      this.columnIndexes[this.columnNames[c]] = c;\n    }\n\n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('dnt process time: ' + time/1000 + 's for ' + fileName);\n  }\n  \n  this.getRow = function(index) {\n    return this.convertData(this.data[index]);\n  }\n  \n  this.convertData = function(d) {\n    var item = {id: d[0]};\n\n    for(var c=1;c<this.numColumns;++c) {\n      if(d[c] != null) {\n        item[this.columnNames[c]] = d[c];\n      }\n    }\n    \n    return item;\n  }\n  \n  this.getValue = function(index, colName) {\n    if(colName in this.columnIndexes) {\n      return this.data[index][this.columnIndexes[colName]];\n    }\n    else {\n      return null;\n    }\n  }\n  \n  // function to load in dnt data from a hosted file\n  // if the file is not found it will try a zip with the same name\n  this.loadDntFromServerFile = function(fileName, statusFunc, processFileFunc, failFunc) {\n    var useFileName = fileName;\n    if(this.colsToLoad === null && fileName.toUpperCase().lastIndexOf(\".LZJSON\") != fileName.length-7 && fileName.toUpperCase().lastIndexOf(\".JSON\") != fileName.length-5) {\n      useFileName = fileName.substr(0,fileName.length-4) + '.lzjson';\n    }\n    this.loadDntFromServerFileImpl(useFileName, statusFunc, processFileFunc, failFunc);\n  }\n  \n  this.loadDntFromServerFileImpl = function(fileName, statusFunc, processFileFunc, failFunc) {\n    \n    // console.log(\"about to load\");\n    var isLzJson = (fileName.toUpperCase().lastIndexOf(\".LZJSON\") == fileName.length-7);\n    var isJson = (fileName.toUpperCase().lastIndexOf(\".JSON\") == fileName.length-5);\n    \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', fileName, true);\n    \n    if(isLzJson || isJson) {\n      xhr.responseType = 'text';\n    }\n    else {\n      xhr.responseType = 'blob';\n    }\n    \n    statusFunc('downloading dnt file ' + fileName);\n    var start = new Date().getTime();\n    \n    var t = this;\n    \n    xhr.onerror = function(e) {\n      console.log('what! error ', e);\n      if(failFunc) {\n        failFunc('Cannot load file' + e);\n      }\n    }\n    \n    xhr.ontimeout = function(e) {\n      console.log('what! timeout ', e);\n      if(failFunc) {\n        failFunc('Timeout loading file' + e);\n      }\n    }\n    \n    xhr.onload = function(e) {\n      // console.log(\"got status\");\n      \n      if (this.status === 200) {\n        // console.log(\"got 200 status\");\n        \n        var blobv = this.response;\n        if(fileName.toUpperCase().lastIndexOf(\".DNT\") === fileName.length-4) {\n          // console.log(\"dnt file\");\n          \n          var fileReader = new FileReader();\n          fileReader.onload = function(e) {\n            t.processFile(e.target.result, fileName);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('dnt time: ' + time/1000 + 's for ' + fileName);\n            processFileFunc();\n          };\n          fileReader.readAsArrayBuffer(blobv);\n        }\n        else if(isJson) {\n          t.processJsonFile(blobv, fileName);\n          \n          var end = new Date().getTime();\n          var time = end - start;\n          console.log('json time: ' + time/1000 + 's for ' + fileName);\n          processFileFunc();\n        }\n        else if(isLzJson) {\n          t.processLzFile(blobv, fileName);\n          \n          var end = new Date().getTime();\n          var time = end - start;\n          console.log('lzjson time: ' + time/1000 + 's for ' + fileName);\n          processFileFunc();\n        }\n        else {\n          // console.log(\"zip maybe\");\n          statusFunc('unziping compressed dnt file');\n          \n          // console.log(blobv);\n          \n          unzipBlob(blobv, function(unZippedData) {\n            \n            // statusFunc('loading dnt');\n            //console.log(\"unzipped: \" + unZippedData.length + \" bytes\");\n            \n            var fileReader = new FileReader();\n            fileReader.onload = function(e) {\n              t.processFile(e.target.result, fileName);\n            \n              var end = new Date().getTime();\n              var time = end - start;\n              console.log('zip time: ' + time/1000 + 's for ' + fileName);\n              processFileFunc();\n            };\n            fileReader.readAsArrayBuffer(unZippedData);\n          });\n        }\n      }\n      else {\n        // if we get an error we can try to see if there is a zip version there\n        if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n          console.log('trying dnt');\n          var dntFileName = fileName.substr(0,fileName.length-7) + '.dnt';\n          t.loadDntFromServerFileImpl(dntFileName, statusFunc, processFileFunc, failFunc);\n        }\n        else if(fileName.toUpperCase().lastIndexOf('.DNT') === fileName.length-4) {\n          console.log('trying json');\n          var zipFileName = fileName.substr(0,fileName.length-4) + '.json';\n          t.loadDntFromServerFileImpl(zipFileName, statusFunc, processFileFunc, failFunc);\n        }\n        else {\n          console.log('what! status ' + this.status + '??');\n          if(failFunc) {\n            failFunc(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\n          }\n        }\n      }\n    };\n    \n    xhr.send();\n  }\n  \n  this.processJsonFile = function(json, fileName) {\n    var dlData = JSON.parse(json);\n    \n    this.data = dlData.data;\n    this.fileName = fileName;\n    this.columnNames = dlData.columnNames;\n    this.columnTypes = dlData.columnTypes;\n    \n    this.numRows = this.data.length;\n    this.numColumns = dlData.columnNames.length;\n    \n    this.columnIndexes = {'id': 0};\n    for(var c=1;c<this.numColumns;++c) {\n      this.columnIndexes[this.columnNames[c]] = c;\n    }\n  }\n  \n  this.processLzFile = function(blobv, fileName) {\n    var start = new Date().getTime();\n    var stringifiedData = LZString.decompressFromUTF16(blobv);\n    var end = new Date().getTime();\n    var time = end - start;\n    console.log('decompress time: ' + time/1000 + 's for ' + fileName);\n\n    this.processJsonFile(stringifiedData, fileName);\n  }\n  \n  function unzipBlob(blob, callback) {\n    // use a zip.BlobReader object to read zipped data stored into blob variable\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\n      // get entries from the zip file\n      zipReader.getEntries(function(entries) {\n        // get data from the first file\n        entries[0].getData(new zip.BlobWriter(), function(data) {\n          // close the reader and calls callback function with uncompressed data as parameter\n          zipReader.close();\n          callback(data);\n        });\n      });\n    }, onerror);\n  }\n  \n  function onerror(message) {\n    console.error(message);\n  }\n}","function DnTranslations() {\n  // module used to load uistring.xml files\n\n  // the data\n  this.data = null;\n  this.sizeLimit = null;\n  \n  // function to lookup some string value by its id\n  // this will also work with values that have a number\n  // of mids enclosed in curly brackets\n  this.translate = function(value) {\n    if(this.data === null) {\n      return value;\n    }\n    var result = \"\";\n    \n    if(value === 0 || value === \"\" || value === null) {\n      result = value;\n    }\n    else if(value.toString().indexOf(',') > -1) {\n      var values = value.toString().split(',');\n      \n      var results = []\n      for(var v=0;v<values.length;++v) {\n        var stripped = values[v].replace(\"{\", \"\").replace(\"}\", \"\");\n        results.push(values[v].replace(stripped, this.translate(stripped)));\n      }\n      \n      result = results.join(',');\n    }\n    else {\n      result = this.data[value];\n      if(typeof result === 'undefined') {\n        if(typeof value === 'string') {\n          if(value.indexOf('{') == 0) {\n            var stripped = value.replace(\"{\", \"\").replace(\"}\", \"\");\n            result = value.replace(stripped, this.translate(stripped));\n          }\n          else {\n            result = value.toString();\n          }\n        }\n        else {\n          result = value;\n        }\n      }\n      else if(typeof value === 'string' && result.indexOf('#N/A') == 0) {\n        result = '';\n      }\n    }\n    \n    return result;\n  }\n  \n  // function to read in the xml data\n  // and store it as an array for fast access\n  // once loaded it tries to store the data in UIStrings session storage\n  this.process = function(xmlFileAsString, callback, complete) {\n    this.data = {}\n    var numItems = 0;\n    \n    // console.log(\"processing:\");\n    var parser = new DOMParser();\n    var xmlData = parser.parseFromString(xmlFileAsString,\"text/xml\");\n    var elements = xmlData.getElementsByTagName(\"message\");\n    \n    for(var m=0;m<elements.length;++m) {\n      var text = elements[m].textContent;\n      if(this.sizeLimit === null || text.length < this.sizeLimit) {\n        var mid = elements[m].getAttribute(\"mid\");\n        this.data[mid] = text;\n        numItems++;\n      }\n    }\n  \n    try {\n      var stringifiedData = JSON.stringify(this.data);\n      sessionStorage.setItem('UIStrings', LZString.compressToUTF16(stringifiedData));\n      callback('stored ui strings for later');\n    }\n    catch (ex) {\n      console.log('error setting strings ' + ex);\n      console.log(ex.stack);\n    }\n    \n    callback('loaded ' + numItems + ' translations');\n    complete();\n  }\n  \n  this.loadFromSession = function() {\n    try {\n      this.data = null;\n      \n      var savedData = sessionStorage.getItem('UIStrings'); \n      if(savedData === null) {\n        return false;\n      }\n      \n      var stringifiedData = LZString.decompressFromUTF16(savedData);\n      this.data = JSON.parse(stringifiedData);\n      console.log('got ui strings from local storage');\n      return true;\n    }\n    catch(ex) {\n      console.log('couldnt get ui strings ' + ex);\n      // no worries, just load the default\n      return false;\n    }\n  }\n  \n  // function to load xml file from url\n  // if the file is not found we look for a zip verison and then unzip it\n  // it tries to find the already loaded data in UIStrings session storage\n  // and uses this if it can\n  this.loadDefaultFile = function(fileName, callback, complete, fail) {\n    // console.log(\"about to load\");\n    \n    this.loadFromSession();\n    \n    if(this.data != null && typeof this.data === 'object') {\n      callback('using uistrings stored in local storage');\n      complete();\n    }\n    else if(fileName === null) {\n      callback('Translation location required');\n    }\n    else {\n      console.log('data still not set');\n      \n      localStorage.setItem('UIStrings_file', fileName);\n    \n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', fileName, true);\n      if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n        xhr.responseType = 'blob';\n      }\n      else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\n        xhr.responseType = 'document';\n      }\n      else {\n        xhr.responseType = 'text';\n      }\n      \n      callback('downloading translation file ' + fileName);\n      \n      var t = this;\n      xhr.onerror = function(e) {\n        console.log('what! error ', e);\n        fail('Cannot load file' + e);\n      }\n      \n      xhr.ontimeout = function(e) {\n        console.log('what! timeout ', e);\n        fail('Timeout loading file' + e);\n      }\n      \n      xhr.onload = function(e) {\n        \n        if (this.status === 200) {\n          \n          callback('loading translations from ' + fileName);\n          var start = new Date().getTime();\n          \n          var blobv = this.response;\n          \n          console.log(\"reading zip\");\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n            sessionStorage.setItem('UIStrings', blobv);\n            t.loadFromSession();\n            callback('using lzjson translations');\n            complete();\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('translations process time: ' + time/1000 + 's');\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n            unzipBlobToText(blobv, function(unZippedData) {\n              console.log('got entry data');\n              callback('loading xml');\n              console.log(\"unzipped: \" + unZippedData.length.toLocaleString() + \" bytes\");\n              t.process(unZippedData, callback, complete);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n              console.log('translations process time: ' + time/1000 + 's');\n            });\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.XML') === fileName.length-4) {\n            callback('using xml translations');\n            t.process(blobv, callback, complete);\n            \n            var end = new Date().getTime();\n            var time = end - start;\n            console.log('translations process time: ' + time/1000 + 's');\n          }\n          \n        }\n        else {\n          // if we get an error we can try to see if there is a zip version there\n          if(fileName.toUpperCase().lastIndexOf('.LZJSON') === fileName.length-7) {\n            var baseFileName = fileName.substr(0,fileName.length-7);\n            t.loadDefaultFile(baseFileName + '.zip', callback, complete, fail);\n          }\n          else if(fileName.toUpperCase().lastIndexOf('.ZIP') === fileName.length-4) {\n            var baseFileName = fileName.substr(0,fileName.length-4);\n            t.loadDefaultFile(baseFileName + '.xml', callback, complete, fail);\n          }\n          else {\n            console.log('what status' + this.status + ' ' + fileName);\n            fail(this.status + ': Cannot load file, couldnt load zip either: ' + fileName);\n          }\n        }\n      };\n      xhr.send();\n    }\n  }\n\n  function unzipBlobToText(blob, callback) {\n    // use a zip.BlobReader object to read zipped data stored into blob variable\n    zip.createReader(new zip.BlobReader(blob), function(zipReader) {\n      // get entries from the zip file\n      zipReader.getEntries(function(entries) {\n        // get data from the first file\n        entries[0].getData(new zip.TextWriter(\"text/plain\"), function(data) {\n          // close the reader and calls callback function with uncompressed data as parameter\n          zipReader.close();\n          callback(data);\n        });\n      });\n    }, onerror);\n  }\n  \n  function onerror(message) {\n    console.error(message);\n  }\n}\n"]}